
Drone_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c72c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a8  0800c8c0  0800c8c0  0000d8c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd68  0800cd68  0000e1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800cd68  0800cd68  0000dd68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cd70  0800cd70  0000e1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cd70  0800cd70  0000dd70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cd74  0800cd74  0000dd74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800cd78  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e8  200001d8  0800cf50  0000e1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006c0  0800cf50  0000e6c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001476d  00000000  00000000  0000e208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028af  00000000  00000000  00022975  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012e8  00000000  00000000  00025228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ed7  00000000  00000000  00026510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000285ea  00000000  00000000  000273e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016287  00000000  00000000  0004f9d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7e94  00000000  00000000  00065c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015daec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006668  00000000  00000000  0015db30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00164198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c8a4 	.word	0x0800c8a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800c8a4 	.word	0x0800c8a4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <PID_Init>:
#include "PID.h"

void PID_Init(PID *pid, float kp, float ki, float kd, float dt) {
 8001020:	b480      	push	{r7}
 8001022:	b087      	sub	sp, #28
 8001024:	af00      	add	r7, sp, #0
 8001026:	6178      	str	r0, [r7, #20]
 8001028:	ed87 0a04 	vstr	s0, [r7, #16]
 800102c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001030:	ed87 1a02 	vstr	s2, [r7, #8]
 8001034:	edc7 1a01 	vstr	s3, [r7, #4]
    pid->kp = kp;
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	601a      	str	r2, [r3, #0]
    pid->ki = ki;
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	68fa      	ldr	r2, [r7, #12]
 8001042:	605a      	str	r2, [r3, #4]
    pid->kd = kd;
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	68ba      	ldr	r2, [r7, #8]
 8001048:	609a      	str	r2, [r3, #8]
    pid->dt = dt;
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	60da      	str	r2, [r3, #12]
    pid->integral = 0.0f;
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	f04f 0200 	mov.w	r2, #0
 8001056:	611a      	str	r2, [r3, #16]
    pid->previous_error = 0.0f;
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	f04f 0200 	mov.w	r2, #0
 800105e:	615a      	str	r2, [r3, #20]
    pid->anti_windup = 100.0f; // Initialize anti-windup term
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	4a04      	ldr	r2, [pc, #16]	@ (8001074 <PID_Init+0x54>)
 8001064:	619a      	str	r2, [r3, #24]
}
 8001066:	bf00      	nop
 8001068:	371c      	adds	r7, #28
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	42c80000 	.word	0x42c80000

08001078 <PID_Compute>:

float PID_Compute(PID *pid, float setpoint, float measured_value) {
 8001078:	b480      	push	{r7}
 800107a:	b089      	sub	sp, #36	@ 0x24
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	ed87 0a02 	vstr	s0, [r7, #8]
 8001084:	edc7 0a01 	vstr	s1, [r7, #4]
    // Calculate error
    float error = setpoint - measured_value;
 8001088:	ed97 7a02 	vldr	s14, [r7, #8]
 800108c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001090:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001094:	edc7 7a07 	vstr	s15, [r7, #28]

    // Proportional term
    float proportional = pid->kp * error;
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	edd3 7a00 	vldr	s15, [r3]
 800109e:	ed97 7a07 	vldr	s14, [r7, #28]
 80010a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010a6:	edc7 7a06 	vstr	s15, [r7, #24]

    // Integral term
    pid->integral += pid->ki * error * pid->dt;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	ed93 7a04 	vldr	s14, [r3, #16]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	edd3 6a01 	vldr	s13, [r3, #4]
 80010b6:	edd7 7a07 	vldr	s15, [r7, #28]
 80010ba:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	edd3 7a03 	vldr	s15, [r3, #12]
 80010c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	edc3 7a04 	vstr	s15, [r3, #16]

    // Anti-windup
    if (pid->integral > pid->anti_windup) {
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	ed93 7a04 	vldr	s14, [r3, #16]
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	edd3 7a06 	vldr	s15, [r3, #24]
 80010de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010e6:	dd04      	ble.n	80010f2 <PID_Compute+0x7a>
        pid->integral = pid->anti_windup;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	699a      	ldr	r2, [r3, #24]
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	611a      	str	r2, [r3, #16]
 80010f0:	e014      	b.n	800111c <PID_Compute+0xa4>
    } else if (pid->integral < -pid->anti_windup) {
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	ed93 7a04 	vldr	s14, [r3, #16]
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	edd3 7a06 	vldr	s15, [r3, #24]
 80010fe:	eef1 7a67 	vneg.f32	s15, s15
 8001102:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800110a:	d507      	bpl.n	800111c <PID_Compute+0xa4>
        pid->integral = -pid->anti_windup;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001112:	eef1 7a67 	vneg.f32	s15, s15
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	edc3 7a04 	vstr	s15, [r3, #16]
    }

    // Derivative term
    float derivative = pid->kd * (error - pid->previous_error) / pid->dt;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	edd3 7a05 	vldr	s15, [r3, #20]
 8001128:	edd7 6a07 	vldr	s13, [r7, #28]
 800112c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001130:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	ed93 7a03 	vldr	s14, [r3, #12]
 800113a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800113e:	edc7 7a05 	vstr	s15, [r7, #20]

    // Update previous error
    pid->previous_error = error;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	69fa      	ldr	r2, [r7, #28]
 8001146:	615a      	str	r2, [r3, #20]

    // Compute output
    return proportional + pid->integral + derivative;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	ed93 7a04 	vldr	s14, [r3, #16]
 800114e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001152:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001156:	edd7 7a05 	vldr	s15, [r7, #20]
 800115a:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800115e:	eeb0 0a67 	vmov.f32	s0, s15
 8001162:	3724      	adds	r7, #36	@ 0x24
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <Accelerometer_Init>:
 * and ensures it is ready for operation.
 *
 * @note This function should be called before attempting to read data from the accelerometer.
 */
void Accelerometer_Init(I2C_HandleTypeDef *hi2c)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b088      	sub	sp, #32
 8001170:	af04      	add	r7, sp, #16
 8001172:	6078      	str	r0, [r7, #4]
    uint8_t data = 0;
 8001174:	2300      	movs	r3, #0
 8001176:	73fb      	strb	r3, [r7, #15]
    uint8_t check;
    // Read WHO_AM_I register (0x75) to check if the device is connected
    HAL_I2C_Mem_Read(hi2c, MPU6050_ADDR, 0x75, 1, &check, 1, 1000);
 8001178:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800117c:	9302      	str	r3, [sp, #8]
 800117e:	2301      	movs	r3, #1
 8001180:	9301      	str	r3, [sp, #4]
 8001182:	f107 030e 	add.w	r3, r7, #14
 8001186:	9300      	str	r3, [sp, #0]
 8001188:	2301      	movs	r3, #1
 800118a:	2275      	movs	r2, #117	@ 0x75
 800118c:	21d0      	movs	r1, #208	@ 0xd0
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f002 fb1c 	bl	80037cc <HAL_I2C_Mem_Read>
    if (check != 0x68) {
 8001194:	7bbb      	ldrb	r3, [r7, #14]
 8001196:	2b68      	cmp	r3, #104	@ 0x68
 8001198:	d13e      	bne.n	8001218 <Accelerometer_Init+0xac>
        // Device not found, handle error
        return;
    }
    // PWR_MGMT_1 Register (0x6B) : wake-up
    HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, 0x6B, 1, &data, 1, 1000);
 800119a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800119e:	9302      	str	r3, [sp, #8]
 80011a0:	2301      	movs	r3, #1
 80011a2:	9301      	str	r3, [sp, #4]
 80011a4:	f107 030f 	add.w	r3, r7, #15
 80011a8:	9300      	str	r3, [sp, #0]
 80011aa:	2301      	movs	r3, #1
 80011ac:	226b      	movs	r2, #107	@ 0x6b
 80011ae:	21d0      	movs	r1, #208	@ 0xd0
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f002 f9f7 	bl	80035a4 <HAL_I2C_Mem_Write>
    // Set DATA RATE of 1kHz by writing SMPLRT_DIV register
    data = 0x07; // 1000 Hz / (1 + 7) = 125 Hz
 80011b6:	2307      	movs	r3, #7
 80011b8:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, 0x19, 1, &data, 1, 1000);
 80011ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011be:	9302      	str	r3, [sp, #8]
 80011c0:	2301      	movs	r3, #1
 80011c2:	9301      	str	r3, [sp, #4]
 80011c4:	f107 030f 	add.w	r3, r7, #15
 80011c8:	9300      	str	r3, [sp, #0]
 80011ca:	2301      	movs	r3, #1
 80011cc:	2219      	movs	r2, #25
 80011ce:	21d0      	movs	r1, #208	@ 0xd0
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f002 f9e7 	bl	80035a4 <HAL_I2C_Mem_Write>
    // Set accelerometer configuration in ACCEL_CONFIG Register (0x1C)
    data = 0x00; // ±2g full scale
 80011d6:	2300      	movs	r3, #0
 80011d8:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, 0x1C, 1, &data, 1, 1000);
 80011da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011de:	9302      	str	r3, [sp, #8]
 80011e0:	2301      	movs	r3, #1
 80011e2:	9301      	str	r3, [sp, #4]
 80011e4:	f107 030f 	add.w	r3, r7, #15
 80011e8:	9300      	str	r3, [sp, #0]
 80011ea:	2301      	movs	r3, #1
 80011ec:	221c      	movs	r2, #28
 80011ee:	21d0      	movs	r1, #208	@ 0xd0
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f002 f9d7 	bl	80035a4 <HAL_I2C_Mem_Write>
    // set Gyroscopic configuration in GYRO_CONFIG Register (0x1B)
    data = 0x00; // ±250°/s full scale
 80011f6:	2300      	movs	r3, #0
 80011f8:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, 0x1B, 1, &data, 1, 1000);
 80011fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011fe:	9302      	str	r3, [sp, #8]
 8001200:	2301      	movs	r3, #1
 8001202:	9301      	str	r3, [sp, #4]
 8001204:	f107 030f 	add.w	r3, r7, #15
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	2301      	movs	r3, #1
 800120c:	221b      	movs	r2, #27
 800120e:	21d0      	movs	r1, #208	@ 0xd0
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f002 f9c7 	bl	80035a4 <HAL_I2C_Mem_Write>
 8001216:	e000      	b.n	800121a <Accelerometer_Init+0xae>
        return;
 8001218:	bf00      	nop
}
 800121a:	3710      	adds	r7, #16
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <Accelerometer_Read>:
 * acceleration information.
 *
 * @return int Returns 0 on success, or a negative error code on failure.
 */
void Accelerometer_Read(I2C_HandleTypeDef *hi2c, AccelData *accel_data, GyroData *gyro_data)
{    
 8001220:	b580      	push	{r7, lr}
 8001222:	b08a      	sub	sp, #40	@ 0x28
 8001224:	af04      	add	r7, sp, #16
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from ACCEL_XOUT_H (0x3B) Register
    HAL_I2C_Mem_Read(hi2c, MPU6050_ADDR, 0x3B, 1, Rec_Data, 6, 1000);
 800122c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001230:	9302      	str	r3, [sp, #8]
 8001232:	2306      	movs	r3, #6
 8001234:	9301      	str	r3, [sp, #4]
 8001236:	f107 0310 	add.w	r3, r7, #16
 800123a:	9300      	str	r3, [sp, #0]
 800123c:	2301      	movs	r3, #1
 800123e:	223b      	movs	r2, #59	@ 0x3b
 8001240:	21d0      	movs	r1, #208	@ 0xd0
 8001242:	68f8      	ldr	r0, [r7, #12]
 8001244:	f002 fac2 	bl	80037cc <HAL_I2C_Mem_Read>
    // Convert the data to 16-bit signed integers
    accel_data->x = (int16_t)((Rec_Data[0] << 8) | Rec_Data[1]);
 8001248:	7c3b      	ldrb	r3, [r7, #16]
 800124a:	b21b      	sxth	r3, r3
 800124c:	021b      	lsls	r3, r3, #8
 800124e:	b21a      	sxth	r2, r3
 8001250:	7c7b      	ldrb	r3, [r7, #17]
 8001252:	b21b      	sxth	r3, r3
 8001254:	4313      	orrs	r3, r2
 8001256:	b21b      	sxth	r3, r3
 8001258:	ee07 3a90 	vmov	s15, r3
 800125c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	edc3 7a00 	vstr	s15, [r3]
    accel_data->y = (int16_t)((Rec_Data[2] << 8) | Rec_Data[3]);
 8001266:	7cbb      	ldrb	r3, [r7, #18]
 8001268:	b21b      	sxth	r3, r3
 800126a:	021b      	lsls	r3, r3, #8
 800126c:	b21a      	sxth	r2, r3
 800126e:	7cfb      	ldrb	r3, [r7, #19]
 8001270:	b21b      	sxth	r3, r3
 8001272:	4313      	orrs	r3, r2
 8001274:	b21b      	sxth	r3, r3
 8001276:	ee07 3a90 	vmov	s15, r3
 800127a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	edc3 7a01 	vstr	s15, [r3, #4]
    accel_data->z = (int16_t)((Rec_Data[4] << 8) | Rec_Data[5]);
 8001284:	7d3b      	ldrb	r3, [r7, #20]
 8001286:	b21b      	sxth	r3, r3
 8001288:	021b      	lsls	r3, r3, #8
 800128a:	b21a      	sxth	r2, r3
 800128c:	7d7b      	ldrb	r3, [r7, #21]
 800128e:	b21b      	sxth	r3, r3
 8001290:	4313      	orrs	r3, r2
 8001292:	b21b      	sxth	r3, r3
 8001294:	ee07 3a90 	vmov	s15, r3
 8001298:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	edc3 7a02 	vstr	s15, [r3, #8]
    // Convert raw value to g-force
    accel_data->x = (float)accel_data->x / 16384.0f; // For ±2g full scale
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	ed93 7a00 	vldr	s14, [r3]
 80012a8:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8001398 <Accelerometer_Read+0x178>
 80012ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	edc3 7a00 	vstr	s15, [r3]
    accel_data->y = (float)accel_data->y / 16384.0f; 
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	ed93 7a01 	vldr	s14, [r3, #4]
 80012bc:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8001398 <Accelerometer_Read+0x178>
 80012c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	edc3 7a01 	vstr	s15, [r3, #4]
    accel_data->z = (float)accel_data->z / 16384.0f;
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	ed93 7a02 	vldr	s14, [r3, #8]
 80012d0:	eddf 6a31 	vldr	s13, [pc, #196]	@ 8001398 <Accelerometer_Read+0x178>
 80012d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	edc3 7a02 	vstr	s15, [r3, #8]

    // Read 6 BYTES of data starting from GYRO_XOUT_H (0x43) Register
    HAL_I2C_Mem_Read(hi2c, MPU6050_ADDR, 0x43, 1, Rec_Data, 6, 1000);
 80012de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012e2:	9302      	str	r3, [sp, #8]
 80012e4:	2306      	movs	r3, #6
 80012e6:	9301      	str	r3, [sp, #4]
 80012e8:	f107 0310 	add.w	r3, r7, #16
 80012ec:	9300      	str	r3, [sp, #0]
 80012ee:	2301      	movs	r3, #1
 80012f0:	2243      	movs	r2, #67	@ 0x43
 80012f2:	21d0      	movs	r1, #208	@ 0xd0
 80012f4:	68f8      	ldr	r0, [r7, #12]
 80012f6:	f002 fa69 	bl	80037cc <HAL_I2C_Mem_Read>
    // Convert the data to 16-bit signed integers
    gyro_data->x = (int16_t)((Rec_Data[0] << 8) | Rec_Data[1]);
 80012fa:	7c3b      	ldrb	r3, [r7, #16]
 80012fc:	b21b      	sxth	r3, r3
 80012fe:	021b      	lsls	r3, r3, #8
 8001300:	b21a      	sxth	r2, r3
 8001302:	7c7b      	ldrb	r3, [r7, #17]
 8001304:	b21b      	sxth	r3, r3
 8001306:	4313      	orrs	r3, r2
 8001308:	b21b      	sxth	r3, r3
 800130a:	ee07 3a90 	vmov	s15, r3
 800130e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	edc3 7a00 	vstr	s15, [r3]
    gyro_data->y = (int16_t)((Rec_Data[2] << 8) | Rec_Data[3]);
 8001318:	7cbb      	ldrb	r3, [r7, #18]
 800131a:	b21b      	sxth	r3, r3
 800131c:	021b      	lsls	r3, r3, #8
 800131e:	b21a      	sxth	r2, r3
 8001320:	7cfb      	ldrb	r3, [r7, #19]
 8001322:	b21b      	sxth	r3, r3
 8001324:	4313      	orrs	r3, r2
 8001326:	b21b      	sxth	r3, r3
 8001328:	ee07 3a90 	vmov	s15, r3
 800132c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	edc3 7a01 	vstr	s15, [r3, #4]
    gyro_data->z = (int16_t)((Rec_Data[4] << 8) | Rec_Data[5]);
 8001336:	7d3b      	ldrb	r3, [r7, #20]
 8001338:	b21b      	sxth	r3, r3
 800133a:	021b      	lsls	r3, r3, #8
 800133c:	b21a      	sxth	r2, r3
 800133e:	7d7b      	ldrb	r3, [r7, #21]
 8001340:	b21b      	sxth	r3, r3
 8001342:	4313      	orrs	r3, r2
 8001344:	b21b      	sxth	r3, r3
 8001346:	ee07 3a90 	vmov	s15, r3
 800134a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	edc3 7a02 	vstr	s15, [r3, #8]
    // Convert raw value to degrees per second
    gyro_data->x = (float)gyro_data->x / 131.0f; // For ±250°/s full scale
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	ed93 7a00 	vldr	s14, [r3]
 800135a:	eddf 6a10 	vldr	s13, [pc, #64]	@ 800139c <Accelerometer_Read+0x17c>
 800135e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	edc3 7a00 	vstr	s15, [r3]
    gyro_data->y = (float)gyro_data->y / 131.0f;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	ed93 7a01 	vldr	s14, [r3, #4]
 800136e:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 800139c <Accelerometer_Read+0x17c>
 8001372:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	edc3 7a01 	vstr	s15, [r3, #4]
    gyro_data->z = (float)gyro_data->z / 131.0f; 
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001382:	eddf 6a06 	vldr	s13, [pc, #24]	@ 800139c <Accelerometer_Read+0x17c>
 8001386:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001390:	bf00      	nop
 8001392:	3718      	adds	r7, #24
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	46800000 	.word	0x46800000
 800139c:	43030000 	.word	0x43030000

080013a0 <angles_from_accel>:
 *
 * @param accel_data Structure containing accelerometer data (x, y, z).
 * @param pitch Pointer to store the calculated pitch angle (in degrees).
 * @param roll Pointer to store the calculated roll angle (in degrees).
 */
void angles_from_accel(AccelData accel_data, float *pitch, float *roll) {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	ed2d 8b02 	vpush	{d8}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	eef0 6a40 	vmov.f32	s13, s0
 80013ae:	eeb0 7a60 	vmov.f32	s14, s1
 80013b2:	eef0 7a41 	vmov.f32	s15, s2
 80013b6:	60b8      	str	r0, [r7, #8]
 80013b8:	6079      	str	r1, [r7, #4]
 80013ba:	edc7 6a03 	vstr	s13, [r7, #12]
 80013be:	ed87 7a04 	vstr	s14, [r7, #16]
 80013c2:	edc7 7a05 	vstr	s15, [r7, #20]
    *pitch = atan2f(accel_data.y, sqrtf(accel_data.x * accel_data.x + accel_data.z * accel_data.z)) * (180.0f / M_PI);
 80013c6:	ed97 8a04 	vldr	s16, [r7, #16]
 80013ca:	ed97 7a03 	vldr	s14, [r7, #12]
 80013ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80013d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013d6:	edd7 6a05 	vldr	s13, [r7, #20]
 80013da:	edd7 7a05 	vldr	s15, [r7, #20]
 80013de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013e6:	eeb0 0a67 	vmov.f32	s0, s15
 80013ea:	f00b f8bd 	bl	800c568 <sqrtf>
 80013ee:	eef0 7a40 	vmov.f32	s15, s0
 80013f2:	eef0 0a67 	vmov.f32	s1, s15
 80013f6:	eeb0 0a48 	vmov.f32	s0, s16
 80013fa:	f00b f8b3 	bl	800c564 <atan2f>
 80013fe:	ee10 3a10 	vmov	r3, s0
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff f8a0 	bl	8000548 <__aeabi_f2d>
 8001408:	a323      	add	r3, pc, #140	@ (adr r3, 8001498 <angles_from_accel+0xf8>)
 800140a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800140e:	f7ff f8f3 	bl	80005f8 <__aeabi_dmul>
 8001412:	4602      	mov	r2, r0
 8001414:	460b      	mov	r3, r1
 8001416:	4610      	mov	r0, r2
 8001418:	4619      	mov	r1, r3
 800141a:	f7ff fbe5 	bl	8000be8 <__aeabi_d2f>
 800141e:	4602      	mov	r2, r0
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	601a      	str	r2, [r3, #0]
    *roll = atan2f(-accel_data.x, sqrtf(accel_data.y * accel_data.y + accel_data.z * accel_data.z)) * (180.0f / M_PI);
 8001424:	edd7 7a03 	vldr	s15, [r7, #12]
 8001428:	eeb1 8a67 	vneg.f32	s16, s15
 800142c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001430:	edd7 7a04 	vldr	s15, [r7, #16]
 8001434:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001438:	edd7 6a05 	vldr	s13, [r7, #20]
 800143c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001440:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001444:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001448:	eeb0 0a67 	vmov.f32	s0, s15
 800144c:	f00b f88c 	bl	800c568 <sqrtf>
 8001450:	eef0 7a40 	vmov.f32	s15, s0
 8001454:	eef0 0a67 	vmov.f32	s1, s15
 8001458:	eeb0 0a48 	vmov.f32	s0, s16
 800145c:	f00b f882 	bl	800c564 <atan2f>
 8001460:	ee10 3a10 	vmov	r3, s0
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff f86f 	bl	8000548 <__aeabi_f2d>
 800146a:	a30b      	add	r3, pc, #44	@ (adr r3, 8001498 <angles_from_accel+0xf8>)
 800146c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001470:	f7ff f8c2 	bl	80005f8 <__aeabi_dmul>
 8001474:	4602      	mov	r2, r0
 8001476:	460b      	mov	r3, r1
 8001478:	4610      	mov	r0, r2
 800147a:	4619      	mov	r1, r3
 800147c:	f7ff fbb4 	bl	8000be8 <__aeabi_d2f>
 8001480:	4602      	mov	r2, r0
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	601a      	str	r2, [r3, #0]
}
 8001486:	bf00      	nop
 8001488:	3718      	adds	r7, #24
 800148a:	46bd      	mov	sp, r7
 800148c:	ecbd 8b02 	vpop	{d8}
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	f3af 8000 	nop.w
 8001498:	1a63c1f8 	.word	0x1a63c1f8
 800149c:	404ca5dc 	.word	0x404ca5dc

080014a0 <angles_rate_from_gyro>:
 *
 * @param gyro_data Structure containing gyroscope data (x, y, z).
 * @param pitch_rate Pointer to store the calculated pitch rate (in degrees per second).
 * @param roll_rate Pointer to store the calculated roll rate (in degrees per second).
 */
void angles_rate_from_gyro(GyroData gyro_data, float *pitch_rate, float *roll_rate) {
 80014a0:	b480      	push	{r7}
 80014a2:	b087      	sub	sp, #28
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	eef0 6a40 	vmov.f32	s13, s0
 80014aa:	eeb0 7a60 	vmov.f32	s14, s1
 80014ae:	eef0 7a41 	vmov.f32	s15, s2
 80014b2:	60b8      	str	r0, [r7, #8]
 80014b4:	6079      	str	r1, [r7, #4]
 80014b6:	edc7 6a03 	vstr	s13, [r7, #12]
 80014ba:	ed87 7a04 	vstr	s14, [r7, #16]
 80014be:	edc7 7a05 	vstr	s15, [r7, #20]
    *pitch_rate = gyro_data.y; // Gyro Y-axis for pitch rate
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	601a      	str	r2, [r3, #0]
    *roll_rate = gyro_data.x;  // Gyro X-axis for roll rate
 80014c8:	68fa      	ldr	r2, [r7, #12]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	601a      	str	r2, [r3, #0]
}
 80014ce:	bf00      	nop
 80014d0:	371c      	adds	r7, #28
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr

080014da <yaw_from_gyro>:

void yaw_from_gyro(GyroData gyro_data, float *yaw, float dt) {
 80014da:	b480      	push	{r7}
 80014dc:	b087      	sub	sp, #28
 80014de:	af00      	add	r7, sp, #0
 80014e0:	eef0 6a40 	vmov.f32	s13, s0
 80014e4:	eeb0 7a60 	vmov.f32	s14, s1
 80014e8:	eef0 7a41 	vmov.f32	s15, s2
 80014ec:	60b8      	str	r0, [r7, #8]
 80014ee:	edc7 1a01 	vstr	s3, [r7, #4]
 80014f2:	edc7 6a03 	vstr	s13, [r7, #12]
 80014f6:	ed87 7a04 	vstr	s14, [r7, #16]
 80014fa:	edc7 7a05 	vstr	s15, [r7, #20]
    // Integrate the gyroscope Z-axis data to get yaw angle
    *yaw += gyro_data.z * dt; // Gyro Z-axis for yaw rate
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	ed93 7a00 	vldr	s14, [r3]
 8001504:	edd7 6a05 	vldr	s13, [r7, #20]
 8001508:	edd7 7a01 	vldr	s15, [r7, #4]
 800150c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001510:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	edc3 7a00 	vstr	s15, [r3]
}
 800151a:	bf00      	nop
 800151c:	371c      	adds	r7, #28
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
	...

08001528 <Kalman_Init>:
 * @param init_covariance Initial estimate of the error covariance.
 * @param process_noise Process noise covariance (Q).
 * @param measurement_noise Measurement noise covariance (R).
 */
void Kalman_Init(Kalman_t *kalman_x, Kalman_t *kalman_y)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
    // Initialize Kalman filter parameters for X, Y, and Z axes
    kalman_x->angle = 0.0f;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f04f 0200 	mov.w	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
    kalman_x->bias = 0.0f;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f04f 0200 	mov.w	r2, #0
 8001540:	605a      	str	r2, [r3, #4]
    kalman_x->rate = 0.0f;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	f04f 0200 	mov.w	r2, #0
 8001548:	609a      	str	r2, [r3, #8]
    kalman_x->P[0][0] = 1.0f; // P[0][0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001550:	60da      	str	r2, [r3, #12]
    kalman_x->P[0][1] = 0.0f; // P[0][1]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f04f 0200 	mov.w	r2, #0
 8001558:	611a      	str	r2, [r3, #16]
    kalman_x->P[1][0] = 0.0f; // P[1][0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f04f 0200 	mov.w	r2, #0
 8001560:	615a      	str	r2, [r3, #20]
    kalman_x->P[1][1] = 1.0f; // P[1][1]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001568:	619a      	str	r2, [r3, #24]
    kalman_x->Q_angle = 0.001f; // Process noise covariance for angle
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a19      	ldr	r2, [pc, #100]	@ (80015d4 <Kalman_Init+0xac>)
 800156e:	61da      	str	r2, [r3, #28]
    kalman_x->Q_bias = 0.003f; // Process noise covariance for bias
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	4a19      	ldr	r2, [pc, #100]	@ (80015d8 <Kalman_Init+0xb0>)
 8001574:	621a      	str	r2, [r3, #32]
    kalman_x->R_measure = 0.03f; // Measurement noise covariance
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a18      	ldr	r2, [pc, #96]	@ (80015dc <Kalman_Init+0xb4>)
 800157a:	625a      	str	r2, [r3, #36]	@ 0x24

    kalman_y->angle = 0.0f;
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	f04f 0200 	mov.w	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
    kalman_y->bias = 0.0f;
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	f04f 0200 	mov.w	r2, #0
 800158a:	605a      	str	r2, [r3, #4]
    kalman_y->rate = 0.0f;
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	f04f 0200 	mov.w	r2, #0
 8001592:	609a      	str	r2, [r3, #8]
    kalman_y->P[0][0] = 1.0f;
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800159a:	60da      	str	r2, [r3, #12]
    kalman_y->P[0][1] = 0.0f;
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	f04f 0200 	mov.w	r2, #0
 80015a2:	611a      	str	r2, [r3, #16]
    kalman_y->P[1][0] = 0.0f;
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	f04f 0200 	mov.w	r2, #0
 80015aa:	615a      	str	r2, [r3, #20]
    kalman_y->P[1][1] = 1.0f;
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80015b2:	619a      	str	r2, [r3, #24]
    kalman_y->Q_angle = 0.001f;
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	4a07      	ldr	r2, [pc, #28]	@ (80015d4 <Kalman_Init+0xac>)
 80015b8:	61da      	str	r2, [r3, #28]
    kalman_y->Q_bias = 0.003f;
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	4a06      	ldr	r2, [pc, #24]	@ (80015d8 <Kalman_Init+0xb0>)
 80015be:	621a      	str	r2, [r3, #32]
    kalman_y->R_measure = 0.03f;
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	4a06      	ldr	r2, [pc, #24]	@ (80015dc <Kalman_Init+0xb4>)
 80015c4:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80015c6:	bf00      	nop
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	3a83126f 	.word	0x3a83126f
 80015d8:	3b449ba6 	.word	0x3b449ba6
 80015dc:	3cf5c28f 	.word	0x3cf5c28f

080015e0 <Kalman_GetAngle>:
 * @param kalman Pointer to the Kalman filter structure for the axis.
 * @param acc_angle Angle measured from the accelerometer (in degrees).
 * @param gyro_rate Angular rate measured from the gyroscope (in degrees per second).
 * @param dt Time interval since the last update (in seconds).
 */
void Kalman_GetAngle(Kalman_t *kalman, float acc_angle, float gyro_rate, float dt) {
 80015e0:	b480      	push	{r7}
 80015e2:	b08b      	sub	sp, #44	@ 0x2c
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	ed87 0a02 	vstr	s0, [r7, #8]
 80015ec:	edc7 0a01 	vstr	s1, [r7, #4]
 80015f0:	ed87 1a00 	vstr	s2, [r7]
    // 1. Prediction
    kalman->rate = gyro_rate - kalman->bias;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	edd3 7a01 	vldr	s15, [r3, #4]
 80015fa:	ed97 7a01 	vldr	s14, [r7, #4]
 80015fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	edc3 7a02 	vstr	s15, [r3, #8]
    kalman->angle += dt * kalman->rate;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	ed93 7a00 	vldr	s14, [r3]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	edd3 6a02 	vldr	s13, [r3, #8]
 8001614:	edd7 7a00 	vldr	s15, [r7]
 8001618:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800161c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	edc3 7a00 	vstr	s15, [r3]

    // state covariance update
    kalman->P[0][0] += dt * (dt*kalman->P[1][1] - kalman->P[0][1] - kalman->P[1][0] + kalman->Q_angle);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	ed93 7a03 	vldr	s14, [r3, #12]
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	edd3 6a06 	vldr	s13, [r3, #24]
 8001632:	edd7 7a00 	vldr	s15, [r7]
 8001636:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001640:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	edd3 7a05 	vldr	s15, [r3, #20]
 800164a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	edd3 7a07 	vldr	s15, [r3, #28]
 8001654:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001658:	edd7 7a00 	vldr	s15, [r7]
 800165c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001660:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	edc3 7a03 	vstr	s15, [r3, #12]
    kalman->P[0][1] -= dt * kalman->P[1][1];
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	ed93 7a04 	vldr	s14, [r3, #16]
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	edd3 6a06 	vldr	s13, [r3, #24]
 8001676:	edd7 7a00 	vldr	s15, [r7]
 800167a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800167e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	edc3 7a04 	vstr	s15, [r3, #16]
    kalman->P[1][0] -= dt * kalman->P[1][1];
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	ed93 7a05 	vldr	s14, [r3, #20]
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	edd3 6a06 	vldr	s13, [r3, #24]
 8001694:	edd7 7a00 	vldr	s15, [r7]
 8001698:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800169c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	edc3 7a05 	vstr	s15, [r3, #20]
    kalman->P[1][1] += kalman->Q_bias * dt;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	ed93 7a06 	vldr	s14, [r3, #24]
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	edd3 6a08 	vldr	s13, [r3, #32]
 80016b2:	edd7 7a00 	vldr	s15, [r7]
 80016b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	edc3 7a06 	vstr	s15, [r3, #24]

    // 2. update
    float y = acc_angle - kalman->angle; // innovation
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	edd3 7a00 	vldr	s15, [r3]
 80016ca:	ed97 7a02 	vldr	s14, [r7, #8]
 80016ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016d2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float S = kalman->P[0][0] + kalman->R_measure; // incertitude innovation
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	ed93 7a03 	vldr	s14, [r3, #12]
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80016e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016e6:	edc7 7a08 	vstr	s15, [r7, #32]
    float K0 = kalman->P[0][0] / S;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	edd3 6a03 	vldr	s13, [r3, #12]
 80016f0:	ed97 7a08 	vldr	s14, [r7, #32]
 80016f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016f8:	edc7 7a07 	vstr	s15, [r7, #28]
    float K1 = kalman->P[1][0] / S;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	edd3 6a05 	vldr	s13, [r3, #20]
 8001702:	ed97 7a08 	vldr	s14, [r7, #32]
 8001706:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800170a:	edc7 7a06 	vstr	s15, [r7, #24]

    // state update
    kalman->angle += K0 * y;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	ed93 7a00 	vldr	s14, [r3]
 8001714:	edd7 6a07 	vldr	s13, [r7, #28]
 8001718:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800171c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001720:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	edc3 7a00 	vstr	s15, [r3]
    kalman->bias  += K1 * y;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001730:	edd7 6a06 	vldr	s13, [r7, #24]
 8001734:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001738:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800173c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	edc3 7a01 	vstr	s15, [r3, #4]

    // state covariance update
    float P00_temp = kalman->P[0][0];
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	617b      	str	r3, [r7, #20]
    float P01_temp = kalman->P[0][1];
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	691b      	ldr	r3, [r3, #16]
 8001750:	613b      	str	r3, [r7, #16]

    kalman->P[0][0] -= K0 * P00_temp;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	ed93 7a03 	vldr	s14, [r3, #12]
 8001758:	edd7 6a07 	vldr	s13, [r7, #28]
 800175c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001760:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001764:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	edc3 7a03 	vstr	s15, [r3, #12]
    kalman->P[0][1] -= K0 * P01_temp;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	ed93 7a04 	vldr	s14, [r3, #16]
 8001774:	edd7 6a07 	vldr	s13, [r7, #28]
 8001778:	edd7 7a04 	vldr	s15, [r7, #16]
 800177c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001780:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	edc3 7a04 	vstr	s15, [r3, #16]
    kalman->P[1][0] -= K1 * P00_temp;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	ed93 7a05 	vldr	s14, [r3, #20]
 8001790:	edd7 6a06 	vldr	s13, [r7, #24]
 8001794:	edd7 7a05 	vldr	s15, [r7, #20]
 8001798:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800179c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	edc3 7a05 	vstr	s15, [r3, #20]
    kalman->P[1][1] -= K1 * P01_temp;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	ed93 7a06 	vldr	s14, [r3, #24]
 80017ac:	edd7 6a06 	vldr	s13, [r7, #24]
 80017b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80017b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	edc3 7a06 	vstr	s15, [r3, #24]
}
 80017c2:	bf00      	nop
 80017c4:	372c      	adds	r7, #44	@ 0x2c
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80017ce:	b480      	push	{r7}
 80017d0:	b083      	sub	sp, #12
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80017d6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80017da:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d013      	beq.n	800180e <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80017e6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80017ea:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80017ee:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d00b      	beq.n	800180e <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80017f6:	e000      	b.n	80017fa <ITM_SendChar+0x2c>
    {
      __NOP();
 80017f8:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80017fa:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d0f9      	beq.n	80017f8 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001804:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	b2d2      	uxtb	r2, r2
 800180c:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800180e:	687b      	ldr	r3, [r7, #4]
}
 8001810:	4618      	mov	r0, r3
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001820:	f001 fab0 	bl	8002d84 <HAL_Init>

  /* USER CODE BEGIN Init */
  Accelerometer_Init(&hi2c1); // Initialize the accelerometer
 8001824:	48cb      	ldr	r0, [pc, #812]	@ (8001b54 <main+0x338>)
 8001826:	f7ff fca1 	bl	800116c <Accelerometer_Init>
  Kalman_Init(&kalman_pitch, &kalman_roll); // Initialize Kalman filters for x, y, z axes
 800182a:	49cb      	ldr	r1, [pc, #812]	@ (8001b58 <main+0x33c>)
 800182c:	48cb      	ldr	r0, [pc, #812]	@ (8001b5c <main+0x340>)
 800182e:	f7ff fe7b 	bl	8001528 <Kalman_Init>

  // Initialize PID controllers for pitch and roll
  PID_Init(&pid_pitch, 1.0f, 0.1f, 0.01f, dt); // Initialize PID for pitch
 8001832:	4bcb      	ldr	r3, [pc, #812]	@ (8001b60 <main+0x344>)
 8001834:	edd3 7a00 	vldr	s15, [r3]
 8001838:	eef0 1a67 	vmov.f32	s3, s15
 800183c:	ed9f 1ac9 	vldr	s2, [pc, #804]	@ 8001b64 <main+0x348>
 8001840:	eddf 0ac9 	vldr	s1, [pc, #804]	@ 8001b68 <main+0x34c>
 8001844:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001848:	48c8      	ldr	r0, [pc, #800]	@ (8001b6c <main+0x350>)
 800184a:	f7ff fbe9 	bl	8001020 <PID_Init>
  PID_Init(&pid_roll, 1.0f, 0.1f, 0.01f, dt); // Initialize PID for roll
 800184e:	4bc4      	ldr	r3, [pc, #784]	@ (8001b60 <main+0x344>)
 8001850:	edd3 7a00 	vldr	s15, [r3]
 8001854:	eef0 1a67 	vmov.f32	s3, s15
 8001858:	ed9f 1ac2 	vldr	s2, [pc, #776]	@ 8001b64 <main+0x348>
 800185c:	eddf 0ac2 	vldr	s1, [pc, #776]	@ 8001b68 <main+0x34c>
 8001860:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001864:	48c2      	ldr	r0, [pc, #776]	@ (8001b70 <main+0x354>)
 8001866:	f7ff fbdb 	bl	8001020 <PID_Init>
  PID_Init(&pid_thrust, 1.0f, 0.1f, 0.01f, dt); // Initialize PID for thrust
 800186a:	4bbd      	ldr	r3, [pc, #756]	@ (8001b60 <main+0x344>)
 800186c:	edd3 7a00 	vldr	s15, [r3]
 8001870:	eef0 1a67 	vmov.f32	s3, s15
 8001874:	ed9f 1abb 	vldr	s2, [pc, #748]	@ 8001b64 <main+0x348>
 8001878:	eddf 0abb 	vldr	s1, [pc, #748]	@ 8001b68 <main+0x34c>
 800187c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001880:	48bc      	ldr	r0, [pc, #752]	@ (8001b74 <main+0x358>)
 8001882:	f7ff fbcd 	bl	8001020 <PID_Init>
  PID_Init(&pid_yaw, 1.0f, 0.1f, 0.01f, dt); // Initialize PID for yaw (if needed)
 8001886:	4bb6      	ldr	r3, [pc, #728]	@ (8001b60 <main+0x344>)
 8001888:	edd3 7a00 	vldr	s15, [r3]
 800188c:	eef0 1a67 	vmov.f32	s3, s15
 8001890:	ed9f 1ab4 	vldr	s2, [pc, #720]	@ 8001b64 <main+0x348>
 8001894:	eddf 0ab4 	vldr	s1, [pc, #720]	@ 8001b68 <main+0x34c>
 8001898:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800189c:	48b6      	ldr	r0, [pc, #728]	@ (8001b78 <main+0x35c>)
 800189e:	f7ff fbbf 	bl	8001020 <PID_Init>

  timestamp = 0;
 80018a2:	4bb6      	ldr	r3, [pc, #728]	@ (8001b7c <main+0x360>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018a8:	f000 f9d2 	bl	8001c50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018ac:	f000 fdfa 	bl	80024a4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80018b0:	f000 fdc8 	bl	8002444 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80018b4:	f000 fb2e 	bl	8001f14 <MX_TIM2_Init>
  MX_I2C1_Init();
 80018b8:	f000 fa1c 	bl	8001cf4 <MX_I2C1_Init>
  MX_TIM3_Init();
 80018bc:	f000 fbd0 	bl	8002060 <MX_TIM3_Init>
  MX_TIM4_Init();
 80018c0:	f000 fc74 	bl	80021ac <MX_TIM4_Init>
  MX_TIM5_Init();
 80018c4:	f000 fd18 	bl	80022f8 <MX_TIM5_Init>
  MX_TIM1_Init();
 80018c8:	f000 fa54 	bl	8001d74 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80018cc:	2100      	movs	r1, #0
 80018ce:	48ac      	ldr	r0, [pc, #688]	@ (8001b80 <main+0x364>)
 80018d0:	f003 ffc8 	bl	8005864 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80018d4:	2104      	movs	r1, #4
 80018d6:	48aa      	ldr	r0, [pc, #680]	@ (8001b80 <main+0x364>)
 80018d8:	f003 ffc4 	bl	8005864 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80018dc:	2108      	movs	r1, #8
 80018de:	48a8      	ldr	r0, [pc, #672]	@ (8001b80 <main+0x364>)
 80018e0:	f003 ffc0 	bl	8005864 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80018e4:	210c      	movs	r1, #12
 80018e6:	48a6      	ldr	r0, [pc, #664]	@ (8001b80 <main+0x364>)
 80018e8:	f003 ffbc 	bl	8005864 <HAL_TIM_PWM_Start>

  TIM1->CCR1 = 1000;
 80018ec:	4ba5      	ldr	r3, [pc, #660]	@ (8001b84 <main+0x368>)
 80018ee:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80018f2:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM1->CCR2 = 1000;
 80018f4:	4ba3      	ldr	r3, [pc, #652]	@ (8001b84 <main+0x368>)
 80018f6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80018fa:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM1->CCR3 = 1000;
 80018fc:	4ba1      	ldr	r3, [pc, #644]	@ (8001b84 <main+0x368>)
 80018fe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001902:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM1->CCR4 = 1000;
 8001904:	4b9f      	ldr	r3, [pc, #636]	@ (8001b84 <main+0x368>)
 8001906:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800190a:	641a      	str	r2, [r3, #64]	@ 0x40
  HAL_Delay(1000);
 800190c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001910:	f001 fab4 	bl	8002e7c <HAL_Delay>
  TIM1->CCR1 = 2000;
 8001914:	4b9b      	ldr	r3, [pc, #620]	@ (8001b84 <main+0x368>)
 8001916:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800191a:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM1->CCR2 = 2000;
 800191c:	4b99      	ldr	r3, [pc, #612]	@ (8001b84 <main+0x368>)
 800191e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001922:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM1->CCR3 = 2000;
 8001924:	4b97      	ldr	r3, [pc, #604]	@ (8001b84 <main+0x368>)
 8001926:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800192a:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM1->CCR4 = 2000;
 800192c:	4b95      	ldr	r3, [pc, #596]	@ (8001b84 <main+0x368>)
 800192e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001932:	641a      	str	r2, [r3, #64]	@ 0x40
  HAL_Delay(1000);
 8001934:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001938:	f001 faa0 	bl	8002e7c <HAL_Delay>
  TIM1->CCR1 = 1000;
 800193c:	4b91      	ldr	r3, [pc, #580]	@ (8001b84 <main+0x368>)
 800193e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001942:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM1->CCR2 = 1000;
 8001944:	4b8f      	ldr	r3, [pc, #572]	@ (8001b84 <main+0x368>)
 8001946:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800194a:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM1->CCR3 = 1000;
 800194c:	4b8d      	ldr	r3, [pc, #564]	@ (8001b84 <main+0x368>)
 800194e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001952:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM1->CCR4 = 1000;
 8001954:	4b8b      	ldr	r3, [pc, #556]	@ (8001b84 <main+0x368>)
 8001956:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800195a:	641a      	str	r2, [r3, #64]	@ 0x40
  HAL_Delay(1000);
 800195c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001960:	f001 fa8c 	bl	8002e7c <HAL_Delay>

  TIM1->CCR1 = 1300;
 8001964:	4b87      	ldr	r3, [pc, #540]	@ (8001b84 <main+0x368>)
 8001966:	f240 5214 	movw	r2, #1300	@ 0x514
 800196a:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM1->CCR2 = 1300;
 800196c:	4b85      	ldr	r3, [pc, #532]	@ (8001b84 <main+0x368>)
 800196e:	f240 5214 	movw	r2, #1300	@ 0x514
 8001972:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM1->CCR3 = 1300;
 8001974:	4b83      	ldr	r3, [pc, #524]	@ (8001b84 <main+0x368>)
 8001976:	f240 5214 	movw	r2, #1300	@ 0x514
 800197a:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM1->CCR4 = 1300;
 800197c:	4b81      	ldr	r3, [pc, #516]	@ (8001b84 <main+0x368>)
 800197e:	f240 5214 	movw	r2, #1300	@ 0x514
 8001982:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    Accelerometer_Read(&hi2c1, &accel_data, &gyro_data); // Read accelerometer and gyro data
 8001984:	4a80      	ldr	r2, [pc, #512]	@ (8001b88 <main+0x36c>)
 8001986:	4981      	ldr	r1, [pc, #516]	@ (8001b8c <main+0x370>)
 8001988:	4872      	ldr	r0, [pc, #456]	@ (8001b54 <main+0x338>)
 800198a:	f7ff fc49 	bl	8001220 <Accelerometer_Read>
    
    angles_from_accel(accel_data, &pitch_calc, &roll_calc); // Calculate pitch and roll from accelerometer data
 800198e:	4b7f      	ldr	r3, [pc, #508]	@ (8001b8c <main+0x370>)
 8001990:	edd3 6a00 	vldr	s13, [r3]
 8001994:	ed93 7a01 	vldr	s14, [r3, #4]
 8001998:	edd3 7a02 	vldr	s15, [r3, #8]
 800199c:	497c      	ldr	r1, [pc, #496]	@ (8001b90 <main+0x374>)
 800199e:	487d      	ldr	r0, [pc, #500]	@ (8001b94 <main+0x378>)
 80019a0:	eeb0 0a66 	vmov.f32	s0, s13
 80019a4:	eef0 0a47 	vmov.f32	s1, s14
 80019a8:	eeb0 1a67 	vmov.f32	s2, s15
 80019ac:	f7ff fcf8 	bl	80013a0 <angles_from_accel>
    angles_rate_from_gyro(gyro_data, &pitch_rate_calc, &roll_rate_calc); // Calculate pitch and roll rates from gyro data
 80019b0:	4b75      	ldr	r3, [pc, #468]	@ (8001b88 <main+0x36c>)
 80019b2:	edd3 6a00 	vldr	s13, [r3]
 80019b6:	ed93 7a01 	vldr	s14, [r3, #4]
 80019ba:	edd3 7a02 	vldr	s15, [r3, #8]
 80019be:	4976      	ldr	r1, [pc, #472]	@ (8001b98 <main+0x37c>)
 80019c0:	4876      	ldr	r0, [pc, #472]	@ (8001b9c <main+0x380>)
 80019c2:	eeb0 0a66 	vmov.f32	s0, s13
 80019c6:	eef0 0a47 	vmov.f32	s1, s14
 80019ca:	eeb0 1a67 	vmov.f32	s2, s15
 80019ce:	f7ff fd67 	bl	80014a0 <angles_rate_from_gyro>
    // Apply Kalman filter to the angles
    Kalman_GetAngle(&kalman_pitch, pitch_calc, pitch_rate_calc, dt);
 80019d2:	4b70      	ldr	r3, [pc, #448]	@ (8001b94 <main+0x378>)
 80019d4:	edd3 7a00 	vldr	s15, [r3]
 80019d8:	4b70      	ldr	r3, [pc, #448]	@ (8001b9c <main+0x380>)
 80019da:	ed93 7a00 	vldr	s14, [r3]
 80019de:	4b60      	ldr	r3, [pc, #384]	@ (8001b60 <main+0x344>)
 80019e0:	edd3 6a00 	vldr	s13, [r3]
 80019e4:	eeb0 1a66 	vmov.f32	s2, s13
 80019e8:	eef0 0a47 	vmov.f32	s1, s14
 80019ec:	eeb0 0a67 	vmov.f32	s0, s15
 80019f0:	485a      	ldr	r0, [pc, #360]	@ (8001b5c <main+0x340>)
 80019f2:	f7ff fdf5 	bl	80015e0 <Kalman_GetAngle>
    Kalman_GetAngle(&kalman_roll, roll_calc, roll_rate_calc, dt);
 80019f6:	4b66      	ldr	r3, [pc, #408]	@ (8001b90 <main+0x374>)
 80019f8:	edd3 7a00 	vldr	s15, [r3]
 80019fc:	4b66      	ldr	r3, [pc, #408]	@ (8001b98 <main+0x37c>)
 80019fe:	ed93 7a00 	vldr	s14, [r3]
 8001a02:	4b57      	ldr	r3, [pc, #348]	@ (8001b60 <main+0x344>)
 8001a04:	edd3 6a00 	vldr	s13, [r3]
 8001a08:	eeb0 1a66 	vmov.f32	s2, s13
 8001a0c:	eef0 0a47 	vmov.f32	s1, s14
 8001a10:	eeb0 0a67 	vmov.f32	s0, s15
 8001a14:	4850      	ldr	r0, [pc, #320]	@ (8001b58 <main+0x33c>)
 8001a16:	f7ff fde3 	bl	80015e0 <Kalman_GetAngle>
    yaw_from_gyro(gyro_data, &yaw_angle, dt); // Calculate yaw angle from gyro data
 8001a1a:	4b51      	ldr	r3, [pc, #324]	@ (8001b60 <main+0x344>)
 8001a1c:	ed93 6a00 	vldr	s12, [r3]
 8001a20:	4b59      	ldr	r3, [pc, #356]	@ (8001b88 <main+0x36c>)
 8001a22:	edd3 6a00 	vldr	s13, [r3]
 8001a26:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a2a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a2e:	eef0 1a46 	vmov.f32	s3, s12
 8001a32:	485b      	ldr	r0, [pc, #364]	@ (8001ba0 <main+0x384>)
 8001a34:	eeb0 0a66 	vmov.f32	s0, s13
 8001a38:	eef0 0a47 	vmov.f32	s1, s14
 8001a3c:	eeb0 1a67 	vmov.f32	s2, s15
 8001a40:	f7ff fd4b 	bl	80014da <yaw_from_gyro>

    // Calculate PID control for thrust, pitch, roll and yaw
    u_thrust = PID_Compute(&pid_thrust, thrust_input, accel_data.z);
 8001a44:	4b57      	ldr	r3, [pc, #348]	@ (8001ba4 <main+0x388>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	ee07 3a90 	vmov	s15, r3
 8001a4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a50:	4b4e      	ldr	r3, [pc, #312]	@ (8001b8c <main+0x370>)
 8001a52:	ed93 7a02 	vldr	s14, [r3, #8]
 8001a56:	eef0 0a47 	vmov.f32	s1, s14
 8001a5a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a5e:	4845      	ldr	r0, [pc, #276]	@ (8001b74 <main+0x358>)
 8001a60:	f7ff fb0a 	bl	8001078 <PID_Compute>
 8001a64:	eef0 7a40 	vmov.f32	s15, s0
 8001a68:	4b4f      	ldr	r3, [pc, #316]	@ (8001ba8 <main+0x38c>)
 8001a6a:	edc3 7a00 	vstr	s15, [r3]
    u_pitch = PID_Compute(&pid_pitch, pitch_input, kalman_pitch.angle); // Target angle is 0 for level flight
 8001a6e:	4b4f      	ldr	r3, [pc, #316]	@ (8001bac <main+0x390>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	ee07 3a90 	vmov	s15, r3
 8001a76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a7a:	4b38      	ldr	r3, [pc, #224]	@ (8001b5c <main+0x340>)
 8001a7c:	ed93 7a00 	vldr	s14, [r3]
 8001a80:	eef0 0a47 	vmov.f32	s1, s14
 8001a84:	eeb0 0a67 	vmov.f32	s0, s15
 8001a88:	4838      	ldr	r0, [pc, #224]	@ (8001b6c <main+0x350>)
 8001a8a:	f7ff faf5 	bl	8001078 <PID_Compute>
 8001a8e:	eef0 7a40 	vmov.f32	s15, s0
 8001a92:	4b47      	ldr	r3, [pc, #284]	@ (8001bb0 <main+0x394>)
 8001a94:	edc3 7a00 	vstr	s15, [r3]
    u_roll = PID_Compute(&pid_roll, roll_input, kalman_roll.angle); // Target angle is 0 for level flight
 8001a98:	4b46      	ldr	r3, [pc, #280]	@ (8001bb4 <main+0x398>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	ee07 3a90 	vmov	s15, r3
 8001aa0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aa4:	4b2c      	ldr	r3, [pc, #176]	@ (8001b58 <main+0x33c>)
 8001aa6:	ed93 7a00 	vldr	s14, [r3]
 8001aaa:	eef0 0a47 	vmov.f32	s1, s14
 8001aae:	eeb0 0a67 	vmov.f32	s0, s15
 8001ab2:	482f      	ldr	r0, [pc, #188]	@ (8001b70 <main+0x354>)
 8001ab4:	f7ff fae0 	bl	8001078 <PID_Compute>
 8001ab8:	eef0 7a40 	vmov.f32	s15, s0
 8001abc:	4b3e      	ldr	r3, [pc, #248]	@ (8001bb8 <main+0x39c>)
 8001abe:	edc3 7a00 	vstr	s15, [r3]
    u_yaw = PID_Compute(&pid_yaw, yaw_input, yaw_angle); // Assuming yaw control is not implemented, set target to 0
 8001ac2:	4b3e      	ldr	r3, [pc, #248]	@ (8001bbc <main+0x3a0>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	ee07 3a90 	vmov	s15, r3
 8001aca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ace:	4b34      	ldr	r3, [pc, #208]	@ (8001ba0 <main+0x384>)
 8001ad0:	ed93 7a00 	vldr	s14, [r3]
 8001ad4:	eef0 0a47 	vmov.f32	s1, s14
 8001ad8:	eeb0 0a67 	vmov.f32	s0, s15
 8001adc:	4826      	ldr	r0, [pc, #152]	@ (8001b78 <main+0x35c>)
 8001ade:	f7ff facb 	bl	8001078 <PID_Compute>
 8001ae2:	eef0 7a40 	vmov.f32	s15, s0
 8001ae6:	4b36      	ldr	r3, [pc, #216]	@ (8001bc0 <main+0x3a4>)
 8001ae8:	edc3 7a00 	vstr	s15, [r3]
      [M1]     [M2]
           |
           v
          Front
    */
    M1 = u_thrust - u_pitch - u_roll - u_yaw; // Motor 1 control signal CW
 8001aec:	4b2e      	ldr	r3, [pc, #184]	@ (8001ba8 <main+0x38c>)
 8001aee:	ed93 7a00 	vldr	s14, [r3]
 8001af2:	4b2f      	ldr	r3, [pc, #188]	@ (8001bb0 <main+0x394>)
 8001af4:	edd3 7a00 	vldr	s15, [r3]
 8001af8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001afc:	4b2e      	ldr	r3, [pc, #184]	@ (8001bb8 <main+0x39c>)
 8001afe:	edd3 7a00 	vldr	s15, [r3]
 8001b02:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b06:	4b2e      	ldr	r3, [pc, #184]	@ (8001bc0 <main+0x3a4>)
 8001b08:	edd3 7a00 	vldr	s15, [r3]
 8001b0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b10:	4b2c      	ldr	r3, [pc, #176]	@ (8001bc4 <main+0x3a8>)
 8001b12:	edc3 7a00 	vstr	s15, [r3]
    M2 = u_thrust - u_pitch + u_roll + u_yaw; // Motor 2 control signal CCW
 8001b16:	4b24      	ldr	r3, [pc, #144]	@ (8001ba8 <main+0x38c>)
 8001b18:	ed93 7a00 	vldr	s14, [r3]
 8001b1c:	4b24      	ldr	r3, [pc, #144]	@ (8001bb0 <main+0x394>)
 8001b1e:	edd3 7a00 	vldr	s15, [r3]
 8001b22:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b26:	4b24      	ldr	r3, [pc, #144]	@ (8001bb8 <main+0x39c>)
 8001b28:	edd3 7a00 	vldr	s15, [r3]
 8001b2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b30:	4b23      	ldr	r3, [pc, #140]	@ (8001bc0 <main+0x3a4>)
 8001b32:	edd3 7a00 	vldr	s15, [r3]
 8001b36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b3a:	4b23      	ldr	r3, [pc, #140]	@ (8001bc8 <main+0x3ac>)
 8001b3c:	edc3 7a00 	vstr	s15, [r3]
    M3 = u_thrust + u_pitch - u_roll + u_yaw; // Motor 3 control signal CCW
 8001b40:	4b19      	ldr	r3, [pc, #100]	@ (8001ba8 <main+0x38c>)
 8001b42:	ed93 7a00 	vldr	s14, [r3]
 8001b46:	4b1a      	ldr	r3, [pc, #104]	@ (8001bb0 <main+0x394>)
 8001b48:	edd3 7a00 	vldr	s15, [r3]
 8001b4c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b50:	e03c      	b.n	8001bcc <main+0x3b0>
 8001b52:	bf00      	nop
 8001b54:	200001f4 	.word	0x200001f4
 8001b58:	2000048c 	.word	0x2000048c
 8001b5c:	20000464 	.word	0x20000464
 8001b60:	20000000 	.word	0x20000000
 8001b64:	3c23d70a 	.word	0x3c23d70a
 8001b68:	3dcccccd 	.word	0x3dcccccd
 8001b6c:	200004e4 	.word	0x200004e4
 8001b70:	20000500 	.word	0x20000500
 8001b74:	200004c8 	.word	0x200004c8
 8001b78:	2000051c 	.word	0x2000051c
 8001b7c:	20000558 	.word	0x20000558
 8001b80:	20000248 	.word	0x20000248
 8001b84:	40012c00 	.word	0x40012c00
 8001b88:	20000458 	.word	0x20000458
 8001b8c:	2000044c 	.word	0x2000044c
 8001b90:	200004b8 	.word	0x200004b8
 8001b94:	200004b4 	.word	0x200004b4
 8001b98:	200004c0 	.word	0x200004c0
 8001b9c:	200004bc 	.word	0x200004bc
 8001ba0:	200004c4 	.word	0x200004c4
 8001ba4:	20000564 	.word	0x20000564
 8001ba8:	20000548 	.word	0x20000548
 8001bac:	20000560 	.word	0x20000560
 8001bb0:	2000054c 	.word	0x2000054c
 8001bb4:	2000055c 	.word	0x2000055c
 8001bb8:	20000550 	.word	0x20000550
 8001bbc:	20000568 	.word	0x20000568
 8001bc0:	20000554 	.word	0x20000554
 8001bc4:	20000538 	.word	0x20000538
 8001bc8:	2000053c 	.word	0x2000053c
 8001bcc:	4b18      	ldr	r3, [pc, #96]	@ (8001c30 <main+0x414>)
 8001bce:	edd3 7a00 	vldr	s15, [r3]
 8001bd2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001bd6:	4b17      	ldr	r3, [pc, #92]	@ (8001c34 <main+0x418>)
 8001bd8:	edd3 7a00 	vldr	s15, [r3]
 8001bdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001be0:	4b15      	ldr	r3, [pc, #84]	@ (8001c38 <main+0x41c>)
 8001be2:	edc3 7a00 	vstr	s15, [r3]
    M4 = u_thrust + u_pitch + u_roll - u_yaw; // Motor 4 control signal CW
 8001be6:	4b15      	ldr	r3, [pc, #84]	@ (8001c3c <main+0x420>)
 8001be8:	ed93 7a00 	vldr	s14, [r3]
 8001bec:	4b14      	ldr	r3, [pc, #80]	@ (8001c40 <main+0x424>)
 8001bee:	edd3 7a00 	vldr	s15, [r3]
 8001bf2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8001c30 <main+0x414>)
 8001bf8:	edd3 7a00 	vldr	s15, [r3]
 8001bfc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c00:	4b0c      	ldr	r3, [pc, #48]	@ (8001c34 <main+0x418>)
 8001c02:	edd3 7a00 	vldr	s15, [r3]
 8001c06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c44 <main+0x428>)
 8001c0c:	edc3 7a00 	vstr	s15, [r3]

    HAL_Delay(dt * 1000);  // 10ms par boucle
 8001c10:	4b0d      	ldr	r3, [pc, #52]	@ (8001c48 <main+0x42c>)
 8001c12:	edd3 7a00 	vldr	s15, [r3]
 8001c16:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8001c4c <main+0x430>
 8001c1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c22:	ee17 0a90 	vmov	r0, s15
 8001c26:	f001 f929 	bl	8002e7c <HAL_Delay>
    Accelerometer_Read(&hi2c1, &accel_data, &gyro_data); // Read accelerometer and gyro data
 8001c2a:	bf00      	nop
 8001c2c:	e6aa      	b.n	8001984 <main+0x168>
 8001c2e:	bf00      	nop
 8001c30:	20000550 	.word	0x20000550
 8001c34:	20000554 	.word	0x20000554
 8001c38:	20000540 	.word	0x20000540
 8001c3c:	20000548 	.word	0x20000548
 8001c40:	2000054c 	.word	0x2000054c
 8001c44:	20000544 	.word	0x20000544
 8001c48:	20000000 	.word	0x20000000
 8001c4c:	447a0000 	.word	0x447a0000

08001c50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b096      	sub	sp, #88	@ 0x58
 8001c54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c56:	f107 0314 	add.w	r3, r7, #20
 8001c5a:	2244      	movs	r2, #68	@ 0x44
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f007 fee6 	bl	8009a30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c64:	463b      	mov	r3, r7
 8001c66:	2200      	movs	r2, #0
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	605a      	str	r2, [r3, #4]
 8001c6c:	609a      	str	r2, [r3, #8]
 8001c6e:	60da      	str	r2, [r3, #12]
 8001c70:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001c72:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001c76:	f002 fa2b 	bl	80040d0 <HAL_PWREx_ControlVoltageScaling>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001c80:	f000 fd1c 	bl	80026bc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c84:	2302      	movs	r3, #2
 8001c86:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c88:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c8c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c8e:	2310      	movs	r3, #16
 8001c90:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c92:	2302      	movs	r3, #2
 8001c94:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c96:	2302      	movs	r3, #2
 8001c98:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001c9e:	230a      	movs	r3, #10
 8001ca0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001ca2:	2307      	movs	r3, #7
 8001ca4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001caa:	2302      	movs	r3, #2
 8001cac:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cae:	f107 0314 	add.w	r3, r7, #20
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f002 fa62 	bl	800417c <HAL_RCC_OscConfig>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001cbe:	f000 fcfd 	bl	80026bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cc2:	230f      	movs	r3, #15
 8001cc4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001cd6:	463b      	mov	r3, r7
 8001cd8:	2104      	movs	r1, #4
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f002 fe2a 	bl	8004934 <HAL_RCC_ClockConfig>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001ce6:	f000 fce9 	bl	80026bc <Error_Handler>
  }
}
 8001cea:	bf00      	nop
 8001cec:	3758      	adds	r7, #88	@ 0x58
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
	...

08001cf4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001cf8:	4b1b      	ldr	r3, [pc, #108]	@ (8001d68 <MX_I2C1_Init+0x74>)
 8001cfa:	4a1c      	ldr	r2, [pc, #112]	@ (8001d6c <MX_I2C1_Init+0x78>)
 8001cfc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 8001cfe:	4b1a      	ldr	r3, [pc, #104]	@ (8001d68 <MX_I2C1_Init+0x74>)
 8001d00:	4a1b      	ldr	r2, [pc, #108]	@ (8001d70 <MX_I2C1_Init+0x7c>)
 8001d02:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001d04:	4b18      	ldr	r3, [pc, #96]	@ (8001d68 <MX_I2C1_Init+0x74>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d0a:	4b17      	ldr	r3, [pc, #92]	@ (8001d68 <MX_I2C1_Init+0x74>)
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d10:	4b15      	ldr	r3, [pc, #84]	@ (8001d68 <MX_I2C1_Init+0x74>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001d16:	4b14      	ldr	r3, [pc, #80]	@ (8001d68 <MX_I2C1_Init+0x74>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d1c:	4b12      	ldr	r3, [pc, #72]	@ (8001d68 <MX_I2C1_Init+0x74>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d22:	4b11      	ldr	r3, [pc, #68]	@ (8001d68 <MX_I2C1_Init+0x74>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d28:	4b0f      	ldr	r3, [pc, #60]	@ (8001d68 <MX_I2C1_Init+0x74>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d2e:	480e      	ldr	r0, [pc, #56]	@ (8001d68 <MX_I2C1_Init+0x74>)
 8001d30:	f001 fb9c 	bl	800346c <HAL_I2C_Init>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001d3a:	f000 fcbf 	bl	80026bc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d3e:	2100      	movs	r1, #0
 8001d40:	4809      	ldr	r0, [pc, #36]	@ (8001d68 <MX_I2C1_Init+0x74>)
 8001d42:	f002 f91f 	bl	8003f84 <HAL_I2CEx_ConfigAnalogFilter>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001d4c:	f000 fcb6 	bl	80026bc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001d50:	2100      	movs	r1, #0
 8001d52:	4805      	ldr	r0, [pc, #20]	@ (8001d68 <MX_I2C1_Init+0x74>)
 8001d54:	f002 f961 	bl	800401a <HAL_I2CEx_ConfigDigitalFilter>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001d5e:	f000 fcad 	bl	80026bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d62:	bf00      	nop
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	200001f4 	.word	0x200001f4
 8001d6c:	40005400 	.word	0x40005400
 8001d70:	10d19ce4 	.word	0x10d19ce4

08001d74 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b09a      	sub	sp, #104	@ 0x68
 8001d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d7a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001d7e:	2200      	movs	r2, #0
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	605a      	str	r2, [r3, #4]
 8001d84:	609a      	str	r2, [r3, #8]
 8001d86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d88:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	605a      	str	r2, [r3, #4]
 8001d92:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d94:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	605a      	str	r2, [r3, #4]
 8001d9e:	609a      	str	r2, [r3, #8]
 8001da0:	60da      	str	r2, [r3, #12]
 8001da2:	611a      	str	r2, [r3, #16]
 8001da4:	615a      	str	r2, [r3, #20]
 8001da6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001da8:	1d3b      	adds	r3, r7, #4
 8001daa:	222c      	movs	r2, #44	@ 0x2c
 8001dac:	2100      	movs	r1, #0
 8001dae:	4618      	mov	r0, r3
 8001db0:	f007 fe3e 	bl	8009a30 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001db4:	4b55      	ldr	r3, [pc, #340]	@ (8001f0c <MX_TIM1_Init+0x198>)
 8001db6:	4a56      	ldr	r2, [pc, #344]	@ (8001f10 <MX_TIM1_Init+0x19c>)
 8001db8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 8001dba:	4b54      	ldr	r3, [pc, #336]	@ (8001f0c <MX_TIM1_Init+0x198>)
 8001dbc:	224f      	movs	r2, #79	@ 0x4f
 8001dbe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dc0:	4b52      	ldr	r3, [pc, #328]	@ (8001f0c <MX_TIM1_Init+0x198>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8001dc6:	4b51      	ldr	r3, [pc, #324]	@ (8001f0c <MX_TIM1_Init+0x198>)
 8001dc8:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001dcc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dce:	4b4f      	ldr	r3, [pc, #316]	@ (8001f0c <MX_TIM1_Init+0x198>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001dd4:	4b4d      	ldr	r3, [pc, #308]	@ (8001f0c <MX_TIM1_Init+0x198>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dda:	4b4c      	ldr	r3, [pc, #304]	@ (8001f0c <MX_TIM1_Init+0x198>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001de0:	484a      	ldr	r0, [pc, #296]	@ (8001f0c <MX_TIM1_Init+0x198>)
 8001de2:	f003 fc87 	bl	80056f4 <HAL_TIM_Base_Init>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001dec:	f000 fc66 	bl	80026bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001df0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001df4:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001df6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4843      	ldr	r0, [pc, #268]	@ (8001f0c <MX_TIM1_Init+0x198>)
 8001dfe:	f004 fa9b 	bl	8006338 <HAL_TIM_ConfigClockSource>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001e08:	f000 fc58 	bl	80026bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001e0c:	483f      	ldr	r0, [pc, #252]	@ (8001f0c <MX_TIM1_Init+0x198>)
 8001e0e:	f003 fcc8 	bl	80057a2 <HAL_TIM_PWM_Init>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001e18:	f000 fc50 	bl	80026bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001e20:	2300      	movs	r3, #0
 8001e22:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e24:	2300      	movs	r3, #0
 8001e26:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e28:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4837      	ldr	r0, [pc, #220]	@ (8001f0c <MX_TIM1_Init+0x198>)
 8001e30:	f005 f9ee 	bl	8007210 <HAL_TIMEx_MasterConfigSynchronization>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001e3a:	f000 fc3f 	bl	80026bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e3e:	2360      	movs	r3, #96	@ 0x60
 8001e40:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001e42:	2300      	movs	r3, #0
 8001e44:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e46:	2300      	movs	r3, #0
 8001e48:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e52:	2300      	movs	r3, #0
 8001e54:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e56:	2300      	movs	r3, #0
 8001e58:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e5a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001e5e:	2200      	movs	r2, #0
 8001e60:	4619      	mov	r1, r3
 8001e62:	482a      	ldr	r0, [pc, #168]	@ (8001f0c <MX_TIM1_Init+0x198>)
 8001e64:	f004 f954 	bl	8006110 <HAL_TIM_PWM_ConfigChannel>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001e6e:	f000 fc25 	bl	80026bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e72:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001e76:	2204      	movs	r2, #4
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4824      	ldr	r0, [pc, #144]	@ (8001f0c <MX_TIM1_Init+0x198>)
 8001e7c:	f004 f948 	bl	8006110 <HAL_TIM_PWM_ConfigChannel>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001e86:	f000 fc19 	bl	80026bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e8a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001e8e:	2208      	movs	r2, #8
 8001e90:	4619      	mov	r1, r3
 8001e92:	481e      	ldr	r0, [pc, #120]	@ (8001f0c <MX_TIM1_Init+0x198>)
 8001e94:	f004 f93c 	bl	8006110 <HAL_TIM_PWM_ConfigChannel>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8001e9e:	f000 fc0d 	bl	80026bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ea2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001ea6:	220c      	movs	r2, #12
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4818      	ldr	r0, [pc, #96]	@ (8001f0c <MX_TIM1_Init+0x198>)
 8001eac:	f004 f930 	bl	8006110 <HAL_TIM_PWM_ConfigChannel>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8001eb6:	f000 fc01 	bl	80026bc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ece:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ed2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001edc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ee0:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001eea:	1d3b      	adds	r3, r7, #4
 8001eec:	4619      	mov	r1, r3
 8001eee:	4807      	ldr	r0, [pc, #28]	@ (8001f0c <MX_TIM1_Init+0x198>)
 8001ef0:	f005 fa16 	bl	8007320 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 8001efa:	f000 fbdf 	bl	80026bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001efe:	4803      	ldr	r0, [pc, #12]	@ (8001f0c <MX_TIM1_Init+0x198>)
 8001f00:	f000 fd6e 	bl	80029e0 <HAL_TIM_MspPostInit>

}
 8001f04:	bf00      	nop
 8001f06:	3768      	adds	r7, #104	@ 0x68
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	20000248 	.word	0x20000248
 8001f10:	40012c00 	.word	0x40012c00

08001f14 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b090      	sub	sp, #64	@ 0x40
 8001f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f1a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001f1e:	2200      	movs	r2, #0
 8001f20:	601a      	str	r2, [r3, #0]
 8001f22:	605a      	str	r2, [r3, #4]
 8001f24:	609a      	str	r2, [r3, #8]
 8001f26:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001f28:	f107 031c 	add.w	r3, r7, #28
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	605a      	str	r2, [r3, #4]
 8001f32:	609a      	str	r2, [r3, #8]
 8001f34:	60da      	str	r2, [r3, #12]
 8001f36:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001f38:	f107 030c 	add.w	r3, r7, #12
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	605a      	str	r2, [r3, #4]
 8001f42:	609a      	str	r2, [r3, #8]
 8001f44:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f46:	463b      	mov	r3, r7
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	605a      	str	r2, [r3, #4]
 8001f4e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f50:	4b42      	ldr	r3, [pc, #264]	@ (800205c <MX_TIM2_Init+0x148>)
 8001f52:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001f56:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001f58:	4b40      	ldr	r3, [pc, #256]	@ (800205c <MX_TIM2_Init+0x148>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f5e:	4b3f      	ldr	r3, [pc, #252]	@ (800205c <MX_TIM2_Init+0x148>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001f64:	4b3d      	ldr	r3, [pc, #244]	@ (800205c <MX_TIM2_Init+0x148>)
 8001f66:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001f6a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f6c:	4b3b      	ldr	r3, [pc, #236]	@ (800205c <MX_TIM2_Init+0x148>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f72:	4b3a      	ldr	r3, [pc, #232]	@ (800205c <MX_TIM2_Init+0x148>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f78:	4838      	ldr	r0, [pc, #224]	@ (800205c <MX_TIM2_Init+0x148>)
 8001f7a:	f003 fbbb 	bl	80056f4 <HAL_TIM_Base_Init>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001f84:	f000 fb9a 	bl	80026bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f8c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f8e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001f92:	4619      	mov	r1, r3
 8001f94:	4831      	ldr	r0, [pc, #196]	@ (800205c <MX_TIM2_Init+0x148>)
 8001f96:	f004 f9cf 	bl	8006338 <HAL_TIM_ConfigClockSource>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001fa0:	f000 fb8c 	bl	80026bc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001fa4:	482d      	ldr	r0, [pc, #180]	@ (800205c <MX_TIM2_Init+0x148>)
 8001fa6:	f003 fd63 	bl	8005a70 <HAL_TIM_IC_Init>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001fb0:	f000 fb84 	bl	80026bc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001fb4:	2304      	movs	r3, #4
 8001fb6:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001fb8:	2350      	movs	r3, #80	@ 0x50
 8001fba:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001fc8:	f107 031c 	add.w	r3, r7, #28
 8001fcc:	4619      	mov	r1, r3
 8001fce:	4823      	ldr	r0, [pc, #140]	@ (800205c <MX_TIM2_Init+0x148>)
 8001fd0:	f004 fa7b 	bl	80064ca <HAL_TIM_SlaveConfigSynchro>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8001fda:	f000 fb6f 	bl	80026bc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001fea:	2300      	movs	r3, #0
 8001fec:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001fee:	f107 030c 	add.w	r3, r7, #12
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	4819      	ldr	r0, [pc, #100]	@ (800205c <MX_TIM2_Init+0x148>)
 8001ff8:	f003 ffed 	bl	8005fd6 <HAL_TIM_IC_ConfigChannel>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8002002:	f000 fb5b 	bl	80026bc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002006:	2302      	movs	r3, #2
 8002008:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800200a:	2302      	movs	r3, #2
 800200c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800200e:	f107 030c 	add.w	r3, r7, #12
 8002012:	2204      	movs	r2, #4
 8002014:	4619      	mov	r1, r3
 8002016:	4811      	ldr	r0, [pc, #68]	@ (800205c <MX_TIM2_Init+0x148>)
 8002018:	f003 ffdd 	bl	8005fd6 <HAL_TIM_IC_ConfigChannel>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <MX_TIM2_Init+0x112>
  {
    Error_Handler();
 8002022:	f000 fb4b 	bl	80026bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002026:	2300      	movs	r3, #0
 8002028:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800202a:	2300      	movs	r3, #0
 800202c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800202e:	463b      	mov	r3, r7
 8002030:	4619      	mov	r1, r3
 8002032:	480a      	ldr	r0, [pc, #40]	@ (800205c <MX_TIM2_Init+0x148>)
 8002034:	f005 f8ec 	bl	8007210 <HAL_TIMEx_MasterConfigSynchronization>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <MX_TIM2_Init+0x12e>
  {
    Error_Handler();
 800203e:	f000 fb3d 	bl	80026bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1); // Start input capture on channel 1
 8002042:	2100      	movs	r1, #0
 8002044:	4805      	ldr	r0, [pc, #20]	@ (800205c <MX_TIM2_Init+0x148>)
 8002046:	f003 fd75 	bl	8005b34 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2); // Start input capture on channel 2
 800204a:	2104      	movs	r1, #4
 800204c:	4803      	ldr	r0, [pc, #12]	@ (800205c <MX_TIM2_Init+0x148>)
 800204e:	f003 fd71 	bl	8005b34 <HAL_TIM_IC_Start_IT>
  /* USER CODE END TIM2_Init 2 */

}
 8002052:	bf00      	nop
 8002054:	3740      	adds	r7, #64	@ 0x40
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	20000294 	.word	0x20000294

08002060 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b090      	sub	sp, #64	@ 0x40
 8002064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002066:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800206a:	2200      	movs	r2, #0
 800206c:	601a      	str	r2, [r3, #0]
 800206e:	605a      	str	r2, [r3, #4]
 8002070:	609a      	str	r2, [r3, #8]
 8002072:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002074:	f107 031c 	add.w	r3, r7, #28
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	609a      	str	r2, [r3, #8]
 8002080:	60da      	str	r2, [r3, #12]
 8002082:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002084:	f107 030c 	add.w	r3, r7, #12
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	605a      	str	r2, [r3, #4]
 800208e:	609a      	str	r2, [r3, #8]
 8002090:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002092:	463b      	mov	r3, r7
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	605a      	str	r2, [r3, #4]
 800209a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800209c:	4b41      	ldr	r3, [pc, #260]	@ (80021a4 <MX_TIM3_Init+0x144>)
 800209e:	4a42      	ldr	r2, [pc, #264]	@ (80021a8 <MX_TIM3_Init+0x148>)
 80020a0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 80020a2:	4b40      	ldr	r3, [pc, #256]	@ (80021a4 <MX_TIM3_Init+0x144>)
 80020a4:	224f      	movs	r2, #79	@ 0x4f
 80020a6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020a8:	4b3e      	ldr	r3, [pc, #248]	@ (80021a4 <MX_TIM3_Init+0x144>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 25000;
 80020ae:	4b3d      	ldr	r3, [pc, #244]	@ (80021a4 <MX_TIM3_Init+0x144>)
 80020b0:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 80020b4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020b6:	4b3b      	ldr	r3, [pc, #236]	@ (80021a4 <MX_TIM3_Init+0x144>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020bc:	4b39      	ldr	r3, [pc, #228]	@ (80021a4 <MX_TIM3_Init+0x144>)
 80020be:	2200      	movs	r2, #0
 80020c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80020c2:	4838      	ldr	r0, [pc, #224]	@ (80021a4 <MX_TIM3_Init+0x144>)
 80020c4:	f003 fb16 	bl	80056f4 <HAL_TIM_Base_Init>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80020ce:	f000 faf5 	bl	80026bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020d6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80020d8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80020dc:	4619      	mov	r1, r3
 80020de:	4831      	ldr	r0, [pc, #196]	@ (80021a4 <MX_TIM3_Init+0x144>)
 80020e0:	f004 f92a 	bl	8006338 <HAL_TIM_ConfigClockSource>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80020ea:	f000 fae7 	bl	80026bc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80020ee:	482d      	ldr	r0, [pc, #180]	@ (80021a4 <MX_TIM3_Init+0x144>)
 80020f0:	f003 fcbe 	bl	8005a70 <HAL_TIM_IC_Init>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80020fa:	f000 fadf 	bl	80026bc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80020fe:	2304      	movs	r3, #4
 8002100:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002102:	2350      	movs	r3, #80	@ 0x50
 8002104:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002106:	2300      	movs	r3, #0
 8002108:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800210a:	2300      	movs	r3, #0
 800210c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 800210e:	2300      	movs	r3, #0
 8002110:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8002112:	f107 031c 	add.w	r3, r7, #28
 8002116:	4619      	mov	r1, r3
 8002118:	4822      	ldr	r0, [pc, #136]	@ (80021a4 <MX_TIM3_Init+0x144>)
 800211a:	f004 f9d6 	bl	80064ca <HAL_TIM_SlaveConfigSynchro>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8002124:	f000 faca 	bl	80026bc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002128:	2300      	movs	r3, #0
 800212a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800212c:	2301      	movs	r3, #1
 800212e:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002130:	2300      	movs	r3, #0
 8002132:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8002134:	2300      	movs	r3, #0
 8002136:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002138:	f107 030c 	add.w	r3, r7, #12
 800213c:	2200      	movs	r2, #0
 800213e:	4619      	mov	r1, r3
 8002140:	4818      	ldr	r0, [pc, #96]	@ (80021a4 <MX_TIM3_Init+0x144>)
 8002142:	f003 ff48 	bl	8005fd6 <HAL_TIM_IC_ConfigChannel>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 800214c:	f000 fab6 	bl	80026bc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002150:	2302      	movs	r3, #2
 8002152:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002154:	2302      	movs	r3, #2
 8002156:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002158:	f107 030c 	add.w	r3, r7, #12
 800215c:	2204      	movs	r2, #4
 800215e:	4619      	mov	r1, r3
 8002160:	4810      	ldr	r0, [pc, #64]	@ (80021a4 <MX_TIM3_Init+0x144>)
 8002162:	f003 ff38 	bl	8005fd6 <HAL_TIM_IC_ConfigChannel>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <MX_TIM3_Init+0x110>
  {
    Error_Handler();
 800216c:	f000 faa6 	bl	80026bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002170:	2300      	movs	r3, #0
 8002172:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002174:	2300      	movs	r3, #0
 8002176:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002178:	463b      	mov	r3, r7
 800217a:	4619      	mov	r1, r3
 800217c:	4809      	ldr	r0, [pc, #36]	@ (80021a4 <MX_TIM3_Init+0x144>)
 800217e:	f005 f847 	bl	8007210 <HAL_TIMEx_MasterConfigSynchronization>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <MX_TIM3_Init+0x12c>
  {
    Error_Handler();
 8002188:	f000 fa98 	bl	80026bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1); // Start input capture on channel 1
 800218c:	2100      	movs	r1, #0
 800218e:	4805      	ldr	r0, [pc, #20]	@ (80021a4 <MX_TIM3_Init+0x144>)
 8002190:	f003 fcd0 	bl	8005b34 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2); // Start input capture on channel 2
 8002194:	2104      	movs	r1, #4
 8002196:	4803      	ldr	r0, [pc, #12]	@ (80021a4 <MX_TIM3_Init+0x144>)
 8002198:	f003 fccc 	bl	8005b34 <HAL_TIM_IC_Start_IT>
  /* USER CODE END TIM3_Init 2 */

}
 800219c:	bf00      	nop
 800219e:	3740      	adds	r7, #64	@ 0x40
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	200002e0 	.word	0x200002e0
 80021a8:	40000400 	.word	0x40000400

080021ac <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b090      	sub	sp, #64	@ 0x40
 80021b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021b2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80021b6:	2200      	movs	r2, #0
 80021b8:	601a      	str	r2, [r3, #0]
 80021ba:	605a      	str	r2, [r3, #4]
 80021bc:	609a      	str	r2, [r3, #8]
 80021be:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80021c0:	f107 031c 	add.w	r3, r7, #28
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	605a      	str	r2, [r3, #4]
 80021ca:	609a      	str	r2, [r3, #8]
 80021cc:	60da      	str	r2, [r3, #12]
 80021ce:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80021d0:	f107 030c 	add.w	r3, r7, #12
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	605a      	str	r2, [r3, #4]
 80021da:	609a      	str	r2, [r3, #8]
 80021dc:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021de:	463b      	mov	r3, r7
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	605a      	str	r2, [r3, #4]
 80021e6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80021e8:	4b41      	ldr	r3, [pc, #260]	@ (80022f0 <MX_TIM4_Init+0x144>)
 80021ea:	4a42      	ldr	r2, [pc, #264]	@ (80022f4 <MX_TIM4_Init+0x148>)
 80021ec:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 79;
 80021ee:	4b40      	ldr	r3, [pc, #256]	@ (80022f0 <MX_TIM4_Init+0x144>)
 80021f0:	224f      	movs	r2, #79	@ 0x4f
 80021f2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021f4:	4b3e      	ldr	r3, [pc, #248]	@ (80022f0 <MX_TIM4_Init+0x144>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 25000;
 80021fa:	4b3d      	ldr	r3, [pc, #244]	@ (80022f0 <MX_TIM4_Init+0x144>)
 80021fc:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8002200:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002202:	4b3b      	ldr	r3, [pc, #236]	@ (80022f0 <MX_TIM4_Init+0x144>)
 8002204:	2200      	movs	r2, #0
 8002206:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002208:	4b39      	ldr	r3, [pc, #228]	@ (80022f0 <MX_TIM4_Init+0x144>)
 800220a:	2200      	movs	r2, #0
 800220c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800220e:	4838      	ldr	r0, [pc, #224]	@ (80022f0 <MX_TIM4_Init+0x144>)
 8002210:	f003 fa70 	bl	80056f4 <HAL_TIM_Base_Init>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 800221a:	f000 fa4f 	bl	80026bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800221e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002222:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002224:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002228:	4619      	mov	r1, r3
 800222a:	4831      	ldr	r0, [pc, #196]	@ (80022f0 <MX_TIM4_Init+0x144>)
 800222c:	f004 f884 	bl	8006338 <HAL_TIM_ConfigClockSource>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8002236:	f000 fa41 	bl	80026bc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800223a:	482d      	ldr	r0, [pc, #180]	@ (80022f0 <MX_TIM4_Init+0x144>)
 800223c:	f003 fc18 	bl	8005a70 <HAL_TIM_IC_Init>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8002246:	f000 fa39 	bl	80026bc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800224a:	2304      	movs	r3, #4
 800224c:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800224e:	2350      	movs	r3, #80	@ 0x50
 8002250:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002252:	2300      	movs	r3, #0
 8002254:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8002256:	2300      	movs	r3, #0
 8002258:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 800225a:	2300      	movs	r3, #0
 800225c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 800225e:	f107 031c 	add.w	r3, r7, #28
 8002262:	4619      	mov	r1, r3
 8002264:	4822      	ldr	r0, [pc, #136]	@ (80022f0 <MX_TIM4_Init+0x144>)
 8002266:	f004 f930 	bl	80064ca <HAL_TIM_SlaveConfigSynchro>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8002270:	f000 fa24 	bl	80026bc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002274:	2300      	movs	r3, #0
 8002276:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002278:	2301      	movs	r3, #1
 800227a:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800227c:	2300      	movs	r3, #0
 800227e:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8002280:	2300      	movs	r3, #0
 8002282:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002284:	f107 030c 	add.w	r3, r7, #12
 8002288:	2200      	movs	r2, #0
 800228a:	4619      	mov	r1, r3
 800228c:	4818      	ldr	r0, [pc, #96]	@ (80022f0 <MX_TIM4_Init+0x144>)
 800228e:	f003 fea2 	bl	8005fd6 <HAL_TIM_IC_ConfigChannel>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <MX_TIM4_Init+0xf0>
  {
    Error_Handler();
 8002298:	f000 fa10 	bl	80026bc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800229c:	2302      	movs	r3, #2
 800229e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80022a0:	2302      	movs	r3, #2
 80022a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80022a4:	f107 030c 	add.w	r3, r7, #12
 80022a8:	2204      	movs	r2, #4
 80022aa:	4619      	mov	r1, r3
 80022ac:	4810      	ldr	r0, [pc, #64]	@ (80022f0 <MX_TIM4_Init+0x144>)
 80022ae:	f003 fe92 	bl	8005fd6 <HAL_TIM_IC_ConfigChannel>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <MX_TIM4_Init+0x110>
  {
    Error_Handler();
 80022b8:	f000 fa00 	bl	80026bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022bc:	2300      	movs	r3, #0
 80022be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022c0:	2300      	movs	r3, #0
 80022c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80022c4:	463b      	mov	r3, r7
 80022c6:	4619      	mov	r1, r3
 80022c8:	4809      	ldr	r0, [pc, #36]	@ (80022f0 <MX_TIM4_Init+0x144>)
 80022ca:	f004 ffa1 	bl	8007210 <HAL_TIMEx_MasterConfigSynchronization>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <MX_TIM4_Init+0x12c>
  {
    Error_Handler();
 80022d4:	f000 f9f2 	bl	80026bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1); // Start input capture on channel 1
 80022d8:	2100      	movs	r1, #0
 80022da:	4805      	ldr	r0, [pc, #20]	@ (80022f0 <MX_TIM4_Init+0x144>)
 80022dc:	f003 fc2a 	bl	8005b34 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2); // Start input capture on channel 2
 80022e0:	2104      	movs	r1, #4
 80022e2:	4803      	ldr	r0, [pc, #12]	@ (80022f0 <MX_TIM4_Init+0x144>)
 80022e4:	f003 fc26 	bl	8005b34 <HAL_TIM_IC_Start_IT>
  /* USER CODE END TIM4_Init 2 */

}
 80022e8:	bf00      	nop
 80022ea:	3740      	adds	r7, #64	@ 0x40
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	2000032c 	.word	0x2000032c
 80022f4:	40000800 	.word	0x40000800

080022f8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b090      	sub	sp, #64	@ 0x40
 80022fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022fe:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002302:	2200      	movs	r2, #0
 8002304:	601a      	str	r2, [r3, #0]
 8002306:	605a      	str	r2, [r3, #4]
 8002308:	609a      	str	r2, [r3, #8]
 800230a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800230c:	f107 031c 	add.w	r3, r7, #28
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	605a      	str	r2, [r3, #4]
 8002316:	609a      	str	r2, [r3, #8]
 8002318:	60da      	str	r2, [r3, #12]
 800231a:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800231c:	f107 030c 	add.w	r3, r7, #12
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	605a      	str	r2, [r3, #4]
 8002326:	609a      	str	r2, [r3, #8]
 8002328:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800232a:	463b      	mov	r3, r7
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	605a      	str	r2, [r3, #4]
 8002332:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002334:	4b41      	ldr	r3, [pc, #260]	@ (800243c <MX_TIM5_Init+0x144>)
 8002336:	4a42      	ldr	r2, [pc, #264]	@ (8002440 <MX_TIM5_Init+0x148>)
 8002338:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800233a:	4b40      	ldr	r3, [pc, #256]	@ (800243c <MX_TIM5_Init+0x144>)
 800233c:	2200      	movs	r2, #0
 800233e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002340:	4b3e      	ldr	r3, [pc, #248]	@ (800243c <MX_TIM5_Init+0x144>)
 8002342:	2200      	movs	r2, #0
 8002344:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002346:	4b3d      	ldr	r3, [pc, #244]	@ (800243c <MX_TIM5_Init+0x144>)
 8002348:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800234c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800234e:	4b3b      	ldr	r3, [pc, #236]	@ (800243c <MX_TIM5_Init+0x144>)
 8002350:	2200      	movs	r2, #0
 8002352:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002354:	4b39      	ldr	r3, [pc, #228]	@ (800243c <MX_TIM5_Init+0x144>)
 8002356:	2200      	movs	r2, #0
 8002358:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800235a:	4838      	ldr	r0, [pc, #224]	@ (800243c <MX_TIM5_Init+0x144>)
 800235c:	f003 f9ca 	bl	80056f4 <HAL_TIM_Base_Init>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 8002366:	f000 f9a9 	bl	80026bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800236a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800236e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002370:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002374:	4619      	mov	r1, r3
 8002376:	4831      	ldr	r0, [pc, #196]	@ (800243c <MX_TIM5_Init+0x144>)
 8002378:	f003 ffde 	bl	8006338 <HAL_TIM_ConfigClockSource>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8002382:	f000 f99b 	bl	80026bc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8002386:	482d      	ldr	r0, [pc, #180]	@ (800243c <MX_TIM5_Init+0x144>)
 8002388:	f003 fb72 	bl	8005a70 <HAL_TIM_IC_Init>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8002392:	f000 f993 	bl	80026bc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002396:	2304      	movs	r3, #4
 8002398:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800239a:	2350      	movs	r3, #80	@ 0x50
 800239c:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800239e:	2300      	movs	r3, #0
 80023a0:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80023a2:	2300      	movs	r3, #0
 80023a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 80023a6:	2300      	movs	r3, #0
 80023a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 80023aa:	f107 031c 	add.w	r3, r7, #28
 80023ae:	4619      	mov	r1, r3
 80023b0:	4822      	ldr	r0, [pc, #136]	@ (800243c <MX_TIM5_Init+0x144>)
 80023b2:	f004 f88a 	bl	80064ca <HAL_TIM_SlaveConfigSynchro>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 80023bc:	f000 f97e 	bl	80026bc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80023c0:	2300      	movs	r3, #0
 80023c2:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80023c4:	2301      	movs	r3, #1
 80023c6:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80023c8:	2300      	movs	r3, #0
 80023ca:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80023cc:	2300      	movs	r3, #0
 80023ce:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80023d0:	f107 030c 	add.w	r3, r7, #12
 80023d4:	2200      	movs	r2, #0
 80023d6:	4619      	mov	r1, r3
 80023d8:	4818      	ldr	r0, [pc, #96]	@ (800243c <MX_TIM5_Init+0x144>)
 80023da:	f003 fdfc 	bl	8005fd6 <HAL_TIM_IC_ConfigChannel>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <MX_TIM5_Init+0xf0>
  {
    Error_Handler();
 80023e4:	f000 f96a 	bl	80026bc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80023e8:	2302      	movs	r3, #2
 80023ea:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80023ec:	2302      	movs	r3, #2
 80023ee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80023f0:	f107 030c 	add.w	r3, r7, #12
 80023f4:	2204      	movs	r2, #4
 80023f6:	4619      	mov	r1, r3
 80023f8:	4810      	ldr	r0, [pc, #64]	@ (800243c <MX_TIM5_Init+0x144>)
 80023fa:	f003 fdec 	bl	8005fd6 <HAL_TIM_IC_ConfigChannel>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <MX_TIM5_Init+0x110>
  {
    Error_Handler();
 8002404:	f000 f95a 	bl	80026bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002408:	2300      	movs	r3, #0
 800240a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800240c:	2300      	movs	r3, #0
 800240e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002410:	463b      	mov	r3, r7
 8002412:	4619      	mov	r1, r3
 8002414:	4809      	ldr	r0, [pc, #36]	@ (800243c <MX_TIM5_Init+0x144>)
 8002416:	f004 fefb 	bl	8007210 <HAL_TIMEx_MasterConfigSynchronization>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <MX_TIM5_Init+0x12c>
  {
    Error_Handler();
 8002420:	f000 f94c 	bl	80026bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1); // Start input capture on channel 1
 8002424:	2100      	movs	r1, #0
 8002426:	4805      	ldr	r0, [pc, #20]	@ (800243c <MX_TIM5_Init+0x144>)
 8002428:	f003 fb84 	bl	8005b34 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_2); // Start input capture on channel 2
 800242c:	2104      	movs	r1, #4
 800242e:	4803      	ldr	r0, [pc, #12]	@ (800243c <MX_TIM5_Init+0x144>)
 8002430:	f003 fb80 	bl	8005b34 <HAL_TIM_IC_Start_IT>
  /* USER CODE END TIM5_Init 2 */

}
 8002434:	bf00      	nop
 8002436:	3740      	adds	r7, #64	@ 0x40
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	20000378 	.word	0x20000378
 8002440:	40000c00 	.word	0x40000c00

08002444 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002448:	4b14      	ldr	r3, [pc, #80]	@ (800249c <MX_USART2_UART_Init+0x58>)
 800244a:	4a15      	ldr	r2, [pc, #84]	@ (80024a0 <MX_USART2_UART_Init+0x5c>)
 800244c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800244e:	4b13      	ldr	r3, [pc, #76]	@ (800249c <MX_USART2_UART_Init+0x58>)
 8002450:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002454:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002456:	4b11      	ldr	r3, [pc, #68]	@ (800249c <MX_USART2_UART_Init+0x58>)
 8002458:	2200      	movs	r2, #0
 800245a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800245c:	4b0f      	ldr	r3, [pc, #60]	@ (800249c <MX_USART2_UART_Init+0x58>)
 800245e:	2200      	movs	r2, #0
 8002460:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002462:	4b0e      	ldr	r3, [pc, #56]	@ (800249c <MX_USART2_UART_Init+0x58>)
 8002464:	2200      	movs	r2, #0
 8002466:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002468:	4b0c      	ldr	r3, [pc, #48]	@ (800249c <MX_USART2_UART_Init+0x58>)
 800246a:	220c      	movs	r2, #12
 800246c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800246e:	4b0b      	ldr	r3, [pc, #44]	@ (800249c <MX_USART2_UART_Init+0x58>)
 8002470:	2200      	movs	r2, #0
 8002472:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002474:	4b09      	ldr	r3, [pc, #36]	@ (800249c <MX_USART2_UART_Init+0x58>)
 8002476:	2200      	movs	r2, #0
 8002478:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800247a:	4b08      	ldr	r3, [pc, #32]	@ (800249c <MX_USART2_UART_Init+0x58>)
 800247c:	2200      	movs	r2, #0
 800247e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002480:	4b06      	ldr	r3, [pc, #24]	@ (800249c <MX_USART2_UART_Init+0x58>)
 8002482:	2200      	movs	r2, #0
 8002484:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002486:	4805      	ldr	r0, [pc, #20]	@ (800249c <MX_USART2_UART_Init+0x58>)
 8002488:	f004 ffe6 	bl	8007458 <HAL_UART_Init>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002492:	f000 f913 	bl	80026bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002496:	bf00      	nop
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	200003c4 	.word	0x200003c4
 80024a0:	40004400 	.word	0x40004400

080024a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b08a      	sub	sp, #40	@ 0x28
 80024a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024aa:	f107 0314 	add.w	r3, r7, #20
 80024ae:	2200      	movs	r2, #0
 80024b0:	601a      	str	r2, [r3, #0]
 80024b2:	605a      	str	r2, [r3, #4]
 80024b4:	609a      	str	r2, [r3, #8]
 80024b6:	60da      	str	r2, [r3, #12]
 80024b8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024ba:	4b2b      	ldr	r3, [pc, #172]	@ (8002568 <MX_GPIO_Init+0xc4>)
 80024bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024be:	4a2a      	ldr	r2, [pc, #168]	@ (8002568 <MX_GPIO_Init+0xc4>)
 80024c0:	f043 0304 	orr.w	r3, r3, #4
 80024c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024c6:	4b28      	ldr	r3, [pc, #160]	@ (8002568 <MX_GPIO_Init+0xc4>)
 80024c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ca:	f003 0304 	and.w	r3, r3, #4
 80024ce:	613b      	str	r3, [r7, #16]
 80024d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80024d2:	4b25      	ldr	r3, [pc, #148]	@ (8002568 <MX_GPIO_Init+0xc4>)
 80024d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024d6:	4a24      	ldr	r2, [pc, #144]	@ (8002568 <MX_GPIO_Init+0xc4>)
 80024d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024de:	4b22      	ldr	r3, [pc, #136]	@ (8002568 <MX_GPIO_Init+0xc4>)
 80024e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024e6:	60fb      	str	r3, [r7, #12]
 80024e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ea:	4b1f      	ldr	r3, [pc, #124]	@ (8002568 <MX_GPIO_Init+0xc4>)
 80024ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ee:	4a1e      	ldr	r2, [pc, #120]	@ (8002568 <MX_GPIO_Init+0xc4>)
 80024f0:	f043 0301 	orr.w	r3, r3, #1
 80024f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024f6:	4b1c      	ldr	r3, [pc, #112]	@ (8002568 <MX_GPIO_Init+0xc4>)
 80024f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	60bb      	str	r3, [r7, #8]
 8002500:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002502:	4b19      	ldr	r3, [pc, #100]	@ (8002568 <MX_GPIO_Init+0xc4>)
 8002504:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002506:	4a18      	ldr	r2, [pc, #96]	@ (8002568 <MX_GPIO_Init+0xc4>)
 8002508:	f043 0302 	orr.w	r3, r3, #2
 800250c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800250e:	4b16      	ldr	r3, [pc, #88]	@ (8002568 <MX_GPIO_Init+0xc4>)
 8002510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	607b      	str	r3, [r7, #4]
 8002518:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800251a:	2200      	movs	r2, #0
 800251c:	2120      	movs	r1, #32
 800251e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002522:	f000 ff8b 	bl	800343c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002526:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800252a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800252c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002530:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002532:	2300      	movs	r3, #0
 8002534:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002536:	f107 0314 	add.w	r3, r7, #20
 800253a:	4619      	mov	r1, r3
 800253c:	480b      	ldr	r0, [pc, #44]	@ (800256c <MX_GPIO_Init+0xc8>)
 800253e:	f000 fdd3 	bl	80030e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002542:	2320      	movs	r3, #32
 8002544:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002546:	2301      	movs	r3, #1
 8002548:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254a:	2300      	movs	r3, #0
 800254c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800254e:	2300      	movs	r3, #0
 8002550:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002552:	f107 0314 	add.w	r3, r7, #20
 8002556:	4619      	mov	r1, r3
 8002558:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800255c:	f000 fdc4 	bl	80030e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002560:	bf00      	nop
 8002562:	3728      	adds	r7, #40	@ 0x28
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	40021000 	.word	0x40021000
 800256c:	48000800 	.word	0x48000800

08002570 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800257c:	2300      	movs	r3, #0
 800257e:	617b      	str	r3, [r7, #20]
 8002580:	e009      	b.n	8002596 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	1c5a      	adds	r2, r3, #1
 8002586:	60ba      	str	r2, [r7, #8]
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f7ff f91f 	bl	80017ce <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	3301      	adds	r3, #1
 8002594:	617b      	str	r3, [r7, #20]
 8002596:	697a      	ldr	r2, [r7, #20]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	429a      	cmp	r2, r3
 800259c:	dbf1      	blt.n	8002582 <_write+0x12>
  }
  return len;
 800259e:	687b      	ldr	r3, [r7, #4]
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3718      	adds	r7, #24
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <HAL_TIM_IC_CaptureCallback>:
// 		}
// 	}
// }

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025a8:	b590      	push	{r4, r7, lr}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
    if(htim ->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	7f1b      	ldrb	r3, [r3, #28]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d16c      	bne.n	8002692 <HAL_TIM_IC_CaptureCallback+0xea>
    {
      if(htim == &htim2)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4a38      	ldr	r2, [pc, #224]	@ (800269c <HAL_TIM_IC_CaptureCallback+0xf4>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d115      	bne.n	80025ec <HAL_TIM_IC_CaptureCallback+0x44>
      {
        roll_input = 10000 * HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2) / HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1) - 750;
 80025c0:	2104      	movs	r1, #4
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f003 ffc4 	bl	8006550 <HAL_TIM_ReadCapturedValue>
 80025c8:	4603      	mov	r3, r0
 80025ca:	f242 7210 	movw	r2, #10000	@ 0x2710
 80025ce:	fb02 f403 	mul.w	r4, r2, r3
 80025d2:	2100      	movs	r1, #0
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f003 ffbb 	bl	8006550 <HAL_TIM_ReadCapturedValue>
 80025da:	4603      	mov	r3, r0
 80025dc:	fbb4 f3f3 	udiv	r3, r4, r3
 80025e0:	f2a3 23ee 	subw	r3, r3, #750	@ 0x2ee
 80025e4:	461a      	mov	r2, r3
 80025e6:	4b2e      	ldr	r3, [pc, #184]	@ (80026a0 <HAL_TIM_IC_CaptureCallback+0xf8>)
 80025e8:	601a      	str	r2, [r3, #0]
      else if(htim->Instance == htim5.Instance)
      {
        yaw_input = 10000 * HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2) / HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1) - 750;
      }
     }
}
 80025ea:	e052      	b.n	8002692 <HAL_TIM_IC_CaptureCallback+0xea>
      else if(htim->Instance == htim3.Instance)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	4b2c      	ldr	r3, [pc, #176]	@ (80026a4 <HAL_TIM_IC_CaptureCallback+0xfc>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d115      	bne.n	8002624 <HAL_TIM_IC_CaptureCallback+0x7c>
        pitch_input = 10000 * HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2) / HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1) - 750;
 80025f8:	2104      	movs	r1, #4
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f003 ffa8 	bl	8006550 <HAL_TIM_ReadCapturedValue>
 8002600:	4603      	mov	r3, r0
 8002602:	f242 7210 	movw	r2, #10000	@ 0x2710
 8002606:	fb02 f403 	mul.w	r4, r2, r3
 800260a:	2100      	movs	r1, #0
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f003 ff9f 	bl	8006550 <HAL_TIM_ReadCapturedValue>
 8002612:	4603      	mov	r3, r0
 8002614:	fbb4 f3f3 	udiv	r3, r4, r3
 8002618:	f2a3 23ee 	subw	r3, r3, #750	@ 0x2ee
 800261c:	461a      	mov	r2, r3
 800261e:	4b22      	ldr	r3, [pc, #136]	@ (80026a8 <HAL_TIM_IC_CaptureCallback+0x100>)
 8002620:	601a      	str	r2, [r3, #0]
}
 8002622:	e036      	b.n	8002692 <HAL_TIM_IC_CaptureCallback+0xea>
      else if(htim->Instance == htim4.Instance)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	4b20      	ldr	r3, [pc, #128]	@ (80026ac <HAL_TIM_IC_CaptureCallback+0x104>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	429a      	cmp	r2, r3
 800262e:	d115      	bne.n	800265c <HAL_TIM_IC_CaptureCallback+0xb4>
        thrust_input = 10000 * HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2) / HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1) - 500;
 8002630:	2104      	movs	r1, #4
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f003 ff8c 	bl	8006550 <HAL_TIM_ReadCapturedValue>
 8002638:	4603      	mov	r3, r0
 800263a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800263e:	fb02 f403 	mul.w	r4, r2, r3
 8002642:	2100      	movs	r1, #0
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f003 ff83 	bl	8006550 <HAL_TIM_ReadCapturedValue>
 800264a:	4603      	mov	r3, r0
 800264c:	fbb4 f3f3 	udiv	r3, r4, r3
 8002650:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8002654:	461a      	mov	r2, r3
 8002656:	4b16      	ldr	r3, [pc, #88]	@ (80026b0 <HAL_TIM_IC_CaptureCallback+0x108>)
 8002658:	601a      	str	r2, [r3, #0]
}
 800265a:	e01a      	b.n	8002692 <HAL_TIM_IC_CaptureCallback+0xea>
      else if(htim->Instance == htim5.Instance)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	4b14      	ldr	r3, [pc, #80]	@ (80026b4 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	429a      	cmp	r2, r3
 8002666:	d114      	bne.n	8002692 <HAL_TIM_IC_CaptureCallback+0xea>
        yaw_input = 10000 * HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2) / HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1) - 750;
 8002668:	2104      	movs	r1, #4
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f003 ff70 	bl	8006550 <HAL_TIM_ReadCapturedValue>
 8002670:	4603      	mov	r3, r0
 8002672:	f242 7210 	movw	r2, #10000	@ 0x2710
 8002676:	fb02 f403 	mul.w	r4, r2, r3
 800267a:	2100      	movs	r1, #0
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f003 ff67 	bl	8006550 <HAL_TIM_ReadCapturedValue>
 8002682:	4603      	mov	r3, r0
 8002684:	fbb4 f3f3 	udiv	r3, r4, r3
 8002688:	f2a3 23ee 	subw	r3, r3, #750	@ 0x2ee
 800268c:	461a      	mov	r2, r3
 800268e:	4b0a      	ldr	r3, [pc, #40]	@ (80026b8 <HAL_TIM_IC_CaptureCallback+0x110>)
 8002690:	601a      	str	r2, [r3, #0]
}
 8002692:	bf00      	nop
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	bd90      	pop	{r4, r7, pc}
 800269a:	bf00      	nop
 800269c:	20000294 	.word	0x20000294
 80026a0:	2000055c 	.word	0x2000055c
 80026a4:	200002e0 	.word	0x200002e0
 80026a8:	20000560 	.word	0x20000560
 80026ac:	2000032c 	.word	0x2000032c
 80026b0:	20000564 	.word	0x20000564
 80026b4:	20000378 	.word	0x20000378
 80026b8:	20000568 	.word	0x20000568

080026bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026c0:	b672      	cpsid	i
}
 80026c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026c4:	bf00      	nop
 80026c6:	e7fd      	b.n	80026c4 <Error_Handler+0x8>

080026c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ce:	4b0f      	ldr	r3, [pc, #60]	@ (800270c <HAL_MspInit+0x44>)
 80026d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026d2:	4a0e      	ldr	r2, [pc, #56]	@ (800270c <HAL_MspInit+0x44>)
 80026d4:	f043 0301 	orr.w	r3, r3, #1
 80026d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80026da:	4b0c      	ldr	r3, [pc, #48]	@ (800270c <HAL_MspInit+0x44>)
 80026dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	607b      	str	r3, [r7, #4]
 80026e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026e6:	4b09      	ldr	r3, [pc, #36]	@ (800270c <HAL_MspInit+0x44>)
 80026e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ea:	4a08      	ldr	r2, [pc, #32]	@ (800270c <HAL_MspInit+0x44>)
 80026ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80026f2:	4b06      	ldr	r3, [pc, #24]	@ (800270c <HAL_MspInit+0x44>)
 80026f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026fa:	603b      	str	r3, [r7, #0]
 80026fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026fe:	bf00      	nop
 8002700:	370c      	adds	r7, #12
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	40021000 	.word	0x40021000

08002710 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b0ac      	sub	sp, #176	@ 0xb0
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002718:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	605a      	str	r2, [r3, #4]
 8002722:	609a      	str	r2, [r3, #8]
 8002724:	60da      	str	r2, [r3, #12]
 8002726:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002728:	f107 0314 	add.w	r3, r7, #20
 800272c:	2288      	movs	r2, #136	@ 0x88
 800272e:	2100      	movs	r1, #0
 8002730:	4618      	mov	r0, r3
 8002732:	f007 f97d 	bl	8009a30 <memset>
  if(hi2c->Instance==I2C1)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a21      	ldr	r2, [pc, #132]	@ (80027c0 <HAL_I2C_MspInit+0xb0>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d13b      	bne.n	80027b8 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002740:	2340      	movs	r3, #64	@ 0x40
 8002742:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002744:	2300      	movs	r3, #0
 8002746:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002748:	f107 0314 	add.w	r3, r7, #20
 800274c:	4618      	mov	r0, r3
 800274e:	f002 fb15 	bl	8004d7c <HAL_RCCEx_PeriphCLKConfig>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002758:	f7ff ffb0 	bl	80026bc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800275c:	4b19      	ldr	r3, [pc, #100]	@ (80027c4 <HAL_I2C_MspInit+0xb4>)
 800275e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002760:	4a18      	ldr	r2, [pc, #96]	@ (80027c4 <HAL_I2C_MspInit+0xb4>)
 8002762:	f043 0302 	orr.w	r3, r3, #2
 8002766:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002768:	4b16      	ldr	r3, [pc, #88]	@ (80027c4 <HAL_I2C_MspInit+0xb4>)
 800276a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	613b      	str	r3, [r7, #16]
 8002772:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002774:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002778:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800277c:	2312      	movs	r3, #18
 800277e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002782:	2300      	movs	r3, #0
 8002784:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002788:	2303      	movs	r3, #3
 800278a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800278e:	2304      	movs	r3, #4
 8002790:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002794:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002798:	4619      	mov	r1, r3
 800279a:	480b      	ldr	r0, [pc, #44]	@ (80027c8 <HAL_I2C_MspInit+0xb8>)
 800279c:	f000 fca4 	bl	80030e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027a0:	4b08      	ldr	r3, [pc, #32]	@ (80027c4 <HAL_I2C_MspInit+0xb4>)
 80027a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027a4:	4a07      	ldr	r2, [pc, #28]	@ (80027c4 <HAL_I2C_MspInit+0xb4>)
 80027a6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80027aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80027ac:	4b05      	ldr	r3, [pc, #20]	@ (80027c4 <HAL_I2C_MspInit+0xb4>)
 80027ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027b4:	60fb      	str	r3, [r7, #12]
 80027b6:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80027b8:	bf00      	nop
 80027ba:	37b0      	adds	r7, #176	@ 0xb0
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	40005400 	.word	0x40005400
 80027c4:	40021000 	.word	0x40021000
 80027c8:	48000400 	.word	0x48000400

080027cc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b090      	sub	sp, #64	@ 0x40
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80027d8:	2200      	movs	r2, #0
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	605a      	str	r2, [r3, #4]
 80027de:	609a      	str	r2, [r3, #8]
 80027e0:	60da      	str	r2, [r3, #12]
 80027e2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a77      	ldr	r2, [pc, #476]	@ (80029c8 <HAL_TIM_Base_MspInit+0x1fc>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d10c      	bne.n	8002808 <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027ee:	4b77      	ldr	r3, [pc, #476]	@ (80029cc <HAL_TIM_Base_MspInit+0x200>)
 80027f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027f2:	4a76      	ldr	r2, [pc, #472]	@ (80029cc <HAL_TIM_Base_MspInit+0x200>)
 80027f4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80027f8:	6613      	str	r3, [r2, #96]	@ 0x60
 80027fa:	4b74      	ldr	r3, [pc, #464]	@ (80029cc <HAL_TIM_Base_MspInit+0x200>)
 80027fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002802:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /* USER CODE BEGIN TIM5_MspInit 1 */

    /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002806:	e0da      	b.n	80029be <HAL_TIM_Base_MspInit+0x1f2>
  else if(htim_base->Instance==TIM2)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002810:	d132      	bne.n	8002878 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002812:	4b6e      	ldr	r3, [pc, #440]	@ (80029cc <HAL_TIM_Base_MspInit+0x200>)
 8002814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002816:	4a6d      	ldr	r2, [pc, #436]	@ (80029cc <HAL_TIM_Base_MspInit+0x200>)
 8002818:	f043 0301 	orr.w	r3, r3, #1
 800281c:	6593      	str	r3, [r2, #88]	@ 0x58
 800281e:	4b6b      	ldr	r3, [pc, #428]	@ (80029cc <HAL_TIM_Base_MspInit+0x200>)
 8002820:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	627b      	str	r3, [r7, #36]	@ 0x24
 8002828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800282a:	4b68      	ldr	r3, [pc, #416]	@ (80029cc <HAL_TIM_Base_MspInit+0x200>)
 800282c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800282e:	4a67      	ldr	r2, [pc, #412]	@ (80029cc <HAL_TIM_Base_MspInit+0x200>)
 8002830:	f043 0301 	orr.w	r3, r3, #1
 8002834:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002836:	4b65      	ldr	r3, [pc, #404]	@ (80029cc <HAL_TIM_Base_MspInit+0x200>)
 8002838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	623b      	str	r3, [r7, #32]
 8002840:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = ROLL_INPUT_PWM_Pin;
 8002842:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002846:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002848:	2302      	movs	r3, #2
 800284a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284c:	2300      	movs	r3, #0
 800284e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002850:	2300      	movs	r3, #0
 8002852:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002854:	2301      	movs	r3, #1
 8002856:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(ROLL_INPUT_PWM_GPIO_Port, &GPIO_InitStruct);
 8002858:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800285c:	4619      	mov	r1, r3
 800285e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002862:	f000 fc41 	bl	80030e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002866:	2200      	movs	r2, #0
 8002868:	2100      	movs	r1, #0
 800286a:	201c      	movs	r0, #28
 800286c:	f000 fc05 	bl	800307a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002870:	201c      	movs	r0, #28
 8002872:	f000 fc1e 	bl	80030b2 <HAL_NVIC_EnableIRQ>
}
 8002876:	e0a2      	b.n	80029be <HAL_TIM_Base_MspInit+0x1f2>
  else if(htim_base->Instance==TIM3)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a54      	ldr	r2, [pc, #336]	@ (80029d0 <HAL_TIM_Base_MspInit+0x204>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d131      	bne.n	80028e6 <HAL_TIM_Base_MspInit+0x11a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002882:	4b52      	ldr	r3, [pc, #328]	@ (80029cc <HAL_TIM_Base_MspInit+0x200>)
 8002884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002886:	4a51      	ldr	r2, [pc, #324]	@ (80029cc <HAL_TIM_Base_MspInit+0x200>)
 8002888:	f043 0302 	orr.w	r3, r3, #2
 800288c:	6593      	str	r3, [r2, #88]	@ 0x58
 800288e:	4b4f      	ldr	r3, [pc, #316]	@ (80029cc <HAL_TIM_Base_MspInit+0x200>)
 8002890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	61fb      	str	r3, [r7, #28]
 8002898:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800289a:	4b4c      	ldr	r3, [pc, #304]	@ (80029cc <HAL_TIM_Base_MspInit+0x200>)
 800289c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800289e:	4a4b      	ldr	r2, [pc, #300]	@ (80029cc <HAL_TIM_Base_MspInit+0x200>)
 80028a0:	f043 0301 	orr.w	r3, r3, #1
 80028a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028a6:	4b49      	ldr	r3, [pc, #292]	@ (80029cc <HAL_TIM_Base_MspInit+0x200>)
 80028a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	61bb      	str	r3, [r7, #24]
 80028b0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = PITCH_INPUT_PWM_Pin;
 80028b2:	2340      	movs	r3, #64	@ 0x40
 80028b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b6:	2302      	movs	r3, #2
 80028b8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ba:	2300      	movs	r3, #0
 80028bc:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028be:	2300      	movs	r3, #0
 80028c0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80028c2:	2302      	movs	r3, #2
 80028c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(PITCH_INPUT_PWM_GPIO_Port, &GPIO_InitStruct);
 80028c6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80028ca:	4619      	mov	r1, r3
 80028cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028d0:	f000 fc0a 	bl	80030e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80028d4:	2200      	movs	r2, #0
 80028d6:	2100      	movs	r1, #0
 80028d8:	201d      	movs	r0, #29
 80028da:	f000 fbce 	bl	800307a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80028de:	201d      	movs	r0, #29
 80028e0:	f000 fbe7 	bl	80030b2 <HAL_NVIC_EnableIRQ>
}
 80028e4:	e06b      	b.n	80029be <HAL_TIM_Base_MspInit+0x1f2>
  else if(htim_base->Instance==TIM4)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a3a      	ldr	r2, [pc, #232]	@ (80029d4 <HAL_TIM_Base_MspInit+0x208>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d130      	bne.n	8002952 <HAL_TIM_Base_MspInit+0x186>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80028f0:	4b36      	ldr	r3, [pc, #216]	@ (80029cc <HAL_TIM_Base_MspInit+0x200>)
 80028f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028f4:	4a35      	ldr	r2, [pc, #212]	@ (80029cc <HAL_TIM_Base_MspInit+0x200>)
 80028f6:	f043 0304 	orr.w	r3, r3, #4
 80028fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80028fc:	4b33      	ldr	r3, [pc, #204]	@ (80029cc <HAL_TIM_Base_MspInit+0x200>)
 80028fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002900:	f003 0304 	and.w	r3, r3, #4
 8002904:	617b      	str	r3, [r7, #20]
 8002906:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002908:	4b30      	ldr	r3, [pc, #192]	@ (80029cc <HAL_TIM_Base_MspInit+0x200>)
 800290a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800290c:	4a2f      	ldr	r2, [pc, #188]	@ (80029cc <HAL_TIM_Base_MspInit+0x200>)
 800290e:	f043 0302 	orr.w	r3, r3, #2
 8002912:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002914:	4b2d      	ldr	r3, [pc, #180]	@ (80029cc <HAL_TIM_Base_MspInit+0x200>)
 8002916:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	613b      	str	r3, [r7, #16]
 800291e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TRHUST_INPUT_PWM_Pin;
 8002920:	2340      	movs	r3, #64	@ 0x40
 8002922:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002924:	2302      	movs	r3, #2
 8002926:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002928:	2300      	movs	r3, #0
 800292a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800292c:	2300      	movs	r3, #0
 800292e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002930:	2302      	movs	r3, #2
 8002932:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(TRHUST_INPUT_PWM_GPIO_Port, &GPIO_InitStruct);
 8002934:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002938:	4619      	mov	r1, r3
 800293a:	4827      	ldr	r0, [pc, #156]	@ (80029d8 <HAL_TIM_Base_MspInit+0x20c>)
 800293c:	f000 fbd4 	bl	80030e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002940:	2200      	movs	r2, #0
 8002942:	2100      	movs	r1, #0
 8002944:	201e      	movs	r0, #30
 8002946:	f000 fb98 	bl	800307a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800294a:	201e      	movs	r0, #30
 800294c:	f000 fbb1 	bl	80030b2 <HAL_NVIC_EnableIRQ>
}
 8002950:	e035      	b.n	80029be <HAL_TIM_Base_MspInit+0x1f2>
  else if(htim_base->Instance==TIM5)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a21      	ldr	r2, [pc, #132]	@ (80029dc <HAL_TIM_Base_MspInit+0x210>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d130      	bne.n	80029be <HAL_TIM_Base_MspInit+0x1f2>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800295c:	4b1b      	ldr	r3, [pc, #108]	@ (80029cc <HAL_TIM_Base_MspInit+0x200>)
 800295e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002960:	4a1a      	ldr	r2, [pc, #104]	@ (80029cc <HAL_TIM_Base_MspInit+0x200>)
 8002962:	f043 0308 	orr.w	r3, r3, #8
 8002966:	6593      	str	r3, [r2, #88]	@ 0x58
 8002968:	4b18      	ldr	r3, [pc, #96]	@ (80029cc <HAL_TIM_Base_MspInit+0x200>)
 800296a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800296c:	f003 0308 	and.w	r3, r3, #8
 8002970:	60fb      	str	r3, [r7, #12]
 8002972:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002974:	4b15      	ldr	r3, [pc, #84]	@ (80029cc <HAL_TIM_Base_MspInit+0x200>)
 8002976:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002978:	4a14      	ldr	r2, [pc, #80]	@ (80029cc <HAL_TIM_Base_MspInit+0x200>)
 800297a:	f043 0301 	orr.w	r3, r3, #1
 800297e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002980:	4b12      	ldr	r3, [pc, #72]	@ (80029cc <HAL_TIM_Base_MspInit+0x200>)
 8002982:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002984:	f003 0301 	and.w	r3, r3, #1
 8002988:	60bb      	str	r3, [r7, #8]
 800298a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = YAW_INPUT_PWM_Pin;
 800298c:	2301      	movs	r3, #1
 800298e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002990:	2302      	movs	r3, #2
 8002992:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002994:	2300      	movs	r3, #0
 8002996:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002998:	2300      	movs	r3, #0
 800299a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800299c:	2302      	movs	r3, #2
 800299e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(YAW_INPUT_PWM_GPIO_Port, &GPIO_InitStruct);
 80029a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80029a4:	4619      	mov	r1, r3
 80029a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80029aa:	f000 fb9d 	bl	80030e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80029ae:	2200      	movs	r2, #0
 80029b0:	2100      	movs	r1, #0
 80029b2:	2032      	movs	r0, #50	@ 0x32
 80029b4:	f000 fb61 	bl	800307a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80029b8:	2032      	movs	r0, #50	@ 0x32
 80029ba:	f000 fb7a 	bl	80030b2 <HAL_NVIC_EnableIRQ>
}
 80029be:	bf00      	nop
 80029c0:	3740      	adds	r7, #64	@ 0x40
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	40012c00 	.word	0x40012c00
 80029cc:	40021000 	.word	0x40021000
 80029d0:	40000400 	.word	0x40000400
 80029d4:	40000800 	.word	0x40000800
 80029d8:	48000400 	.word	0x48000400
 80029dc:	40000c00 	.word	0x40000c00

080029e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b088      	sub	sp, #32
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e8:	f107 030c 	add.w	r3, r7, #12
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]
 80029f0:	605a      	str	r2, [r3, #4]
 80029f2:	609a      	str	r2, [r3, #8]
 80029f4:	60da      	str	r2, [r3, #12]
 80029f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a12      	ldr	r2, [pc, #72]	@ (8002a48 <HAL_TIM_MspPostInit+0x68>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d11d      	bne.n	8002a3e <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a02:	4b12      	ldr	r3, [pc, #72]	@ (8002a4c <HAL_TIM_MspPostInit+0x6c>)
 8002a04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a06:	4a11      	ldr	r2, [pc, #68]	@ (8002a4c <HAL_TIM_MspPostInit+0x6c>)
 8002a08:	f043 0301 	orr.w	r3, r3, #1
 8002a0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a0e:	4b0f      	ldr	r3, [pc, #60]	@ (8002a4c <HAL_TIM_MspPostInit+0x6c>)
 8002a10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	60bb      	str	r3, [r7, #8]
 8002a18:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8002a1a:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002a1e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a20:	2302      	movs	r3, #2
 8002a22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a24:	2300      	movs	r3, #0
 8002a26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a30:	f107 030c 	add.w	r3, r7, #12
 8002a34:	4619      	mov	r1, r3
 8002a36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a3a:	f000 fb55 	bl	80030e8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002a3e:	bf00      	nop
 8002a40:	3720      	adds	r7, #32
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	40012c00 	.word	0x40012c00
 8002a4c:	40021000 	.word	0x40021000

08002a50 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b0ac      	sub	sp, #176	@ 0xb0
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a58:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	601a      	str	r2, [r3, #0]
 8002a60:	605a      	str	r2, [r3, #4]
 8002a62:	609a      	str	r2, [r3, #8]
 8002a64:	60da      	str	r2, [r3, #12]
 8002a66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a68:	f107 0314 	add.w	r3, r7, #20
 8002a6c:	2288      	movs	r2, #136	@ 0x88
 8002a6e:	2100      	movs	r1, #0
 8002a70:	4618      	mov	r0, r3
 8002a72:	f006 ffdd 	bl	8009a30 <memset>
  if(huart->Instance==USART2)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a21      	ldr	r2, [pc, #132]	@ (8002b00 <HAL_UART_MspInit+0xb0>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d13b      	bne.n	8002af8 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002a80:	2302      	movs	r3, #2
 8002a82:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002a84:	2300      	movs	r3, #0
 8002a86:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a88:	f107 0314 	add.w	r3, r7, #20
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f002 f975 	bl	8004d7c <HAL_RCCEx_PeriphCLKConfig>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d001      	beq.n	8002a9c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002a98:	f7ff fe10 	bl	80026bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a9c:	4b19      	ldr	r3, [pc, #100]	@ (8002b04 <HAL_UART_MspInit+0xb4>)
 8002a9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aa0:	4a18      	ldr	r2, [pc, #96]	@ (8002b04 <HAL_UART_MspInit+0xb4>)
 8002aa2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002aa6:	6593      	str	r3, [r2, #88]	@ 0x58
 8002aa8:	4b16      	ldr	r3, [pc, #88]	@ (8002b04 <HAL_UART_MspInit+0xb4>)
 8002aaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ab0:	613b      	str	r3, [r7, #16]
 8002ab2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ab4:	4b13      	ldr	r3, [pc, #76]	@ (8002b04 <HAL_UART_MspInit+0xb4>)
 8002ab6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ab8:	4a12      	ldr	r2, [pc, #72]	@ (8002b04 <HAL_UART_MspInit+0xb4>)
 8002aba:	f043 0301 	orr.w	r3, r3, #1
 8002abe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ac0:	4b10      	ldr	r3, [pc, #64]	@ (8002b04 <HAL_UART_MspInit+0xb4>)
 8002ac2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	60fb      	str	r3, [r7, #12]
 8002aca:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002acc:	230c      	movs	r3, #12
 8002ace:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002ae4:	2307      	movs	r3, #7
 8002ae6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aea:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002aee:	4619      	mov	r1, r3
 8002af0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002af4:	f000 faf8 	bl	80030e8 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8002af8:	bf00      	nop
 8002afa:	37b0      	adds	r7, #176	@ 0xb0
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	40004400 	.word	0x40004400
 8002b04:	40021000 	.word	0x40021000

08002b08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b0c:	bf00      	nop
 8002b0e:	e7fd      	b.n	8002b0c <NMI_Handler+0x4>

08002b10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b14:	bf00      	nop
 8002b16:	e7fd      	b.n	8002b14 <HardFault_Handler+0x4>

08002b18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b1c:	bf00      	nop
 8002b1e:	e7fd      	b.n	8002b1c <MemManage_Handler+0x4>

08002b20 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b24:	bf00      	nop
 8002b26:	e7fd      	b.n	8002b24 <BusFault_Handler+0x4>

08002b28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b2c:	bf00      	nop
 8002b2e:	e7fd      	b.n	8002b2c <UsageFault_Handler+0x4>

08002b30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b34:	bf00      	nop
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr

08002b3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b42:	bf00      	nop
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b50:	bf00      	nop
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr

08002b5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b5e:	f000 f96d 	bl	8002e3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b62:	bf00      	nop
 8002b64:	bd80      	pop	{r7, pc}
	...

08002b68 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002b6c:	4802      	ldr	r0, [pc, #8]	@ (8002b78 <TIM2_IRQHandler+0x10>)
 8002b6e:	f003 f92b 	bl	8005dc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002b72:	bf00      	nop
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	20000294 	.word	0x20000294

08002b7c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002b80:	4802      	ldr	r0, [pc, #8]	@ (8002b8c <TIM3_IRQHandler+0x10>)
 8002b82:	f003 f921 	bl	8005dc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002b86:	bf00      	nop
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	200002e0 	.word	0x200002e0

08002b90 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002b94:	4802      	ldr	r0, [pc, #8]	@ (8002ba0 <TIM4_IRQHandler+0x10>)
 8002b96:	f003 f917 	bl	8005dc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002b9a:	bf00      	nop
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	2000032c 	.word	0x2000032c

08002ba4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002ba8:	4802      	ldr	r0, [pc, #8]	@ (8002bb4 <TIM5_IRQHandler+0x10>)
 8002baa:	f003 f90d 	bl	8005dc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002bae:	bf00      	nop
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	20000378 	.word	0x20000378

08002bb8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0
  return 1;
 8002bbc:	2301      	movs	r3, #1
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <_kill>:

int _kill(int pid, int sig)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002bd2:	f006 ff47 	bl	8009a64 <__errno>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2216      	movs	r2, #22
 8002bda:	601a      	str	r2, [r3, #0]
  return -1;
 8002bdc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3708      	adds	r7, #8
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <_exit>:

void _exit (int status)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002bf0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f7ff ffe7 	bl	8002bc8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002bfa:	bf00      	nop
 8002bfc:	e7fd      	b.n	8002bfa <_exit+0x12>

08002bfe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b086      	sub	sp, #24
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	60f8      	str	r0, [r7, #12]
 8002c06:	60b9      	str	r1, [r7, #8]
 8002c08:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	617b      	str	r3, [r7, #20]
 8002c0e:	e00a      	b.n	8002c26 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c10:	f3af 8000 	nop.w
 8002c14:	4601      	mov	r1, r0
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	1c5a      	adds	r2, r3, #1
 8002c1a:	60ba      	str	r2, [r7, #8]
 8002c1c:	b2ca      	uxtb	r2, r1
 8002c1e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	3301      	adds	r3, #1
 8002c24:	617b      	str	r3, [r7, #20]
 8002c26:	697a      	ldr	r2, [r7, #20]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	dbf0      	blt.n	8002c10 <_read+0x12>
  }

  return len;
 8002c2e:	687b      	ldr	r3, [r7, #4]
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3718      	adds	r7, #24
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c60:	605a      	str	r2, [r3, #4]
  return 0;
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <_isatty>:

int _isatty(int file)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c78:	2301      	movs	r3, #1
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr

08002c86 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c86:	b480      	push	{r7}
 8002c88:	b085      	sub	sp, #20
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	60f8      	str	r0, [r7, #12]
 8002c8e:	60b9      	str	r1, [r7, #8]
 8002c90:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3714      	adds	r7, #20
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ca8:	4a14      	ldr	r2, [pc, #80]	@ (8002cfc <_sbrk+0x5c>)
 8002caa:	4b15      	ldr	r3, [pc, #84]	@ (8002d00 <_sbrk+0x60>)
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cb4:	4b13      	ldr	r3, [pc, #76]	@ (8002d04 <_sbrk+0x64>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d102      	bne.n	8002cc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cbc:	4b11      	ldr	r3, [pc, #68]	@ (8002d04 <_sbrk+0x64>)
 8002cbe:	4a12      	ldr	r2, [pc, #72]	@ (8002d08 <_sbrk+0x68>)
 8002cc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cc2:	4b10      	ldr	r3, [pc, #64]	@ (8002d04 <_sbrk+0x64>)
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4413      	add	r3, r2
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d207      	bcs.n	8002ce0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002cd0:	f006 fec8 	bl	8009a64 <__errno>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	220c      	movs	r2, #12
 8002cd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cda:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002cde:	e009      	b.n	8002cf4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ce0:	4b08      	ldr	r3, [pc, #32]	@ (8002d04 <_sbrk+0x64>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ce6:	4b07      	ldr	r3, [pc, #28]	@ (8002d04 <_sbrk+0x64>)
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4413      	add	r3, r2
 8002cee:	4a05      	ldr	r2, [pc, #20]	@ (8002d04 <_sbrk+0x64>)
 8002cf0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3718      	adds	r7, #24
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	20018000 	.word	0x20018000
 8002d00:	00000400 	.word	0x00000400
 8002d04:	2000056c 	.word	0x2000056c
 8002d08:	200006c0 	.word	0x200006c0

08002d0c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002d10:	4b06      	ldr	r3, [pc, #24]	@ (8002d2c <SystemInit+0x20>)
 8002d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d16:	4a05      	ldr	r2, [pc, #20]	@ (8002d2c <SystemInit+0x20>)
 8002d18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002d20:	bf00      	nop
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	e000ed00 	.word	0xe000ed00

08002d30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002d30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002d68 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002d34:	f7ff ffea 	bl	8002d0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d38:	480c      	ldr	r0, [pc, #48]	@ (8002d6c <LoopForever+0x6>)
  ldr r1, =_edata
 8002d3a:	490d      	ldr	r1, [pc, #52]	@ (8002d70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d3c:	4a0d      	ldr	r2, [pc, #52]	@ (8002d74 <LoopForever+0xe>)
  movs r3, #0
 8002d3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d40:	e002      	b.n	8002d48 <LoopCopyDataInit>

08002d42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d46:	3304      	adds	r3, #4

08002d48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d4c:	d3f9      	bcc.n	8002d42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d4e:	4a0a      	ldr	r2, [pc, #40]	@ (8002d78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d50:	4c0a      	ldr	r4, [pc, #40]	@ (8002d7c <LoopForever+0x16>)
  movs r3, #0
 8002d52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d54:	e001      	b.n	8002d5a <LoopFillZerobss>

08002d56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d58:	3204      	adds	r2, #4

08002d5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d5c:	d3fb      	bcc.n	8002d56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d5e:	f006 fe87 	bl	8009a70 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002d62:	f7fe fd5b 	bl	800181c <main>

08002d66 <LoopForever>:

LoopForever:
    b LoopForever
 8002d66:	e7fe      	b.n	8002d66 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002d68:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002d6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d70:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002d74:	0800cd78 	.word	0x0800cd78
  ldr r2, =_sbss
 8002d78:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002d7c:	200006c0 	.word	0x200006c0

08002d80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002d80:	e7fe      	b.n	8002d80 <ADC1_2_IRQHandler>
	...

08002d84 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d8e:	4b0c      	ldr	r3, [pc, #48]	@ (8002dc0 <HAL_Init+0x3c>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a0b      	ldr	r2, [pc, #44]	@ (8002dc0 <HAL_Init+0x3c>)
 8002d94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d98:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d9a:	2003      	movs	r0, #3
 8002d9c:	f000 f962 	bl	8003064 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002da0:	2000      	movs	r0, #0
 8002da2:	f000 f80f 	bl	8002dc4 <HAL_InitTick>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d002      	beq.n	8002db2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	71fb      	strb	r3, [r7, #7]
 8002db0:	e001      	b.n	8002db6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002db2:	f7ff fc89 	bl	80026c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002db6:	79fb      	ldrb	r3, [r7, #7]
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3708      	adds	r7, #8
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	40022000 	.word	0x40022000

08002dc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002dd0:	4b17      	ldr	r3, [pc, #92]	@ (8002e30 <HAL_InitTick+0x6c>)
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d023      	beq.n	8002e20 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002dd8:	4b16      	ldr	r3, [pc, #88]	@ (8002e34 <HAL_InitTick+0x70>)
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	4b14      	ldr	r3, [pc, #80]	@ (8002e30 <HAL_InitTick+0x6c>)
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	4619      	mov	r1, r3
 8002de2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002de6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dee:	4618      	mov	r0, r3
 8002df0:	f000 f96d 	bl	80030ce <HAL_SYSTICK_Config>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d10f      	bne.n	8002e1a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2b0f      	cmp	r3, #15
 8002dfe:	d809      	bhi.n	8002e14 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e00:	2200      	movs	r2, #0
 8002e02:	6879      	ldr	r1, [r7, #4]
 8002e04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002e08:	f000 f937 	bl	800307a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e0c:	4a0a      	ldr	r2, [pc, #40]	@ (8002e38 <HAL_InitTick+0x74>)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6013      	str	r3, [r2, #0]
 8002e12:	e007      	b.n	8002e24 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	73fb      	strb	r3, [r7, #15]
 8002e18:	e004      	b.n	8002e24 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	73fb      	strb	r3, [r7, #15]
 8002e1e:	e001      	b.n	8002e24 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3710      	adds	r7, #16
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	2000000c 	.word	0x2000000c
 8002e34:	20000004 	.word	0x20000004
 8002e38:	20000008 	.word	0x20000008

08002e3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002e40:	4b06      	ldr	r3, [pc, #24]	@ (8002e5c <HAL_IncTick+0x20>)
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	461a      	mov	r2, r3
 8002e46:	4b06      	ldr	r3, [pc, #24]	@ (8002e60 <HAL_IncTick+0x24>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	4a04      	ldr	r2, [pc, #16]	@ (8002e60 <HAL_IncTick+0x24>)
 8002e4e:	6013      	str	r3, [r2, #0]
}
 8002e50:	bf00      	nop
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	2000000c 	.word	0x2000000c
 8002e60:	20000570 	.word	0x20000570

08002e64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
  return uwTick;
 8002e68:	4b03      	ldr	r3, [pc, #12]	@ (8002e78 <HAL_GetTick+0x14>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	20000570 	.word	0x20000570

08002e7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e84:	f7ff ffee 	bl	8002e64 <HAL_GetTick>
 8002e88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002e94:	d005      	beq.n	8002ea2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002e96:	4b0a      	ldr	r3, [pc, #40]	@ (8002ec0 <HAL_Delay+0x44>)
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ea2:	bf00      	nop
 8002ea4:	f7ff ffde 	bl	8002e64 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d8f7      	bhi.n	8002ea4 <HAL_Delay+0x28>
  {
  }
}
 8002eb4:	bf00      	nop
 8002eb6:	bf00      	nop
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	2000000c 	.word	0x2000000c

08002ec4 <__NVIC_SetPriorityGrouping>:
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f003 0307 	and.w	r3, r3, #7
 8002ed2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8002f08 <__NVIC_SetPriorityGrouping+0x44>)
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002eda:	68ba      	ldr	r2, [r7, #8]
 8002edc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002eec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ef0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ef4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ef6:	4a04      	ldr	r2, [pc, #16]	@ (8002f08 <__NVIC_SetPriorityGrouping+0x44>)
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	60d3      	str	r3, [r2, #12]
}
 8002efc:	bf00      	nop
 8002efe:	3714      	adds	r7, #20
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr
 8002f08:	e000ed00 	.word	0xe000ed00

08002f0c <__NVIC_GetPriorityGrouping>:
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f10:	4b04      	ldr	r3, [pc, #16]	@ (8002f24 <__NVIC_GetPriorityGrouping+0x18>)
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	0a1b      	lsrs	r3, r3, #8
 8002f16:	f003 0307 	and.w	r3, r3, #7
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr
 8002f24:	e000ed00 	.word	0xe000ed00

08002f28 <__NVIC_EnableIRQ>:
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	4603      	mov	r3, r0
 8002f30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	db0b      	blt.n	8002f52 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f3a:	79fb      	ldrb	r3, [r7, #7]
 8002f3c:	f003 021f 	and.w	r2, r3, #31
 8002f40:	4907      	ldr	r1, [pc, #28]	@ (8002f60 <__NVIC_EnableIRQ+0x38>)
 8002f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f46:	095b      	lsrs	r3, r3, #5
 8002f48:	2001      	movs	r0, #1
 8002f4a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002f52:	bf00      	nop
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	e000e100 	.word	0xe000e100

08002f64 <__NVIC_SetPriority>:
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	6039      	str	r1, [r7, #0]
 8002f6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	db0a      	blt.n	8002f8e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	b2da      	uxtb	r2, r3
 8002f7c:	490c      	ldr	r1, [pc, #48]	@ (8002fb0 <__NVIC_SetPriority+0x4c>)
 8002f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f82:	0112      	lsls	r2, r2, #4
 8002f84:	b2d2      	uxtb	r2, r2
 8002f86:	440b      	add	r3, r1
 8002f88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002f8c:	e00a      	b.n	8002fa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	b2da      	uxtb	r2, r3
 8002f92:	4908      	ldr	r1, [pc, #32]	@ (8002fb4 <__NVIC_SetPriority+0x50>)
 8002f94:	79fb      	ldrb	r3, [r7, #7]
 8002f96:	f003 030f 	and.w	r3, r3, #15
 8002f9a:	3b04      	subs	r3, #4
 8002f9c:	0112      	lsls	r2, r2, #4
 8002f9e:	b2d2      	uxtb	r2, r2
 8002fa0:	440b      	add	r3, r1
 8002fa2:	761a      	strb	r2, [r3, #24]
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr
 8002fb0:	e000e100 	.word	0xe000e100
 8002fb4:	e000ed00 	.word	0xe000ed00

08002fb8 <NVIC_EncodePriority>:
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b089      	sub	sp, #36	@ 0x24
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f003 0307 	and.w	r3, r3, #7
 8002fca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	f1c3 0307 	rsb	r3, r3, #7
 8002fd2:	2b04      	cmp	r3, #4
 8002fd4:	bf28      	it	cs
 8002fd6:	2304      	movcs	r3, #4
 8002fd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	3304      	adds	r3, #4
 8002fde:	2b06      	cmp	r3, #6
 8002fe0:	d902      	bls.n	8002fe8 <NVIC_EncodePriority+0x30>
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	3b03      	subs	r3, #3
 8002fe6:	e000      	b.n	8002fea <NVIC_EncodePriority+0x32>
 8002fe8:	2300      	movs	r3, #0
 8002fea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff6:	43da      	mvns	r2, r3
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	401a      	ands	r2, r3
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003000:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	fa01 f303 	lsl.w	r3, r1, r3
 800300a:	43d9      	mvns	r1, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003010:	4313      	orrs	r3, r2
}
 8003012:	4618      	mov	r0, r3
 8003014:	3724      	adds	r7, #36	@ 0x24
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
	...

08003020 <SysTick_Config>:
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	3b01      	subs	r3, #1
 800302c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003030:	d301      	bcc.n	8003036 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003032:	2301      	movs	r3, #1
 8003034:	e00f      	b.n	8003056 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003036:	4a0a      	ldr	r2, [pc, #40]	@ (8003060 <SysTick_Config+0x40>)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	3b01      	subs	r3, #1
 800303c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800303e:	210f      	movs	r1, #15
 8003040:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003044:	f7ff ff8e 	bl	8002f64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003048:	4b05      	ldr	r3, [pc, #20]	@ (8003060 <SysTick_Config+0x40>)
 800304a:	2200      	movs	r2, #0
 800304c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800304e:	4b04      	ldr	r3, [pc, #16]	@ (8003060 <SysTick_Config+0x40>)
 8003050:	2207      	movs	r2, #7
 8003052:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	e000e010 	.word	0xe000e010

08003064 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f7ff ff29 	bl	8002ec4 <__NVIC_SetPriorityGrouping>
}
 8003072:	bf00      	nop
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b086      	sub	sp, #24
 800307e:	af00      	add	r7, sp, #0
 8003080:	4603      	mov	r3, r0
 8003082:	60b9      	str	r1, [r7, #8]
 8003084:	607a      	str	r2, [r7, #4]
 8003086:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003088:	2300      	movs	r3, #0
 800308a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800308c:	f7ff ff3e 	bl	8002f0c <__NVIC_GetPriorityGrouping>
 8003090:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	68b9      	ldr	r1, [r7, #8]
 8003096:	6978      	ldr	r0, [r7, #20]
 8003098:	f7ff ff8e 	bl	8002fb8 <NVIC_EncodePriority>
 800309c:	4602      	mov	r2, r0
 800309e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030a2:	4611      	mov	r1, r2
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7ff ff5d 	bl	8002f64 <__NVIC_SetPriority>
}
 80030aa:	bf00      	nop
 80030ac:	3718      	adds	r7, #24
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b082      	sub	sp, #8
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	4603      	mov	r3, r0
 80030ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7ff ff31 	bl	8002f28 <__NVIC_EnableIRQ>
}
 80030c6:	bf00      	nop
 80030c8:	3708      	adds	r7, #8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b082      	sub	sp, #8
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f7ff ffa2 	bl	8003020 <SysTick_Config>
 80030dc:	4603      	mov	r3, r0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3708      	adds	r7, #8
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
	...

080030e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b087      	sub	sp, #28
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030f2:	2300      	movs	r3, #0
 80030f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030f6:	e17f      	b.n	80033f8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	2101      	movs	r1, #1
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	fa01 f303 	lsl.w	r3, r1, r3
 8003104:	4013      	ands	r3, r2
 8003106:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2b00      	cmp	r3, #0
 800310c:	f000 8171 	beq.w	80033f2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f003 0303 	and.w	r3, r3, #3
 8003118:	2b01      	cmp	r3, #1
 800311a:	d005      	beq.n	8003128 <HAL_GPIO_Init+0x40>
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f003 0303 	and.w	r3, r3, #3
 8003124:	2b02      	cmp	r3, #2
 8003126:	d130      	bne.n	800318a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	2203      	movs	r2, #3
 8003134:	fa02 f303 	lsl.w	r3, r2, r3
 8003138:	43db      	mvns	r3, r3
 800313a:	693a      	ldr	r2, [r7, #16]
 800313c:	4013      	ands	r3, r2
 800313e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	68da      	ldr	r2, [r3, #12]
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	005b      	lsls	r3, r3, #1
 8003148:	fa02 f303 	lsl.w	r3, r2, r3
 800314c:	693a      	ldr	r2, [r7, #16]
 800314e:	4313      	orrs	r3, r2
 8003150:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	693a      	ldr	r2, [r7, #16]
 8003156:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800315e:	2201      	movs	r2, #1
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	fa02 f303 	lsl.w	r3, r2, r3
 8003166:	43db      	mvns	r3, r3
 8003168:	693a      	ldr	r2, [r7, #16]
 800316a:	4013      	ands	r3, r2
 800316c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	091b      	lsrs	r3, r3, #4
 8003174:	f003 0201 	and.w	r2, r3, #1
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	fa02 f303 	lsl.w	r3, r2, r3
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	4313      	orrs	r3, r2
 8003182:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f003 0303 	and.w	r3, r3, #3
 8003192:	2b03      	cmp	r3, #3
 8003194:	d118      	bne.n	80031c8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800319a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800319c:	2201      	movs	r2, #1
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	fa02 f303 	lsl.w	r3, r2, r3
 80031a4:	43db      	mvns	r3, r3
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	4013      	ands	r3, r2
 80031aa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	08db      	lsrs	r3, r3, #3
 80031b2:	f003 0201 	and.w	r2, r3, #1
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	fa02 f303 	lsl.w	r3, r2, r3
 80031bc:	693a      	ldr	r2, [r7, #16]
 80031be:	4313      	orrs	r3, r2
 80031c0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	693a      	ldr	r2, [r7, #16]
 80031c6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f003 0303 	and.w	r3, r3, #3
 80031d0:	2b03      	cmp	r3, #3
 80031d2:	d017      	beq.n	8003204 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	2203      	movs	r2, #3
 80031e0:	fa02 f303 	lsl.w	r3, r2, r3
 80031e4:	43db      	mvns	r3, r3
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	4013      	ands	r3, r2
 80031ea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	689a      	ldr	r2, [r3, #8]
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	005b      	lsls	r3, r3, #1
 80031f4:	fa02 f303 	lsl.w	r3, r2, r3
 80031f8:	693a      	ldr	r2, [r7, #16]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	693a      	ldr	r2, [r7, #16]
 8003202:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f003 0303 	and.w	r3, r3, #3
 800320c:	2b02      	cmp	r3, #2
 800320e:	d123      	bne.n	8003258 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	08da      	lsrs	r2, r3, #3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	3208      	adds	r2, #8
 8003218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800321c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	f003 0307 	and.w	r3, r3, #7
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	220f      	movs	r2, #15
 8003228:	fa02 f303 	lsl.w	r3, r2, r3
 800322c:	43db      	mvns	r3, r3
 800322e:	693a      	ldr	r2, [r7, #16]
 8003230:	4013      	ands	r3, r2
 8003232:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	691a      	ldr	r2, [r3, #16]
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	f003 0307 	and.w	r3, r3, #7
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	fa02 f303 	lsl.w	r3, r2, r3
 8003244:	693a      	ldr	r2, [r7, #16]
 8003246:	4313      	orrs	r3, r2
 8003248:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	08da      	lsrs	r2, r3, #3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	3208      	adds	r2, #8
 8003252:	6939      	ldr	r1, [r7, #16]
 8003254:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	005b      	lsls	r3, r3, #1
 8003262:	2203      	movs	r2, #3
 8003264:	fa02 f303 	lsl.w	r3, r2, r3
 8003268:	43db      	mvns	r3, r3
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	4013      	ands	r3, r2
 800326e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f003 0203 	and.w	r2, r3, #3
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	fa02 f303 	lsl.w	r3, r2, r3
 8003280:	693a      	ldr	r2, [r7, #16]
 8003282:	4313      	orrs	r3, r2
 8003284:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	693a      	ldr	r2, [r7, #16]
 800328a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003294:	2b00      	cmp	r3, #0
 8003296:	f000 80ac 	beq.w	80033f2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800329a:	4b5f      	ldr	r3, [pc, #380]	@ (8003418 <HAL_GPIO_Init+0x330>)
 800329c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800329e:	4a5e      	ldr	r2, [pc, #376]	@ (8003418 <HAL_GPIO_Init+0x330>)
 80032a0:	f043 0301 	orr.w	r3, r3, #1
 80032a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80032a6:	4b5c      	ldr	r3, [pc, #368]	@ (8003418 <HAL_GPIO_Init+0x330>)
 80032a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	60bb      	str	r3, [r7, #8]
 80032b0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80032b2:	4a5a      	ldr	r2, [pc, #360]	@ (800341c <HAL_GPIO_Init+0x334>)
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	089b      	lsrs	r3, r3, #2
 80032b8:	3302      	adds	r3, #2
 80032ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032be:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	f003 0303 	and.w	r3, r3, #3
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	220f      	movs	r2, #15
 80032ca:	fa02 f303 	lsl.w	r3, r2, r3
 80032ce:	43db      	mvns	r3, r3
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	4013      	ands	r3, r2
 80032d4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80032dc:	d025      	beq.n	800332a <HAL_GPIO_Init+0x242>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a4f      	ldr	r2, [pc, #316]	@ (8003420 <HAL_GPIO_Init+0x338>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d01f      	beq.n	8003326 <HAL_GPIO_Init+0x23e>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a4e      	ldr	r2, [pc, #312]	@ (8003424 <HAL_GPIO_Init+0x33c>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d019      	beq.n	8003322 <HAL_GPIO_Init+0x23a>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a4d      	ldr	r2, [pc, #308]	@ (8003428 <HAL_GPIO_Init+0x340>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d013      	beq.n	800331e <HAL_GPIO_Init+0x236>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a4c      	ldr	r2, [pc, #304]	@ (800342c <HAL_GPIO_Init+0x344>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d00d      	beq.n	800331a <HAL_GPIO_Init+0x232>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a4b      	ldr	r2, [pc, #300]	@ (8003430 <HAL_GPIO_Init+0x348>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d007      	beq.n	8003316 <HAL_GPIO_Init+0x22e>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a4a      	ldr	r2, [pc, #296]	@ (8003434 <HAL_GPIO_Init+0x34c>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d101      	bne.n	8003312 <HAL_GPIO_Init+0x22a>
 800330e:	2306      	movs	r3, #6
 8003310:	e00c      	b.n	800332c <HAL_GPIO_Init+0x244>
 8003312:	2307      	movs	r3, #7
 8003314:	e00a      	b.n	800332c <HAL_GPIO_Init+0x244>
 8003316:	2305      	movs	r3, #5
 8003318:	e008      	b.n	800332c <HAL_GPIO_Init+0x244>
 800331a:	2304      	movs	r3, #4
 800331c:	e006      	b.n	800332c <HAL_GPIO_Init+0x244>
 800331e:	2303      	movs	r3, #3
 8003320:	e004      	b.n	800332c <HAL_GPIO_Init+0x244>
 8003322:	2302      	movs	r3, #2
 8003324:	e002      	b.n	800332c <HAL_GPIO_Init+0x244>
 8003326:	2301      	movs	r3, #1
 8003328:	e000      	b.n	800332c <HAL_GPIO_Init+0x244>
 800332a:	2300      	movs	r3, #0
 800332c:	697a      	ldr	r2, [r7, #20]
 800332e:	f002 0203 	and.w	r2, r2, #3
 8003332:	0092      	lsls	r2, r2, #2
 8003334:	4093      	lsls	r3, r2
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	4313      	orrs	r3, r2
 800333a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800333c:	4937      	ldr	r1, [pc, #220]	@ (800341c <HAL_GPIO_Init+0x334>)
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	089b      	lsrs	r3, r3, #2
 8003342:	3302      	adds	r3, #2
 8003344:	693a      	ldr	r2, [r7, #16]
 8003346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800334a:	4b3b      	ldr	r3, [pc, #236]	@ (8003438 <HAL_GPIO_Init+0x350>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	43db      	mvns	r3, r3
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	4013      	ands	r3, r2
 8003358:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d003      	beq.n	800336e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	4313      	orrs	r3, r2
 800336c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800336e:	4a32      	ldr	r2, [pc, #200]	@ (8003438 <HAL_GPIO_Init+0x350>)
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003374:	4b30      	ldr	r3, [pc, #192]	@ (8003438 <HAL_GPIO_Init+0x350>)
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	43db      	mvns	r3, r3
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	4013      	ands	r3, r2
 8003382:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d003      	beq.n	8003398 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003390:	693a      	ldr	r2, [r7, #16]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	4313      	orrs	r3, r2
 8003396:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003398:	4a27      	ldr	r2, [pc, #156]	@ (8003438 <HAL_GPIO_Init+0x350>)
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800339e:	4b26      	ldr	r3, [pc, #152]	@ (8003438 <HAL_GPIO_Init+0x350>)
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	43db      	mvns	r3, r3
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	4013      	ands	r3, r2
 80033ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d003      	beq.n	80033c2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80033ba:	693a      	ldr	r2, [r7, #16]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	4313      	orrs	r3, r2
 80033c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80033c2:	4a1d      	ldr	r2, [pc, #116]	@ (8003438 <HAL_GPIO_Init+0x350>)
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80033c8:	4b1b      	ldr	r3, [pc, #108]	@ (8003438 <HAL_GPIO_Init+0x350>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	43db      	mvns	r3, r3
 80033d2:	693a      	ldr	r2, [r7, #16]
 80033d4:	4013      	ands	r3, r2
 80033d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d003      	beq.n	80033ec <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80033e4:	693a      	ldr	r2, [r7, #16]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80033ec:	4a12      	ldr	r2, [pc, #72]	@ (8003438 <HAL_GPIO_Init+0x350>)
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	3301      	adds	r3, #1
 80033f6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003402:	2b00      	cmp	r3, #0
 8003404:	f47f ae78 	bne.w	80030f8 <HAL_GPIO_Init+0x10>
  }
}
 8003408:	bf00      	nop
 800340a:	bf00      	nop
 800340c:	371c      	adds	r7, #28
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	40021000 	.word	0x40021000
 800341c:	40010000 	.word	0x40010000
 8003420:	48000400 	.word	0x48000400
 8003424:	48000800 	.word	0x48000800
 8003428:	48000c00 	.word	0x48000c00
 800342c:	48001000 	.word	0x48001000
 8003430:	48001400 	.word	0x48001400
 8003434:	48001800 	.word	0x48001800
 8003438:	40010400 	.word	0x40010400

0800343c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	460b      	mov	r3, r1
 8003446:	807b      	strh	r3, [r7, #2]
 8003448:	4613      	mov	r3, r2
 800344a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800344c:	787b      	ldrb	r3, [r7, #1]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d003      	beq.n	800345a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003452:	887a      	ldrh	r2, [r7, #2]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003458:	e002      	b.n	8003460 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800345a:	887a      	ldrh	r2, [r7, #2]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d101      	bne.n	800347e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e08d      	b.n	800359a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d106      	bne.n	8003498 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f7ff f93c 	bl	8002710 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2224      	movs	r2, #36	@ 0x24
 800349c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f022 0201 	bic.w	r2, r2, #1
 80034ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685a      	ldr	r2, [r3, #4]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80034bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	689a      	ldr	r2, [r3, #8]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80034cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d107      	bne.n	80034e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	689a      	ldr	r2, [r3, #8]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80034e2:	609a      	str	r2, [r3, #8]
 80034e4:	e006      	b.n	80034f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	689a      	ldr	r2, [r3, #8]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80034f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d108      	bne.n	800350e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	685a      	ldr	r2, [r3, #4]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800350a:	605a      	str	r2, [r3, #4]
 800350c:	e007      	b.n	800351e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	685a      	ldr	r2, [r3, #4]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800351c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	6812      	ldr	r2, [r2, #0]
 8003528:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800352c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003530:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68da      	ldr	r2, [r3, #12]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003540:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	691a      	ldr	r2, [r3, #16]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	695b      	ldr	r3, [r3, #20]
 800354a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	699b      	ldr	r3, [r3, #24]
 8003552:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	430a      	orrs	r2, r1
 800355a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	69d9      	ldr	r1, [r3, #28]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a1a      	ldr	r2, [r3, #32]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	430a      	orrs	r2, r1
 800356a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f042 0201 	orr.w	r2, r2, #1
 800357a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2220      	movs	r2, #32
 8003586:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
	...

080035a4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b088      	sub	sp, #32
 80035a8:	af02      	add	r7, sp, #8
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	4608      	mov	r0, r1
 80035ae:	4611      	mov	r1, r2
 80035b0:	461a      	mov	r2, r3
 80035b2:	4603      	mov	r3, r0
 80035b4:	817b      	strh	r3, [r7, #10]
 80035b6:	460b      	mov	r3, r1
 80035b8:	813b      	strh	r3, [r7, #8]
 80035ba:	4613      	mov	r3, r2
 80035bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	2b20      	cmp	r3, #32
 80035c8:	f040 80f9 	bne.w	80037be <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80035cc:	6a3b      	ldr	r3, [r7, #32]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d002      	beq.n	80035d8 <HAL_I2C_Mem_Write+0x34>
 80035d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d105      	bne.n	80035e4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035de:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e0ed      	b.n	80037c0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d101      	bne.n	80035f2 <HAL_I2C_Mem_Write+0x4e>
 80035ee:	2302      	movs	r3, #2
 80035f0:	e0e6      	b.n	80037c0 <HAL_I2C_Mem_Write+0x21c>
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2201      	movs	r2, #1
 80035f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80035fa:	f7ff fc33 	bl	8002e64 <HAL_GetTick>
 80035fe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	9300      	str	r3, [sp, #0]
 8003604:	2319      	movs	r3, #25
 8003606:	2201      	movs	r2, #1
 8003608:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800360c:	68f8      	ldr	r0, [r7, #12]
 800360e:	f000 fac3 	bl	8003b98 <I2C_WaitOnFlagUntilTimeout>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d001      	beq.n	800361c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e0d1      	b.n	80037c0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2221      	movs	r2, #33	@ 0x21
 8003620:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2240      	movs	r2, #64	@ 0x40
 8003628:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6a3a      	ldr	r2, [r7, #32]
 8003636:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800363c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2200      	movs	r2, #0
 8003642:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003644:	88f8      	ldrh	r0, [r7, #6]
 8003646:	893a      	ldrh	r2, [r7, #8]
 8003648:	8979      	ldrh	r1, [r7, #10]
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	9301      	str	r3, [sp, #4]
 800364e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003650:	9300      	str	r3, [sp, #0]
 8003652:	4603      	mov	r3, r0
 8003654:	68f8      	ldr	r0, [r7, #12]
 8003656:	f000 f9d3 	bl	8003a00 <I2C_RequestMemoryWrite>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d005      	beq.n	800366c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e0a9      	b.n	80037c0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003670:	b29b      	uxth	r3, r3
 8003672:	2bff      	cmp	r3, #255	@ 0xff
 8003674:	d90e      	bls.n	8003694 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	22ff      	movs	r2, #255	@ 0xff
 800367a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003680:	b2da      	uxtb	r2, r3
 8003682:	8979      	ldrh	r1, [r7, #10]
 8003684:	2300      	movs	r3, #0
 8003686:	9300      	str	r3, [sp, #0]
 8003688:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800368c:	68f8      	ldr	r0, [r7, #12]
 800368e:	f000 fc47 	bl	8003f20 <I2C_TransferConfig>
 8003692:	e00f      	b.n	80036b4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003698:	b29a      	uxth	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036a2:	b2da      	uxtb	r2, r3
 80036a4:	8979      	ldrh	r1, [r7, #10]
 80036a6:	2300      	movs	r3, #0
 80036a8:	9300      	str	r3, [sp, #0]
 80036aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80036ae:	68f8      	ldr	r0, [r7, #12]
 80036b0:	f000 fc36 	bl	8003f20 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036b4:	697a      	ldr	r2, [r7, #20]
 80036b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036b8:	68f8      	ldr	r0, [r7, #12]
 80036ba:	f000 fac6 	bl	8003c4a <I2C_WaitOnTXISFlagUntilTimeout>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d001      	beq.n	80036c8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e07b      	b.n	80037c0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036cc:	781a      	ldrb	r2, [r3, #0]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d8:	1c5a      	adds	r2, r3, #1
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	3b01      	subs	r3, #1
 80036e6:	b29a      	uxth	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036f0:	3b01      	subs	r3, #1
 80036f2:	b29a      	uxth	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d034      	beq.n	800376c <HAL_I2C_Mem_Write+0x1c8>
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003706:	2b00      	cmp	r3, #0
 8003708:	d130      	bne.n	800376c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	9300      	str	r3, [sp, #0]
 800370e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003710:	2200      	movs	r2, #0
 8003712:	2180      	movs	r1, #128	@ 0x80
 8003714:	68f8      	ldr	r0, [r7, #12]
 8003716:	f000 fa3f 	bl	8003b98 <I2C_WaitOnFlagUntilTimeout>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d001      	beq.n	8003724 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e04d      	b.n	80037c0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003728:	b29b      	uxth	r3, r3
 800372a:	2bff      	cmp	r3, #255	@ 0xff
 800372c:	d90e      	bls.n	800374c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	22ff      	movs	r2, #255	@ 0xff
 8003732:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003738:	b2da      	uxtb	r2, r3
 800373a:	8979      	ldrh	r1, [r7, #10]
 800373c:	2300      	movs	r3, #0
 800373e:	9300      	str	r3, [sp, #0]
 8003740:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003744:	68f8      	ldr	r0, [r7, #12]
 8003746:	f000 fbeb 	bl	8003f20 <I2C_TransferConfig>
 800374a:	e00f      	b.n	800376c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003750:	b29a      	uxth	r2, r3
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800375a:	b2da      	uxtb	r2, r3
 800375c:	8979      	ldrh	r1, [r7, #10]
 800375e:	2300      	movs	r3, #0
 8003760:	9300      	str	r3, [sp, #0]
 8003762:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	f000 fbda 	bl	8003f20 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003770:	b29b      	uxth	r3, r3
 8003772:	2b00      	cmp	r3, #0
 8003774:	d19e      	bne.n	80036b4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003776:	697a      	ldr	r2, [r7, #20]
 8003778:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800377a:	68f8      	ldr	r0, [r7, #12]
 800377c:	f000 faac 	bl	8003cd8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d001      	beq.n	800378a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e01a      	b.n	80037c0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2220      	movs	r2, #32
 8003790:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	6859      	ldr	r1, [r3, #4]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	4b0a      	ldr	r3, [pc, #40]	@ (80037c8 <HAL_I2C_Mem_Write+0x224>)
 800379e:	400b      	ands	r3, r1
 80037a0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2220      	movs	r2, #32
 80037a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80037ba:	2300      	movs	r3, #0
 80037bc:	e000      	b.n	80037c0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80037be:	2302      	movs	r3, #2
  }
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3718      	adds	r7, #24
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	fe00e800 	.word	0xfe00e800

080037cc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b088      	sub	sp, #32
 80037d0:	af02      	add	r7, sp, #8
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	4608      	mov	r0, r1
 80037d6:	4611      	mov	r1, r2
 80037d8:	461a      	mov	r2, r3
 80037da:	4603      	mov	r3, r0
 80037dc:	817b      	strh	r3, [r7, #10]
 80037de:	460b      	mov	r3, r1
 80037e0:	813b      	strh	r3, [r7, #8]
 80037e2:	4613      	mov	r3, r2
 80037e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	2b20      	cmp	r3, #32
 80037f0:	f040 80fd 	bne.w	80039ee <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80037f4:	6a3b      	ldr	r3, [r7, #32]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d002      	beq.n	8003800 <HAL_I2C_Mem_Read+0x34>
 80037fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d105      	bne.n	800380c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003806:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e0f1      	b.n	80039f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003812:	2b01      	cmp	r3, #1
 8003814:	d101      	bne.n	800381a <HAL_I2C_Mem_Read+0x4e>
 8003816:	2302      	movs	r3, #2
 8003818:	e0ea      	b.n	80039f0 <HAL_I2C_Mem_Read+0x224>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2201      	movs	r2, #1
 800381e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003822:	f7ff fb1f 	bl	8002e64 <HAL_GetTick>
 8003826:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	9300      	str	r3, [sp, #0]
 800382c:	2319      	movs	r3, #25
 800382e:	2201      	movs	r2, #1
 8003830:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003834:	68f8      	ldr	r0, [r7, #12]
 8003836:	f000 f9af 	bl	8003b98 <I2C_WaitOnFlagUntilTimeout>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d001      	beq.n	8003844 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e0d5      	b.n	80039f0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2222      	movs	r2, #34	@ 0x22
 8003848:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2240      	movs	r2, #64	@ 0x40
 8003850:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2200      	movs	r2, #0
 8003858:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6a3a      	ldr	r2, [r7, #32]
 800385e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003864:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2200      	movs	r2, #0
 800386a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800386c:	88f8      	ldrh	r0, [r7, #6]
 800386e:	893a      	ldrh	r2, [r7, #8]
 8003870:	8979      	ldrh	r1, [r7, #10]
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	9301      	str	r3, [sp, #4]
 8003876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003878:	9300      	str	r3, [sp, #0]
 800387a:	4603      	mov	r3, r0
 800387c:	68f8      	ldr	r0, [r7, #12]
 800387e:	f000 f913 	bl	8003aa8 <I2C_RequestMemoryRead>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d005      	beq.n	8003894 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e0ad      	b.n	80039f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003898:	b29b      	uxth	r3, r3
 800389a:	2bff      	cmp	r3, #255	@ 0xff
 800389c:	d90e      	bls.n	80038bc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2201      	movs	r2, #1
 80038a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038a8:	b2da      	uxtb	r2, r3
 80038aa:	8979      	ldrh	r1, [r7, #10]
 80038ac:	4b52      	ldr	r3, [pc, #328]	@ (80039f8 <HAL_I2C_Mem_Read+0x22c>)
 80038ae:	9300      	str	r3, [sp, #0]
 80038b0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80038b4:	68f8      	ldr	r0, [r7, #12]
 80038b6:	f000 fb33 	bl	8003f20 <I2C_TransferConfig>
 80038ba:	e00f      	b.n	80038dc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038c0:	b29a      	uxth	r2, r3
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038ca:	b2da      	uxtb	r2, r3
 80038cc:	8979      	ldrh	r1, [r7, #10]
 80038ce:	4b4a      	ldr	r3, [pc, #296]	@ (80039f8 <HAL_I2C_Mem_Read+0x22c>)
 80038d0:	9300      	str	r3, [sp, #0]
 80038d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f000 fb22 	bl	8003f20 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	9300      	str	r3, [sp, #0]
 80038e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038e2:	2200      	movs	r2, #0
 80038e4:	2104      	movs	r1, #4
 80038e6:	68f8      	ldr	r0, [r7, #12]
 80038e8:	f000 f956 	bl	8003b98 <I2C_WaitOnFlagUntilTimeout>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e07c      	b.n	80039f0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003900:	b2d2      	uxtb	r2, r2
 8003902:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003908:	1c5a      	adds	r2, r3, #1
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003912:	3b01      	subs	r3, #1
 8003914:	b29a      	uxth	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800391e:	b29b      	uxth	r3, r3
 8003920:	3b01      	subs	r3, #1
 8003922:	b29a      	uxth	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800392c:	b29b      	uxth	r3, r3
 800392e:	2b00      	cmp	r3, #0
 8003930:	d034      	beq.n	800399c <HAL_I2C_Mem_Read+0x1d0>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003936:	2b00      	cmp	r3, #0
 8003938:	d130      	bne.n	800399c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	9300      	str	r3, [sp, #0]
 800393e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003940:	2200      	movs	r2, #0
 8003942:	2180      	movs	r1, #128	@ 0x80
 8003944:	68f8      	ldr	r0, [r7, #12]
 8003946:	f000 f927 	bl	8003b98 <I2C_WaitOnFlagUntilTimeout>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d001      	beq.n	8003954 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e04d      	b.n	80039f0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003958:	b29b      	uxth	r3, r3
 800395a:	2bff      	cmp	r3, #255	@ 0xff
 800395c:	d90e      	bls.n	800397c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2201      	movs	r2, #1
 8003962:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003968:	b2da      	uxtb	r2, r3
 800396a:	8979      	ldrh	r1, [r7, #10]
 800396c:	2300      	movs	r3, #0
 800396e:	9300      	str	r3, [sp, #0]
 8003970:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003974:	68f8      	ldr	r0, [r7, #12]
 8003976:	f000 fad3 	bl	8003f20 <I2C_TransferConfig>
 800397a:	e00f      	b.n	800399c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003980:	b29a      	uxth	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800398a:	b2da      	uxtb	r2, r3
 800398c:	8979      	ldrh	r1, [r7, #10]
 800398e:	2300      	movs	r3, #0
 8003990:	9300      	str	r3, [sp, #0]
 8003992:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003996:	68f8      	ldr	r0, [r7, #12]
 8003998:	f000 fac2 	bl	8003f20 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d19a      	bne.n	80038dc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039a6:	697a      	ldr	r2, [r7, #20]
 80039a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80039aa:	68f8      	ldr	r0, [r7, #12]
 80039ac:	f000 f994 	bl	8003cd8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d001      	beq.n	80039ba <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e01a      	b.n	80039f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2220      	movs	r2, #32
 80039c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	6859      	ldr	r1, [r3, #4]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	4b0b      	ldr	r3, [pc, #44]	@ (80039fc <HAL_I2C_Mem_Read+0x230>)
 80039ce:	400b      	ands	r3, r1
 80039d0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2220      	movs	r2, #32
 80039d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80039ea:	2300      	movs	r3, #0
 80039ec:	e000      	b.n	80039f0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80039ee:	2302      	movs	r3, #2
  }
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3718      	adds	r7, #24
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	80002400 	.word	0x80002400
 80039fc:	fe00e800 	.word	0xfe00e800

08003a00 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b086      	sub	sp, #24
 8003a04:	af02      	add	r7, sp, #8
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	4608      	mov	r0, r1
 8003a0a:	4611      	mov	r1, r2
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	4603      	mov	r3, r0
 8003a10:	817b      	strh	r3, [r7, #10]
 8003a12:	460b      	mov	r3, r1
 8003a14:	813b      	strh	r3, [r7, #8]
 8003a16:	4613      	mov	r3, r2
 8003a18:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003a1a:	88fb      	ldrh	r3, [r7, #6]
 8003a1c:	b2da      	uxtb	r2, r3
 8003a1e:	8979      	ldrh	r1, [r7, #10]
 8003a20:	4b20      	ldr	r3, [pc, #128]	@ (8003aa4 <I2C_RequestMemoryWrite+0xa4>)
 8003a22:	9300      	str	r3, [sp, #0]
 8003a24:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003a28:	68f8      	ldr	r0, [r7, #12]
 8003a2a:	f000 fa79 	bl	8003f20 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a2e:	69fa      	ldr	r2, [r7, #28]
 8003a30:	69b9      	ldr	r1, [r7, #24]
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	f000 f909 	bl	8003c4a <I2C_WaitOnTXISFlagUntilTimeout>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d001      	beq.n	8003a42 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e02c      	b.n	8003a9c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a42:	88fb      	ldrh	r3, [r7, #6]
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d105      	bne.n	8003a54 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a48:	893b      	ldrh	r3, [r7, #8]
 8003a4a:	b2da      	uxtb	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	629a      	str	r2, [r3, #40]	@ 0x28
 8003a52:	e015      	b.n	8003a80 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003a54:	893b      	ldrh	r3, [r7, #8]
 8003a56:	0a1b      	lsrs	r3, r3, #8
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	b2da      	uxtb	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a62:	69fa      	ldr	r2, [r7, #28]
 8003a64:	69b9      	ldr	r1, [r7, #24]
 8003a66:	68f8      	ldr	r0, [r7, #12]
 8003a68:	f000 f8ef 	bl	8003c4a <I2C_WaitOnTXISFlagUntilTimeout>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d001      	beq.n	8003a76 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e012      	b.n	8003a9c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a76:	893b      	ldrh	r3, [r7, #8]
 8003a78:	b2da      	uxtb	r2, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	9300      	str	r3, [sp, #0]
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	2200      	movs	r2, #0
 8003a88:	2180      	movs	r1, #128	@ 0x80
 8003a8a:	68f8      	ldr	r0, [r7, #12]
 8003a8c:	f000 f884 	bl	8003b98 <I2C_WaitOnFlagUntilTimeout>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d001      	beq.n	8003a9a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e000      	b.n	8003a9c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003a9a:	2300      	movs	r3, #0
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3710      	adds	r7, #16
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	80002000 	.word	0x80002000

08003aa8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b086      	sub	sp, #24
 8003aac:	af02      	add	r7, sp, #8
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	4608      	mov	r0, r1
 8003ab2:	4611      	mov	r1, r2
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	817b      	strh	r3, [r7, #10]
 8003aba:	460b      	mov	r3, r1
 8003abc:	813b      	strh	r3, [r7, #8]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003ac2:	88fb      	ldrh	r3, [r7, #6]
 8003ac4:	b2da      	uxtb	r2, r3
 8003ac6:	8979      	ldrh	r1, [r7, #10]
 8003ac8:	4b20      	ldr	r3, [pc, #128]	@ (8003b4c <I2C_RequestMemoryRead+0xa4>)
 8003aca:	9300      	str	r3, [sp, #0]
 8003acc:	2300      	movs	r3, #0
 8003ace:	68f8      	ldr	r0, [r7, #12]
 8003ad0:	f000 fa26 	bl	8003f20 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ad4:	69fa      	ldr	r2, [r7, #28]
 8003ad6:	69b9      	ldr	r1, [r7, #24]
 8003ad8:	68f8      	ldr	r0, [r7, #12]
 8003ada:	f000 f8b6 	bl	8003c4a <I2C_WaitOnTXISFlagUntilTimeout>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d001      	beq.n	8003ae8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e02c      	b.n	8003b42 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ae8:	88fb      	ldrh	r3, [r7, #6]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d105      	bne.n	8003afa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003aee:	893b      	ldrh	r3, [r7, #8]
 8003af0:	b2da      	uxtb	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	629a      	str	r2, [r3, #40]	@ 0x28
 8003af8:	e015      	b.n	8003b26 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003afa:	893b      	ldrh	r3, [r7, #8]
 8003afc:	0a1b      	lsrs	r3, r3, #8
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	b2da      	uxtb	r2, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b08:	69fa      	ldr	r2, [r7, #28]
 8003b0a:	69b9      	ldr	r1, [r7, #24]
 8003b0c:	68f8      	ldr	r0, [r7, #12]
 8003b0e:	f000 f89c 	bl	8003c4a <I2C_WaitOnTXISFlagUntilTimeout>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d001      	beq.n	8003b1c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e012      	b.n	8003b42 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b1c:	893b      	ldrh	r3, [r7, #8]
 8003b1e:	b2da      	uxtb	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	9300      	str	r3, [sp, #0]
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	2140      	movs	r1, #64	@ 0x40
 8003b30:	68f8      	ldr	r0, [r7, #12]
 8003b32:	f000 f831 	bl	8003b98 <I2C_WaitOnFlagUntilTimeout>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d001      	beq.n	8003b40 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e000      	b.n	8003b42 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3710      	adds	r7, #16
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	80002000 	.word	0x80002000

08003b50 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	699b      	ldr	r3, [r3, #24]
 8003b5e:	f003 0302 	and.w	r3, r3, #2
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d103      	bne.n	8003b6e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	699b      	ldr	r3, [r3, #24]
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d007      	beq.n	8003b8c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	699a      	ldr	r2, [r3, #24]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f042 0201 	orr.w	r2, r2, #1
 8003b8a:	619a      	str	r2, [r3, #24]
  }
}
 8003b8c:	bf00      	nop
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	603b      	str	r3, [r7, #0]
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ba8:	e03b      	b.n	8003c22 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003baa:	69ba      	ldr	r2, [r7, #24]
 8003bac:	6839      	ldr	r1, [r7, #0]
 8003bae:	68f8      	ldr	r0, [r7, #12]
 8003bb0:	f000 f8d6 	bl	8003d60 <I2C_IsErrorOccurred>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d001      	beq.n	8003bbe <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e041      	b.n	8003c42 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003bc4:	d02d      	beq.n	8003c22 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bc6:	f7ff f94d 	bl	8002e64 <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	683a      	ldr	r2, [r7, #0]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d302      	bcc.n	8003bdc <I2C_WaitOnFlagUntilTimeout+0x44>
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d122      	bne.n	8003c22 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	699a      	ldr	r2, [r3, #24]
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	4013      	ands	r3, r2
 8003be6:	68ba      	ldr	r2, [r7, #8]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	bf0c      	ite	eq
 8003bec:	2301      	moveq	r3, #1
 8003bee:	2300      	movne	r3, #0
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	79fb      	ldrb	r3, [r7, #7]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d113      	bne.n	8003c22 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bfe:	f043 0220 	orr.w	r2, r3, #32
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2220      	movs	r2, #32
 8003c0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e00f      	b.n	8003c42 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	699a      	ldr	r2, [r3, #24]
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	68ba      	ldr	r2, [r7, #8]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	bf0c      	ite	eq
 8003c32:	2301      	moveq	r3, #1
 8003c34:	2300      	movne	r3, #0
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	461a      	mov	r2, r3
 8003c3a:	79fb      	ldrb	r3, [r7, #7]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d0b4      	beq.n	8003baa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3710      	adds	r7, #16
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b084      	sub	sp, #16
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	60f8      	str	r0, [r7, #12]
 8003c52:	60b9      	str	r1, [r7, #8]
 8003c54:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003c56:	e033      	b.n	8003cc0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	68b9      	ldr	r1, [r7, #8]
 8003c5c:	68f8      	ldr	r0, [r7, #12]
 8003c5e:	f000 f87f 	bl	8003d60 <I2C_IsErrorOccurred>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d001      	beq.n	8003c6c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e031      	b.n	8003cd0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c72:	d025      	beq.n	8003cc0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c74:	f7ff f8f6 	bl	8002e64 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	68ba      	ldr	r2, [r7, #8]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d302      	bcc.n	8003c8a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d11a      	bne.n	8003cc0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	f003 0302 	and.w	r3, r3, #2
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d013      	beq.n	8003cc0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c9c:	f043 0220 	orr.w	r2, r3, #32
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2220      	movs	r2, #32
 8003ca8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e007      	b.n	8003cd0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d1c4      	bne.n	8003c58 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3710      	adds	r7, #16
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ce4:	e02f      	b.n	8003d46 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	68b9      	ldr	r1, [r7, #8]
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	f000 f838 	bl	8003d60 <I2C_IsErrorOccurred>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d001      	beq.n	8003cfa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e02d      	b.n	8003d56 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cfa:	f7ff f8b3 	bl	8002e64 <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	68ba      	ldr	r2, [r7, #8]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d302      	bcc.n	8003d10 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d11a      	bne.n	8003d46 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	f003 0320 	and.w	r3, r3, #32
 8003d1a:	2b20      	cmp	r3, #32
 8003d1c:	d013      	beq.n	8003d46 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d22:	f043 0220 	orr.w	r2, r3, #32
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2220      	movs	r2, #32
 8003d2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e007      	b.n	8003d56 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	f003 0320 	and.w	r3, r3, #32
 8003d50:	2b20      	cmp	r3, #32
 8003d52:	d1c8      	bne.n	8003ce6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3710      	adds	r7, #16
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
	...

08003d60 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b08a      	sub	sp, #40	@ 0x28
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	f003 0310 	and.w	r3, r3, #16
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d068      	beq.n	8003e5e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2210      	movs	r2, #16
 8003d92:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003d94:	e049      	b.n	8003e2a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d9c:	d045      	beq.n	8003e2a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003d9e:	f7ff f861 	bl	8002e64 <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	68ba      	ldr	r2, [r7, #8]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d302      	bcc.n	8003db4 <I2C_IsErrorOccurred+0x54>
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d13a      	bne.n	8003e2a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003dbe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003dc6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003dd2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003dd6:	d121      	bne.n	8003e1c <I2C_IsErrorOccurred+0xbc>
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003dde:	d01d      	beq.n	8003e1c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003de0:	7cfb      	ldrb	r3, [r7, #19]
 8003de2:	2b20      	cmp	r3, #32
 8003de4:	d01a      	beq.n	8003e1c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	685a      	ldr	r2, [r3, #4]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003df4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003df6:	f7ff f835 	bl	8002e64 <HAL_GetTick>
 8003dfa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003dfc:	e00e      	b.n	8003e1c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003dfe:	f7ff f831 	bl	8002e64 <HAL_GetTick>
 8003e02:	4602      	mov	r2, r0
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	2b19      	cmp	r3, #25
 8003e0a:	d907      	bls.n	8003e1c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003e0c:	6a3b      	ldr	r3, [r7, #32]
 8003e0e:	f043 0320 	orr.w	r3, r3, #32
 8003e12:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003e1a:	e006      	b.n	8003e2a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	f003 0320 	and.w	r3, r3, #32
 8003e26:	2b20      	cmp	r3, #32
 8003e28:	d1e9      	bne.n	8003dfe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	699b      	ldr	r3, [r3, #24]
 8003e30:	f003 0320 	and.w	r3, r3, #32
 8003e34:	2b20      	cmp	r3, #32
 8003e36:	d003      	beq.n	8003e40 <I2C_IsErrorOccurred+0xe0>
 8003e38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d0aa      	beq.n	8003d96 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003e40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d103      	bne.n	8003e50 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2220      	movs	r2, #32
 8003e4e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003e50:	6a3b      	ldr	r3, [r7, #32]
 8003e52:	f043 0304 	orr.w	r3, r3, #4
 8003e56:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d00b      	beq.n	8003e88 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003e70:	6a3b      	ldr	r3, [r7, #32]
 8003e72:	f043 0301 	orr.w	r3, r3, #1
 8003e76:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003e80:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00b      	beq.n	8003eaa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003e92:	6a3b      	ldr	r3, [r7, #32]
 8003e94:	f043 0308 	orr.w	r3, r3, #8
 8003e98:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003ea2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d00b      	beq.n	8003ecc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003eb4:	6a3b      	ldr	r3, [r7, #32]
 8003eb6:	f043 0302 	orr.w	r3, r3, #2
 8003eba:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ec4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003ecc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d01c      	beq.n	8003f0e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003ed4:	68f8      	ldr	r0, [r7, #12]
 8003ed6:	f7ff fe3b 	bl	8003b50 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	6859      	ldr	r1, [r3, #4]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	4b0d      	ldr	r3, [pc, #52]	@ (8003f1c <I2C_IsErrorOccurred+0x1bc>)
 8003ee6:	400b      	ands	r3, r1
 8003ee8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003eee:	6a3b      	ldr	r3, [r7, #32]
 8003ef0:	431a      	orrs	r2, r3
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2220      	movs	r2, #32
 8003efa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003f0e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3728      	adds	r7, #40	@ 0x28
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	fe00e800 	.word	0xfe00e800

08003f20 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b087      	sub	sp, #28
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	607b      	str	r3, [r7, #4]
 8003f2a:	460b      	mov	r3, r1
 8003f2c:	817b      	strh	r3, [r7, #10]
 8003f2e:	4613      	mov	r3, r2
 8003f30:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f32:	897b      	ldrh	r3, [r7, #10]
 8003f34:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003f38:	7a7b      	ldrb	r3, [r7, #9]
 8003f3a:	041b      	lsls	r3, r3, #16
 8003f3c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f40:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f46:	6a3b      	ldr	r3, [r7, #32]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003f4e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	685a      	ldr	r2, [r3, #4]
 8003f56:	6a3b      	ldr	r3, [r7, #32]
 8003f58:	0d5b      	lsrs	r3, r3, #21
 8003f5a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003f5e:	4b08      	ldr	r3, [pc, #32]	@ (8003f80 <I2C_TransferConfig+0x60>)
 8003f60:	430b      	orrs	r3, r1
 8003f62:	43db      	mvns	r3, r3
 8003f64:	ea02 0103 	and.w	r1, r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	697a      	ldr	r2, [r7, #20]
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003f72:	bf00      	nop
 8003f74:	371c      	adds	r7, #28
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	03ff63ff 	.word	0x03ff63ff

08003f84 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b20      	cmp	r3, #32
 8003f98:	d138      	bne.n	800400c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d101      	bne.n	8003fa8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003fa4:	2302      	movs	r3, #2
 8003fa6:	e032      	b.n	800400e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2224      	movs	r2, #36	@ 0x24
 8003fb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f022 0201 	bic.w	r2, r2, #1
 8003fc6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003fd6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	6819      	ldr	r1, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	683a      	ldr	r2, [r7, #0]
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f042 0201 	orr.w	r2, r2, #1
 8003ff6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2220      	movs	r2, #32
 8003ffc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004008:	2300      	movs	r3, #0
 800400a:	e000      	b.n	800400e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800400c:	2302      	movs	r3, #2
  }
}
 800400e:	4618      	mov	r0, r3
 8004010:	370c      	adds	r7, #12
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr

0800401a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800401a:	b480      	push	{r7}
 800401c:	b085      	sub	sp, #20
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
 8004022:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800402a:	b2db      	uxtb	r3, r3
 800402c:	2b20      	cmp	r3, #32
 800402e:	d139      	bne.n	80040a4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004036:	2b01      	cmp	r3, #1
 8004038:	d101      	bne.n	800403e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800403a:	2302      	movs	r3, #2
 800403c:	e033      	b.n	80040a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2224      	movs	r2, #36	@ 0x24
 800404a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f022 0201 	bic.w	r2, r2, #1
 800405c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800406c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	021b      	lsls	r3, r3, #8
 8004072:	68fa      	ldr	r2, [r7, #12]
 8004074:	4313      	orrs	r3, r2
 8004076:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f042 0201 	orr.w	r2, r2, #1
 800408e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2220      	movs	r2, #32
 8004094:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80040a0:	2300      	movs	r3, #0
 80040a2:	e000      	b.n	80040a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80040a4:	2302      	movs	r3, #2
  }
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3714      	adds	r7, #20
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
	...

080040b4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80040b4:	b480      	push	{r7}
 80040b6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80040b8:	4b04      	ldr	r3, [pc, #16]	@ (80040cc <HAL_PWREx_GetVoltageRange+0x18>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	40007000 	.word	0x40007000

080040d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b085      	sub	sp, #20
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040de:	d130      	bne.n	8004142 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80040e0:	4b23      	ldr	r3, [pc, #140]	@ (8004170 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80040e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040ec:	d038      	beq.n	8004160 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80040ee:	4b20      	ldr	r3, [pc, #128]	@ (8004170 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80040f6:	4a1e      	ldr	r2, [pc, #120]	@ (8004170 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040f8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80040fc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80040fe:	4b1d      	ldr	r3, [pc, #116]	@ (8004174 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	2232      	movs	r2, #50	@ 0x32
 8004104:	fb02 f303 	mul.w	r3, r2, r3
 8004108:	4a1b      	ldr	r2, [pc, #108]	@ (8004178 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800410a:	fba2 2303 	umull	r2, r3, r2, r3
 800410e:	0c9b      	lsrs	r3, r3, #18
 8004110:	3301      	adds	r3, #1
 8004112:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004114:	e002      	b.n	800411c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	3b01      	subs	r3, #1
 800411a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800411c:	4b14      	ldr	r3, [pc, #80]	@ (8004170 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800411e:	695b      	ldr	r3, [r3, #20]
 8004120:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004124:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004128:	d102      	bne.n	8004130 <HAL_PWREx_ControlVoltageScaling+0x60>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d1f2      	bne.n	8004116 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004130:	4b0f      	ldr	r3, [pc, #60]	@ (8004170 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004132:	695b      	ldr	r3, [r3, #20]
 8004134:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004138:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800413c:	d110      	bne.n	8004160 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e00f      	b.n	8004162 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004142:	4b0b      	ldr	r3, [pc, #44]	@ (8004170 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800414a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800414e:	d007      	beq.n	8004160 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004150:	4b07      	ldr	r3, [pc, #28]	@ (8004170 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004158:	4a05      	ldr	r2, [pc, #20]	@ (8004170 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800415a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800415e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3714      	adds	r7, #20
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	40007000 	.word	0x40007000
 8004174:	20000004 	.word	0x20000004
 8004178:	431bde83 	.word	0x431bde83

0800417c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b088      	sub	sp, #32
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d101      	bne.n	800418e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e3ca      	b.n	8004924 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800418e:	4b97      	ldr	r3, [pc, #604]	@ (80043ec <HAL_RCC_OscConfig+0x270>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f003 030c 	and.w	r3, r3, #12
 8004196:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004198:	4b94      	ldr	r3, [pc, #592]	@ (80043ec <HAL_RCC_OscConfig+0x270>)
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	f003 0303 	and.w	r3, r3, #3
 80041a0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0310 	and.w	r3, r3, #16
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	f000 80e4 	beq.w	8004378 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d007      	beq.n	80041c6 <HAL_RCC_OscConfig+0x4a>
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	2b0c      	cmp	r3, #12
 80041ba:	f040 808b 	bne.w	80042d4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	f040 8087 	bne.w	80042d4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80041c6:	4b89      	ldr	r3, [pc, #548]	@ (80043ec <HAL_RCC_OscConfig+0x270>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0302 	and.w	r3, r3, #2
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d005      	beq.n	80041de <HAL_RCC_OscConfig+0x62>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	699b      	ldr	r3, [r3, #24]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d101      	bne.n	80041de <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e3a2      	b.n	8004924 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a1a      	ldr	r2, [r3, #32]
 80041e2:	4b82      	ldr	r3, [pc, #520]	@ (80043ec <HAL_RCC_OscConfig+0x270>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0308 	and.w	r3, r3, #8
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d004      	beq.n	80041f8 <HAL_RCC_OscConfig+0x7c>
 80041ee:	4b7f      	ldr	r3, [pc, #508]	@ (80043ec <HAL_RCC_OscConfig+0x270>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80041f6:	e005      	b.n	8004204 <HAL_RCC_OscConfig+0x88>
 80041f8:	4b7c      	ldr	r3, [pc, #496]	@ (80043ec <HAL_RCC_OscConfig+0x270>)
 80041fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041fe:	091b      	lsrs	r3, r3, #4
 8004200:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004204:	4293      	cmp	r3, r2
 8004206:	d223      	bcs.n	8004250 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a1b      	ldr	r3, [r3, #32]
 800420c:	4618      	mov	r0, r3
 800420e:	f000 fd55 	bl	8004cbc <RCC_SetFlashLatencyFromMSIRange>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d001      	beq.n	800421c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e383      	b.n	8004924 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800421c:	4b73      	ldr	r3, [pc, #460]	@ (80043ec <HAL_RCC_OscConfig+0x270>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a72      	ldr	r2, [pc, #456]	@ (80043ec <HAL_RCC_OscConfig+0x270>)
 8004222:	f043 0308 	orr.w	r3, r3, #8
 8004226:	6013      	str	r3, [r2, #0]
 8004228:	4b70      	ldr	r3, [pc, #448]	@ (80043ec <HAL_RCC_OscConfig+0x270>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a1b      	ldr	r3, [r3, #32]
 8004234:	496d      	ldr	r1, [pc, #436]	@ (80043ec <HAL_RCC_OscConfig+0x270>)
 8004236:	4313      	orrs	r3, r2
 8004238:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800423a:	4b6c      	ldr	r3, [pc, #432]	@ (80043ec <HAL_RCC_OscConfig+0x270>)
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	69db      	ldr	r3, [r3, #28]
 8004246:	021b      	lsls	r3, r3, #8
 8004248:	4968      	ldr	r1, [pc, #416]	@ (80043ec <HAL_RCC_OscConfig+0x270>)
 800424a:	4313      	orrs	r3, r2
 800424c:	604b      	str	r3, [r1, #4]
 800424e:	e025      	b.n	800429c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004250:	4b66      	ldr	r3, [pc, #408]	@ (80043ec <HAL_RCC_OscConfig+0x270>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a65      	ldr	r2, [pc, #404]	@ (80043ec <HAL_RCC_OscConfig+0x270>)
 8004256:	f043 0308 	orr.w	r3, r3, #8
 800425a:	6013      	str	r3, [r2, #0]
 800425c:	4b63      	ldr	r3, [pc, #396]	@ (80043ec <HAL_RCC_OscConfig+0x270>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a1b      	ldr	r3, [r3, #32]
 8004268:	4960      	ldr	r1, [pc, #384]	@ (80043ec <HAL_RCC_OscConfig+0x270>)
 800426a:	4313      	orrs	r3, r2
 800426c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800426e:	4b5f      	ldr	r3, [pc, #380]	@ (80043ec <HAL_RCC_OscConfig+0x270>)
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	69db      	ldr	r3, [r3, #28]
 800427a:	021b      	lsls	r3, r3, #8
 800427c:	495b      	ldr	r1, [pc, #364]	@ (80043ec <HAL_RCC_OscConfig+0x270>)
 800427e:	4313      	orrs	r3, r2
 8004280:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d109      	bne.n	800429c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a1b      	ldr	r3, [r3, #32]
 800428c:	4618      	mov	r0, r3
 800428e:	f000 fd15 	bl	8004cbc <RCC_SetFlashLatencyFromMSIRange>
 8004292:	4603      	mov	r3, r0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d001      	beq.n	800429c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e343      	b.n	8004924 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800429c:	f000 fc4a 	bl	8004b34 <HAL_RCC_GetSysClockFreq>
 80042a0:	4602      	mov	r2, r0
 80042a2:	4b52      	ldr	r3, [pc, #328]	@ (80043ec <HAL_RCC_OscConfig+0x270>)
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	091b      	lsrs	r3, r3, #4
 80042a8:	f003 030f 	and.w	r3, r3, #15
 80042ac:	4950      	ldr	r1, [pc, #320]	@ (80043f0 <HAL_RCC_OscConfig+0x274>)
 80042ae:	5ccb      	ldrb	r3, [r1, r3]
 80042b0:	f003 031f 	and.w	r3, r3, #31
 80042b4:	fa22 f303 	lsr.w	r3, r2, r3
 80042b8:	4a4e      	ldr	r2, [pc, #312]	@ (80043f4 <HAL_RCC_OscConfig+0x278>)
 80042ba:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80042bc:	4b4e      	ldr	r3, [pc, #312]	@ (80043f8 <HAL_RCC_OscConfig+0x27c>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7fe fd7f 	bl	8002dc4 <HAL_InitTick>
 80042c6:	4603      	mov	r3, r0
 80042c8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80042ca:	7bfb      	ldrb	r3, [r7, #15]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d052      	beq.n	8004376 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80042d0:	7bfb      	ldrb	r3, [r7, #15]
 80042d2:	e327      	b.n	8004924 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	699b      	ldr	r3, [r3, #24]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d032      	beq.n	8004342 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80042dc:	4b43      	ldr	r3, [pc, #268]	@ (80043ec <HAL_RCC_OscConfig+0x270>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a42      	ldr	r2, [pc, #264]	@ (80043ec <HAL_RCC_OscConfig+0x270>)
 80042e2:	f043 0301 	orr.w	r3, r3, #1
 80042e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80042e8:	f7fe fdbc 	bl	8002e64 <HAL_GetTick>
 80042ec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042ee:	e008      	b.n	8004302 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80042f0:	f7fe fdb8 	bl	8002e64 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d901      	bls.n	8004302 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e310      	b.n	8004924 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004302:	4b3a      	ldr	r3, [pc, #232]	@ (80043ec <HAL_RCC_OscConfig+0x270>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0302 	and.w	r3, r3, #2
 800430a:	2b00      	cmp	r3, #0
 800430c:	d0f0      	beq.n	80042f0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800430e:	4b37      	ldr	r3, [pc, #220]	@ (80043ec <HAL_RCC_OscConfig+0x270>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a36      	ldr	r2, [pc, #216]	@ (80043ec <HAL_RCC_OscConfig+0x270>)
 8004314:	f043 0308 	orr.w	r3, r3, #8
 8004318:	6013      	str	r3, [r2, #0]
 800431a:	4b34      	ldr	r3, [pc, #208]	@ (80043ec <HAL_RCC_OscConfig+0x270>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a1b      	ldr	r3, [r3, #32]
 8004326:	4931      	ldr	r1, [pc, #196]	@ (80043ec <HAL_RCC_OscConfig+0x270>)
 8004328:	4313      	orrs	r3, r2
 800432a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800432c:	4b2f      	ldr	r3, [pc, #188]	@ (80043ec <HAL_RCC_OscConfig+0x270>)
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	69db      	ldr	r3, [r3, #28]
 8004338:	021b      	lsls	r3, r3, #8
 800433a:	492c      	ldr	r1, [pc, #176]	@ (80043ec <HAL_RCC_OscConfig+0x270>)
 800433c:	4313      	orrs	r3, r2
 800433e:	604b      	str	r3, [r1, #4]
 8004340:	e01a      	b.n	8004378 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004342:	4b2a      	ldr	r3, [pc, #168]	@ (80043ec <HAL_RCC_OscConfig+0x270>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a29      	ldr	r2, [pc, #164]	@ (80043ec <HAL_RCC_OscConfig+0x270>)
 8004348:	f023 0301 	bic.w	r3, r3, #1
 800434c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800434e:	f7fe fd89 	bl	8002e64 <HAL_GetTick>
 8004352:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004354:	e008      	b.n	8004368 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004356:	f7fe fd85 	bl	8002e64 <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	2b02      	cmp	r3, #2
 8004362:	d901      	bls.n	8004368 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e2dd      	b.n	8004924 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004368:	4b20      	ldr	r3, [pc, #128]	@ (80043ec <HAL_RCC_OscConfig+0x270>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0302 	and.w	r3, r3, #2
 8004370:	2b00      	cmp	r3, #0
 8004372:	d1f0      	bne.n	8004356 <HAL_RCC_OscConfig+0x1da>
 8004374:	e000      	b.n	8004378 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004376:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0301 	and.w	r3, r3, #1
 8004380:	2b00      	cmp	r3, #0
 8004382:	d074      	beq.n	800446e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	2b08      	cmp	r3, #8
 8004388:	d005      	beq.n	8004396 <HAL_RCC_OscConfig+0x21a>
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	2b0c      	cmp	r3, #12
 800438e:	d10e      	bne.n	80043ae <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	2b03      	cmp	r3, #3
 8004394:	d10b      	bne.n	80043ae <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004396:	4b15      	ldr	r3, [pc, #84]	@ (80043ec <HAL_RCC_OscConfig+0x270>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d064      	beq.n	800446c <HAL_RCC_OscConfig+0x2f0>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d160      	bne.n	800446c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e2ba      	b.n	8004924 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043b6:	d106      	bne.n	80043c6 <HAL_RCC_OscConfig+0x24a>
 80043b8:	4b0c      	ldr	r3, [pc, #48]	@ (80043ec <HAL_RCC_OscConfig+0x270>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a0b      	ldr	r2, [pc, #44]	@ (80043ec <HAL_RCC_OscConfig+0x270>)
 80043be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043c2:	6013      	str	r3, [r2, #0]
 80043c4:	e026      	b.n	8004414 <HAL_RCC_OscConfig+0x298>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043ce:	d115      	bne.n	80043fc <HAL_RCC_OscConfig+0x280>
 80043d0:	4b06      	ldr	r3, [pc, #24]	@ (80043ec <HAL_RCC_OscConfig+0x270>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a05      	ldr	r2, [pc, #20]	@ (80043ec <HAL_RCC_OscConfig+0x270>)
 80043d6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043da:	6013      	str	r3, [r2, #0]
 80043dc:	4b03      	ldr	r3, [pc, #12]	@ (80043ec <HAL_RCC_OscConfig+0x270>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a02      	ldr	r2, [pc, #8]	@ (80043ec <HAL_RCC_OscConfig+0x270>)
 80043e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043e6:	6013      	str	r3, [r2, #0]
 80043e8:	e014      	b.n	8004414 <HAL_RCC_OscConfig+0x298>
 80043ea:	bf00      	nop
 80043ec:	40021000 	.word	0x40021000
 80043f0:	0800c8c0 	.word	0x0800c8c0
 80043f4:	20000004 	.word	0x20000004
 80043f8:	20000008 	.word	0x20000008
 80043fc:	4ba0      	ldr	r3, [pc, #640]	@ (8004680 <HAL_RCC_OscConfig+0x504>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a9f      	ldr	r2, [pc, #636]	@ (8004680 <HAL_RCC_OscConfig+0x504>)
 8004402:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004406:	6013      	str	r3, [r2, #0]
 8004408:	4b9d      	ldr	r3, [pc, #628]	@ (8004680 <HAL_RCC_OscConfig+0x504>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a9c      	ldr	r2, [pc, #624]	@ (8004680 <HAL_RCC_OscConfig+0x504>)
 800440e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004412:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d013      	beq.n	8004444 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800441c:	f7fe fd22 	bl	8002e64 <HAL_GetTick>
 8004420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004422:	e008      	b.n	8004436 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004424:	f7fe fd1e 	bl	8002e64 <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	2b64      	cmp	r3, #100	@ 0x64
 8004430:	d901      	bls.n	8004436 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e276      	b.n	8004924 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004436:	4b92      	ldr	r3, [pc, #584]	@ (8004680 <HAL_RCC_OscConfig+0x504>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d0f0      	beq.n	8004424 <HAL_RCC_OscConfig+0x2a8>
 8004442:	e014      	b.n	800446e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004444:	f7fe fd0e 	bl	8002e64 <HAL_GetTick>
 8004448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800444a:	e008      	b.n	800445e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800444c:	f7fe fd0a 	bl	8002e64 <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	2b64      	cmp	r3, #100	@ 0x64
 8004458:	d901      	bls.n	800445e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e262      	b.n	8004924 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800445e:	4b88      	ldr	r3, [pc, #544]	@ (8004680 <HAL_RCC_OscConfig+0x504>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d1f0      	bne.n	800444c <HAL_RCC_OscConfig+0x2d0>
 800446a:	e000      	b.n	800446e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800446c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0302 	and.w	r3, r3, #2
 8004476:	2b00      	cmp	r3, #0
 8004478:	d060      	beq.n	800453c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	2b04      	cmp	r3, #4
 800447e:	d005      	beq.n	800448c <HAL_RCC_OscConfig+0x310>
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	2b0c      	cmp	r3, #12
 8004484:	d119      	bne.n	80044ba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	2b02      	cmp	r3, #2
 800448a:	d116      	bne.n	80044ba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800448c:	4b7c      	ldr	r3, [pc, #496]	@ (8004680 <HAL_RCC_OscConfig+0x504>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004494:	2b00      	cmp	r3, #0
 8004496:	d005      	beq.n	80044a4 <HAL_RCC_OscConfig+0x328>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d101      	bne.n	80044a4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e23f      	b.n	8004924 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044a4:	4b76      	ldr	r3, [pc, #472]	@ (8004680 <HAL_RCC_OscConfig+0x504>)
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	691b      	ldr	r3, [r3, #16]
 80044b0:	061b      	lsls	r3, r3, #24
 80044b2:	4973      	ldr	r1, [pc, #460]	@ (8004680 <HAL_RCC_OscConfig+0x504>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044b8:	e040      	b.n	800453c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d023      	beq.n	800450a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044c2:	4b6f      	ldr	r3, [pc, #444]	@ (8004680 <HAL_RCC_OscConfig+0x504>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a6e      	ldr	r2, [pc, #440]	@ (8004680 <HAL_RCC_OscConfig+0x504>)
 80044c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ce:	f7fe fcc9 	bl	8002e64 <HAL_GetTick>
 80044d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044d4:	e008      	b.n	80044e8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044d6:	f7fe fcc5 	bl	8002e64 <HAL_GetTick>
 80044da:	4602      	mov	r2, r0
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d901      	bls.n	80044e8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80044e4:	2303      	movs	r3, #3
 80044e6:	e21d      	b.n	8004924 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044e8:	4b65      	ldr	r3, [pc, #404]	@ (8004680 <HAL_RCC_OscConfig+0x504>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d0f0      	beq.n	80044d6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044f4:	4b62      	ldr	r3, [pc, #392]	@ (8004680 <HAL_RCC_OscConfig+0x504>)
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	061b      	lsls	r3, r3, #24
 8004502:	495f      	ldr	r1, [pc, #380]	@ (8004680 <HAL_RCC_OscConfig+0x504>)
 8004504:	4313      	orrs	r3, r2
 8004506:	604b      	str	r3, [r1, #4]
 8004508:	e018      	b.n	800453c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800450a:	4b5d      	ldr	r3, [pc, #372]	@ (8004680 <HAL_RCC_OscConfig+0x504>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a5c      	ldr	r2, [pc, #368]	@ (8004680 <HAL_RCC_OscConfig+0x504>)
 8004510:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004514:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004516:	f7fe fca5 	bl	8002e64 <HAL_GetTick>
 800451a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800451c:	e008      	b.n	8004530 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800451e:	f7fe fca1 	bl	8002e64 <HAL_GetTick>
 8004522:	4602      	mov	r2, r0
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	2b02      	cmp	r3, #2
 800452a:	d901      	bls.n	8004530 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e1f9      	b.n	8004924 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004530:	4b53      	ldr	r3, [pc, #332]	@ (8004680 <HAL_RCC_OscConfig+0x504>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004538:	2b00      	cmp	r3, #0
 800453a:	d1f0      	bne.n	800451e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0308 	and.w	r3, r3, #8
 8004544:	2b00      	cmp	r3, #0
 8004546:	d03c      	beq.n	80045c2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	695b      	ldr	r3, [r3, #20]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d01c      	beq.n	800458a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004550:	4b4b      	ldr	r3, [pc, #300]	@ (8004680 <HAL_RCC_OscConfig+0x504>)
 8004552:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004556:	4a4a      	ldr	r2, [pc, #296]	@ (8004680 <HAL_RCC_OscConfig+0x504>)
 8004558:	f043 0301 	orr.w	r3, r3, #1
 800455c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004560:	f7fe fc80 	bl	8002e64 <HAL_GetTick>
 8004564:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004566:	e008      	b.n	800457a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004568:	f7fe fc7c 	bl	8002e64 <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	2b02      	cmp	r3, #2
 8004574:	d901      	bls.n	800457a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e1d4      	b.n	8004924 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800457a:	4b41      	ldr	r3, [pc, #260]	@ (8004680 <HAL_RCC_OscConfig+0x504>)
 800457c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004580:	f003 0302 	and.w	r3, r3, #2
 8004584:	2b00      	cmp	r3, #0
 8004586:	d0ef      	beq.n	8004568 <HAL_RCC_OscConfig+0x3ec>
 8004588:	e01b      	b.n	80045c2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800458a:	4b3d      	ldr	r3, [pc, #244]	@ (8004680 <HAL_RCC_OscConfig+0x504>)
 800458c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004590:	4a3b      	ldr	r2, [pc, #236]	@ (8004680 <HAL_RCC_OscConfig+0x504>)
 8004592:	f023 0301 	bic.w	r3, r3, #1
 8004596:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800459a:	f7fe fc63 	bl	8002e64 <HAL_GetTick>
 800459e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80045a0:	e008      	b.n	80045b4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045a2:	f7fe fc5f 	bl	8002e64 <HAL_GetTick>
 80045a6:	4602      	mov	r2, r0
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d901      	bls.n	80045b4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80045b0:	2303      	movs	r3, #3
 80045b2:	e1b7      	b.n	8004924 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80045b4:	4b32      	ldr	r3, [pc, #200]	@ (8004680 <HAL_RCC_OscConfig+0x504>)
 80045b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045ba:	f003 0302 	and.w	r3, r3, #2
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1ef      	bne.n	80045a2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0304 	and.w	r3, r3, #4
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f000 80a6 	beq.w	800471c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045d0:	2300      	movs	r3, #0
 80045d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80045d4:	4b2a      	ldr	r3, [pc, #168]	@ (8004680 <HAL_RCC_OscConfig+0x504>)
 80045d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d10d      	bne.n	80045fc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045e0:	4b27      	ldr	r3, [pc, #156]	@ (8004680 <HAL_RCC_OscConfig+0x504>)
 80045e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045e4:	4a26      	ldr	r2, [pc, #152]	@ (8004680 <HAL_RCC_OscConfig+0x504>)
 80045e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80045ec:	4b24      	ldr	r3, [pc, #144]	@ (8004680 <HAL_RCC_OscConfig+0x504>)
 80045ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045f4:	60bb      	str	r3, [r7, #8]
 80045f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045f8:	2301      	movs	r3, #1
 80045fa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045fc:	4b21      	ldr	r3, [pc, #132]	@ (8004684 <HAL_RCC_OscConfig+0x508>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004604:	2b00      	cmp	r3, #0
 8004606:	d118      	bne.n	800463a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004608:	4b1e      	ldr	r3, [pc, #120]	@ (8004684 <HAL_RCC_OscConfig+0x508>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a1d      	ldr	r2, [pc, #116]	@ (8004684 <HAL_RCC_OscConfig+0x508>)
 800460e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004612:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004614:	f7fe fc26 	bl	8002e64 <HAL_GetTick>
 8004618:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800461a:	e008      	b.n	800462e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800461c:	f7fe fc22 	bl	8002e64 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	2b02      	cmp	r3, #2
 8004628:	d901      	bls.n	800462e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e17a      	b.n	8004924 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800462e:	4b15      	ldr	r3, [pc, #84]	@ (8004684 <HAL_RCC_OscConfig+0x508>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004636:	2b00      	cmp	r3, #0
 8004638:	d0f0      	beq.n	800461c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	2b01      	cmp	r3, #1
 8004640:	d108      	bne.n	8004654 <HAL_RCC_OscConfig+0x4d8>
 8004642:	4b0f      	ldr	r3, [pc, #60]	@ (8004680 <HAL_RCC_OscConfig+0x504>)
 8004644:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004648:	4a0d      	ldr	r2, [pc, #52]	@ (8004680 <HAL_RCC_OscConfig+0x504>)
 800464a:	f043 0301 	orr.w	r3, r3, #1
 800464e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004652:	e029      	b.n	80046a8 <HAL_RCC_OscConfig+0x52c>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	2b05      	cmp	r3, #5
 800465a:	d115      	bne.n	8004688 <HAL_RCC_OscConfig+0x50c>
 800465c:	4b08      	ldr	r3, [pc, #32]	@ (8004680 <HAL_RCC_OscConfig+0x504>)
 800465e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004662:	4a07      	ldr	r2, [pc, #28]	@ (8004680 <HAL_RCC_OscConfig+0x504>)
 8004664:	f043 0304 	orr.w	r3, r3, #4
 8004668:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800466c:	4b04      	ldr	r3, [pc, #16]	@ (8004680 <HAL_RCC_OscConfig+0x504>)
 800466e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004672:	4a03      	ldr	r2, [pc, #12]	@ (8004680 <HAL_RCC_OscConfig+0x504>)
 8004674:	f043 0301 	orr.w	r3, r3, #1
 8004678:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800467c:	e014      	b.n	80046a8 <HAL_RCC_OscConfig+0x52c>
 800467e:	bf00      	nop
 8004680:	40021000 	.word	0x40021000
 8004684:	40007000 	.word	0x40007000
 8004688:	4b9c      	ldr	r3, [pc, #624]	@ (80048fc <HAL_RCC_OscConfig+0x780>)
 800468a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800468e:	4a9b      	ldr	r2, [pc, #620]	@ (80048fc <HAL_RCC_OscConfig+0x780>)
 8004690:	f023 0301 	bic.w	r3, r3, #1
 8004694:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004698:	4b98      	ldr	r3, [pc, #608]	@ (80048fc <HAL_RCC_OscConfig+0x780>)
 800469a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800469e:	4a97      	ldr	r2, [pc, #604]	@ (80048fc <HAL_RCC_OscConfig+0x780>)
 80046a0:	f023 0304 	bic.w	r3, r3, #4
 80046a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d016      	beq.n	80046de <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046b0:	f7fe fbd8 	bl	8002e64 <HAL_GetTick>
 80046b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046b6:	e00a      	b.n	80046ce <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046b8:	f7fe fbd4 	bl	8002e64 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d901      	bls.n	80046ce <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e12a      	b.n	8004924 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046ce:	4b8b      	ldr	r3, [pc, #556]	@ (80048fc <HAL_RCC_OscConfig+0x780>)
 80046d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046d4:	f003 0302 	and.w	r3, r3, #2
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d0ed      	beq.n	80046b8 <HAL_RCC_OscConfig+0x53c>
 80046dc:	e015      	b.n	800470a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046de:	f7fe fbc1 	bl	8002e64 <HAL_GetTick>
 80046e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046e4:	e00a      	b.n	80046fc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046e6:	f7fe fbbd 	bl	8002e64 <HAL_GetTick>
 80046ea:	4602      	mov	r2, r0
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d901      	bls.n	80046fc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	e113      	b.n	8004924 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046fc:	4b7f      	ldr	r3, [pc, #508]	@ (80048fc <HAL_RCC_OscConfig+0x780>)
 80046fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004702:	f003 0302 	and.w	r3, r3, #2
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1ed      	bne.n	80046e6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800470a:	7ffb      	ldrb	r3, [r7, #31]
 800470c:	2b01      	cmp	r3, #1
 800470e:	d105      	bne.n	800471c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004710:	4b7a      	ldr	r3, [pc, #488]	@ (80048fc <HAL_RCC_OscConfig+0x780>)
 8004712:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004714:	4a79      	ldr	r2, [pc, #484]	@ (80048fc <HAL_RCC_OscConfig+0x780>)
 8004716:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800471a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004720:	2b00      	cmp	r3, #0
 8004722:	f000 80fe 	beq.w	8004922 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800472a:	2b02      	cmp	r3, #2
 800472c:	f040 80d0 	bne.w	80048d0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004730:	4b72      	ldr	r3, [pc, #456]	@ (80048fc <HAL_RCC_OscConfig+0x780>)
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	f003 0203 	and.w	r2, r3, #3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004740:	429a      	cmp	r2, r3
 8004742:	d130      	bne.n	80047a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800474e:	3b01      	subs	r3, #1
 8004750:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004752:	429a      	cmp	r2, r3
 8004754:	d127      	bne.n	80047a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004760:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004762:	429a      	cmp	r2, r3
 8004764:	d11f      	bne.n	80047a6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004770:	2a07      	cmp	r2, #7
 8004772:	bf14      	ite	ne
 8004774:	2201      	movne	r2, #1
 8004776:	2200      	moveq	r2, #0
 8004778:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800477a:	4293      	cmp	r3, r2
 800477c:	d113      	bne.n	80047a6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004788:	085b      	lsrs	r3, r3, #1
 800478a:	3b01      	subs	r3, #1
 800478c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800478e:	429a      	cmp	r2, r3
 8004790:	d109      	bne.n	80047a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800479c:	085b      	lsrs	r3, r3, #1
 800479e:	3b01      	subs	r3, #1
 80047a0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d06e      	beq.n	8004884 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	2b0c      	cmp	r3, #12
 80047aa:	d069      	beq.n	8004880 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80047ac:	4b53      	ldr	r3, [pc, #332]	@ (80048fc <HAL_RCC_OscConfig+0x780>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d105      	bne.n	80047c4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80047b8:	4b50      	ldr	r3, [pc, #320]	@ (80048fc <HAL_RCC_OscConfig+0x780>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d001      	beq.n	80047c8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e0ad      	b.n	8004924 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80047c8:	4b4c      	ldr	r3, [pc, #304]	@ (80048fc <HAL_RCC_OscConfig+0x780>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a4b      	ldr	r2, [pc, #300]	@ (80048fc <HAL_RCC_OscConfig+0x780>)
 80047ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80047d2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80047d4:	f7fe fb46 	bl	8002e64 <HAL_GetTick>
 80047d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047da:	e008      	b.n	80047ee <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047dc:	f7fe fb42 	bl	8002e64 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d901      	bls.n	80047ee <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e09a      	b.n	8004924 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047ee:	4b43      	ldr	r3, [pc, #268]	@ (80048fc <HAL_RCC_OscConfig+0x780>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d1f0      	bne.n	80047dc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047fa:	4b40      	ldr	r3, [pc, #256]	@ (80048fc <HAL_RCC_OscConfig+0x780>)
 80047fc:	68da      	ldr	r2, [r3, #12]
 80047fe:	4b40      	ldr	r3, [pc, #256]	@ (8004900 <HAL_RCC_OscConfig+0x784>)
 8004800:	4013      	ands	r3, r2
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800480a:	3a01      	subs	r2, #1
 800480c:	0112      	lsls	r2, r2, #4
 800480e:	4311      	orrs	r1, r2
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004814:	0212      	lsls	r2, r2, #8
 8004816:	4311      	orrs	r1, r2
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800481c:	0852      	lsrs	r2, r2, #1
 800481e:	3a01      	subs	r2, #1
 8004820:	0552      	lsls	r2, r2, #21
 8004822:	4311      	orrs	r1, r2
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004828:	0852      	lsrs	r2, r2, #1
 800482a:	3a01      	subs	r2, #1
 800482c:	0652      	lsls	r2, r2, #25
 800482e:	4311      	orrs	r1, r2
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004834:	0912      	lsrs	r2, r2, #4
 8004836:	0452      	lsls	r2, r2, #17
 8004838:	430a      	orrs	r2, r1
 800483a:	4930      	ldr	r1, [pc, #192]	@ (80048fc <HAL_RCC_OscConfig+0x780>)
 800483c:	4313      	orrs	r3, r2
 800483e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004840:	4b2e      	ldr	r3, [pc, #184]	@ (80048fc <HAL_RCC_OscConfig+0x780>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a2d      	ldr	r2, [pc, #180]	@ (80048fc <HAL_RCC_OscConfig+0x780>)
 8004846:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800484a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800484c:	4b2b      	ldr	r3, [pc, #172]	@ (80048fc <HAL_RCC_OscConfig+0x780>)
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	4a2a      	ldr	r2, [pc, #168]	@ (80048fc <HAL_RCC_OscConfig+0x780>)
 8004852:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004856:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004858:	f7fe fb04 	bl	8002e64 <HAL_GetTick>
 800485c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800485e:	e008      	b.n	8004872 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004860:	f7fe fb00 	bl	8002e64 <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	2b02      	cmp	r3, #2
 800486c:	d901      	bls.n	8004872 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e058      	b.n	8004924 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004872:	4b22      	ldr	r3, [pc, #136]	@ (80048fc <HAL_RCC_OscConfig+0x780>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d0f0      	beq.n	8004860 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800487e:	e050      	b.n	8004922 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e04f      	b.n	8004924 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004884:	4b1d      	ldr	r3, [pc, #116]	@ (80048fc <HAL_RCC_OscConfig+0x780>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d148      	bne.n	8004922 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004890:	4b1a      	ldr	r3, [pc, #104]	@ (80048fc <HAL_RCC_OscConfig+0x780>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a19      	ldr	r2, [pc, #100]	@ (80048fc <HAL_RCC_OscConfig+0x780>)
 8004896:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800489a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800489c:	4b17      	ldr	r3, [pc, #92]	@ (80048fc <HAL_RCC_OscConfig+0x780>)
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	4a16      	ldr	r2, [pc, #88]	@ (80048fc <HAL_RCC_OscConfig+0x780>)
 80048a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80048a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80048a8:	f7fe fadc 	bl	8002e64 <HAL_GetTick>
 80048ac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048ae:	e008      	b.n	80048c2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048b0:	f7fe fad8 	bl	8002e64 <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d901      	bls.n	80048c2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e030      	b.n	8004924 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048c2:	4b0e      	ldr	r3, [pc, #56]	@ (80048fc <HAL_RCC_OscConfig+0x780>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d0f0      	beq.n	80048b0 <HAL_RCC_OscConfig+0x734>
 80048ce:	e028      	b.n	8004922 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	2b0c      	cmp	r3, #12
 80048d4:	d023      	beq.n	800491e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048d6:	4b09      	ldr	r3, [pc, #36]	@ (80048fc <HAL_RCC_OscConfig+0x780>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a08      	ldr	r2, [pc, #32]	@ (80048fc <HAL_RCC_OscConfig+0x780>)
 80048dc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80048e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e2:	f7fe fabf 	bl	8002e64 <HAL_GetTick>
 80048e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048e8:	e00c      	b.n	8004904 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048ea:	f7fe fabb 	bl	8002e64 <HAL_GetTick>
 80048ee:	4602      	mov	r2, r0
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d905      	bls.n	8004904 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e013      	b.n	8004924 <HAL_RCC_OscConfig+0x7a8>
 80048fc:	40021000 	.word	0x40021000
 8004900:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004904:	4b09      	ldr	r3, [pc, #36]	@ (800492c <HAL_RCC_OscConfig+0x7b0>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d1ec      	bne.n	80048ea <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004910:	4b06      	ldr	r3, [pc, #24]	@ (800492c <HAL_RCC_OscConfig+0x7b0>)
 8004912:	68da      	ldr	r2, [r3, #12]
 8004914:	4905      	ldr	r1, [pc, #20]	@ (800492c <HAL_RCC_OscConfig+0x7b0>)
 8004916:	4b06      	ldr	r3, [pc, #24]	@ (8004930 <HAL_RCC_OscConfig+0x7b4>)
 8004918:	4013      	ands	r3, r2
 800491a:	60cb      	str	r3, [r1, #12]
 800491c:	e001      	b.n	8004922 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e000      	b.n	8004924 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	3720      	adds	r7, #32
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}
 800492c:	40021000 	.word	0x40021000
 8004930:	feeefffc 	.word	0xfeeefffc

08004934 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d101      	bne.n	8004948 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e0e7      	b.n	8004b18 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004948:	4b75      	ldr	r3, [pc, #468]	@ (8004b20 <HAL_RCC_ClockConfig+0x1ec>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0307 	and.w	r3, r3, #7
 8004950:	683a      	ldr	r2, [r7, #0]
 8004952:	429a      	cmp	r2, r3
 8004954:	d910      	bls.n	8004978 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004956:	4b72      	ldr	r3, [pc, #456]	@ (8004b20 <HAL_RCC_ClockConfig+0x1ec>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f023 0207 	bic.w	r2, r3, #7
 800495e:	4970      	ldr	r1, [pc, #448]	@ (8004b20 <HAL_RCC_ClockConfig+0x1ec>)
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	4313      	orrs	r3, r2
 8004964:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004966:	4b6e      	ldr	r3, [pc, #440]	@ (8004b20 <HAL_RCC_ClockConfig+0x1ec>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0307 	and.w	r3, r3, #7
 800496e:	683a      	ldr	r2, [r7, #0]
 8004970:	429a      	cmp	r2, r3
 8004972:	d001      	beq.n	8004978 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e0cf      	b.n	8004b18 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0302 	and.w	r3, r3, #2
 8004980:	2b00      	cmp	r3, #0
 8004982:	d010      	beq.n	80049a6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	689a      	ldr	r2, [r3, #8]
 8004988:	4b66      	ldr	r3, [pc, #408]	@ (8004b24 <HAL_RCC_ClockConfig+0x1f0>)
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004990:	429a      	cmp	r2, r3
 8004992:	d908      	bls.n	80049a6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004994:	4b63      	ldr	r3, [pc, #396]	@ (8004b24 <HAL_RCC_ClockConfig+0x1f0>)
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	4960      	ldr	r1, [pc, #384]	@ (8004b24 <HAL_RCC_ClockConfig+0x1f0>)
 80049a2:	4313      	orrs	r3, r2
 80049a4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d04c      	beq.n	8004a4c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	2b03      	cmp	r3, #3
 80049b8:	d107      	bne.n	80049ca <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049ba:	4b5a      	ldr	r3, [pc, #360]	@ (8004b24 <HAL_RCC_ClockConfig+0x1f0>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d121      	bne.n	8004a0a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e0a6      	b.n	8004b18 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d107      	bne.n	80049e2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049d2:	4b54      	ldr	r3, [pc, #336]	@ (8004b24 <HAL_RCC_ClockConfig+0x1f0>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d115      	bne.n	8004a0a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e09a      	b.n	8004b18 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d107      	bne.n	80049fa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80049ea:	4b4e      	ldr	r3, [pc, #312]	@ (8004b24 <HAL_RCC_ClockConfig+0x1f0>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0302 	and.w	r3, r3, #2
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d109      	bne.n	8004a0a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e08e      	b.n	8004b18 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049fa:	4b4a      	ldr	r3, [pc, #296]	@ (8004b24 <HAL_RCC_ClockConfig+0x1f0>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d101      	bne.n	8004a0a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e086      	b.n	8004b18 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a0a:	4b46      	ldr	r3, [pc, #280]	@ (8004b24 <HAL_RCC_ClockConfig+0x1f0>)
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f023 0203 	bic.w	r2, r3, #3
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	4943      	ldr	r1, [pc, #268]	@ (8004b24 <HAL_RCC_ClockConfig+0x1f0>)
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a1c:	f7fe fa22 	bl	8002e64 <HAL_GetTick>
 8004a20:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a22:	e00a      	b.n	8004a3a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a24:	f7fe fa1e 	bl	8002e64 <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d901      	bls.n	8004a3a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e06e      	b.n	8004b18 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a3a:	4b3a      	ldr	r3, [pc, #232]	@ (8004b24 <HAL_RCC_ClockConfig+0x1f0>)
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f003 020c 	and.w	r2, r3, #12
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d1eb      	bne.n	8004a24 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0302 	and.w	r3, r3, #2
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d010      	beq.n	8004a7a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	689a      	ldr	r2, [r3, #8]
 8004a5c:	4b31      	ldr	r3, [pc, #196]	@ (8004b24 <HAL_RCC_ClockConfig+0x1f0>)
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d208      	bcs.n	8004a7a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a68:	4b2e      	ldr	r3, [pc, #184]	@ (8004b24 <HAL_RCC_ClockConfig+0x1f0>)
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	492b      	ldr	r1, [pc, #172]	@ (8004b24 <HAL_RCC_ClockConfig+0x1f0>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a7a:	4b29      	ldr	r3, [pc, #164]	@ (8004b20 <HAL_RCC_ClockConfig+0x1ec>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0307 	and.w	r3, r3, #7
 8004a82:	683a      	ldr	r2, [r7, #0]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d210      	bcs.n	8004aaa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a88:	4b25      	ldr	r3, [pc, #148]	@ (8004b20 <HAL_RCC_ClockConfig+0x1ec>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f023 0207 	bic.w	r2, r3, #7
 8004a90:	4923      	ldr	r1, [pc, #140]	@ (8004b20 <HAL_RCC_ClockConfig+0x1ec>)
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a98:	4b21      	ldr	r3, [pc, #132]	@ (8004b20 <HAL_RCC_ClockConfig+0x1ec>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0307 	and.w	r3, r3, #7
 8004aa0:	683a      	ldr	r2, [r7, #0]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d001      	beq.n	8004aaa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e036      	b.n	8004b18 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0304 	and.w	r3, r3, #4
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d008      	beq.n	8004ac8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ab6:	4b1b      	ldr	r3, [pc, #108]	@ (8004b24 <HAL_RCC_ClockConfig+0x1f0>)
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	4918      	ldr	r1, [pc, #96]	@ (8004b24 <HAL_RCC_ClockConfig+0x1f0>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0308 	and.w	r3, r3, #8
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d009      	beq.n	8004ae8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ad4:	4b13      	ldr	r3, [pc, #76]	@ (8004b24 <HAL_RCC_ClockConfig+0x1f0>)
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	00db      	lsls	r3, r3, #3
 8004ae2:	4910      	ldr	r1, [pc, #64]	@ (8004b24 <HAL_RCC_ClockConfig+0x1f0>)
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ae8:	f000 f824 	bl	8004b34 <HAL_RCC_GetSysClockFreq>
 8004aec:	4602      	mov	r2, r0
 8004aee:	4b0d      	ldr	r3, [pc, #52]	@ (8004b24 <HAL_RCC_ClockConfig+0x1f0>)
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	091b      	lsrs	r3, r3, #4
 8004af4:	f003 030f 	and.w	r3, r3, #15
 8004af8:	490b      	ldr	r1, [pc, #44]	@ (8004b28 <HAL_RCC_ClockConfig+0x1f4>)
 8004afa:	5ccb      	ldrb	r3, [r1, r3]
 8004afc:	f003 031f 	and.w	r3, r3, #31
 8004b00:	fa22 f303 	lsr.w	r3, r2, r3
 8004b04:	4a09      	ldr	r2, [pc, #36]	@ (8004b2c <HAL_RCC_ClockConfig+0x1f8>)
 8004b06:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004b08:	4b09      	ldr	r3, [pc, #36]	@ (8004b30 <HAL_RCC_ClockConfig+0x1fc>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f7fe f959 	bl	8002dc4 <HAL_InitTick>
 8004b12:	4603      	mov	r3, r0
 8004b14:	72fb      	strb	r3, [r7, #11]

  return status;
 8004b16:	7afb      	ldrb	r3, [r7, #11]
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3710      	adds	r7, #16
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	40022000 	.word	0x40022000
 8004b24:	40021000 	.word	0x40021000
 8004b28:	0800c8c0 	.word	0x0800c8c0
 8004b2c:	20000004 	.word	0x20000004
 8004b30:	20000008 	.word	0x20000008

08004b34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b089      	sub	sp, #36	@ 0x24
 8004b38:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	61fb      	str	r3, [r7, #28]
 8004b3e:	2300      	movs	r3, #0
 8004b40:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b42:	4b3e      	ldr	r3, [pc, #248]	@ (8004c3c <HAL_RCC_GetSysClockFreq+0x108>)
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	f003 030c 	and.w	r3, r3, #12
 8004b4a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b4c:	4b3b      	ldr	r3, [pc, #236]	@ (8004c3c <HAL_RCC_GetSysClockFreq+0x108>)
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	f003 0303 	and.w	r3, r3, #3
 8004b54:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d005      	beq.n	8004b68 <HAL_RCC_GetSysClockFreq+0x34>
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	2b0c      	cmp	r3, #12
 8004b60:	d121      	bne.n	8004ba6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d11e      	bne.n	8004ba6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004b68:	4b34      	ldr	r3, [pc, #208]	@ (8004c3c <HAL_RCC_GetSysClockFreq+0x108>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0308 	and.w	r3, r3, #8
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d107      	bne.n	8004b84 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004b74:	4b31      	ldr	r3, [pc, #196]	@ (8004c3c <HAL_RCC_GetSysClockFreq+0x108>)
 8004b76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b7a:	0a1b      	lsrs	r3, r3, #8
 8004b7c:	f003 030f 	and.w	r3, r3, #15
 8004b80:	61fb      	str	r3, [r7, #28]
 8004b82:	e005      	b.n	8004b90 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004b84:	4b2d      	ldr	r3, [pc, #180]	@ (8004c3c <HAL_RCC_GetSysClockFreq+0x108>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	091b      	lsrs	r3, r3, #4
 8004b8a:	f003 030f 	and.w	r3, r3, #15
 8004b8e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004b90:	4a2b      	ldr	r2, [pc, #172]	@ (8004c40 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b98:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d10d      	bne.n	8004bbc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ba4:	e00a      	b.n	8004bbc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	2b04      	cmp	r3, #4
 8004baa:	d102      	bne.n	8004bb2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004bac:	4b25      	ldr	r3, [pc, #148]	@ (8004c44 <HAL_RCC_GetSysClockFreq+0x110>)
 8004bae:	61bb      	str	r3, [r7, #24]
 8004bb0:	e004      	b.n	8004bbc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	2b08      	cmp	r3, #8
 8004bb6:	d101      	bne.n	8004bbc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004bb8:	4b23      	ldr	r3, [pc, #140]	@ (8004c48 <HAL_RCC_GetSysClockFreq+0x114>)
 8004bba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	2b0c      	cmp	r3, #12
 8004bc0:	d134      	bne.n	8004c2c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004bc2:	4b1e      	ldr	r3, [pc, #120]	@ (8004c3c <HAL_RCC_GetSysClockFreq+0x108>)
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	f003 0303 	and.w	r3, r3, #3
 8004bca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	d003      	beq.n	8004bda <HAL_RCC_GetSysClockFreq+0xa6>
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	2b03      	cmp	r3, #3
 8004bd6:	d003      	beq.n	8004be0 <HAL_RCC_GetSysClockFreq+0xac>
 8004bd8:	e005      	b.n	8004be6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004bda:	4b1a      	ldr	r3, [pc, #104]	@ (8004c44 <HAL_RCC_GetSysClockFreq+0x110>)
 8004bdc:	617b      	str	r3, [r7, #20]
      break;
 8004bde:	e005      	b.n	8004bec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004be0:	4b19      	ldr	r3, [pc, #100]	@ (8004c48 <HAL_RCC_GetSysClockFreq+0x114>)
 8004be2:	617b      	str	r3, [r7, #20]
      break;
 8004be4:	e002      	b.n	8004bec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	617b      	str	r3, [r7, #20]
      break;
 8004bea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004bec:	4b13      	ldr	r3, [pc, #76]	@ (8004c3c <HAL_RCC_GetSysClockFreq+0x108>)
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	091b      	lsrs	r3, r3, #4
 8004bf2:	f003 0307 	and.w	r3, r3, #7
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004bfa:	4b10      	ldr	r3, [pc, #64]	@ (8004c3c <HAL_RCC_GetSysClockFreq+0x108>)
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	0a1b      	lsrs	r3, r3, #8
 8004c00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c04:	697a      	ldr	r2, [r7, #20]
 8004c06:	fb03 f202 	mul.w	r2, r3, r2
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c10:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c12:	4b0a      	ldr	r3, [pc, #40]	@ (8004c3c <HAL_RCC_GetSysClockFreq+0x108>)
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	0e5b      	lsrs	r3, r3, #25
 8004c18:	f003 0303 	and.w	r3, r3, #3
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	005b      	lsls	r3, r3, #1
 8004c20:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004c22:	697a      	ldr	r2, [r7, #20]
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c2a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004c2c:	69bb      	ldr	r3, [r7, #24]
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3724      	adds	r7, #36	@ 0x24
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	40021000 	.word	0x40021000
 8004c40:	0800c8d8 	.word	0x0800c8d8
 8004c44:	00f42400 	.word	0x00f42400
 8004c48:	007a1200 	.word	0x007a1200

08004c4c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c50:	4b03      	ldr	r3, [pc, #12]	@ (8004c60 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c52:	681b      	ldr	r3, [r3, #0]
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	20000004 	.word	0x20000004

08004c64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004c68:	f7ff fff0 	bl	8004c4c <HAL_RCC_GetHCLKFreq>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	4b06      	ldr	r3, [pc, #24]	@ (8004c88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	0a1b      	lsrs	r3, r3, #8
 8004c74:	f003 0307 	and.w	r3, r3, #7
 8004c78:	4904      	ldr	r1, [pc, #16]	@ (8004c8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c7a:	5ccb      	ldrb	r3, [r1, r3]
 8004c7c:	f003 031f 	and.w	r3, r3, #31
 8004c80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	40021000 	.word	0x40021000
 8004c8c:	0800c8d0 	.word	0x0800c8d0

08004c90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004c94:	f7ff ffda 	bl	8004c4c <HAL_RCC_GetHCLKFreq>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	4b06      	ldr	r3, [pc, #24]	@ (8004cb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	0adb      	lsrs	r3, r3, #11
 8004ca0:	f003 0307 	and.w	r3, r3, #7
 8004ca4:	4904      	ldr	r1, [pc, #16]	@ (8004cb8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004ca6:	5ccb      	ldrb	r3, [r1, r3]
 8004ca8:	f003 031f 	and.w	r3, r3, #31
 8004cac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	40021000 	.word	0x40021000
 8004cb8:	0800c8d0 	.word	0x0800c8d0

08004cbc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b086      	sub	sp, #24
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004cc8:	4b2a      	ldr	r3, [pc, #168]	@ (8004d74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004cca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ccc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d003      	beq.n	8004cdc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004cd4:	f7ff f9ee 	bl	80040b4 <HAL_PWREx_GetVoltageRange>
 8004cd8:	6178      	str	r0, [r7, #20]
 8004cda:	e014      	b.n	8004d06 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004cdc:	4b25      	ldr	r3, [pc, #148]	@ (8004d74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004cde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ce0:	4a24      	ldr	r2, [pc, #144]	@ (8004d74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ce2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ce6:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ce8:	4b22      	ldr	r3, [pc, #136]	@ (8004d74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004cea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cf0:	60fb      	str	r3, [r7, #12]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004cf4:	f7ff f9de 	bl	80040b4 <HAL_PWREx_GetVoltageRange>
 8004cf8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004cfa:	4b1e      	ldr	r3, [pc, #120]	@ (8004d74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004cfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cfe:	4a1d      	ldr	r2, [pc, #116]	@ (8004d74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d04:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d0c:	d10b      	bne.n	8004d26 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2b80      	cmp	r3, #128	@ 0x80
 8004d12:	d919      	bls.n	8004d48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2ba0      	cmp	r3, #160	@ 0xa0
 8004d18:	d902      	bls.n	8004d20 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004d1a:	2302      	movs	r3, #2
 8004d1c:	613b      	str	r3, [r7, #16]
 8004d1e:	e013      	b.n	8004d48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004d20:	2301      	movs	r3, #1
 8004d22:	613b      	str	r3, [r7, #16]
 8004d24:	e010      	b.n	8004d48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2b80      	cmp	r3, #128	@ 0x80
 8004d2a:	d902      	bls.n	8004d32 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004d2c:	2303      	movs	r3, #3
 8004d2e:	613b      	str	r3, [r7, #16]
 8004d30:	e00a      	b.n	8004d48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2b80      	cmp	r3, #128	@ 0x80
 8004d36:	d102      	bne.n	8004d3e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004d38:	2302      	movs	r3, #2
 8004d3a:	613b      	str	r3, [r7, #16]
 8004d3c:	e004      	b.n	8004d48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2b70      	cmp	r3, #112	@ 0x70
 8004d42:	d101      	bne.n	8004d48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004d44:	2301      	movs	r3, #1
 8004d46:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004d48:	4b0b      	ldr	r3, [pc, #44]	@ (8004d78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f023 0207 	bic.w	r2, r3, #7
 8004d50:	4909      	ldr	r1, [pc, #36]	@ (8004d78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004d58:	4b07      	ldr	r3, [pc, #28]	@ (8004d78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0307 	and.w	r3, r3, #7
 8004d60:	693a      	ldr	r2, [r7, #16]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d001      	beq.n	8004d6a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e000      	b.n	8004d6c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004d6a:	2300      	movs	r3, #0
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3718      	adds	r7, #24
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	40021000 	.word	0x40021000
 8004d78:	40022000 	.word	0x40022000

08004d7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b086      	sub	sp, #24
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004d84:	2300      	movs	r3, #0
 8004d86:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d88:	2300      	movs	r3, #0
 8004d8a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d041      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d9c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004da0:	d02a      	beq.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004da2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004da6:	d824      	bhi.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004da8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004dac:	d008      	beq.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004dae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004db2:	d81e      	bhi.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d00a      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004db8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004dbc:	d010      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004dbe:	e018      	b.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004dc0:	4b86      	ldr	r3, [pc, #536]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	4a85      	ldr	r2, [pc, #532]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004dca:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004dcc:	e015      	b.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	3304      	adds	r3, #4
 8004dd2:	2100      	movs	r1, #0
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f000 fabb 	bl	8005350 <RCCEx_PLLSAI1_Config>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004dde:	e00c      	b.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	3320      	adds	r3, #32
 8004de4:	2100      	movs	r1, #0
 8004de6:	4618      	mov	r0, r3
 8004de8:	f000 fba6 	bl	8005538 <RCCEx_PLLSAI2_Config>
 8004dec:	4603      	mov	r3, r0
 8004dee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004df0:	e003      	b.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	74fb      	strb	r3, [r7, #19]
      break;
 8004df6:	e000      	b.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004df8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dfa:	7cfb      	ldrb	r3, [r7, #19]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d10b      	bne.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e00:	4b76      	ldr	r3, [pc, #472]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e06:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e0e:	4973      	ldr	r1, [pc, #460]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e10:	4313      	orrs	r3, r2
 8004e12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004e16:	e001      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e18:	7cfb      	ldrb	r3, [r7, #19]
 8004e1a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d041      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e2c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004e30:	d02a      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004e32:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004e36:	d824      	bhi.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004e38:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004e3c:	d008      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004e3e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004e42:	d81e      	bhi.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d00a      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004e48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004e4c:	d010      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004e4e:	e018      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004e50:	4b62      	ldr	r3, [pc, #392]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	4a61      	ldr	r2, [pc, #388]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e5a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004e5c:	e015      	b.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	3304      	adds	r3, #4
 8004e62:	2100      	movs	r1, #0
 8004e64:	4618      	mov	r0, r3
 8004e66:	f000 fa73 	bl	8005350 <RCCEx_PLLSAI1_Config>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004e6e:	e00c      	b.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	3320      	adds	r3, #32
 8004e74:	2100      	movs	r1, #0
 8004e76:	4618      	mov	r0, r3
 8004e78:	f000 fb5e 	bl	8005538 <RCCEx_PLLSAI2_Config>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004e80:	e003      	b.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	74fb      	strb	r3, [r7, #19]
      break;
 8004e86:	e000      	b.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004e88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e8a:	7cfb      	ldrb	r3, [r7, #19]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d10b      	bne.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004e90:	4b52      	ldr	r3, [pc, #328]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e96:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e9e:	494f      	ldr	r1, [pc, #316]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004ea6:	e001      	b.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ea8:	7cfb      	ldrb	r3, [r7, #19]
 8004eaa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	f000 80a0 	beq.w	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004ebe:	4b47      	ldr	r3, [pc, #284]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ec0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ec2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d101      	bne.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e000      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004ece:	2300      	movs	r3, #0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00d      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ed4:	4b41      	ldr	r3, [pc, #260]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ed6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ed8:	4a40      	ldr	r2, [pc, #256]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004eda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ede:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ee0:	4b3e      	ldr	r3, [pc, #248]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ee2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ee4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ee8:	60bb      	str	r3, [r7, #8]
 8004eea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004eec:	2301      	movs	r3, #1
 8004eee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ef0:	4b3b      	ldr	r3, [pc, #236]	@ (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a3a      	ldr	r2, [pc, #232]	@ (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004ef6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004efa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004efc:	f7fd ffb2 	bl	8002e64 <HAL_GetTick>
 8004f00:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004f02:	e009      	b.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f04:	f7fd ffae 	bl	8002e64 <HAL_GetTick>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d902      	bls.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	74fb      	strb	r3, [r7, #19]
        break;
 8004f16:	e005      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004f18:	4b31      	ldr	r3, [pc, #196]	@ (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d0ef      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004f24:	7cfb      	ldrb	r3, [r7, #19]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d15c      	bne.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004f2a:	4b2c      	ldr	r3, [pc, #176]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f30:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f34:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d01f      	beq.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f42:	697a      	ldr	r2, [r7, #20]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d019      	beq.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004f48:	4b24      	ldr	r3, [pc, #144]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f52:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f54:	4b21      	ldr	r3, [pc, #132]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f5a:	4a20      	ldr	r2, [pc, #128]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f64:	4b1d      	ldr	r3, [pc, #116]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f6a:	4a1c      	ldr	r2, [pc, #112]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004f74:	4a19      	ldr	r2, [pc, #100]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	f003 0301 	and.w	r3, r3, #1
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d016      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f86:	f7fd ff6d 	bl	8002e64 <HAL_GetTick>
 8004f8a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f8c:	e00b      	b.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f8e:	f7fd ff69 	bl	8002e64 <HAL_GetTick>
 8004f92:	4602      	mov	r2, r0
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d902      	bls.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	74fb      	strb	r3, [r7, #19]
            break;
 8004fa4:	e006      	b.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fac:	f003 0302 	and.w	r3, r3, #2
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d0ec      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004fb4:	7cfb      	ldrb	r3, [r7, #19]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d10c      	bne.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004fba:	4b08      	ldr	r3, [pc, #32]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fc0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fca:	4904      	ldr	r1, [pc, #16]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004fd2:	e009      	b.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004fd4:	7cfb      	ldrb	r3, [r7, #19]
 8004fd6:	74bb      	strb	r3, [r7, #18]
 8004fd8:	e006      	b.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004fda:	bf00      	nop
 8004fdc:	40021000 	.word	0x40021000
 8004fe0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fe4:	7cfb      	ldrb	r3, [r7, #19]
 8004fe6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004fe8:	7c7b      	ldrb	r3, [r7, #17]
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d105      	bne.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fee:	4b9e      	ldr	r3, [pc, #632]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ff0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ff2:	4a9d      	ldr	r2, [pc, #628]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ff4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ff8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 0301 	and.w	r3, r3, #1
 8005002:	2b00      	cmp	r3, #0
 8005004:	d00a      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005006:	4b98      	ldr	r3, [pc, #608]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005008:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800500c:	f023 0203 	bic.w	r2, r3, #3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005014:	4994      	ldr	r1, [pc, #592]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005016:	4313      	orrs	r3, r2
 8005018:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0302 	and.w	r3, r3, #2
 8005024:	2b00      	cmp	r3, #0
 8005026:	d00a      	beq.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005028:	4b8f      	ldr	r3, [pc, #572]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800502a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800502e:	f023 020c 	bic.w	r2, r3, #12
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005036:	498c      	ldr	r1, [pc, #560]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005038:	4313      	orrs	r3, r2
 800503a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 0304 	and.w	r3, r3, #4
 8005046:	2b00      	cmp	r3, #0
 8005048:	d00a      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800504a:	4b87      	ldr	r3, [pc, #540]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800504c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005050:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005058:	4983      	ldr	r1, [pc, #524]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800505a:	4313      	orrs	r3, r2
 800505c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 0308 	and.w	r3, r3, #8
 8005068:	2b00      	cmp	r3, #0
 800506a:	d00a      	beq.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800506c:	4b7e      	ldr	r3, [pc, #504]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800506e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005072:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800507a:	497b      	ldr	r1, [pc, #492]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800507c:	4313      	orrs	r3, r2
 800507e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 0310 	and.w	r3, r3, #16
 800508a:	2b00      	cmp	r3, #0
 800508c:	d00a      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800508e:	4b76      	ldr	r3, [pc, #472]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005090:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005094:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800509c:	4972      	ldr	r1, [pc, #456]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800509e:	4313      	orrs	r3, r2
 80050a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 0320 	and.w	r3, r3, #32
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d00a      	beq.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80050b0:	4b6d      	ldr	r3, [pc, #436]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050b6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050be:	496a      	ldr	r1, [pc, #424]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050c0:	4313      	orrs	r3, r2
 80050c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d00a      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80050d2:	4b65      	ldr	r3, [pc, #404]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050d8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050e0:	4961      	ldr	r1, [pc, #388]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050e2:	4313      	orrs	r3, r2
 80050e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d00a      	beq.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80050f4:	4b5c      	ldr	r3, [pc, #368]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050fa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005102:	4959      	ldr	r1, [pc, #356]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005104:	4313      	orrs	r3, r2
 8005106:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00a      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005116:	4b54      	ldr	r3, [pc, #336]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005118:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800511c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005124:	4950      	ldr	r1, [pc, #320]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005126:	4313      	orrs	r3, r2
 8005128:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005134:	2b00      	cmp	r3, #0
 8005136:	d00a      	beq.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005138:	4b4b      	ldr	r3, [pc, #300]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800513a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800513e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005146:	4948      	ldr	r1, [pc, #288]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005148:	4313      	orrs	r3, r2
 800514a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00a      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800515a:	4b43      	ldr	r3, [pc, #268]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800515c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005160:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005168:	493f      	ldr	r1, [pc, #252]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800516a:	4313      	orrs	r3, r2
 800516c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005178:	2b00      	cmp	r3, #0
 800517a:	d028      	beq.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800517c:	4b3a      	ldr	r3, [pc, #232]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800517e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005182:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800518a:	4937      	ldr	r1, [pc, #220]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800518c:	4313      	orrs	r3, r2
 800518e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005196:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800519a:	d106      	bne.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800519c:	4b32      	ldr	r3, [pc, #200]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	4a31      	ldr	r2, [pc, #196]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80051a6:	60d3      	str	r3, [r2, #12]
 80051a8:	e011      	b.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051ae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80051b2:	d10c      	bne.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	3304      	adds	r3, #4
 80051b8:	2101      	movs	r1, #1
 80051ba:	4618      	mov	r0, r3
 80051bc:	f000 f8c8 	bl	8005350 <RCCEx_PLLSAI1_Config>
 80051c0:	4603      	mov	r3, r0
 80051c2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80051c4:	7cfb      	ldrb	r3, [r7, #19]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d001      	beq.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80051ca:	7cfb      	ldrb	r3, [r7, #19]
 80051cc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d028      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80051da:	4b23      	ldr	r3, [pc, #140]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051e0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051e8:	491f      	ldr	r1, [pc, #124]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051ea:	4313      	orrs	r3, r2
 80051ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80051f8:	d106      	bne.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051fa:	4b1b      	ldr	r3, [pc, #108]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	4a1a      	ldr	r2, [pc, #104]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005200:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005204:	60d3      	str	r3, [r2, #12]
 8005206:	e011      	b.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800520c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005210:	d10c      	bne.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	3304      	adds	r3, #4
 8005216:	2101      	movs	r1, #1
 8005218:	4618      	mov	r0, r3
 800521a:	f000 f899 	bl	8005350 <RCCEx_PLLSAI1_Config>
 800521e:	4603      	mov	r3, r0
 8005220:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005222:	7cfb      	ldrb	r3, [r7, #19]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d001      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005228:	7cfb      	ldrb	r3, [r7, #19]
 800522a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005234:	2b00      	cmp	r3, #0
 8005236:	d02b      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005238:	4b0b      	ldr	r3, [pc, #44]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800523a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800523e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005246:	4908      	ldr	r1, [pc, #32]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005248:	4313      	orrs	r3, r2
 800524a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005252:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005256:	d109      	bne.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005258:	4b03      	ldr	r3, [pc, #12]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	4a02      	ldr	r2, [pc, #8]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800525e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005262:	60d3      	str	r3, [r2, #12]
 8005264:	e014      	b.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005266:	bf00      	nop
 8005268:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005270:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005274:	d10c      	bne.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	3304      	adds	r3, #4
 800527a:	2101      	movs	r1, #1
 800527c:	4618      	mov	r0, r3
 800527e:	f000 f867 	bl	8005350 <RCCEx_PLLSAI1_Config>
 8005282:	4603      	mov	r3, r0
 8005284:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005286:	7cfb      	ldrb	r3, [r7, #19]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d001      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800528c:	7cfb      	ldrb	r3, [r7, #19]
 800528e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005298:	2b00      	cmp	r3, #0
 800529a:	d02f      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800529c:	4b2b      	ldr	r3, [pc, #172]	@ (800534c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800529e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052a2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80052aa:	4928      	ldr	r1, [pc, #160]	@ (800534c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80052ac:	4313      	orrs	r3, r2
 80052ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80052b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80052ba:	d10d      	bne.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	3304      	adds	r3, #4
 80052c0:	2102      	movs	r1, #2
 80052c2:	4618      	mov	r0, r3
 80052c4:	f000 f844 	bl	8005350 <RCCEx_PLLSAI1_Config>
 80052c8:	4603      	mov	r3, r0
 80052ca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80052cc:	7cfb      	ldrb	r3, [r7, #19]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d014      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80052d2:	7cfb      	ldrb	r3, [r7, #19]
 80052d4:	74bb      	strb	r3, [r7, #18]
 80052d6:	e011      	b.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80052dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80052e0:	d10c      	bne.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	3320      	adds	r3, #32
 80052e6:	2102      	movs	r1, #2
 80052e8:	4618      	mov	r0, r3
 80052ea:	f000 f925 	bl	8005538 <RCCEx_PLLSAI2_Config>
 80052ee:	4603      	mov	r3, r0
 80052f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80052f2:	7cfb      	ldrb	r3, [r7, #19]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d001      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80052f8:	7cfb      	ldrb	r3, [r7, #19]
 80052fa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005304:	2b00      	cmp	r3, #0
 8005306:	d00a      	beq.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005308:	4b10      	ldr	r3, [pc, #64]	@ (800534c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800530a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800530e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005316:	490d      	ldr	r1, [pc, #52]	@ (800534c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005318:	4313      	orrs	r3, r2
 800531a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005326:	2b00      	cmp	r3, #0
 8005328:	d00b      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800532a:	4b08      	ldr	r3, [pc, #32]	@ (800534c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800532c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005330:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800533a:	4904      	ldr	r1, [pc, #16]	@ (800534c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800533c:	4313      	orrs	r3, r2
 800533e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005342:	7cbb      	ldrb	r3, [r7, #18]
}
 8005344:	4618      	mov	r0, r3
 8005346:	3718      	adds	r7, #24
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}
 800534c:	40021000 	.word	0x40021000

08005350 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800535a:	2300      	movs	r3, #0
 800535c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800535e:	4b75      	ldr	r3, [pc, #468]	@ (8005534 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	f003 0303 	and.w	r3, r3, #3
 8005366:	2b00      	cmp	r3, #0
 8005368:	d018      	beq.n	800539c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800536a:	4b72      	ldr	r3, [pc, #456]	@ (8005534 <RCCEx_PLLSAI1_Config+0x1e4>)
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	f003 0203 	and.w	r2, r3, #3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	429a      	cmp	r2, r3
 8005378:	d10d      	bne.n	8005396 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
       ||
 800537e:	2b00      	cmp	r3, #0
 8005380:	d009      	beq.n	8005396 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005382:	4b6c      	ldr	r3, [pc, #432]	@ (8005534 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	091b      	lsrs	r3, r3, #4
 8005388:	f003 0307 	and.w	r3, r3, #7
 800538c:	1c5a      	adds	r2, r3, #1
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	685b      	ldr	r3, [r3, #4]
       ||
 8005392:	429a      	cmp	r2, r3
 8005394:	d047      	beq.n	8005426 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	73fb      	strb	r3, [r7, #15]
 800539a:	e044      	b.n	8005426 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2b03      	cmp	r3, #3
 80053a2:	d018      	beq.n	80053d6 <RCCEx_PLLSAI1_Config+0x86>
 80053a4:	2b03      	cmp	r3, #3
 80053a6:	d825      	bhi.n	80053f4 <RCCEx_PLLSAI1_Config+0xa4>
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d002      	beq.n	80053b2 <RCCEx_PLLSAI1_Config+0x62>
 80053ac:	2b02      	cmp	r3, #2
 80053ae:	d009      	beq.n	80053c4 <RCCEx_PLLSAI1_Config+0x74>
 80053b0:	e020      	b.n	80053f4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80053b2:	4b60      	ldr	r3, [pc, #384]	@ (8005534 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 0302 	and.w	r3, r3, #2
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d11d      	bne.n	80053fa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053c2:	e01a      	b.n	80053fa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80053c4:	4b5b      	ldr	r3, [pc, #364]	@ (8005534 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d116      	bne.n	80053fe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053d4:	e013      	b.n	80053fe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80053d6:	4b57      	ldr	r3, [pc, #348]	@ (8005534 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d10f      	bne.n	8005402 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80053e2:	4b54      	ldr	r3, [pc, #336]	@ (8005534 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d109      	bne.n	8005402 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80053f2:	e006      	b.n	8005402 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	73fb      	strb	r3, [r7, #15]
      break;
 80053f8:	e004      	b.n	8005404 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80053fa:	bf00      	nop
 80053fc:	e002      	b.n	8005404 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80053fe:	bf00      	nop
 8005400:	e000      	b.n	8005404 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005402:	bf00      	nop
    }

    if(status == HAL_OK)
 8005404:	7bfb      	ldrb	r3, [r7, #15]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d10d      	bne.n	8005426 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800540a:	4b4a      	ldr	r3, [pc, #296]	@ (8005534 <RCCEx_PLLSAI1_Config+0x1e4>)
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6819      	ldr	r1, [r3, #0]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	3b01      	subs	r3, #1
 800541c:	011b      	lsls	r3, r3, #4
 800541e:	430b      	orrs	r3, r1
 8005420:	4944      	ldr	r1, [pc, #272]	@ (8005534 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005422:	4313      	orrs	r3, r2
 8005424:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005426:	7bfb      	ldrb	r3, [r7, #15]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d17d      	bne.n	8005528 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800542c:	4b41      	ldr	r3, [pc, #260]	@ (8005534 <RCCEx_PLLSAI1_Config+0x1e4>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a40      	ldr	r2, [pc, #256]	@ (8005534 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005432:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005436:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005438:	f7fd fd14 	bl	8002e64 <HAL_GetTick>
 800543c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800543e:	e009      	b.n	8005454 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005440:	f7fd fd10 	bl	8002e64 <HAL_GetTick>
 8005444:	4602      	mov	r2, r0
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	2b02      	cmp	r3, #2
 800544c:	d902      	bls.n	8005454 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	73fb      	strb	r3, [r7, #15]
        break;
 8005452:	e005      	b.n	8005460 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005454:	4b37      	ldr	r3, [pc, #220]	@ (8005534 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800545c:	2b00      	cmp	r3, #0
 800545e:	d1ef      	bne.n	8005440 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005460:	7bfb      	ldrb	r3, [r7, #15]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d160      	bne.n	8005528 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d111      	bne.n	8005490 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800546c:	4b31      	ldr	r3, [pc, #196]	@ (8005534 <RCCEx_PLLSAI1_Config+0x1e4>)
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005474:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	6892      	ldr	r2, [r2, #8]
 800547c:	0211      	lsls	r1, r2, #8
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	68d2      	ldr	r2, [r2, #12]
 8005482:	0912      	lsrs	r2, r2, #4
 8005484:	0452      	lsls	r2, r2, #17
 8005486:	430a      	orrs	r2, r1
 8005488:	492a      	ldr	r1, [pc, #168]	@ (8005534 <RCCEx_PLLSAI1_Config+0x1e4>)
 800548a:	4313      	orrs	r3, r2
 800548c:	610b      	str	r3, [r1, #16]
 800548e:	e027      	b.n	80054e0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	2b01      	cmp	r3, #1
 8005494:	d112      	bne.n	80054bc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005496:	4b27      	ldr	r3, [pc, #156]	@ (8005534 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800549e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	6892      	ldr	r2, [r2, #8]
 80054a6:	0211      	lsls	r1, r2, #8
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	6912      	ldr	r2, [r2, #16]
 80054ac:	0852      	lsrs	r2, r2, #1
 80054ae:	3a01      	subs	r2, #1
 80054b0:	0552      	lsls	r2, r2, #21
 80054b2:	430a      	orrs	r2, r1
 80054b4:	491f      	ldr	r1, [pc, #124]	@ (8005534 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	610b      	str	r3, [r1, #16]
 80054ba:	e011      	b.n	80054e0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80054bc:	4b1d      	ldr	r3, [pc, #116]	@ (8005534 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80054c4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	6892      	ldr	r2, [r2, #8]
 80054cc:	0211      	lsls	r1, r2, #8
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	6952      	ldr	r2, [r2, #20]
 80054d2:	0852      	lsrs	r2, r2, #1
 80054d4:	3a01      	subs	r2, #1
 80054d6:	0652      	lsls	r2, r2, #25
 80054d8:	430a      	orrs	r2, r1
 80054da:	4916      	ldr	r1, [pc, #88]	@ (8005534 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054dc:	4313      	orrs	r3, r2
 80054de:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80054e0:	4b14      	ldr	r3, [pc, #80]	@ (8005534 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a13      	ldr	r2, [pc, #76]	@ (8005534 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054e6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80054ea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054ec:	f7fd fcba 	bl	8002e64 <HAL_GetTick>
 80054f0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80054f2:	e009      	b.n	8005508 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80054f4:	f7fd fcb6 	bl	8002e64 <HAL_GetTick>
 80054f8:	4602      	mov	r2, r0
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	2b02      	cmp	r3, #2
 8005500:	d902      	bls.n	8005508 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005502:	2303      	movs	r3, #3
 8005504:	73fb      	strb	r3, [r7, #15]
          break;
 8005506:	e005      	b.n	8005514 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005508:	4b0a      	ldr	r3, [pc, #40]	@ (8005534 <RCCEx_PLLSAI1_Config+0x1e4>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005510:	2b00      	cmp	r3, #0
 8005512:	d0ef      	beq.n	80054f4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005514:	7bfb      	ldrb	r3, [r7, #15]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d106      	bne.n	8005528 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800551a:	4b06      	ldr	r3, [pc, #24]	@ (8005534 <RCCEx_PLLSAI1_Config+0x1e4>)
 800551c:	691a      	ldr	r2, [r3, #16]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	699b      	ldr	r3, [r3, #24]
 8005522:	4904      	ldr	r1, [pc, #16]	@ (8005534 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005524:	4313      	orrs	r3, r2
 8005526:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005528:	7bfb      	ldrb	r3, [r7, #15]
}
 800552a:	4618      	mov	r0, r3
 800552c:	3710      	adds	r7, #16
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	40021000 	.word	0x40021000

08005538 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005542:	2300      	movs	r3, #0
 8005544:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005546:	4b6a      	ldr	r3, [pc, #424]	@ (80056f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	f003 0303 	and.w	r3, r3, #3
 800554e:	2b00      	cmp	r3, #0
 8005550:	d018      	beq.n	8005584 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005552:	4b67      	ldr	r3, [pc, #412]	@ (80056f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	f003 0203 	and.w	r2, r3, #3
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	429a      	cmp	r2, r3
 8005560:	d10d      	bne.n	800557e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
       ||
 8005566:	2b00      	cmp	r3, #0
 8005568:	d009      	beq.n	800557e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800556a:	4b61      	ldr	r3, [pc, #388]	@ (80056f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	091b      	lsrs	r3, r3, #4
 8005570:	f003 0307 	and.w	r3, r3, #7
 8005574:	1c5a      	adds	r2, r3, #1
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	685b      	ldr	r3, [r3, #4]
       ||
 800557a:	429a      	cmp	r2, r3
 800557c:	d047      	beq.n	800560e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	73fb      	strb	r3, [r7, #15]
 8005582:	e044      	b.n	800560e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	2b03      	cmp	r3, #3
 800558a:	d018      	beq.n	80055be <RCCEx_PLLSAI2_Config+0x86>
 800558c:	2b03      	cmp	r3, #3
 800558e:	d825      	bhi.n	80055dc <RCCEx_PLLSAI2_Config+0xa4>
 8005590:	2b01      	cmp	r3, #1
 8005592:	d002      	beq.n	800559a <RCCEx_PLLSAI2_Config+0x62>
 8005594:	2b02      	cmp	r3, #2
 8005596:	d009      	beq.n	80055ac <RCCEx_PLLSAI2_Config+0x74>
 8005598:	e020      	b.n	80055dc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800559a:	4b55      	ldr	r3, [pc, #340]	@ (80056f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 0302 	and.w	r3, r3, #2
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d11d      	bne.n	80055e2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055aa:	e01a      	b.n	80055e2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80055ac:	4b50      	ldr	r3, [pc, #320]	@ (80056f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d116      	bne.n	80055e6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055bc:	e013      	b.n	80055e6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80055be:	4b4c      	ldr	r3, [pc, #304]	@ (80056f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d10f      	bne.n	80055ea <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80055ca:	4b49      	ldr	r3, [pc, #292]	@ (80056f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d109      	bne.n	80055ea <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80055da:	e006      	b.n	80055ea <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	73fb      	strb	r3, [r7, #15]
      break;
 80055e0:	e004      	b.n	80055ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80055e2:	bf00      	nop
 80055e4:	e002      	b.n	80055ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80055e6:	bf00      	nop
 80055e8:	e000      	b.n	80055ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80055ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80055ec:	7bfb      	ldrb	r3, [r7, #15]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d10d      	bne.n	800560e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80055f2:	4b3f      	ldr	r3, [pc, #252]	@ (80056f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6819      	ldr	r1, [r3, #0]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	3b01      	subs	r3, #1
 8005604:	011b      	lsls	r3, r3, #4
 8005606:	430b      	orrs	r3, r1
 8005608:	4939      	ldr	r1, [pc, #228]	@ (80056f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800560a:	4313      	orrs	r3, r2
 800560c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800560e:	7bfb      	ldrb	r3, [r7, #15]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d167      	bne.n	80056e4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005614:	4b36      	ldr	r3, [pc, #216]	@ (80056f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a35      	ldr	r2, [pc, #212]	@ (80056f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800561a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800561e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005620:	f7fd fc20 	bl	8002e64 <HAL_GetTick>
 8005624:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005626:	e009      	b.n	800563c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005628:	f7fd fc1c 	bl	8002e64 <HAL_GetTick>
 800562c:	4602      	mov	r2, r0
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	2b02      	cmp	r3, #2
 8005634:	d902      	bls.n	800563c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005636:	2303      	movs	r3, #3
 8005638:	73fb      	strb	r3, [r7, #15]
        break;
 800563a:	e005      	b.n	8005648 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800563c:	4b2c      	ldr	r3, [pc, #176]	@ (80056f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005644:	2b00      	cmp	r3, #0
 8005646:	d1ef      	bne.n	8005628 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005648:	7bfb      	ldrb	r3, [r7, #15]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d14a      	bne.n	80056e4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d111      	bne.n	8005678 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005654:	4b26      	ldr	r3, [pc, #152]	@ (80056f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005656:	695b      	ldr	r3, [r3, #20]
 8005658:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800565c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	6892      	ldr	r2, [r2, #8]
 8005664:	0211      	lsls	r1, r2, #8
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	68d2      	ldr	r2, [r2, #12]
 800566a:	0912      	lsrs	r2, r2, #4
 800566c:	0452      	lsls	r2, r2, #17
 800566e:	430a      	orrs	r2, r1
 8005670:	491f      	ldr	r1, [pc, #124]	@ (80056f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005672:	4313      	orrs	r3, r2
 8005674:	614b      	str	r3, [r1, #20]
 8005676:	e011      	b.n	800569c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005678:	4b1d      	ldr	r3, [pc, #116]	@ (80056f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800567a:	695b      	ldr	r3, [r3, #20]
 800567c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005680:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	6892      	ldr	r2, [r2, #8]
 8005688:	0211      	lsls	r1, r2, #8
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	6912      	ldr	r2, [r2, #16]
 800568e:	0852      	lsrs	r2, r2, #1
 8005690:	3a01      	subs	r2, #1
 8005692:	0652      	lsls	r2, r2, #25
 8005694:	430a      	orrs	r2, r1
 8005696:	4916      	ldr	r1, [pc, #88]	@ (80056f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005698:	4313      	orrs	r3, r2
 800569a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800569c:	4b14      	ldr	r3, [pc, #80]	@ (80056f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a13      	ldr	r2, [pc, #76]	@ (80056f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056a8:	f7fd fbdc 	bl	8002e64 <HAL_GetTick>
 80056ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80056ae:	e009      	b.n	80056c4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80056b0:	f7fd fbd8 	bl	8002e64 <HAL_GetTick>
 80056b4:	4602      	mov	r2, r0
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	2b02      	cmp	r3, #2
 80056bc:	d902      	bls.n	80056c4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80056be:	2303      	movs	r3, #3
 80056c0:	73fb      	strb	r3, [r7, #15]
          break;
 80056c2:	e005      	b.n	80056d0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80056c4:	4b0a      	ldr	r3, [pc, #40]	@ (80056f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d0ef      	beq.n	80056b0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80056d0:	7bfb      	ldrb	r3, [r7, #15]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d106      	bne.n	80056e4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80056d6:	4b06      	ldr	r3, [pc, #24]	@ (80056f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056d8:	695a      	ldr	r2, [r3, #20]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	4904      	ldr	r1, [pc, #16]	@ (80056f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056e0:	4313      	orrs	r3, r2
 80056e2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80056e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3710      	adds	r7, #16
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	40021000 	.word	0x40021000

080056f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b082      	sub	sp, #8
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d101      	bne.n	8005706 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e049      	b.n	800579a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800570c:	b2db      	uxtb	r3, r3
 800570e:	2b00      	cmp	r3, #0
 8005710:	d106      	bne.n	8005720 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f7fd f856 	bl	80027cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2202      	movs	r2, #2
 8005724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	3304      	adds	r3, #4
 8005730:	4619      	mov	r1, r3
 8005732:	4610      	mov	r0, r2
 8005734:	f000 ff78 	bl	8006628 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	3708      	adds	r7, #8
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}

080057a2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80057a2:	b580      	push	{r7, lr}
 80057a4:	b082      	sub	sp, #8
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d101      	bne.n	80057b4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	e049      	b.n	8005848 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d106      	bne.n	80057ce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f000 f841 	bl	8005850 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2202      	movs	r2, #2
 80057d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	3304      	adds	r3, #4
 80057de:	4619      	mov	r1, r3
 80057e0:	4610      	mov	r0, r2
 80057e2:	f000 ff21 	bl	8006628 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2201      	movs	r2, #1
 80057ea:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2201      	movs	r2, #1
 80057f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2201      	movs	r2, #1
 80057fa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2201      	movs	r2, #1
 8005802:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2201      	movs	r2, #1
 800580a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2201      	movs	r2, #1
 8005812:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2201      	movs	r2, #1
 800581a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2201      	movs	r2, #1
 8005822:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2201      	movs	r2, #1
 800582a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2201      	movs	r2, #1
 8005832:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2201      	movs	r2, #1
 800583a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2201      	movs	r2, #1
 8005842:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005846:	2300      	movs	r3, #0
}
 8005848:	4618      	mov	r0, r3
 800584a:	3708      	adds	r7, #8
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005858:	bf00      	nop
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b084      	sub	sp, #16
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d109      	bne.n	8005888 <HAL_TIM_PWM_Start+0x24>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800587a:	b2db      	uxtb	r3, r3
 800587c:	2b01      	cmp	r3, #1
 800587e:	bf14      	ite	ne
 8005880:	2301      	movne	r3, #1
 8005882:	2300      	moveq	r3, #0
 8005884:	b2db      	uxtb	r3, r3
 8005886:	e03c      	b.n	8005902 <HAL_TIM_PWM_Start+0x9e>
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	2b04      	cmp	r3, #4
 800588c:	d109      	bne.n	80058a2 <HAL_TIM_PWM_Start+0x3e>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005894:	b2db      	uxtb	r3, r3
 8005896:	2b01      	cmp	r3, #1
 8005898:	bf14      	ite	ne
 800589a:	2301      	movne	r3, #1
 800589c:	2300      	moveq	r3, #0
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	e02f      	b.n	8005902 <HAL_TIM_PWM_Start+0x9e>
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	2b08      	cmp	r3, #8
 80058a6:	d109      	bne.n	80058bc <HAL_TIM_PWM_Start+0x58>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	bf14      	ite	ne
 80058b4:	2301      	movne	r3, #1
 80058b6:	2300      	moveq	r3, #0
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	e022      	b.n	8005902 <HAL_TIM_PWM_Start+0x9e>
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	2b0c      	cmp	r3, #12
 80058c0:	d109      	bne.n	80058d6 <HAL_TIM_PWM_Start+0x72>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	bf14      	ite	ne
 80058ce:	2301      	movne	r3, #1
 80058d0:	2300      	moveq	r3, #0
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	e015      	b.n	8005902 <HAL_TIM_PWM_Start+0x9e>
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	2b10      	cmp	r3, #16
 80058da:	d109      	bne.n	80058f0 <HAL_TIM_PWM_Start+0x8c>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	bf14      	ite	ne
 80058e8:	2301      	movne	r3, #1
 80058ea:	2300      	moveq	r3, #0
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	e008      	b.n	8005902 <HAL_TIM_PWM_Start+0x9e>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	bf14      	ite	ne
 80058fc:	2301      	movne	r3, #1
 80058fe:	2300      	moveq	r3, #0
 8005900:	b2db      	uxtb	r3, r3
 8005902:	2b00      	cmp	r3, #0
 8005904:	d001      	beq.n	800590a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e09c      	b.n	8005a44 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d104      	bne.n	800591a <HAL_TIM_PWM_Start+0xb6>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2202      	movs	r2, #2
 8005914:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005918:	e023      	b.n	8005962 <HAL_TIM_PWM_Start+0xfe>
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	2b04      	cmp	r3, #4
 800591e:	d104      	bne.n	800592a <HAL_TIM_PWM_Start+0xc6>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2202      	movs	r2, #2
 8005924:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005928:	e01b      	b.n	8005962 <HAL_TIM_PWM_Start+0xfe>
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	2b08      	cmp	r3, #8
 800592e:	d104      	bne.n	800593a <HAL_TIM_PWM_Start+0xd6>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2202      	movs	r2, #2
 8005934:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005938:	e013      	b.n	8005962 <HAL_TIM_PWM_Start+0xfe>
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	2b0c      	cmp	r3, #12
 800593e:	d104      	bne.n	800594a <HAL_TIM_PWM_Start+0xe6>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2202      	movs	r2, #2
 8005944:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005948:	e00b      	b.n	8005962 <HAL_TIM_PWM_Start+0xfe>
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	2b10      	cmp	r3, #16
 800594e:	d104      	bne.n	800595a <HAL_TIM_PWM_Start+0xf6>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2202      	movs	r2, #2
 8005954:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005958:	e003      	b.n	8005962 <HAL_TIM_PWM_Start+0xfe>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2202      	movs	r2, #2
 800595e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2201      	movs	r2, #1
 8005968:	6839      	ldr	r1, [r7, #0]
 800596a:	4618      	mov	r0, r3
 800596c:	f001 fc2a 	bl	80071c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a35      	ldr	r2, [pc, #212]	@ (8005a4c <HAL_TIM_PWM_Start+0x1e8>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d013      	beq.n	80059a2 <HAL_TIM_PWM_Start+0x13e>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a34      	ldr	r2, [pc, #208]	@ (8005a50 <HAL_TIM_PWM_Start+0x1ec>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d00e      	beq.n	80059a2 <HAL_TIM_PWM_Start+0x13e>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a32      	ldr	r2, [pc, #200]	@ (8005a54 <HAL_TIM_PWM_Start+0x1f0>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d009      	beq.n	80059a2 <HAL_TIM_PWM_Start+0x13e>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a31      	ldr	r2, [pc, #196]	@ (8005a58 <HAL_TIM_PWM_Start+0x1f4>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d004      	beq.n	80059a2 <HAL_TIM_PWM_Start+0x13e>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a2f      	ldr	r2, [pc, #188]	@ (8005a5c <HAL_TIM_PWM_Start+0x1f8>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d101      	bne.n	80059a6 <HAL_TIM_PWM_Start+0x142>
 80059a2:	2301      	movs	r3, #1
 80059a4:	e000      	b.n	80059a8 <HAL_TIM_PWM_Start+0x144>
 80059a6:	2300      	movs	r3, #0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d007      	beq.n	80059bc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80059ba:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a22      	ldr	r2, [pc, #136]	@ (8005a4c <HAL_TIM_PWM_Start+0x1e8>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d01d      	beq.n	8005a02 <HAL_TIM_PWM_Start+0x19e>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059ce:	d018      	beq.n	8005a02 <HAL_TIM_PWM_Start+0x19e>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a22      	ldr	r2, [pc, #136]	@ (8005a60 <HAL_TIM_PWM_Start+0x1fc>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d013      	beq.n	8005a02 <HAL_TIM_PWM_Start+0x19e>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a21      	ldr	r2, [pc, #132]	@ (8005a64 <HAL_TIM_PWM_Start+0x200>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d00e      	beq.n	8005a02 <HAL_TIM_PWM_Start+0x19e>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a1f      	ldr	r2, [pc, #124]	@ (8005a68 <HAL_TIM_PWM_Start+0x204>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d009      	beq.n	8005a02 <HAL_TIM_PWM_Start+0x19e>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a17      	ldr	r2, [pc, #92]	@ (8005a50 <HAL_TIM_PWM_Start+0x1ec>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d004      	beq.n	8005a02 <HAL_TIM_PWM_Start+0x19e>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a15      	ldr	r2, [pc, #84]	@ (8005a54 <HAL_TIM_PWM_Start+0x1f0>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d115      	bne.n	8005a2e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	689a      	ldr	r2, [r3, #8]
 8005a08:	4b18      	ldr	r3, [pc, #96]	@ (8005a6c <HAL_TIM_PWM_Start+0x208>)
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2b06      	cmp	r3, #6
 8005a12:	d015      	beq.n	8005a40 <HAL_TIM_PWM_Start+0x1dc>
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a1a:	d011      	beq.n	8005a40 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f042 0201 	orr.w	r2, r2, #1
 8005a2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a2c:	e008      	b.n	8005a40 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f042 0201 	orr.w	r2, r2, #1
 8005a3c:	601a      	str	r2, [r3, #0]
 8005a3e:	e000      	b.n	8005a42 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a40:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a42:	2300      	movs	r3, #0
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3710      	adds	r7, #16
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}
 8005a4c:	40012c00 	.word	0x40012c00
 8005a50:	40013400 	.word	0x40013400
 8005a54:	40014000 	.word	0x40014000
 8005a58:	40014400 	.word	0x40014400
 8005a5c:	40014800 	.word	0x40014800
 8005a60:	40000400 	.word	0x40000400
 8005a64:	40000800 	.word	0x40000800
 8005a68:	40000c00 	.word	0x40000c00
 8005a6c:	00010007 	.word	0x00010007

08005a70 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b082      	sub	sp, #8
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d101      	bne.n	8005a82 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e049      	b.n	8005b16 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d106      	bne.n	8005a9c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 f841 	bl	8005b1e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2202      	movs	r2, #2
 8005aa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	3304      	adds	r3, #4
 8005aac:	4619      	mov	r1, r3
 8005aae:	4610      	mov	r0, r2
 8005ab0:	f000 fdba 	bl	8006628 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3708      	adds	r7, #8
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}

08005b1e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005b1e:	b480      	push	{r7}
 8005b20:	b083      	sub	sp, #12
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005b26:	bf00      	nop
 8005b28:	370c      	adds	r7, #12
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr
	...

08005b34 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d104      	bne.n	8005b52 <HAL_TIM_IC_Start_IT+0x1e>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	e023      	b.n	8005b9a <HAL_TIM_IC_Start_IT+0x66>
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	2b04      	cmp	r3, #4
 8005b56:	d104      	bne.n	8005b62 <HAL_TIM_IC_Start_IT+0x2e>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	e01b      	b.n	8005b9a <HAL_TIM_IC_Start_IT+0x66>
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	2b08      	cmp	r3, #8
 8005b66:	d104      	bne.n	8005b72 <HAL_TIM_IC_Start_IT+0x3e>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	e013      	b.n	8005b9a <HAL_TIM_IC_Start_IT+0x66>
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	2b0c      	cmp	r3, #12
 8005b76:	d104      	bne.n	8005b82 <HAL_TIM_IC_Start_IT+0x4e>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	e00b      	b.n	8005b9a <HAL_TIM_IC_Start_IT+0x66>
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	2b10      	cmp	r3, #16
 8005b86:	d104      	bne.n	8005b92 <HAL_TIM_IC_Start_IT+0x5e>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	e003      	b.n	8005b9a <HAL_TIM_IC_Start_IT+0x66>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d104      	bne.n	8005bac <HAL_TIM_IC_Start_IT+0x78>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	e013      	b.n	8005bd4 <HAL_TIM_IC_Start_IT+0xa0>
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	2b04      	cmp	r3, #4
 8005bb0:	d104      	bne.n	8005bbc <HAL_TIM_IC_Start_IT+0x88>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	e00b      	b.n	8005bd4 <HAL_TIM_IC_Start_IT+0xa0>
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	2b08      	cmp	r3, #8
 8005bc0:	d104      	bne.n	8005bcc <HAL_TIM_IC_Start_IT+0x98>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	e003      	b.n	8005bd4 <HAL_TIM_IC_Start_IT+0xa0>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005bd6:	7bbb      	ldrb	r3, [r7, #14]
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d102      	bne.n	8005be2 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005bdc:	7b7b      	ldrb	r3, [r7, #13]
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d001      	beq.n	8005be6 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e0dd      	b.n	8005da2 <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d104      	bne.n	8005bf6 <HAL_TIM_IC_Start_IT+0xc2>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2202      	movs	r2, #2
 8005bf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005bf4:	e023      	b.n	8005c3e <HAL_TIM_IC_Start_IT+0x10a>
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	2b04      	cmp	r3, #4
 8005bfa:	d104      	bne.n	8005c06 <HAL_TIM_IC_Start_IT+0xd2>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2202      	movs	r2, #2
 8005c00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c04:	e01b      	b.n	8005c3e <HAL_TIM_IC_Start_IT+0x10a>
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	2b08      	cmp	r3, #8
 8005c0a:	d104      	bne.n	8005c16 <HAL_TIM_IC_Start_IT+0xe2>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2202      	movs	r2, #2
 8005c10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c14:	e013      	b.n	8005c3e <HAL_TIM_IC_Start_IT+0x10a>
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	2b0c      	cmp	r3, #12
 8005c1a:	d104      	bne.n	8005c26 <HAL_TIM_IC_Start_IT+0xf2>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2202      	movs	r2, #2
 8005c20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005c24:	e00b      	b.n	8005c3e <HAL_TIM_IC_Start_IT+0x10a>
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	2b10      	cmp	r3, #16
 8005c2a:	d104      	bne.n	8005c36 <HAL_TIM_IC_Start_IT+0x102>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2202      	movs	r2, #2
 8005c30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c34:	e003      	b.n	8005c3e <HAL_TIM_IC_Start_IT+0x10a>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2202      	movs	r2, #2
 8005c3a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d104      	bne.n	8005c4e <HAL_TIM_IC_Start_IT+0x11a>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2202      	movs	r2, #2
 8005c48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c4c:	e013      	b.n	8005c76 <HAL_TIM_IC_Start_IT+0x142>
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	2b04      	cmp	r3, #4
 8005c52:	d104      	bne.n	8005c5e <HAL_TIM_IC_Start_IT+0x12a>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2202      	movs	r2, #2
 8005c58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c5c:	e00b      	b.n	8005c76 <HAL_TIM_IC_Start_IT+0x142>
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	2b08      	cmp	r3, #8
 8005c62:	d104      	bne.n	8005c6e <HAL_TIM_IC_Start_IT+0x13a>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2202      	movs	r2, #2
 8005c68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005c6c:	e003      	b.n	8005c76 <HAL_TIM_IC_Start_IT+0x142>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2202      	movs	r2, #2
 8005c72:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	2b0c      	cmp	r3, #12
 8005c7a:	d841      	bhi.n	8005d00 <HAL_TIM_IC_Start_IT+0x1cc>
 8005c7c:	a201      	add	r2, pc, #4	@ (adr r2, 8005c84 <HAL_TIM_IC_Start_IT+0x150>)
 8005c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c82:	bf00      	nop
 8005c84:	08005cb9 	.word	0x08005cb9
 8005c88:	08005d01 	.word	0x08005d01
 8005c8c:	08005d01 	.word	0x08005d01
 8005c90:	08005d01 	.word	0x08005d01
 8005c94:	08005ccb 	.word	0x08005ccb
 8005c98:	08005d01 	.word	0x08005d01
 8005c9c:	08005d01 	.word	0x08005d01
 8005ca0:	08005d01 	.word	0x08005d01
 8005ca4:	08005cdd 	.word	0x08005cdd
 8005ca8:	08005d01 	.word	0x08005d01
 8005cac:	08005d01 	.word	0x08005d01
 8005cb0:	08005d01 	.word	0x08005d01
 8005cb4:	08005cef 	.word	0x08005cef
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	68da      	ldr	r2, [r3, #12]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f042 0202 	orr.w	r2, r2, #2
 8005cc6:	60da      	str	r2, [r3, #12]
      break;
 8005cc8:	e01d      	b.n	8005d06 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	68da      	ldr	r2, [r3, #12]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f042 0204 	orr.w	r2, r2, #4
 8005cd8:	60da      	str	r2, [r3, #12]
      break;
 8005cda:	e014      	b.n	8005d06 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	68da      	ldr	r2, [r3, #12]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f042 0208 	orr.w	r2, r2, #8
 8005cea:	60da      	str	r2, [r3, #12]
      break;
 8005cec:	e00b      	b.n	8005d06 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	68da      	ldr	r2, [r3, #12]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f042 0210 	orr.w	r2, r2, #16
 8005cfc:	60da      	str	r2, [r3, #12]
      break;
 8005cfe:	e002      	b.n	8005d06 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	73fb      	strb	r3, [r7, #15]
      break;
 8005d04:	bf00      	nop
  }

  if (status == HAL_OK)
 8005d06:	7bfb      	ldrb	r3, [r7, #15]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d149      	bne.n	8005da0 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2201      	movs	r2, #1
 8005d12:	6839      	ldr	r1, [r7, #0]
 8005d14:	4618      	mov	r0, r3
 8005d16:	f001 fa55 	bl	80071c4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a23      	ldr	r2, [pc, #140]	@ (8005dac <HAL_TIM_IC_Start_IT+0x278>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d01d      	beq.n	8005d60 <HAL_TIM_IC_Start_IT+0x22c>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d2c:	d018      	beq.n	8005d60 <HAL_TIM_IC_Start_IT+0x22c>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a1f      	ldr	r2, [pc, #124]	@ (8005db0 <HAL_TIM_IC_Start_IT+0x27c>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d013      	beq.n	8005d60 <HAL_TIM_IC_Start_IT+0x22c>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a1d      	ldr	r2, [pc, #116]	@ (8005db4 <HAL_TIM_IC_Start_IT+0x280>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d00e      	beq.n	8005d60 <HAL_TIM_IC_Start_IT+0x22c>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a1c      	ldr	r2, [pc, #112]	@ (8005db8 <HAL_TIM_IC_Start_IT+0x284>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d009      	beq.n	8005d60 <HAL_TIM_IC_Start_IT+0x22c>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a1a      	ldr	r2, [pc, #104]	@ (8005dbc <HAL_TIM_IC_Start_IT+0x288>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d004      	beq.n	8005d60 <HAL_TIM_IC_Start_IT+0x22c>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a19      	ldr	r2, [pc, #100]	@ (8005dc0 <HAL_TIM_IC_Start_IT+0x28c>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d115      	bne.n	8005d8c <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	689a      	ldr	r2, [r3, #8]
 8005d66:	4b17      	ldr	r3, [pc, #92]	@ (8005dc4 <HAL_TIM_IC_Start_IT+0x290>)
 8005d68:	4013      	ands	r3, r2
 8005d6a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	2b06      	cmp	r3, #6
 8005d70:	d015      	beq.n	8005d9e <HAL_TIM_IC_Start_IT+0x26a>
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d78:	d011      	beq.n	8005d9e <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f042 0201 	orr.w	r2, r2, #1
 8005d88:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d8a:	e008      	b.n	8005d9e <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f042 0201 	orr.w	r2, r2, #1
 8005d9a:	601a      	str	r2, [r3, #0]
 8005d9c:	e000      	b.n	8005da0 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d9e:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8005da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3710      	adds	r7, #16
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	40012c00 	.word	0x40012c00
 8005db0:	40000400 	.word	0x40000400
 8005db4:	40000800 	.word	0x40000800
 8005db8:	40000c00 	.word	0x40000c00
 8005dbc:	40013400 	.word	0x40013400
 8005dc0:	40014000 	.word	0x40014000
 8005dc4:	00010007 	.word	0x00010007

08005dc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b084      	sub	sp, #16
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	691b      	ldr	r3, [r3, #16]
 8005dde:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	f003 0302 	and.w	r3, r3, #2
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d020      	beq.n	8005e2c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f003 0302 	and.w	r3, r3, #2
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d01b      	beq.n	8005e2c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f06f 0202 	mvn.w	r2, #2
 8005dfc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2201      	movs	r2, #1
 8005e02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	699b      	ldr	r3, [r3, #24]
 8005e0a:	f003 0303 	and.w	r3, r3, #3
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d003      	beq.n	8005e1a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f7fc fbc8 	bl	80025a8 <HAL_TIM_IC_CaptureCallback>
 8005e18:	e005      	b.n	8005e26 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f000 fbe6 	bl	80065ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f000 fbed 	bl	8006600 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	f003 0304 	and.w	r3, r3, #4
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d020      	beq.n	8005e78 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f003 0304 	and.w	r3, r3, #4
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d01b      	beq.n	8005e78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f06f 0204 	mvn.w	r2, #4
 8005e48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2202      	movs	r2, #2
 8005e4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	699b      	ldr	r3, [r3, #24]
 8005e56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d003      	beq.n	8005e66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f7fc fba2 	bl	80025a8 <HAL_TIM_IC_CaptureCallback>
 8005e64:	e005      	b.n	8005e72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f000 fbc0 	bl	80065ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f000 fbc7 	bl	8006600 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	f003 0308 	and.w	r3, r3, #8
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d020      	beq.n	8005ec4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	f003 0308 	and.w	r3, r3, #8
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d01b      	beq.n	8005ec4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f06f 0208 	mvn.w	r2, #8
 8005e94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2204      	movs	r2, #4
 8005e9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	69db      	ldr	r3, [r3, #28]
 8005ea2:	f003 0303 	and.w	r3, r3, #3
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d003      	beq.n	8005eb2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f7fc fb7c 	bl	80025a8 <HAL_TIM_IC_CaptureCallback>
 8005eb0:	e005      	b.n	8005ebe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 fb9a 	bl	80065ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f000 fba1 	bl	8006600 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	f003 0310 	and.w	r3, r3, #16
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d020      	beq.n	8005f10 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f003 0310 	and.w	r3, r3, #16
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d01b      	beq.n	8005f10 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f06f 0210 	mvn.w	r2, #16
 8005ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2208      	movs	r2, #8
 8005ee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	69db      	ldr	r3, [r3, #28]
 8005eee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d003      	beq.n	8005efe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f7fc fb56 	bl	80025a8 <HAL_TIM_IC_CaptureCallback>
 8005efc:	e005      	b.n	8005f0a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 fb74 	bl	80065ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f000 fb7b 	bl	8006600 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	f003 0301 	and.w	r3, r3, #1
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d00c      	beq.n	8005f34 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f003 0301 	and.w	r3, r3, #1
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d007      	beq.n	8005f34 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f06f 0201 	mvn.w	r2, #1
 8005f2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 fb52 	bl	80065d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d104      	bne.n	8005f48 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d00c      	beq.n	8005f62 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d007      	beq.n	8005f62 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005f5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f001 fa67 	bl	8007430 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d00c      	beq.n	8005f86 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d007      	beq.n	8005f86 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005f7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f001 fa5f 	bl	8007444 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d00c      	beq.n	8005faa <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d007      	beq.n	8005faa <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005fa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f000 fb35 	bl	8006614 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	f003 0320 	and.w	r3, r3, #32
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d00c      	beq.n	8005fce <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f003 0320 	and.w	r3, r3, #32
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d007      	beq.n	8005fce <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f06f 0220 	mvn.w	r2, #32
 8005fc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f001 fa27 	bl	800741c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005fce:	bf00      	nop
 8005fd0:	3710      	adds	r7, #16
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}

08005fd6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005fd6:	b580      	push	{r7, lr}
 8005fd8:	b086      	sub	sp, #24
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	60f8      	str	r0, [r7, #12]
 8005fde:	60b9      	str	r1, [r7, #8]
 8005fe0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d101      	bne.n	8005ff4 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005ff0:	2302      	movs	r3, #2
 8005ff2:	e088      	b.n	8006106 <HAL_TIM_IC_ConfigChannel+0x130>
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d11b      	bne.n	800603a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8006012:	f000 ff19 	bl	8006e48 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	699a      	ldr	r2, [r3, #24]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f022 020c 	bic.w	r2, r2, #12
 8006024:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	6999      	ldr	r1, [r3, #24]
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	689a      	ldr	r2, [r3, #8]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	430a      	orrs	r2, r1
 8006036:	619a      	str	r2, [r3, #24]
 8006038:	e060      	b.n	80060fc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2b04      	cmp	r3, #4
 800603e:	d11c      	bne.n	800607a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8006050:	f000 ff97 	bl	8006f82 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	699a      	ldr	r2, [r3, #24]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006062:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	6999      	ldr	r1, [r3, #24]
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	021a      	lsls	r2, r3, #8
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	430a      	orrs	r2, r1
 8006076:	619a      	str	r2, [r3, #24]
 8006078:	e040      	b.n	80060fc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2b08      	cmp	r3, #8
 800607e:	d11b      	bne.n	80060b8 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8006090:	f000 ffe4 	bl	800705c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	69da      	ldr	r2, [r3, #28]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f022 020c 	bic.w	r2, r2, #12
 80060a2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	69d9      	ldr	r1, [r3, #28]
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	689a      	ldr	r2, [r3, #8]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	430a      	orrs	r2, r1
 80060b4:	61da      	str	r2, [r3, #28]
 80060b6:	e021      	b.n	80060fc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2b0c      	cmp	r3, #12
 80060bc:	d11c      	bne.n	80060f8 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80060ce:	f001 f801 	bl	80070d4 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	69da      	ldr	r2, [r3, #28]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80060e0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	69d9      	ldr	r1, [r3, #28]
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	021a      	lsls	r2, r3, #8
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	430a      	orrs	r2, r1
 80060f4:	61da      	str	r2, [r3, #28]
 80060f6:	e001      	b.n	80060fc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2200      	movs	r2, #0
 8006100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006104:	7dfb      	ldrb	r3, [r7, #23]
}
 8006106:	4618      	mov	r0, r3
 8006108:	3718      	adds	r7, #24
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
	...

08006110 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b086      	sub	sp, #24
 8006114:	af00      	add	r7, sp, #0
 8006116:	60f8      	str	r0, [r7, #12]
 8006118:	60b9      	str	r1, [r7, #8]
 800611a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800611c:	2300      	movs	r3, #0
 800611e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006126:	2b01      	cmp	r3, #1
 8006128:	d101      	bne.n	800612e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800612a:	2302      	movs	r3, #2
 800612c:	e0ff      	b.n	800632e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2201      	movs	r2, #1
 8006132:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2b14      	cmp	r3, #20
 800613a:	f200 80f0 	bhi.w	800631e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800613e:	a201      	add	r2, pc, #4	@ (adr r2, 8006144 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006144:	08006199 	.word	0x08006199
 8006148:	0800631f 	.word	0x0800631f
 800614c:	0800631f 	.word	0x0800631f
 8006150:	0800631f 	.word	0x0800631f
 8006154:	080061d9 	.word	0x080061d9
 8006158:	0800631f 	.word	0x0800631f
 800615c:	0800631f 	.word	0x0800631f
 8006160:	0800631f 	.word	0x0800631f
 8006164:	0800621b 	.word	0x0800621b
 8006168:	0800631f 	.word	0x0800631f
 800616c:	0800631f 	.word	0x0800631f
 8006170:	0800631f 	.word	0x0800631f
 8006174:	0800625b 	.word	0x0800625b
 8006178:	0800631f 	.word	0x0800631f
 800617c:	0800631f 	.word	0x0800631f
 8006180:	0800631f 	.word	0x0800631f
 8006184:	0800629d 	.word	0x0800629d
 8006188:	0800631f 	.word	0x0800631f
 800618c:	0800631f 	.word	0x0800631f
 8006190:	0800631f 	.word	0x0800631f
 8006194:	080062dd 	.word	0x080062dd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	68b9      	ldr	r1, [r7, #8]
 800619e:	4618      	mov	r0, r3
 80061a0:	f000 fae8 	bl	8006774 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	699a      	ldr	r2, [r3, #24]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f042 0208 	orr.w	r2, r2, #8
 80061b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	699a      	ldr	r2, [r3, #24]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f022 0204 	bic.w	r2, r2, #4
 80061c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	6999      	ldr	r1, [r3, #24]
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	691a      	ldr	r2, [r3, #16]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	430a      	orrs	r2, r1
 80061d4:	619a      	str	r2, [r3, #24]
      break;
 80061d6:	e0a5      	b.n	8006324 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	68b9      	ldr	r1, [r7, #8]
 80061de:	4618      	mov	r0, r3
 80061e0:	f000 fb58 	bl	8006894 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	699a      	ldr	r2, [r3, #24]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80061f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	699a      	ldr	r2, [r3, #24]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006202:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	6999      	ldr	r1, [r3, #24]
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	691b      	ldr	r3, [r3, #16]
 800620e:	021a      	lsls	r2, r3, #8
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	430a      	orrs	r2, r1
 8006216:	619a      	str	r2, [r3, #24]
      break;
 8006218:	e084      	b.n	8006324 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	68b9      	ldr	r1, [r7, #8]
 8006220:	4618      	mov	r0, r3
 8006222:	f000 fbc1 	bl	80069a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	69da      	ldr	r2, [r3, #28]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f042 0208 	orr.w	r2, r2, #8
 8006234:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	69da      	ldr	r2, [r3, #28]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f022 0204 	bic.w	r2, r2, #4
 8006244:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	69d9      	ldr	r1, [r3, #28]
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	691a      	ldr	r2, [r3, #16]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	430a      	orrs	r2, r1
 8006256:	61da      	str	r2, [r3, #28]
      break;
 8006258:	e064      	b.n	8006324 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	68b9      	ldr	r1, [r7, #8]
 8006260:	4618      	mov	r0, r3
 8006262:	f000 fc29 	bl	8006ab8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	69da      	ldr	r2, [r3, #28]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006274:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	69da      	ldr	r2, [r3, #28]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006284:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	69d9      	ldr	r1, [r3, #28]
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	691b      	ldr	r3, [r3, #16]
 8006290:	021a      	lsls	r2, r3, #8
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	430a      	orrs	r2, r1
 8006298:	61da      	str	r2, [r3, #28]
      break;
 800629a:	e043      	b.n	8006324 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	68b9      	ldr	r1, [r7, #8]
 80062a2:	4618      	mov	r0, r3
 80062a4:	f000 fc72 	bl	8006b8c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f042 0208 	orr.w	r2, r2, #8
 80062b6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f022 0204 	bic.w	r2, r2, #4
 80062c6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	691a      	ldr	r2, [r3, #16]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	430a      	orrs	r2, r1
 80062d8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80062da:	e023      	b.n	8006324 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	68b9      	ldr	r1, [r7, #8]
 80062e2:	4618      	mov	r0, r3
 80062e4:	f000 fcb6 	bl	8006c54 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80062f6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006306:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	021a      	lsls	r2, r3, #8
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	430a      	orrs	r2, r1
 800631a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800631c:	e002      	b.n	8006324 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	75fb      	strb	r3, [r7, #23]
      break;
 8006322:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2200      	movs	r2, #0
 8006328:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800632c:	7dfb      	ldrb	r3, [r7, #23]
}
 800632e:	4618      	mov	r0, r3
 8006330:	3718      	adds	r7, #24
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
 8006336:	bf00      	nop

08006338 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b084      	sub	sp, #16
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006342:	2300      	movs	r3, #0
 8006344:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800634c:	2b01      	cmp	r3, #1
 800634e:	d101      	bne.n	8006354 <HAL_TIM_ConfigClockSource+0x1c>
 8006350:	2302      	movs	r3, #2
 8006352:	e0b6      	b.n	80064c2 <HAL_TIM_ConfigClockSource+0x18a>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2202      	movs	r2, #2
 8006360:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006372:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006376:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800637e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	68ba      	ldr	r2, [r7, #8]
 8006386:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006390:	d03e      	beq.n	8006410 <HAL_TIM_ConfigClockSource+0xd8>
 8006392:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006396:	f200 8087 	bhi.w	80064a8 <HAL_TIM_ConfigClockSource+0x170>
 800639a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800639e:	f000 8086 	beq.w	80064ae <HAL_TIM_ConfigClockSource+0x176>
 80063a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063a6:	d87f      	bhi.n	80064a8 <HAL_TIM_ConfigClockSource+0x170>
 80063a8:	2b70      	cmp	r3, #112	@ 0x70
 80063aa:	d01a      	beq.n	80063e2 <HAL_TIM_ConfigClockSource+0xaa>
 80063ac:	2b70      	cmp	r3, #112	@ 0x70
 80063ae:	d87b      	bhi.n	80064a8 <HAL_TIM_ConfigClockSource+0x170>
 80063b0:	2b60      	cmp	r3, #96	@ 0x60
 80063b2:	d050      	beq.n	8006456 <HAL_TIM_ConfigClockSource+0x11e>
 80063b4:	2b60      	cmp	r3, #96	@ 0x60
 80063b6:	d877      	bhi.n	80064a8 <HAL_TIM_ConfigClockSource+0x170>
 80063b8:	2b50      	cmp	r3, #80	@ 0x50
 80063ba:	d03c      	beq.n	8006436 <HAL_TIM_ConfigClockSource+0xfe>
 80063bc:	2b50      	cmp	r3, #80	@ 0x50
 80063be:	d873      	bhi.n	80064a8 <HAL_TIM_ConfigClockSource+0x170>
 80063c0:	2b40      	cmp	r3, #64	@ 0x40
 80063c2:	d058      	beq.n	8006476 <HAL_TIM_ConfigClockSource+0x13e>
 80063c4:	2b40      	cmp	r3, #64	@ 0x40
 80063c6:	d86f      	bhi.n	80064a8 <HAL_TIM_ConfigClockSource+0x170>
 80063c8:	2b30      	cmp	r3, #48	@ 0x30
 80063ca:	d064      	beq.n	8006496 <HAL_TIM_ConfigClockSource+0x15e>
 80063cc:	2b30      	cmp	r3, #48	@ 0x30
 80063ce:	d86b      	bhi.n	80064a8 <HAL_TIM_ConfigClockSource+0x170>
 80063d0:	2b20      	cmp	r3, #32
 80063d2:	d060      	beq.n	8006496 <HAL_TIM_ConfigClockSource+0x15e>
 80063d4:	2b20      	cmp	r3, #32
 80063d6:	d867      	bhi.n	80064a8 <HAL_TIM_ConfigClockSource+0x170>
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d05c      	beq.n	8006496 <HAL_TIM_ConfigClockSource+0x15e>
 80063dc:	2b10      	cmp	r3, #16
 80063de:	d05a      	beq.n	8006496 <HAL_TIM_ConfigClockSource+0x15e>
 80063e0:	e062      	b.n	80064a8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80063f2:	f000 fec7 	bl	8007184 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006404:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	68ba      	ldr	r2, [r7, #8]
 800640c:	609a      	str	r2, [r3, #8]
      break;
 800640e:	e04f      	b.n	80064b0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006420:	f000 feb0 	bl	8007184 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	689a      	ldr	r2, [r3, #8]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006432:	609a      	str	r2, [r3, #8]
      break;
 8006434:	e03c      	b.n	80064b0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006442:	461a      	mov	r2, r3
 8006444:	f000 fd6e 	bl	8006f24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	2150      	movs	r1, #80	@ 0x50
 800644e:	4618      	mov	r0, r3
 8006450:	f000 fe7d 	bl	800714e <TIM_ITRx_SetConfig>
      break;
 8006454:	e02c      	b.n	80064b0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006462:	461a      	mov	r2, r3
 8006464:	f000 fdca 	bl	8006ffc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	2160      	movs	r1, #96	@ 0x60
 800646e:	4618      	mov	r0, r3
 8006470:	f000 fe6d 	bl	800714e <TIM_ITRx_SetConfig>
      break;
 8006474:	e01c      	b.n	80064b0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006482:	461a      	mov	r2, r3
 8006484:	f000 fd4e 	bl	8006f24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2140      	movs	r1, #64	@ 0x40
 800648e:	4618      	mov	r0, r3
 8006490:	f000 fe5d 	bl	800714e <TIM_ITRx_SetConfig>
      break;
 8006494:	e00c      	b.n	80064b0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4619      	mov	r1, r3
 80064a0:	4610      	mov	r0, r2
 80064a2:	f000 fe54 	bl	800714e <TIM_ITRx_SetConfig>
      break;
 80064a6:	e003      	b.n	80064b0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	73fb      	strb	r3, [r7, #15]
      break;
 80064ac:	e000      	b.n	80064b0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80064ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2201      	movs	r2, #1
 80064b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80064c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3710      	adds	r7, #16
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}

080064ca <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80064ca:	b580      	push	{r7, lr}
 80064cc:	b082      	sub	sp, #8
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	6078      	str	r0, [r7, #4]
 80064d2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d101      	bne.n	80064e2 <HAL_TIM_SlaveConfigSynchro+0x18>
 80064de:	2302      	movs	r3, #2
 80064e0:	e031      	b.n	8006546 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2201      	movs	r2, #1
 80064e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2202      	movs	r2, #2
 80064ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80064f2:	6839      	ldr	r1, [r7, #0]
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f000 fc13 	bl	8006d20 <TIM_SlaveTimer_SetConfig>
 80064fa:	4603      	mov	r3, r0
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d009      	beq.n	8006514 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2201      	movs	r2, #1
 8006504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2200      	movs	r2, #0
 800650c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	e018      	b.n	8006546 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	68da      	ldr	r2, [r3, #12]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006522:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	68da      	ldr	r2, [r3, #12]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006532:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2201      	movs	r2, #1
 8006538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006544:	2300      	movs	r3, #0
}
 8006546:	4618      	mov	r0, r3
 8006548:	3708      	adds	r7, #8
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
	...

08006550 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006550:	b480      	push	{r7}
 8006552:	b085      	sub	sp, #20
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800655a:	2300      	movs	r3, #0
 800655c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	2b0c      	cmp	r3, #12
 8006562:	d831      	bhi.n	80065c8 <HAL_TIM_ReadCapturedValue+0x78>
 8006564:	a201      	add	r2, pc, #4	@ (adr r2, 800656c <HAL_TIM_ReadCapturedValue+0x1c>)
 8006566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800656a:	bf00      	nop
 800656c:	080065a1 	.word	0x080065a1
 8006570:	080065c9 	.word	0x080065c9
 8006574:	080065c9 	.word	0x080065c9
 8006578:	080065c9 	.word	0x080065c9
 800657c:	080065ab 	.word	0x080065ab
 8006580:	080065c9 	.word	0x080065c9
 8006584:	080065c9 	.word	0x080065c9
 8006588:	080065c9 	.word	0x080065c9
 800658c:	080065b5 	.word	0x080065b5
 8006590:	080065c9 	.word	0x080065c9
 8006594:	080065c9 	.word	0x080065c9
 8006598:	080065c9 	.word	0x080065c9
 800659c:	080065bf 	.word	0x080065bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065a6:	60fb      	str	r3, [r7, #12]

      break;
 80065a8:	e00f      	b.n	80065ca <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065b0:	60fb      	str	r3, [r7, #12]

      break;
 80065b2:	e00a      	b.n	80065ca <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065ba:	60fb      	str	r3, [r7, #12]

      break;
 80065bc:	e005      	b.n	80065ca <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065c4:	60fb      	str	r3, [r7, #12]

      break;
 80065c6:	e000      	b.n	80065ca <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80065c8:	bf00      	nop
  }

  return tmpreg;
 80065ca:	68fb      	ldr	r3, [r7, #12]
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3714      	adds	r7, #20
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr

080065d8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80065d8:	b480      	push	{r7}
 80065da:	b083      	sub	sp, #12
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80065e0:	bf00      	nop
 80065e2:	370c      	adds	r7, #12
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr

080065ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b083      	sub	sp, #12
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80065f4:	bf00      	nop
 80065f6:	370c      	adds	r7, #12
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr

08006600 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006608:	bf00      	nop
 800660a:	370c      	adds	r7, #12
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr

08006614 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006614:	b480      	push	{r7}
 8006616:	b083      	sub	sp, #12
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800661c:	bf00      	nop
 800661e:	370c      	adds	r7, #12
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006628:	b480      	push	{r7}
 800662a:	b085      	sub	sp, #20
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	4a46      	ldr	r2, [pc, #280]	@ (8006754 <TIM_Base_SetConfig+0x12c>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d013      	beq.n	8006668 <TIM_Base_SetConfig+0x40>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006646:	d00f      	beq.n	8006668 <TIM_Base_SetConfig+0x40>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	4a43      	ldr	r2, [pc, #268]	@ (8006758 <TIM_Base_SetConfig+0x130>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d00b      	beq.n	8006668 <TIM_Base_SetConfig+0x40>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	4a42      	ldr	r2, [pc, #264]	@ (800675c <TIM_Base_SetConfig+0x134>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d007      	beq.n	8006668 <TIM_Base_SetConfig+0x40>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4a41      	ldr	r2, [pc, #260]	@ (8006760 <TIM_Base_SetConfig+0x138>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d003      	beq.n	8006668 <TIM_Base_SetConfig+0x40>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	4a40      	ldr	r2, [pc, #256]	@ (8006764 <TIM_Base_SetConfig+0x13c>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d108      	bne.n	800667a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800666e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	68fa      	ldr	r2, [r7, #12]
 8006676:	4313      	orrs	r3, r2
 8006678:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	4a35      	ldr	r2, [pc, #212]	@ (8006754 <TIM_Base_SetConfig+0x12c>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d01f      	beq.n	80066c2 <TIM_Base_SetConfig+0x9a>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006688:	d01b      	beq.n	80066c2 <TIM_Base_SetConfig+0x9a>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	4a32      	ldr	r2, [pc, #200]	@ (8006758 <TIM_Base_SetConfig+0x130>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d017      	beq.n	80066c2 <TIM_Base_SetConfig+0x9a>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	4a31      	ldr	r2, [pc, #196]	@ (800675c <TIM_Base_SetConfig+0x134>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d013      	beq.n	80066c2 <TIM_Base_SetConfig+0x9a>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	4a30      	ldr	r2, [pc, #192]	@ (8006760 <TIM_Base_SetConfig+0x138>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d00f      	beq.n	80066c2 <TIM_Base_SetConfig+0x9a>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	4a2f      	ldr	r2, [pc, #188]	@ (8006764 <TIM_Base_SetConfig+0x13c>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d00b      	beq.n	80066c2 <TIM_Base_SetConfig+0x9a>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4a2e      	ldr	r2, [pc, #184]	@ (8006768 <TIM_Base_SetConfig+0x140>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d007      	beq.n	80066c2 <TIM_Base_SetConfig+0x9a>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4a2d      	ldr	r2, [pc, #180]	@ (800676c <TIM_Base_SetConfig+0x144>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d003      	beq.n	80066c2 <TIM_Base_SetConfig+0x9a>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4a2c      	ldr	r2, [pc, #176]	@ (8006770 <TIM_Base_SetConfig+0x148>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d108      	bne.n	80066d4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	68fa      	ldr	r2, [r7, #12]
 80066d0:	4313      	orrs	r3, r2
 80066d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	695b      	ldr	r3, [r3, #20]
 80066de:	4313      	orrs	r3, r2
 80066e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	68fa      	ldr	r2, [r7, #12]
 80066e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	689a      	ldr	r2, [r3, #8]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	4a16      	ldr	r2, [pc, #88]	@ (8006754 <TIM_Base_SetConfig+0x12c>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d00f      	beq.n	8006720 <TIM_Base_SetConfig+0xf8>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	4a18      	ldr	r2, [pc, #96]	@ (8006764 <TIM_Base_SetConfig+0x13c>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d00b      	beq.n	8006720 <TIM_Base_SetConfig+0xf8>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	4a17      	ldr	r2, [pc, #92]	@ (8006768 <TIM_Base_SetConfig+0x140>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d007      	beq.n	8006720 <TIM_Base_SetConfig+0xf8>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	4a16      	ldr	r2, [pc, #88]	@ (800676c <TIM_Base_SetConfig+0x144>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d003      	beq.n	8006720 <TIM_Base_SetConfig+0xf8>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	4a15      	ldr	r2, [pc, #84]	@ (8006770 <TIM_Base_SetConfig+0x148>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d103      	bne.n	8006728 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	691a      	ldr	r2, [r3, #16]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	691b      	ldr	r3, [r3, #16]
 8006732:	f003 0301 	and.w	r3, r3, #1
 8006736:	2b01      	cmp	r3, #1
 8006738:	d105      	bne.n	8006746 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	691b      	ldr	r3, [r3, #16]
 800673e:	f023 0201 	bic.w	r2, r3, #1
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	611a      	str	r2, [r3, #16]
  }
}
 8006746:	bf00      	nop
 8006748:	3714      	adds	r7, #20
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr
 8006752:	bf00      	nop
 8006754:	40012c00 	.word	0x40012c00
 8006758:	40000400 	.word	0x40000400
 800675c:	40000800 	.word	0x40000800
 8006760:	40000c00 	.word	0x40000c00
 8006764:	40013400 	.word	0x40013400
 8006768:	40014000 	.word	0x40014000
 800676c:	40014400 	.word	0x40014400
 8006770:	40014800 	.word	0x40014800

08006774 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006774:	b480      	push	{r7}
 8006776:	b087      	sub	sp, #28
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a1b      	ldr	r3, [r3, #32]
 8006782:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6a1b      	ldr	r3, [r3, #32]
 8006788:	f023 0201 	bic.w	r2, r3, #1
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	699b      	ldr	r3, [r3, #24]
 800679a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80067a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f023 0303 	bic.w	r3, r3, #3
 80067ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	68fa      	ldr	r2, [r7, #12]
 80067b6:	4313      	orrs	r3, r2
 80067b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	f023 0302 	bic.w	r3, r3, #2
 80067c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	697a      	ldr	r2, [r7, #20]
 80067c8:	4313      	orrs	r3, r2
 80067ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4a2c      	ldr	r2, [pc, #176]	@ (8006880 <TIM_OC1_SetConfig+0x10c>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d00f      	beq.n	80067f4 <TIM_OC1_SetConfig+0x80>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	4a2b      	ldr	r2, [pc, #172]	@ (8006884 <TIM_OC1_SetConfig+0x110>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d00b      	beq.n	80067f4 <TIM_OC1_SetConfig+0x80>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	4a2a      	ldr	r2, [pc, #168]	@ (8006888 <TIM_OC1_SetConfig+0x114>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d007      	beq.n	80067f4 <TIM_OC1_SetConfig+0x80>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4a29      	ldr	r2, [pc, #164]	@ (800688c <TIM_OC1_SetConfig+0x118>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d003      	beq.n	80067f4 <TIM_OC1_SetConfig+0x80>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	4a28      	ldr	r2, [pc, #160]	@ (8006890 <TIM_OC1_SetConfig+0x11c>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d10c      	bne.n	800680e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	f023 0308 	bic.w	r3, r3, #8
 80067fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	697a      	ldr	r2, [r7, #20]
 8006802:	4313      	orrs	r3, r2
 8006804:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	f023 0304 	bic.w	r3, r3, #4
 800680c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	4a1b      	ldr	r2, [pc, #108]	@ (8006880 <TIM_OC1_SetConfig+0x10c>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d00f      	beq.n	8006836 <TIM_OC1_SetConfig+0xc2>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4a1a      	ldr	r2, [pc, #104]	@ (8006884 <TIM_OC1_SetConfig+0x110>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d00b      	beq.n	8006836 <TIM_OC1_SetConfig+0xc2>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	4a19      	ldr	r2, [pc, #100]	@ (8006888 <TIM_OC1_SetConfig+0x114>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d007      	beq.n	8006836 <TIM_OC1_SetConfig+0xc2>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a18      	ldr	r2, [pc, #96]	@ (800688c <TIM_OC1_SetConfig+0x118>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d003      	beq.n	8006836 <TIM_OC1_SetConfig+0xc2>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4a17      	ldr	r2, [pc, #92]	@ (8006890 <TIM_OC1_SetConfig+0x11c>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d111      	bne.n	800685a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800683c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006844:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	695b      	ldr	r3, [r3, #20]
 800684a:	693a      	ldr	r2, [r7, #16]
 800684c:	4313      	orrs	r3, r2
 800684e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	699b      	ldr	r3, [r3, #24]
 8006854:	693a      	ldr	r2, [r7, #16]
 8006856:	4313      	orrs	r3, r2
 8006858:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	693a      	ldr	r2, [r7, #16]
 800685e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	68fa      	ldr	r2, [r7, #12]
 8006864:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	685a      	ldr	r2, [r3, #4]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	697a      	ldr	r2, [r7, #20]
 8006872:	621a      	str	r2, [r3, #32]
}
 8006874:	bf00      	nop
 8006876:	371c      	adds	r7, #28
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr
 8006880:	40012c00 	.word	0x40012c00
 8006884:	40013400 	.word	0x40013400
 8006888:	40014000 	.word	0x40014000
 800688c:	40014400 	.word	0x40014400
 8006890:	40014800 	.word	0x40014800

08006894 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006894:	b480      	push	{r7}
 8006896:	b087      	sub	sp, #28
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6a1b      	ldr	r3, [r3, #32]
 80068a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6a1b      	ldr	r3, [r3, #32]
 80068a8:	f023 0210 	bic.w	r2, r3, #16
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	699b      	ldr	r3, [r3, #24]
 80068ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80068c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	021b      	lsls	r3, r3, #8
 80068d6:	68fa      	ldr	r2, [r7, #12]
 80068d8:	4313      	orrs	r3, r2
 80068da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	f023 0320 	bic.w	r3, r3, #32
 80068e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	011b      	lsls	r3, r3, #4
 80068ea:	697a      	ldr	r2, [r7, #20]
 80068ec:	4313      	orrs	r3, r2
 80068ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	4a28      	ldr	r2, [pc, #160]	@ (8006994 <TIM_OC2_SetConfig+0x100>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d003      	beq.n	8006900 <TIM_OC2_SetConfig+0x6c>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	4a27      	ldr	r2, [pc, #156]	@ (8006998 <TIM_OC2_SetConfig+0x104>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d10d      	bne.n	800691c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006906:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	68db      	ldr	r3, [r3, #12]
 800690c:	011b      	lsls	r3, r3, #4
 800690e:	697a      	ldr	r2, [r7, #20]
 8006910:	4313      	orrs	r3, r2
 8006912:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800691a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	4a1d      	ldr	r2, [pc, #116]	@ (8006994 <TIM_OC2_SetConfig+0x100>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d00f      	beq.n	8006944 <TIM_OC2_SetConfig+0xb0>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	4a1c      	ldr	r2, [pc, #112]	@ (8006998 <TIM_OC2_SetConfig+0x104>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d00b      	beq.n	8006944 <TIM_OC2_SetConfig+0xb0>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	4a1b      	ldr	r2, [pc, #108]	@ (800699c <TIM_OC2_SetConfig+0x108>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d007      	beq.n	8006944 <TIM_OC2_SetConfig+0xb0>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	4a1a      	ldr	r2, [pc, #104]	@ (80069a0 <TIM_OC2_SetConfig+0x10c>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d003      	beq.n	8006944 <TIM_OC2_SetConfig+0xb0>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	4a19      	ldr	r2, [pc, #100]	@ (80069a4 <TIM_OC2_SetConfig+0x110>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d113      	bne.n	800696c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800694a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006952:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	695b      	ldr	r3, [r3, #20]
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	693a      	ldr	r2, [r7, #16]
 800695c:	4313      	orrs	r3, r2
 800695e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	699b      	ldr	r3, [r3, #24]
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	693a      	ldr	r2, [r7, #16]
 8006968:	4313      	orrs	r3, r2
 800696a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	693a      	ldr	r2, [r7, #16]
 8006970:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	68fa      	ldr	r2, [r7, #12]
 8006976:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	685a      	ldr	r2, [r3, #4]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	697a      	ldr	r2, [r7, #20]
 8006984:	621a      	str	r2, [r3, #32]
}
 8006986:	bf00      	nop
 8006988:	371c      	adds	r7, #28
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr
 8006992:	bf00      	nop
 8006994:	40012c00 	.word	0x40012c00
 8006998:	40013400 	.word	0x40013400
 800699c:	40014000 	.word	0x40014000
 80069a0:	40014400 	.word	0x40014400
 80069a4:	40014800 	.word	0x40014800

080069a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b087      	sub	sp, #28
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6a1b      	ldr	r3, [r3, #32]
 80069b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6a1b      	ldr	r3, [r3, #32]
 80069bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	69db      	ldr	r3, [r3, #28]
 80069ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f023 0303 	bic.w	r3, r3, #3
 80069e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	68fa      	ldr	r2, [r7, #12]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80069f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	021b      	lsls	r3, r3, #8
 80069fc:	697a      	ldr	r2, [r7, #20]
 80069fe:	4313      	orrs	r3, r2
 8006a00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	4a27      	ldr	r2, [pc, #156]	@ (8006aa4 <TIM_OC3_SetConfig+0xfc>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d003      	beq.n	8006a12 <TIM_OC3_SetConfig+0x6a>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4a26      	ldr	r2, [pc, #152]	@ (8006aa8 <TIM_OC3_SetConfig+0x100>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d10d      	bne.n	8006a2e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006a18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	68db      	ldr	r3, [r3, #12]
 8006a1e:	021b      	lsls	r3, r3, #8
 8006a20:	697a      	ldr	r2, [r7, #20]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006a2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4a1c      	ldr	r2, [pc, #112]	@ (8006aa4 <TIM_OC3_SetConfig+0xfc>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d00f      	beq.n	8006a56 <TIM_OC3_SetConfig+0xae>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4a1b      	ldr	r2, [pc, #108]	@ (8006aa8 <TIM_OC3_SetConfig+0x100>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d00b      	beq.n	8006a56 <TIM_OC3_SetConfig+0xae>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4a1a      	ldr	r2, [pc, #104]	@ (8006aac <TIM_OC3_SetConfig+0x104>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d007      	beq.n	8006a56 <TIM_OC3_SetConfig+0xae>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4a19      	ldr	r2, [pc, #100]	@ (8006ab0 <TIM_OC3_SetConfig+0x108>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d003      	beq.n	8006a56 <TIM_OC3_SetConfig+0xae>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	4a18      	ldr	r2, [pc, #96]	@ (8006ab4 <TIM_OC3_SetConfig+0x10c>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d113      	bne.n	8006a7e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006a5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006a64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	695b      	ldr	r3, [r3, #20]
 8006a6a:	011b      	lsls	r3, r3, #4
 8006a6c:	693a      	ldr	r2, [r7, #16]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	699b      	ldr	r3, [r3, #24]
 8006a76:	011b      	lsls	r3, r3, #4
 8006a78:	693a      	ldr	r2, [r7, #16]
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	693a      	ldr	r2, [r7, #16]
 8006a82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	68fa      	ldr	r2, [r7, #12]
 8006a88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	685a      	ldr	r2, [r3, #4]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	697a      	ldr	r2, [r7, #20]
 8006a96:	621a      	str	r2, [r3, #32]
}
 8006a98:	bf00      	nop
 8006a9a:	371c      	adds	r7, #28
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr
 8006aa4:	40012c00 	.word	0x40012c00
 8006aa8:	40013400 	.word	0x40013400
 8006aac:	40014000 	.word	0x40014000
 8006ab0:	40014400 	.word	0x40014400
 8006ab4:	40014800 	.word	0x40014800

08006ab8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b087      	sub	sp, #28
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6a1b      	ldr	r3, [r3, #32]
 8006ac6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6a1b      	ldr	r3, [r3, #32]
 8006acc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	69db      	ldr	r3, [r3, #28]
 8006ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006ae6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006aea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006af2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	021b      	lsls	r3, r3, #8
 8006afa:	68fa      	ldr	r2, [r7, #12]
 8006afc:	4313      	orrs	r3, r2
 8006afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006b06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	031b      	lsls	r3, r3, #12
 8006b0e:	693a      	ldr	r2, [r7, #16]
 8006b10:	4313      	orrs	r3, r2
 8006b12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	4a18      	ldr	r2, [pc, #96]	@ (8006b78 <TIM_OC4_SetConfig+0xc0>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d00f      	beq.n	8006b3c <TIM_OC4_SetConfig+0x84>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4a17      	ldr	r2, [pc, #92]	@ (8006b7c <TIM_OC4_SetConfig+0xc4>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d00b      	beq.n	8006b3c <TIM_OC4_SetConfig+0x84>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	4a16      	ldr	r2, [pc, #88]	@ (8006b80 <TIM_OC4_SetConfig+0xc8>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d007      	beq.n	8006b3c <TIM_OC4_SetConfig+0x84>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	4a15      	ldr	r2, [pc, #84]	@ (8006b84 <TIM_OC4_SetConfig+0xcc>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d003      	beq.n	8006b3c <TIM_OC4_SetConfig+0x84>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	4a14      	ldr	r2, [pc, #80]	@ (8006b88 <TIM_OC4_SetConfig+0xd0>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d109      	bne.n	8006b50 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006b42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	695b      	ldr	r3, [r3, #20]
 8006b48:	019b      	lsls	r3, r3, #6
 8006b4a:	697a      	ldr	r2, [r7, #20]
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	697a      	ldr	r2, [r7, #20]
 8006b54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	68fa      	ldr	r2, [r7, #12]
 8006b5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	685a      	ldr	r2, [r3, #4]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	693a      	ldr	r2, [r7, #16]
 8006b68:	621a      	str	r2, [r3, #32]
}
 8006b6a:	bf00      	nop
 8006b6c:	371c      	adds	r7, #28
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b74:	4770      	bx	lr
 8006b76:	bf00      	nop
 8006b78:	40012c00 	.word	0x40012c00
 8006b7c:	40013400 	.word	0x40013400
 8006b80:	40014000 	.word	0x40014000
 8006b84:	40014400 	.word	0x40014400
 8006b88:	40014800 	.word	0x40014800

08006b8c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b087      	sub	sp, #28
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6a1b      	ldr	r3, [r3, #32]
 8006b9a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6a1b      	ldr	r3, [r3, #32]
 8006ba0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	68fa      	ldr	r2, [r7, #12]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006bd0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	041b      	lsls	r3, r3, #16
 8006bd8:	693a      	ldr	r2, [r7, #16]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4a17      	ldr	r2, [pc, #92]	@ (8006c40 <TIM_OC5_SetConfig+0xb4>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d00f      	beq.n	8006c06 <TIM_OC5_SetConfig+0x7a>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4a16      	ldr	r2, [pc, #88]	@ (8006c44 <TIM_OC5_SetConfig+0xb8>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d00b      	beq.n	8006c06 <TIM_OC5_SetConfig+0x7a>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4a15      	ldr	r2, [pc, #84]	@ (8006c48 <TIM_OC5_SetConfig+0xbc>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d007      	beq.n	8006c06 <TIM_OC5_SetConfig+0x7a>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4a14      	ldr	r2, [pc, #80]	@ (8006c4c <TIM_OC5_SetConfig+0xc0>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d003      	beq.n	8006c06 <TIM_OC5_SetConfig+0x7a>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	4a13      	ldr	r2, [pc, #76]	@ (8006c50 <TIM_OC5_SetConfig+0xc4>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d109      	bne.n	8006c1a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c0c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	695b      	ldr	r3, [r3, #20]
 8006c12:	021b      	lsls	r3, r3, #8
 8006c14:	697a      	ldr	r2, [r7, #20]
 8006c16:	4313      	orrs	r3, r2
 8006c18:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	697a      	ldr	r2, [r7, #20]
 8006c1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	68fa      	ldr	r2, [r7, #12]
 8006c24:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	685a      	ldr	r2, [r3, #4]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	693a      	ldr	r2, [r7, #16]
 8006c32:	621a      	str	r2, [r3, #32]
}
 8006c34:	bf00      	nop
 8006c36:	371c      	adds	r7, #28
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr
 8006c40:	40012c00 	.word	0x40012c00
 8006c44:	40013400 	.word	0x40013400
 8006c48:	40014000 	.word	0x40014000
 8006c4c:	40014400 	.word	0x40014400
 8006c50:	40014800 	.word	0x40014800

08006c54 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b087      	sub	sp, #28
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6a1b      	ldr	r3, [r3, #32]
 8006c62:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6a1b      	ldr	r3, [r3, #32]
 8006c68:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006c82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	021b      	lsls	r3, r3, #8
 8006c8e:	68fa      	ldr	r2, [r7, #12]
 8006c90:	4313      	orrs	r3, r2
 8006c92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006c9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	051b      	lsls	r3, r3, #20
 8006ca2:	693a      	ldr	r2, [r7, #16]
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	4a18      	ldr	r2, [pc, #96]	@ (8006d0c <TIM_OC6_SetConfig+0xb8>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d00f      	beq.n	8006cd0 <TIM_OC6_SetConfig+0x7c>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4a17      	ldr	r2, [pc, #92]	@ (8006d10 <TIM_OC6_SetConfig+0xbc>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d00b      	beq.n	8006cd0 <TIM_OC6_SetConfig+0x7c>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	4a16      	ldr	r2, [pc, #88]	@ (8006d14 <TIM_OC6_SetConfig+0xc0>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d007      	beq.n	8006cd0 <TIM_OC6_SetConfig+0x7c>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	4a15      	ldr	r2, [pc, #84]	@ (8006d18 <TIM_OC6_SetConfig+0xc4>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d003      	beq.n	8006cd0 <TIM_OC6_SetConfig+0x7c>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	4a14      	ldr	r2, [pc, #80]	@ (8006d1c <TIM_OC6_SetConfig+0xc8>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d109      	bne.n	8006ce4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006cd6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	695b      	ldr	r3, [r3, #20]
 8006cdc:	029b      	lsls	r3, r3, #10
 8006cde:	697a      	ldr	r2, [r7, #20]
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	697a      	ldr	r2, [r7, #20]
 8006ce8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	68fa      	ldr	r2, [r7, #12]
 8006cee:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	685a      	ldr	r2, [r3, #4]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	693a      	ldr	r2, [r7, #16]
 8006cfc:	621a      	str	r2, [r3, #32]
}
 8006cfe:	bf00      	nop
 8006d00:	371c      	adds	r7, #28
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr
 8006d0a:	bf00      	nop
 8006d0c:	40012c00 	.word	0x40012c00
 8006d10:	40013400 	.word	0x40013400
 8006d14:	40014000 	.word	0x40014000
 8006d18:	40014400 	.word	0x40014400
 8006d1c:	40014800 	.word	0x40014800

08006d20 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b086      	sub	sp, #24
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d3c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	693a      	ldr	r2, [r7, #16]
 8006d44:	4313      	orrs	r3, r2
 8006d46:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d4e:	f023 0307 	bic.w	r3, r3, #7
 8006d52:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	693a      	ldr	r2, [r7, #16]
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	693a      	ldr	r2, [r7, #16]
 8006d64:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	2b70      	cmp	r3, #112	@ 0x70
 8006d6c:	d01a      	beq.n	8006da4 <TIM_SlaveTimer_SetConfig+0x84>
 8006d6e:	2b70      	cmp	r3, #112	@ 0x70
 8006d70:	d860      	bhi.n	8006e34 <TIM_SlaveTimer_SetConfig+0x114>
 8006d72:	2b60      	cmp	r3, #96	@ 0x60
 8006d74:	d054      	beq.n	8006e20 <TIM_SlaveTimer_SetConfig+0x100>
 8006d76:	2b60      	cmp	r3, #96	@ 0x60
 8006d78:	d85c      	bhi.n	8006e34 <TIM_SlaveTimer_SetConfig+0x114>
 8006d7a:	2b50      	cmp	r3, #80	@ 0x50
 8006d7c:	d046      	beq.n	8006e0c <TIM_SlaveTimer_SetConfig+0xec>
 8006d7e:	2b50      	cmp	r3, #80	@ 0x50
 8006d80:	d858      	bhi.n	8006e34 <TIM_SlaveTimer_SetConfig+0x114>
 8006d82:	2b40      	cmp	r3, #64	@ 0x40
 8006d84:	d019      	beq.n	8006dba <TIM_SlaveTimer_SetConfig+0x9a>
 8006d86:	2b40      	cmp	r3, #64	@ 0x40
 8006d88:	d854      	bhi.n	8006e34 <TIM_SlaveTimer_SetConfig+0x114>
 8006d8a:	2b30      	cmp	r3, #48	@ 0x30
 8006d8c:	d055      	beq.n	8006e3a <TIM_SlaveTimer_SetConfig+0x11a>
 8006d8e:	2b30      	cmp	r3, #48	@ 0x30
 8006d90:	d850      	bhi.n	8006e34 <TIM_SlaveTimer_SetConfig+0x114>
 8006d92:	2b20      	cmp	r3, #32
 8006d94:	d051      	beq.n	8006e3a <TIM_SlaveTimer_SetConfig+0x11a>
 8006d96:	2b20      	cmp	r3, #32
 8006d98:	d84c      	bhi.n	8006e34 <TIM_SlaveTimer_SetConfig+0x114>
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d04d      	beq.n	8006e3a <TIM_SlaveTimer_SetConfig+0x11a>
 8006d9e:	2b10      	cmp	r3, #16
 8006da0:	d04b      	beq.n	8006e3a <TIM_SlaveTimer_SetConfig+0x11a>
 8006da2:	e047      	b.n	8006e34 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8006db4:	f000 f9e6 	bl	8007184 <TIM_ETR_SetConfig>
      break;
 8006db8:	e040      	b.n	8006e3c <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	2b05      	cmp	r3, #5
 8006dc0:	d101      	bne.n	8006dc6 <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	e03b      	b.n	8006e3e <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	6a1b      	ldr	r3, [r3, #32]
 8006dcc:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	6a1a      	ldr	r2, [r3, #32]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f022 0201 	bic.w	r2, r2, #1
 8006ddc:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	699b      	ldr	r3, [r3, #24]
 8006de4:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006dec:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	691b      	ldr	r3, [r3, #16]
 8006df2:	011b      	lsls	r3, r3, #4
 8006df4:	68ba      	ldr	r2, [r7, #8]
 8006df6:	4313      	orrs	r3, r2
 8006df8:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	68ba      	ldr	r2, [r7, #8]
 8006e00:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	68fa      	ldr	r2, [r7, #12]
 8006e08:	621a      	str	r2, [r3, #32]
      break;
 8006e0a:	e017      	b.n	8006e3c <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e18:	461a      	mov	r2, r3
 8006e1a:	f000 f883 	bl	8006f24 <TIM_TI1_ConfigInputStage>
      break;
 8006e1e:	e00d      	b.n	8006e3c <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	f000 f8e5 	bl	8006ffc <TIM_TI2_ConfigInputStage>
      break;
 8006e32:	e003      	b.n	8006e3c <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8006e34:	2301      	movs	r3, #1
 8006e36:	75fb      	strb	r3, [r7, #23]
      break;
 8006e38:	e000      	b.n	8006e3c <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 8006e3a:	bf00      	nop
  }

  return status;
 8006e3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3718      	adds	r7, #24
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
	...

08006e48 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b087      	sub	sp, #28
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	60f8      	str	r0, [r7, #12]
 8006e50:	60b9      	str	r1, [r7, #8]
 8006e52:	607a      	str	r2, [r7, #4]
 8006e54:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	6a1b      	ldr	r3, [r3, #32]
 8006e5a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	6a1b      	ldr	r3, [r3, #32]
 8006e60:	f023 0201 	bic.w	r2, r3, #1
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	699b      	ldr	r3, [r3, #24]
 8006e6c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	4a26      	ldr	r2, [pc, #152]	@ (8006f0c <TIM_TI1_SetConfig+0xc4>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d017      	beq.n	8006ea6 <TIM_TI1_SetConfig+0x5e>
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e7c:	d013      	beq.n	8006ea6 <TIM_TI1_SetConfig+0x5e>
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	4a23      	ldr	r2, [pc, #140]	@ (8006f10 <TIM_TI1_SetConfig+0xc8>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d00f      	beq.n	8006ea6 <TIM_TI1_SetConfig+0x5e>
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	4a22      	ldr	r2, [pc, #136]	@ (8006f14 <TIM_TI1_SetConfig+0xcc>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d00b      	beq.n	8006ea6 <TIM_TI1_SetConfig+0x5e>
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	4a21      	ldr	r2, [pc, #132]	@ (8006f18 <TIM_TI1_SetConfig+0xd0>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d007      	beq.n	8006ea6 <TIM_TI1_SetConfig+0x5e>
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	4a20      	ldr	r2, [pc, #128]	@ (8006f1c <TIM_TI1_SetConfig+0xd4>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d003      	beq.n	8006ea6 <TIM_TI1_SetConfig+0x5e>
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	4a1f      	ldr	r2, [pc, #124]	@ (8006f20 <TIM_TI1_SetConfig+0xd8>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d101      	bne.n	8006eaa <TIM_TI1_SetConfig+0x62>
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	e000      	b.n	8006eac <TIM_TI1_SetConfig+0x64>
 8006eaa:	2300      	movs	r3, #0
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d008      	beq.n	8006ec2 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	f023 0303 	bic.w	r3, r3, #3
 8006eb6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006eb8:	697a      	ldr	r2, [r7, #20]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	617b      	str	r3, [r7, #20]
 8006ec0:	e003      	b.n	8006eca <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	f043 0301 	orr.w	r3, r3, #1
 8006ec8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006ed0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	011b      	lsls	r3, r3, #4
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	697a      	ldr	r2, [r7, #20]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	f023 030a 	bic.w	r3, r3, #10
 8006ee4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	f003 030a 	and.w	r3, r3, #10
 8006eec:	693a      	ldr	r2, [r7, #16]
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	697a      	ldr	r2, [r7, #20]
 8006ef6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	693a      	ldr	r2, [r7, #16]
 8006efc:	621a      	str	r2, [r3, #32]
}
 8006efe:	bf00      	nop
 8006f00:	371c      	adds	r7, #28
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr
 8006f0a:	bf00      	nop
 8006f0c:	40012c00 	.word	0x40012c00
 8006f10:	40000400 	.word	0x40000400
 8006f14:	40000800 	.word	0x40000800
 8006f18:	40000c00 	.word	0x40000c00
 8006f1c:	40013400 	.word	0x40013400
 8006f20:	40014000 	.word	0x40014000

08006f24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b087      	sub	sp, #28
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	60f8      	str	r0, [r7, #12]
 8006f2c:	60b9      	str	r1, [r7, #8]
 8006f2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	6a1b      	ldr	r3, [r3, #32]
 8006f34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	6a1b      	ldr	r3, [r3, #32]
 8006f3a:	f023 0201 	bic.w	r2, r3, #1
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	699b      	ldr	r3, [r3, #24]
 8006f46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006f4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	011b      	lsls	r3, r3, #4
 8006f54:	693a      	ldr	r2, [r7, #16]
 8006f56:	4313      	orrs	r3, r2
 8006f58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	f023 030a 	bic.w	r3, r3, #10
 8006f60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006f62:	697a      	ldr	r2, [r7, #20]
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	4313      	orrs	r3, r2
 8006f68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	693a      	ldr	r2, [r7, #16]
 8006f6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	697a      	ldr	r2, [r7, #20]
 8006f74:	621a      	str	r2, [r3, #32]
}
 8006f76:	bf00      	nop
 8006f78:	371c      	adds	r7, #28
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr

08006f82 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006f82:	b480      	push	{r7}
 8006f84:	b087      	sub	sp, #28
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	60f8      	str	r0, [r7, #12]
 8006f8a:	60b9      	str	r1, [r7, #8]
 8006f8c:	607a      	str	r2, [r7, #4]
 8006f8e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	6a1b      	ldr	r3, [r3, #32]
 8006f94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	6a1b      	ldr	r3, [r3, #32]
 8006f9a:	f023 0210 	bic.w	r2, r3, #16
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	699b      	ldr	r3, [r3, #24]
 8006fa6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006fae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	021b      	lsls	r3, r3, #8
 8006fb4:	693a      	ldr	r2, [r7, #16]
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006fc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	031b      	lsls	r3, r3, #12
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	693a      	ldr	r2, [r7, #16]
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006fd4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	011b      	lsls	r3, r3, #4
 8006fda:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006fde:	697a      	ldr	r2, [r7, #20]
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	693a      	ldr	r2, [r7, #16]
 8006fe8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	697a      	ldr	r2, [r7, #20]
 8006fee:	621a      	str	r2, [r3, #32]
}
 8006ff0:	bf00      	nop
 8006ff2:	371c      	adds	r7, #28
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr

08006ffc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b087      	sub	sp, #28
 8007000:	af00      	add	r7, sp, #0
 8007002:	60f8      	str	r0, [r7, #12]
 8007004:	60b9      	str	r1, [r7, #8]
 8007006:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	6a1b      	ldr	r3, [r3, #32]
 800700c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	6a1b      	ldr	r3, [r3, #32]
 8007012:	f023 0210 	bic.w	r2, r3, #16
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	699b      	ldr	r3, [r3, #24]
 800701e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007026:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	031b      	lsls	r3, r3, #12
 800702c:	693a      	ldr	r2, [r7, #16]
 800702e:	4313      	orrs	r3, r2
 8007030:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007038:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	011b      	lsls	r3, r3, #4
 800703e:	697a      	ldr	r2, [r7, #20]
 8007040:	4313      	orrs	r3, r2
 8007042:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	693a      	ldr	r2, [r7, #16]
 8007048:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	697a      	ldr	r2, [r7, #20]
 800704e:	621a      	str	r2, [r3, #32]
}
 8007050:	bf00      	nop
 8007052:	371c      	adds	r7, #28
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr

0800705c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800705c:	b480      	push	{r7}
 800705e:	b087      	sub	sp, #28
 8007060:	af00      	add	r7, sp, #0
 8007062:	60f8      	str	r0, [r7, #12]
 8007064:	60b9      	str	r1, [r7, #8]
 8007066:	607a      	str	r2, [r7, #4]
 8007068:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	6a1b      	ldr	r3, [r3, #32]
 800706e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	6a1b      	ldr	r3, [r3, #32]
 8007074:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	69db      	ldr	r3, [r3, #28]
 8007080:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	f023 0303 	bic.w	r3, r3, #3
 8007088:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800708a:	693a      	ldr	r2, [r7, #16]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	4313      	orrs	r3, r2
 8007090:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007098:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	011b      	lsls	r3, r3, #4
 800709e:	b2db      	uxtb	r3, r3
 80070a0:	693a      	ldr	r2, [r7, #16]
 80070a2:	4313      	orrs	r3, r2
 80070a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80070ac:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	021b      	lsls	r3, r3, #8
 80070b2:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80070b6:	697a      	ldr	r2, [r7, #20]
 80070b8:	4313      	orrs	r3, r2
 80070ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	693a      	ldr	r2, [r7, #16]
 80070c0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	697a      	ldr	r2, [r7, #20]
 80070c6:	621a      	str	r2, [r3, #32]
}
 80070c8:	bf00      	nop
 80070ca:	371c      	adds	r7, #28
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr

080070d4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b087      	sub	sp, #28
 80070d8:	af00      	add	r7, sp, #0
 80070da:	60f8      	str	r0, [r7, #12]
 80070dc:	60b9      	str	r1, [r7, #8]
 80070de:	607a      	str	r2, [r7, #4]
 80070e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	6a1b      	ldr	r3, [r3, #32]
 80070e6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	6a1b      	ldr	r3, [r3, #32]
 80070ec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	69db      	ldr	r3, [r3, #28]
 80070f8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007100:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	021b      	lsls	r3, r3, #8
 8007106:	693a      	ldr	r2, [r7, #16]
 8007108:	4313      	orrs	r3, r2
 800710a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007112:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	031b      	lsls	r3, r3, #12
 8007118:	b29b      	uxth	r3, r3
 800711a:	693a      	ldr	r2, [r7, #16]
 800711c:	4313      	orrs	r3, r2
 800711e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8007126:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	031b      	lsls	r3, r3, #12
 800712c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8007130:	697a      	ldr	r2, [r7, #20]
 8007132:	4313      	orrs	r3, r2
 8007134:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	693a      	ldr	r2, [r7, #16]
 800713a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	697a      	ldr	r2, [r7, #20]
 8007140:	621a      	str	r2, [r3, #32]
}
 8007142:	bf00      	nop
 8007144:	371c      	adds	r7, #28
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr

0800714e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800714e:	b480      	push	{r7}
 8007150:	b085      	sub	sp, #20
 8007152:	af00      	add	r7, sp, #0
 8007154:	6078      	str	r0, [r7, #4]
 8007156:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007164:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007166:	683a      	ldr	r2, [r7, #0]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	4313      	orrs	r3, r2
 800716c:	f043 0307 	orr.w	r3, r3, #7
 8007170:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	68fa      	ldr	r2, [r7, #12]
 8007176:	609a      	str	r2, [r3, #8]
}
 8007178:	bf00      	nop
 800717a:	3714      	adds	r7, #20
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr

08007184 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007184:	b480      	push	{r7}
 8007186:	b087      	sub	sp, #28
 8007188:	af00      	add	r7, sp, #0
 800718a:	60f8      	str	r0, [r7, #12]
 800718c:	60b9      	str	r1, [r7, #8]
 800718e:	607a      	str	r2, [r7, #4]
 8007190:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800719e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	021a      	lsls	r2, r3, #8
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	431a      	orrs	r2, r3
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	4313      	orrs	r3, r2
 80071ac:	697a      	ldr	r2, [r7, #20]
 80071ae:	4313      	orrs	r3, r2
 80071b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	697a      	ldr	r2, [r7, #20]
 80071b6:	609a      	str	r2, [r3, #8]
}
 80071b8:	bf00      	nop
 80071ba:	371c      	adds	r7, #28
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr

080071c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b087      	sub	sp, #28
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	60b9      	str	r1, [r7, #8]
 80071ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	f003 031f 	and.w	r3, r3, #31
 80071d6:	2201      	movs	r2, #1
 80071d8:	fa02 f303 	lsl.w	r3, r2, r3
 80071dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	6a1a      	ldr	r2, [r3, #32]
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	43db      	mvns	r3, r3
 80071e6:	401a      	ands	r2, r3
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	6a1a      	ldr	r2, [r3, #32]
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	f003 031f 	and.w	r3, r3, #31
 80071f6:	6879      	ldr	r1, [r7, #4]
 80071f8:	fa01 f303 	lsl.w	r3, r1, r3
 80071fc:	431a      	orrs	r2, r3
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	621a      	str	r2, [r3, #32]
}
 8007202:	bf00      	nop
 8007204:	371c      	adds	r7, #28
 8007206:	46bd      	mov	sp, r7
 8007208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720c:	4770      	bx	lr
	...

08007210 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007210:	b480      	push	{r7}
 8007212:	b085      	sub	sp, #20
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007220:	2b01      	cmp	r3, #1
 8007222:	d101      	bne.n	8007228 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007224:	2302      	movs	r3, #2
 8007226:	e068      	b.n	80072fa <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2201      	movs	r2, #1
 800722c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2202      	movs	r2, #2
 8007234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a2e      	ldr	r2, [pc, #184]	@ (8007308 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d004      	beq.n	800725c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a2d      	ldr	r2, [pc, #180]	@ (800730c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d108      	bne.n	800726e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007262:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	68fa      	ldr	r2, [r7, #12]
 800726a:	4313      	orrs	r3, r2
 800726c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007274:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	68fa      	ldr	r2, [r7, #12]
 800727c:	4313      	orrs	r3, r2
 800727e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	68fa      	ldr	r2, [r7, #12]
 8007286:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a1e      	ldr	r2, [pc, #120]	@ (8007308 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d01d      	beq.n	80072ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800729a:	d018      	beq.n	80072ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a1b      	ldr	r2, [pc, #108]	@ (8007310 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d013      	beq.n	80072ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a1a      	ldr	r2, [pc, #104]	@ (8007314 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d00e      	beq.n	80072ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a18      	ldr	r2, [pc, #96]	@ (8007318 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d009      	beq.n	80072ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a13      	ldr	r2, [pc, #76]	@ (800730c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d004      	beq.n	80072ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a14      	ldr	r2, [pc, #80]	@ (800731c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d10c      	bne.n	80072e8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80072d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	68ba      	ldr	r2, [r7, #8]
 80072dc:	4313      	orrs	r3, r2
 80072de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	68ba      	ldr	r2, [r7, #8]
 80072e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2201      	movs	r2, #1
 80072ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2200      	movs	r2, #0
 80072f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80072f8:	2300      	movs	r3, #0
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3714      	adds	r7, #20
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr
 8007306:	bf00      	nop
 8007308:	40012c00 	.word	0x40012c00
 800730c:	40013400 	.word	0x40013400
 8007310:	40000400 	.word	0x40000400
 8007314:	40000800 	.word	0x40000800
 8007318:	40000c00 	.word	0x40000c00
 800731c:	40014000 	.word	0x40014000

08007320 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007320:	b480      	push	{r7}
 8007322:	b085      	sub	sp, #20
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800732a:	2300      	movs	r3, #0
 800732c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007334:	2b01      	cmp	r3, #1
 8007336:	d101      	bne.n	800733c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007338:	2302      	movs	r3, #2
 800733a:	e065      	b.n	8007408 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2201      	movs	r2, #1
 8007340:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	68db      	ldr	r3, [r3, #12]
 800734e:	4313      	orrs	r3, r2
 8007350:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	4313      	orrs	r3, r2
 800735e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	4313      	orrs	r3, r2
 800736c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4313      	orrs	r3, r2
 800737a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	691b      	ldr	r3, [r3, #16]
 8007386:	4313      	orrs	r3, r2
 8007388:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	695b      	ldr	r3, [r3, #20]
 8007394:	4313      	orrs	r3, r2
 8007396:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073a2:	4313      	orrs	r3, r2
 80073a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	699b      	ldr	r3, [r3, #24]
 80073b0:	041b      	lsls	r3, r3, #16
 80073b2:	4313      	orrs	r3, r2
 80073b4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a16      	ldr	r2, [pc, #88]	@ (8007414 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d004      	beq.n	80073ca <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a14      	ldr	r2, [pc, #80]	@ (8007418 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d115      	bne.n	80073f6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073d4:	051b      	lsls	r3, r3, #20
 80073d6:	4313      	orrs	r3, r2
 80073d8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	69db      	ldr	r3, [r3, #28]
 80073e4:	4313      	orrs	r3, r2
 80073e6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	6a1b      	ldr	r3, [r3, #32]
 80073f2:	4313      	orrs	r3, r2
 80073f4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	68fa      	ldr	r2, [r7, #12]
 80073fc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2200      	movs	r2, #0
 8007402:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007406:	2300      	movs	r3, #0
}
 8007408:	4618      	mov	r0, r3
 800740a:	3714      	adds	r7, #20
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr
 8007414:	40012c00 	.word	0x40012c00
 8007418:	40013400 	.word	0x40013400

0800741c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800741c:	b480      	push	{r7}
 800741e:	b083      	sub	sp, #12
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007424:	bf00      	nop
 8007426:	370c      	adds	r7, #12
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr

08007430 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007430:	b480      	push	{r7}
 8007432:	b083      	sub	sp, #12
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007438:	bf00      	nop
 800743a:	370c      	adds	r7, #12
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr

08007444 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007444:	b480      	push	{r7}
 8007446:	b083      	sub	sp, #12
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800744c:	bf00      	nop
 800744e:	370c      	adds	r7, #12
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr

08007458 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b082      	sub	sp, #8
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d101      	bne.n	800746a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007466:	2301      	movs	r3, #1
 8007468:	e040      	b.n	80074ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800746e:	2b00      	cmp	r3, #0
 8007470:	d106      	bne.n	8007480 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2200      	movs	r2, #0
 8007476:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f7fb fae8 	bl	8002a50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2224      	movs	r2, #36	@ 0x24
 8007484:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f022 0201 	bic.w	r2, r2, #1
 8007494:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800749a:	2b00      	cmp	r3, #0
 800749c:	d002      	beq.n	80074a4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f000 fae0 	bl	8007a64 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f000 f825 	bl	80074f4 <UART_SetConfig>
 80074aa:	4603      	mov	r3, r0
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d101      	bne.n	80074b4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80074b0:	2301      	movs	r3, #1
 80074b2:	e01b      	b.n	80074ec <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	685a      	ldr	r2, [r3, #4]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80074c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	689a      	ldr	r2, [r3, #8]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80074d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	681a      	ldr	r2, [r3, #0]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f042 0201 	orr.w	r2, r2, #1
 80074e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 fb5f 	bl	8007ba8 <UART_CheckIdleState>
 80074ea:	4603      	mov	r3, r0
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3708      	adds	r7, #8
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80074f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80074f8:	b08a      	sub	sp, #40	@ 0x28
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80074fe:	2300      	movs	r3, #0
 8007500:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	689a      	ldr	r2, [r3, #8]
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	691b      	ldr	r3, [r3, #16]
 800750c:	431a      	orrs	r2, r3
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	695b      	ldr	r3, [r3, #20]
 8007512:	431a      	orrs	r2, r3
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	69db      	ldr	r3, [r3, #28]
 8007518:	4313      	orrs	r3, r2
 800751a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	4ba4      	ldr	r3, [pc, #656]	@ (80077b4 <UART_SetConfig+0x2c0>)
 8007524:	4013      	ands	r3, r2
 8007526:	68fa      	ldr	r2, [r7, #12]
 8007528:	6812      	ldr	r2, [r2, #0]
 800752a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800752c:	430b      	orrs	r3, r1
 800752e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	68da      	ldr	r2, [r3, #12]
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	430a      	orrs	r2, r1
 8007544:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	699b      	ldr	r3, [r3, #24]
 800754a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a99      	ldr	r2, [pc, #612]	@ (80077b8 <UART_SetConfig+0x2c4>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d004      	beq.n	8007560 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	6a1b      	ldr	r3, [r3, #32]
 800755a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800755c:	4313      	orrs	r3, r2
 800755e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007570:	430a      	orrs	r2, r1
 8007572:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a90      	ldr	r2, [pc, #576]	@ (80077bc <UART_SetConfig+0x2c8>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d126      	bne.n	80075cc <UART_SetConfig+0xd8>
 800757e:	4b90      	ldr	r3, [pc, #576]	@ (80077c0 <UART_SetConfig+0x2cc>)
 8007580:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007584:	f003 0303 	and.w	r3, r3, #3
 8007588:	2b03      	cmp	r3, #3
 800758a:	d81b      	bhi.n	80075c4 <UART_SetConfig+0xd0>
 800758c:	a201      	add	r2, pc, #4	@ (adr r2, 8007594 <UART_SetConfig+0xa0>)
 800758e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007592:	bf00      	nop
 8007594:	080075a5 	.word	0x080075a5
 8007598:	080075b5 	.word	0x080075b5
 800759c:	080075ad 	.word	0x080075ad
 80075a0:	080075bd 	.word	0x080075bd
 80075a4:	2301      	movs	r3, #1
 80075a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075aa:	e116      	b.n	80077da <UART_SetConfig+0x2e6>
 80075ac:	2302      	movs	r3, #2
 80075ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075b2:	e112      	b.n	80077da <UART_SetConfig+0x2e6>
 80075b4:	2304      	movs	r3, #4
 80075b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075ba:	e10e      	b.n	80077da <UART_SetConfig+0x2e6>
 80075bc:	2308      	movs	r3, #8
 80075be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075c2:	e10a      	b.n	80077da <UART_SetConfig+0x2e6>
 80075c4:	2310      	movs	r3, #16
 80075c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075ca:	e106      	b.n	80077da <UART_SetConfig+0x2e6>
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a7c      	ldr	r2, [pc, #496]	@ (80077c4 <UART_SetConfig+0x2d0>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d138      	bne.n	8007648 <UART_SetConfig+0x154>
 80075d6:	4b7a      	ldr	r3, [pc, #488]	@ (80077c0 <UART_SetConfig+0x2cc>)
 80075d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075dc:	f003 030c 	and.w	r3, r3, #12
 80075e0:	2b0c      	cmp	r3, #12
 80075e2:	d82d      	bhi.n	8007640 <UART_SetConfig+0x14c>
 80075e4:	a201      	add	r2, pc, #4	@ (adr r2, 80075ec <UART_SetConfig+0xf8>)
 80075e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ea:	bf00      	nop
 80075ec:	08007621 	.word	0x08007621
 80075f0:	08007641 	.word	0x08007641
 80075f4:	08007641 	.word	0x08007641
 80075f8:	08007641 	.word	0x08007641
 80075fc:	08007631 	.word	0x08007631
 8007600:	08007641 	.word	0x08007641
 8007604:	08007641 	.word	0x08007641
 8007608:	08007641 	.word	0x08007641
 800760c:	08007629 	.word	0x08007629
 8007610:	08007641 	.word	0x08007641
 8007614:	08007641 	.word	0x08007641
 8007618:	08007641 	.word	0x08007641
 800761c:	08007639 	.word	0x08007639
 8007620:	2300      	movs	r3, #0
 8007622:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007626:	e0d8      	b.n	80077da <UART_SetConfig+0x2e6>
 8007628:	2302      	movs	r3, #2
 800762a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800762e:	e0d4      	b.n	80077da <UART_SetConfig+0x2e6>
 8007630:	2304      	movs	r3, #4
 8007632:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007636:	e0d0      	b.n	80077da <UART_SetConfig+0x2e6>
 8007638:	2308      	movs	r3, #8
 800763a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800763e:	e0cc      	b.n	80077da <UART_SetConfig+0x2e6>
 8007640:	2310      	movs	r3, #16
 8007642:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007646:	e0c8      	b.n	80077da <UART_SetConfig+0x2e6>
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a5e      	ldr	r2, [pc, #376]	@ (80077c8 <UART_SetConfig+0x2d4>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d125      	bne.n	800769e <UART_SetConfig+0x1aa>
 8007652:	4b5b      	ldr	r3, [pc, #364]	@ (80077c0 <UART_SetConfig+0x2cc>)
 8007654:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007658:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800765c:	2b30      	cmp	r3, #48	@ 0x30
 800765e:	d016      	beq.n	800768e <UART_SetConfig+0x19a>
 8007660:	2b30      	cmp	r3, #48	@ 0x30
 8007662:	d818      	bhi.n	8007696 <UART_SetConfig+0x1a2>
 8007664:	2b20      	cmp	r3, #32
 8007666:	d00a      	beq.n	800767e <UART_SetConfig+0x18a>
 8007668:	2b20      	cmp	r3, #32
 800766a:	d814      	bhi.n	8007696 <UART_SetConfig+0x1a2>
 800766c:	2b00      	cmp	r3, #0
 800766e:	d002      	beq.n	8007676 <UART_SetConfig+0x182>
 8007670:	2b10      	cmp	r3, #16
 8007672:	d008      	beq.n	8007686 <UART_SetConfig+0x192>
 8007674:	e00f      	b.n	8007696 <UART_SetConfig+0x1a2>
 8007676:	2300      	movs	r3, #0
 8007678:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800767c:	e0ad      	b.n	80077da <UART_SetConfig+0x2e6>
 800767e:	2302      	movs	r3, #2
 8007680:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007684:	e0a9      	b.n	80077da <UART_SetConfig+0x2e6>
 8007686:	2304      	movs	r3, #4
 8007688:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800768c:	e0a5      	b.n	80077da <UART_SetConfig+0x2e6>
 800768e:	2308      	movs	r3, #8
 8007690:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007694:	e0a1      	b.n	80077da <UART_SetConfig+0x2e6>
 8007696:	2310      	movs	r3, #16
 8007698:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800769c:	e09d      	b.n	80077da <UART_SetConfig+0x2e6>
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a4a      	ldr	r2, [pc, #296]	@ (80077cc <UART_SetConfig+0x2d8>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d125      	bne.n	80076f4 <UART_SetConfig+0x200>
 80076a8:	4b45      	ldr	r3, [pc, #276]	@ (80077c0 <UART_SetConfig+0x2cc>)
 80076aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076ae:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80076b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80076b4:	d016      	beq.n	80076e4 <UART_SetConfig+0x1f0>
 80076b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80076b8:	d818      	bhi.n	80076ec <UART_SetConfig+0x1f8>
 80076ba:	2b80      	cmp	r3, #128	@ 0x80
 80076bc:	d00a      	beq.n	80076d4 <UART_SetConfig+0x1e0>
 80076be:	2b80      	cmp	r3, #128	@ 0x80
 80076c0:	d814      	bhi.n	80076ec <UART_SetConfig+0x1f8>
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d002      	beq.n	80076cc <UART_SetConfig+0x1d8>
 80076c6:	2b40      	cmp	r3, #64	@ 0x40
 80076c8:	d008      	beq.n	80076dc <UART_SetConfig+0x1e8>
 80076ca:	e00f      	b.n	80076ec <UART_SetConfig+0x1f8>
 80076cc:	2300      	movs	r3, #0
 80076ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076d2:	e082      	b.n	80077da <UART_SetConfig+0x2e6>
 80076d4:	2302      	movs	r3, #2
 80076d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076da:	e07e      	b.n	80077da <UART_SetConfig+0x2e6>
 80076dc:	2304      	movs	r3, #4
 80076de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076e2:	e07a      	b.n	80077da <UART_SetConfig+0x2e6>
 80076e4:	2308      	movs	r3, #8
 80076e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076ea:	e076      	b.n	80077da <UART_SetConfig+0x2e6>
 80076ec:	2310      	movs	r3, #16
 80076ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076f2:	e072      	b.n	80077da <UART_SetConfig+0x2e6>
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a35      	ldr	r2, [pc, #212]	@ (80077d0 <UART_SetConfig+0x2dc>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d12a      	bne.n	8007754 <UART_SetConfig+0x260>
 80076fe:	4b30      	ldr	r3, [pc, #192]	@ (80077c0 <UART_SetConfig+0x2cc>)
 8007700:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007704:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007708:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800770c:	d01a      	beq.n	8007744 <UART_SetConfig+0x250>
 800770e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007712:	d81b      	bhi.n	800774c <UART_SetConfig+0x258>
 8007714:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007718:	d00c      	beq.n	8007734 <UART_SetConfig+0x240>
 800771a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800771e:	d815      	bhi.n	800774c <UART_SetConfig+0x258>
 8007720:	2b00      	cmp	r3, #0
 8007722:	d003      	beq.n	800772c <UART_SetConfig+0x238>
 8007724:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007728:	d008      	beq.n	800773c <UART_SetConfig+0x248>
 800772a:	e00f      	b.n	800774c <UART_SetConfig+0x258>
 800772c:	2300      	movs	r3, #0
 800772e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007732:	e052      	b.n	80077da <UART_SetConfig+0x2e6>
 8007734:	2302      	movs	r3, #2
 8007736:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800773a:	e04e      	b.n	80077da <UART_SetConfig+0x2e6>
 800773c:	2304      	movs	r3, #4
 800773e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007742:	e04a      	b.n	80077da <UART_SetConfig+0x2e6>
 8007744:	2308      	movs	r3, #8
 8007746:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800774a:	e046      	b.n	80077da <UART_SetConfig+0x2e6>
 800774c:	2310      	movs	r3, #16
 800774e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007752:	e042      	b.n	80077da <UART_SetConfig+0x2e6>
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a17      	ldr	r2, [pc, #92]	@ (80077b8 <UART_SetConfig+0x2c4>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d13a      	bne.n	80077d4 <UART_SetConfig+0x2e0>
 800775e:	4b18      	ldr	r3, [pc, #96]	@ (80077c0 <UART_SetConfig+0x2cc>)
 8007760:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007764:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007768:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800776c:	d01a      	beq.n	80077a4 <UART_SetConfig+0x2b0>
 800776e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007772:	d81b      	bhi.n	80077ac <UART_SetConfig+0x2b8>
 8007774:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007778:	d00c      	beq.n	8007794 <UART_SetConfig+0x2a0>
 800777a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800777e:	d815      	bhi.n	80077ac <UART_SetConfig+0x2b8>
 8007780:	2b00      	cmp	r3, #0
 8007782:	d003      	beq.n	800778c <UART_SetConfig+0x298>
 8007784:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007788:	d008      	beq.n	800779c <UART_SetConfig+0x2a8>
 800778a:	e00f      	b.n	80077ac <UART_SetConfig+0x2b8>
 800778c:	2300      	movs	r3, #0
 800778e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007792:	e022      	b.n	80077da <UART_SetConfig+0x2e6>
 8007794:	2302      	movs	r3, #2
 8007796:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800779a:	e01e      	b.n	80077da <UART_SetConfig+0x2e6>
 800779c:	2304      	movs	r3, #4
 800779e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077a2:	e01a      	b.n	80077da <UART_SetConfig+0x2e6>
 80077a4:	2308      	movs	r3, #8
 80077a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077aa:	e016      	b.n	80077da <UART_SetConfig+0x2e6>
 80077ac:	2310      	movs	r3, #16
 80077ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077b2:	e012      	b.n	80077da <UART_SetConfig+0x2e6>
 80077b4:	efff69f3 	.word	0xefff69f3
 80077b8:	40008000 	.word	0x40008000
 80077bc:	40013800 	.word	0x40013800
 80077c0:	40021000 	.word	0x40021000
 80077c4:	40004400 	.word	0x40004400
 80077c8:	40004800 	.word	0x40004800
 80077cc:	40004c00 	.word	0x40004c00
 80077d0:	40005000 	.word	0x40005000
 80077d4:	2310      	movs	r3, #16
 80077d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a9f      	ldr	r2, [pc, #636]	@ (8007a5c <UART_SetConfig+0x568>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d17a      	bne.n	80078da <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80077e4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80077e8:	2b08      	cmp	r3, #8
 80077ea:	d824      	bhi.n	8007836 <UART_SetConfig+0x342>
 80077ec:	a201      	add	r2, pc, #4	@ (adr r2, 80077f4 <UART_SetConfig+0x300>)
 80077ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077f2:	bf00      	nop
 80077f4:	08007819 	.word	0x08007819
 80077f8:	08007837 	.word	0x08007837
 80077fc:	08007821 	.word	0x08007821
 8007800:	08007837 	.word	0x08007837
 8007804:	08007827 	.word	0x08007827
 8007808:	08007837 	.word	0x08007837
 800780c:	08007837 	.word	0x08007837
 8007810:	08007837 	.word	0x08007837
 8007814:	0800782f 	.word	0x0800782f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007818:	f7fd fa24 	bl	8004c64 <HAL_RCC_GetPCLK1Freq>
 800781c:	61f8      	str	r0, [r7, #28]
        break;
 800781e:	e010      	b.n	8007842 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007820:	4b8f      	ldr	r3, [pc, #572]	@ (8007a60 <UART_SetConfig+0x56c>)
 8007822:	61fb      	str	r3, [r7, #28]
        break;
 8007824:	e00d      	b.n	8007842 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007826:	f7fd f985 	bl	8004b34 <HAL_RCC_GetSysClockFreq>
 800782a:	61f8      	str	r0, [r7, #28]
        break;
 800782c:	e009      	b.n	8007842 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800782e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007832:	61fb      	str	r3, [r7, #28]
        break;
 8007834:	e005      	b.n	8007842 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007836:	2300      	movs	r3, #0
 8007838:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800783a:	2301      	movs	r3, #1
 800783c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007840:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007842:	69fb      	ldr	r3, [r7, #28]
 8007844:	2b00      	cmp	r3, #0
 8007846:	f000 80fb 	beq.w	8007a40 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	685a      	ldr	r2, [r3, #4]
 800784e:	4613      	mov	r3, r2
 8007850:	005b      	lsls	r3, r3, #1
 8007852:	4413      	add	r3, r2
 8007854:	69fa      	ldr	r2, [r7, #28]
 8007856:	429a      	cmp	r2, r3
 8007858:	d305      	bcc.n	8007866 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007860:	69fa      	ldr	r2, [r7, #28]
 8007862:	429a      	cmp	r2, r3
 8007864:	d903      	bls.n	800786e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007866:	2301      	movs	r3, #1
 8007868:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800786c:	e0e8      	b.n	8007a40 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800786e:	69fb      	ldr	r3, [r7, #28]
 8007870:	2200      	movs	r2, #0
 8007872:	461c      	mov	r4, r3
 8007874:	4615      	mov	r5, r2
 8007876:	f04f 0200 	mov.w	r2, #0
 800787a:	f04f 0300 	mov.w	r3, #0
 800787e:	022b      	lsls	r3, r5, #8
 8007880:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007884:	0222      	lsls	r2, r4, #8
 8007886:	68f9      	ldr	r1, [r7, #12]
 8007888:	6849      	ldr	r1, [r1, #4]
 800788a:	0849      	lsrs	r1, r1, #1
 800788c:	2000      	movs	r0, #0
 800788e:	4688      	mov	r8, r1
 8007890:	4681      	mov	r9, r0
 8007892:	eb12 0a08 	adds.w	sl, r2, r8
 8007896:	eb43 0b09 	adc.w	fp, r3, r9
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	2200      	movs	r2, #0
 80078a0:	603b      	str	r3, [r7, #0]
 80078a2:	607a      	str	r2, [r7, #4]
 80078a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078a8:	4650      	mov	r0, sl
 80078aa:	4659      	mov	r1, fp
 80078ac:	f7f9 f9ec 	bl	8000c88 <__aeabi_uldivmod>
 80078b0:	4602      	mov	r2, r0
 80078b2:	460b      	mov	r3, r1
 80078b4:	4613      	mov	r3, r2
 80078b6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80078b8:	69bb      	ldr	r3, [r7, #24]
 80078ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80078be:	d308      	bcc.n	80078d2 <UART_SetConfig+0x3de>
 80078c0:	69bb      	ldr	r3, [r7, #24]
 80078c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80078c6:	d204      	bcs.n	80078d2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	69ba      	ldr	r2, [r7, #24]
 80078ce:	60da      	str	r2, [r3, #12]
 80078d0:	e0b6      	b.n	8007a40 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80078d2:	2301      	movs	r3, #1
 80078d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80078d8:	e0b2      	b.n	8007a40 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	69db      	ldr	r3, [r3, #28]
 80078de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80078e2:	d15e      	bne.n	80079a2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80078e4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80078e8:	2b08      	cmp	r3, #8
 80078ea:	d828      	bhi.n	800793e <UART_SetConfig+0x44a>
 80078ec:	a201      	add	r2, pc, #4	@ (adr r2, 80078f4 <UART_SetConfig+0x400>)
 80078ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078f2:	bf00      	nop
 80078f4:	08007919 	.word	0x08007919
 80078f8:	08007921 	.word	0x08007921
 80078fc:	08007929 	.word	0x08007929
 8007900:	0800793f 	.word	0x0800793f
 8007904:	0800792f 	.word	0x0800792f
 8007908:	0800793f 	.word	0x0800793f
 800790c:	0800793f 	.word	0x0800793f
 8007910:	0800793f 	.word	0x0800793f
 8007914:	08007937 	.word	0x08007937
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007918:	f7fd f9a4 	bl	8004c64 <HAL_RCC_GetPCLK1Freq>
 800791c:	61f8      	str	r0, [r7, #28]
        break;
 800791e:	e014      	b.n	800794a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007920:	f7fd f9b6 	bl	8004c90 <HAL_RCC_GetPCLK2Freq>
 8007924:	61f8      	str	r0, [r7, #28]
        break;
 8007926:	e010      	b.n	800794a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007928:	4b4d      	ldr	r3, [pc, #308]	@ (8007a60 <UART_SetConfig+0x56c>)
 800792a:	61fb      	str	r3, [r7, #28]
        break;
 800792c:	e00d      	b.n	800794a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800792e:	f7fd f901 	bl	8004b34 <HAL_RCC_GetSysClockFreq>
 8007932:	61f8      	str	r0, [r7, #28]
        break;
 8007934:	e009      	b.n	800794a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007936:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800793a:	61fb      	str	r3, [r7, #28]
        break;
 800793c:	e005      	b.n	800794a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800793e:	2300      	movs	r3, #0
 8007940:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007942:	2301      	movs	r3, #1
 8007944:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007948:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800794a:	69fb      	ldr	r3, [r7, #28]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d077      	beq.n	8007a40 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007950:	69fb      	ldr	r3, [r7, #28]
 8007952:	005a      	lsls	r2, r3, #1
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	085b      	lsrs	r3, r3, #1
 800795a:	441a      	add	r2, r3
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	fbb2 f3f3 	udiv	r3, r2, r3
 8007964:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007966:	69bb      	ldr	r3, [r7, #24]
 8007968:	2b0f      	cmp	r3, #15
 800796a:	d916      	bls.n	800799a <UART_SetConfig+0x4a6>
 800796c:	69bb      	ldr	r3, [r7, #24]
 800796e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007972:	d212      	bcs.n	800799a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007974:	69bb      	ldr	r3, [r7, #24]
 8007976:	b29b      	uxth	r3, r3
 8007978:	f023 030f 	bic.w	r3, r3, #15
 800797c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800797e:	69bb      	ldr	r3, [r7, #24]
 8007980:	085b      	lsrs	r3, r3, #1
 8007982:	b29b      	uxth	r3, r3
 8007984:	f003 0307 	and.w	r3, r3, #7
 8007988:	b29a      	uxth	r2, r3
 800798a:	8afb      	ldrh	r3, [r7, #22]
 800798c:	4313      	orrs	r3, r2
 800798e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	8afa      	ldrh	r2, [r7, #22]
 8007996:	60da      	str	r2, [r3, #12]
 8007998:	e052      	b.n	8007a40 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800799a:	2301      	movs	r3, #1
 800799c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80079a0:	e04e      	b.n	8007a40 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80079a2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80079a6:	2b08      	cmp	r3, #8
 80079a8:	d827      	bhi.n	80079fa <UART_SetConfig+0x506>
 80079aa:	a201      	add	r2, pc, #4	@ (adr r2, 80079b0 <UART_SetConfig+0x4bc>)
 80079ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b0:	080079d5 	.word	0x080079d5
 80079b4:	080079dd 	.word	0x080079dd
 80079b8:	080079e5 	.word	0x080079e5
 80079bc:	080079fb 	.word	0x080079fb
 80079c0:	080079eb 	.word	0x080079eb
 80079c4:	080079fb 	.word	0x080079fb
 80079c8:	080079fb 	.word	0x080079fb
 80079cc:	080079fb 	.word	0x080079fb
 80079d0:	080079f3 	.word	0x080079f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079d4:	f7fd f946 	bl	8004c64 <HAL_RCC_GetPCLK1Freq>
 80079d8:	61f8      	str	r0, [r7, #28]
        break;
 80079da:	e014      	b.n	8007a06 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079dc:	f7fd f958 	bl	8004c90 <HAL_RCC_GetPCLK2Freq>
 80079e0:	61f8      	str	r0, [r7, #28]
        break;
 80079e2:	e010      	b.n	8007a06 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80079e4:	4b1e      	ldr	r3, [pc, #120]	@ (8007a60 <UART_SetConfig+0x56c>)
 80079e6:	61fb      	str	r3, [r7, #28]
        break;
 80079e8:	e00d      	b.n	8007a06 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80079ea:	f7fd f8a3 	bl	8004b34 <HAL_RCC_GetSysClockFreq>
 80079ee:	61f8      	str	r0, [r7, #28]
        break;
 80079f0:	e009      	b.n	8007a06 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80079f6:	61fb      	str	r3, [r7, #28]
        break;
 80079f8:	e005      	b.n	8007a06 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80079fa:	2300      	movs	r3, #0
 80079fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80079fe:	2301      	movs	r3, #1
 8007a00:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007a04:	bf00      	nop
    }

    if (pclk != 0U)
 8007a06:	69fb      	ldr	r3, [r7, #28]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d019      	beq.n	8007a40 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	085a      	lsrs	r2, r3, #1
 8007a12:	69fb      	ldr	r3, [r7, #28]
 8007a14:	441a      	add	r2, r3
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a1e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a20:	69bb      	ldr	r3, [r7, #24]
 8007a22:	2b0f      	cmp	r3, #15
 8007a24:	d909      	bls.n	8007a3a <UART_SetConfig+0x546>
 8007a26:	69bb      	ldr	r3, [r7, #24]
 8007a28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a2c:	d205      	bcs.n	8007a3a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007a2e:	69bb      	ldr	r3, [r7, #24]
 8007a30:	b29a      	uxth	r2, r3
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	60da      	str	r2, [r3, #12]
 8007a38:	e002      	b.n	8007a40 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2200      	movs	r2, #0
 8007a44:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007a4c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3728      	adds	r7, #40	@ 0x28
 8007a54:	46bd      	mov	sp, r7
 8007a56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a5a:	bf00      	nop
 8007a5c:	40008000 	.word	0x40008000
 8007a60:	00f42400 	.word	0x00f42400

08007a64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b083      	sub	sp, #12
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a70:	f003 0308 	and.w	r3, r3, #8
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d00a      	beq.n	8007a8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	430a      	orrs	r2, r1
 8007a8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a92:	f003 0301 	and.w	r3, r3, #1
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d00a      	beq.n	8007ab0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	430a      	orrs	r2, r1
 8007aae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ab4:	f003 0302 	and.w	r3, r3, #2
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d00a      	beq.n	8007ad2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	430a      	orrs	r2, r1
 8007ad0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ad6:	f003 0304 	and.w	r3, r3, #4
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d00a      	beq.n	8007af4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	430a      	orrs	r2, r1
 8007af2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007af8:	f003 0310 	and.w	r3, r3, #16
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d00a      	beq.n	8007b16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	430a      	orrs	r2, r1
 8007b14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b1a:	f003 0320 	and.w	r3, r3, #32
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d00a      	beq.n	8007b38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	689b      	ldr	r3, [r3, #8]
 8007b28:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	430a      	orrs	r2, r1
 8007b36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d01a      	beq.n	8007b7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	430a      	orrs	r2, r1
 8007b58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007b62:	d10a      	bne.n	8007b7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	430a      	orrs	r2, r1
 8007b78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d00a      	beq.n	8007b9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	430a      	orrs	r2, r1
 8007b9a:	605a      	str	r2, [r3, #4]
  }
}
 8007b9c:	bf00      	nop
 8007b9e:	370c      	adds	r7, #12
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr

08007ba8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b098      	sub	sp, #96	@ 0x60
 8007bac:	af02      	add	r7, sp, #8
 8007bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007bb8:	f7fb f954 	bl	8002e64 <HAL_GetTick>
 8007bbc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f003 0308 	and.w	r3, r3, #8
 8007bc8:	2b08      	cmp	r3, #8
 8007bca:	d12e      	bne.n	8007c2a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007bcc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007bd0:	9300      	str	r3, [sp, #0]
 8007bd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 f88c 	bl	8007cf8 <UART_WaitOnFlagUntilTimeout>
 8007be0:	4603      	mov	r3, r0
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d021      	beq.n	8007c2a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bee:	e853 3f00 	ldrex	r3, [r3]
 8007bf2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007bf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bf6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007bfa:	653b      	str	r3, [r7, #80]	@ 0x50
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	461a      	mov	r2, r3
 8007c02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c04:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c06:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c08:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007c0a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c0c:	e841 2300 	strex	r3, r2, [r1]
 8007c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007c12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d1e6      	bne.n	8007be6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2220      	movs	r2, #32
 8007c1c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2200      	movs	r2, #0
 8007c22:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c26:	2303      	movs	r3, #3
 8007c28:	e062      	b.n	8007cf0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f003 0304 	and.w	r3, r3, #4
 8007c34:	2b04      	cmp	r3, #4
 8007c36:	d149      	bne.n	8007ccc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c38:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007c3c:	9300      	str	r3, [sp, #0]
 8007c3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c40:	2200      	movs	r2, #0
 8007c42:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 f856 	bl	8007cf8 <UART_WaitOnFlagUntilTimeout>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d03c      	beq.n	8007ccc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c5a:	e853 3f00 	ldrex	r3, [r3]
 8007c5e:	623b      	str	r3, [r7, #32]
   return(result);
 8007c60:	6a3b      	ldr	r3, [r7, #32]
 8007c62:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007c66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	461a      	mov	r2, r3
 8007c6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c70:	633b      	str	r3, [r7, #48]	@ 0x30
 8007c72:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c74:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007c76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c78:	e841 2300 	strex	r3, r2, [r1]
 8007c7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007c7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d1e6      	bne.n	8007c52 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	3308      	adds	r3, #8
 8007c8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	e853 3f00 	ldrex	r3, [r3]
 8007c92:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f023 0301 	bic.w	r3, r3, #1
 8007c9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	3308      	adds	r3, #8
 8007ca2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007ca4:	61fa      	str	r2, [r7, #28]
 8007ca6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ca8:	69b9      	ldr	r1, [r7, #24]
 8007caa:	69fa      	ldr	r2, [r7, #28]
 8007cac:	e841 2300 	strex	r3, r2, [r1]
 8007cb0:	617b      	str	r3, [r7, #20]
   return(result);
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d1e5      	bne.n	8007c84 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2220      	movs	r2, #32
 8007cbc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007cc8:	2303      	movs	r3, #3
 8007cca:	e011      	b.n	8007cf0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2220      	movs	r2, #32
 8007cd0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2220      	movs	r2, #32
 8007cd6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007cee:	2300      	movs	r3, #0
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3758      	adds	r7, #88	@ 0x58
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}

08007cf8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b084      	sub	sp, #16
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	60f8      	str	r0, [r7, #12]
 8007d00:	60b9      	str	r1, [r7, #8]
 8007d02:	603b      	str	r3, [r7, #0]
 8007d04:	4613      	mov	r3, r2
 8007d06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d08:	e04f      	b.n	8007daa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d0a:	69bb      	ldr	r3, [r7, #24]
 8007d0c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007d10:	d04b      	beq.n	8007daa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d12:	f7fb f8a7 	bl	8002e64 <HAL_GetTick>
 8007d16:	4602      	mov	r2, r0
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	1ad3      	subs	r3, r2, r3
 8007d1c:	69ba      	ldr	r2, [r7, #24]
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	d302      	bcc.n	8007d28 <UART_WaitOnFlagUntilTimeout+0x30>
 8007d22:	69bb      	ldr	r3, [r7, #24]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d101      	bne.n	8007d2c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007d28:	2303      	movs	r3, #3
 8007d2a:	e04e      	b.n	8007dca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f003 0304 	and.w	r3, r3, #4
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d037      	beq.n	8007daa <UART_WaitOnFlagUntilTimeout+0xb2>
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	2b80      	cmp	r3, #128	@ 0x80
 8007d3e:	d034      	beq.n	8007daa <UART_WaitOnFlagUntilTimeout+0xb2>
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	2b40      	cmp	r3, #64	@ 0x40
 8007d44:	d031      	beq.n	8007daa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	69db      	ldr	r3, [r3, #28]
 8007d4c:	f003 0308 	and.w	r3, r3, #8
 8007d50:	2b08      	cmp	r3, #8
 8007d52:	d110      	bne.n	8007d76 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	2208      	movs	r2, #8
 8007d5a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007d5c:	68f8      	ldr	r0, [r7, #12]
 8007d5e:	f000 f838 	bl	8007dd2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2208      	movs	r2, #8
 8007d66:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007d72:	2301      	movs	r3, #1
 8007d74:	e029      	b.n	8007dca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	69db      	ldr	r3, [r3, #28]
 8007d7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007d80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d84:	d111      	bne.n	8007daa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007d8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007d90:	68f8      	ldr	r0, [r7, #12]
 8007d92:	f000 f81e 	bl	8007dd2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2220      	movs	r2, #32
 8007d9a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	2200      	movs	r2, #0
 8007da2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007da6:	2303      	movs	r3, #3
 8007da8:	e00f      	b.n	8007dca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	69da      	ldr	r2, [r3, #28]
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	4013      	ands	r3, r2
 8007db4:	68ba      	ldr	r2, [r7, #8]
 8007db6:	429a      	cmp	r2, r3
 8007db8:	bf0c      	ite	eq
 8007dba:	2301      	moveq	r3, #1
 8007dbc:	2300      	movne	r3, #0
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	79fb      	ldrb	r3, [r7, #7]
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d0a0      	beq.n	8007d0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007dc8:	2300      	movs	r3, #0
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3710      	adds	r7, #16
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}

08007dd2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007dd2:	b480      	push	{r7}
 8007dd4:	b095      	sub	sp, #84	@ 0x54
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007de0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007de2:	e853 3f00 	ldrex	r3, [r3]
 8007de6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007dee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	461a      	mov	r2, r3
 8007df6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007df8:	643b      	str	r3, [r7, #64]	@ 0x40
 8007dfa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dfc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007dfe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007e00:	e841 2300 	strex	r3, r2, [r1]
 8007e04:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007e06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d1e6      	bne.n	8007dda <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	3308      	adds	r3, #8
 8007e12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e14:	6a3b      	ldr	r3, [r7, #32]
 8007e16:	e853 3f00 	ldrex	r3, [r3]
 8007e1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e1c:	69fb      	ldr	r3, [r7, #28]
 8007e1e:	f023 0301 	bic.w	r3, r3, #1
 8007e22:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	3308      	adds	r3, #8
 8007e2a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007e2c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007e2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e30:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007e32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e34:	e841 2300 	strex	r3, r2, [r1]
 8007e38:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d1e5      	bne.n	8007e0c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	d118      	bne.n	8007e7a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	e853 3f00 	ldrex	r3, [r3]
 8007e54:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	f023 0310 	bic.w	r3, r3, #16
 8007e5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	461a      	mov	r2, r3
 8007e64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e66:	61bb      	str	r3, [r7, #24]
 8007e68:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e6a:	6979      	ldr	r1, [r7, #20]
 8007e6c:	69ba      	ldr	r2, [r7, #24]
 8007e6e:	e841 2300 	strex	r3, r2, [r1]
 8007e72:	613b      	str	r3, [r7, #16]
   return(result);
 8007e74:	693b      	ldr	r3, [r7, #16]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d1e6      	bne.n	8007e48 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2220      	movs	r2, #32
 8007e7e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2200      	movs	r2, #0
 8007e86:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007e8e:	bf00      	nop
 8007e90:	3754      	adds	r7, #84	@ 0x54
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr

08007e9a <__cvt>:
 8007e9a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e9e:	ec57 6b10 	vmov	r6, r7, d0
 8007ea2:	2f00      	cmp	r7, #0
 8007ea4:	460c      	mov	r4, r1
 8007ea6:	4619      	mov	r1, r3
 8007ea8:	463b      	mov	r3, r7
 8007eaa:	bfbb      	ittet	lt
 8007eac:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007eb0:	461f      	movlt	r7, r3
 8007eb2:	2300      	movge	r3, #0
 8007eb4:	232d      	movlt	r3, #45	@ 0x2d
 8007eb6:	700b      	strb	r3, [r1, #0]
 8007eb8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007eba:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007ebe:	4691      	mov	r9, r2
 8007ec0:	f023 0820 	bic.w	r8, r3, #32
 8007ec4:	bfbc      	itt	lt
 8007ec6:	4632      	movlt	r2, r6
 8007ec8:	4616      	movlt	r6, r2
 8007eca:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007ece:	d005      	beq.n	8007edc <__cvt+0x42>
 8007ed0:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007ed4:	d100      	bne.n	8007ed8 <__cvt+0x3e>
 8007ed6:	3401      	adds	r4, #1
 8007ed8:	2102      	movs	r1, #2
 8007eda:	e000      	b.n	8007ede <__cvt+0x44>
 8007edc:	2103      	movs	r1, #3
 8007ede:	ab03      	add	r3, sp, #12
 8007ee0:	9301      	str	r3, [sp, #4]
 8007ee2:	ab02      	add	r3, sp, #8
 8007ee4:	9300      	str	r3, [sp, #0]
 8007ee6:	ec47 6b10 	vmov	d0, r6, r7
 8007eea:	4653      	mov	r3, sl
 8007eec:	4622      	mov	r2, r4
 8007eee:	f001 fe93 	bl	8009c18 <_dtoa_r>
 8007ef2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007ef6:	4605      	mov	r5, r0
 8007ef8:	d119      	bne.n	8007f2e <__cvt+0x94>
 8007efa:	f019 0f01 	tst.w	r9, #1
 8007efe:	d00e      	beq.n	8007f1e <__cvt+0x84>
 8007f00:	eb00 0904 	add.w	r9, r0, r4
 8007f04:	2200      	movs	r2, #0
 8007f06:	2300      	movs	r3, #0
 8007f08:	4630      	mov	r0, r6
 8007f0a:	4639      	mov	r1, r7
 8007f0c:	f7f8 fddc 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f10:	b108      	cbz	r0, 8007f16 <__cvt+0x7c>
 8007f12:	f8cd 900c 	str.w	r9, [sp, #12]
 8007f16:	2230      	movs	r2, #48	@ 0x30
 8007f18:	9b03      	ldr	r3, [sp, #12]
 8007f1a:	454b      	cmp	r3, r9
 8007f1c:	d31e      	bcc.n	8007f5c <__cvt+0xc2>
 8007f1e:	9b03      	ldr	r3, [sp, #12]
 8007f20:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007f22:	1b5b      	subs	r3, r3, r5
 8007f24:	4628      	mov	r0, r5
 8007f26:	6013      	str	r3, [r2, #0]
 8007f28:	b004      	add	sp, #16
 8007f2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f2e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007f32:	eb00 0904 	add.w	r9, r0, r4
 8007f36:	d1e5      	bne.n	8007f04 <__cvt+0x6a>
 8007f38:	7803      	ldrb	r3, [r0, #0]
 8007f3a:	2b30      	cmp	r3, #48	@ 0x30
 8007f3c:	d10a      	bne.n	8007f54 <__cvt+0xba>
 8007f3e:	2200      	movs	r2, #0
 8007f40:	2300      	movs	r3, #0
 8007f42:	4630      	mov	r0, r6
 8007f44:	4639      	mov	r1, r7
 8007f46:	f7f8 fdbf 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f4a:	b918      	cbnz	r0, 8007f54 <__cvt+0xba>
 8007f4c:	f1c4 0401 	rsb	r4, r4, #1
 8007f50:	f8ca 4000 	str.w	r4, [sl]
 8007f54:	f8da 3000 	ldr.w	r3, [sl]
 8007f58:	4499      	add	r9, r3
 8007f5a:	e7d3      	b.n	8007f04 <__cvt+0x6a>
 8007f5c:	1c59      	adds	r1, r3, #1
 8007f5e:	9103      	str	r1, [sp, #12]
 8007f60:	701a      	strb	r2, [r3, #0]
 8007f62:	e7d9      	b.n	8007f18 <__cvt+0x7e>

08007f64 <__exponent>:
 8007f64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f66:	2900      	cmp	r1, #0
 8007f68:	bfba      	itte	lt
 8007f6a:	4249      	neglt	r1, r1
 8007f6c:	232d      	movlt	r3, #45	@ 0x2d
 8007f6e:	232b      	movge	r3, #43	@ 0x2b
 8007f70:	2909      	cmp	r1, #9
 8007f72:	7002      	strb	r2, [r0, #0]
 8007f74:	7043      	strb	r3, [r0, #1]
 8007f76:	dd29      	ble.n	8007fcc <__exponent+0x68>
 8007f78:	f10d 0307 	add.w	r3, sp, #7
 8007f7c:	461d      	mov	r5, r3
 8007f7e:	270a      	movs	r7, #10
 8007f80:	461a      	mov	r2, r3
 8007f82:	fbb1 f6f7 	udiv	r6, r1, r7
 8007f86:	fb07 1416 	mls	r4, r7, r6, r1
 8007f8a:	3430      	adds	r4, #48	@ 0x30
 8007f8c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007f90:	460c      	mov	r4, r1
 8007f92:	2c63      	cmp	r4, #99	@ 0x63
 8007f94:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8007f98:	4631      	mov	r1, r6
 8007f9a:	dcf1      	bgt.n	8007f80 <__exponent+0x1c>
 8007f9c:	3130      	adds	r1, #48	@ 0x30
 8007f9e:	1e94      	subs	r4, r2, #2
 8007fa0:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007fa4:	1c41      	adds	r1, r0, #1
 8007fa6:	4623      	mov	r3, r4
 8007fa8:	42ab      	cmp	r3, r5
 8007faa:	d30a      	bcc.n	8007fc2 <__exponent+0x5e>
 8007fac:	f10d 0309 	add.w	r3, sp, #9
 8007fb0:	1a9b      	subs	r3, r3, r2
 8007fb2:	42ac      	cmp	r4, r5
 8007fb4:	bf88      	it	hi
 8007fb6:	2300      	movhi	r3, #0
 8007fb8:	3302      	adds	r3, #2
 8007fba:	4403      	add	r3, r0
 8007fbc:	1a18      	subs	r0, r3, r0
 8007fbe:	b003      	add	sp, #12
 8007fc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fc2:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007fc6:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007fca:	e7ed      	b.n	8007fa8 <__exponent+0x44>
 8007fcc:	2330      	movs	r3, #48	@ 0x30
 8007fce:	3130      	adds	r1, #48	@ 0x30
 8007fd0:	7083      	strb	r3, [r0, #2]
 8007fd2:	70c1      	strb	r1, [r0, #3]
 8007fd4:	1d03      	adds	r3, r0, #4
 8007fd6:	e7f1      	b.n	8007fbc <__exponent+0x58>

08007fd8 <_printf_float>:
 8007fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fdc:	b08d      	sub	sp, #52	@ 0x34
 8007fde:	460c      	mov	r4, r1
 8007fe0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007fe4:	4616      	mov	r6, r2
 8007fe6:	461f      	mov	r7, r3
 8007fe8:	4605      	mov	r5, r0
 8007fea:	f001 fd69 	bl	8009ac0 <_localeconv_r>
 8007fee:	6803      	ldr	r3, [r0, #0]
 8007ff0:	9304      	str	r3, [sp, #16]
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f7f8 f93c 	bl	8000270 <strlen>
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ffc:	f8d8 3000 	ldr.w	r3, [r8]
 8008000:	9005      	str	r0, [sp, #20]
 8008002:	3307      	adds	r3, #7
 8008004:	f023 0307 	bic.w	r3, r3, #7
 8008008:	f103 0208 	add.w	r2, r3, #8
 800800c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008010:	f8d4 b000 	ldr.w	fp, [r4]
 8008014:	f8c8 2000 	str.w	r2, [r8]
 8008018:	e9d3 8900 	ldrd	r8, r9, [r3]
 800801c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008020:	9307      	str	r3, [sp, #28]
 8008022:	f8cd 8018 	str.w	r8, [sp, #24]
 8008026:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800802a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800802e:	4b9c      	ldr	r3, [pc, #624]	@ (80082a0 <_printf_float+0x2c8>)
 8008030:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008034:	f7f8 fd7a 	bl	8000b2c <__aeabi_dcmpun>
 8008038:	bb70      	cbnz	r0, 8008098 <_printf_float+0xc0>
 800803a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800803e:	4b98      	ldr	r3, [pc, #608]	@ (80082a0 <_printf_float+0x2c8>)
 8008040:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008044:	f7f8 fd54 	bl	8000af0 <__aeabi_dcmple>
 8008048:	bb30      	cbnz	r0, 8008098 <_printf_float+0xc0>
 800804a:	2200      	movs	r2, #0
 800804c:	2300      	movs	r3, #0
 800804e:	4640      	mov	r0, r8
 8008050:	4649      	mov	r1, r9
 8008052:	f7f8 fd43 	bl	8000adc <__aeabi_dcmplt>
 8008056:	b110      	cbz	r0, 800805e <_printf_float+0x86>
 8008058:	232d      	movs	r3, #45	@ 0x2d
 800805a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800805e:	4a91      	ldr	r2, [pc, #580]	@ (80082a4 <_printf_float+0x2cc>)
 8008060:	4b91      	ldr	r3, [pc, #580]	@ (80082a8 <_printf_float+0x2d0>)
 8008062:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008066:	bf8c      	ite	hi
 8008068:	4690      	movhi	r8, r2
 800806a:	4698      	movls	r8, r3
 800806c:	2303      	movs	r3, #3
 800806e:	6123      	str	r3, [r4, #16]
 8008070:	f02b 0304 	bic.w	r3, fp, #4
 8008074:	6023      	str	r3, [r4, #0]
 8008076:	f04f 0900 	mov.w	r9, #0
 800807a:	9700      	str	r7, [sp, #0]
 800807c:	4633      	mov	r3, r6
 800807e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008080:	4621      	mov	r1, r4
 8008082:	4628      	mov	r0, r5
 8008084:	f000 f9d2 	bl	800842c <_printf_common>
 8008088:	3001      	adds	r0, #1
 800808a:	f040 808d 	bne.w	80081a8 <_printf_float+0x1d0>
 800808e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008092:	b00d      	add	sp, #52	@ 0x34
 8008094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008098:	4642      	mov	r2, r8
 800809a:	464b      	mov	r3, r9
 800809c:	4640      	mov	r0, r8
 800809e:	4649      	mov	r1, r9
 80080a0:	f7f8 fd44 	bl	8000b2c <__aeabi_dcmpun>
 80080a4:	b140      	cbz	r0, 80080b8 <_printf_float+0xe0>
 80080a6:	464b      	mov	r3, r9
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	bfbc      	itt	lt
 80080ac:	232d      	movlt	r3, #45	@ 0x2d
 80080ae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80080b2:	4a7e      	ldr	r2, [pc, #504]	@ (80082ac <_printf_float+0x2d4>)
 80080b4:	4b7e      	ldr	r3, [pc, #504]	@ (80082b0 <_printf_float+0x2d8>)
 80080b6:	e7d4      	b.n	8008062 <_printf_float+0x8a>
 80080b8:	6863      	ldr	r3, [r4, #4]
 80080ba:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80080be:	9206      	str	r2, [sp, #24]
 80080c0:	1c5a      	adds	r2, r3, #1
 80080c2:	d13b      	bne.n	800813c <_printf_float+0x164>
 80080c4:	2306      	movs	r3, #6
 80080c6:	6063      	str	r3, [r4, #4]
 80080c8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80080cc:	2300      	movs	r3, #0
 80080ce:	6022      	str	r2, [r4, #0]
 80080d0:	9303      	str	r3, [sp, #12]
 80080d2:	ab0a      	add	r3, sp, #40	@ 0x28
 80080d4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80080d8:	ab09      	add	r3, sp, #36	@ 0x24
 80080da:	9300      	str	r3, [sp, #0]
 80080dc:	6861      	ldr	r1, [r4, #4]
 80080de:	ec49 8b10 	vmov	d0, r8, r9
 80080e2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80080e6:	4628      	mov	r0, r5
 80080e8:	f7ff fed7 	bl	8007e9a <__cvt>
 80080ec:	9b06      	ldr	r3, [sp, #24]
 80080ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80080f0:	2b47      	cmp	r3, #71	@ 0x47
 80080f2:	4680      	mov	r8, r0
 80080f4:	d129      	bne.n	800814a <_printf_float+0x172>
 80080f6:	1cc8      	adds	r0, r1, #3
 80080f8:	db02      	blt.n	8008100 <_printf_float+0x128>
 80080fa:	6863      	ldr	r3, [r4, #4]
 80080fc:	4299      	cmp	r1, r3
 80080fe:	dd41      	ble.n	8008184 <_printf_float+0x1ac>
 8008100:	f1aa 0a02 	sub.w	sl, sl, #2
 8008104:	fa5f fa8a 	uxtb.w	sl, sl
 8008108:	3901      	subs	r1, #1
 800810a:	4652      	mov	r2, sl
 800810c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008110:	9109      	str	r1, [sp, #36]	@ 0x24
 8008112:	f7ff ff27 	bl	8007f64 <__exponent>
 8008116:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008118:	1813      	adds	r3, r2, r0
 800811a:	2a01      	cmp	r2, #1
 800811c:	4681      	mov	r9, r0
 800811e:	6123      	str	r3, [r4, #16]
 8008120:	dc02      	bgt.n	8008128 <_printf_float+0x150>
 8008122:	6822      	ldr	r2, [r4, #0]
 8008124:	07d2      	lsls	r2, r2, #31
 8008126:	d501      	bpl.n	800812c <_printf_float+0x154>
 8008128:	3301      	adds	r3, #1
 800812a:	6123      	str	r3, [r4, #16]
 800812c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008130:	2b00      	cmp	r3, #0
 8008132:	d0a2      	beq.n	800807a <_printf_float+0xa2>
 8008134:	232d      	movs	r3, #45	@ 0x2d
 8008136:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800813a:	e79e      	b.n	800807a <_printf_float+0xa2>
 800813c:	9a06      	ldr	r2, [sp, #24]
 800813e:	2a47      	cmp	r2, #71	@ 0x47
 8008140:	d1c2      	bne.n	80080c8 <_printf_float+0xf0>
 8008142:	2b00      	cmp	r3, #0
 8008144:	d1c0      	bne.n	80080c8 <_printf_float+0xf0>
 8008146:	2301      	movs	r3, #1
 8008148:	e7bd      	b.n	80080c6 <_printf_float+0xee>
 800814a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800814e:	d9db      	bls.n	8008108 <_printf_float+0x130>
 8008150:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008154:	d118      	bne.n	8008188 <_printf_float+0x1b0>
 8008156:	2900      	cmp	r1, #0
 8008158:	6863      	ldr	r3, [r4, #4]
 800815a:	dd0b      	ble.n	8008174 <_printf_float+0x19c>
 800815c:	6121      	str	r1, [r4, #16]
 800815e:	b913      	cbnz	r3, 8008166 <_printf_float+0x18e>
 8008160:	6822      	ldr	r2, [r4, #0]
 8008162:	07d0      	lsls	r0, r2, #31
 8008164:	d502      	bpl.n	800816c <_printf_float+0x194>
 8008166:	3301      	adds	r3, #1
 8008168:	440b      	add	r3, r1
 800816a:	6123      	str	r3, [r4, #16]
 800816c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800816e:	f04f 0900 	mov.w	r9, #0
 8008172:	e7db      	b.n	800812c <_printf_float+0x154>
 8008174:	b913      	cbnz	r3, 800817c <_printf_float+0x1a4>
 8008176:	6822      	ldr	r2, [r4, #0]
 8008178:	07d2      	lsls	r2, r2, #31
 800817a:	d501      	bpl.n	8008180 <_printf_float+0x1a8>
 800817c:	3302      	adds	r3, #2
 800817e:	e7f4      	b.n	800816a <_printf_float+0x192>
 8008180:	2301      	movs	r3, #1
 8008182:	e7f2      	b.n	800816a <_printf_float+0x192>
 8008184:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008188:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800818a:	4299      	cmp	r1, r3
 800818c:	db05      	blt.n	800819a <_printf_float+0x1c2>
 800818e:	6823      	ldr	r3, [r4, #0]
 8008190:	6121      	str	r1, [r4, #16]
 8008192:	07d8      	lsls	r0, r3, #31
 8008194:	d5ea      	bpl.n	800816c <_printf_float+0x194>
 8008196:	1c4b      	adds	r3, r1, #1
 8008198:	e7e7      	b.n	800816a <_printf_float+0x192>
 800819a:	2900      	cmp	r1, #0
 800819c:	bfd4      	ite	le
 800819e:	f1c1 0202 	rsble	r2, r1, #2
 80081a2:	2201      	movgt	r2, #1
 80081a4:	4413      	add	r3, r2
 80081a6:	e7e0      	b.n	800816a <_printf_float+0x192>
 80081a8:	6823      	ldr	r3, [r4, #0]
 80081aa:	055a      	lsls	r2, r3, #21
 80081ac:	d407      	bmi.n	80081be <_printf_float+0x1e6>
 80081ae:	6923      	ldr	r3, [r4, #16]
 80081b0:	4642      	mov	r2, r8
 80081b2:	4631      	mov	r1, r6
 80081b4:	4628      	mov	r0, r5
 80081b6:	47b8      	blx	r7
 80081b8:	3001      	adds	r0, #1
 80081ba:	d12b      	bne.n	8008214 <_printf_float+0x23c>
 80081bc:	e767      	b.n	800808e <_printf_float+0xb6>
 80081be:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80081c2:	f240 80dd 	bls.w	8008380 <_printf_float+0x3a8>
 80081c6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80081ca:	2200      	movs	r2, #0
 80081cc:	2300      	movs	r3, #0
 80081ce:	f7f8 fc7b 	bl	8000ac8 <__aeabi_dcmpeq>
 80081d2:	2800      	cmp	r0, #0
 80081d4:	d033      	beq.n	800823e <_printf_float+0x266>
 80081d6:	4a37      	ldr	r2, [pc, #220]	@ (80082b4 <_printf_float+0x2dc>)
 80081d8:	2301      	movs	r3, #1
 80081da:	4631      	mov	r1, r6
 80081dc:	4628      	mov	r0, r5
 80081de:	47b8      	blx	r7
 80081e0:	3001      	adds	r0, #1
 80081e2:	f43f af54 	beq.w	800808e <_printf_float+0xb6>
 80081e6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80081ea:	4543      	cmp	r3, r8
 80081ec:	db02      	blt.n	80081f4 <_printf_float+0x21c>
 80081ee:	6823      	ldr	r3, [r4, #0]
 80081f0:	07d8      	lsls	r0, r3, #31
 80081f2:	d50f      	bpl.n	8008214 <_printf_float+0x23c>
 80081f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081f8:	4631      	mov	r1, r6
 80081fa:	4628      	mov	r0, r5
 80081fc:	47b8      	blx	r7
 80081fe:	3001      	adds	r0, #1
 8008200:	f43f af45 	beq.w	800808e <_printf_float+0xb6>
 8008204:	f04f 0900 	mov.w	r9, #0
 8008208:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800820c:	f104 0a1a 	add.w	sl, r4, #26
 8008210:	45c8      	cmp	r8, r9
 8008212:	dc09      	bgt.n	8008228 <_printf_float+0x250>
 8008214:	6823      	ldr	r3, [r4, #0]
 8008216:	079b      	lsls	r3, r3, #30
 8008218:	f100 8103 	bmi.w	8008422 <_printf_float+0x44a>
 800821c:	68e0      	ldr	r0, [r4, #12]
 800821e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008220:	4298      	cmp	r0, r3
 8008222:	bfb8      	it	lt
 8008224:	4618      	movlt	r0, r3
 8008226:	e734      	b.n	8008092 <_printf_float+0xba>
 8008228:	2301      	movs	r3, #1
 800822a:	4652      	mov	r2, sl
 800822c:	4631      	mov	r1, r6
 800822e:	4628      	mov	r0, r5
 8008230:	47b8      	blx	r7
 8008232:	3001      	adds	r0, #1
 8008234:	f43f af2b 	beq.w	800808e <_printf_float+0xb6>
 8008238:	f109 0901 	add.w	r9, r9, #1
 800823c:	e7e8      	b.n	8008210 <_printf_float+0x238>
 800823e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008240:	2b00      	cmp	r3, #0
 8008242:	dc39      	bgt.n	80082b8 <_printf_float+0x2e0>
 8008244:	4a1b      	ldr	r2, [pc, #108]	@ (80082b4 <_printf_float+0x2dc>)
 8008246:	2301      	movs	r3, #1
 8008248:	4631      	mov	r1, r6
 800824a:	4628      	mov	r0, r5
 800824c:	47b8      	blx	r7
 800824e:	3001      	adds	r0, #1
 8008250:	f43f af1d 	beq.w	800808e <_printf_float+0xb6>
 8008254:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008258:	ea59 0303 	orrs.w	r3, r9, r3
 800825c:	d102      	bne.n	8008264 <_printf_float+0x28c>
 800825e:	6823      	ldr	r3, [r4, #0]
 8008260:	07d9      	lsls	r1, r3, #31
 8008262:	d5d7      	bpl.n	8008214 <_printf_float+0x23c>
 8008264:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008268:	4631      	mov	r1, r6
 800826a:	4628      	mov	r0, r5
 800826c:	47b8      	blx	r7
 800826e:	3001      	adds	r0, #1
 8008270:	f43f af0d 	beq.w	800808e <_printf_float+0xb6>
 8008274:	f04f 0a00 	mov.w	sl, #0
 8008278:	f104 0b1a 	add.w	fp, r4, #26
 800827c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800827e:	425b      	negs	r3, r3
 8008280:	4553      	cmp	r3, sl
 8008282:	dc01      	bgt.n	8008288 <_printf_float+0x2b0>
 8008284:	464b      	mov	r3, r9
 8008286:	e793      	b.n	80081b0 <_printf_float+0x1d8>
 8008288:	2301      	movs	r3, #1
 800828a:	465a      	mov	r2, fp
 800828c:	4631      	mov	r1, r6
 800828e:	4628      	mov	r0, r5
 8008290:	47b8      	blx	r7
 8008292:	3001      	adds	r0, #1
 8008294:	f43f aefb 	beq.w	800808e <_printf_float+0xb6>
 8008298:	f10a 0a01 	add.w	sl, sl, #1
 800829c:	e7ee      	b.n	800827c <_printf_float+0x2a4>
 800829e:	bf00      	nop
 80082a0:	7fefffff 	.word	0x7fefffff
 80082a4:	0800c90c 	.word	0x0800c90c
 80082a8:	0800c908 	.word	0x0800c908
 80082ac:	0800c914 	.word	0x0800c914
 80082b0:	0800c910 	.word	0x0800c910
 80082b4:	0800c918 	.word	0x0800c918
 80082b8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80082ba:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80082be:	4553      	cmp	r3, sl
 80082c0:	bfa8      	it	ge
 80082c2:	4653      	movge	r3, sl
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	4699      	mov	r9, r3
 80082c8:	dc36      	bgt.n	8008338 <_printf_float+0x360>
 80082ca:	f04f 0b00 	mov.w	fp, #0
 80082ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80082d2:	f104 021a 	add.w	r2, r4, #26
 80082d6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80082d8:	9306      	str	r3, [sp, #24]
 80082da:	eba3 0309 	sub.w	r3, r3, r9
 80082de:	455b      	cmp	r3, fp
 80082e0:	dc31      	bgt.n	8008346 <_printf_float+0x36e>
 80082e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082e4:	459a      	cmp	sl, r3
 80082e6:	dc3a      	bgt.n	800835e <_printf_float+0x386>
 80082e8:	6823      	ldr	r3, [r4, #0]
 80082ea:	07da      	lsls	r2, r3, #31
 80082ec:	d437      	bmi.n	800835e <_printf_float+0x386>
 80082ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082f0:	ebaa 0903 	sub.w	r9, sl, r3
 80082f4:	9b06      	ldr	r3, [sp, #24]
 80082f6:	ebaa 0303 	sub.w	r3, sl, r3
 80082fa:	4599      	cmp	r9, r3
 80082fc:	bfa8      	it	ge
 80082fe:	4699      	movge	r9, r3
 8008300:	f1b9 0f00 	cmp.w	r9, #0
 8008304:	dc33      	bgt.n	800836e <_printf_float+0x396>
 8008306:	f04f 0800 	mov.w	r8, #0
 800830a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800830e:	f104 0b1a 	add.w	fp, r4, #26
 8008312:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008314:	ebaa 0303 	sub.w	r3, sl, r3
 8008318:	eba3 0309 	sub.w	r3, r3, r9
 800831c:	4543      	cmp	r3, r8
 800831e:	f77f af79 	ble.w	8008214 <_printf_float+0x23c>
 8008322:	2301      	movs	r3, #1
 8008324:	465a      	mov	r2, fp
 8008326:	4631      	mov	r1, r6
 8008328:	4628      	mov	r0, r5
 800832a:	47b8      	blx	r7
 800832c:	3001      	adds	r0, #1
 800832e:	f43f aeae 	beq.w	800808e <_printf_float+0xb6>
 8008332:	f108 0801 	add.w	r8, r8, #1
 8008336:	e7ec      	b.n	8008312 <_printf_float+0x33a>
 8008338:	4642      	mov	r2, r8
 800833a:	4631      	mov	r1, r6
 800833c:	4628      	mov	r0, r5
 800833e:	47b8      	blx	r7
 8008340:	3001      	adds	r0, #1
 8008342:	d1c2      	bne.n	80082ca <_printf_float+0x2f2>
 8008344:	e6a3      	b.n	800808e <_printf_float+0xb6>
 8008346:	2301      	movs	r3, #1
 8008348:	4631      	mov	r1, r6
 800834a:	4628      	mov	r0, r5
 800834c:	9206      	str	r2, [sp, #24]
 800834e:	47b8      	blx	r7
 8008350:	3001      	adds	r0, #1
 8008352:	f43f ae9c 	beq.w	800808e <_printf_float+0xb6>
 8008356:	9a06      	ldr	r2, [sp, #24]
 8008358:	f10b 0b01 	add.w	fp, fp, #1
 800835c:	e7bb      	b.n	80082d6 <_printf_float+0x2fe>
 800835e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008362:	4631      	mov	r1, r6
 8008364:	4628      	mov	r0, r5
 8008366:	47b8      	blx	r7
 8008368:	3001      	adds	r0, #1
 800836a:	d1c0      	bne.n	80082ee <_printf_float+0x316>
 800836c:	e68f      	b.n	800808e <_printf_float+0xb6>
 800836e:	9a06      	ldr	r2, [sp, #24]
 8008370:	464b      	mov	r3, r9
 8008372:	4442      	add	r2, r8
 8008374:	4631      	mov	r1, r6
 8008376:	4628      	mov	r0, r5
 8008378:	47b8      	blx	r7
 800837a:	3001      	adds	r0, #1
 800837c:	d1c3      	bne.n	8008306 <_printf_float+0x32e>
 800837e:	e686      	b.n	800808e <_printf_float+0xb6>
 8008380:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008384:	f1ba 0f01 	cmp.w	sl, #1
 8008388:	dc01      	bgt.n	800838e <_printf_float+0x3b6>
 800838a:	07db      	lsls	r3, r3, #31
 800838c:	d536      	bpl.n	80083fc <_printf_float+0x424>
 800838e:	2301      	movs	r3, #1
 8008390:	4642      	mov	r2, r8
 8008392:	4631      	mov	r1, r6
 8008394:	4628      	mov	r0, r5
 8008396:	47b8      	blx	r7
 8008398:	3001      	adds	r0, #1
 800839a:	f43f ae78 	beq.w	800808e <_printf_float+0xb6>
 800839e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80083a2:	4631      	mov	r1, r6
 80083a4:	4628      	mov	r0, r5
 80083a6:	47b8      	blx	r7
 80083a8:	3001      	adds	r0, #1
 80083aa:	f43f ae70 	beq.w	800808e <_printf_float+0xb6>
 80083ae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80083b2:	2200      	movs	r2, #0
 80083b4:	2300      	movs	r3, #0
 80083b6:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80083ba:	f7f8 fb85 	bl	8000ac8 <__aeabi_dcmpeq>
 80083be:	b9c0      	cbnz	r0, 80083f2 <_printf_float+0x41a>
 80083c0:	4653      	mov	r3, sl
 80083c2:	f108 0201 	add.w	r2, r8, #1
 80083c6:	4631      	mov	r1, r6
 80083c8:	4628      	mov	r0, r5
 80083ca:	47b8      	blx	r7
 80083cc:	3001      	adds	r0, #1
 80083ce:	d10c      	bne.n	80083ea <_printf_float+0x412>
 80083d0:	e65d      	b.n	800808e <_printf_float+0xb6>
 80083d2:	2301      	movs	r3, #1
 80083d4:	465a      	mov	r2, fp
 80083d6:	4631      	mov	r1, r6
 80083d8:	4628      	mov	r0, r5
 80083da:	47b8      	blx	r7
 80083dc:	3001      	adds	r0, #1
 80083de:	f43f ae56 	beq.w	800808e <_printf_float+0xb6>
 80083e2:	f108 0801 	add.w	r8, r8, #1
 80083e6:	45d0      	cmp	r8, sl
 80083e8:	dbf3      	blt.n	80083d2 <_printf_float+0x3fa>
 80083ea:	464b      	mov	r3, r9
 80083ec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80083f0:	e6df      	b.n	80081b2 <_printf_float+0x1da>
 80083f2:	f04f 0800 	mov.w	r8, #0
 80083f6:	f104 0b1a 	add.w	fp, r4, #26
 80083fa:	e7f4      	b.n	80083e6 <_printf_float+0x40e>
 80083fc:	2301      	movs	r3, #1
 80083fe:	4642      	mov	r2, r8
 8008400:	e7e1      	b.n	80083c6 <_printf_float+0x3ee>
 8008402:	2301      	movs	r3, #1
 8008404:	464a      	mov	r2, r9
 8008406:	4631      	mov	r1, r6
 8008408:	4628      	mov	r0, r5
 800840a:	47b8      	blx	r7
 800840c:	3001      	adds	r0, #1
 800840e:	f43f ae3e 	beq.w	800808e <_printf_float+0xb6>
 8008412:	f108 0801 	add.w	r8, r8, #1
 8008416:	68e3      	ldr	r3, [r4, #12]
 8008418:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800841a:	1a5b      	subs	r3, r3, r1
 800841c:	4543      	cmp	r3, r8
 800841e:	dcf0      	bgt.n	8008402 <_printf_float+0x42a>
 8008420:	e6fc      	b.n	800821c <_printf_float+0x244>
 8008422:	f04f 0800 	mov.w	r8, #0
 8008426:	f104 0919 	add.w	r9, r4, #25
 800842a:	e7f4      	b.n	8008416 <_printf_float+0x43e>

0800842c <_printf_common>:
 800842c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008430:	4616      	mov	r6, r2
 8008432:	4698      	mov	r8, r3
 8008434:	688a      	ldr	r2, [r1, #8]
 8008436:	690b      	ldr	r3, [r1, #16]
 8008438:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800843c:	4293      	cmp	r3, r2
 800843e:	bfb8      	it	lt
 8008440:	4613      	movlt	r3, r2
 8008442:	6033      	str	r3, [r6, #0]
 8008444:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008448:	4607      	mov	r7, r0
 800844a:	460c      	mov	r4, r1
 800844c:	b10a      	cbz	r2, 8008452 <_printf_common+0x26>
 800844e:	3301      	adds	r3, #1
 8008450:	6033      	str	r3, [r6, #0]
 8008452:	6823      	ldr	r3, [r4, #0]
 8008454:	0699      	lsls	r1, r3, #26
 8008456:	bf42      	ittt	mi
 8008458:	6833      	ldrmi	r3, [r6, #0]
 800845a:	3302      	addmi	r3, #2
 800845c:	6033      	strmi	r3, [r6, #0]
 800845e:	6825      	ldr	r5, [r4, #0]
 8008460:	f015 0506 	ands.w	r5, r5, #6
 8008464:	d106      	bne.n	8008474 <_printf_common+0x48>
 8008466:	f104 0a19 	add.w	sl, r4, #25
 800846a:	68e3      	ldr	r3, [r4, #12]
 800846c:	6832      	ldr	r2, [r6, #0]
 800846e:	1a9b      	subs	r3, r3, r2
 8008470:	42ab      	cmp	r3, r5
 8008472:	dc26      	bgt.n	80084c2 <_printf_common+0x96>
 8008474:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008478:	6822      	ldr	r2, [r4, #0]
 800847a:	3b00      	subs	r3, #0
 800847c:	bf18      	it	ne
 800847e:	2301      	movne	r3, #1
 8008480:	0692      	lsls	r2, r2, #26
 8008482:	d42b      	bmi.n	80084dc <_printf_common+0xb0>
 8008484:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008488:	4641      	mov	r1, r8
 800848a:	4638      	mov	r0, r7
 800848c:	47c8      	blx	r9
 800848e:	3001      	adds	r0, #1
 8008490:	d01e      	beq.n	80084d0 <_printf_common+0xa4>
 8008492:	6823      	ldr	r3, [r4, #0]
 8008494:	6922      	ldr	r2, [r4, #16]
 8008496:	f003 0306 	and.w	r3, r3, #6
 800849a:	2b04      	cmp	r3, #4
 800849c:	bf02      	ittt	eq
 800849e:	68e5      	ldreq	r5, [r4, #12]
 80084a0:	6833      	ldreq	r3, [r6, #0]
 80084a2:	1aed      	subeq	r5, r5, r3
 80084a4:	68a3      	ldr	r3, [r4, #8]
 80084a6:	bf0c      	ite	eq
 80084a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80084ac:	2500      	movne	r5, #0
 80084ae:	4293      	cmp	r3, r2
 80084b0:	bfc4      	itt	gt
 80084b2:	1a9b      	subgt	r3, r3, r2
 80084b4:	18ed      	addgt	r5, r5, r3
 80084b6:	2600      	movs	r6, #0
 80084b8:	341a      	adds	r4, #26
 80084ba:	42b5      	cmp	r5, r6
 80084bc:	d11a      	bne.n	80084f4 <_printf_common+0xc8>
 80084be:	2000      	movs	r0, #0
 80084c0:	e008      	b.n	80084d4 <_printf_common+0xa8>
 80084c2:	2301      	movs	r3, #1
 80084c4:	4652      	mov	r2, sl
 80084c6:	4641      	mov	r1, r8
 80084c8:	4638      	mov	r0, r7
 80084ca:	47c8      	blx	r9
 80084cc:	3001      	adds	r0, #1
 80084ce:	d103      	bne.n	80084d8 <_printf_common+0xac>
 80084d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80084d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084d8:	3501      	adds	r5, #1
 80084da:	e7c6      	b.n	800846a <_printf_common+0x3e>
 80084dc:	18e1      	adds	r1, r4, r3
 80084de:	1c5a      	adds	r2, r3, #1
 80084e0:	2030      	movs	r0, #48	@ 0x30
 80084e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80084e6:	4422      	add	r2, r4
 80084e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80084ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80084f0:	3302      	adds	r3, #2
 80084f2:	e7c7      	b.n	8008484 <_printf_common+0x58>
 80084f4:	2301      	movs	r3, #1
 80084f6:	4622      	mov	r2, r4
 80084f8:	4641      	mov	r1, r8
 80084fa:	4638      	mov	r0, r7
 80084fc:	47c8      	blx	r9
 80084fe:	3001      	adds	r0, #1
 8008500:	d0e6      	beq.n	80084d0 <_printf_common+0xa4>
 8008502:	3601      	adds	r6, #1
 8008504:	e7d9      	b.n	80084ba <_printf_common+0x8e>
	...

08008508 <_printf_i>:
 8008508:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800850c:	7e0f      	ldrb	r7, [r1, #24]
 800850e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008510:	2f78      	cmp	r7, #120	@ 0x78
 8008512:	4691      	mov	r9, r2
 8008514:	4680      	mov	r8, r0
 8008516:	460c      	mov	r4, r1
 8008518:	469a      	mov	sl, r3
 800851a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800851e:	d807      	bhi.n	8008530 <_printf_i+0x28>
 8008520:	2f62      	cmp	r7, #98	@ 0x62
 8008522:	d80a      	bhi.n	800853a <_printf_i+0x32>
 8008524:	2f00      	cmp	r7, #0
 8008526:	f000 80d1 	beq.w	80086cc <_printf_i+0x1c4>
 800852a:	2f58      	cmp	r7, #88	@ 0x58
 800852c:	f000 80b8 	beq.w	80086a0 <_printf_i+0x198>
 8008530:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008534:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008538:	e03a      	b.n	80085b0 <_printf_i+0xa8>
 800853a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800853e:	2b15      	cmp	r3, #21
 8008540:	d8f6      	bhi.n	8008530 <_printf_i+0x28>
 8008542:	a101      	add	r1, pc, #4	@ (adr r1, 8008548 <_printf_i+0x40>)
 8008544:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008548:	080085a1 	.word	0x080085a1
 800854c:	080085b5 	.word	0x080085b5
 8008550:	08008531 	.word	0x08008531
 8008554:	08008531 	.word	0x08008531
 8008558:	08008531 	.word	0x08008531
 800855c:	08008531 	.word	0x08008531
 8008560:	080085b5 	.word	0x080085b5
 8008564:	08008531 	.word	0x08008531
 8008568:	08008531 	.word	0x08008531
 800856c:	08008531 	.word	0x08008531
 8008570:	08008531 	.word	0x08008531
 8008574:	080086b3 	.word	0x080086b3
 8008578:	080085df 	.word	0x080085df
 800857c:	0800866d 	.word	0x0800866d
 8008580:	08008531 	.word	0x08008531
 8008584:	08008531 	.word	0x08008531
 8008588:	080086d5 	.word	0x080086d5
 800858c:	08008531 	.word	0x08008531
 8008590:	080085df 	.word	0x080085df
 8008594:	08008531 	.word	0x08008531
 8008598:	08008531 	.word	0x08008531
 800859c:	08008675 	.word	0x08008675
 80085a0:	6833      	ldr	r3, [r6, #0]
 80085a2:	1d1a      	adds	r2, r3, #4
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	6032      	str	r2, [r6, #0]
 80085a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80085ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80085b0:	2301      	movs	r3, #1
 80085b2:	e09c      	b.n	80086ee <_printf_i+0x1e6>
 80085b4:	6833      	ldr	r3, [r6, #0]
 80085b6:	6820      	ldr	r0, [r4, #0]
 80085b8:	1d19      	adds	r1, r3, #4
 80085ba:	6031      	str	r1, [r6, #0]
 80085bc:	0606      	lsls	r6, r0, #24
 80085be:	d501      	bpl.n	80085c4 <_printf_i+0xbc>
 80085c0:	681d      	ldr	r5, [r3, #0]
 80085c2:	e003      	b.n	80085cc <_printf_i+0xc4>
 80085c4:	0645      	lsls	r5, r0, #25
 80085c6:	d5fb      	bpl.n	80085c0 <_printf_i+0xb8>
 80085c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80085cc:	2d00      	cmp	r5, #0
 80085ce:	da03      	bge.n	80085d8 <_printf_i+0xd0>
 80085d0:	232d      	movs	r3, #45	@ 0x2d
 80085d2:	426d      	negs	r5, r5
 80085d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80085d8:	4858      	ldr	r0, [pc, #352]	@ (800873c <_printf_i+0x234>)
 80085da:	230a      	movs	r3, #10
 80085dc:	e011      	b.n	8008602 <_printf_i+0xfa>
 80085de:	6821      	ldr	r1, [r4, #0]
 80085e0:	6833      	ldr	r3, [r6, #0]
 80085e2:	0608      	lsls	r0, r1, #24
 80085e4:	f853 5b04 	ldr.w	r5, [r3], #4
 80085e8:	d402      	bmi.n	80085f0 <_printf_i+0xe8>
 80085ea:	0649      	lsls	r1, r1, #25
 80085ec:	bf48      	it	mi
 80085ee:	b2ad      	uxthmi	r5, r5
 80085f0:	2f6f      	cmp	r7, #111	@ 0x6f
 80085f2:	4852      	ldr	r0, [pc, #328]	@ (800873c <_printf_i+0x234>)
 80085f4:	6033      	str	r3, [r6, #0]
 80085f6:	bf14      	ite	ne
 80085f8:	230a      	movne	r3, #10
 80085fa:	2308      	moveq	r3, #8
 80085fc:	2100      	movs	r1, #0
 80085fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008602:	6866      	ldr	r6, [r4, #4]
 8008604:	60a6      	str	r6, [r4, #8]
 8008606:	2e00      	cmp	r6, #0
 8008608:	db05      	blt.n	8008616 <_printf_i+0x10e>
 800860a:	6821      	ldr	r1, [r4, #0]
 800860c:	432e      	orrs	r6, r5
 800860e:	f021 0104 	bic.w	r1, r1, #4
 8008612:	6021      	str	r1, [r4, #0]
 8008614:	d04b      	beq.n	80086ae <_printf_i+0x1a6>
 8008616:	4616      	mov	r6, r2
 8008618:	fbb5 f1f3 	udiv	r1, r5, r3
 800861c:	fb03 5711 	mls	r7, r3, r1, r5
 8008620:	5dc7      	ldrb	r7, [r0, r7]
 8008622:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008626:	462f      	mov	r7, r5
 8008628:	42bb      	cmp	r3, r7
 800862a:	460d      	mov	r5, r1
 800862c:	d9f4      	bls.n	8008618 <_printf_i+0x110>
 800862e:	2b08      	cmp	r3, #8
 8008630:	d10b      	bne.n	800864a <_printf_i+0x142>
 8008632:	6823      	ldr	r3, [r4, #0]
 8008634:	07df      	lsls	r7, r3, #31
 8008636:	d508      	bpl.n	800864a <_printf_i+0x142>
 8008638:	6923      	ldr	r3, [r4, #16]
 800863a:	6861      	ldr	r1, [r4, #4]
 800863c:	4299      	cmp	r1, r3
 800863e:	bfde      	ittt	le
 8008640:	2330      	movle	r3, #48	@ 0x30
 8008642:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008646:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800864a:	1b92      	subs	r2, r2, r6
 800864c:	6122      	str	r2, [r4, #16]
 800864e:	f8cd a000 	str.w	sl, [sp]
 8008652:	464b      	mov	r3, r9
 8008654:	aa03      	add	r2, sp, #12
 8008656:	4621      	mov	r1, r4
 8008658:	4640      	mov	r0, r8
 800865a:	f7ff fee7 	bl	800842c <_printf_common>
 800865e:	3001      	adds	r0, #1
 8008660:	d14a      	bne.n	80086f8 <_printf_i+0x1f0>
 8008662:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008666:	b004      	add	sp, #16
 8008668:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800866c:	6823      	ldr	r3, [r4, #0]
 800866e:	f043 0320 	orr.w	r3, r3, #32
 8008672:	6023      	str	r3, [r4, #0]
 8008674:	4832      	ldr	r0, [pc, #200]	@ (8008740 <_printf_i+0x238>)
 8008676:	2778      	movs	r7, #120	@ 0x78
 8008678:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800867c:	6823      	ldr	r3, [r4, #0]
 800867e:	6831      	ldr	r1, [r6, #0]
 8008680:	061f      	lsls	r7, r3, #24
 8008682:	f851 5b04 	ldr.w	r5, [r1], #4
 8008686:	d402      	bmi.n	800868e <_printf_i+0x186>
 8008688:	065f      	lsls	r7, r3, #25
 800868a:	bf48      	it	mi
 800868c:	b2ad      	uxthmi	r5, r5
 800868e:	6031      	str	r1, [r6, #0]
 8008690:	07d9      	lsls	r1, r3, #31
 8008692:	bf44      	itt	mi
 8008694:	f043 0320 	orrmi.w	r3, r3, #32
 8008698:	6023      	strmi	r3, [r4, #0]
 800869a:	b11d      	cbz	r5, 80086a4 <_printf_i+0x19c>
 800869c:	2310      	movs	r3, #16
 800869e:	e7ad      	b.n	80085fc <_printf_i+0xf4>
 80086a0:	4826      	ldr	r0, [pc, #152]	@ (800873c <_printf_i+0x234>)
 80086a2:	e7e9      	b.n	8008678 <_printf_i+0x170>
 80086a4:	6823      	ldr	r3, [r4, #0]
 80086a6:	f023 0320 	bic.w	r3, r3, #32
 80086aa:	6023      	str	r3, [r4, #0]
 80086ac:	e7f6      	b.n	800869c <_printf_i+0x194>
 80086ae:	4616      	mov	r6, r2
 80086b0:	e7bd      	b.n	800862e <_printf_i+0x126>
 80086b2:	6833      	ldr	r3, [r6, #0]
 80086b4:	6825      	ldr	r5, [r4, #0]
 80086b6:	6961      	ldr	r1, [r4, #20]
 80086b8:	1d18      	adds	r0, r3, #4
 80086ba:	6030      	str	r0, [r6, #0]
 80086bc:	062e      	lsls	r6, r5, #24
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	d501      	bpl.n	80086c6 <_printf_i+0x1be>
 80086c2:	6019      	str	r1, [r3, #0]
 80086c4:	e002      	b.n	80086cc <_printf_i+0x1c4>
 80086c6:	0668      	lsls	r0, r5, #25
 80086c8:	d5fb      	bpl.n	80086c2 <_printf_i+0x1ba>
 80086ca:	8019      	strh	r1, [r3, #0]
 80086cc:	2300      	movs	r3, #0
 80086ce:	6123      	str	r3, [r4, #16]
 80086d0:	4616      	mov	r6, r2
 80086d2:	e7bc      	b.n	800864e <_printf_i+0x146>
 80086d4:	6833      	ldr	r3, [r6, #0]
 80086d6:	1d1a      	adds	r2, r3, #4
 80086d8:	6032      	str	r2, [r6, #0]
 80086da:	681e      	ldr	r6, [r3, #0]
 80086dc:	6862      	ldr	r2, [r4, #4]
 80086de:	2100      	movs	r1, #0
 80086e0:	4630      	mov	r0, r6
 80086e2:	f7f7 fd75 	bl	80001d0 <memchr>
 80086e6:	b108      	cbz	r0, 80086ec <_printf_i+0x1e4>
 80086e8:	1b80      	subs	r0, r0, r6
 80086ea:	6060      	str	r0, [r4, #4]
 80086ec:	6863      	ldr	r3, [r4, #4]
 80086ee:	6123      	str	r3, [r4, #16]
 80086f0:	2300      	movs	r3, #0
 80086f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80086f6:	e7aa      	b.n	800864e <_printf_i+0x146>
 80086f8:	6923      	ldr	r3, [r4, #16]
 80086fa:	4632      	mov	r2, r6
 80086fc:	4649      	mov	r1, r9
 80086fe:	4640      	mov	r0, r8
 8008700:	47d0      	blx	sl
 8008702:	3001      	adds	r0, #1
 8008704:	d0ad      	beq.n	8008662 <_printf_i+0x15a>
 8008706:	6823      	ldr	r3, [r4, #0]
 8008708:	079b      	lsls	r3, r3, #30
 800870a:	d413      	bmi.n	8008734 <_printf_i+0x22c>
 800870c:	68e0      	ldr	r0, [r4, #12]
 800870e:	9b03      	ldr	r3, [sp, #12]
 8008710:	4298      	cmp	r0, r3
 8008712:	bfb8      	it	lt
 8008714:	4618      	movlt	r0, r3
 8008716:	e7a6      	b.n	8008666 <_printf_i+0x15e>
 8008718:	2301      	movs	r3, #1
 800871a:	4632      	mov	r2, r6
 800871c:	4649      	mov	r1, r9
 800871e:	4640      	mov	r0, r8
 8008720:	47d0      	blx	sl
 8008722:	3001      	adds	r0, #1
 8008724:	d09d      	beq.n	8008662 <_printf_i+0x15a>
 8008726:	3501      	adds	r5, #1
 8008728:	68e3      	ldr	r3, [r4, #12]
 800872a:	9903      	ldr	r1, [sp, #12]
 800872c:	1a5b      	subs	r3, r3, r1
 800872e:	42ab      	cmp	r3, r5
 8008730:	dcf2      	bgt.n	8008718 <_printf_i+0x210>
 8008732:	e7eb      	b.n	800870c <_printf_i+0x204>
 8008734:	2500      	movs	r5, #0
 8008736:	f104 0619 	add.w	r6, r4, #25
 800873a:	e7f5      	b.n	8008728 <_printf_i+0x220>
 800873c:	0800c91a 	.word	0x0800c91a
 8008740:	0800c92b 	.word	0x0800c92b

08008744 <_scanf_float>:
 8008744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008748:	b087      	sub	sp, #28
 800874a:	4691      	mov	r9, r2
 800874c:	9303      	str	r3, [sp, #12]
 800874e:	688b      	ldr	r3, [r1, #8]
 8008750:	1e5a      	subs	r2, r3, #1
 8008752:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008756:	bf81      	itttt	hi
 8008758:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800875c:	eb03 0b05 	addhi.w	fp, r3, r5
 8008760:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008764:	608b      	strhi	r3, [r1, #8]
 8008766:	680b      	ldr	r3, [r1, #0]
 8008768:	460a      	mov	r2, r1
 800876a:	f04f 0500 	mov.w	r5, #0
 800876e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008772:	f842 3b1c 	str.w	r3, [r2], #28
 8008776:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800877a:	4680      	mov	r8, r0
 800877c:	460c      	mov	r4, r1
 800877e:	bf98      	it	ls
 8008780:	f04f 0b00 	movls.w	fp, #0
 8008784:	9201      	str	r2, [sp, #4]
 8008786:	4616      	mov	r6, r2
 8008788:	46aa      	mov	sl, r5
 800878a:	462f      	mov	r7, r5
 800878c:	9502      	str	r5, [sp, #8]
 800878e:	68a2      	ldr	r2, [r4, #8]
 8008790:	b15a      	cbz	r2, 80087aa <_scanf_float+0x66>
 8008792:	f8d9 3000 	ldr.w	r3, [r9]
 8008796:	781b      	ldrb	r3, [r3, #0]
 8008798:	2b4e      	cmp	r3, #78	@ 0x4e
 800879a:	d863      	bhi.n	8008864 <_scanf_float+0x120>
 800879c:	2b40      	cmp	r3, #64	@ 0x40
 800879e:	d83b      	bhi.n	8008818 <_scanf_float+0xd4>
 80087a0:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80087a4:	b2c8      	uxtb	r0, r1
 80087a6:	280e      	cmp	r0, #14
 80087a8:	d939      	bls.n	800881e <_scanf_float+0xda>
 80087aa:	b11f      	cbz	r7, 80087b4 <_scanf_float+0x70>
 80087ac:	6823      	ldr	r3, [r4, #0]
 80087ae:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80087b2:	6023      	str	r3, [r4, #0]
 80087b4:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80087b8:	f1ba 0f01 	cmp.w	sl, #1
 80087bc:	f200 8114 	bhi.w	80089e8 <_scanf_float+0x2a4>
 80087c0:	9b01      	ldr	r3, [sp, #4]
 80087c2:	429e      	cmp	r6, r3
 80087c4:	f200 8105 	bhi.w	80089d2 <_scanf_float+0x28e>
 80087c8:	2001      	movs	r0, #1
 80087ca:	b007      	add	sp, #28
 80087cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087d0:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80087d4:	2a0d      	cmp	r2, #13
 80087d6:	d8e8      	bhi.n	80087aa <_scanf_float+0x66>
 80087d8:	a101      	add	r1, pc, #4	@ (adr r1, 80087e0 <_scanf_float+0x9c>)
 80087da:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80087de:	bf00      	nop
 80087e0:	08008929 	.word	0x08008929
 80087e4:	080087ab 	.word	0x080087ab
 80087e8:	080087ab 	.word	0x080087ab
 80087ec:	080087ab 	.word	0x080087ab
 80087f0:	08008985 	.word	0x08008985
 80087f4:	0800895f 	.word	0x0800895f
 80087f8:	080087ab 	.word	0x080087ab
 80087fc:	080087ab 	.word	0x080087ab
 8008800:	08008937 	.word	0x08008937
 8008804:	080087ab 	.word	0x080087ab
 8008808:	080087ab 	.word	0x080087ab
 800880c:	080087ab 	.word	0x080087ab
 8008810:	080087ab 	.word	0x080087ab
 8008814:	080088f3 	.word	0x080088f3
 8008818:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800881c:	e7da      	b.n	80087d4 <_scanf_float+0x90>
 800881e:	290e      	cmp	r1, #14
 8008820:	d8c3      	bhi.n	80087aa <_scanf_float+0x66>
 8008822:	a001      	add	r0, pc, #4	@ (adr r0, 8008828 <_scanf_float+0xe4>)
 8008824:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008828:	080088e3 	.word	0x080088e3
 800882c:	080087ab 	.word	0x080087ab
 8008830:	080088e3 	.word	0x080088e3
 8008834:	08008973 	.word	0x08008973
 8008838:	080087ab 	.word	0x080087ab
 800883c:	08008885 	.word	0x08008885
 8008840:	080088c9 	.word	0x080088c9
 8008844:	080088c9 	.word	0x080088c9
 8008848:	080088c9 	.word	0x080088c9
 800884c:	080088c9 	.word	0x080088c9
 8008850:	080088c9 	.word	0x080088c9
 8008854:	080088c9 	.word	0x080088c9
 8008858:	080088c9 	.word	0x080088c9
 800885c:	080088c9 	.word	0x080088c9
 8008860:	080088c9 	.word	0x080088c9
 8008864:	2b6e      	cmp	r3, #110	@ 0x6e
 8008866:	d809      	bhi.n	800887c <_scanf_float+0x138>
 8008868:	2b60      	cmp	r3, #96	@ 0x60
 800886a:	d8b1      	bhi.n	80087d0 <_scanf_float+0x8c>
 800886c:	2b54      	cmp	r3, #84	@ 0x54
 800886e:	d07b      	beq.n	8008968 <_scanf_float+0x224>
 8008870:	2b59      	cmp	r3, #89	@ 0x59
 8008872:	d19a      	bne.n	80087aa <_scanf_float+0x66>
 8008874:	2d07      	cmp	r5, #7
 8008876:	d198      	bne.n	80087aa <_scanf_float+0x66>
 8008878:	2508      	movs	r5, #8
 800887a:	e02f      	b.n	80088dc <_scanf_float+0x198>
 800887c:	2b74      	cmp	r3, #116	@ 0x74
 800887e:	d073      	beq.n	8008968 <_scanf_float+0x224>
 8008880:	2b79      	cmp	r3, #121	@ 0x79
 8008882:	e7f6      	b.n	8008872 <_scanf_float+0x12e>
 8008884:	6821      	ldr	r1, [r4, #0]
 8008886:	05c8      	lsls	r0, r1, #23
 8008888:	d51e      	bpl.n	80088c8 <_scanf_float+0x184>
 800888a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800888e:	6021      	str	r1, [r4, #0]
 8008890:	3701      	adds	r7, #1
 8008892:	f1bb 0f00 	cmp.w	fp, #0
 8008896:	d003      	beq.n	80088a0 <_scanf_float+0x15c>
 8008898:	3201      	adds	r2, #1
 800889a:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800889e:	60a2      	str	r2, [r4, #8]
 80088a0:	68a3      	ldr	r3, [r4, #8]
 80088a2:	3b01      	subs	r3, #1
 80088a4:	60a3      	str	r3, [r4, #8]
 80088a6:	6923      	ldr	r3, [r4, #16]
 80088a8:	3301      	adds	r3, #1
 80088aa:	6123      	str	r3, [r4, #16]
 80088ac:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80088b0:	3b01      	subs	r3, #1
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	f8c9 3004 	str.w	r3, [r9, #4]
 80088b8:	f340 8082 	ble.w	80089c0 <_scanf_float+0x27c>
 80088bc:	f8d9 3000 	ldr.w	r3, [r9]
 80088c0:	3301      	adds	r3, #1
 80088c2:	f8c9 3000 	str.w	r3, [r9]
 80088c6:	e762      	b.n	800878e <_scanf_float+0x4a>
 80088c8:	eb1a 0105 	adds.w	r1, sl, r5
 80088cc:	f47f af6d 	bne.w	80087aa <_scanf_float+0x66>
 80088d0:	6822      	ldr	r2, [r4, #0]
 80088d2:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80088d6:	6022      	str	r2, [r4, #0]
 80088d8:	460d      	mov	r5, r1
 80088da:	468a      	mov	sl, r1
 80088dc:	f806 3b01 	strb.w	r3, [r6], #1
 80088e0:	e7de      	b.n	80088a0 <_scanf_float+0x15c>
 80088e2:	6822      	ldr	r2, [r4, #0]
 80088e4:	0610      	lsls	r0, r2, #24
 80088e6:	f57f af60 	bpl.w	80087aa <_scanf_float+0x66>
 80088ea:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80088ee:	6022      	str	r2, [r4, #0]
 80088f0:	e7f4      	b.n	80088dc <_scanf_float+0x198>
 80088f2:	f1ba 0f00 	cmp.w	sl, #0
 80088f6:	d10c      	bne.n	8008912 <_scanf_float+0x1ce>
 80088f8:	b977      	cbnz	r7, 8008918 <_scanf_float+0x1d4>
 80088fa:	6822      	ldr	r2, [r4, #0]
 80088fc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008900:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008904:	d108      	bne.n	8008918 <_scanf_float+0x1d4>
 8008906:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800890a:	6022      	str	r2, [r4, #0]
 800890c:	f04f 0a01 	mov.w	sl, #1
 8008910:	e7e4      	b.n	80088dc <_scanf_float+0x198>
 8008912:	f1ba 0f02 	cmp.w	sl, #2
 8008916:	d050      	beq.n	80089ba <_scanf_float+0x276>
 8008918:	2d01      	cmp	r5, #1
 800891a:	d002      	beq.n	8008922 <_scanf_float+0x1de>
 800891c:	2d04      	cmp	r5, #4
 800891e:	f47f af44 	bne.w	80087aa <_scanf_float+0x66>
 8008922:	3501      	adds	r5, #1
 8008924:	b2ed      	uxtb	r5, r5
 8008926:	e7d9      	b.n	80088dc <_scanf_float+0x198>
 8008928:	f1ba 0f01 	cmp.w	sl, #1
 800892c:	f47f af3d 	bne.w	80087aa <_scanf_float+0x66>
 8008930:	f04f 0a02 	mov.w	sl, #2
 8008934:	e7d2      	b.n	80088dc <_scanf_float+0x198>
 8008936:	b975      	cbnz	r5, 8008956 <_scanf_float+0x212>
 8008938:	2f00      	cmp	r7, #0
 800893a:	f47f af37 	bne.w	80087ac <_scanf_float+0x68>
 800893e:	6822      	ldr	r2, [r4, #0]
 8008940:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008944:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008948:	f040 8103 	bne.w	8008b52 <_scanf_float+0x40e>
 800894c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008950:	6022      	str	r2, [r4, #0]
 8008952:	2501      	movs	r5, #1
 8008954:	e7c2      	b.n	80088dc <_scanf_float+0x198>
 8008956:	2d03      	cmp	r5, #3
 8008958:	d0e3      	beq.n	8008922 <_scanf_float+0x1de>
 800895a:	2d05      	cmp	r5, #5
 800895c:	e7df      	b.n	800891e <_scanf_float+0x1da>
 800895e:	2d02      	cmp	r5, #2
 8008960:	f47f af23 	bne.w	80087aa <_scanf_float+0x66>
 8008964:	2503      	movs	r5, #3
 8008966:	e7b9      	b.n	80088dc <_scanf_float+0x198>
 8008968:	2d06      	cmp	r5, #6
 800896a:	f47f af1e 	bne.w	80087aa <_scanf_float+0x66>
 800896e:	2507      	movs	r5, #7
 8008970:	e7b4      	b.n	80088dc <_scanf_float+0x198>
 8008972:	6822      	ldr	r2, [r4, #0]
 8008974:	0591      	lsls	r1, r2, #22
 8008976:	f57f af18 	bpl.w	80087aa <_scanf_float+0x66>
 800897a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800897e:	6022      	str	r2, [r4, #0]
 8008980:	9702      	str	r7, [sp, #8]
 8008982:	e7ab      	b.n	80088dc <_scanf_float+0x198>
 8008984:	6822      	ldr	r2, [r4, #0]
 8008986:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800898a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800898e:	d005      	beq.n	800899c <_scanf_float+0x258>
 8008990:	0550      	lsls	r0, r2, #21
 8008992:	f57f af0a 	bpl.w	80087aa <_scanf_float+0x66>
 8008996:	2f00      	cmp	r7, #0
 8008998:	f000 80db 	beq.w	8008b52 <_scanf_float+0x40e>
 800899c:	0591      	lsls	r1, r2, #22
 800899e:	bf58      	it	pl
 80089a0:	9902      	ldrpl	r1, [sp, #8]
 80089a2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80089a6:	bf58      	it	pl
 80089a8:	1a79      	subpl	r1, r7, r1
 80089aa:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80089ae:	bf58      	it	pl
 80089b0:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80089b4:	6022      	str	r2, [r4, #0]
 80089b6:	2700      	movs	r7, #0
 80089b8:	e790      	b.n	80088dc <_scanf_float+0x198>
 80089ba:	f04f 0a03 	mov.w	sl, #3
 80089be:	e78d      	b.n	80088dc <_scanf_float+0x198>
 80089c0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80089c4:	4649      	mov	r1, r9
 80089c6:	4640      	mov	r0, r8
 80089c8:	4798      	blx	r3
 80089ca:	2800      	cmp	r0, #0
 80089cc:	f43f aedf 	beq.w	800878e <_scanf_float+0x4a>
 80089d0:	e6eb      	b.n	80087aa <_scanf_float+0x66>
 80089d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80089d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80089da:	464a      	mov	r2, r9
 80089dc:	4640      	mov	r0, r8
 80089de:	4798      	blx	r3
 80089e0:	6923      	ldr	r3, [r4, #16]
 80089e2:	3b01      	subs	r3, #1
 80089e4:	6123      	str	r3, [r4, #16]
 80089e6:	e6eb      	b.n	80087c0 <_scanf_float+0x7c>
 80089e8:	1e6b      	subs	r3, r5, #1
 80089ea:	2b06      	cmp	r3, #6
 80089ec:	d824      	bhi.n	8008a38 <_scanf_float+0x2f4>
 80089ee:	2d02      	cmp	r5, #2
 80089f0:	d836      	bhi.n	8008a60 <_scanf_float+0x31c>
 80089f2:	9b01      	ldr	r3, [sp, #4]
 80089f4:	429e      	cmp	r6, r3
 80089f6:	f67f aee7 	bls.w	80087c8 <_scanf_float+0x84>
 80089fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80089fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008a02:	464a      	mov	r2, r9
 8008a04:	4640      	mov	r0, r8
 8008a06:	4798      	blx	r3
 8008a08:	6923      	ldr	r3, [r4, #16]
 8008a0a:	3b01      	subs	r3, #1
 8008a0c:	6123      	str	r3, [r4, #16]
 8008a0e:	e7f0      	b.n	80089f2 <_scanf_float+0x2ae>
 8008a10:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008a14:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008a18:	464a      	mov	r2, r9
 8008a1a:	4640      	mov	r0, r8
 8008a1c:	4798      	blx	r3
 8008a1e:	6923      	ldr	r3, [r4, #16]
 8008a20:	3b01      	subs	r3, #1
 8008a22:	6123      	str	r3, [r4, #16]
 8008a24:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8008a28:	fa5f fa8a 	uxtb.w	sl, sl
 8008a2c:	f1ba 0f02 	cmp.w	sl, #2
 8008a30:	d1ee      	bne.n	8008a10 <_scanf_float+0x2cc>
 8008a32:	3d03      	subs	r5, #3
 8008a34:	b2ed      	uxtb	r5, r5
 8008a36:	1b76      	subs	r6, r6, r5
 8008a38:	6823      	ldr	r3, [r4, #0]
 8008a3a:	05da      	lsls	r2, r3, #23
 8008a3c:	d530      	bpl.n	8008aa0 <_scanf_float+0x35c>
 8008a3e:	055b      	lsls	r3, r3, #21
 8008a40:	d511      	bpl.n	8008a66 <_scanf_float+0x322>
 8008a42:	9b01      	ldr	r3, [sp, #4]
 8008a44:	429e      	cmp	r6, r3
 8008a46:	f67f aebf 	bls.w	80087c8 <_scanf_float+0x84>
 8008a4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008a4e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008a52:	464a      	mov	r2, r9
 8008a54:	4640      	mov	r0, r8
 8008a56:	4798      	blx	r3
 8008a58:	6923      	ldr	r3, [r4, #16]
 8008a5a:	3b01      	subs	r3, #1
 8008a5c:	6123      	str	r3, [r4, #16]
 8008a5e:	e7f0      	b.n	8008a42 <_scanf_float+0x2fe>
 8008a60:	46aa      	mov	sl, r5
 8008a62:	46b3      	mov	fp, r6
 8008a64:	e7de      	b.n	8008a24 <_scanf_float+0x2e0>
 8008a66:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008a6a:	6923      	ldr	r3, [r4, #16]
 8008a6c:	2965      	cmp	r1, #101	@ 0x65
 8008a6e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8008a72:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8008a76:	6123      	str	r3, [r4, #16]
 8008a78:	d00c      	beq.n	8008a94 <_scanf_float+0x350>
 8008a7a:	2945      	cmp	r1, #69	@ 0x45
 8008a7c:	d00a      	beq.n	8008a94 <_scanf_float+0x350>
 8008a7e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008a82:	464a      	mov	r2, r9
 8008a84:	4640      	mov	r0, r8
 8008a86:	4798      	blx	r3
 8008a88:	6923      	ldr	r3, [r4, #16]
 8008a8a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008a8e:	3b01      	subs	r3, #1
 8008a90:	1eb5      	subs	r5, r6, #2
 8008a92:	6123      	str	r3, [r4, #16]
 8008a94:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008a98:	464a      	mov	r2, r9
 8008a9a:	4640      	mov	r0, r8
 8008a9c:	4798      	blx	r3
 8008a9e:	462e      	mov	r6, r5
 8008aa0:	6822      	ldr	r2, [r4, #0]
 8008aa2:	f012 0210 	ands.w	r2, r2, #16
 8008aa6:	d001      	beq.n	8008aac <_scanf_float+0x368>
 8008aa8:	2000      	movs	r0, #0
 8008aaa:	e68e      	b.n	80087ca <_scanf_float+0x86>
 8008aac:	7032      	strb	r2, [r6, #0]
 8008aae:	6823      	ldr	r3, [r4, #0]
 8008ab0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008ab4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ab8:	d125      	bne.n	8008b06 <_scanf_float+0x3c2>
 8008aba:	9b02      	ldr	r3, [sp, #8]
 8008abc:	429f      	cmp	r7, r3
 8008abe:	d00a      	beq.n	8008ad6 <_scanf_float+0x392>
 8008ac0:	1bda      	subs	r2, r3, r7
 8008ac2:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008ac6:	429e      	cmp	r6, r3
 8008ac8:	bf28      	it	cs
 8008aca:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008ace:	4922      	ldr	r1, [pc, #136]	@ (8008b58 <_scanf_float+0x414>)
 8008ad0:	4630      	mov	r0, r6
 8008ad2:	f000 f845 	bl	8008b60 <siprintf>
 8008ad6:	9901      	ldr	r1, [sp, #4]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	4640      	mov	r0, r8
 8008adc:	f000 ff08 	bl	80098f0 <_strtod_r>
 8008ae0:	9b03      	ldr	r3, [sp, #12]
 8008ae2:	6821      	ldr	r1, [r4, #0]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f011 0f02 	tst.w	r1, #2
 8008aea:	ec57 6b10 	vmov	r6, r7, d0
 8008aee:	f103 0204 	add.w	r2, r3, #4
 8008af2:	d015      	beq.n	8008b20 <_scanf_float+0x3dc>
 8008af4:	9903      	ldr	r1, [sp, #12]
 8008af6:	600a      	str	r2, [r1, #0]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	e9c3 6700 	strd	r6, r7, [r3]
 8008afe:	68e3      	ldr	r3, [r4, #12]
 8008b00:	3301      	adds	r3, #1
 8008b02:	60e3      	str	r3, [r4, #12]
 8008b04:	e7d0      	b.n	8008aa8 <_scanf_float+0x364>
 8008b06:	9b04      	ldr	r3, [sp, #16]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d0e4      	beq.n	8008ad6 <_scanf_float+0x392>
 8008b0c:	9905      	ldr	r1, [sp, #20]
 8008b0e:	230a      	movs	r3, #10
 8008b10:	3101      	adds	r1, #1
 8008b12:	4640      	mov	r0, r8
 8008b14:	f000 ff6c 	bl	80099f0 <_strtol_r>
 8008b18:	9b04      	ldr	r3, [sp, #16]
 8008b1a:	9e05      	ldr	r6, [sp, #20]
 8008b1c:	1ac2      	subs	r2, r0, r3
 8008b1e:	e7d0      	b.n	8008ac2 <_scanf_float+0x37e>
 8008b20:	f011 0f04 	tst.w	r1, #4
 8008b24:	9903      	ldr	r1, [sp, #12]
 8008b26:	600a      	str	r2, [r1, #0]
 8008b28:	d1e6      	bne.n	8008af8 <_scanf_float+0x3b4>
 8008b2a:	681d      	ldr	r5, [r3, #0]
 8008b2c:	4632      	mov	r2, r6
 8008b2e:	463b      	mov	r3, r7
 8008b30:	4630      	mov	r0, r6
 8008b32:	4639      	mov	r1, r7
 8008b34:	f7f7 fffa 	bl	8000b2c <__aeabi_dcmpun>
 8008b38:	b128      	cbz	r0, 8008b46 <_scanf_float+0x402>
 8008b3a:	4808      	ldr	r0, [pc, #32]	@ (8008b5c <_scanf_float+0x418>)
 8008b3c:	f000 ffdc 	bl	8009af8 <nanf>
 8008b40:	ed85 0a00 	vstr	s0, [r5]
 8008b44:	e7db      	b.n	8008afe <_scanf_float+0x3ba>
 8008b46:	4630      	mov	r0, r6
 8008b48:	4639      	mov	r1, r7
 8008b4a:	f7f8 f84d 	bl	8000be8 <__aeabi_d2f>
 8008b4e:	6028      	str	r0, [r5, #0]
 8008b50:	e7d5      	b.n	8008afe <_scanf_float+0x3ba>
 8008b52:	2700      	movs	r7, #0
 8008b54:	e62e      	b.n	80087b4 <_scanf_float+0x70>
 8008b56:	bf00      	nop
 8008b58:	0800c93c 	.word	0x0800c93c
 8008b5c:	0800cadd 	.word	0x0800cadd

08008b60 <siprintf>:
 8008b60:	b40e      	push	{r1, r2, r3}
 8008b62:	b510      	push	{r4, lr}
 8008b64:	b09d      	sub	sp, #116	@ 0x74
 8008b66:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008b68:	9002      	str	r0, [sp, #8]
 8008b6a:	9006      	str	r0, [sp, #24]
 8008b6c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008b70:	480a      	ldr	r0, [pc, #40]	@ (8008b9c <siprintf+0x3c>)
 8008b72:	9107      	str	r1, [sp, #28]
 8008b74:	9104      	str	r1, [sp, #16]
 8008b76:	490a      	ldr	r1, [pc, #40]	@ (8008ba0 <siprintf+0x40>)
 8008b78:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b7c:	9105      	str	r1, [sp, #20]
 8008b7e:	2400      	movs	r4, #0
 8008b80:	a902      	add	r1, sp, #8
 8008b82:	6800      	ldr	r0, [r0, #0]
 8008b84:	9301      	str	r3, [sp, #4]
 8008b86:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008b88:	f002 f9aa 	bl	800aee0 <_svfiprintf_r>
 8008b8c:	9b02      	ldr	r3, [sp, #8]
 8008b8e:	701c      	strb	r4, [r3, #0]
 8008b90:	b01d      	add	sp, #116	@ 0x74
 8008b92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b96:	b003      	add	sp, #12
 8008b98:	4770      	bx	lr
 8008b9a:	bf00      	nop
 8008b9c:	20000188 	.word	0x20000188
 8008ba0:	ffff0208 	.word	0xffff0208

08008ba4 <std>:
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	b510      	push	{r4, lr}
 8008ba8:	4604      	mov	r4, r0
 8008baa:	e9c0 3300 	strd	r3, r3, [r0]
 8008bae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008bb2:	6083      	str	r3, [r0, #8]
 8008bb4:	8181      	strh	r1, [r0, #12]
 8008bb6:	6643      	str	r3, [r0, #100]	@ 0x64
 8008bb8:	81c2      	strh	r2, [r0, #14]
 8008bba:	6183      	str	r3, [r0, #24]
 8008bbc:	4619      	mov	r1, r3
 8008bbe:	2208      	movs	r2, #8
 8008bc0:	305c      	adds	r0, #92	@ 0x5c
 8008bc2:	f000 ff35 	bl	8009a30 <memset>
 8008bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8008bfc <std+0x58>)
 8008bc8:	6263      	str	r3, [r4, #36]	@ 0x24
 8008bca:	4b0d      	ldr	r3, [pc, #52]	@ (8008c00 <std+0x5c>)
 8008bcc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008bce:	4b0d      	ldr	r3, [pc, #52]	@ (8008c04 <std+0x60>)
 8008bd0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8008c08 <std+0x64>)
 8008bd4:	6323      	str	r3, [r4, #48]	@ 0x30
 8008bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8008c0c <std+0x68>)
 8008bd8:	6224      	str	r4, [r4, #32]
 8008bda:	429c      	cmp	r4, r3
 8008bdc:	d006      	beq.n	8008bec <std+0x48>
 8008bde:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008be2:	4294      	cmp	r4, r2
 8008be4:	d002      	beq.n	8008bec <std+0x48>
 8008be6:	33d0      	adds	r3, #208	@ 0xd0
 8008be8:	429c      	cmp	r4, r3
 8008bea:	d105      	bne.n	8008bf8 <std+0x54>
 8008bec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008bf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bf4:	f000 bf60 	b.w	8009ab8 <__retarget_lock_init_recursive>
 8008bf8:	bd10      	pop	{r4, pc}
 8008bfa:	bf00      	nop
 8008bfc:	0800bd15 	.word	0x0800bd15
 8008c00:	0800bd37 	.word	0x0800bd37
 8008c04:	0800bd6f 	.word	0x0800bd6f
 8008c08:	0800bd93 	.word	0x0800bd93
 8008c0c:	20000574 	.word	0x20000574

08008c10 <stdio_exit_handler>:
 8008c10:	4a02      	ldr	r2, [pc, #8]	@ (8008c1c <stdio_exit_handler+0xc>)
 8008c12:	4903      	ldr	r1, [pc, #12]	@ (8008c20 <stdio_exit_handler+0x10>)
 8008c14:	4803      	ldr	r0, [pc, #12]	@ (8008c24 <stdio_exit_handler+0x14>)
 8008c16:	f000 beed 	b.w	80099f4 <_fwalk_sglue>
 8008c1a:	bf00      	nop
 8008c1c:	20000010 	.word	0x20000010
 8008c20:	0800b359 	.word	0x0800b359
 8008c24:	2000018c 	.word	0x2000018c

08008c28 <cleanup_stdio>:
 8008c28:	6841      	ldr	r1, [r0, #4]
 8008c2a:	4b0c      	ldr	r3, [pc, #48]	@ (8008c5c <cleanup_stdio+0x34>)
 8008c2c:	4299      	cmp	r1, r3
 8008c2e:	b510      	push	{r4, lr}
 8008c30:	4604      	mov	r4, r0
 8008c32:	d001      	beq.n	8008c38 <cleanup_stdio+0x10>
 8008c34:	f002 fb90 	bl	800b358 <_fflush_r>
 8008c38:	68a1      	ldr	r1, [r4, #8]
 8008c3a:	4b09      	ldr	r3, [pc, #36]	@ (8008c60 <cleanup_stdio+0x38>)
 8008c3c:	4299      	cmp	r1, r3
 8008c3e:	d002      	beq.n	8008c46 <cleanup_stdio+0x1e>
 8008c40:	4620      	mov	r0, r4
 8008c42:	f002 fb89 	bl	800b358 <_fflush_r>
 8008c46:	68e1      	ldr	r1, [r4, #12]
 8008c48:	4b06      	ldr	r3, [pc, #24]	@ (8008c64 <cleanup_stdio+0x3c>)
 8008c4a:	4299      	cmp	r1, r3
 8008c4c:	d004      	beq.n	8008c58 <cleanup_stdio+0x30>
 8008c4e:	4620      	mov	r0, r4
 8008c50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c54:	f002 bb80 	b.w	800b358 <_fflush_r>
 8008c58:	bd10      	pop	{r4, pc}
 8008c5a:	bf00      	nop
 8008c5c:	20000574 	.word	0x20000574
 8008c60:	200005dc 	.word	0x200005dc
 8008c64:	20000644 	.word	0x20000644

08008c68 <global_stdio_init.part.0>:
 8008c68:	b510      	push	{r4, lr}
 8008c6a:	4b0b      	ldr	r3, [pc, #44]	@ (8008c98 <global_stdio_init.part.0+0x30>)
 8008c6c:	4c0b      	ldr	r4, [pc, #44]	@ (8008c9c <global_stdio_init.part.0+0x34>)
 8008c6e:	4a0c      	ldr	r2, [pc, #48]	@ (8008ca0 <global_stdio_init.part.0+0x38>)
 8008c70:	601a      	str	r2, [r3, #0]
 8008c72:	4620      	mov	r0, r4
 8008c74:	2200      	movs	r2, #0
 8008c76:	2104      	movs	r1, #4
 8008c78:	f7ff ff94 	bl	8008ba4 <std>
 8008c7c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008c80:	2201      	movs	r2, #1
 8008c82:	2109      	movs	r1, #9
 8008c84:	f7ff ff8e 	bl	8008ba4 <std>
 8008c88:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008c8c:	2202      	movs	r2, #2
 8008c8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c92:	2112      	movs	r1, #18
 8008c94:	f7ff bf86 	b.w	8008ba4 <std>
 8008c98:	200006ac 	.word	0x200006ac
 8008c9c:	20000574 	.word	0x20000574
 8008ca0:	08008c11 	.word	0x08008c11

08008ca4 <__sfp_lock_acquire>:
 8008ca4:	4801      	ldr	r0, [pc, #4]	@ (8008cac <__sfp_lock_acquire+0x8>)
 8008ca6:	f000 bf08 	b.w	8009aba <__retarget_lock_acquire_recursive>
 8008caa:	bf00      	nop
 8008cac:	200006b1 	.word	0x200006b1

08008cb0 <__sfp_lock_release>:
 8008cb0:	4801      	ldr	r0, [pc, #4]	@ (8008cb8 <__sfp_lock_release+0x8>)
 8008cb2:	f000 bf03 	b.w	8009abc <__retarget_lock_release_recursive>
 8008cb6:	bf00      	nop
 8008cb8:	200006b1 	.word	0x200006b1

08008cbc <__sinit>:
 8008cbc:	b510      	push	{r4, lr}
 8008cbe:	4604      	mov	r4, r0
 8008cc0:	f7ff fff0 	bl	8008ca4 <__sfp_lock_acquire>
 8008cc4:	6a23      	ldr	r3, [r4, #32]
 8008cc6:	b11b      	cbz	r3, 8008cd0 <__sinit+0x14>
 8008cc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ccc:	f7ff bff0 	b.w	8008cb0 <__sfp_lock_release>
 8008cd0:	4b04      	ldr	r3, [pc, #16]	@ (8008ce4 <__sinit+0x28>)
 8008cd2:	6223      	str	r3, [r4, #32]
 8008cd4:	4b04      	ldr	r3, [pc, #16]	@ (8008ce8 <__sinit+0x2c>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d1f5      	bne.n	8008cc8 <__sinit+0xc>
 8008cdc:	f7ff ffc4 	bl	8008c68 <global_stdio_init.part.0>
 8008ce0:	e7f2      	b.n	8008cc8 <__sinit+0xc>
 8008ce2:	bf00      	nop
 8008ce4:	08008c29 	.word	0x08008c29
 8008ce8:	200006ac 	.word	0x200006ac

08008cec <sulp>:
 8008cec:	b570      	push	{r4, r5, r6, lr}
 8008cee:	4604      	mov	r4, r0
 8008cf0:	460d      	mov	r5, r1
 8008cf2:	ec45 4b10 	vmov	d0, r4, r5
 8008cf6:	4616      	mov	r6, r2
 8008cf8:	f002 fece 	bl	800ba98 <__ulp>
 8008cfc:	ec51 0b10 	vmov	r0, r1, d0
 8008d00:	b17e      	cbz	r6, 8008d22 <sulp+0x36>
 8008d02:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008d06:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	dd09      	ble.n	8008d22 <sulp+0x36>
 8008d0e:	051b      	lsls	r3, r3, #20
 8008d10:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008d14:	2400      	movs	r4, #0
 8008d16:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008d1a:	4622      	mov	r2, r4
 8008d1c:	462b      	mov	r3, r5
 8008d1e:	f7f7 fc6b 	bl	80005f8 <__aeabi_dmul>
 8008d22:	ec41 0b10 	vmov	d0, r0, r1
 8008d26:	bd70      	pop	{r4, r5, r6, pc}

08008d28 <_strtod_l>:
 8008d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d2c:	b09f      	sub	sp, #124	@ 0x7c
 8008d2e:	460c      	mov	r4, r1
 8008d30:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008d32:	2200      	movs	r2, #0
 8008d34:	921a      	str	r2, [sp, #104]	@ 0x68
 8008d36:	9005      	str	r0, [sp, #20]
 8008d38:	f04f 0a00 	mov.w	sl, #0
 8008d3c:	f04f 0b00 	mov.w	fp, #0
 8008d40:	460a      	mov	r2, r1
 8008d42:	9219      	str	r2, [sp, #100]	@ 0x64
 8008d44:	7811      	ldrb	r1, [r2, #0]
 8008d46:	292b      	cmp	r1, #43	@ 0x2b
 8008d48:	d04a      	beq.n	8008de0 <_strtod_l+0xb8>
 8008d4a:	d838      	bhi.n	8008dbe <_strtod_l+0x96>
 8008d4c:	290d      	cmp	r1, #13
 8008d4e:	d832      	bhi.n	8008db6 <_strtod_l+0x8e>
 8008d50:	2908      	cmp	r1, #8
 8008d52:	d832      	bhi.n	8008dba <_strtod_l+0x92>
 8008d54:	2900      	cmp	r1, #0
 8008d56:	d03b      	beq.n	8008dd0 <_strtod_l+0xa8>
 8008d58:	2200      	movs	r2, #0
 8008d5a:	920e      	str	r2, [sp, #56]	@ 0x38
 8008d5c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008d5e:	782a      	ldrb	r2, [r5, #0]
 8008d60:	2a30      	cmp	r2, #48	@ 0x30
 8008d62:	f040 80b2 	bne.w	8008eca <_strtod_l+0x1a2>
 8008d66:	786a      	ldrb	r2, [r5, #1]
 8008d68:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008d6c:	2a58      	cmp	r2, #88	@ 0x58
 8008d6e:	d16e      	bne.n	8008e4e <_strtod_l+0x126>
 8008d70:	9302      	str	r3, [sp, #8]
 8008d72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d74:	9301      	str	r3, [sp, #4]
 8008d76:	ab1a      	add	r3, sp, #104	@ 0x68
 8008d78:	9300      	str	r3, [sp, #0]
 8008d7a:	4a8f      	ldr	r2, [pc, #572]	@ (8008fb8 <_strtod_l+0x290>)
 8008d7c:	9805      	ldr	r0, [sp, #20]
 8008d7e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008d80:	a919      	add	r1, sp, #100	@ 0x64
 8008d82:	f001 fd81 	bl	800a888 <__gethex>
 8008d86:	f010 060f 	ands.w	r6, r0, #15
 8008d8a:	4604      	mov	r4, r0
 8008d8c:	d005      	beq.n	8008d9a <_strtod_l+0x72>
 8008d8e:	2e06      	cmp	r6, #6
 8008d90:	d128      	bne.n	8008de4 <_strtod_l+0xbc>
 8008d92:	3501      	adds	r5, #1
 8008d94:	2300      	movs	r3, #0
 8008d96:	9519      	str	r5, [sp, #100]	@ 0x64
 8008d98:	930e      	str	r3, [sp, #56]	@ 0x38
 8008d9a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	f040 858e 	bne.w	80098be <_strtod_l+0xb96>
 8008da2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008da4:	b1cb      	cbz	r3, 8008dda <_strtod_l+0xb2>
 8008da6:	4652      	mov	r2, sl
 8008da8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8008dac:	ec43 2b10 	vmov	d0, r2, r3
 8008db0:	b01f      	add	sp, #124	@ 0x7c
 8008db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008db6:	2920      	cmp	r1, #32
 8008db8:	d1ce      	bne.n	8008d58 <_strtod_l+0x30>
 8008dba:	3201      	adds	r2, #1
 8008dbc:	e7c1      	b.n	8008d42 <_strtod_l+0x1a>
 8008dbe:	292d      	cmp	r1, #45	@ 0x2d
 8008dc0:	d1ca      	bne.n	8008d58 <_strtod_l+0x30>
 8008dc2:	2101      	movs	r1, #1
 8008dc4:	910e      	str	r1, [sp, #56]	@ 0x38
 8008dc6:	1c51      	adds	r1, r2, #1
 8008dc8:	9119      	str	r1, [sp, #100]	@ 0x64
 8008dca:	7852      	ldrb	r2, [r2, #1]
 8008dcc:	2a00      	cmp	r2, #0
 8008dce:	d1c5      	bne.n	8008d5c <_strtod_l+0x34>
 8008dd0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008dd2:	9419      	str	r4, [sp, #100]	@ 0x64
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	f040 8570 	bne.w	80098ba <_strtod_l+0xb92>
 8008dda:	4652      	mov	r2, sl
 8008ddc:	465b      	mov	r3, fp
 8008dde:	e7e5      	b.n	8008dac <_strtod_l+0x84>
 8008de0:	2100      	movs	r1, #0
 8008de2:	e7ef      	b.n	8008dc4 <_strtod_l+0x9c>
 8008de4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008de6:	b13a      	cbz	r2, 8008df8 <_strtod_l+0xd0>
 8008de8:	2135      	movs	r1, #53	@ 0x35
 8008dea:	a81c      	add	r0, sp, #112	@ 0x70
 8008dec:	f002 ff4e 	bl	800bc8c <__copybits>
 8008df0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008df2:	9805      	ldr	r0, [sp, #20]
 8008df4:	f002 fb24 	bl	800b440 <_Bfree>
 8008df8:	3e01      	subs	r6, #1
 8008dfa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008dfc:	2e04      	cmp	r6, #4
 8008dfe:	d806      	bhi.n	8008e0e <_strtod_l+0xe6>
 8008e00:	e8df f006 	tbb	[pc, r6]
 8008e04:	201d0314 	.word	0x201d0314
 8008e08:	14          	.byte	0x14
 8008e09:	00          	.byte	0x00
 8008e0a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008e0e:	05e1      	lsls	r1, r4, #23
 8008e10:	bf48      	it	mi
 8008e12:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008e16:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008e1a:	0d1b      	lsrs	r3, r3, #20
 8008e1c:	051b      	lsls	r3, r3, #20
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d1bb      	bne.n	8008d9a <_strtod_l+0x72>
 8008e22:	f000 fe1f 	bl	8009a64 <__errno>
 8008e26:	2322      	movs	r3, #34	@ 0x22
 8008e28:	6003      	str	r3, [r0, #0]
 8008e2a:	e7b6      	b.n	8008d9a <_strtod_l+0x72>
 8008e2c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008e30:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008e34:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008e38:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008e3c:	e7e7      	b.n	8008e0e <_strtod_l+0xe6>
 8008e3e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8008fc0 <_strtod_l+0x298>
 8008e42:	e7e4      	b.n	8008e0e <_strtod_l+0xe6>
 8008e44:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008e48:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8008e4c:	e7df      	b.n	8008e0e <_strtod_l+0xe6>
 8008e4e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008e50:	1c5a      	adds	r2, r3, #1
 8008e52:	9219      	str	r2, [sp, #100]	@ 0x64
 8008e54:	785b      	ldrb	r3, [r3, #1]
 8008e56:	2b30      	cmp	r3, #48	@ 0x30
 8008e58:	d0f9      	beq.n	8008e4e <_strtod_l+0x126>
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d09d      	beq.n	8008d9a <_strtod_l+0x72>
 8008e5e:	2301      	movs	r3, #1
 8008e60:	2700      	movs	r7, #0
 8008e62:	9308      	str	r3, [sp, #32]
 8008e64:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008e66:	930c      	str	r3, [sp, #48]	@ 0x30
 8008e68:	970b      	str	r7, [sp, #44]	@ 0x2c
 8008e6a:	46b9      	mov	r9, r7
 8008e6c:	220a      	movs	r2, #10
 8008e6e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008e70:	7805      	ldrb	r5, [r0, #0]
 8008e72:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008e76:	b2d9      	uxtb	r1, r3
 8008e78:	2909      	cmp	r1, #9
 8008e7a:	d928      	bls.n	8008ece <_strtod_l+0x1a6>
 8008e7c:	494f      	ldr	r1, [pc, #316]	@ (8008fbc <_strtod_l+0x294>)
 8008e7e:	2201      	movs	r2, #1
 8008e80:	f000 fdde 	bl	8009a40 <strncmp>
 8008e84:	2800      	cmp	r0, #0
 8008e86:	d032      	beq.n	8008eee <_strtod_l+0x1c6>
 8008e88:	2000      	movs	r0, #0
 8008e8a:	462a      	mov	r2, r5
 8008e8c:	900a      	str	r0, [sp, #40]	@ 0x28
 8008e8e:	464d      	mov	r5, r9
 8008e90:	4603      	mov	r3, r0
 8008e92:	2a65      	cmp	r2, #101	@ 0x65
 8008e94:	d001      	beq.n	8008e9a <_strtod_l+0x172>
 8008e96:	2a45      	cmp	r2, #69	@ 0x45
 8008e98:	d114      	bne.n	8008ec4 <_strtod_l+0x19c>
 8008e9a:	b91d      	cbnz	r5, 8008ea4 <_strtod_l+0x17c>
 8008e9c:	9a08      	ldr	r2, [sp, #32]
 8008e9e:	4302      	orrs	r2, r0
 8008ea0:	d096      	beq.n	8008dd0 <_strtod_l+0xa8>
 8008ea2:	2500      	movs	r5, #0
 8008ea4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008ea6:	1c62      	adds	r2, r4, #1
 8008ea8:	9219      	str	r2, [sp, #100]	@ 0x64
 8008eaa:	7862      	ldrb	r2, [r4, #1]
 8008eac:	2a2b      	cmp	r2, #43	@ 0x2b
 8008eae:	d07a      	beq.n	8008fa6 <_strtod_l+0x27e>
 8008eb0:	2a2d      	cmp	r2, #45	@ 0x2d
 8008eb2:	d07e      	beq.n	8008fb2 <_strtod_l+0x28a>
 8008eb4:	f04f 0c00 	mov.w	ip, #0
 8008eb8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008ebc:	2909      	cmp	r1, #9
 8008ebe:	f240 8085 	bls.w	8008fcc <_strtod_l+0x2a4>
 8008ec2:	9419      	str	r4, [sp, #100]	@ 0x64
 8008ec4:	f04f 0800 	mov.w	r8, #0
 8008ec8:	e0a5      	b.n	8009016 <_strtod_l+0x2ee>
 8008eca:	2300      	movs	r3, #0
 8008ecc:	e7c8      	b.n	8008e60 <_strtod_l+0x138>
 8008ece:	f1b9 0f08 	cmp.w	r9, #8
 8008ed2:	bfd8      	it	le
 8008ed4:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8008ed6:	f100 0001 	add.w	r0, r0, #1
 8008eda:	bfda      	itte	le
 8008edc:	fb02 3301 	mlale	r3, r2, r1, r3
 8008ee0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8008ee2:	fb02 3707 	mlagt	r7, r2, r7, r3
 8008ee6:	f109 0901 	add.w	r9, r9, #1
 8008eea:	9019      	str	r0, [sp, #100]	@ 0x64
 8008eec:	e7bf      	b.n	8008e6e <_strtod_l+0x146>
 8008eee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008ef0:	1c5a      	adds	r2, r3, #1
 8008ef2:	9219      	str	r2, [sp, #100]	@ 0x64
 8008ef4:	785a      	ldrb	r2, [r3, #1]
 8008ef6:	f1b9 0f00 	cmp.w	r9, #0
 8008efa:	d03b      	beq.n	8008f74 <_strtod_l+0x24c>
 8008efc:	900a      	str	r0, [sp, #40]	@ 0x28
 8008efe:	464d      	mov	r5, r9
 8008f00:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008f04:	2b09      	cmp	r3, #9
 8008f06:	d912      	bls.n	8008f2e <_strtod_l+0x206>
 8008f08:	2301      	movs	r3, #1
 8008f0a:	e7c2      	b.n	8008e92 <_strtod_l+0x16a>
 8008f0c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f0e:	1c5a      	adds	r2, r3, #1
 8008f10:	9219      	str	r2, [sp, #100]	@ 0x64
 8008f12:	785a      	ldrb	r2, [r3, #1]
 8008f14:	3001      	adds	r0, #1
 8008f16:	2a30      	cmp	r2, #48	@ 0x30
 8008f18:	d0f8      	beq.n	8008f0c <_strtod_l+0x1e4>
 8008f1a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008f1e:	2b08      	cmp	r3, #8
 8008f20:	f200 84d2 	bhi.w	80098c8 <_strtod_l+0xba0>
 8008f24:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f26:	900a      	str	r0, [sp, #40]	@ 0x28
 8008f28:	2000      	movs	r0, #0
 8008f2a:	930c      	str	r3, [sp, #48]	@ 0x30
 8008f2c:	4605      	mov	r5, r0
 8008f2e:	3a30      	subs	r2, #48	@ 0x30
 8008f30:	f100 0301 	add.w	r3, r0, #1
 8008f34:	d018      	beq.n	8008f68 <_strtod_l+0x240>
 8008f36:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008f38:	4419      	add	r1, r3
 8008f3a:	910a      	str	r1, [sp, #40]	@ 0x28
 8008f3c:	462e      	mov	r6, r5
 8008f3e:	f04f 0e0a 	mov.w	lr, #10
 8008f42:	1c71      	adds	r1, r6, #1
 8008f44:	eba1 0c05 	sub.w	ip, r1, r5
 8008f48:	4563      	cmp	r3, ip
 8008f4a:	dc15      	bgt.n	8008f78 <_strtod_l+0x250>
 8008f4c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8008f50:	182b      	adds	r3, r5, r0
 8008f52:	2b08      	cmp	r3, #8
 8008f54:	f105 0501 	add.w	r5, r5, #1
 8008f58:	4405      	add	r5, r0
 8008f5a:	dc1a      	bgt.n	8008f92 <_strtod_l+0x26a>
 8008f5c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008f5e:	230a      	movs	r3, #10
 8008f60:	fb03 2301 	mla	r3, r3, r1, r2
 8008f64:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008f66:	2300      	movs	r3, #0
 8008f68:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008f6a:	1c51      	adds	r1, r2, #1
 8008f6c:	9119      	str	r1, [sp, #100]	@ 0x64
 8008f6e:	7852      	ldrb	r2, [r2, #1]
 8008f70:	4618      	mov	r0, r3
 8008f72:	e7c5      	b.n	8008f00 <_strtod_l+0x1d8>
 8008f74:	4648      	mov	r0, r9
 8008f76:	e7ce      	b.n	8008f16 <_strtod_l+0x1ee>
 8008f78:	2e08      	cmp	r6, #8
 8008f7a:	dc05      	bgt.n	8008f88 <_strtod_l+0x260>
 8008f7c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008f7e:	fb0e f606 	mul.w	r6, lr, r6
 8008f82:	960b      	str	r6, [sp, #44]	@ 0x2c
 8008f84:	460e      	mov	r6, r1
 8008f86:	e7dc      	b.n	8008f42 <_strtod_l+0x21a>
 8008f88:	2910      	cmp	r1, #16
 8008f8a:	bfd8      	it	le
 8008f8c:	fb0e f707 	mulle.w	r7, lr, r7
 8008f90:	e7f8      	b.n	8008f84 <_strtod_l+0x25c>
 8008f92:	2b0f      	cmp	r3, #15
 8008f94:	bfdc      	itt	le
 8008f96:	230a      	movle	r3, #10
 8008f98:	fb03 2707 	mlale	r7, r3, r7, r2
 8008f9c:	e7e3      	b.n	8008f66 <_strtod_l+0x23e>
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	930a      	str	r3, [sp, #40]	@ 0x28
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	e77a      	b.n	8008e9c <_strtod_l+0x174>
 8008fa6:	f04f 0c00 	mov.w	ip, #0
 8008faa:	1ca2      	adds	r2, r4, #2
 8008fac:	9219      	str	r2, [sp, #100]	@ 0x64
 8008fae:	78a2      	ldrb	r2, [r4, #2]
 8008fb0:	e782      	b.n	8008eb8 <_strtod_l+0x190>
 8008fb2:	f04f 0c01 	mov.w	ip, #1
 8008fb6:	e7f8      	b.n	8008faa <_strtod_l+0x282>
 8008fb8:	0800caf4 	.word	0x0800caf4
 8008fbc:	0800c941 	.word	0x0800c941
 8008fc0:	7ff00000 	.word	0x7ff00000
 8008fc4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008fc6:	1c51      	adds	r1, r2, #1
 8008fc8:	9119      	str	r1, [sp, #100]	@ 0x64
 8008fca:	7852      	ldrb	r2, [r2, #1]
 8008fcc:	2a30      	cmp	r2, #48	@ 0x30
 8008fce:	d0f9      	beq.n	8008fc4 <_strtod_l+0x29c>
 8008fd0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008fd4:	2908      	cmp	r1, #8
 8008fd6:	f63f af75 	bhi.w	8008ec4 <_strtod_l+0x19c>
 8008fda:	3a30      	subs	r2, #48	@ 0x30
 8008fdc:	9209      	str	r2, [sp, #36]	@ 0x24
 8008fde:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008fe0:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008fe2:	f04f 080a 	mov.w	r8, #10
 8008fe6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008fe8:	1c56      	adds	r6, r2, #1
 8008fea:	9619      	str	r6, [sp, #100]	@ 0x64
 8008fec:	7852      	ldrb	r2, [r2, #1]
 8008fee:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008ff2:	f1be 0f09 	cmp.w	lr, #9
 8008ff6:	d939      	bls.n	800906c <_strtod_l+0x344>
 8008ff8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008ffa:	1a76      	subs	r6, r6, r1
 8008ffc:	2e08      	cmp	r6, #8
 8008ffe:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009002:	dc03      	bgt.n	800900c <_strtod_l+0x2e4>
 8009004:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009006:	4588      	cmp	r8, r1
 8009008:	bfa8      	it	ge
 800900a:	4688      	movge	r8, r1
 800900c:	f1bc 0f00 	cmp.w	ip, #0
 8009010:	d001      	beq.n	8009016 <_strtod_l+0x2ee>
 8009012:	f1c8 0800 	rsb	r8, r8, #0
 8009016:	2d00      	cmp	r5, #0
 8009018:	d14e      	bne.n	80090b8 <_strtod_l+0x390>
 800901a:	9908      	ldr	r1, [sp, #32]
 800901c:	4308      	orrs	r0, r1
 800901e:	f47f aebc 	bne.w	8008d9a <_strtod_l+0x72>
 8009022:	2b00      	cmp	r3, #0
 8009024:	f47f aed4 	bne.w	8008dd0 <_strtod_l+0xa8>
 8009028:	2a69      	cmp	r2, #105	@ 0x69
 800902a:	d028      	beq.n	800907e <_strtod_l+0x356>
 800902c:	dc25      	bgt.n	800907a <_strtod_l+0x352>
 800902e:	2a49      	cmp	r2, #73	@ 0x49
 8009030:	d025      	beq.n	800907e <_strtod_l+0x356>
 8009032:	2a4e      	cmp	r2, #78	@ 0x4e
 8009034:	f47f aecc 	bne.w	8008dd0 <_strtod_l+0xa8>
 8009038:	499a      	ldr	r1, [pc, #616]	@ (80092a4 <_strtod_l+0x57c>)
 800903a:	a819      	add	r0, sp, #100	@ 0x64
 800903c:	f001 fe46 	bl	800accc <__match>
 8009040:	2800      	cmp	r0, #0
 8009042:	f43f aec5 	beq.w	8008dd0 <_strtod_l+0xa8>
 8009046:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009048:	781b      	ldrb	r3, [r3, #0]
 800904a:	2b28      	cmp	r3, #40	@ 0x28
 800904c:	d12e      	bne.n	80090ac <_strtod_l+0x384>
 800904e:	4996      	ldr	r1, [pc, #600]	@ (80092a8 <_strtod_l+0x580>)
 8009050:	aa1c      	add	r2, sp, #112	@ 0x70
 8009052:	a819      	add	r0, sp, #100	@ 0x64
 8009054:	f001 fe4e 	bl	800acf4 <__hexnan>
 8009058:	2805      	cmp	r0, #5
 800905a:	d127      	bne.n	80090ac <_strtod_l+0x384>
 800905c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800905e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009062:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009066:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800906a:	e696      	b.n	8008d9a <_strtod_l+0x72>
 800906c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800906e:	fb08 2101 	mla	r1, r8, r1, r2
 8009072:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009076:	9209      	str	r2, [sp, #36]	@ 0x24
 8009078:	e7b5      	b.n	8008fe6 <_strtod_l+0x2be>
 800907a:	2a6e      	cmp	r2, #110	@ 0x6e
 800907c:	e7da      	b.n	8009034 <_strtod_l+0x30c>
 800907e:	498b      	ldr	r1, [pc, #556]	@ (80092ac <_strtod_l+0x584>)
 8009080:	a819      	add	r0, sp, #100	@ 0x64
 8009082:	f001 fe23 	bl	800accc <__match>
 8009086:	2800      	cmp	r0, #0
 8009088:	f43f aea2 	beq.w	8008dd0 <_strtod_l+0xa8>
 800908c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800908e:	4988      	ldr	r1, [pc, #544]	@ (80092b0 <_strtod_l+0x588>)
 8009090:	3b01      	subs	r3, #1
 8009092:	a819      	add	r0, sp, #100	@ 0x64
 8009094:	9319      	str	r3, [sp, #100]	@ 0x64
 8009096:	f001 fe19 	bl	800accc <__match>
 800909a:	b910      	cbnz	r0, 80090a2 <_strtod_l+0x37a>
 800909c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800909e:	3301      	adds	r3, #1
 80090a0:	9319      	str	r3, [sp, #100]	@ 0x64
 80090a2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 80092c0 <_strtod_l+0x598>
 80090a6:	f04f 0a00 	mov.w	sl, #0
 80090aa:	e676      	b.n	8008d9a <_strtod_l+0x72>
 80090ac:	4881      	ldr	r0, [pc, #516]	@ (80092b4 <_strtod_l+0x58c>)
 80090ae:	f000 fd1b 	bl	8009ae8 <nan>
 80090b2:	ec5b ab10 	vmov	sl, fp, d0
 80090b6:	e670      	b.n	8008d9a <_strtod_l+0x72>
 80090b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80090ba:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80090bc:	eba8 0303 	sub.w	r3, r8, r3
 80090c0:	f1b9 0f00 	cmp.w	r9, #0
 80090c4:	bf08      	it	eq
 80090c6:	46a9      	moveq	r9, r5
 80090c8:	2d10      	cmp	r5, #16
 80090ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80090cc:	462c      	mov	r4, r5
 80090ce:	bfa8      	it	ge
 80090d0:	2410      	movge	r4, #16
 80090d2:	f7f7 fa17 	bl	8000504 <__aeabi_ui2d>
 80090d6:	2d09      	cmp	r5, #9
 80090d8:	4682      	mov	sl, r0
 80090da:	468b      	mov	fp, r1
 80090dc:	dc13      	bgt.n	8009106 <_strtod_l+0x3de>
 80090de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	f43f ae5a 	beq.w	8008d9a <_strtod_l+0x72>
 80090e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090e8:	dd78      	ble.n	80091dc <_strtod_l+0x4b4>
 80090ea:	2b16      	cmp	r3, #22
 80090ec:	dc5f      	bgt.n	80091ae <_strtod_l+0x486>
 80090ee:	4972      	ldr	r1, [pc, #456]	@ (80092b8 <_strtod_l+0x590>)
 80090f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80090f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090f8:	4652      	mov	r2, sl
 80090fa:	465b      	mov	r3, fp
 80090fc:	f7f7 fa7c 	bl	80005f8 <__aeabi_dmul>
 8009100:	4682      	mov	sl, r0
 8009102:	468b      	mov	fp, r1
 8009104:	e649      	b.n	8008d9a <_strtod_l+0x72>
 8009106:	4b6c      	ldr	r3, [pc, #432]	@ (80092b8 <_strtod_l+0x590>)
 8009108:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800910c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009110:	f7f7 fa72 	bl	80005f8 <__aeabi_dmul>
 8009114:	4682      	mov	sl, r0
 8009116:	4638      	mov	r0, r7
 8009118:	468b      	mov	fp, r1
 800911a:	f7f7 f9f3 	bl	8000504 <__aeabi_ui2d>
 800911e:	4602      	mov	r2, r0
 8009120:	460b      	mov	r3, r1
 8009122:	4650      	mov	r0, sl
 8009124:	4659      	mov	r1, fp
 8009126:	f7f7 f8b1 	bl	800028c <__adddf3>
 800912a:	2d0f      	cmp	r5, #15
 800912c:	4682      	mov	sl, r0
 800912e:	468b      	mov	fp, r1
 8009130:	ddd5      	ble.n	80090de <_strtod_l+0x3b6>
 8009132:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009134:	1b2c      	subs	r4, r5, r4
 8009136:	441c      	add	r4, r3
 8009138:	2c00      	cmp	r4, #0
 800913a:	f340 8093 	ble.w	8009264 <_strtod_l+0x53c>
 800913e:	f014 030f 	ands.w	r3, r4, #15
 8009142:	d00a      	beq.n	800915a <_strtod_l+0x432>
 8009144:	495c      	ldr	r1, [pc, #368]	@ (80092b8 <_strtod_l+0x590>)
 8009146:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800914a:	4652      	mov	r2, sl
 800914c:	465b      	mov	r3, fp
 800914e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009152:	f7f7 fa51 	bl	80005f8 <__aeabi_dmul>
 8009156:	4682      	mov	sl, r0
 8009158:	468b      	mov	fp, r1
 800915a:	f034 040f 	bics.w	r4, r4, #15
 800915e:	d073      	beq.n	8009248 <_strtod_l+0x520>
 8009160:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009164:	dd49      	ble.n	80091fa <_strtod_l+0x4d2>
 8009166:	2400      	movs	r4, #0
 8009168:	46a0      	mov	r8, r4
 800916a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800916c:	46a1      	mov	r9, r4
 800916e:	9a05      	ldr	r2, [sp, #20]
 8009170:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 80092c0 <_strtod_l+0x598>
 8009174:	2322      	movs	r3, #34	@ 0x22
 8009176:	6013      	str	r3, [r2, #0]
 8009178:	f04f 0a00 	mov.w	sl, #0
 800917c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800917e:	2b00      	cmp	r3, #0
 8009180:	f43f ae0b 	beq.w	8008d9a <_strtod_l+0x72>
 8009184:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009186:	9805      	ldr	r0, [sp, #20]
 8009188:	f002 f95a 	bl	800b440 <_Bfree>
 800918c:	9805      	ldr	r0, [sp, #20]
 800918e:	4649      	mov	r1, r9
 8009190:	f002 f956 	bl	800b440 <_Bfree>
 8009194:	9805      	ldr	r0, [sp, #20]
 8009196:	4641      	mov	r1, r8
 8009198:	f002 f952 	bl	800b440 <_Bfree>
 800919c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800919e:	9805      	ldr	r0, [sp, #20]
 80091a0:	f002 f94e 	bl	800b440 <_Bfree>
 80091a4:	9805      	ldr	r0, [sp, #20]
 80091a6:	4621      	mov	r1, r4
 80091a8:	f002 f94a 	bl	800b440 <_Bfree>
 80091ac:	e5f5      	b.n	8008d9a <_strtod_l+0x72>
 80091ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80091b0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80091b4:	4293      	cmp	r3, r2
 80091b6:	dbbc      	blt.n	8009132 <_strtod_l+0x40a>
 80091b8:	4c3f      	ldr	r4, [pc, #252]	@ (80092b8 <_strtod_l+0x590>)
 80091ba:	f1c5 050f 	rsb	r5, r5, #15
 80091be:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80091c2:	4652      	mov	r2, sl
 80091c4:	465b      	mov	r3, fp
 80091c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80091ca:	f7f7 fa15 	bl	80005f8 <__aeabi_dmul>
 80091ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091d0:	1b5d      	subs	r5, r3, r5
 80091d2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80091d6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80091da:	e78f      	b.n	80090fc <_strtod_l+0x3d4>
 80091dc:	3316      	adds	r3, #22
 80091de:	dba8      	blt.n	8009132 <_strtod_l+0x40a>
 80091e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80091e2:	eba3 0808 	sub.w	r8, r3, r8
 80091e6:	4b34      	ldr	r3, [pc, #208]	@ (80092b8 <_strtod_l+0x590>)
 80091e8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80091ec:	e9d8 2300 	ldrd	r2, r3, [r8]
 80091f0:	4650      	mov	r0, sl
 80091f2:	4659      	mov	r1, fp
 80091f4:	f7f7 fb2a 	bl	800084c <__aeabi_ddiv>
 80091f8:	e782      	b.n	8009100 <_strtod_l+0x3d8>
 80091fa:	2300      	movs	r3, #0
 80091fc:	4f2f      	ldr	r7, [pc, #188]	@ (80092bc <_strtod_l+0x594>)
 80091fe:	1124      	asrs	r4, r4, #4
 8009200:	4650      	mov	r0, sl
 8009202:	4659      	mov	r1, fp
 8009204:	461e      	mov	r6, r3
 8009206:	2c01      	cmp	r4, #1
 8009208:	dc21      	bgt.n	800924e <_strtod_l+0x526>
 800920a:	b10b      	cbz	r3, 8009210 <_strtod_l+0x4e8>
 800920c:	4682      	mov	sl, r0
 800920e:	468b      	mov	fp, r1
 8009210:	492a      	ldr	r1, [pc, #168]	@ (80092bc <_strtod_l+0x594>)
 8009212:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009216:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800921a:	4652      	mov	r2, sl
 800921c:	465b      	mov	r3, fp
 800921e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009222:	f7f7 f9e9 	bl	80005f8 <__aeabi_dmul>
 8009226:	4b26      	ldr	r3, [pc, #152]	@ (80092c0 <_strtod_l+0x598>)
 8009228:	460a      	mov	r2, r1
 800922a:	400b      	ands	r3, r1
 800922c:	4925      	ldr	r1, [pc, #148]	@ (80092c4 <_strtod_l+0x59c>)
 800922e:	428b      	cmp	r3, r1
 8009230:	4682      	mov	sl, r0
 8009232:	d898      	bhi.n	8009166 <_strtod_l+0x43e>
 8009234:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009238:	428b      	cmp	r3, r1
 800923a:	bf86      	itte	hi
 800923c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 80092c8 <_strtod_l+0x5a0>
 8009240:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8009244:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009248:	2300      	movs	r3, #0
 800924a:	9308      	str	r3, [sp, #32]
 800924c:	e076      	b.n	800933c <_strtod_l+0x614>
 800924e:	07e2      	lsls	r2, r4, #31
 8009250:	d504      	bpl.n	800925c <_strtod_l+0x534>
 8009252:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009256:	f7f7 f9cf 	bl	80005f8 <__aeabi_dmul>
 800925a:	2301      	movs	r3, #1
 800925c:	3601      	adds	r6, #1
 800925e:	1064      	asrs	r4, r4, #1
 8009260:	3708      	adds	r7, #8
 8009262:	e7d0      	b.n	8009206 <_strtod_l+0x4de>
 8009264:	d0f0      	beq.n	8009248 <_strtod_l+0x520>
 8009266:	4264      	negs	r4, r4
 8009268:	f014 020f 	ands.w	r2, r4, #15
 800926c:	d00a      	beq.n	8009284 <_strtod_l+0x55c>
 800926e:	4b12      	ldr	r3, [pc, #72]	@ (80092b8 <_strtod_l+0x590>)
 8009270:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009274:	4650      	mov	r0, sl
 8009276:	4659      	mov	r1, fp
 8009278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800927c:	f7f7 fae6 	bl	800084c <__aeabi_ddiv>
 8009280:	4682      	mov	sl, r0
 8009282:	468b      	mov	fp, r1
 8009284:	1124      	asrs	r4, r4, #4
 8009286:	d0df      	beq.n	8009248 <_strtod_l+0x520>
 8009288:	2c1f      	cmp	r4, #31
 800928a:	dd1f      	ble.n	80092cc <_strtod_l+0x5a4>
 800928c:	2400      	movs	r4, #0
 800928e:	46a0      	mov	r8, r4
 8009290:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009292:	46a1      	mov	r9, r4
 8009294:	9a05      	ldr	r2, [sp, #20]
 8009296:	2322      	movs	r3, #34	@ 0x22
 8009298:	f04f 0a00 	mov.w	sl, #0
 800929c:	f04f 0b00 	mov.w	fp, #0
 80092a0:	6013      	str	r3, [r2, #0]
 80092a2:	e76b      	b.n	800917c <_strtod_l+0x454>
 80092a4:	0800c915 	.word	0x0800c915
 80092a8:	0800cae0 	.word	0x0800cae0
 80092ac:	0800c90d 	.word	0x0800c90d
 80092b0:	0800c94e 	.word	0x0800c94e
 80092b4:	0800cadd 	.word	0x0800cadd
 80092b8:	0800cc68 	.word	0x0800cc68
 80092bc:	0800cc40 	.word	0x0800cc40
 80092c0:	7ff00000 	.word	0x7ff00000
 80092c4:	7ca00000 	.word	0x7ca00000
 80092c8:	7fefffff 	.word	0x7fefffff
 80092cc:	f014 0310 	ands.w	r3, r4, #16
 80092d0:	bf18      	it	ne
 80092d2:	236a      	movne	r3, #106	@ 0x6a
 80092d4:	4ea9      	ldr	r6, [pc, #676]	@ (800957c <_strtod_l+0x854>)
 80092d6:	9308      	str	r3, [sp, #32]
 80092d8:	4650      	mov	r0, sl
 80092da:	4659      	mov	r1, fp
 80092dc:	2300      	movs	r3, #0
 80092de:	07e7      	lsls	r7, r4, #31
 80092e0:	d504      	bpl.n	80092ec <_strtod_l+0x5c4>
 80092e2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80092e6:	f7f7 f987 	bl	80005f8 <__aeabi_dmul>
 80092ea:	2301      	movs	r3, #1
 80092ec:	1064      	asrs	r4, r4, #1
 80092ee:	f106 0608 	add.w	r6, r6, #8
 80092f2:	d1f4      	bne.n	80092de <_strtod_l+0x5b6>
 80092f4:	b10b      	cbz	r3, 80092fa <_strtod_l+0x5d2>
 80092f6:	4682      	mov	sl, r0
 80092f8:	468b      	mov	fp, r1
 80092fa:	9b08      	ldr	r3, [sp, #32]
 80092fc:	b1b3      	cbz	r3, 800932c <_strtod_l+0x604>
 80092fe:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009302:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009306:	2b00      	cmp	r3, #0
 8009308:	4659      	mov	r1, fp
 800930a:	dd0f      	ble.n	800932c <_strtod_l+0x604>
 800930c:	2b1f      	cmp	r3, #31
 800930e:	dd56      	ble.n	80093be <_strtod_l+0x696>
 8009310:	2b34      	cmp	r3, #52	@ 0x34
 8009312:	bfde      	ittt	le
 8009314:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8009318:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800931c:	4093      	lslle	r3, r2
 800931e:	f04f 0a00 	mov.w	sl, #0
 8009322:	bfcc      	ite	gt
 8009324:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009328:	ea03 0b01 	andle.w	fp, r3, r1
 800932c:	2200      	movs	r2, #0
 800932e:	2300      	movs	r3, #0
 8009330:	4650      	mov	r0, sl
 8009332:	4659      	mov	r1, fp
 8009334:	f7f7 fbc8 	bl	8000ac8 <__aeabi_dcmpeq>
 8009338:	2800      	cmp	r0, #0
 800933a:	d1a7      	bne.n	800928c <_strtod_l+0x564>
 800933c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800933e:	9300      	str	r3, [sp, #0]
 8009340:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009342:	9805      	ldr	r0, [sp, #20]
 8009344:	462b      	mov	r3, r5
 8009346:	464a      	mov	r2, r9
 8009348:	f002 f8e2 	bl	800b510 <__s2b>
 800934c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800934e:	2800      	cmp	r0, #0
 8009350:	f43f af09 	beq.w	8009166 <_strtod_l+0x43e>
 8009354:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009356:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009358:	2a00      	cmp	r2, #0
 800935a:	eba3 0308 	sub.w	r3, r3, r8
 800935e:	bfa8      	it	ge
 8009360:	2300      	movge	r3, #0
 8009362:	9312      	str	r3, [sp, #72]	@ 0x48
 8009364:	2400      	movs	r4, #0
 8009366:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800936a:	9316      	str	r3, [sp, #88]	@ 0x58
 800936c:	46a0      	mov	r8, r4
 800936e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009370:	9805      	ldr	r0, [sp, #20]
 8009372:	6859      	ldr	r1, [r3, #4]
 8009374:	f002 f824 	bl	800b3c0 <_Balloc>
 8009378:	4681      	mov	r9, r0
 800937a:	2800      	cmp	r0, #0
 800937c:	f43f aef7 	beq.w	800916e <_strtod_l+0x446>
 8009380:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009382:	691a      	ldr	r2, [r3, #16]
 8009384:	3202      	adds	r2, #2
 8009386:	f103 010c 	add.w	r1, r3, #12
 800938a:	0092      	lsls	r2, r2, #2
 800938c:	300c      	adds	r0, #12
 800938e:	f000 fb9b 	bl	8009ac8 <memcpy>
 8009392:	ec4b ab10 	vmov	d0, sl, fp
 8009396:	9805      	ldr	r0, [sp, #20]
 8009398:	aa1c      	add	r2, sp, #112	@ 0x70
 800939a:	a91b      	add	r1, sp, #108	@ 0x6c
 800939c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80093a0:	f002 fbea 	bl	800bb78 <__d2b>
 80093a4:	901a      	str	r0, [sp, #104]	@ 0x68
 80093a6:	2800      	cmp	r0, #0
 80093a8:	f43f aee1 	beq.w	800916e <_strtod_l+0x446>
 80093ac:	9805      	ldr	r0, [sp, #20]
 80093ae:	2101      	movs	r1, #1
 80093b0:	f002 f944 	bl	800b63c <__i2b>
 80093b4:	4680      	mov	r8, r0
 80093b6:	b948      	cbnz	r0, 80093cc <_strtod_l+0x6a4>
 80093b8:	f04f 0800 	mov.w	r8, #0
 80093bc:	e6d7      	b.n	800916e <_strtod_l+0x446>
 80093be:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80093c2:	fa02 f303 	lsl.w	r3, r2, r3
 80093c6:	ea03 0a0a 	and.w	sl, r3, sl
 80093ca:	e7af      	b.n	800932c <_strtod_l+0x604>
 80093cc:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80093ce:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80093d0:	2d00      	cmp	r5, #0
 80093d2:	bfab      	itete	ge
 80093d4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80093d6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80093d8:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80093da:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80093dc:	bfac      	ite	ge
 80093de:	18ef      	addge	r7, r5, r3
 80093e0:	1b5e      	sublt	r6, r3, r5
 80093e2:	9b08      	ldr	r3, [sp, #32]
 80093e4:	1aed      	subs	r5, r5, r3
 80093e6:	4415      	add	r5, r2
 80093e8:	4b65      	ldr	r3, [pc, #404]	@ (8009580 <_strtod_l+0x858>)
 80093ea:	3d01      	subs	r5, #1
 80093ec:	429d      	cmp	r5, r3
 80093ee:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80093f2:	da50      	bge.n	8009496 <_strtod_l+0x76e>
 80093f4:	1b5b      	subs	r3, r3, r5
 80093f6:	2b1f      	cmp	r3, #31
 80093f8:	eba2 0203 	sub.w	r2, r2, r3
 80093fc:	f04f 0101 	mov.w	r1, #1
 8009400:	dc3d      	bgt.n	800947e <_strtod_l+0x756>
 8009402:	fa01 f303 	lsl.w	r3, r1, r3
 8009406:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009408:	2300      	movs	r3, #0
 800940a:	9310      	str	r3, [sp, #64]	@ 0x40
 800940c:	18bd      	adds	r5, r7, r2
 800940e:	9b08      	ldr	r3, [sp, #32]
 8009410:	42af      	cmp	r7, r5
 8009412:	4416      	add	r6, r2
 8009414:	441e      	add	r6, r3
 8009416:	463b      	mov	r3, r7
 8009418:	bfa8      	it	ge
 800941a:	462b      	movge	r3, r5
 800941c:	42b3      	cmp	r3, r6
 800941e:	bfa8      	it	ge
 8009420:	4633      	movge	r3, r6
 8009422:	2b00      	cmp	r3, #0
 8009424:	bfc2      	ittt	gt
 8009426:	1aed      	subgt	r5, r5, r3
 8009428:	1af6      	subgt	r6, r6, r3
 800942a:	1aff      	subgt	r7, r7, r3
 800942c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800942e:	2b00      	cmp	r3, #0
 8009430:	dd16      	ble.n	8009460 <_strtod_l+0x738>
 8009432:	4641      	mov	r1, r8
 8009434:	9805      	ldr	r0, [sp, #20]
 8009436:	461a      	mov	r2, r3
 8009438:	f002 f9b8 	bl	800b7ac <__pow5mult>
 800943c:	4680      	mov	r8, r0
 800943e:	2800      	cmp	r0, #0
 8009440:	d0ba      	beq.n	80093b8 <_strtod_l+0x690>
 8009442:	4601      	mov	r1, r0
 8009444:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009446:	9805      	ldr	r0, [sp, #20]
 8009448:	f002 f90e 	bl	800b668 <__multiply>
 800944c:	900a      	str	r0, [sp, #40]	@ 0x28
 800944e:	2800      	cmp	r0, #0
 8009450:	f43f ae8d 	beq.w	800916e <_strtod_l+0x446>
 8009454:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009456:	9805      	ldr	r0, [sp, #20]
 8009458:	f001 fff2 	bl	800b440 <_Bfree>
 800945c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800945e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009460:	2d00      	cmp	r5, #0
 8009462:	dc1d      	bgt.n	80094a0 <_strtod_l+0x778>
 8009464:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009466:	2b00      	cmp	r3, #0
 8009468:	dd23      	ble.n	80094b2 <_strtod_l+0x78a>
 800946a:	4649      	mov	r1, r9
 800946c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800946e:	9805      	ldr	r0, [sp, #20]
 8009470:	f002 f99c 	bl	800b7ac <__pow5mult>
 8009474:	4681      	mov	r9, r0
 8009476:	b9e0      	cbnz	r0, 80094b2 <_strtod_l+0x78a>
 8009478:	f04f 0900 	mov.w	r9, #0
 800947c:	e677      	b.n	800916e <_strtod_l+0x446>
 800947e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009482:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009486:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800948a:	35e2      	adds	r5, #226	@ 0xe2
 800948c:	fa01 f305 	lsl.w	r3, r1, r5
 8009490:	9310      	str	r3, [sp, #64]	@ 0x40
 8009492:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009494:	e7ba      	b.n	800940c <_strtod_l+0x6e4>
 8009496:	2300      	movs	r3, #0
 8009498:	9310      	str	r3, [sp, #64]	@ 0x40
 800949a:	2301      	movs	r3, #1
 800949c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800949e:	e7b5      	b.n	800940c <_strtod_l+0x6e4>
 80094a0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80094a2:	9805      	ldr	r0, [sp, #20]
 80094a4:	462a      	mov	r2, r5
 80094a6:	f002 f9db 	bl	800b860 <__lshift>
 80094aa:	901a      	str	r0, [sp, #104]	@ 0x68
 80094ac:	2800      	cmp	r0, #0
 80094ae:	d1d9      	bne.n	8009464 <_strtod_l+0x73c>
 80094b0:	e65d      	b.n	800916e <_strtod_l+0x446>
 80094b2:	2e00      	cmp	r6, #0
 80094b4:	dd07      	ble.n	80094c6 <_strtod_l+0x79e>
 80094b6:	4649      	mov	r1, r9
 80094b8:	9805      	ldr	r0, [sp, #20]
 80094ba:	4632      	mov	r2, r6
 80094bc:	f002 f9d0 	bl	800b860 <__lshift>
 80094c0:	4681      	mov	r9, r0
 80094c2:	2800      	cmp	r0, #0
 80094c4:	d0d8      	beq.n	8009478 <_strtod_l+0x750>
 80094c6:	2f00      	cmp	r7, #0
 80094c8:	dd08      	ble.n	80094dc <_strtod_l+0x7b4>
 80094ca:	4641      	mov	r1, r8
 80094cc:	9805      	ldr	r0, [sp, #20]
 80094ce:	463a      	mov	r2, r7
 80094d0:	f002 f9c6 	bl	800b860 <__lshift>
 80094d4:	4680      	mov	r8, r0
 80094d6:	2800      	cmp	r0, #0
 80094d8:	f43f ae49 	beq.w	800916e <_strtod_l+0x446>
 80094dc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80094de:	9805      	ldr	r0, [sp, #20]
 80094e0:	464a      	mov	r2, r9
 80094e2:	f002 fa45 	bl	800b970 <__mdiff>
 80094e6:	4604      	mov	r4, r0
 80094e8:	2800      	cmp	r0, #0
 80094ea:	f43f ae40 	beq.w	800916e <_strtod_l+0x446>
 80094ee:	68c3      	ldr	r3, [r0, #12]
 80094f0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80094f2:	2300      	movs	r3, #0
 80094f4:	60c3      	str	r3, [r0, #12]
 80094f6:	4641      	mov	r1, r8
 80094f8:	f002 fa1e 	bl	800b938 <__mcmp>
 80094fc:	2800      	cmp	r0, #0
 80094fe:	da45      	bge.n	800958c <_strtod_l+0x864>
 8009500:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009502:	ea53 030a 	orrs.w	r3, r3, sl
 8009506:	d16b      	bne.n	80095e0 <_strtod_l+0x8b8>
 8009508:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800950c:	2b00      	cmp	r3, #0
 800950e:	d167      	bne.n	80095e0 <_strtod_l+0x8b8>
 8009510:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009514:	0d1b      	lsrs	r3, r3, #20
 8009516:	051b      	lsls	r3, r3, #20
 8009518:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800951c:	d960      	bls.n	80095e0 <_strtod_l+0x8b8>
 800951e:	6963      	ldr	r3, [r4, #20]
 8009520:	b913      	cbnz	r3, 8009528 <_strtod_l+0x800>
 8009522:	6923      	ldr	r3, [r4, #16]
 8009524:	2b01      	cmp	r3, #1
 8009526:	dd5b      	ble.n	80095e0 <_strtod_l+0x8b8>
 8009528:	4621      	mov	r1, r4
 800952a:	2201      	movs	r2, #1
 800952c:	9805      	ldr	r0, [sp, #20]
 800952e:	f002 f997 	bl	800b860 <__lshift>
 8009532:	4641      	mov	r1, r8
 8009534:	4604      	mov	r4, r0
 8009536:	f002 f9ff 	bl	800b938 <__mcmp>
 800953a:	2800      	cmp	r0, #0
 800953c:	dd50      	ble.n	80095e0 <_strtod_l+0x8b8>
 800953e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009542:	9a08      	ldr	r2, [sp, #32]
 8009544:	0d1b      	lsrs	r3, r3, #20
 8009546:	051b      	lsls	r3, r3, #20
 8009548:	2a00      	cmp	r2, #0
 800954a:	d06a      	beq.n	8009622 <_strtod_l+0x8fa>
 800954c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009550:	d867      	bhi.n	8009622 <_strtod_l+0x8fa>
 8009552:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009556:	f67f ae9d 	bls.w	8009294 <_strtod_l+0x56c>
 800955a:	4b0a      	ldr	r3, [pc, #40]	@ (8009584 <_strtod_l+0x85c>)
 800955c:	4650      	mov	r0, sl
 800955e:	4659      	mov	r1, fp
 8009560:	2200      	movs	r2, #0
 8009562:	f7f7 f849 	bl	80005f8 <__aeabi_dmul>
 8009566:	4b08      	ldr	r3, [pc, #32]	@ (8009588 <_strtod_l+0x860>)
 8009568:	400b      	ands	r3, r1
 800956a:	4682      	mov	sl, r0
 800956c:	468b      	mov	fp, r1
 800956e:	2b00      	cmp	r3, #0
 8009570:	f47f ae08 	bne.w	8009184 <_strtod_l+0x45c>
 8009574:	9a05      	ldr	r2, [sp, #20]
 8009576:	2322      	movs	r3, #34	@ 0x22
 8009578:	6013      	str	r3, [r2, #0]
 800957a:	e603      	b.n	8009184 <_strtod_l+0x45c>
 800957c:	0800cb08 	.word	0x0800cb08
 8009580:	fffffc02 	.word	0xfffffc02
 8009584:	39500000 	.word	0x39500000
 8009588:	7ff00000 	.word	0x7ff00000
 800958c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009590:	d165      	bne.n	800965e <_strtod_l+0x936>
 8009592:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009594:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009598:	b35a      	cbz	r2, 80095f2 <_strtod_l+0x8ca>
 800959a:	4a9f      	ldr	r2, [pc, #636]	@ (8009818 <_strtod_l+0xaf0>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d12b      	bne.n	80095f8 <_strtod_l+0x8d0>
 80095a0:	9b08      	ldr	r3, [sp, #32]
 80095a2:	4651      	mov	r1, sl
 80095a4:	b303      	cbz	r3, 80095e8 <_strtod_l+0x8c0>
 80095a6:	4b9d      	ldr	r3, [pc, #628]	@ (800981c <_strtod_l+0xaf4>)
 80095a8:	465a      	mov	r2, fp
 80095aa:	4013      	ands	r3, r2
 80095ac:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80095b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80095b4:	d81b      	bhi.n	80095ee <_strtod_l+0x8c6>
 80095b6:	0d1b      	lsrs	r3, r3, #20
 80095b8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80095bc:	fa02 f303 	lsl.w	r3, r2, r3
 80095c0:	4299      	cmp	r1, r3
 80095c2:	d119      	bne.n	80095f8 <_strtod_l+0x8d0>
 80095c4:	4b96      	ldr	r3, [pc, #600]	@ (8009820 <_strtod_l+0xaf8>)
 80095c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80095c8:	429a      	cmp	r2, r3
 80095ca:	d102      	bne.n	80095d2 <_strtod_l+0x8aa>
 80095cc:	3101      	adds	r1, #1
 80095ce:	f43f adce 	beq.w	800916e <_strtod_l+0x446>
 80095d2:	4b92      	ldr	r3, [pc, #584]	@ (800981c <_strtod_l+0xaf4>)
 80095d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80095d6:	401a      	ands	r2, r3
 80095d8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80095dc:	f04f 0a00 	mov.w	sl, #0
 80095e0:	9b08      	ldr	r3, [sp, #32]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d1b9      	bne.n	800955a <_strtod_l+0x832>
 80095e6:	e5cd      	b.n	8009184 <_strtod_l+0x45c>
 80095e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80095ec:	e7e8      	b.n	80095c0 <_strtod_l+0x898>
 80095ee:	4613      	mov	r3, r2
 80095f0:	e7e6      	b.n	80095c0 <_strtod_l+0x898>
 80095f2:	ea53 030a 	orrs.w	r3, r3, sl
 80095f6:	d0a2      	beq.n	800953e <_strtod_l+0x816>
 80095f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80095fa:	b1db      	cbz	r3, 8009634 <_strtod_l+0x90c>
 80095fc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80095fe:	4213      	tst	r3, r2
 8009600:	d0ee      	beq.n	80095e0 <_strtod_l+0x8b8>
 8009602:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009604:	9a08      	ldr	r2, [sp, #32]
 8009606:	4650      	mov	r0, sl
 8009608:	4659      	mov	r1, fp
 800960a:	b1bb      	cbz	r3, 800963c <_strtod_l+0x914>
 800960c:	f7ff fb6e 	bl	8008cec <sulp>
 8009610:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009614:	ec53 2b10 	vmov	r2, r3, d0
 8009618:	f7f6 fe38 	bl	800028c <__adddf3>
 800961c:	4682      	mov	sl, r0
 800961e:	468b      	mov	fp, r1
 8009620:	e7de      	b.n	80095e0 <_strtod_l+0x8b8>
 8009622:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009626:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800962a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800962e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8009632:	e7d5      	b.n	80095e0 <_strtod_l+0x8b8>
 8009634:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009636:	ea13 0f0a 	tst.w	r3, sl
 800963a:	e7e1      	b.n	8009600 <_strtod_l+0x8d8>
 800963c:	f7ff fb56 	bl	8008cec <sulp>
 8009640:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009644:	ec53 2b10 	vmov	r2, r3, d0
 8009648:	f7f6 fe1e 	bl	8000288 <__aeabi_dsub>
 800964c:	2200      	movs	r2, #0
 800964e:	2300      	movs	r3, #0
 8009650:	4682      	mov	sl, r0
 8009652:	468b      	mov	fp, r1
 8009654:	f7f7 fa38 	bl	8000ac8 <__aeabi_dcmpeq>
 8009658:	2800      	cmp	r0, #0
 800965a:	d0c1      	beq.n	80095e0 <_strtod_l+0x8b8>
 800965c:	e61a      	b.n	8009294 <_strtod_l+0x56c>
 800965e:	4641      	mov	r1, r8
 8009660:	4620      	mov	r0, r4
 8009662:	f002 fae1 	bl	800bc28 <__ratio>
 8009666:	ec57 6b10 	vmov	r6, r7, d0
 800966a:	2200      	movs	r2, #0
 800966c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009670:	4630      	mov	r0, r6
 8009672:	4639      	mov	r1, r7
 8009674:	f7f7 fa3c 	bl	8000af0 <__aeabi_dcmple>
 8009678:	2800      	cmp	r0, #0
 800967a:	d06f      	beq.n	800975c <_strtod_l+0xa34>
 800967c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800967e:	2b00      	cmp	r3, #0
 8009680:	d17a      	bne.n	8009778 <_strtod_l+0xa50>
 8009682:	f1ba 0f00 	cmp.w	sl, #0
 8009686:	d158      	bne.n	800973a <_strtod_l+0xa12>
 8009688:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800968a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800968e:	2b00      	cmp	r3, #0
 8009690:	d15a      	bne.n	8009748 <_strtod_l+0xa20>
 8009692:	4b64      	ldr	r3, [pc, #400]	@ (8009824 <_strtod_l+0xafc>)
 8009694:	2200      	movs	r2, #0
 8009696:	4630      	mov	r0, r6
 8009698:	4639      	mov	r1, r7
 800969a:	f7f7 fa1f 	bl	8000adc <__aeabi_dcmplt>
 800969e:	2800      	cmp	r0, #0
 80096a0:	d159      	bne.n	8009756 <_strtod_l+0xa2e>
 80096a2:	4630      	mov	r0, r6
 80096a4:	4639      	mov	r1, r7
 80096a6:	4b60      	ldr	r3, [pc, #384]	@ (8009828 <_strtod_l+0xb00>)
 80096a8:	2200      	movs	r2, #0
 80096aa:	f7f6 ffa5 	bl	80005f8 <__aeabi_dmul>
 80096ae:	4606      	mov	r6, r0
 80096b0:	460f      	mov	r7, r1
 80096b2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80096b6:	9606      	str	r6, [sp, #24]
 80096b8:	9307      	str	r3, [sp, #28]
 80096ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80096be:	4d57      	ldr	r5, [pc, #348]	@ (800981c <_strtod_l+0xaf4>)
 80096c0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80096c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80096c6:	401d      	ands	r5, r3
 80096c8:	4b58      	ldr	r3, [pc, #352]	@ (800982c <_strtod_l+0xb04>)
 80096ca:	429d      	cmp	r5, r3
 80096cc:	f040 80b2 	bne.w	8009834 <_strtod_l+0xb0c>
 80096d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80096d2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80096d6:	ec4b ab10 	vmov	d0, sl, fp
 80096da:	f002 f9dd 	bl	800ba98 <__ulp>
 80096de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80096e2:	ec51 0b10 	vmov	r0, r1, d0
 80096e6:	f7f6 ff87 	bl	80005f8 <__aeabi_dmul>
 80096ea:	4652      	mov	r2, sl
 80096ec:	465b      	mov	r3, fp
 80096ee:	f7f6 fdcd 	bl	800028c <__adddf3>
 80096f2:	460b      	mov	r3, r1
 80096f4:	4949      	ldr	r1, [pc, #292]	@ (800981c <_strtod_l+0xaf4>)
 80096f6:	4a4e      	ldr	r2, [pc, #312]	@ (8009830 <_strtod_l+0xb08>)
 80096f8:	4019      	ands	r1, r3
 80096fa:	4291      	cmp	r1, r2
 80096fc:	4682      	mov	sl, r0
 80096fe:	d942      	bls.n	8009786 <_strtod_l+0xa5e>
 8009700:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009702:	4b47      	ldr	r3, [pc, #284]	@ (8009820 <_strtod_l+0xaf8>)
 8009704:	429a      	cmp	r2, r3
 8009706:	d103      	bne.n	8009710 <_strtod_l+0x9e8>
 8009708:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800970a:	3301      	adds	r3, #1
 800970c:	f43f ad2f 	beq.w	800916e <_strtod_l+0x446>
 8009710:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009820 <_strtod_l+0xaf8>
 8009714:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8009718:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800971a:	9805      	ldr	r0, [sp, #20]
 800971c:	f001 fe90 	bl	800b440 <_Bfree>
 8009720:	9805      	ldr	r0, [sp, #20]
 8009722:	4649      	mov	r1, r9
 8009724:	f001 fe8c 	bl	800b440 <_Bfree>
 8009728:	9805      	ldr	r0, [sp, #20]
 800972a:	4641      	mov	r1, r8
 800972c:	f001 fe88 	bl	800b440 <_Bfree>
 8009730:	9805      	ldr	r0, [sp, #20]
 8009732:	4621      	mov	r1, r4
 8009734:	f001 fe84 	bl	800b440 <_Bfree>
 8009738:	e619      	b.n	800936e <_strtod_l+0x646>
 800973a:	f1ba 0f01 	cmp.w	sl, #1
 800973e:	d103      	bne.n	8009748 <_strtod_l+0xa20>
 8009740:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009742:	2b00      	cmp	r3, #0
 8009744:	f43f ada6 	beq.w	8009294 <_strtod_l+0x56c>
 8009748:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80097f8 <_strtod_l+0xad0>
 800974c:	4f35      	ldr	r7, [pc, #212]	@ (8009824 <_strtod_l+0xafc>)
 800974e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009752:	2600      	movs	r6, #0
 8009754:	e7b1      	b.n	80096ba <_strtod_l+0x992>
 8009756:	4f34      	ldr	r7, [pc, #208]	@ (8009828 <_strtod_l+0xb00>)
 8009758:	2600      	movs	r6, #0
 800975a:	e7aa      	b.n	80096b2 <_strtod_l+0x98a>
 800975c:	4b32      	ldr	r3, [pc, #200]	@ (8009828 <_strtod_l+0xb00>)
 800975e:	4630      	mov	r0, r6
 8009760:	4639      	mov	r1, r7
 8009762:	2200      	movs	r2, #0
 8009764:	f7f6 ff48 	bl	80005f8 <__aeabi_dmul>
 8009768:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800976a:	4606      	mov	r6, r0
 800976c:	460f      	mov	r7, r1
 800976e:	2b00      	cmp	r3, #0
 8009770:	d09f      	beq.n	80096b2 <_strtod_l+0x98a>
 8009772:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009776:	e7a0      	b.n	80096ba <_strtod_l+0x992>
 8009778:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009800 <_strtod_l+0xad8>
 800977c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009780:	ec57 6b17 	vmov	r6, r7, d7
 8009784:	e799      	b.n	80096ba <_strtod_l+0x992>
 8009786:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800978a:	9b08      	ldr	r3, [sp, #32]
 800978c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009790:	2b00      	cmp	r3, #0
 8009792:	d1c1      	bne.n	8009718 <_strtod_l+0x9f0>
 8009794:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009798:	0d1b      	lsrs	r3, r3, #20
 800979a:	051b      	lsls	r3, r3, #20
 800979c:	429d      	cmp	r5, r3
 800979e:	d1bb      	bne.n	8009718 <_strtod_l+0x9f0>
 80097a0:	4630      	mov	r0, r6
 80097a2:	4639      	mov	r1, r7
 80097a4:	f7f7 fa88 	bl	8000cb8 <__aeabi_d2lz>
 80097a8:	f7f6 fef8 	bl	800059c <__aeabi_l2d>
 80097ac:	4602      	mov	r2, r0
 80097ae:	460b      	mov	r3, r1
 80097b0:	4630      	mov	r0, r6
 80097b2:	4639      	mov	r1, r7
 80097b4:	f7f6 fd68 	bl	8000288 <__aeabi_dsub>
 80097b8:	460b      	mov	r3, r1
 80097ba:	4602      	mov	r2, r0
 80097bc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80097c0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80097c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80097c6:	ea46 060a 	orr.w	r6, r6, sl
 80097ca:	431e      	orrs	r6, r3
 80097cc:	d06f      	beq.n	80098ae <_strtod_l+0xb86>
 80097ce:	a30e      	add	r3, pc, #56	@ (adr r3, 8009808 <_strtod_l+0xae0>)
 80097d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097d4:	f7f7 f982 	bl	8000adc <__aeabi_dcmplt>
 80097d8:	2800      	cmp	r0, #0
 80097da:	f47f acd3 	bne.w	8009184 <_strtod_l+0x45c>
 80097de:	a30c      	add	r3, pc, #48	@ (adr r3, 8009810 <_strtod_l+0xae8>)
 80097e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80097e8:	f7f7 f996 	bl	8000b18 <__aeabi_dcmpgt>
 80097ec:	2800      	cmp	r0, #0
 80097ee:	d093      	beq.n	8009718 <_strtod_l+0x9f0>
 80097f0:	e4c8      	b.n	8009184 <_strtod_l+0x45c>
 80097f2:	bf00      	nop
 80097f4:	f3af 8000 	nop.w
 80097f8:	00000000 	.word	0x00000000
 80097fc:	bff00000 	.word	0xbff00000
 8009800:	00000000 	.word	0x00000000
 8009804:	3ff00000 	.word	0x3ff00000
 8009808:	94a03595 	.word	0x94a03595
 800980c:	3fdfffff 	.word	0x3fdfffff
 8009810:	35afe535 	.word	0x35afe535
 8009814:	3fe00000 	.word	0x3fe00000
 8009818:	000fffff 	.word	0x000fffff
 800981c:	7ff00000 	.word	0x7ff00000
 8009820:	7fefffff 	.word	0x7fefffff
 8009824:	3ff00000 	.word	0x3ff00000
 8009828:	3fe00000 	.word	0x3fe00000
 800982c:	7fe00000 	.word	0x7fe00000
 8009830:	7c9fffff 	.word	0x7c9fffff
 8009834:	9b08      	ldr	r3, [sp, #32]
 8009836:	b323      	cbz	r3, 8009882 <_strtod_l+0xb5a>
 8009838:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800983c:	d821      	bhi.n	8009882 <_strtod_l+0xb5a>
 800983e:	a328      	add	r3, pc, #160	@ (adr r3, 80098e0 <_strtod_l+0xbb8>)
 8009840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009844:	4630      	mov	r0, r6
 8009846:	4639      	mov	r1, r7
 8009848:	f7f7 f952 	bl	8000af0 <__aeabi_dcmple>
 800984c:	b1a0      	cbz	r0, 8009878 <_strtod_l+0xb50>
 800984e:	4639      	mov	r1, r7
 8009850:	4630      	mov	r0, r6
 8009852:	f7f7 f9a9 	bl	8000ba8 <__aeabi_d2uiz>
 8009856:	2801      	cmp	r0, #1
 8009858:	bf38      	it	cc
 800985a:	2001      	movcc	r0, #1
 800985c:	f7f6 fe52 	bl	8000504 <__aeabi_ui2d>
 8009860:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009862:	4606      	mov	r6, r0
 8009864:	460f      	mov	r7, r1
 8009866:	b9fb      	cbnz	r3, 80098a8 <_strtod_l+0xb80>
 8009868:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800986c:	9014      	str	r0, [sp, #80]	@ 0x50
 800986e:	9315      	str	r3, [sp, #84]	@ 0x54
 8009870:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009874:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009878:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800987a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800987e:	1b5b      	subs	r3, r3, r5
 8009880:	9311      	str	r3, [sp, #68]	@ 0x44
 8009882:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009886:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800988a:	f002 f905 	bl	800ba98 <__ulp>
 800988e:	4650      	mov	r0, sl
 8009890:	ec53 2b10 	vmov	r2, r3, d0
 8009894:	4659      	mov	r1, fp
 8009896:	f7f6 feaf 	bl	80005f8 <__aeabi_dmul>
 800989a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800989e:	f7f6 fcf5 	bl	800028c <__adddf3>
 80098a2:	4682      	mov	sl, r0
 80098a4:	468b      	mov	fp, r1
 80098a6:	e770      	b.n	800978a <_strtod_l+0xa62>
 80098a8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80098ac:	e7e0      	b.n	8009870 <_strtod_l+0xb48>
 80098ae:	a30e      	add	r3, pc, #56	@ (adr r3, 80098e8 <_strtod_l+0xbc0>)
 80098b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b4:	f7f7 f912 	bl	8000adc <__aeabi_dcmplt>
 80098b8:	e798      	b.n	80097ec <_strtod_l+0xac4>
 80098ba:	2300      	movs	r3, #0
 80098bc:	930e      	str	r3, [sp, #56]	@ 0x38
 80098be:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80098c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80098c2:	6013      	str	r3, [r2, #0]
 80098c4:	f7ff ba6d 	b.w	8008da2 <_strtod_l+0x7a>
 80098c8:	2a65      	cmp	r2, #101	@ 0x65
 80098ca:	f43f ab68 	beq.w	8008f9e <_strtod_l+0x276>
 80098ce:	2a45      	cmp	r2, #69	@ 0x45
 80098d0:	f43f ab65 	beq.w	8008f9e <_strtod_l+0x276>
 80098d4:	2301      	movs	r3, #1
 80098d6:	f7ff bba0 	b.w	800901a <_strtod_l+0x2f2>
 80098da:	bf00      	nop
 80098dc:	f3af 8000 	nop.w
 80098e0:	ffc00000 	.word	0xffc00000
 80098e4:	41dfffff 	.word	0x41dfffff
 80098e8:	94a03595 	.word	0x94a03595
 80098ec:	3fcfffff 	.word	0x3fcfffff

080098f0 <_strtod_r>:
 80098f0:	4b01      	ldr	r3, [pc, #4]	@ (80098f8 <_strtod_r+0x8>)
 80098f2:	f7ff ba19 	b.w	8008d28 <_strtod_l>
 80098f6:	bf00      	nop
 80098f8:	2000001c 	.word	0x2000001c

080098fc <_strtol_l.isra.0>:
 80098fc:	2b24      	cmp	r3, #36	@ 0x24
 80098fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009902:	4686      	mov	lr, r0
 8009904:	4690      	mov	r8, r2
 8009906:	d801      	bhi.n	800990c <_strtol_l.isra.0+0x10>
 8009908:	2b01      	cmp	r3, #1
 800990a:	d106      	bne.n	800991a <_strtol_l.isra.0+0x1e>
 800990c:	f000 f8aa 	bl	8009a64 <__errno>
 8009910:	2316      	movs	r3, #22
 8009912:	6003      	str	r3, [r0, #0]
 8009914:	2000      	movs	r0, #0
 8009916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800991a:	4834      	ldr	r0, [pc, #208]	@ (80099ec <_strtol_l.isra.0+0xf0>)
 800991c:	460d      	mov	r5, r1
 800991e:	462a      	mov	r2, r5
 8009920:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009924:	5d06      	ldrb	r6, [r0, r4]
 8009926:	f016 0608 	ands.w	r6, r6, #8
 800992a:	d1f8      	bne.n	800991e <_strtol_l.isra.0+0x22>
 800992c:	2c2d      	cmp	r4, #45	@ 0x2d
 800992e:	d110      	bne.n	8009952 <_strtol_l.isra.0+0x56>
 8009930:	782c      	ldrb	r4, [r5, #0]
 8009932:	2601      	movs	r6, #1
 8009934:	1c95      	adds	r5, r2, #2
 8009936:	f033 0210 	bics.w	r2, r3, #16
 800993a:	d115      	bne.n	8009968 <_strtol_l.isra.0+0x6c>
 800993c:	2c30      	cmp	r4, #48	@ 0x30
 800993e:	d10d      	bne.n	800995c <_strtol_l.isra.0+0x60>
 8009940:	782a      	ldrb	r2, [r5, #0]
 8009942:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009946:	2a58      	cmp	r2, #88	@ 0x58
 8009948:	d108      	bne.n	800995c <_strtol_l.isra.0+0x60>
 800994a:	786c      	ldrb	r4, [r5, #1]
 800994c:	3502      	adds	r5, #2
 800994e:	2310      	movs	r3, #16
 8009950:	e00a      	b.n	8009968 <_strtol_l.isra.0+0x6c>
 8009952:	2c2b      	cmp	r4, #43	@ 0x2b
 8009954:	bf04      	itt	eq
 8009956:	782c      	ldrbeq	r4, [r5, #0]
 8009958:	1c95      	addeq	r5, r2, #2
 800995a:	e7ec      	b.n	8009936 <_strtol_l.isra.0+0x3a>
 800995c:	2b00      	cmp	r3, #0
 800995e:	d1f6      	bne.n	800994e <_strtol_l.isra.0+0x52>
 8009960:	2c30      	cmp	r4, #48	@ 0x30
 8009962:	bf14      	ite	ne
 8009964:	230a      	movne	r3, #10
 8009966:	2308      	moveq	r3, #8
 8009968:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800996c:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8009970:	2200      	movs	r2, #0
 8009972:	fbbc f9f3 	udiv	r9, ip, r3
 8009976:	4610      	mov	r0, r2
 8009978:	fb03 ca19 	mls	sl, r3, r9, ip
 800997c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009980:	2f09      	cmp	r7, #9
 8009982:	d80f      	bhi.n	80099a4 <_strtol_l.isra.0+0xa8>
 8009984:	463c      	mov	r4, r7
 8009986:	42a3      	cmp	r3, r4
 8009988:	dd1b      	ble.n	80099c2 <_strtol_l.isra.0+0xc6>
 800998a:	1c57      	adds	r7, r2, #1
 800998c:	d007      	beq.n	800999e <_strtol_l.isra.0+0xa2>
 800998e:	4581      	cmp	r9, r0
 8009990:	d314      	bcc.n	80099bc <_strtol_l.isra.0+0xc0>
 8009992:	d101      	bne.n	8009998 <_strtol_l.isra.0+0x9c>
 8009994:	45a2      	cmp	sl, r4
 8009996:	db11      	blt.n	80099bc <_strtol_l.isra.0+0xc0>
 8009998:	fb00 4003 	mla	r0, r0, r3, r4
 800999c:	2201      	movs	r2, #1
 800999e:	f815 4b01 	ldrb.w	r4, [r5], #1
 80099a2:	e7eb      	b.n	800997c <_strtol_l.isra.0+0x80>
 80099a4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80099a8:	2f19      	cmp	r7, #25
 80099aa:	d801      	bhi.n	80099b0 <_strtol_l.isra.0+0xb4>
 80099ac:	3c37      	subs	r4, #55	@ 0x37
 80099ae:	e7ea      	b.n	8009986 <_strtol_l.isra.0+0x8a>
 80099b0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80099b4:	2f19      	cmp	r7, #25
 80099b6:	d804      	bhi.n	80099c2 <_strtol_l.isra.0+0xc6>
 80099b8:	3c57      	subs	r4, #87	@ 0x57
 80099ba:	e7e4      	b.n	8009986 <_strtol_l.isra.0+0x8a>
 80099bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80099c0:	e7ed      	b.n	800999e <_strtol_l.isra.0+0xa2>
 80099c2:	1c53      	adds	r3, r2, #1
 80099c4:	d108      	bne.n	80099d8 <_strtol_l.isra.0+0xdc>
 80099c6:	2322      	movs	r3, #34	@ 0x22
 80099c8:	f8ce 3000 	str.w	r3, [lr]
 80099cc:	4660      	mov	r0, ip
 80099ce:	f1b8 0f00 	cmp.w	r8, #0
 80099d2:	d0a0      	beq.n	8009916 <_strtol_l.isra.0+0x1a>
 80099d4:	1e69      	subs	r1, r5, #1
 80099d6:	e006      	b.n	80099e6 <_strtol_l.isra.0+0xea>
 80099d8:	b106      	cbz	r6, 80099dc <_strtol_l.isra.0+0xe0>
 80099da:	4240      	negs	r0, r0
 80099dc:	f1b8 0f00 	cmp.w	r8, #0
 80099e0:	d099      	beq.n	8009916 <_strtol_l.isra.0+0x1a>
 80099e2:	2a00      	cmp	r2, #0
 80099e4:	d1f6      	bne.n	80099d4 <_strtol_l.isra.0+0xd8>
 80099e6:	f8c8 1000 	str.w	r1, [r8]
 80099ea:	e794      	b.n	8009916 <_strtol_l.isra.0+0x1a>
 80099ec:	0800cb31 	.word	0x0800cb31

080099f0 <_strtol_r>:
 80099f0:	f7ff bf84 	b.w	80098fc <_strtol_l.isra.0>

080099f4 <_fwalk_sglue>:
 80099f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099f8:	4607      	mov	r7, r0
 80099fa:	4688      	mov	r8, r1
 80099fc:	4614      	mov	r4, r2
 80099fe:	2600      	movs	r6, #0
 8009a00:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009a04:	f1b9 0901 	subs.w	r9, r9, #1
 8009a08:	d505      	bpl.n	8009a16 <_fwalk_sglue+0x22>
 8009a0a:	6824      	ldr	r4, [r4, #0]
 8009a0c:	2c00      	cmp	r4, #0
 8009a0e:	d1f7      	bne.n	8009a00 <_fwalk_sglue+0xc>
 8009a10:	4630      	mov	r0, r6
 8009a12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a16:	89ab      	ldrh	r3, [r5, #12]
 8009a18:	2b01      	cmp	r3, #1
 8009a1a:	d907      	bls.n	8009a2c <_fwalk_sglue+0x38>
 8009a1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009a20:	3301      	adds	r3, #1
 8009a22:	d003      	beq.n	8009a2c <_fwalk_sglue+0x38>
 8009a24:	4629      	mov	r1, r5
 8009a26:	4638      	mov	r0, r7
 8009a28:	47c0      	blx	r8
 8009a2a:	4306      	orrs	r6, r0
 8009a2c:	3568      	adds	r5, #104	@ 0x68
 8009a2e:	e7e9      	b.n	8009a04 <_fwalk_sglue+0x10>

08009a30 <memset>:
 8009a30:	4402      	add	r2, r0
 8009a32:	4603      	mov	r3, r0
 8009a34:	4293      	cmp	r3, r2
 8009a36:	d100      	bne.n	8009a3a <memset+0xa>
 8009a38:	4770      	bx	lr
 8009a3a:	f803 1b01 	strb.w	r1, [r3], #1
 8009a3e:	e7f9      	b.n	8009a34 <memset+0x4>

08009a40 <strncmp>:
 8009a40:	b510      	push	{r4, lr}
 8009a42:	b16a      	cbz	r2, 8009a60 <strncmp+0x20>
 8009a44:	3901      	subs	r1, #1
 8009a46:	1884      	adds	r4, r0, r2
 8009a48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a4c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009a50:	429a      	cmp	r2, r3
 8009a52:	d103      	bne.n	8009a5c <strncmp+0x1c>
 8009a54:	42a0      	cmp	r0, r4
 8009a56:	d001      	beq.n	8009a5c <strncmp+0x1c>
 8009a58:	2a00      	cmp	r2, #0
 8009a5a:	d1f5      	bne.n	8009a48 <strncmp+0x8>
 8009a5c:	1ad0      	subs	r0, r2, r3
 8009a5e:	bd10      	pop	{r4, pc}
 8009a60:	4610      	mov	r0, r2
 8009a62:	e7fc      	b.n	8009a5e <strncmp+0x1e>

08009a64 <__errno>:
 8009a64:	4b01      	ldr	r3, [pc, #4]	@ (8009a6c <__errno+0x8>)
 8009a66:	6818      	ldr	r0, [r3, #0]
 8009a68:	4770      	bx	lr
 8009a6a:	bf00      	nop
 8009a6c:	20000188 	.word	0x20000188

08009a70 <__libc_init_array>:
 8009a70:	b570      	push	{r4, r5, r6, lr}
 8009a72:	4d0d      	ldr	r5, [pc, #52]	@ (8009aa8 <__libc_init_array+0x38>)
 8009a74:	4c0d      	ldr	r4, [pc, #52]	@ (8009aac <__libc_init_array+0x3c>)
 8009a76:	1b64      	subs	r4, r4, r5
 8009a78:	10a4      	asrs	r4, r4, #2
 8009a7a:	2600      	movs	r6, #0
 8009a7c:	42a6      	cmp	r6, r4
 8009a7e:	d109      	bne.n	8009a94 <__libc_init_array+0x24>
 8009a80:	4d0b      	ldr	r5, [pc, #44]	@ (8009ab0 <__libc_init_array+0x40>)
 8009a82:	4c0c      	ldr	r4, [pc, #48]	@ (8009ab4 <__libc_init_array+0x44>)
 8009a84:	f002 ff0e 	bl	800c8a4 <_init>
 8009a88:	1b64      	subs	r4, r4, r5
 8009a8a:	10a4      	asrs	r4, r4, #2
 8009a8c:	2600      	movs	r6, #0
 8009a8e:	42a6      	cmp	r6, r4
 8009a90:	d105      	bne.n	8009a9e <__libc_init_array+0x2e>
 8009a92:	bd70      	pop	{r4, r5, r6, pc}
 8009a94:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a98:	4798      	blx	r3
 8009a9a:	3601      	adds	r6, #1
 8009a9c:	e7ee      	b.n	8009a7c <__libc_init_array+0xc>
 8009a9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009aa2:	4798      	blx	r3
 8009aa4:	3601      	adds	r6, #1
 8009aa6:	e7f2      	b.n	8009a8e <__libc_init_array+0x1e>
 8009aa8:	0800cd70 	.word	0x0800cd70
 8009aac:	0800cd70 	.word	0x0800cd70
 8009ab0:	0800cd70 	.word	0x0800cd70
 8009ab4:	0800cd74 	.word	0x0800cd74

08009ab8 <__retarget_lock_init_recursive>:
 8009ab8:	4770      	bx	lr

08009aba <__retarget_lock_acquire_recursive>:
 8009aba:	4770      	bx	lr

08009abc <__retarget_lock_release_recursive>:
 8009abc:	4770      	bx	lr
	...

08009ac0 <_localeconv_r>:
 8009ac0:	4800      	ldr	r0, [pc, #0]	@ (8009ac4 <_localeconv_r+0x4>)
 8009ac2:	4770      	bx	lr
 8009ac4:	2000010c 	.word	0x2000010c

08009ac8 <memcpy>:
 8009ac8:	440a      	add	r2, r1
 8009aca:	4291      	cmp	r1, r2
 8009acc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009ad0:	d100      	bne.n	8009ad4 <memcpy+0xc>
 8009ad2:	4770      	bx	lr
 8009ad4:	b510      	push	{r4, lr}
 8009ad6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ada:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ade:	4291      	cmp	r1, r2
 8009ae0:	d1f9      	bne.n	8009ad6 <memcpy+0xe>
 8009ae2:	bd10      	pop	{r4, pc}
 8009ae4:	0000      	movs	r0, r0
	...

08009ae8 <nan>:
 8009ae8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009af0 <nan+0x8>
 8009aec:	4770      	bx	lr
 8009aee:	bf00      	nop
 8009af0:	00000000 	.word	0x00000000
 8009af4:	7ff80000 	.word	0x7ff80000

08009af8 <nanf>:
 8009af8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009b00 <nanf+0x8>
 8009afc:	4770      	bx	lr
 8009afe:	bf00      	nop
 8009b00:	7fc00000 	.word	0x7fc00000

08009b04 <quorem>:
 8009b04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b08:	6903      	ldr	r3, [r0, #16]
 8009b0a:	690c      	ldr	r4, [r1, #16]
 8009b0c:	42a3      	cmp	r3, r4
 8009b0e:	4607      	mov	r7, r0
 8009b10:	db7e      	blt.n	8009c10 <quorem+0x10c>
 8009b12:	3c01      	subs	r4, #1
 8009b14:	f101 0814 	add.w	r8, r1, #20
 8009b18:	00a3      	lsls	r3, r4, #2
 8009b1a:	f100 0514 	add.w	r5, r0, #20
 8009b1e:	9300      	str	r3, [sp, #0]
 8009b20:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009b24:	9301      	str	r3, [sp, #4]
 8009b26:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009b2a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009b2e:	3301      	adds	r3, #1
 8009b30:	429a      	cmp	r2, r3
 8009b32:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009b36:	fbb2 f6f3 	udiv	r6, r2, r3
 8009b3a:	d32e      	bcc.n	8009b9a <quorem+0x96>
 8009b3c:	f04f 0a00 	mov.w	sl, #0
 8009b40:	46c4      	mov	ip, r8
 8009b42:	46ae      	mov	lr, r5
 8009b44:	46d3      	mov	fp, sl
 8009b46:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009b4a:	b298      	uxth	r0, r3
 8009b4c:	fb06 a000 	mla	r0, r6, r0, sl
 8009b50:	0c02      	lsrs	r2, r0, #16
 8009b52:	0c1b      	lsrs	r3, r3, #16
 8009b54:	fb06 2303 	mla	r3, r6, r3, r2
 8009b58:	f8de 2000 	ldr.w	r2, [lr]
 8009b5c:	b280      	uxth	r0, r0
 8009b5e:	b292      	uxth	r2, r2
 8009b60:	1a12      	subs	r2, r2, r0
 8009b62:	445a      	add	r2, fp
 8009b64:	f8de 0000 	ldr.w	r0, [lr]
 8009b68:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009b6c:	b29b      	uxth	r3, r3
 8009b6e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009b72:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009b76:	b292      	uxth	r2, r2
 8009b78:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009b7c:	45e1      	cmp	r9, ip
 8009b7e:	f84e 2b04 	str.w	r2, [lr], #4
 8009b82:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009b86:	d2de      	bcs.n	8009b46 <quorem+0x42>
 8009b88:	9b00      	ldr	r3, [sp, #0]
 8009b8a:	58eb      	ldr	r3, [r5, r3]
 8009b8c:	b92b      	cbnz	r3, 8009b9a <quorem+0x96>
 8009b8e:	9b01      	ldr	r3, [sp, #4]
 8009b90:	3b04      	subs	r3, #4
 8009b92:	429d      	cmp	r5, r3
 8009b94:	461a      	mov	r2, r3
 8009b96:	d32f      	bcc.n	8009bf8 <quorem+0xf4>
 8009b98:	613c      	str	r4, [r7, #16]
 8009b9a:	4638      	mov	r0, r7
 8009b9c:	f001 fecc 	bl	800b938 <__mcmp>
 8009ba0:	2800      	cmp	r0, #0
 8009ba2:	db25      	blt.n	8009bf0 <quorem+0xec>
 8009ba4:	4629      	mov	r1, r5
 8009ba6:	2000      	movs	r0, #0
 8009ba8:	f858 2b04 	ldr.w	r2, [r8], #4
 8009bac:	f8d1 c000 	ldr.w	ip, [r1]
 8009bb0:	fa1f fe82 	uxth.w	lr, r2
 8009bb4:	fa1f f38c 	uxth.w	r3, ip
 8009bb8:	eba3 030e 	sub.w	r3, r3, lr
 8009bbc:	4403      	add	r3, r0
 8009bbe:	0c12      	lsrs	r2, r2, #16
 8009bc0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009bc4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009bc8:	b29b      	uxth	r3, r3
 8009bca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009bce:	45c1      	cmp	r9, r8
 8009bd0:	f841 3b04 	str.w	r3, [r1], #4
 8009bd4:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009bd8:	d2e6      	bcs.n	8009ba8 <quorem+0xa4>
 8009bda:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009bde:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009be2:	b922      	cbnz	r2, 8009bee <quorem+0xea>
 8009be4:	3b04      	subs	r3, #4
 8009be6:	429d      	cmp	r5, r3
 8009be8:	461a      	mov	r2, r3
 8009bea:	d30b      	bcc.n	8009c04 <quorem+0x100>
 8009bec:	613c      	str	r4, [r7, #16]
 8009bee:	3601      	adds	r6, #1
 8009bf0:	4630      	mov	r0, r6
 8009bf2:	b003      	add	sp, #12
 8009bf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bf8:	6812      	ldr	r2, [r2, #0]
 8009bfa:	3b04      	subs	r3, #4
 8009bfc:	2a00      	cmp	r2, #0
 8009bfe:	d1cb      	bne.n	8009b98 <quorem+0x94>
 8009c00:	3c01      	subs	r4, #1
 8009c02:	e7c6      	b.n	8009b92 <quorem+0x8e>
 8009c04:	6812      	ldr	r2, [r2, #0]
 8009c06:	3b04      	subs	r3, #4
 8009c08:	2a00      	cmp	r2, #0
 8009c0a:	d1ef      	bne.n	8009bec <quorem+0xe8>
 8009c0c:	3c01      	subs	r4, #1
 8009c0e:	e7ea      	b.n	8009be6 <quorem+0xe2>
 8009c10:	2000      	movs	r0, #0
 8009c12:	e7ee      	b.n	8009bf2 <quorem+0xee>
 8009c14:	0000      	movs	r0, r0
	...

08009c18 <_dtoa_r>:
 8009c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c1c:	69c7      	ldr	r7, [r0, #28]
 8009c1e:	b097      	sub	sp, #92	@ 0x5c
 8009c20:	ed8d 0b04 	vstr	d0, [sp, #16]
 8009c24:	ec55 4b10 	vmov	r4, r5, d0
 8009c28:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8009c2a:	9107      	str	r1, [sp, #28]
 8009c2c:	4681      	mov	r9, r0
 8009c2e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009c30:	9311      	str	r3, [sp, #68]	@ 0x44
 8009c32:	b97f      	cbnz	r7, 8009c54 <_dtoa_r+0x3c>
 8009c34:	2010      	movs	r0, #16
 8009c36:	f001 fa4f 	bl	800b0d8 <malloc>
 8009c3a:	4602      	mov	r2, r0
 8009c3c:	f8c9 001c 	str.w	r0, [r9, #28]
 8009c40:	b920      	cbnz	r0, 8009c4c <_dtoa_r+0x34>
 8009c42:	4ba9      	ldr	r3, [pc, #676]	@ (8009ee8 <_dtoa_r+0x2d0>)
 8009c44:	21ef      	movs	r1, #239	@ 0xef
 8009c46:	48a9      	ldr	r0, [pc, #676]	@ (8009eec <_dtoa_r+0x2d4>)
 8009c48:	f002 f952 	bl	800bef0 <__assert_func>
 8009c4c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009c50:	6007      	str	r7, [r0, #0]
 8009c52:	60c7      	str	r7, [r0, #12]
 8009c54:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009c58:	6819      	ldr	r1, [r3, #0]
 8009c5a:	b159      	cbz	r1, 8009c74 <_dtoa_r+0x5c>
 8009c5c:	685a      	ldr	r2, [r3, #4]
 8009c5e:	604a      	str	r2, [r1, #4]
 8009c60:	2301      	movs	r3, #1
 8009c62:	4093      	lsls	r3, r2
 8009c64:	608b      	str	r3, [r1, #8]
 8009c66:	4648      	mov	r0, r9
 8009c68:	f001 fbea 	bl	800b440 <_Bfree>
 8009c6c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009c70:	2200      	movs	r2, #0
 8009c72:	601a      	str	r2, [r3, #0]
 8009c74:	1e2b      	subs	r3, r5, #0
 8009c76:	bfb9      	ittee	lt
 8009c78:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009c7c:	9305      	strlt	r3, [sp, #20]
 8009c7e:	2300      	movge	r3, #0
 8009c80:	6033      	strge	r3, [r6, #0]
 8009c82:	9f05      	ldr	r7, [sp, #20]
 8009c84:	4b9a      	ldr	r3, [pc, #616]	@ (8009ef0 <_dtoa_r+0x2d8>)
 8009c86:	bfbc      	itt	lt
 8009c88:	2201      	movlt	r2, #1
 8009c8a:	6032      	strlt	r2, [r6, #0]
 8009c8c:	43bb      	bics	r3, r7
 8009c8e:	d112      	bne.n	8009cb6 <_dtoa_r+0x9e>
 8009c90:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009c92:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009c96:	6013      	str	r3, [r2, #0]
 8009c98:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009c9c:	4323      	orrs	r3, r4
 8009c9e:	f000 855a 	beq.w	800a756 <_dtoa_r+0xb3e>
 8009ca2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009ca4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8009f04 <_dtoa_r+0x2ec>
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	f000 855c 	beq.w	800a766 <_dtoa_r+0xb4e>
 8009cae:	f10a 0303 	add.w	r3, sl, #3
 8009cb2:	f000 bd56 	b.w	800a762 <_dtoa_r+0xb4a>
 8009cb6:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	ec51 0b17 	vmov	r0, r1, d7
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8009cc6:	f7f6 feff 	bl	8000ac8 <__aeabi_dcmpeq>
 8009cca:	4680      	mov	r8, r0
 8009ccc:	b158      	cbz	r0, 8009ce6 <_dtoa_r+0xce>
 8009cce:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	6013      	str	r3, [r2, #0]
 8009cd4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009cd6:	b113      	cbz	r3, 8009cde <_dtoa_r+0xc6>
 8009cd8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009cda:	4b86      	ldr	r3, [pc, #536]	@ (8009ef4 <_dtoa_r+0x2dc>)
 8009cdc:	6013      	str	r3, [r2, #0]
 8009cde:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8009f08 <_dtoa_r+0x2f0>
 8009ce2:	f000 bd40 	b.w	800a766 <_dtoa_r+0xb4e>
 8009ce6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8009cea:	aa14      	add	r2, sp, #80	@ 0x50
 8009cec:	a915      	add	r1, sp, #84	@ 0x54
 8009cee:	4648      	mov	r0, r9
 8009cf0:	f001 ff42 	bl	800bb78 <__d2b>
 8009cf4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009cf8:	9002      	str	r0, [sp, #8]
 8009cfa:	2e00      	cmp	r6, #0
 8009cfc:	d078      	beq.n	8009df0 <_dtoa_r+0x1d8>
 8009cfe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d00:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8009d04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d08:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009d0c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009d10:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009d14:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009d18:	4619      	mov	r1, r3
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	4b76      	ldr	r3, [pc, #472]	@ (8009ef8 <_dtoa_r+0x2e0>)
 8009d1e:	f7f6 fab3 	bl	8000288 <__aeabi_dsub>
 8009d22:	a36b      	add	r3, pc, #428	@ (adr r3, 8009ed0 <_dtoa_r+0x2b8>)
 8009d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d28:	f7f6 fc66 	bl	80005f8 <__aeabi_dmul>
 8009d2c:	a36a      	add	r3, pc, #424	@ (adr r3, 8009ed8 <_dtoa_r+0x2c0>)
 8009d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d32:	f7f6 faab 	bl	800028c <__adddf3>
 8009d36:	4604      	mov	r4, r0
 8009d38:	4630      	mov	r0, r6
 8009d3a:	460d      	mov	r5, r1
 8009d3c:	f7f6 fbf2 	bl	8000524 <__aeabi_i2d>
 8009d40:	a367      	add	r3, pc, #412	@ (adr r3, 8009ee0 <_dtoa_r+0x2c8>)
 8009d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d46:	f7f6 fc57 	bl	80005f8 <__aeabi_dmul>
 8009d4a:	4602      	mov	r2, r0
 8009d4c:	460b      	mov	r3, r1
 8009d4e:	4620      	mov	r0, r4
 8009d50:	4629      	mov	r1, r5
 8009d52:	f7f6 fa9b 	bl	800028c <__adddf3>
 8009d56:	4604      	mov	r4, r0
 8009d58:	460d      	mov	r5, r1
 8009d5a:	f7f6 fefd 	bl	8000b58 <__aeabi_d2iz>
 8009d5e:	2200      	movs	r2, #0
 8009d60:	4607      	mov	r7, r0
 8009d62:	2300      	movs	r3, #0
 8009d64:	4620      	mov	r0, r4
 8009d66:	4629      	mov	r1, r5
 8009d68:	f7f6 feb8 	bl	8000adc <__aeabi_dcmplt>
 8009d6c:	b140      	cbz	r0, 8009d80 <_dtoa_r+0x168>
 8009d6e:	4638      	mov	r0, r7
 8009d70:	f7f6 fbd8 	bl	8000524 <__aeabi_i2d>
 8009d74:	4622      	mov	r2, r4
 8009d76:	462b      	mov	r3, r5
 8009d78:	f7f6 fea6 	bl	8000ac8 <__aeabi_dcmpeq>
 8009d7c:	b900      	cbnz	r0, 8009d80 <_dtoa_r+0x168>
 8009d7e:	3f01      	subs	r7, #1
 8009d80:	2f16      	cmp	r7, #22
 8009d82:	d852      	bhi.n	8009e2a <_dtoa_r+0x212>
 8009d84:	4b5d      	ldr	r3, [pc, #372]	@ (8009efc <_dtoa_r+0x2e4>)
 8009d86:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d8e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009d92:	f7f6 fea3 	bl	8000adc <__aeabi_dcmplt>
 8009d96:	2800      	cmp	r0, #0
 8009d98:	d049      	beq.n	8009e2e <_dtoa_r+0x216>
 8009d9a:	3f01      	subs	r7, #1
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009da0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009da2:	1b9b      	subs	r3, r3, r6
 8009da4:	1e5a      	subs	r2, r3, #1
 8009da6:	bf45      	ittet	mi
 8009da8:	f1c3 0301 	rsbmi	r3, r3, #1
 8009dac:	9300      	strmi	r3, [sp, #0]
 8009dae:	2300      	movpl	r3, #0
 8009db0:	2300      	movmi	r3, #0
 8009db2:	9206      	str	r2, [sp, #24]
 8009db4:	bf54      	ite	pl
 8009db6:	9300      	strpl	r3, [sp, #0]
 8009db8:	9306      	strmi	r3, [sp, #24]
 8009dba:	2f00      	cmp	r7, #0
 8009dbc:	db39      	blt.n	8009e32 <_dtoa_r+0x21a>
 8009dbe:	9b06      	ldr	r3, [sp, #24]
 8009dc0:	970d      	str	r7, [sp, #52]	@ 0x34
 8009dc2:	443b      	add	r3, r7
 8009dc4:	9306      	str	r3, [sp, #24]
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	9308      	str	r3, [sp, #32]
 8009dca:	9b07      	ldr	r3, [sp, #28]
 8009dcc:	2b09      	cmp	r3, #9
 8009dce:	d863      	bhi.n	8009e98 <_dtoa_r+0x280>
 8009dd0:	2b05      	cmp	r3, #5
 8009dd2:	bfc4      	itt	gt
 8009dd4:	3b04      	subgt	r3, #4
 8009dd6:	9307      	strgt	r3, [sp, #28]
 8009dd8:	9b07      	ldr	r3, [sp, #28]
 8009dda:	f1a3 0302 	sub.w	r3, r3, #2
 8009dde:	bfcc      	ite	gt
 8009de0:	2400      	movgt	r4, #0
 8009de2:	2401      	movle	r4, #1
 8009de4:	2b03      	cmp	r3, #3
 8009de6:	d863      	bhi.n	8009eb0 <_dtoa_r+0x298>
 8009de8:	e8df f003 	tbb	[pc, r3]
 8009dec:	2b375452 	.word	0x2b375452
 8009df0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009df4:	441e      	add	r6, r3
 8009df6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009dfa:	2b20      	cmp	r3, #32
 8009dfc:	bfc1      	itttt	gt
 8009dfe:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009e02:	409f      	lslgt	r7, r3
 8009e04:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009e08:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009e0c:	bfd6      	itet	le
 8009e0e:	f1c3 0320 	rsble	r3, r3, #32
 8009e12:	ea47 0003 	orrgt.w	r0, r7, r3
 8009e16:	fa04 f003 	lslle.w	r0, r4, r3
 8009e1a:	f7f6 fb73 	bl	8000504 <__aeabi_ui2d>
 8009e1e:	2201      	movs	r2, #1
 8009e20:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009e24:	3e01      	subs	r6, #1
 8009e26:	9212      	str	r2, [sp, #72]	@ 0x48
 8009e28:	e776      	b.n	8009d18 <_dtoa_r+0x100>
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	e7b7      	b.n	8009d9e <_dtoa_r+0x186>
 8009e2e:	9010      	str	r0, [sp, #64]	@ 0x40
 8009e30:	e7b6      	b.n	8009da0 <_dtoa_r+0x188>
 8009e32:	9b00      	ldr	r3, [sp, #0]
 8009e34:	1bdb      	subs	r3, r3, r7
 8009e36:	9300      	str	r3, [sp, #0]
 8009e38:	427b      	negs	r3, r7
 8009e3a:	9308      	str	r3, [sp, #32]
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	930d      	str	r3, [sp, #52]	@ 0x34
 8009e40:	e7c3      	b.n	8009dca <_dtoa_r+0x1b2>
 8009e42:	2301      	movs	r3, #1
 8009e44:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e46:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009e48:	eb07 0b03 	add.w	fp, r7, r3
 8009e4c:	f10b 0301 	add.w	r3, fp, #1
 8009e50:	2b01      	cmp	r3, #1
 8009e52:	9303      	str	r3, [sp, #12]
 8009e54:	bfb8      	it	lt
 8009e56:	2301      	movlt	r3, #1
 8009e58:	e006      	b.n	8009e68 <_dtoa_r+0x250>
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e5e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	dd28      	ble.n	8009eb6 <_dtoa_r+0x29e>
 8009e64:	469b      	mov	fp, r3
 8009e66:	9303      	str	r3, [sp, #12]
 8009e68:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8009e6c:	2100      	movs	r1, #0
 8009e6e:	2204      	movs	r2, #4
 8009e70:	f102 0514 	add.w	r5, r2, #20
 8009e74:	429d      	cmp	r5, r3
 8009e76:	d926      	bls.n	8009ec6 <_dtoa_r+0x2ae>
 8009e78:	6041      	str	r1, [r0, #4]
 8009e7a:	4648      	mov	r0, r9
 8009e7c:	f001 faa0 	bl	800b3c0 <_Balloc>
 8009e80:	4682      	mov	sl, r0
 8009e82:	2800      	cmp	r0, #0
 8009e84:	d142      	bne.n	8009f0c <_dtoa_r+0x2f4>
 8009e86:	4b1e      	ldr	r3, [pc, #120]	@ (8009f00 <_dtoa_r+0x2e8>)
 8009e88:	4602      	mov	r2, r0
 8009e8a:	f240 11af 	movw	r1, #431	@ 0x1af
 8009e8e:	e6da      	b.n	8009c46 <_dtoa_r+0x2e>
 8009e90:	2300      	movs	r3, #0
 8009e92:	e7e3      	b.n	8009e5c <_dtoa_r+0x244>
 8009e94:	2300      	movs	r3, #0
 8009e96:	e7d5      	b.n	8009e44 <_dtoa_r+0x22c>
 8009e98:	2401      	movs	r4, #1
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	9307      	str	r3, [sp, #28]
 8009e9e:	9409      	str	r4, [sp, #36]	@ 0x24
 8009ea0:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	f8cd b00c 	str.w	fp, [sp, #12]
 8009eaa:	2312      	movs	r3, #18
 8009eac:	920c      	str	r2, [sp, #48]	@ 0x30
 8009eae:	e7db      	b.n	8009e68 <_dtoa_r+0x250>
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	9309      	str	r3, [sp, #36]	@ 0x24
 8009eb4:	e7f4      	b.n	8009ea0 <_dtoa_r+0x288>
 8009eb6:	f04f 0b01 	mov.w	fp, #1
 8009eba:	f8cd b00c 	str.w	fp, [sp, #12]
 8009ebe:	465b      	mov	r3, fp
 8009ec0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8009ec4:	e7d0      	b.n	8009e68 <_dtoa_r+0x250>
 8009ec6:	3101      	adds	r1, #1
 8009ec8:	0052      	lsls	r2, r2, #1
 8009eca:	e7d1      	b.n	8009e70 <_dtoa_r+0x258>
 8009ecc:	f3af 8000 	nop.w
 8009ed0:	636f4361 	.word	0x636f4361
 8009ed4:	3fd287a7 	.word	0x3fd287a7
 8009ed8:	8b60c8b3 	.word	0x8b60c8b3
 8009edc:	3fc68a28 	.word	0x3fc68a28
 8009ee0:	509f79fb 	.word	0x509f79fb
 8009ee4:	3fd34413 	.word	0x3fd34413
 8009ee8:	0800c958 	.word	0x0800c958
 8009eec:	0800c96f 	.word	0x0800c96f
 8009ef0:	7ff00000 	.word	0x7ff00000
 8009ef4:	0800c919 	.word	0x0800c919
 8009ef8:	3ff80000 	.word	0x3ff80000
 8009efc:	0800cc68 	.word	0x0800cc68
 8009f00:	0800c9c7 	.word	0x0800c9c7
 8009f04:	0800c954 	.word	0x0800c954
 8009f08:	0800c918 	.word	0x0800c918
 8009f0c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009f10:	6018      	str	r0, [r3, #0]
 8009f12:	9b03      	ldr	r3, [sp, #12]
 8009f14:	2b0e      	cmp	r3, #14
 8009f16:	f200 80a1 	bhi.w	800a05c <_dtoa_r+0x444>
 8009f1a:	2c00      	cmp	r4, #0
 8009f1c:	f000 809e 	beq.w	800a05c <_dtoa_r+0x444>
 8009f20:	2f00      	cmp	r7, #0
 8009f22:	dd33      	ble.n	8009f8c <_dtoa_r+0x374>
 8009f24:	4b9c      	ldr	r3, [pc, #624]	@ (800a198 <_dtoa_r+0x580>)
 8009f26:	f007 020f 	and.w	r2, r7, #15
 8009f2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009f2e:	ed93 7b00 	vldr	d7, [r3]
 8009f32:	05f8      	lsls	r0, r7, #23
 8009f34:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8009f38:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009f3c:	d516      	bpl.n	8009f6c <_dtoa_r+0x354>
 8009f3e:	4b97      	ldr	r3, [pc, #604]	@ (800a19c <_dtoa_r+0x584>)
 8009f40:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009f44:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009f48:	f7f6 fc80 	bl	800084c <__aeabi_ddiv>
 8009f4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009f50:	f004 040f 	and.w	r4, r4, #15
 8009f54:	2603      	movs	r6, #3
 8009f56:	4d91      	ldr	r5, [pc, #580]	@ (800a19c <_dtoa_r+0x584>)
 8009f58:	b954      	cbnz	r4, 8009f70 <_dtoa_r+0x358>
 8009f5a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009f5e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009f62:	f7f6 fc73 	bl	800084c <__aeabi_ddiv>
 8009f66:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009f6a:	e028      	b.n	8009fbe <_dtoa_r+0x3a6>
 8009f6c:	2602      	movs	r6, #2
 8009f6e:	e7f2      	b.n	8009f56 <_dtoa_r+0x33e>
 8009f70:	07e1      	lsls	r1, r4, #31
 8009f72:	d508      	bpl.n	8009f86 <_dtoa_r+0x36e>
 8009f74:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009f78:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009f7c:	f7f6 fb3c 	bl	80005f8 <__aeabi_dmul>
 8009f80:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009f84:	3601      	adds	r6, #1
 8009f86:	1064      	asrs	r4, r4, #1
 8009f88:	3508      	adds	r5, #8
 8009f8a:	e7e5      	b.n	8009f58 <_dtoa_r+0x340>
 8009f8c:	f000 80af 	beq.w	800a0ee <_dtoa_r+0x4d6>
 8009f90:	427c      	negs	r4, r7
 8009f92:	4b81      	ldr	r3, [pc, #516]	@ (800a198 <_dtoa_r+0x580>)
 8009f94:	4d81      	ldr	r5, [pc, #516]	@ (800a19c <_dtoa_r+0x584>)
 8009f96:	f004 020f 	and.w	r2, r4, #15
 8009f9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009fa6:	f7f6 fb27 	bl	80005f8 <__aeabi_dmul>
 8009faa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009fae:	1124      	asrs	r4, r4, #4
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	2602      	movs	r6, #2
 8009fb4:	2c00      	cmp	r4, #0
 8009fb6:	f040 808f 	bne.w	800a0d8 <_dtoa_r+0x4c0>
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d1d3      	bne.n	8009f66 <_dtoa_r+0x34e>
 8009fbe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009fc0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	f000 8094 	beq.w	800a0f2 <_dtoa_r+0x4da>
 8009fca:	4b75      	ldr	r3, [pc, #468]	@ (800a1a0 <_dtoa_r+0x588>)
 8009fcc:	2200      	movs	r2, #0
 8009fce:	4620      	mov	r0, r4
 8009fd0:	4629      	mov	r1, r5
 8009fd2:	f7f6 fd83 	bl	8000adc <__aeabi_dcmplt>
 8009fd6:	2800      	cmp	r0, #0
 8009fd8:	f000 808b 	beq.w	800a0f2 <_dtoa_r+0x4da>
 8009fdc:	9b03      	ldr	r3, [sp, #12]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	f000 8087 	beq.w	800a0f2 <_dtoa_r+0x4da>
 8009fe4:	f1bb 0f00 	cmp.w	fp, #0
 8009fe8:	dd34      	ble.n	800a054 <_dtoa_r+0x43c>
 8009fea:	4620      	mov	r0, r4
 8009fec:	4b6d      	ldr	r3, [pc, #436]	@ (800a1a4 <_dtoa_r+0x58c>)
 8009fee:	2200      	movs	r2, #0
 8009ff0:	4629      	mov	r1, r5
 8009ff2:	f7f6 fb01 	bl	80005f8 <__aeabi_dmul>
 8009ff6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009ffa:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8009ffe:	3601      	adds	r6, #1
 800a000:	465c      	mov	r4, fp
 800a002:	4630      	mov	r0, r6
 800a004:	f7f6 fa8e 	bl	8000524 <__aeabi_i2d>
 800a008:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a00c:	f7f6 faf4 	bl	80005f8 <__aeabi_dmul>
 800a010:	4b65      	ldr	r3, [pc, #404]	@ (800a1a8 <_dtoa_r+0x590>)
 800a012:	2200      	movs	r2, #0
 800a014:	f7f6 f93a 	bl	800028c <__adddf3>
 800a018:	4605      	mov	r5, r0
 800a01a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a01e:	2c00      	cmp	r4, #0
 800a020:	d16a      	bne.n	800a0f8 <_dtoa_r+0x4e0>
 800a022:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a026:	4b61      	ldr	r3, [pc, #388]	@ (800a1ac <_dtoa_r+0x594>)
 800a028:	2200      	movs	r2, #0
 800a02a:	f7f6 f92d 	bl	8000288 <__aeabi_dsub>
 800a02e:	4602      	mov	r2, r0
 800a030:	460b      	mov	r3, r1
 800a032:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a036:	462a      	mov	r2, r5
 800a038:	4633      	mov	r3, r6
 800a03a:	f7f6 fd6d 	bl	8000b18 <__aeabi_dcmpgt>
 800a03e:	2800      	cmp	r0, #0
 800a040:	f040 8298 	bne.w	800a574 <_dtoa_r+0x95c>
 800a044:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a048:	462a      	mov	r2, r5
 800a04a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a04e:	f7f6 fd45 	bl	8000adc <__aeabi_dcmplt>
 800a052:	bb38      	cbnz	r0, 800a0a4 <_dtoa_r+0x48c>
 800a054:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800a058:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a05c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a05e:	2b00      	cmp	r3, #0
 800a060:	f2c0 8157 	blt.w	800a312 <_dtoa_r+0x6fa>
 800a064:	2f0e      	cmp	r7, #14
 800a066:	f300 8154 	bgt.w	800a312 <_dtoa_r+0x6fa>
 800a06a:	4b4b      	ldr	r3, [pc, #300]	@ (800a198 <_dtoa_r+0x580>)
 800a06c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a070:	ed93 7b00 	vldr	d7, [r3]
 800a074:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a076:	2b00      	cmp	r3, #0
 800a078:	ed8d 7b00 	vstr	d7, [sp]
 800a07c:	f280 80e5 	bge.w	800a24a <_dtoa_r+0x632>
 800a080:	9b03      	ldr	r3, [sp, #12]
 800a082:	2b00      	cmp	r3, #0
 800a084:	f300 80e1 	bgt.w	800a24a <_dtoa_r+0x632>
 800a088:	d10c      	bne.n	800a0a4 <_dtoa_r+0x48c>
 800a08a:	4b48      	ldr	r3, [pc, #288]	@ (800a1ac <_dtoa_r+0x594>)
 800a08c:	2200      	movs	r2, #0
 800a08e:	ec51 0b17 	vmov	r0, r1, d7
 800a092:	f7f6 fab1 	bl	80005f8 <__aeabi_dmul>
 800a096:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a09a:	f7f6 fd33 	bl	8000b04 <__aeabi_dcmpge>
 800a09e:	2800      	cmp	r0, #0
 800a0a0:	f000 8266 	beq.w	800a570 <_dtoa_r+0x958>
 800a0a4:	2400      	movs	r4, #0
 800a0a6:	4625      	mov	r5, r4
 800a0a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a0aa:	4656      	mov	r6, sl
 800a0ac:	ea6f 0803 	mvn.w	r8, r3
 800a0b0:	2700      	movs	r7, #0
 800a0b2:	4621      	mov	r1, r4
 800a0b4:	4648      	mov	r0, r9
 800a0b6:	f001 f9c3 	bl	800b440 <_Bfree>
 800a0ba:	2d00      	cmp	r5, #0
 800a0bc:	f000 80bd 	beq.w	800a23a <_dtoa_r+0x622>
 800a0c0:	b12f      	cbz	r7, 800a0ce <_dtoa_r+0x4b6>
 800a0c2:	42af      	cmp	r7, r5
 800a0c4:	d003      	beq.n	800a0ce <_dtoa_r+0x4b6>
 800a0c6:	4639      	mov	r1, r7
 800a0c8:	4648      	mov	r0, r9
 800a0ca:	f001 f9b9 	bl	800b440 <_Bfree>
 800a0ce:	4629      	mov	r1, r5
 800a0d0:	4648      	mov	r0, r9
 800a0d2:	f001 f9b5 	bl	800b440 <_Bfree>
 800a0d6:	e0b0      	b.n	800a23a <_dtoa_r+0x622>
 800a0d8:	07e2      	lsls	r2, r4, #31
 800a0da:	d505      	bpl.n	800a0e8 <_dtoa_r+0x4d0>
 800a0dc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a0e0:	f7f6 fa8a 	bl	80005f8 <__aeabi_dmul>
 800a0e4:	3601      	adds	r6, #1
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	1064      	asrs	r4, r4, #1
 800a0ea:	3508      	adds	r5, #8
 800a0ec:	e762      	b.n	8009fb4 <_dtoa_r+0x39c>
 800a0ee:	2602      	movs	r6, #2
 800a0f0:	e765      	b.n	8009fbe <_dtoa_r+0x3a6>
 800a0f2:	9c03      	ldr	r4, [sp, #12]
 800a0f4:	46b8      	mov	r8, r7
 800a0f6:	e784      	b.n	800a002 <_dtoa_r+0x3ea>
 800a0f8:	4b27      	ldr	r3, [pc, #156]	@ (800a198 <_dtoa_r+0x580>)
 800a0fa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a0fc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a100:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a104:	4454      	add	r4, sl
 800a106:	2900      	cmp	r1, #0
 800a108:	d054      	beq.n	800a1b4 <_dtoa_r+0x59c>
 800a10a:	4929      	ldr	r1, [pc, #164]	@ (800a1b0 <_dtoa_r+0x598>)
 800a10c:	2000      	movs	r0, #0
 800a10e:	f7f6 fb9d 	bl	800084c <__aeabi_ddiv>
 800a112:	4633      	mov	r3, r6
 800a114:	462a      	mov	r2, r5
 800a116:	f7f6 f8b7 	bl	8000288 <__aeabi_dsub>
 800a11a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a11e:	4656      	mov	r6, sl
 800a120:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a124:	f7f6 fd18 	bl	8000b58 <__aeabi_d2iz>
 800a128:	4605      	mov	r5, r0
 800a12a:	f7f6 f9fb 	bl	8000524 <__aeabi_i2d>
 800a12e:	4602      	mov	r2, r0
 800a130:	460b      	mov	r3, r1
 800a132:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a136:	f7f6 f8a7 	bl	8000288 <__aeabi_dsub>
 800a13a:	3530      	adds	r5, #48	@ 0x30
 800a13c:	4602      	mov	r2, r0
 800a13e:	460b      	mov	r3, r1
 800a140:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a144:	f806 5b01 	strb.w	r5, [r6], #1
 800a148:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a14c:	f7f6 fcc6 	bl	8000adc <__aeabi_dcmplt>
 800a150:	2800      	cmp	r0, #0
 800a152:	d172      	bne.n	800a23a <_dtoa_r+0x622>
 800a154:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a158:	4911      	ldr	r1, [pc, #68]	@ (800a1a0 <_dtoa_r+0x588>)
 800a15a:	2000      	movs	r0, #0
 800a15c:	f7f6 f894 	bl	8000288 <__aeabi_dsub>
 800a160:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a164:	f7f6 fcba 	bl	8000adc <__aeabi_dcmplt>
 800a168:	2800      	cmp	r0, #0
 800a16a:	f040 80b4 	bne.w	800a2d6 <_dtoa_r+0x6be>
 800a16e:	42a6      	cmp	r6, r4
 800a170:	f43f af70 	beq.w	800a054 <_dtoa_r+0x43c>
 800a174:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a178:	4b0a      	ldr	r3, [pc, #40]	@ (800a1a4 <_dtoa_r+0x58c>)
 800a17a:	2200      	movs	r2, #0
 800a17c:	f7f6 fa3c 	bl	80005f8 <__aeabi_dmul>
 800a180:	4b08      	ldr	r3, [pc, #32]	@ (800a1a4 <_dtoa_r+0x58c>)
 800a182:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a186:	2200      	movs	r2, #0
 800a188:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a18c:	f7f6 fa34 	bl	80005f8 <__aeabi_dmul>
 800a190:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a194:	e7c4      	b.n	800a120 <_dtoa_r+0x508>
 800a196:	bf00      	nop
 800a198:	0800cc68 	.word	0x0800cc68
 800a19c:	0800cc40 	.word	0x0800cc40
 800a1a0:	3ff00000 	.word	0x3ff00000
 800a1a4:	40240000 	.word	0x40240000
 800a1a8:	401c0000 	.word	0x401c0000
 800a1ac:	40140000 	.word	0x40140000
 800a1b0:	3fe00000 	.word	0x3fe00000
 800a1b4:	4631      	mov	r1, r6
 800a1b6:	4628      	mov	r0, r5
 800a1b8:	f7f6 fa1e 	bl	80005f8 <__aeabi_dmul>
 800a1bc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a1c0:	9413      	str	r4, [sp, #76]	@ 0x4c
 800a1c2:	4656      	mov	r6, sl
 800a1c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a1c8:	f7f6 fcc6 	bl	8000b58 <__aeabi_d2iz>
 800a1cc:	4605      	mov	r5, r0
 800a1ce:	f7f6 f9a9 	bl	8000524 <__aeabi_i2d>
 800a1d2:	4602      	mov	r2, r0
 800a1d4:	460b      	mov	r3, r1
 800a1d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a1da:	f7f6 f855 	bl	8000288 <__aeabi_dsub>
 800a1de:	3530      	adds	r5, #48	@ 0x30
 800a1e0:	f806 5b01 	strb.w	r5, [r6], #1
 800a1e4:	4602      	mov	r2, r0
 800a1e6:	460b      	mov	r3, r1
 800a1e8:	42a6      	cmp	r6, r4
 800a1ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a1ee:	f04f 0200 	mov.w	r2, #0
 800a1f2:	d124      	bne.n	800a23e <_dtoa_r+0x626>
 800a1f4:	4baf      	ldr	r3, [pc, #700]	@ (800a4b4 <_dtoa_r+0x89c>)
 800a1f6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a1fa:	f7f6 f847 	bl	800028c <__adddf3>
 800a1fe:	4602      	mov	r2, r0
 800a200:	460b      	mov	r3, r1
 800a202:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a206:	f7f6 fc87 	bl	8000b18 <__aeabi_dcmpgt>
 800a20a:	2800      	cmp	r0, #0
 800a20c:	d163      	bne.n	800a2d6 <_dtoa_r+0x6be>
 800a20e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a212:	49a8      	ldr	r1, [pc, #672]	@ (800a4b4 <_dtoa_r+0x89c>)
 800a214:	2000      	movs	r0, #0
 800a216:	f7f6 f837 	bl	8000288 <__aeabi_dsub>
 800a21a:	4602      	mov	r2, r0
 800a21c:	460b      	mov	r3, r1
 800a21e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a222:	f7f6 fc5b 	bl	8000adc <__aeabi_dcmplt>
 800a226:	2800      	cmp	r0, #0
 800a228:	f43f af14 	beq.w	800a054 <_dtoa_r+0x43c>
 800a22c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800a22e:	1e73      	subs	r3, r6, #1
 800a230:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a232:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a236:	2b30      	cmp	r3, #48	@ 0x30
 800a238:	d0f8      	beq.n	800a22c <_dtoa_r+0x614>
 800a23a:	4647      	mov	r7, r8
 800a23c:	e03b      	b.n	800a2b6 <_dtoa_r+0x69e>
 800a23e:	4b9e      	ldr	r3, [pc, #632]	@ (800a4b8 <_dtoa_r+0x8a0>)
 800a240:	f7f6 f9da 	bl	80005f8 <__aeabi_dmul>
 800a244:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a248:	e7bc      	b.n	800a1c4 <_dtoa_r+0x5ac>
 800a24a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800a24e:	4656      	mov	r6, sl
 800a250:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a254:	4620      	mov	r0, r4
 800a256:	4629      	mov	r1, r5
 800a258:	f7f6 faf8 	bl	800084c <__aeabi_ddiv>
 800a25c:	f7f6 fc7c 	bl	8000b58 <__aeabi_d2iz>
 800a260:	4680      	mov	r8, r0
 800a262:	f7f6 f95f 	bl	8000524 <__aeabi_i2d>
 800a266:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a26a:	f7f6 f9c5 	bl	80005f8 <__aeabi_dmul>
 800a26e:	4602      	mov	r2, r0
 800a270:	460b      	mov	r3, r1
 800a272:	4620      	mov	r0, r4
 800a274:	4629      	mov	r1, r5
 800a276:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a27a:	f7f6 f805 	bl	8000288 <__aeabi_dsub>
 800a27e:	f806 4b01 	strb.w	r4, [r6], #1
 800a282:	9d03      	ldr	r5, [sp, #12]
 800a284:	eba6 040a 	sub.w	r4, r6, sl
 800a288:	42a5      	cmp	r5, r4
 800a28a:	4602      	mov	r2, r0
 800a28c:	460b      	mov	r3, r1
 800a28e:	d133      	bne.n	800a2f8 <_dtoa_r+0x6e0>
 800a290:	f7f5 fffc 	bl	800028c <__adddf3>
 800a294:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a298:	4604      	mov	r4, r0
 800a29a:	460d      	mov	r5, r1
 800a29c:	f7f6 fc3c 	bl	8000b18 <__aeabi_dcmpgt>
 800a2a0:	b9c0      	cbnz	r0, 800a2d4 <_dtoa_r+0x6bc>
 800a2a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a2a6:	4620      	mov	r0, r4
 800a2a8:	4629      	mov	r1, r5
 800a2aa:	f7f6 fc0d 	bl	8000ac8 <__aeabi_dcmpeq>
 800a2ae:	b110      	cbz	r0, 800a2b6 <_dtoa_r+0x69e>
 800a2b0:	f018 0f01 	tst.w	r8, #1
 800a2b4:	d10e      	bne.n	800a2d4 <_dtoa_r+0x6bc>
 800a2b6:	9902      	ldr	r1, [sp, #8]
 800a2b8:	4648      	mov	r0, r9
 800a2ba:	f001 f8c1 	bl	800b440 <_Bfree>
 800a2be:	2300      	movs	r3, #0
 800a2c0:	7033      	strb	r3, [r6, #0]
 800a2c2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a2c4:	3701      	adds	r7, #1
 800a2c6:	601f      	str	r7, [r3, #0]
 800a2c8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	f000 824b 	beq.w	800a766 <_dtoa_r+0xb4e>
 800a2d0:	601e      	str	r6, [r3, #0]
 800a2d2:	e248      	b.n	800a766 <_dtoa_r+0xb4e>
 800a2d4:	46b8      	mov	r8, r7
 800a2d6:	4633      	mov	r3, r6
 800a2d8:	461e      	mov	r6, r3
 800a2da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a2de:	2a39      	cmp	r2, #57	@ 0x39
 800a2e0:	d106      	bne.n	800a2f0 <_dtoa_r+0x6d8>
 800a2e2:	459a      	cmp	sl, r3
 800a2e4:	d1f8      	bne.n	800a2d8 <_dtoa_r+0x6c0>
 800a2e6:	2230      	movs	r2, #48	@ 0x30
 800a2e8:	f108 0801 	add.w	r8, r8, #1
 800a2ec:	f88a 2000 	strb.w	r2, [sl]
 800a2f0:	781a      	ldrb	r2, [r3, #0]
 800a2f2:	3201      	adds	r2, #1
 800a2f4:	701a      	strb	r2, [r3, #0]
 800a2f6:	e7a0      	b.n	800a23a <_dtoa_r+0x622>
 800a2f8:	4b6f      	ldr	r3, [pc, #444]	@ (800a4b8 <_dtoa_r+0x8a0>)
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	f7f6 f97c 	bl	80005f8 <__aeabi_dmul>
 800a300:	2200      	movs	r2, #0
 800a302:	2300      	movs	r3, #0
 800a304:	4604      	mov	r4, r0
 800a306:	460d      	mov	r5, r1
 800a308:	f7f6 fbde 	bl	8000ac8 <__aeabi_dcmpeq>
 800a30c:	2800      	cmp	r0, #0
 800a30e:	d09f      	beq.n	800a250 <_dtoa_r+0x638>
 800a310:	e7d1      	b.n	800a2b6 <_dtoa_r+0x69e>
 800a312:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a314:	2a00      	cmp	r2, #0
 800a316:	f000 80ea 	beq.w	800a4ee <_dtoa_r+0x8d6>
 800a31a:	9a07      	ldr	r2, [sp, #28]
 800a31c:	2a01      	cmp	r2, #1
 800a31e:	f300 80cd 	bgt.w	800a4bc <_dtoa_r+0x8a4>
 800a322:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a324:	2a00      	cmp	r2, #0
 800a326:	f000 80c1 	beq.w	800a4ac <_dtoa_r+0x894>
 800a32a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a32e:	9c08      	ldr	r4, [sp, #32]
 800a330:	9e00      	ldr	r6, [sp, #0]
 800a332:	9a00      	ldr	r2, [sp, #0]
 800a334:	441a      	add	r2, r3
 800a336:	9200      	str	r2, [sp, #0]
 800a338:	9a06      	ldr	r2, [sp, #24]
 800a33a:	2101      	movs	r1, #1
 800a33c:	441a      	add	r2, r3
 800a33e:	4648      	mov	r0, r9
 800a340:	9206      	str	r2, [sp, #24]
 800a342:	f001 f97b 	bl	800b63c <__i2b>
 800a346:	4605      	mov	r5, r0
 800a348:	b166      	cbz	r6, 800a364 <_dtoa_r+0x74c>
 800a34a:	9b06      	ldr	r3, [sp, #24]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	dd09      	ble.n	800a364 <_dtoa_r+0x74c>
 800a350:	42b3      	cmp	r3, r6
 800a352:	9a00      	ldr	r2, [sp, #0]
 800a354:	bfa8      	it	ge
 800a356:	4633      	movge	r3, r6
 800a358:	1ad2      	subs	r2, r2, r3
 800a35a:	9200      	str	r2, [sp, #0]
 800a35c:	9a06      	ldr	r2, [sp, #24]
 800a35e:	1af6      	subs	r6, r6, r3
 800a360:	1ad3      	subs	r3, r2, r3
 800a362:	9306      	str	r3, [sp, #24]
 800a364:	9b08      	ldr	r3, [sp, #32]
 800a366:	b30b      	cbz	r3, 800a3ac <_dtoa_r+0x794>
 800a368:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	f000 80c6 	beq.w	800a4fc <_dtoa_r+0x8e4>
 800a370:	2c00      	cmp	r4, #0
 800a372:	f000 80c0 	beq.w	800a4f6 <_dtoa_r+0x8de>
 800a376:	4629      	mov	r1, r5
 800a378:	4622      	mov	r2, r4
 800a37a:	4648      	mov	r0, r9
 800a37c:	f001 fa16 	bl	800b7ac <__pow5mult>
 800a380:	9a02      	ldr	r2, [sp, #8]
 800a382:	4601      	mov	r1, r0
 800a384:	4605      	mov	r5, r0
 800a386:	4648      	mov	r0, r9
 800a388:	f001 f96e 	bl	800b668 <__multiply>
 800a38c:	9902      	ldr	r1, [sp, #8]
 800a38e:	4680      	mov	r8, r0
 800a390:	4648      	mov	r0, r9
 800a392:	f001 f855 	bl	800b440 <_Bfree>
 800a396:	9b08      	ldr	r3, [sp, #32]
 800a398:	1b1b      	subs	r3, r3, r4
 800a39a:	9308      	str	r3, [sp, #32]
 800a39c:	f000 80b1 	beq.w	800a502 <_dtoa_r+0x8ea>
 800a3a0:	9a08      	ldr	r2, [sp, #32]
 800a3a2:	4641      	mov	r1, r8
 800a3a4:	4648      	mov	r0, r9
 800a3a6:	f001 fa01 	bl	800b7ac <__pow5mult>
 800a3aa:	9002      	str	r0, [sp, #8]
 800a3ac:	2101      	movs	r1, #1
 800a3ae:	4648      	mov	r0, r9
 800a3b0:	f001 f944 	bl	800b63c <__i2b>
 800a3b4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a3b6:	4604      	mov	r4, r0
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	f000 81d8 	beq.w	800a76e <_dtoa_r+0xb56>
 800a3be:	461a      	mov	r2, r3
 800a3c0:	4601      	mov	r1, r0
 800a3c2:	4648      	mov	r0, r9
 800a3c4:	f001 f9f2 	bl	800b7ac <__pow5mult>
 800a3c8:	9b07      	ldr	r3, [sp, #28]
 800a3ca:	2b01      	cmp	r3, #1
 800a3cc:	4604      	mov	r4, r0
 800a3ce:	f300 809f 	bgt.w	800a510 <_dtoa_r+0x8f8>
 800a3d2:	9b04      	ldr	r3, [sp, #16]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	f040 8097 	bne.w	800a508 <_dtoa_r+0x8f0>
 800a3da:	9b05      	ldr	r3, [sp, #20]
 800a3dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	f040 8093 	bne.w	800a50c <_dtoa_r+0x8f4>
 800a3e6:	9b05      	ldr	r3, [sp, #20]
 800a3e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a3ec:	0d1b      	lsrs	r3, r3, #20
 800a3ee:	051b      	lsls	r3, r3, #20
 800a3f0:	b133      	cbz	r3, 800a400 <_dtoa_r+0x7e8>
 800a3f2:	9b00      	ldr	r3, [sp, #0]
 800a3f4:	3301      	adds	r3, #1
 800a3f6:	9300      	str	r3, [sp, #0]
 800a3f8:	9b06      	ldr	r3, [sp, #24]
 800a3fa:	3301      	adds	r3, #1
 800a3fc:	9306      	str	r3, [sp, #24]
 800a3fe:	2301      	movs	r3, #1
 800a400:	9308      	str	r3, [sp, #32]
 800a402:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a404:	2b00      	cmp	r3, #0
 800a406:	f000 81b8 	beq.w	800a77a <_dtoa_r+0xb62>
 800a40a:	6923      	ldr	r3, [r4, #16]
 800a40c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a410:	6918      	ldr	r0, [r3, #16]
 800a412:	f001 f8c7 	bl	800b5a4 <__hi0bits>
 800a416:	f1c0 0020 	rsb	r0, r0, #32
 800a41a:	9b06      	ldr	r3, [sp, #24]
 800a41c:	4418      	add	r0, r3
 800a41e:	f010 001f 	ands.w	r0, r0, #31
 800a422:	f000 8082 	beq.w	800a52a <_dtoa_r+0x912>
 800a426:	f1c0 0320 	rsb	r3, r0, #32
 800a42a:	2b04      	cmp	r3, #4
 800a42c:	dd73      	ble.n	800a516 <_dtoa_r+0x8fe>
 800a42e:	9b00      	ldr	r3, [sp, #0]
 800a430:	f1c0 001c 	rsb	r0, r0, #28
 800a434:	4403      	add	r3, r0
 800a436:	9300      	str	r3, [sp, #0]
 800a438:	9b06      	ldr	r3, [sp, #24]
 800a43a:	4403      	add	r3, r0
 800a43c:	4406      	add	r6, r0
 800a43e:	9306      	str	r3, [sp, #24]
 800a440:	9b00      	ldr	r3, [sp, #0]
 800a442:	2b00      	cmp	r3, #0
 800a444:	dd05      	ble.n	800a452 <_dtoa_r+0x83a>
 800a446:	9902      	ldr	r1, [sp, #8]
 800a448:	461a      	mov	r2, r3
 800a44a:	4648      	mov	r0, r9
 800a44c:	f001 fa08 	bl	800b860 <__lshift>
 800a450:	9002      	str	r0, [sp, #8]
 800a452:	9b06      	ldr	r3, [sp, #24]
 800a454:	2b00      	cmp	r3, #0
 800a456:	dd05      	ble.n	800a464 <_dtoa_r+0x84c>
 800a458:	4621      	mov	r1, r4
 800a45a:	461a      	mov	r2, r3
 800a45c:	4648      	mov	r0, r9
 800a45e:	f001 f9ff 	bl	800b860 <__lshift>
 800a462:	4604      	mov	r4, r0
 800a464:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a466:	2b00      	cmp	r3, #0
 800a468:	d061      	beq.n	800a52e <_dtoa_r+0x916>
 800a46a:	9802      	ldr	r0, [sp, #8]
 800a46c:	4621      	mov	r1, r4
 800a46e:	f001 fa63 	bl	800b938 <__mcmp>
 800a472:	2800      	cmp	r0, #0
 800a474:	da5b      	bge.n	800a52e <_dtoa_r+0x916>
 800a476:	2300      	movs	r3, #0
 800a478:	9902      	ldr	r1, [sp, #8]
 800a47a:	220a      	movs	r2, #10
 800a47c:	4648      	mov	r0, r9
 800a47e:	f001 f801 	bl	800b484 <__multadd>
 800a482:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a484:	9002      	str	r0, [sp, #8]
 800a486:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	f000 8177 	beq.w	800a77e <_dtoa_r+0xb66>
 800a490:	4629      	mov	r1, r5
 800a492:	2300      	movs	r3, #0
 800a494:	220a      	movs	r2, #10
 800a496:	4648      	mov	r0, r9
 800a498:	f000 fff4 	bl	800b484 <__multadd>
 800a49c:	f1bb 0f00 	cmp.w	fp, #0
 800a4a0:	4605      	mov	r5, r0
 800a4a2:	dc6f      	bgt.n	800a584 <_dtoa_r+0x96c>
 800a4a4:	9b07      	ldr	r3, [sp, #28]
 800a4a6:	2b02      	cmp	r3, #2
 800a4a8:	dc49      	bgt.n	800a53e <_dtoa_r+0x926>
 800a4aa:	e06b      	b.n	800a584 <_dtoa_r+0x96c>
 800a4ac:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a4ae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a4b2:	e73c      	b.n	800a32e <_dtoa_r+0x716>
 800a4b4:	3fe00000 	.word	0x3fe00000
 800a4b8:	40240000 	.word	0x40240000
 800a4bc:	9b03      	ldr	r3, [sp, #12]
 800a4be:	1e5c      	subs	r4, r3, #1
 800a4c0:	9b08      	ldr	r3, [sp, #32]
 800a4c2:	42a3      	cmp	r3, r4
 800a4c4:	db09      	blt.n	800a4da <_dtoa_r+0x8c2>
 800a4c6:	1b1c      	subs	r4, r3, r4
 800a4c8:	9b03      	ldr	r3, [sp, #12]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	f6bf af30 	bge.w	800a330 <_dtoa_r+0x718>
 800a4d0:	9b00      	ldr	r3, [sp, #0]
 800a4d2:	9a03      	ldr	r2, [sp, #12]
 800a4d4:	1a9e      	subs	r6, r3, r2
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	e72b      	b.n	800a332 <_dtoa_r+0x71a>
 800a4da:	9b08      	ldr	r3, [sp, #32]
 800a4dc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a4de:	9408      	str	r4, [sp, #32]
 800a4e0:	1ae3      	subs	r3, r4, r3
 800a4e2:	441a      	add	r2, r3
 800a4e4:	9e00      	ldr	r6, [sp, #0]
 800a4e6:	9b03      	ldr	r3, [sp, #12]
 800a4e8:	920d      	str	r2, [sp, #52]	@ 0x34
 800a4ea:	2400      	movs	r4, #0
 800a4ec:	e721      	b.n	800a332 <_dtoa_r+0x71a>
 800a4ee:	9c08      	ldr	r4, [sp, #32]
 800a4f0:	9e00      	ldr	r6, [sp, #0]
 800a4f2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800a4f4:	e728      	b.n	800a348 <_dtoa_r+0x730>
 800a4f6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800a4fa:	e751      	b.n	800a3a0 <_dtoa_r+0x788>
 800a4fc:	9a08      	ldr	r2, [sp, #32]
 800a4fe:	9902      	ldr	r1, [sp, #8]
 800a500:	e750      	b.n	800a3a4 <_dtoa_r+0x78c>
 800a502:	f8cd 8008 	str.w	r8, [sp, #8]
 800a506:	e751      	b.n	800a3ac <_dtoa_r+0x794>
 800a508:	2300      	movs	r3, #0
 800a50a:	e779      	b.n	800a400 <_dtoa_r+0x7e8>
 800a50c:	9b04      	ldr	r3, [sp, #16]
 800a50e:	e777      	b.n	800a400 <_dtoa_r+0x7e8>
 800a510:	2300      	movs	r3, #0
 800a512:	9308      	str	r3, [sp, #32]
 800a514:	e779      	b.n	800a40a <_dtoa_r+0x7f2>
 800a516:	d093      	beq.n	800a440 <_dtoa_r+0x828>
 800a518:	9a00      	ldr	r2, [sp, #0]
 800a51a:	331c      	adds	r3, #28
 800a51c:	441a      	add	r2, r3
 800a51e:	9200      	str	r2, [sp, #0]
 800a520:	9a06      	ldr	r2, [sp, #24]
 800a522:	441a      	add	r2, r3
 800a524:	441e      	add	r6, r3
 800a526:	9206      	str	r2, [sp, #24]
 800a528:	e78a      	b.n	800a440 <_dtoa_r+0x828>
 800a52a:	4603      	mov	r3, r0
 800a52c:	e7f4      	b.n	800a518 <_dtoa_r+0x900>
 800a52e:	9b03      	ldr	r3, [sp, #12]
 800a530:	2b00      	cmp	r3, #0
 800a532:	46b8      	mov	r8, r7
 800a534:	dc20      	bgt.n	800a578 <_dtoa_r+0x960>
 800a536:	469b      	mov	fp, r3
 800a538:	9b07      	ldr	r3, [sp, #28]
 800a53a:	2b02      	cmp	r3, #2
 800a53c:	dd1e      	ble.n	800a57c <_dtoa_r+0x964>
 800a53e:	f1bb 0f00 	cmp.w	fp, #0
 800a542:	f47f adb1 	bne.w	800a0a8 <_dtoa_r+0x490>
 800a546:	4621      	mov	r1, r4
 800a548:	465b      	mov	r3, fp
 800a54a:	2205      	movs	r2, #5
 800a54c:	4648      	mov	r0, r9
 800a54e:	f000 ff99 	bl	800b484 <__multadd>
 800a552:	4601      	mov	r1, r0
 800a554:	4604      	mov	r4, r0
 800a556:	9802      	ldr	r0, [sp, #8]
 800a558:	f001 f9ee 	bl	800b938 <__mcmp>
 800a55c:	2800      	cmp	r0, #0
 800a55e:	f77f ada3 	ble.w	800a0a8 <_dtoa_r+0x490>
 800a562:	4656      	mov	r6, sl
 800a564:	2331      	movs	r3, #49	@ 0x31
 800a566:	f806 3b01 	strb.w	r3, [r6], #1
 800a56a:	f108 0801 	add.w	r8, r8, #1
 800a56e:	e59f      	b.n	800a0b0 <_dtoa_r+0x498>
 800a570:	9c03      	ldr	r4, [sp, #12]
 800a572:	46b8      	mov	r8, r7
 800a574:	4625      	mov	r5, r4
 800a576:	e7f4      	b.n	800a562 <_dtoa_r+0x94a>
 800a578:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800a57c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a57e:	2b00      	cmp	r3, #0
 800a580:	f000 8101 	beq.w	800a786 <_dtoa_r+0xb6e>
 800a584:	2e00      	cmp	r6, #0
 800a586:	dd05      	ble.n	800a594 <_dtoa_r+0x97c>
 800a588:	4629      	mov	r1, r5
 800a58a:	4632      	mov	r2, r6
 800a58c:	4648      	mov	r0, r9
 800a58e:	f001 f967 	bl	800b860 <__lshift>
 800a592:	4605      	mov	r5, r0
 800a594:	9b08      	ldr	r3, [sp, #32]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d05c      	beq.n	800a654 <_dtoa_r+0xa3c>
 800a59a:	6869      	ldr	r1, [r5, #4]
 800a59c:	4648      	mov	r0, r9
 800a59e:	f000 ff0f 	bl	800b3c0 <_Balloc>
 800a5a2:	4606      	mov	r6, r0
 800a5a4:	b928      	cbnz	r0, 800a5b2 <_dtoa_r+0x99a>
 800a5a6:	4b82      	ldr	r3, [pc, #520]	@ (800a7b0 <_dtoa_r+0xb98>)
 800a5a8:	4602      	mov	r2, r0
 800a5aa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a5ae:	f7ff bb4a 	b.w	8009c46 <_dtoa_r+0x2e>
 800a5b2:	692a      	ldr	r2, [r5, #16]
 800a5b4:	3202      	adds	r2, #2
 800a5b6:	0092      	lsls	r2, r2, #2
 800a5b8:	f105 010c 	add.w	r1, r5, #12
 800a5bc:	300c      	adds	r0, #12
 800a5be:	f7ff fa83 	bl	8009ac8 <memcpy>
 800a5c2:	2201      	movs	r2, #1
 800a5c4:	4631      	mov	r1, r6
 800a5c6:	4648      	mov	r0, r9
 800a5c8:	f001 f94a 	bl	800b860 <__lshift>
 800a5cc:	f10a 0301 	add.w	r3, sl, #1
 800a5d0:	9300      	str	r3, [sp, #0]
 800a5d2:	eb0a 030b 	add.w	r3, sl, fp
 800a5d6:	9308      	str	r3, [sp, #32]
 800a5d8:	9b04      	ldr	r3, [sp, #16]
 800a5da:	f003 0301 	and.w	r3, r3, #1
 800a5de:	462f      	mov	r7, r5
 800a5e0:	9306      	str	r3, [sp, #24]
 800a5e2:	4605      	mov	r5, r0
 800a5e4:	9b00      	ldr	r3, [sp, #0]
 800a5e6:	9802      	ldr	r0, [sp, #8]
 800a5e8:	4621      	mov	r1, r4
 800a5ea:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800a5ee:	f7ff fa89 	bl	8009b04 <quorem>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	3330      	adds	r3, #48	@ 0x30
 800a5f6:	9003      	str	r0, [sp, #12]
 800a5f8:	4639      	mov	r1, r7
 800a5fa:	9802      	ldr	r0, [sp, #8]
 800a5fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a5fe:	f001 f99b 	bl	800b938 <__mcmp>
 800a602:	462a      	mov	r2, r5
 800a604:	9004      	str	r0, [sp, #16]
 800a606:	4621      	mov	r1, r4
 800a608:	4648      	mov	r0, r9
 800a60a:	f001 f9b1 	bl	800b970 <__mdiff>
 800a60e:	68c2      	ldr	r2, [r0, #12]
 800a610:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a612:	4606      	mov	r6, r0
 800a614:	bb02      	cbnz	r2, 800a658 <_dtoa_r+0xa40>
 800a616:	4601      	mov	r1, r0
 800a618:	9802      	ldr	r0, [sp, #8]
 800a61a:	f001 f98d 	bl	800b938 <__mcmp>
 800a61e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a620:	4602      	mov	r2, r0
 800a622:	4631      	mov	r1, r6
 800a624:	4648      	mov	r0, r9
 800a626:	920c      	str	r2, [sp, #48]	@ 0x30
 800a628:	9309      	str	r3, [sp, #36]	@ 0x24
 800a62a:	f000 ff09 	bl	800b440 <_Bfree>
 800a62e:	9b07      	ldr	r3, [sp, #28]
 800a630:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a632:	9e00      	ldr	r6, [sp, #0]
 800a634:	ea42 0103 	orr.w	r1, r2, r3
 800a638:	9b06      	ldr	r3, [sp, #24]
 800a63a:	4319      	orrs	r1, r3
 800a63c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a63e:	d10d      	bne.n	800a65c <_dtoa_r+0xa44>
 800a640:	2b39      	cmp	r3, #57	@ 0x39
 800a642:	d027      	beq.n	800a694 <_dtoa_r+0xa7c>
 800a644:	9a04      	ldr	r2, [sp, #16]
 800a646:	2a00      	cmp	r2, #0
 800a648:	dd01      	ble.n	800a64e <_dtoa_r+0xa36>
 800a64a:	9b03      	ldr	r3, [sp, #12]
 800a64c:	3331      	adds	r3, #49	@ 0x31
 800a64e:	f88b 3000 	strb.w	r3, [fp]
 800a652:	e52e      	b.n	800a0b2 <_dtoa_r+0x49a>
 800a654:	4628      	mov	r0, r5
 800a656:	e7b9      	b.n	800a5cc <_dtoa_r+0x9b4>
 800a658:	2201      	movs	r2, #1
 800a65a:	e7e2      	b.n	800a622 <_dtoa_r+0xa0a>
 800a65c:	9904      	ldr	r1, [sp, #16]
 800a65e:	2900      	cmp	r1, #0
 800a660:	db04      	blt.n	800a66c <_dtoa_r+0xa54>
 800a662:	9807      	ldr	r0, [sp, #28]
 800a664:	4301      	orrs	r1, r0
 800a666:	9806      	ldr	r0, [sp, #24]
 800a668:	4301      	orrs	r1, r0
 800a66a:	d120      	bne.n	800a6ae <_dtoa_r+0xa96>
 800a66c:	2a00      	cmp	r2, #0
 800a66e:	ddee      	ble.n	800a64e <_dtoa_r+0xa36>
 800a670:	9902      	ldr	r1, [sp, #8]
 800a672:	9300      	str	r3, [sp, #0]
 800a674:	2201      	movs	r2, #1
 800a676:	4648      	mov	r0, r9
 800a678:	f001 f8f2 	bl	800b860 <__lshift>
 800a67c:	4621      	mov	r1, r4
 800a67e:	9002      	str	r0, [sp, #8]
 800a680:	f001 f95a 	bl	800b938 <__mcmp>
 800a684:	2800      	cmp	r0, #0
 800a686:	9b00      	ldr	r3, [sp, #0]
 800a688:	dc02      	bgt.n	800a690 <_dtoa_r+0xa78>
 800a68a:	d1e0      	bne.n	800a64e <_dtoa_r+0xa36>
 800a68c:	07da      	lsls	r2, r3, #31
 800a68e:	d5de      	bpl.n	800a64e <_dtoa_r+0xa36>
 800a690:	2b39      	cmp	r3, #57	@ 0x39
 800a692:	d1da      	bne.n	800a64a <_dtoa_r+0xa32>
 800a694:	2339      	movs	r3, #57	@ 0x39
 800a696:	f88b 3000 	strb.w	r3, [fp]
 800a69a:	4633      	mov	r3, r6
 800a69c:	461e      	mov	r6, r3
 800a69e:	3b01      	subs	r3, #1
 800a6a0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a6a4:	2a39      	cmp	r2, #57	@ 0x39
 800a6a6:	d04e      	beq.n	800a746 <_dtoa_r+0xb2e>
 800a6a8:	3201      	adds	r2, #1
 800a6aa:	701a      	strb	r2, [r3, #0]
 800a6ac:	e501      	b.n	800a0b2 <_dtoa_r+0x49a>
 800a6ae:	2a00      	cmp	r2, #0
 800a6b0:	dd03      	ble.n	800a6ba <_dtoa_r+0xaa2>
 800a6b2:	2b39      	cmp	r3, #57	@ 0x39
 800a6b4:	d0ee      	beq.n	800a694 <_dtoa_r+0xa7c>
 800a6b6:	3301      	adds	r3, #1
 800a6b8:	e7c9      	b.n	800a64e <_dtoa_r+0xa36>
 800a6ba:	9a00      	ldr	r2, [sp, #0]
 800a6bc:	9908      	ldr	r1, [sp, #32]
 800a6be:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a6c2:	428a      	cmp	r2, r1
 800a6c4:	d028      	beq.n	800a718 <_dtoa_r+0xb00>
 800a6c6:	9902      	ldr	r1, [sp, #8]
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	220a      	movs	r2, #10
 800a6cc:	4648      	mov	r0, r9
 800a6ce:	f000 fed9 	bl	800b484 <__multadd>
 800a6d2:	42af      	cmp	r7, r5
 800a6d4:	9002      	str	r0, [sp, #8]
 800a6d6:	f04f 0300 	mov.w	r3, #0
 800a6da:	f04f 020a 	mov.w	r2, #10
 800a6de:	4639      	mov	r1, r7
 800a6e0:	4648      	mov	r0, r9
 800a6e2:	d107      	bne.n	800a6f4 <_dtoa_r+0xadc>
 800a6e4:	f000 fece 	bl	800b484 <__multadd>
 800a6e8:	4607      	mov	r7, r0
 800a6ea:	4605      	mov	r5, r0
 800a6ec:	9b00      	ldr	r3, [sp, #0]
 800a6ee:	3301      	adds	r3, #1
 800a6f0:	9300      	str	r3, [sp, #0]
 800a6f2:	e777      	b.n	800a5e4 <_dtoa_r+0x9cc>
 800a6f4:	f000 fec6 	bl	800b484 <__multadd>
 800a6f8:	4629      	mov	r1, r5
 800a6fa:	4607      	mov	r7, r0
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	220a      	movs	r2, #10
 800a700:	4648      	mov	r0, r9
 800a702:	f000 febf 	bl	800b484 <__multadd>
 800a706:	4605      	mov	r5, r0
 800a708:	e7f0      	b.n	800a6ec <_dtoa_r+0xad4>
 800a70a:	f1bb 0f00 	cmp.w	fp, #0
 800a70e:	bfcc      	ite	gt
 800a710:	465e      	movgt	r6, fp
 800a712:	2601      	movle	r6, #1
 800a714:	4456      	add	r6, sl
 800a716:	2700      	movs	r7, #0
 800a718:	9902      	ldr	r1, [sp, #8]
 800a71a:	9300      	str	r3, [sp, #0]
 800a71c:	2201      	movs	r2, #1
 800a71e:	4648      	mov	r0, r9
 800a720:	f001 f89e 	bl	800b860 <__lshift>
 800a724:	4621      	mov	r1, r4
 800a726:	9002      	str	r0, [sp, #8]
 800a728:	f001 f906 	bl	800b938 <__mcmp>
 800a72c:	2800      	cmp	r0, #0
 800a72e:	dcb4      	bgt.n	800a69a <_dtoa_r+0xa82>
 800a730:	d102      	bne.n	800a738 <_dtoa_r+0xb20>
 800a732:	9b00      	ldr	r3, [sp, #0]
 800a734:	07db      	lsls	r3, r3, #31
 800a736:	d4b0      	bmi.n	800a69a <_dtoa_r+0xa82>
 800a738:	4633      	mov	r3, r6
 800a73a:	461e      	mov	r6, r3
 800a73c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a740:	2a30      	cmp	r2, #48	@ 0x30
 800a742:	d0fa      	beq.n	800a73a <_dtoa_r+0xb22>
 800a744:	e4b5      	b.n	800a0b2 <_dtoa_r+0x49a>
 800a746:	459a      	cmp	sl, r3
 800a748:	d1a8      	bne.n	800a69c <_dtoa_r+0xa84>
 800a74a:	2331      	movs	r3, #49	@ 0x31
 800a74c:	f108 0801 	add.w	r8, r8, #1
 800a750:	f88a 3000 	strb.w	r3, [sl]
 800a754:	e4ad      	b.n	800a0b2 <_dtoa_r+0x49a>
 800a756:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a758:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800a7b4 <_dtoa_r+0xb9c>
 800a75c:	b11b      	cbz	r3, 800a766 <_dtoa_r+0xb4e>
 800a75e:	f10a 0308 	add.w	r3, sl, #8
 800a762:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a764:	6013      	str	r3, [r2, #0]
 800a766:	4650      	mov	r0, sl
 800a768:	b017      	add	sp, #92	@ 0x5c
 800a76a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a76e:	9b07      	ldr	r3, [sp, #28]
 800a770:	2b01      	cmp	r3, #1
 800a772:	f77f ae2e 	ble.w	800a3d2 <_dtoa_r+0x7ba>
 800a776:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a778:	9308      	str	r3, [sp, #32]
 800a77a:	2001      	movs	r0, #1
 800a77c:	e64d      	b.n	800a41a <_dtoa_r+0x802>
 800a77e:	f1bb 0f00 	cmp.w	fp, #0
 800a782:	f77f aed9 	ble.w	800a538 <_dtoa_r+0x920>
 800a786:	4656      	mov	r6, sl
 800a788:	9802      	ldr	r0, [sp, #8]
 800a78a:	4621      	mov	r1, r4
 800a78c:	f7ff f9ba 	bl	8009b04 <quorem>
 800a790:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800a794:	f806 3b01 	strb.w	r3, [r6], #1
 800a798:	eba6 020a 	sub.w	r2, r6, sl
 800a79c:	4593      	cmp	fp, r2
 800a79e:	ddb4      	ble.n	800a70a <_dtoa_r+0xaf2>
 800a7a0:	9902      	ldr	r1, [sp, #8]
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	220a      	movs	r2, #10
 800a7a6:	4648      	mov	r0, r9
 800a7a8:	f000 fe6c 	bl	800b484 <__multadd>
 800a7ac:	9002      	str	r0, [sp, #8]
 800a7ae:	e7eb      	b.n	800a788 <_dtoa_r+0xb70>
 800a7b0:	0800c9c7 	.word	0x0800c9c7
 800a7b4:	0800c94b 	.word	0x0800c94b

0800a7b8 <rshift>:
 800a7b8:	6903      	ldr	r3, [r0, #16]
 800a7ba:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a7be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a7c2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a7c6:	f100 0414 	add.w	r4, r0, #20
 800a7ca:	dd45      	ble.n	800a858 <rshift+0xa0>
 800a7cc:	f011 011f 	ands.w	r1, r1, #31
 800a7d0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a7d4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a7d8:	d10c      	bne.n	800a7f4 <rshift+0x3c>
 800a7da:	f100 0710 	add.w	r7, r0, #16
 800a7de:	4629      	mov	r1, r5
 800a7e0:	42b1      	cmp	r1, r6
 800a7e2:	d334      	bcc.n	800a84e <rshift+0x96>
 800a7e4:	1a9b      	subs	r3, r3, r2
 800a7e6:	009b      	lsls	r3, r3, #2
 800a7e8:	1eea      	subs	r2, r5, #3
 800a7ea:	4296      	cmp	r6, r2
 800a7ec:	bf38      	it	cc
 800a7ee:	2300      	movcc	r3, #0
 800a7f0:	4423      	add	r3, r4
 800a7f2:	e015      	b.n	800a820 <rshift+0x68>
 800a7f4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a7f8:	f1c1 0820 	rsb	r8, r1, #32
 800a7fc:	40cf      	lsrs	r7, r1
 800a7fe:	f105 0e04 	add.w	lr, r5, #4
 800a802:	46a1      	mov	r9, r4
 800a804:	4576      	cmp	r6, lr
 800a806:	46f4      	mov	ip, lr
 800a808:	d815      	bhi.n	800a836 <rshift+0x7e>
 800a80a:	1a9a      	subs	r2, r3, r2
 800a80c:	0092      	lsls	r2, r2, #2
 800a80e:	3a04      	subs	r2, #4
 800a810:	3501      	adds	r5, #1
 800a812:	42ae      	cmp	r6, r5
 800a814:	bf38      	it	cc
 800a816:	2200      	movcc	r2, #0
 800a818:	18a3      	adds	r3, r4, r2
 800a81a:	50a7      	str	r7, [r4, r2]
 800a81c:	b107      	cbz	r7, 800a820 <rshift+0x68>
 800a81e:	3304      	adds	r3, #4
 800a820:	1b1a      	subs	r2, r3, r4
 800a822:	42a3      	cmp	r3, r4
 800a824:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a828:	bf08      	it	eq
 800a82a:	2300      	moveq	r3, #0
 800a82c:	6102      	str	r2, [r0, #16]
 800a82e:	bf08      	it	eq
 800a830:	6143      	streq	r3, [r0, #20]
 800a832:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a836:	f8dc c000 	ldr.w	ip, [ip]
 800a83a:	fa0c fc08 	lsl.w	ip, ip, r8
 800a83e:	ea4c 0707 	orr.w	r7, ip, r7
 800a842:	f849 7b04 	str.w	r7, [r9], #4
 800a846:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a84a:	40cf      	lsrs	r7, r1
 800a84c:	e7da      	b.n	800a804 <rshift+0x4c>
 800a84e:	f851 cb04 	ldr.w	ip, [r1], #4
 800a852:	f847 cf04 	str.w	ip, [r7, #4]!
 800a856:	e7c3      	b.n	800a7e0 <rshift+0x28>
 800a858:	4623      	mov	r3, r4
 800a85a:	e7e1      	b.n	800a820 <rshift+0x68>

0800a85c <__hexdig_fun>:
 800a85c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a860:	2b09      	cmp	r3, #9
 800a862:	d802      	bhi.n	800a86a <__hexdig_fun+0xe>
 800a864:	3820      	subs	r0, #32
 800a866:	b2c0      	uxtb	r0, r0
 800a868:	4770      	bx	lr
 800a86a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a86e:	2b05      	cmp	r3, #5
 800a870:	d801      	bhi.n	800a876 <__hexdig_fun+0x1a>
 800a872:	3847      	subs	r0, #71	@ 0x47
 800a874:	e7f7      	b.n	800a866 <__hexdig_fun+0xa>
 800a876:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a87a:	2b05      	cmp	r3, #5
 800a87c:	d801      	bhi.n	800a882 <__hexdig_fun+0x26>
 800a87e:	3827      	subs	r0, #39	@ 0x27
 800a880:	e7f1      	b.n	800a866 <__hexdig_fun+0xa>
 800a882:	2000      	movs	r0, #0
 800a884:	4770      	bx	lr
	...

0800a888 <__gethex>:
 800a888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a88c:	b085      	sub	sp, #20
 800a88e:	468a      	mov	sl, r1
 800a890:	9302      	str	r3, [sp, #8]
 800a892:	680b      	ldr	r3, [r1, #0]
 800a894:	9001      	str	r0, [sp, #4]
 800a896:	4690      	mov	r8, r2
 800a898:	1c9c      	adds	r4, r3, #2
 800a89a:	46a1      	mov	r9, r4
 800a89c:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a8a0:	2830      	cmp	r0, #48	@ 0x30
 800a8a2:	d0fa      	beq.n	800a89a <__gethex+0x12>
 800a8a4:	eba9 0303 	sub.w	r3, r9, r3
 800a8a8:	f1a3 0b02 	sub.w	fp, r3, #2
 800a8ac:	f7ff ffd6 	bl	800a85c <__hexdig_fun>
 800a8b0:	4605      	mov	r5, r0
 800a8b2:	2800      	cmp	r0, #0
 800a8b4:	d168      	bne.n	800a988 <__gethex+0x100>
 800a8b6:	49a0      	ldr	r1, [pc, #640]	@ (800ab38 <__gethex+0x2b0>)
 800a8b8:	2201      	movs	r2, #1
 800a8ba:	4648      	mov	r0, r9
 800a8bc:	f7ff f8c0 	bl	8009a40 <strncmp>
 800a8c0:	4607      	mov	r7, r0
 800a8c2:	2800      	cmp	r0, #0
 800a8c4:	d167      	bne.n	800a996 <__gethex+0x10e>
 800a8c6:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a8ca:	4626      	mov	r6, r4
 800a8cc:	f7ff ffc6 	bl	800a85c <__hexdig_fun>
 800a8d0:	2800      	cmp	r0, #0
 800a8d2:	d062      	beq.n	800a99a <__gethex+0x112>
 800a8d4:	4623      	mov	r3, r4
 800a8d6:	7818      	ldrb	r0, [r3, #0]
 800a8d8:	2830      	cmp	r0, #48	@ 0x30
 800a8da:	4699      	mov	r9, r3
 800a8dc:	f103 0301 	add.w	r3, r3, #1
 800a8e0:	d0f9      	beq.n	800a8d6 <__gethex+0x4e>
 800a8e2:	f7ff ffbb 	bl	800a85c <__hexdig_fun>
 800a8e6:	fab0 f580 	clz	r5, r0
 800a8ea:	096d      	lsrs	r5, r5, #5
 800a8ec:	f04f 0b01 	mov.w	fp, #1
 800a8f0:	464a      	mov	r2, r9
 800a8f2:	4616      	mov	r6, r2
 800a8f4:	3201      	adds	r2, #1
 800a8f6:	7830      	ldrb	r0, [r6, #0]
 800a8f8:	f7ff ffb0 	bl	800a85c <__hexdig_fun>
 800a8fc:	2800      	cmp	r0, #0
 800a8fe:	d1f8      	bne.n	800a8f2 <__gethex+0x6a>
 800a900:	498d      	ldr	r1, [pc, #564]	@ (800ab38 <__gethex+0x2b0>)
 800a902:	2201      	movs	r2, #1
 800a904:	4630      	mov	r0, r6
 800a906:	f7ff f89b 	bl	8009a40 <strncmp>
 800a90a:	2800      	cmp	r0, #0
 800a90c:	d13f      	bne.n	800a98e <__gethex+0x106>
 800a90e:	b944      	cbnz	r4, 800a922 <__gethex+0x9a>
 800a910:	1c74      	adds	r4, r6, #1
 800a912:	4622      	mov	r2, r4
 800a914:	4616      	mov	r6, r2
 800a916:	3201      	adds	r2, #1
 800a918:	7830      	ldrb	r0, [r6, #0]
 800a91a:	f7ff ff9f 	bl	800a85c <__hexdig_fun>
 800a91e:	2800      	cmp	r0, #0
 800a920:	d1f8      	bne.n	800a914 <__gethex+0x8c>
 800a922:	1ba4      	subs	r4, r4, r6
 800a924:	00a7      	lsls	r7, r4, #2
 800a926:	7833      	ldrb	r3, [r6, #0]
 800a928:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a92c:	2b50      	cmp	r3, #80	@ 0x50
 800a92e:	d13e      	bne.n	800a9ae <__gethex+0x126>
 800a930:	7873      	ldrb	r3, [r6, #1]
 800a932:	2b2b      	cmp	r3, #43	@ 0x2b
 800a934:	d033      	beq.n	800a99e <__gethex+0x116>
 800a936:	2b2d      	cmp	r3, #45	@ 0x2d
 800a938:	d034      	beq.n	800a9a4 <__gethex+0x11c>
 800a93a:	1c71      	adds	r1, r6, #1
 800a93c:	2400      	movs	r4, #0
 800a93e:	7808      	ldrb	r0, [r1, #0]
 800a940:	f7ff ff8c 	bl	800a85c <__hexdig_fun>
 800a944:	1e43      	subs	r3, r0, #1
 800a946:	b2db      	uxtb	r3, r3
 800a948:	2b18      	cmp	r3, #24
 800a94a:	d830      	bhi.n	800a9ae <__gethex+0x126>
 800a94c:	f1a0 0210 	sub.w	r2, r0, #16
 800a950:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a954:	f7ff ff82 	bl	800a85c <__hexdig_fun>
 800a958:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800a95c:	fa5f fc8c 	uxtb.w	ip, ip
 800a960:	f1bc 0f18 	cmp.w	ip, #24
 800a964:	f04f 030a 	mov.w	r3, #10
 800a968:	d91e      	bls.n	800a9a8 <__gethex+0x120>
 800a96a:	b104      	cbz	r4, 800a96e <__gethex+0xe6>
 800a96c:	4252      	negs	r2, r2
 800a96e:	4417      	add	r7, r2
 800a970:	f8ca 1000 	str.w	r1, [sl]
 800a974:	b1ed      	cbz	r5, 800a9b2 <__gethex+0x12a>
 800a976:	f1bb 0f00 	cmp.w	fp, #0
 800a97a:	bf0c      	ite	eq
 800a97c:	2506      	moveq	r5, #6
 800a97e:	2500      	movne	r5, #0
 800a980:	4628      	mov	r0, r5
 800a982:	b005      	add	sp, #20
 800a984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a988:	2500      	movs	r5, #0
 800a98a:	462c      	mov	r4, r5
 800a98c:	e7b0      	b.n	800a8f0 <__gethex+0x68>
 800a98e:	2c00      	cmp	r4, #0
 800a990:	d1c7      	bne.n	800a922 <__gethex+0x9a>
 800a992:	4627      	mov	r7, r4
 800a994:	e7c7      	b.n	800a926 <__gethex+0x9e>
 800a996:	464e      	mov	r6, r9
 800a998:	462f      	mov	r7, r5
 800a99a:	2501      	movs	r5, #1
 800a99c:	e7c3      	b.n	800a926 <__gethex+0x9e>
 800a99e:	2400      	movs	r4, #0
 800a9a0:	1cb1      	adds	r1, r6, #2
 800a9a2:	e7cc      	b.n	800a93e <__gethex+0xb6>
 800a9a4:	2401      	movs	r4, #1
 800a9a6:	e7fb      	b.n	800a9a0 <__gethex+0x118>
 800a9a8:	fb03 0002 	mla	r0, r3, r2, r0
 800a9ac:	e7ce      	b.n	800a94c <__gethex+0xc4>
 800a9ae:	4631      	mov	r1, r6
 800a9b0:	e7de      	b.n	800a970 <__gethex+0xe8>
 800a9b2:	eba6 0309 	sub.w	r3, r6, r9
 800a9b6:	3b01      	subs	r3, #1
 800a9b8:	4629      	mov	r1, r5
 800a9ba:	2b07      	cmp	r3, #7
 800a9bc:	dc0a      	bgt.n	800a9d4 <__gethex+0x14c>
 800a9be:	9801      	ldr	r0, [sp, #4]
 800a9c0:	f000 fcfe 	bl	800b3c0 <_Balloc>
 800a9c4:	4604      	mov	r4, r0
 800a9c6:	b940      	cbnz	r0, 800a9da <__gethex+0x152>
 800a9c8:	4b5c      	ldr	r3, [pc, #368]	@ (800ab3c <__gethex+0x2b4>)
 800a9ca:	4602      	mov	r2, r0
 800a9cc:	21e4      	movs	r1, #228	@ 0xe4
 800a9ce:	485c      	ldr	r0, [pc, #368]	@ (800ab40 <__gethex+0x2b8>)
 800a9d0:	f001 fa8e 	bl	800bef0 <__assert_func>
 800a9d4:	3101      	adds	r1, #1
 800a9d6:	105b      	asrs	r3, r3, #1
 800a9d8:	e7ef      	b.n	800a9ba <__gethex+0x132>
 800a9da:	f100 0a14 	add.w	sl, r0, #20
 800a9de:	2300      	movs	r3, #0
 800a9e0:	4655      	mov	r5, sl
 800a9e2:	469b      	mov	fp, r3
 800a9e4:	45b1      	cmp	r9, r6
 800a9e6:	d337      	bcc.n	800aa58 <__gethex+0x1d0>
 800a9e8:	f845 bb04 	str.w	fp, [r5], #4
 800a9ec:	eba5 050a 	sub.w	r5, r5, sl
 800a9f0:	10ad      	asrs	r5, r5, #2
 800a9f2:	6125      	str	r5, [r4, #16]
 800a9f4:	4658      	mov	r0, fp
 800a9f6:	f000 fdd5 	bl	800b5a4 <__hi0bits>
 800a9fa:	016d      	lsls	r5, r5, #5
 800a9fc:	f8d8 6000 	ldr.w	r6, [r8]
 800aa00:	1a2d      	subs	r5, r5, r0
 800aa02:	42b5      	cmp	r5, r6
 800aa04:	dd54      	ble.n	800aab0 <__gethex+0x228>
 800aa06:	1bad      	subs	r5, r5, r6
 800aa08:	4629      	mov	r1, r5
 800aa0a:	4620      	mov	r0, r4
 800aa0c:	f001 f961 	bl	800bcd2 <__any_on>
 800aa10:	4681      	mov	r9, r0
 800aa12:	b178      	cbz	r0, 800aa34 <__gethex+0x1ac>
 800aa14:	1e6b      	subs	r3, r5, #1
 800aa16:	1159      	asrs	r1, r3, #5
 800aa18:	f003 021f 	and.w	r2, r3, #31
 800aa1c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800aa20:	f04f 0901 	mov.w	r9, #1
 800aa24:	fa09 f202 	lsl.w	r2, r9, r2
 800aa28:	420a      	tst	r2, r1
 800aa2a:	d003      	beq.n	800aa34 <__gethex+0x1ac>
 800aa2c:	454b      	cmp	r3, r9
 800aa2e:	dc36      	bgt.n	800aa9e <__gethex+0x216>
 800aa30:	f04f 0902 	mov.w	r9, #2
 800aa34:	4629      	mov	r1, r5
 800aa36:	4620      	mov	r0, r4
 800aa38:	f7ff febe 	bl	800a7b8 <rshift>
 800aa3c:	442f      	add	r7, r5
 800aa3e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aa42:	42bb      	cmp	r3, r7
 800aa44:	da42      	bge.n	800aacc <__gethex+0x244>
 800aa46:	9801      	ldr	r0, [sp, #4]
 800aa48:	4621      	mov	r1, r4
 800aa4a:	f000 fcf9 	bl	800b440 <_Bfree>
 800aa4e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aa50:	2300      	movs	r3, #0
 800aa52:	6013      	str	r3, [r2, #0]
 800aa54:	25a3      	movs	r5, #163	@ 0xa3
 800aa56:	e793      	b.n	800a980 <__gethex+0xf8>
 800aa58:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800aa5c:	2a2e      	cmp	r2, #46	@ 0x2e
 800aa5e:	d012      	beq.n	800aa86 <__gethex+0x1fe>
 800aa60:	2b20      	cmp	r3, #32
 800aa62:	d104      	bne.n	800aa6e <__gethex+0x1e6>
 800aa64:	f845 bb04 	str.w	fp, [r5], #4
 800aa68:	f04f 0b00 	mov.w	fp, #0
 800aa6c:	465b      	mov	r3, fp
 800aa6e:	7830      	ldrb	r0, [r6, #0]
 800aa70:	9303      	str	r3, [sp, #12]
 800aa72:	f7ff fef3 	bl	800a85c <__hexdig_fun>
 800aa76:	9b03      	ldr	r3, [sp, #12]
 800aa78:	f000 000f 	and.w	r0, r0, #15
 800aa7c:	4098      	lsls	r0, r3
 800aa7e:	ea4b 0b00 	orr.w	fp, fp, r0
 800aa82:	3304      	adds	r3, #4
 800aa84:	e7ae      	b.n	800a9e4 <__gethex+0x15c>
 800aa86:	45b1      	cmp	r9, r6
 800aa88:	d8ea      	bhi.n	800aa60 <__gethex+0x1d8>
 800aa8a:	492b      	ldr	r1, [pc, #172]	@ (800ab38 <__gethex+0x2b0>)
 800aa8c:	9303      	str	r3, [sp, #12]
 800aa8e:	2201      	movs	r2, #1
 800aa90:	4630      	mov	r0, r6
 800aa92:	f7fe ffd5 	bl	8009a40 <strncmp>
 800aa96:	9b03      	ldr	r3, [sp, #12]
 800aa98:	2800      	cmp	r0, #0
 800aa9a:	d1e1      	bne.n	800aa60 <__gethex+0x1d8>
 800aa9c:	e7a2      	b.n	800a9e4 <__gethex+0x15c>
 800aa9e:	1ea9      	subs	r1, r5, #2
 800aaa0:	4620      	mov	r0, r4
 800aaa2:	f001 f916 	bl	800bcd2 <__any_on>
 800aaa6:	2800      	cmp	r0, #0
 800aaa8:	d0c2      	beq.n	800aa30 <__gethex+0x1a8>
 800aaaa:	f04f 0903 	mov.w	r9, #3
 800aaae:	e7c1      	b.n	800aa34 <__gethex+0x1ac>
 800aab0:	da09      	bge.n	800aac6 <__gethex+0x23e>
 800aab2:	1b75      	subs	r5, r6, r5
 800aab4:	4621      	mov	r1, r4
 800aab6:	9801      	ldr	r0, [sp, #4]
 800aab8:	462a      	mov	r2, r5
 800aaba:	f000 fed1 	bl	800b860 <__lshift>
 800aabe:	1b7f      	subs	r7, r7, r5
 800aac0:	4604      	mov	r4, r0
 800aac2:	f100 0a14 	add.w	sl, r0, #20
 800aac6:	f04f 0900 	mov.w	r9, #0
 800aaca:	e7b8      	b.n	800aa3e <__gethex+0x1b6>
 800aacc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800aad0:	42bd      	cmp	r5, r7
 800aad2:	dd6f      	ble.n	800abb4 <__gethex+0x32c>
 800aad4:	1bed      	subs	r5, r5, r7
 800aad6:	42ae      	cmp	r6, r5
 800aad8:	dc34      	bgt.n	800ab44 <__gethex+0x2bc>
 800aada:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aade:	2b02      	cmp	r3, #2
 800aae0:	d022      	beq.n	800ab28 <__gethex+0x2a0>
 800aae2:	2b03      	cmp	r3, #3
 800aae4:	d024      	beq.n	800ab30 <__gethex+0x2a8>
 800aae6:	2b01      	cmp	r3, #1
 800aae8:	d115      	bne.n	800ab16 <__gethex+0x28e>
 800aaea:	42ae      	cmp	r6, r5
 800aaec:	d113      	bne.n	800ab16 <__gethex+0x28e>
 800aaee:	2e01      	cmp	r6, #1
 800aaf0:	d10b      	bne.n	800ab0a <__gethex+0x282>
 800aaf2:	9a02      	ldr	r2, [sp, #8]
 800aaf4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800aaf8:	6013      	str	r3, [r2, #0]
 800aafa:	2301      	movs	r3, #1
 800aafc:	6123      	str	r3, [r4, #16]
 800aafe:	f8ca 3000 	str.w	r3, [sl]
 800ab02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab04:	2562      	movs	r5, #98	@ 0x62
 800ab06:	601c      	str	r4, [r3, #0]
 800ab08:	e73a      	b.n	800a980 <__gethex+0xf8>
 800ab0a:	1e71      	subs	r1, r6, #1
 800ab0c:	4620      	mov	r0, r4
 800ab0e:	f001 f8e0 	bl	800bcd2 <__any_on>
 800ab12:	2800      	cmp	r0, #0
 800ab14:	d1ed      	bne.n	800aaf2 <__gethex+0x26a>
 800ab16:	9801      	ldr	r0, [sp, #4]
 800ab18:	4621      	mov	r1, r4
 800ab1a:	f000 fc91 	bl	800b440 <_Bfree>
 800ab1e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ab20:	2300      	movs	r3, #0
 800ab22:	6013      	str	r3, [r2, #0]
 800ab24:	2550      	movs	r5, #80	@ 0x50
 800ab26:	e72b      	b.n	800a980 <__gethex+0xf8>
 800ab28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d1f3      	bne.n	800ab16 <__gethex+0x28e>
 800ab2e:	e7e0      	b.n	800aaf2 <__gethex+0x26a>
 800ab30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d1dd      	bne.n	800aaf2 <__gethex+0x26a>
 800ab36:	e7ee      	b.n	800ab16 <__gethex+0x28e>
 800ab38:	0800c941 	.word	0x0800c941
 800ab3c:	0800c9c7 	.word	0x0800c9c7
 800ab40:	0800c9d8 	.word	0x0800c9d8
 800ab44:	1e6f      	subs	r7, r5, #1
 800ab46:	f1b9 0f00 	cmp.w	r9, #0
 800ab4a:	d130      	bne.n	800abae <__gethex+0x326>
 800ab4c:	b127      	cbz	r7, 800ab58 <__gethex+0x2d0>
 800ab4e:	4639      	mov	r1, r7
 800ab50:	4620      	mov	r0, r4
 800ab52:	f001 f8be 	bl	800bcd2 <__any_on>
 800ab56:	4681      	mov	r9, r0
 800ab58:	117a      	asrs	r2, r7, #5
 800ab5a:	2301      	movs	r3, #1
 800ab5c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ab60:	f007 071f 	and.w	r7, r7, #31
 800ab64:	40bb      	lsls	r3, r7
 800ab66:	4213      	tst	r3, r2
 800ab68:	4629      	mov	r1, r5
 800ab6a:	4620      	mov	r0, r4
 800ab6c:	bf18      	it	ne
 800ab6e:	f049 0902 	orrne.w	r9, r9, #2
 800ab72:	f7ff fe21 	bl	800a7b8 <rshift>
 800ab76:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ab7a:	1b76      	subs	r6, r6, r5
 800ab7c:	2502      	movs	r5, #2
 800ab7e:	f1b9 0f00 	cmp.w	r9, #0
 800ab82:	d047      	beq.n	800ac14 <__gethex+0x38c>
 800ab84:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ab88:	2b02      	cmp	r3, #2
 800ab8a:	d015      	beq.n	800abb8 <__gethex+0x330>
 800ab8c:	2b03      	cmp	r3, #3
 800ab8e:	d017      	beq.n	800abc0 <__gethex+0x338>
 800ab90:	2b01      	cmp	r3, #1
 800ab92:	d109      	bne.n	800aba8 <__gethex+0x320>
 800ab94:	f019 0f02 	tst.w	r9, #2
 800ab98:	d006      	beq.n	800aba8 <__gethex+0x320>
 800ab9a:	f8da 3000 	ldr.w	r3, [sl]
 800ab9e:	ea49 0903 	orr.w	r9, r9, r3
 800aba2:	f019 0f01 	tst.w	r9, #1
 800aba6:	d10e      	bne.n	800abc6 <__gethex+0x33e>
 800aba8:	f045 0510 	orr.w	r5, r5, #16
 800abac:	e032      	b.n	800ac14 <__gethex+0x38c>
 800abae:	f04f 0901 	mov.w	r9, #1
 800abb2:	e7d1      	b.n	800ab58 <__gethex+0x2d0>
 800abb4:	2501      	movs	r5, #1
 800abb6:	e7e2      	b.n	800ab7e <__gethex+0x2f6>
 800abb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800abba:	f1c3 0301 	rsb	r3, r3, #1
 800abbe:	930f      	str	r3, [sp, #60]	@ 0x3c
 800abc0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d0f0      	beq.n	800aba8 <__gethex+0x320>
 800abc6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800abca:	f104 0314 	add.w	r3, r4, #20
 800abce:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800abd2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800abd6:	f04f 0c00 	mov.w	ip, #0
 800abda:	4618      	mov	r0, r3
 800abdc:	f853 2b04 	ldr.w	r2, [r3], #4
 800abe0:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800abe4:	d01b      	beq.n	800ac1e <__gethex+0x396>
 800abe6:	3201      	adds	r2, #1
 800abe8:	6002      	str	r2, [r0, #0]
 800abea:	2d02      	cmp	r5, #2
 800abec:	f104 0314 	add.w	r3, r4, #20
 800abf0:	d13c      	bne.n	800ac6c <__gethex+0x3e4>
 800abf2:	f8d8 2000 	ldr.w	r2, [r8]
 800abf6:	3a01      	subs	r2, #1
 800abf8:	42b2      	cmp	r2, r6
 800abfa:	d109      	bne.n	800ac10 <__gethex+0x388>
 800abfc:	1171      	asrs	r1, r6, #5
 800abfe:	2201      	movs	r2, #1
 800ac00:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ac04:	f006 061f 	and.w	r6, r6, #31
 800ac08:	fa02 f606 	lsl.w	r6, r2, r6
 800ac0c:	421e      	tst	r6, r3
 800ac0e:	d13a      	bne.n	800ac86 <__gethex+0x3fe>
 800ac10:	f045 0520 	orr.w	r5, r5, #32
 800ac14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac16:	601c      	str	r4, [r3, #0]
 800ac18:	9b02      	ldr	r3, [sp, #8]
 800ac1a:	601f      	str	r7, [r3, #0]
 800ac1c:	e6b0      	b.n	800a980 <__gethex+0xf8>
 800ac1e:	4299      	cmp	r1, r3
 800ac20:	f843 cc04 	str.w	ip, [r3, #-4]
 800ac24:	d8d9      	bhi.n	800abda <__gethex+0x352>
 800ac26:	68a3      	ldr	r3, [r4, #8]
 800ac28:	459b      	cmp	fp, r3
 800ac2a:	db17      	blt.n	800ac5c <__gethex+0x3d4>
 800ac2c:	6861      	ldr	r1, [r4, #4]
 800ac2e:	9801      	ldr	r0, [sp, #4]
 800ac30:	3101      	adds	r1, #1
 800ac32:	f000 fbc5 	bl	800b3c0 <_Balloc>
 800ac36:	4681      	mov	r9, r0
 800ac38:	b918      	cbnz	r0, 800ac42 <__gethex+0x3ba>
 800ac3a:	4b1a      	ldr	r3, [pc, #104]	@ (800aca4 <__gethex+0x41c>)
 800ac3c:	4602      	mov	r2, r0
 800ac3e:	2184      	movs	r1, #132	@ 0x84
 800ac40:	e6c5      	b.n	800a9ce <__gethex+0x146>
 800ac42:	6922      	ldr	r2, [r4, #16]
 800ac44:	3202      	adds	r2, #2
 800ac46:	f104 010c 	add.w	r1, r4, #12
 800ac4a:	0092      	lsls	r2, r2, #2
 800ac4c:	300c      	adds	r0, #12
 800ac4e:	f7fe ff3b 	bl	8009ac8 <memcpy>
 800ac52:	4621      	mov	r1, r4
 800ac54:	9801      	ldr	r0, [sp, #4]
 800ac56:	f000 fbf3 	bl	800b440 <_Bfree>
 800ac5a:	464c      	mov	r4, r9
 800ac5c:	6923      	ldr	r3, [r4, #16]
 800ac5e:	1c5a      	adds	r2, r3, #1
 800ac60:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ac64:	6122      	str	r2, [r4, #16]
 800ac66:	2201      	movs	r2, #1
 800ac68:	615a      	str	r2, [r3, #20]
 800ac6a:	e7be      	b.n	800abea <__gethex+0x362>
 800ac6c:	6922      	ldr	r2, [r4, #16]
 800ac6e:	455a      	cmp	r2, fp
 800ac70:	dd0b      	ble.n	800ac8a <__gethex+0x402>
 800ac72:	2101      	movs	r1, #1
 800ac74:	4620      	mov	r0, r4
 800ac76:	f7ff fd9f 	bl	800a7b8 <rshift>
 800ac7a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ac7e:	3701      	adds	r7, #1
 800ac80:	42bb      	cmp	r3, r7
 800ac82:	f6ff aee0 	blt.w	800aa46 <__gethex+0x1be>
 800ac86:	2501      	movs	r5, #1
 800ac88:	e7c2      	b.n	800ac10 <__gethex+0x388>
 800ac8a:	f016 061f 	ands.w	r6, r6, #31
 800ac8e:	d0fa      	beq.n	800ac86 <__gethex+0x3fe>
 800ac90:	4453      	add	r3, sl
 800ac92:	f1c6 0620 	rsb	r6, r6, #32
 800ac96:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ac9a:	f000 fc83 	bl	800b5a4 <__hi0bits>
 800ac9e:	42b0      	cmp	r0, r6
 800aca0:	dbe7      	blt.n	800ac72 <__gethex+0x3ea>
 800aca2:	e7f0      	b.n	800ac86 <__gethex+0x3fe>
 800aca4:	0800c9c7 	.word	0x0800c9c7

0800aca8 <L_shift>:
 800aca8:	f1c2 0208 	rsb	r2, r2, #8
 800acac:	0092      	lsls	r2, r2, #2
 800acae:	b570      	push	{r4, r5, r6, lr}
 800acb0:	f1c2 0620 	rsb	r6, r2, #32
 800acb4:	6843      	ldr	r3, [r0, #4]
 800acb6:	6804      	ldr	r4, [r0, #0]
 800acb8:	fa03 f506 	lsl.w	r5, r3, r6
 800acbc:	432c      	orrs	r4, r5
 800acbe:	40d3      	lsrs	r3, r2
 800acc0:	6004      	str	r4, [r0, #0]
 800acc2:	f840 3f04 	str.w	r3, [r0, #4]!
 800acc6:	4288      	cmp	r0, r1
 800acc8:	d3f4      	bcc.n	800acb4 <L_shift+0xc>
 800acca:	bd70      	pop	{r4, r5, r6, pc}

0800accc <__match>:
 800accc:	b530      	push	{r4, r5, lr}
 800acce:	6803      	ldr	r3, [r0, #0]
 800acd0:	3301      	adds	r3, #1
 800acd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800acd6:	b914      	cbnz	r4, 800acde <__match+0x12>
 800acd8:	6003      	str	r3, [r0, #0]
 800acda:	2001      	movs	r0, #1
 800acdc:	bd30      	pop	{r4, r5, pc}
 800acde:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ace2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ace6:	2d19      	cmp	r5, #25
 800ace8:	bf98      	it	ls
 800acea:	3220      	addls	r2, #32
 800acec:	42a2      	cmp	r2, r4
 800acee:	d0f0      	beq.n	800acd2 <__match+0x6>
 800acf0:	2000      	movs	r0, #0
 800acf2:	e7f3      	b.n	800acdc <__match+0x10>

0800acf4 <__hexnan>:
 800acf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acf8:	680b      	ldr	r3, [r1, #0]
 800acfa:	6801      	ldr	r1, [r0, #0]
 800acfc:	115e      	asrs	r6, r3, #5
 800acfe:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ad02:	f013 031f 	ands.w	r3, r3, #31
 800ad06:	b087      	sub	sp, #28
 800ad08:	bf18      	it	ne
 800ad0a:	3604      	addne	r6, #4
 800ad0c:	2500      	movs	r5, #0
 800ad0e:	1f37      	subs	r7, r6, #4
 800ad10:	4682      	mov	sl, r0
 800ad12:	4690      	mov	r8, r2
 800ad14:	9301      	str	r3, [sp, #4]
 800ad16:	f846 5c04 	str.w	r5, [r6, #-4]
 800ad1a:	46b9      	mov	r9, r7
 800ad1c:	463c      	mov	r4, r7
 800ad1e:	9502      	str	r5, [sp, #8]
 800ad20:	46ab      	mov	fp, r5
 800ad22:	784a      	ldrb	r2, [r1, #1]
 800ad24:	1c4b      	adds	r3, r1, #1
 800ad26:	9303      	str	r3, [sp, #12]
 800ad28:	b342      	cbz	r2, 800ad7c <__hexnan+0x88>
 800ad2a:	4610      	mov	r0, r2
 800ad2c:	9105      	str	r1, [sp, #20]
 800ad2e:	9204      	str	r2, [sp, #16]
 800ad30:	f7ff fd94 	bl	800a85c <__hexdig_fun>
 800ad34:	2800      	cmp	r0, #0
 800ad36:	d151      	bne.n	800addc <__hexnan+0xe8>
 800ad38:	9a04      	ldr	r2, [sp, #16]
 800ad3a:	9905      	ldr	r1, [sp, #20]
 800ad3c:	2a20      	cmp	r2, #32
 800ad3e:	d818      	bhi.n	800ad72 <__hexnan+0x7e>
 800ad40:	9b02      	ldr	r3, [sp, #8]
 800ad42:	459b      	cmp	fp, r3
 800ad44:	dd13      	ble.n	800ad6e <__hexnan+0x7a>
 800ad46:	454c      	cmp	r4, r9
 800ad48:	d206      	bcs.n	800ad58 <__hexnan+0x64>
 800ad4a:	2d07      	cmp	r5, #7
 800ad4c:	dc04      	bgt.n	800ad58 <__hexnan+0x64>
 800ad4e:	462a      	mov	r2, r5
 800ad50:	4649      	mov	r1, r9
 800ad52:	4620      	mov	r0, r4
 800ad54:	f7ff ffa8 	bl	800aca8 <L_shift>
 800ad58:	4544      	cmp	r4, r8
 800ad5a:	d952      	bls.n	800ae02 <__hexnan+0x10e>
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	f1a4 0904 	sub.w	r9, r4, #4
 800ad62:	f844 3c04 	str.w	r3, [r4, #-4]
 800ad66:	f8cd b008 	str.w	fp, [sp, #8]
 800ad6a:	464c      	mov	r4, r9
 800ad6c:	461d      	mov	r5, r3
 800ad6e:	9903      	ldr	r1, [sp, #12]
 800ad70:	e7d7      	b.n	800ad22 <__hexnan+0x2e>
 800ad72:	2a29      	cmp	r2, #41	@ 0x29
 800ad74:	d157      	bne.n	800ae26 <__hexnan+0x132>
 800ad76:	3102      	adds	r1, #2
 800ad78:	f8ca 1000 	str.w	r1, [sl]
 800ad7c:	f1bb 0f00 	cmp.w	fp, #0
 800ad80:	d051      	beq.n	800ae26 <__hexnan+0x132>
 800ad82:	454c      	cmp	r4, r9
 800ad84:	d206      	bcs.n	800ad94 <__hexnan+0xa0>
 800ad86:	2d07      	cmp	r5, #7
 800ad88:	dc04      	bgt.n	800ad94 <__hexnan+0xa0>
 800ad8a:	462a      	mov	r2, r5
 800ad8c:	4649      	mov	r1, r9
 800ad8e:	4620      	mov	r0, r4
 800ad90:	f7ff ff8a 	bl	800aca8 <L_shift>
 800ad94:	4544      	cmp	r4, r8
 800ad96:	d936      	bls.n	800ae06 <__hexnan+0x112>
 800ad98:	f1a8 0204 	sub.w	r2, r8, #4
 800ad9c:	4623      	mov	r3, r4
 800ad9e:	f853 1b04 	ldr.w	r1, [r3], #4
 800ada2:	f842 1f04 	str.w	r1, [r2, #4]!
 800ada6:	429f      	cmp	r7, r3
 800ada8:	d2f9      	bcs.n	800ad9e <__hexnan+0xaa>
 800adaa:	1b3b      	subs	r3, r7, r4
 800adac:	f023 0303 	bic.w	r3, r3, #3
 800adb0:	3304      	adds	r3, #4
 800adb2:	3401      	adds	r4, #1
 800adb4:	3e03      	subs	r6, #3
 800adb6:	42b4      	cmp	r4, r6
 800adb8:	bf88      	it	hi
 800adba:	2304      	movhi	r3, #4
 800adbc:	4443      	add	r3, r8
 800adbe:	2200      	movs	r2, #0
 800adc0:	f843 2b04 	str.w	r2, [r3], #4
 800adc4:	429f      	cmp	r7, r3
 800adc6:	d2fb      	bcs.n	800adc0 <__hexnan+0xcc>
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	b91b      	cbnz	r3, 800add4 <__hexnan+0xe0>
 800adcc:	4547      	cmp	r7, r8
 800adce:	d128      	bne.n	800ae22 <__hexnan+0x12e>
 800add0:	2301      	movs	r3, #1
 800add2:	603b      	str	r3, [r7, #0]
 800add4:	2005      	movs	r0, #5
 800add6:	b007      	add	sp, #28
 800add8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800addc:	3501      	adds	r5, #1
 800adde:	2d08      	cmp	r5, #8
 800ade0:	f10b 0b01 	add.w	fp, fp, #1
 800ade4:	dd06      	ble.n	800adf4 <__hexnan+0x100>
 800ade6:	4544      	cmp	r4, r8
 800ade8:	d9c1      	bls.n	800ad6e <__hexnan+0x7a>
 800adea:	2300      	movs	r3, #0
 800adec:	f844 3c04 	str.w	r3, [r4, #-4]
 800adf0:	2501      	movs	r5, #1
 800adf2:	3c04      	subs	r4, #4
 800adf4:	6822      	ldr	r2, [r4, #0]
 800adf6:	f000 000f 	and.w	r0, r0, #15
 800adfa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800adfe:	6020      	str	r0, [r4, #0]
 800ae00:	e7b5      	b.n	800ad6e <__hexnan+0x7a>
 800ae02:	2508      	movs	r5, #8
 800ae04:	e7b3      	b.n	800ad6e <__hexnan+0x7a>
 800ae06:	9b01      	ldr	r3, [sp, #4]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d0dd      	beq.n	800adc8 <__hexnan+0xd4>
 800ae0c:	f1c3 0320 	rsb	r3, r3, #32
 800ae10:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ae14:	40da      	lsrs	r2, r3
 800ae16:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ae1a:	4013      	ands	r3, r2
 800ae1c:	f846 3c04 	str.w	r3, [r6, #-4]
 800ae20:	e7d2      	b.n	800adc8 <__hexnan+0xd4>
 800ae22:	3f04      	subs	r7, #4
 800ae24:	e7d0      	b.n	800adc8 <__hexnan+0xd4>
 800ae26:	2004      	movs	r0, #4
 800ae28:	e7d5      	b.n	800add6 <__hexnan+0xe2>

0800ae2a <__ssputs_r>:
 800ae2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae2e:	688e      	ldr	r6, [r1, #8]
 800ae30:	461f      	mov	r7, r3
 800ae32:	42be      	cmp	r6, r7
 800ae34:	680b      	ldr	r3, [r1, #0]
 800ae36:	4682      	mov	sl, r0
 800ae38:	460c      	mov	r4, r1
 800ae3a:	4690      	mov	r8, r2
 800ae3c:	d82d      	bhi.n	800ae9a <__ssputs_r+0x70>
 800ae3e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ae42:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ae46:	d026      	beq.n	800ae96 <__ssputs_r+0x6c>
 800ae48:	6965      	ldr	r5, [r4, #20]
 800ae4a:	6909      	ldr	r1, [r1, #16]
 800ae4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ae50:	eba3 0901 	sub.w	r9, r3, r1
 800ae54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ae58:	1c7b      	adds	r3, r7, #1
 800ae5a:	444b      	add	r3, r9
 800ae5c:	106d      	asrs	r5, r5, #1
 800ae5e:	429d      	cmp	r5, r3
 800ae60:	bf38      	it	cc
 800ae62:	461d      	movcc	r5, r3
 800ae64:	0553      	lsls	r3, r2, #21
 800ae66:	d527      	bpl.n	800aeb8 <__ssputs_r+0x8e>
 800ae68:	4629      	mov	r1, r5
 800ae6a:	f000 f95f 	bl	800b12c <_malloc_r>
 800ae6e:	4606      	mov	r6, r0
 800ae70:	b360      	cbz	r0, 800aecc <__ssputs_r+0xa2>
 800ae72:	6921      	ldr	r1, [r4, #16]
 800ae74:	464a      	mov	r2, r9
 800ae76:	f7fe fe27 	bl	8009ac8 <memcpy>
 800ae7a:	89a3      	ldrh	r3, [r4, #12]
 800ae7c:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ae80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae84:	81a3      	strh	r3, [r4, #12]
 800ae86:	6126      	str	r6, [r4, #16]
 800ae88:	6165      	str	r5, [r4, #20]
 800ae8a:	444e      	add	r6, r9
 800ae8c:	eba5 0509 	sub.w	r5, r5, r9
 800ae90:	6026      	str	r6, [r4, #0]
 800ae92:	60a5      	str	r5, [r4, #8]
 800ae94:	463e      	mov	r6, r7
 800ae96:	42be      	cmp	r6, r7
 800ae98:	d900      	bls.n	800ae9c <__ssputs_r+0x72>
 800ae9a:	463e      	mov	r6, r7
 800ae9c:	6820      	ldr	r0, [r4, #0]
 800ae9e:	4632      	mov	r2, r6
 800aea0:	4641      	mov	r1, r8
 800aea2:	f000 ffb5 	bl	800be10 <memmove>
 800aea6:	68a3      	ldr	r3, [r4, #8]
 800aea8:	1b9b      	subs	r3, r3, r6
 800aeaa:	60a3      	str	r3, [r4, #8]
 800aeac:	6823      	ldr	r3, [r4, #0]
 800aeae:	4433      	add	r3, r6
 800aeb0:	6023      	str	r3, [r4, #0]
 800aeb2:	2000      	movs	r0, #0
 800aeb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aeb8:	462a      	mov	r2, r5
 800aeba:	f000 ff6e 	bl	800bd9a <_realloc_r>
 800aebe:	4606      	mov	r6, r0
 800aec0:	2800      	cmp	r0, #0
 800aec2:	d1e0      	bne.n	800ae86 <__ssputs_r+0x5c>
 800aec4:	6921      	ldr	r1, [r4, #16]
 800aec6:	4650      	mov	r0, sl
 800aec8:	f001 f844 	bl	800bf54 <_free_r>
 800aecc:	230c      	movs	r3, #12
 800aece:	f8ca 3000 	str.w	r3, [sl]
 800aed2:	89a3      	ldrh	r3, [r4, #12]
 800aed4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aed8:	81a3      	strh	r3, [r4, #12]
 800aeda:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aede:	e7e9      	b.n	800aeb4 <__ssputs_r+0x8a>

0800aee0 <_svfiprintf_r>:
 800aee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aee4:	4698      	mov	r8, r3
 800aee6:	898b      	ldrh	r3, [r1, #12]
 800aee8:	061b      	lsls	r3, r3, #24
 800aeea:	b09d      	sub	sp, #116	@ 0x74
 800aeec:	4607      	mov	r7, r0
 800aeee:	460d      	mov	r5, r1
 800aef0:	4614      	mov	r4, r2
 800aef2:	d510      	bpl.n	800af16 <_svfiprintf_r+0x36>
 800aef4:	690b      	ldr	r3, [r1, #16]
 800aef6:	b973      	cbnz	r3, 800af16 <_svfiprintf_r+0x36>
 800aef8:	2140      	movs	r1, #64	@ 0x40
 800aefa:	f000 f917 	bl	800b12c <_malloc_r>
 800aefe:	6028      	str	r0, [r5, #0]
 800af00:	6128      	str	r0, [r5, #16]
 800af02:	b930      	cbnz	r0, 800af12 <_svfiprintf_r+0x32>
 800af04:	230c      	movs	r3, #12
 800af06:	603b      	str	r3, [r7, #0]
 800af08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800af0c:	b01d      	add	sp, #116	@ 0x74
 800af0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af12:	2340      	movs	r3, #64	@ 0x40
 800af14:	616b      	str	r3, [r5, #20]
 800af16:	2300      	movs	r3, #0
 800af18:	9309      	str	r3, [sp, #36]	@ 0x24
 800af1a:	2320      	movs	r3, #32
 800af1c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800af20:	f8cd 800c 	str.w	r8, [sp, #12]
 800af24:	2330      	movs	r3, #48	@ 0x30
 800af26:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b0c4 <_svfiprintf_r+0x1e4>
 800af2a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800af2e:	f04f 0901 	mov.w	r9, #1
 800af32:	4623      	mov	r3, r4
 800af34:	469a      	mov	sl, r3
 800af36:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af3a:	b10a      	cbz	r2, 800af40 <_svfiprintf_r+0x60>
 800af3c:	2a25      	cmp	r2, #37	@ 0x25
 800af3e:	d1f9      	bne.n	800af34 <_svfiprintf_r+0x54>
 800af40:	ebba 0b04 	subs.w	fp, sl, r4
 800af44:	d00b      	beq.n	800af5e <_svfiprintf_r+0x7e>
 800af46:	465b      	mov	r3, fp
 800af48:	4622      	mov	r2, r4
 800af4a:	4629      	mov	r1, r5
 800af4c:	4638      	mov	r0, r7
 800af4e:	f7ff ff6c 	bl	800ae2a <__ssputs_r>
 800af52:	3001      	adds	r0, #1
 800af54:	f000 80a7 	beq.w	800b0a6 <_svfiprintf_r+0x1c6>
 800af58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af5a:	445a      	add	r2, fp
 800af5c:	9209      	str	r2, [sp, #36]	@ 0x24
 800af5e:	f89a 3000 	ldrb.w	r3, [sl]
 800af62:	2b00      	cmp	r3, #0
 800af64:	f000 809f 	beq.w	800b0a6 <_svfiprintf_r+0x1c6>
 800af68:	2300      	movs	r3, #0
 800af6a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800af6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af72:	f10a 0a01 	add.w	sl, sl, #1
 800af76:	9304      	str	r3, [sp, #16]
 800af78:	9307      	str	r3, [sp, #28]
 800af7a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800af7e:	931a      	str	r3, [sp, #104]	@ 0x68
 800af80:	4654      	mov	r4, sl
 800af82:	2205      	movs	r2, #5
 800af84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af88:	484e      	ldr	r0, [pc, #312]	@ (800b0c4 <_svfiprintf_r+0x1e4>)
 800af8a:	f7f5 f921 	bl	80001d0 <memchr>
 800af8e:	9a04      	ldr	r2, [sp, #16]
 800af90:	b9d8      	cbnz	r0, 800afca <_svfiprintf_r+0xea>
 800af92:	06d0      	lsls	r0, r2, #27
 800af94:	bf44      	itt	mi
 800af96:	2320      	movmi	r3, #32
 800af98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800af9c:	0711      	lsls	r1, r2, #28
 800af9e:	bf44      	itt	mi
 800afa0:	232b      	movmi	r3, #43	@ 0x2b
 800afa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800afa6:	f89a 3000 	ldrb.w	r3, [sl]
 800afaa:	2b2a      	cmp	r3, #42	@ 0x2a
 800afac:	d015      	beq.n	800afda <_svfiprintf_r+0xfa>
 800afae:	9a07      	ldr	r2, [sp, #28]
 800afb0:	4654      	mov	r4, sl
 800afb2:	2000      	movs	r0, #0
 800afb4:	f04f 0c0a 	mov.w	ip, #10
 800afb8:	4621      	mov	r1, r4
 800afba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800afbe:	3b30      	subs	r3, #48	@ 0x30
 800afc0:	2b09      	cmp	r3, #9
 800afc2:	d94b      	bls.n	800b05c <_svfiprintf_r+0x17c>
 800afc4:	b1b0      	cbz	r0, 800aff4 <_svfiprintf_r+0x114>
 800afc6:	9207      	str	r2, [sp, #28]
 800afc8:	e014      	b.n	800aff4 <_svfiprintf_r+0x114>
 800afca:	eba0 0308 	sub.w	r3, r0, r8
 800afce:	fa09 f303 	lsl.w	r3, r9, r3
 800afd2:	4313      	orrs	r3, r2
 800afd4:	9304      	str	r3, [sp, #16]
 800afd6:	46a2      	mov	sl, r4
 800afd8:	e7d2      	b.n	800af80 <_svfiprintf_r+0xa0>
 800afda:	9b03      	ldr	r3, [sp, #12]
 800afdc:	1d19      	adds	r1, r3, #4
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	9103      	str	r1, [sp, #12]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	bfbb      	ittet	lt
 800afe6:	425b      	neglt	r3, r3
 800afe8:	f042 0202 	orrlt.w	r2, r2, #2
 800afec:	9307      	strge	r3, [sp, #28]
 800afee:	9307      	strlt	r3, [sp, #28]
 800aff0:	bfb8      	it	lt
 800aff2:	9204      	strlt	r2, [sp, #16]
 800aff4:	7823      	ldrb	r3, [r4, #0]
 800aff6:	2b2e      	cmp	r3, #46	@ 0x2e
 800aff8:	d10a      	bne.n	800b010 <_svfiprintf_r+0x130>
 800affa:	7863      	ldrb	r3, [r4, #1]
 800affc:	2b2a      	cmp	r3, #42	@ 0x2a
 800affe:	d132      	bne.n	800b066 <_svfiprintf_r+0x186>
 800b000:	9b03      	ldr	r3, [sp, #12]
 800b002:	1d1a      	adds	r2, r3, #4
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	9203      	str	r2, [sp, #12]
 800b008:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b00c:	3402      	adds	r4, #2
 800b00e:	9305      	str	r3, [sp, #20]
 800b010:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b0d4 <_svfiprintf_r+0x1f4>
 800b014:	7821      	ldrb	r1, [r4, #0]
 800b016:	2203      	movs	r2, #3
 800b018:	4650      	mov	r0, sl
 800b01a:	f7f5 f8d9 	bl	80001d0 <memchr>
 800b01e:	b138      	cbz	r0, 800b030 <_svfiprintf_r+0x150>
 800b020:	9b04      	ldr	r3, [sp, #16]
 800b022:	eba0 000a 	sub.w	r0, r0, sl
 800b026:	2240      	movs	r2, #64	@ 0x40
 800b028:	4082      	lsls	r2, r0
 800b02a:	4313      	orrs	r3, r2
 800b02c:	3401      	adds	r4, #1
 800b02e:	9304      	str	r3, [sp, #16]
 800b030:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b034:	4824      	ldr	r0, [pc, #144]	@ (800b0c8 <_svfiprintf_r+0x1e8>)
 800b036:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b03a:	2206      	movs	r2, #6
 800b03c:	f7f5 f8c8 	bl	80001d0 <memchr>
 800b040:	2800      	cmp	r0, #0
 800b042:	d036      	beq.n	800b0b2 <_svfiprintf_r+0x1d2>
 800b044:	4b21      	ldr	r3, [pc, #132]	@ (800b0cc <_svfiprintf_r+0x1ec>)
 800b046:	bb1b      	cbnz	r3, 800b090 <_svfiprintf_r+0x1b0>
 800b048:	9b03      	ldr	r3, [sp, #12]
 800b04a:	3307      	adds	r3, #7
 800b04c:	f023 0307 	bic.w	r3, r3, #7
 800b050:	3308      	adds	r3, #8
 800b052:	9303      	str	r3, [sp, #12]
 800b054:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b056:	4433      	add	r3, r6
 800b058:	9309      	str	r3, [sp, #36]	@ 0x24
 800b05a:	e76a      	b.n	800af32 <_svfiprintf_r+0x52>
 800b05c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b060:	460c      	mov	r4, r1
 800b062:	2001      	movs	r0, #1
 800b064:	e7a8      	b.n	800afb8 <_svfiprintf_r+0xd8>
 800b066:	2300      	movs	r3, #0
 800b068:	3401      	adds	r4, #1
 800b06a:	9305      	str	r3, [sp, #20]
 800b06c:	4619      	mov	r1, r3
 800b06e:	f04f 0c0a 	mov.w	ip, #10
 800b072:	4620      	mov	r0, r4
 800b074:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b078:	3a30      	subs	r2, #48	@ 0x30
 800b07a:	2a09      	cmp	r2, #9
 800b07c:	d903      	bls.n	800b086 <_svfiprintf_r+0x1a6>
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d0c6      	beq.n	800b010 <_svfiprintf_r+0x130>
 800b082:	9105      	str	r1, [sp, #20]
 800b084:	e7c4      	b.n	800b010 <_svfiprintf_r+0x130>
 800b086:	fb0c 2101 	mla	r1, ip, r1, r2
 800b08a:	4604      	mov	r4, r0
 800b08c:	2301      	movs	r3, #1
 800b08e:	e7f0      	b.n	800b072 <_svfiprintf_r+0x192>
 800b090:	ab03      	add	r3, sp, #12
 800b092:	9300      	str	r3, [sp, #0]
 800b094:	462a      	mov	r2, r5
 800b096:	4b0e      	ldr	r3, [pc, #56]	@ (800b0d0 <_svfiprintf_r+0x1f0>)
 800b098:	a904      	add	r1, sp, #16
 800b09a:	4638      	mov	r0, r7
 800b09c:	f7fc ff9c 	bl	8007fd8 <_printf_float>
 800b0a0:	1c42      	adds	r2, r0, #1
 800b0a2:	4606      	mov	r6, r0
 800b0a4:	d1d6      	bne.n	800b054 <_svfiprintf_r+0x174>
 800b0a6:	89ab      	ldrh	r3, [r5, #12]
 800b0a8:	065b      	lsls	r3, r3, #25
 800b0aa:	f53f af2d 	bmi.w	800af08 <_svfiprintf_r+0x28>
 800b0ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b0b0:	e72c      	b.n	800af0c <_svfiprintf_r+0x2c>
 800b0b2:	ab03      	add	r3, sp, #12
 800b0b4:	9300      	str	r3, [sp, #0]
 800b0b6:	462a      	mov	r2, r5
 800b0b8:	4b05      	ldr	r3, [pc, #20]	@ (800b0d0 <_svfiprintf_r+0x1f0>)
 800b0ba:	a904      	add	r1, sp, #16
 800b0bc:	4638      	mov	r0, r7
 800b0be:	f7fd fa23 	bl	8008508 <_printf_i>
 800b0c2:	e7ed      	b.n	800b0a0 <_svfiprintf_r+0x1c0>
 800b0c4:	0800ca38 	.word	0x0800ca38
 800b0c8:	0800ca42 	.word	0x0800ca42
 800b0cc:	08007fd9 	.word	0x08007fd9
 800b0d0:	0800ae2b 	.word	0x0800ae2b
 800b0d4:	0800ca3e 	.word	0x0800ca3e

0800b0d8 <malloc>:
 800b0d8:	4b02      	ldr	r3, [pc, #8]	@ (800b0e4 <malloc+0xc>)
 800b0da:	4601      	mov	r1, r0
 800b0dc:	6818      	ldr	r0, [r3, #0]
 800b0de:	f000 b825 	b.w	800b12c <_malloc_r>
 800b0e2:	bf00      	nop
 800b0e4:	20000188 	.word	0x20000188

0800b0e8 <sbrk_aligned>:
 800b0e8:	b570      	push	{r4, r5, r6, lr}
 800b0ea:	4e0f      	ldr	r6, [pc, #60]	@ (800b128 <sbrk_aligned+0x40>)
 800b0ec:	460c      	mov	r4, r1
 800b0ee:	6831      	ldr	r1, [r6, #0]
 800b0f0:	4605      	mov	r5, r0
 800b0f2:	b911      	cbnz	r1, 800b0fa <sbrk_aligned+0x12>
 800b0f4:	f000 feca 	bl	800be8c <_sbrk_r>
 800b0f8:	6030      	str	r0, [r6, #0]
 800b0fa:	4621      	mov	r1, r4
 800b0fc:	4628      	mov	r0, r5
 800b0fe:	f000 fec5 	bl	800be8c <_sbrk_r>
 800b102:	1c43      	adds	r3, r0, #1
 800b104:	d103      	bne.n	800b10e <sbrk_aligned+0x26>
 800b106:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800b10a:	4620      	mov	r0, r4
 800b10c:	bd70      	pop	{r4, r5, r6, pc}
 800b10e:	1cc4      	adds	r4, r0, #3
 800b110:	f024 0403 	bic.w	r4, r4, #3
 800b114:	42a0      	cmp	r0, r4
 800b116:	d0f8      	beq.n	800b10a <sbrk_aligned+0x22>
 800b118:	1a21      	subs	r1, r4, r0
 800b11a:	4628      	mov	r0, r5
 800b11c:	f000 feb6 	bl	800be8c <_sbrk_r>
 800b120:	3001      	adds	r0, #1
 800b122:	d1f2      	bne.n	800b10a <sbrk_aligned+0x22>
 800b124:	e7ef      	b.n	800b106 <sbrk_aligned+0x1e>
 800b126:	bf00      	nop
 800b128:	200006b4 	.word	0x200006b4

0800b12c <_malloc_r>:
 800b12c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b130:	1ccd      	adds	r5, r1, #3
 800b132:	f025 0503 	bic.w	r5, r5, #3
 800b136:	3508      	adds	r5, #8
 800b138:	2d0c      	cmp	r5, #12
 800b13a:	bf38      	it	cc
 800b13c:	250c      	movcc	r5, #12
 800b13e:	2d00      	cmp	r5, #0
 800b140:	4606      	mov	r6, r0
 800b142:	db01      	blt.n	800b148 <_malloc_r+0x1c>
 800b144:	42a9      	cmp	r1, r5
 800b146:	d904      	bls.n	800b152 <_malloc_r+0x26>
 800b148:	230c      	movs	r3, #12
 800b14a:	6033      	str	r3, [r6, #0]
 800b14c:	2000      	movs	r0, #0
 800b14e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b152:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b228 <_malloc_r+0xfc>
 800b156:	f000 f927 	bl	800b3a8 <__malloc_lock>
 800b15a:	f8d8 3000 	ldr.w	r3, [r8]
 800b15e:	461c      	mov	r4, r3
 800b160:	bb44      	cbnz	r4, 800b1b4 <_malloc_r+0x88>
 800b162:	4629      	mov	r1, r5
 800b164:	4630      	mov	r0, r6
 800b166:	f7ff ffbf 	bl	800b0e8 <sbrk_aligned>
 800b16a:	1c43      	adds	r3, r0, #1
 800b16c:	4604      	mov	r4, r0
 800b16e:	d158      	bne.n	800b222 <_malloc_r+0xf6>
 800b170:	f8d8 4000 	ldr.w	r4, [r8]
 800b174:	4627      	mov	r7, r4
 800b176:	2f00      	cmp	r7, #0
 800b178:	d143      	bne.n	800b202 <_malloc_r+0xd6>
 800b17a:	2c00      	cmp	r4, #0
 800b17c:	d04b      	beq.n	800b216 <_malloc_r+0xea>
 800b17e:	6823      	ldr	r3, [r4, #0]
 800b180:	4639      	mov	r1, r7
 800b182:	4630      	mov	r0, r6
 800b184:	eb04 0903 	add.w	r9, r4, r3
 800b188:	f000 fe80 	bl	800be8c <_sbrk_r>
 800b18c:	4581      	cmp	r9, r0
 800b18e:	d142      	bne.n	800b216 <_malloc_r+0xea>
 800b190:	6821      	ldr	r1, [r4, #0]
 800b192:	1a6d      	subs	r5, r5, r1
 800b194:	4629      	mov	r1, r5
 800b196:	4630      	mov	r0, r6
 800b198:	f7ff ffa6 	bl	800b0e8 <sbrk_aligned>
 800b19c:	3001      	adds	r0, #1
 800b19e:	d03a      	beq.n	800b216 <_malloc_r+0xea>
 800b1a0:	6823      	ldr	r3, [r4, #0]
 800b1a2:	442b      	add	r3, r5
 800b1a4:	6023      	str	r3, [r4, #0]
 800b1a6:	f8d8 3000 	ldr.w	r3, [r8]
 800b1aa:	685a      	ldr	r2, [r3, #4]
 800b1ac:	bb62      	cbnz	r2, 800b208 <_malloc_r+0xdc>
 800b1ae:	f8c8 7000 	str.w	r7, [r8]
 800b1b2:	e00f      	b.n	800b1d4 <_malloc_r+0xa8>
 800b1b4:	6822      	ldr	r2, [r4, #0]
 800b1b6:	1b52      	subs	r2, r2, r5
 800b1b8:	d420      	bmi.n	800b1fc <_malloc_r+0xd0>
 800b1ba:	2a0b      	cmp	r2, #11
 800b1bc:	d917      	bls.n	800b1ee <_malloc_r+0xc2>
 800b1be:	1961      	adds	r1, r4, r5
 800b1c0:	42a3      	cmp	r3, r4
 800b1c2:	6025      	str	r5, [r4, #0]
 800b1c4:	bf18      	it	ne
 800b1c6:	6059      	strne	r1, [r3, #4]
 800b1c8:	6863      	ldr	r3, [r4, #4]
 800b1ca:	bf08      	it	eq
 800b1cc:	f8c8 1000 	streq.w	r1, [r8]
 800b1d0:	5162      	str	r2, [r4, r5]
 800b1d2:	604b      	str	r3, [r1, #4]
 800b1d4:	4630      	mov	r0, r6
 800b1d6:	f000 f8ed 	bl	800b3b4 <__malloc_unlock>
 800b1da:	f104 000b 	add.w	r0, r4, #11
 800b1de:	1d23      	adds	r3, r4, #4
 800b1e0:	f020 0007 	bic.w	r0, r0, #7
 800b1e4:	1ac2      	subs	r2, r0, r3
 800b1e6:	bf1c      	itt	ne
 800b1e8:	1a1b      	subne	r3, r3, r0
 800b1ea:	50a3      	strne	r3, [r4, r2]
 800b1ec:	e7af      	b.n	800b14e <_malloc_r+0x22>
 800b1ee:	6862      	ldr	r2, [r4, #4]
 800b1f0:	42a3      	cmp	r3, r4
 800b1f2:	bf0c      	ite	eq
 800b1f4:	f8c8 2000 	streq.w	r2, [r8]
 800b1f8:	605a      	strne	r2, [r3, #4]
 800b1fa:	e7eb      	b.n	800b1d4 <_malloc_r+0xa8>
 800b1fc:	4623      	mov	r3, r4
 800b1fe:	6864      	ldr	r4, [r4, #4]
 800b200:	e7ae      	b.n	800b160 <_malloc_r+0x34>
 800b202:	463c      	mov	r4, r7
 800b204:	687f      	ldr	r7, [r7, #4]
 800b206:	e7b6      	b.n	800b176 <_malloc_r+0x4a>
 800b208:	461a      	mov	r2, r3
 800b20a:	685b      	ldr	r3, [r3, #4]
 800b20c:	42a3      	cmp	r3, r4
 800b20e:	d1fb      	bne.n	800b208 <_malloc_r+0xdc>
 800b210:	2300      	movs	r3, #0
 800b212:	6053      	str	r3, [r2, #4]
 800b214:	e7de      	b.n	800b1d4 <_malloc_r+0xa8>
 800b216:	230c      	movs	r3, #12
 800b218:	6033      	str	r3, [r6, #0]
 800b21a:	4630      	mov	r0, r6
 800b21c:	f000 f8ca 	bl	800b3b4 <__malloc_unlock>
 800b220:	e794      	b.n	800b14c <_malloc_r+0x20>
 800b222:	6005      	str	r5, [r0, #0]
 800b224:	e7d6      	b.n	800b1d4 <_malloc_r+0xa8>
 800b226:	bf00      	nop
 800b228:	200006b8 	.word	0x200006b8

0800b22c <__ascii_mbtowc>:
 800b22c:	b082      	sub	sp, #8
 800b22e:	b901      	cbnz	r1, 800b232 <__ascii_mbtowc+0x6>
 800b230:	a901      	add	r1, sp, #4
 800b232:	b142      	cbz	r2, 800b246 <__ascii_mbtowc+0x1a>
 800b234:	b14b      	cbz	r3, 800b24a <__ascii_mbtowc+0x1e>
 800b236:	7813      	ldrb	r3, [r2, #0]
 800b238:	600b      	str	r3, [r1, #0]
 800b23a:	7812      	ldrb	r2, [r2, #0]
 800b23c:	1e10      	subs	r0, r2, #0
 800b23e:	bf18      	it	ne
 800b240:	2001      	movne	r0, #1
 800b242:	b002      	add	sp, #8
 800b244:	4770      	bx	lr
 800b246:	4610      	mov	r0, r2
 800b248:	e7fb      	b.n	800b242 <__ascii_mbtowc+0x16>
 800b24a:	f06f 0001 	mvn.w	r0, #1
 800b24e:	e7f8      	b.n	800b242 <__ascii_mbtowc+0x16>

0800b250 <__sflush_r>:
 800b250:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b258:	0716      	lsls	r6, r2, #28
 800b25a:	4605      	mov	r5, r0
 800b25c:	460c      	mov	r4, r1
 800b25e:	d454      	bmi.n	800b30a <__sflush_r+0xba>
 800b260:	684b      	ldr	r3, [r1, #4]
 800b262:	2b00      	cmp	r3, #0
 800b264:	dc02      	bgt.n	800b26c <__sflush_r+0x1c>
 800b266:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b268:	2b00      	cmp	r3, #0
 800b26a:	dd48      	ble.n	800b2fe <__sflush_r+0xae>
 800b26c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b26e:	2e00      	cmp	r6, #0
 800b270:	d045      	beq.n	800b2fe <__sflush_r+0xae>
 800b272:	2300      	movs	r3, #0
 800b274:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b278:	682f      	ldr	r7, [r5, #0]
 800b27a:	6a21      	ldr	r1, [r4, #32]
 800b27c:	602b      	str	r3, [r5, #0]
 800b27e:	d030      	beq.n	800b2e2 <__sflush_r+0x92>
 800b280:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b282:	89a3      	ldrh	r3, [r4, #12]
 800b284:	0759      	lsls	r1, r3, #29
 800b286:	d505      	bpl.n	800b294 <__sflush_r+0x44>
 800b288:	6863      	ldr	r3, [r4, #4]
 800b28a:	1ad2      	subs	r2, r2, r3
 800b28c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b28e:	b10b      	cbz	r3, 800b294 <__sflush_r+0x44>
 800b290:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b292:	1ad2      	subs	r2, r2, r3
 800b294:	2300      	movs	r3, #0
 800b296:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b298:	6a21      	ldr	r1, [r4, #32]
 800b29a:	4628      	mov	r0, r5
 800b29c:	47b0      	blx	r6
 800b29e:	1c43      	adds	r3, r0, #1
 800b2a0:	89a3      	ldrh	r3, [r4, #12]
 800b2a2:	d106      	bne.n	800b2b2 <__sflush_r+0x62>
 800b2a4:	6829      	ldr	r1, [r5, #0]
 800b2a6:	291d      	cmp	r1, #29
 800b2a8:	d82b      	bhi.n	800b302 <__sflush_r+0xb2>
 800b2aa:	4a2a      	ldr	r2, [pc, #168]	@ (800b354 <__sflush_r+0x104>)
 800b2ac:	40ca      	lsrs	r2, r1
 800b2ae:	07d6      	lsls	r6, r2, #31
 800b2b0:	d527      	bpl.n	800b302 <__sflush_r+0xb2>
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	6062      	str	r2, [r4, #4]
 800b2b6:	04d9      	lsls	r1, r3, #19
 800b2b8:	6922      	ldr	r2, [r4, #16]
 800b2ba:	6022      	str	r2, [r4, #0]
 800b2bc:	d504      	bpl.n	800b2c8 <__sflush_r+0x78>
 800b2be:	1c42      	adds	r2, r0, #1
 800b2c0:	d101      	bne.n	800b2c6 <__sflush_r+0x76>
 800b2c2:	682b      	ldr	r3, [r5, #0]
 800b2c4:	b903      	cbnz	r3, 800b2c8 <__sflush_r+0x78>
 800b2c6:	6560      	str	r0, [r4, #84]	@ 0x54
 800b2c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b2ca:	602f      	str	r7, [r5, #0]
 800b2cc:	b1b9      	cbz	r1, 800b2fe <__sflush_r+0xae>
 800b2ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b2d2:	4299      	cmp	r1, r3
 800b2d4:	d002      	beq.n	800b2dc <__sflush_r+0x8c>
 800b2d6:	4628      	mov	r0, r5
 800b2d8:	f000 fe3c 	bl	800bf54 <_free_r>
 800b2dc:	2300      	movs	r3, #0
 800b2de:	6363      	str	r3, [r4, #52]	@ 0x34
 800b2e0:	e00d      	b.n	800b2fe <__sflush_r+0xae>
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	4628      	mov	r0, r5
 800b2e6:	47b0      	blx	r6
 800b2e8:	4602      	mov	r2, r0
 800b2ea:	1c50      	adds	r0, r2, #1
 800b2ec:	d1c9      	bne.n	800b282 <__sflush_r+0x32>
 800b2ee:	682b      	ldr	r3, [r5, #0]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d0c6      	beq.n	800b282 <__sflush_r+0x32>
 800b2f4:	2b1d      	cmp	r3, #29
 800b2f6:	d001      	beq.n	800b2fc <__sflush_r+0xac>
 800b2f8:	2b16      	cmp	r3, #22
 800b2fa:	d11e      	bne.n	800b33a <__sflush_r+0xea>
 800b2fc:	602f      	str	r7, [r5, #0]
 800b2fe:	2000      	movs	r0, #0
 800b300:	e022      	b.n	800b348 <__sflush_r+0xf8>
 800b302:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b306:	b21b      	sxth	r3, r3
 800b308:	e01b      	b.n	800b342 <__sflush_r+0xf2>
 800b30a:	690f      	ldr	r7, [r1, #16]
 800b30c:	2f00      	cmp	r7, #0
 800b30e:	d0f6      	beq.n	800b2fe <__sflush_r+0xae>
 800b310:	0793      	lsls	r3, r2, #30
 800b312:	680e      	ldr	r6, [r1, #0]
 800b314:	bf08      	it	eq
 800b316:	694b      	ldreq	r3, [r1, #20]
 800b318:	600f      	str	r7, [r1, #0]
 800b31a:	bf18      	it	ne
 800b31c:	2300      	movne	r3, #0
 800b31e:	eba6 0807 	sub.w	r8, r6, r7
 800b322:	608b      	str	r3, [r1, #8]
 800b324:	f1b8 0f00 	cmp.w	r8, #0
 800b328:	dde9      	ble.n	800b2fe <__sflush_r+0xae>
 800b32a:	6a21      	ldr	r1, [r4, #32]
 800b32c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b32e:	4643      	mov	r3, r8
 800b330:	463a      	mov	r2, r7
 800b332:	4628      	mov	r0, r5
 800b334:	47b0      	blx	r6
 800b336:	2800      	cmp	r0, #0
 800b338:	dc08      	bgt.n	800b34c <__sflush_r+0xfc>
 800b33a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b33e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b342:	81a3      	strh	r3, [r4, #12]
 800b344:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b34c:	4407      	add	r7, r0
 800b34e:	eba8 0800 	sub.w	r8, r8, r0
 800b352:	e7e7      	b.n	800b324 <__sflush_r+0xd4>
 800b354:	20400001 	.word	0x20400001

0800b358 <_fflush_r>:
 800b358:	b538      	push	{r3, r4, r5, lr}
 800b35a:	690b      	ldr	r3, [r1, #16]
 800b35c:	4605      	mov	r5, r0
 800b35e:	460c      	mov	r4, r1
 800b360:	b913      	cbnz	r3, 800b368 <_fflush_r+0x10>
 800b362:	2500      	movs	r5, #0
 800b364:	4628      	mov	r0, r5
 800b366:	bd38      	pop	{r3, r4, r5, pc}
 800b368:	b118      	cbz	r0, 800b372 <_fflush_r+0x1a>
 800b36a:	6a03      	ldr	r3, [r0, #32]
 800b36c:	b90b      	cbnz	r3, 800b372 <_fflush_r+0x1a>
 800b36e:	f7fd fca5 	bl	8008cbc <__sinit>
 800b372:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d0f3      	beq.n	800b362 <_fflush_r+0xa>
 800b37a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b37c:	07d0      	lsls	r0, r2, #31
 800b37e:	d404      	bmi.n	800b38a <_fflush_r+0x32>
 800b380:	0599      	lsls	r1, r3, #22
 800b382:	d402      	bmi.n	800b38a <_fflush_r+0x32>
 800b384:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b386:	f7fe fb98 	bl	8009aba <__retarget_lock_acquire_recursive>
 800b38a:	4628      	mov	r0, r5
 800b38c:	4621      	mov	r1, r4
 800b38e:	f7ff ff5f 	bl	800b250 <__sflush_r>
 800b392:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b394:	07da      	lsls	r2, r3, #31
 800b396:	4605      	mov	r5, r0
 800b398:	d4e4      	bmi.n	800b364 <_fflush_r+0xc>
 800b39a:	89a3      	ldrh	r3, [r4, #12]
 800b39c:	059b      	lsls	r3, r3, #22
 800b39e:	d4e1      	bmi.n	800b364 <_fflush_r+0xc>
 800b3a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b3a2:	f7fe fb8b 	bl	8009abc <__retarget_lock_release_recursive>
 800b3a6:	e7dd      	b.n	800b364 <_fflush_r+0xc>

0800b3a8 <__malloc_lock>:
 800b3a8:	4801      	ldr	r0, [pc, #4]	@ (800b3b0 <__malloc_lock+0x8>)
 800b3aa:	f7fe bb86 	b.w	8009aba <__retarget_lock_acquire_recursive>
 800b3ae:	bf00      	nop
 800b3b0:	200006b0 	.word	0x200006b0

0800b3b4 <__malloc_unlock>:
 800b3b4:	4801      	ldr	r0, [pc, #4]	@ (800b3bc <__malloc_unlock+0x8>)
 800b3b6:	f7fe bb81 	b.w	8009abc <__retarget_lock_release_recursive>
 800b3ba:	bf00      	nop
 800b3bc:	200006b0 	.word	0x200006b0

0800b3c0 <_Balloc>:
 800b3c0:	b570      	push	{r4, r5, r6, lr}
 800b3c2:	69c6      	ldr	r6, [r0, #28]
 800b3c4:	4604      	mov	r4, r0
 800b3c6:	460d      	mov	r5, r1
 800b3c8:	b976      	cbnz	r6, 800b3e8 <_Balloc+0x28>
 800b3ca:	2010      	movs	r0, #16
 800b3cc:	f7ff fe84 	bl	800b0d8 <malloc>
 800b3d0:	4602      	mov	r2, r0
 800b3d2:	61e0      	str	r0, [r4, #28]
 800b3d4:	b920      	cbnz	r0, 800b3e0 <_Balloc+0x20>
 800b3d6:	4b18      	ldr	r3, [pc, #96]	@ (800b438 <_Balloc+0x78>)
 800b3d8:	4818      	ldr	r0, [pc, #96]	@ (800b43c <_Balloc+0x7c>)
 800b3da:	216b      	movs	r1, #107	@ 0x6b
 800b3dc:	f000 fd88 	bl	800bef0 <__assert_func>
 800b3e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b3e4:	6006      	str	r6, [r0, #0]
 800b3e6:	60c6      	str	r6, [r0, #12]
 800b3e8:	69e6      	ldr	r6, [r4, #28]
 800b3ea:	68f3      	ldr	r3, [r6, #12]
 800b3ec:	b183      	cbz	r3, 800b410 <_Balloc+0x50>
 800b3ee:	69e3      	ldr	r3, [r4, #28]
 800b3f0:	68db      	ldr	r3, [r3, #12]
 800b3f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b3f6:	b9b8      	cbnz	r0, 800b428 <_Balloc+0x68>
 800b3f8:	2101      	movs	r1, #1
 800b3fa:	fa01 f605 	lsl.w	r6, r1, r5
 800b3fe:	1d72      	adds	r2, r6, #5
 800b400:	0092      	lsls	r2, r2, #2
 800b402:	4620      	mov	r0, r4
 800b404:	f000 fd92 	bl	800bf2c <_calloc_r>
 800b408:	b160      	cbz	r0, 800b424 <_Balloc+0x64>
 800b40a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b40e:	e00e      	b.n	800b42e <_Balloc+0x6e>
 800b410:	2221      	movs	r2, #33	@ 0x21
 800b412:	2104      	movs	r1, #4
 800b414:	4620      	mov	r0, r4
 800b416:	f000 fd89 	bl	800bf2c <_calloc_r>
 800b41a:	69e3      	ldr	r3, [r4, #28]
 800b41c:	60f0      	str	r0, [r6, #12]
 800b41e:	68db      	ldr	r3, [r3, #12]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d1e4      	bne.n	800b3ee <_Balloc+0x2e>
 800b424:	2000      	movs	r0, #0
 800b426:	bd70      	pop	{r4, r5, r6, pc}
 800b428:	6802      	ldr	r2, [r0, #0]
 800b42a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b42e:	2300      	movs	r3, #0
 800b430:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b434:	e7f7      	b.n	800b426 <_Balloc+0x66>
 800b436:	bf00      	nop
 800b438:	0800c958 	.word	0x0800c958
 800b43c:	0800ca49 	.word	0x0800ca49

0800b440 <_Bfree>:
 800b440:	b570      	push	{r4, r5, r6, lr}
 800b442:	69c6      	ldr	r6, [r0, #28]
 800b444:	4605      	mov	r5, r0
 800b446:	460c      	mov	r4, r1
 800b448:	b976      	cbnz	r6, 800b468 <_Bfree+0x28>
 800b44a:	2010      	movs	r0, #16
 800b44c:	f7ff fe44 	bl	800b0d8 <malloc>
 800b450:	4602      	mov	r2, r0
 800b452:	61e8      	str	r0, [r5, #28]
 800b454:	b920      	cbnz	r0, 800b460 <_Bfree+0x20>
 800b456:	4b09      	ldr	r3, [pc, #36]	@ (800b47c <_Bfree+0x3c>)
 800b458:	4809      	ldr	r0, [pc, #36]	@ (800b480 <_Bfree+0x40>)
 800b45a:	218f      	movs	r1, #143	@ 0x8f
 800b45c:	f000 fd48 	bl	800bef0 <__assert_func>
 800b460:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b464:	6006      	str	r6, [r0, #0]
 800b466:	60c6      	str	r6, [r0, #12]
 800b468:	b13c      	cbz	r4, 800b47a <_Bfree+0x3a>
 800b46a:	69eb      	ldr	r3, [r5, #28]
 800b46c:	6862      	ldr	r2, [r4, #4]
 800b46e:	68db      	ldr	r3, [r3, #12]
 800b470:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b474:	6021      	str	r1, [r4, #0]
 800b476:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b47a:	bd70      	pop	{r4, r5, r6, pc}
 800b47c:	0800c958 	.word	0x0800c958
 800b480:	0800ca49 	.word	0x0800ca49

0800b484 <__multadd>:
 800b484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b488:	690d      	ldr	r5, [r1, #16]
 800b48a:	4607      	mov	r7, r0
 800b48c:	460c      	mov	r4, r1
 800b48e:	461e      	mov	r6, r3
 800b490:	f101 0c14 	add.w	ip, r1, #20
 800b494:	2000      	movs	r0, #0
 800b496:	f8dc 3000 	ldr.w	r3, [ip]
 800b49a:	b299      	uxth	r1, r3
 800b49c:	fb02 6101 	mla	r1, r2, r1, r6
 800b4a0:	0c1e      	lsrs	r6, r3, #16
 800b4a2:	0c0b      	lsrs	r3, r1, #16
 800b4a4:	fb02 3306 	mla	r3, r2, r6, r3
 800b4a8:	b289      	uxth	r1, r1
 800b4aa:	3001      	adds	r0, #1
 800b4ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b4b0:	4285      	cmp	r5, r0
 800b4b2:	f84c 1b04 	str.w	r1, [ip], #4
 800b4b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b4ba:	dcec      	bgt.n	800b496 <__multadd+0x12>
 800b4bc:	b30e      	cbz	r6, 800b502 <__multadd+0x7e>
 800b4be:	68a3      	ldr	r3, [r4, #8]
 800b4c0:	42ab      	cmp	r3, r5
 800b4c2:	dc19      	bgt.n	800b4f8 <__multadd+0x74>
 800b4c4:	6861      	ldr	r1, [r4, #4]
 800b4c6:	4638      	mov	r0, r7
 800b4c8:	3101      	adds	r1, #1
 800b4ca:	f7ff ff79 	bl	800b3c0 <_Balloc>
 800b4ce:	4680      	mov	r8, r0
 800b4d0:	b928      	cbnz	r0, 800b4de <__multadd+0x5a>
 800b4d2:	4602      	mov	r2, r0
 800b4d4:	4b0c      	ldr	r3, [pc, #48]	@ (800b508 <__multadd+0x84>)
 800b4d6:	480d      	ldr	r0, [pc, #52]	@ (800b50c <__multadd+0x88>)
 800b4d8:	21ba      	movs	r1, #186	@ 0xba
 800b4da:	f000 fd09 	bl	800bef0 <__assert_func>
 800b4de:	6922      	ldr	r2, [r4, #16]
 800b4e0:	3202      	adds	r2, #2
 800b4e2:	f104 010c 	add.w	r1, r4, #12
 800b4e6:	0092      	lsls	r2, r2, #2
 800b4e8:	300c      	adds	r0, #12
 800b4ea:	f7fe faed 	bl	8009ac8 <memcpy>
 800b4ee:	4621      	mov	r1, r4
 800b4f0:	4638      	mov	r0, r7
 800b4f2:	f7ff ffa5 	bl	800b440 <_Bfree>
 800b4f6:	4644      	mov	r4, r8
 800b4f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b4fc:	3501      	adds	r5, #1
 800b4fe:	615e      	str	r6, [r3, #20]
 800b500:	6125      	str	r5, [r4, #16]
 800b502:	4620      	mov	r0, r4
 800b504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b508:	0800c9c7 	.word	0x0800c9c7
 800b50c:	0800ca49 	.word	0x0800ca49

0800b510 <__s2b>:
 800b510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b514:	460c      	mov	r4, r1
 800b516:	4615      	mov	r5, r2
 800b518:	461f      	mov	r7, r3
 800b51a:	2209      	movs	r2, #9
 800b51c:	3308      	adds	r3, #8
 800b51e:	4606      	mov	r6, r0
 800b520:	fb93 f3f2 	sdiv	r3, r3, r2
 800b524:	2100      	movs	r1, #0
 800b526:	2201      	movs	r2, #1
 800b528:	429a      	cmp	r2, r3
 800b52a:	db09      	blt.n	800b540 <__s2b+0x30>
 800b52c:	4630      	mov	r0, r6
 800b52e:	f7ff ff47 	bl	800b3c0 <_Balloc>
 800b532:	b940      	cbnz	r0, 800b546 <__s2b+0x36>
 800b534:	4602      	mov	r2, r0
 800b536:	4b19      	ldr	r3, [pc, #100]	@ (800b59c <__s2b+0x8c>)
 800b538:	4819      	ldr	r0, [pc, #100]	@ (800b5a0 <__s2b+0x90>)
 800b53a:	21d3      	movs	r1, #211	@ 0xd3
 800b53c:	f000 fcd8 	bl	800bef0 <__assert_func>
 800b540:	0052      	lsls	r2, r2, #1
 800b542:	3101      	adds	r1, #1
 800b544:	e7f0      	b.n	800b528 <__s2b+0x18>
 800b546:	9b08      	ldr	r3, [sp, #32]
 800b548:	6143      	str	r3, [r0, #20]
 800b54a:	2d09      	cmp	r5, #9
 800b54c:	f04f 0301 	mov.w	r3, #1
 800b550:	6103      	str	r3, [r0, #16]
 800b552:	dd16      	ble.n	800b582 <__s2b+0x72>
 800b554:	f104 0909 	add.w	r9, r4, #9
 800b558:	46c8      	mov	r8, r9
 800b55a:	442c      	add	r4, r5
 800b55c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b560:	4601      	mov	r1, r0
 800b562:	3b30      	subs	r3, #48	@ 0x30
 800b564:	220a      	movs	r2, #10
 800b566:	4630      	mov	r0, r6
 800b568:	f7ff ff8c 	bl	800b484 <__multadd>
 800b56c:	45a0      	cmp	r8, r4
 800b56e:	d1f5      	bne.n	800b55c <__s2b+0x4c>
 800b570:	f1a5 0408 	sub.w	r4, r5, #8
 800b574:	444c      	add	r4, r9
 800b576:	1b2d      	subs	r5, r5, r4
 800b578:	1963      	adds	r3, r4, r5
 800b57a:	42bb      	cmp	r3, r7
 800b57c:	db04      	blt.n	800b588 <__s2b+0x78>
 800b57e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b582:	340a      	adds	r4, #10
 800b584:	2509      	movs	r5, #9
 800b586:	e7f6      	b.n	800b576 <__s2b+0x66>
 800b588:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b58c:	4601      	mov	r1, r0
 800b58e:	3b30      	subs	r3, #48	@ 0x30
 800b590:	220a      	movs	r2, #10
 800b592:	4630      	mov	r0, r6
 800b594:	f7ff ff76 	bl	800b484 <__multadd>
 800b598:	e7ee      	b.n	800b578 <__s2b+0x68>
 800b59a:	bf00      	nop
 800b59c:	0800c9c7 	.word	0x0800c9c7
 800b5a0:	0800ca49 	.word	0x0800ca49

0800b5a4 <__hi0bits>:
 800b5a4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b5a8:	4603      	mov	r3, r0
 800b5aa:	bf36      	itet	cc
 800b5ac:	0403      	lslcc	r3, r0, #16
 800b5ae:	2000      	movcs	r0, #0
 800b5b0:	2010      	movcc	r0, #16
 800b5b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b5b6:	bf3c      	itt	cc
 800b5b8:	021b      	lslcc	r3, r3, #8
 800b5ba:	3008      	addcc	r0, #8
 800b5bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b5c0:	bf3c      	itt	cc
 800b5c2:	011b      	lslcc	r3, r3, #4
 800b5c4:	3004      	addcc	r0, #4
 800b5c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b5ca:	bf3c      	itt	cc
 800b5cc:	009b      	lslcc	r3, r3, #2
 800b5ce:	3002      	addcc	r0, #2
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	db05      	blt.n	800b5e0 <__hi0bits+0x3c>
 800b5d4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b5d8:	f100 0001 	add.w	r0, r0, #1
 800b5dc:	bf08      	it	eq
 800b5de:	2020      	moveq	r0, #32
 800b5e0:	4770      	bx	lr

0800b5e2 <__lo0bits>:
 800b5e2:	6803      	ldr	r3, [r0, #0]
 800b5e4:	4602      	mov	r2, r0
 800b5e6:	f013 0007 	ands.w	r0, r3, #7
 800b5ea:	d00b      	beq.n	800b604 <__lo0bits+0x22>
 800b5ec:	07d9      	lsls	r1, r3, #31
 800b5ee:	d421      	bmi.n	800b634 <__lo0bits+0x52>
 800b5f0:	0798      	lsls	r0, r3, #30
 800b5f2:	bf49      	itett	mi
 800b5f4:	085b      	lsrmi	r3, r3, #1
 800b5f6:	089b      	lsrpl	r3, r3, #2
 800b5f8:	2001      	movmi	r0, #1
 800b5fa:	6013      	strmi	r3, [r2, #0]
 800b5fc:	bf5c      	itt	pl
 800b5fe:	6013      	strpl	r3, [r2, #0]
 800b600:	2002      	movpl	r0, #2
 800b602:	4770      	bx	lr
 800b604:	b299      	uxth	r1, r3
 800b606:	b909      	cbnz	r1, 800b60c <__lo0bits+0x2a>
 800b608:	0c1b      	lsrs	r3, r3, #16
 800b60a:	2010      	movs	r0, #16
 800b60c:	b2d9      	uxtb	r1, r3
 800b60e:	b909      	cbnz	r1, 800b614 <__lo0bits+0x32>
 800b610:	3008      	adds	r0, #8
 800b612:	0a1b      	lsrs	r3, r3, #8
 800b614:	0719      	lsls	r1, r3, #28
 800b616:	bf04      	itt	eq
 800b618:	091b      	lsreq	r3, r3, #4
 800b61a:	3004      	addeq	r0, #4
 800b61c:	0799      	lsls	r1, r3, #30
 800b61e:	bf04      	itt	eq
 800b620:	089b      	lsreq	r3, r3, #2
 800b622:	3002      	addeq	r0, #2
 800b624:	07d9      	lsls	r1, r3, #31
 800b626:	d403      	bmi.n	800b630 <__lo0bits+0x4e>
 800b628:	085b      	lsrs	r3, r3, #1
 800b62a:	f100 0001 	add.w	r0, r0, #1
 800b62e:	d003      	beq.n	800b638 <__lo0bits+0x56>
 800b630:	6013      	str	r3, [r2, #0]
 800b632:	4770      	bx	lr
 800b634:	2000      	movs	r0, #0
 800b636:	4770      	bx	lr
 800b638:	2020      	movs	r0, #32
 800b63a:	4770      	bx	lr

0800b63c <__i2b>:
 800b63c:	b510      	push	{r4, lr}
 800b63e:	460c      	mov	r4, r1
 800b640:	2101      	movs	r1, #1
 800b642:	f7ff febd 	bl	800b3c0 <_Balloc>
 800b646:	4602      	mov	r2, r0
 800b648:	b928      	cbnz	r0, 800b656 <__i2b+0x1a>
 800b64a:	4b05      	ldr	r3, [pc, #20]	@ (800b660 <__i2b+0x24>)
 800b64c:	4805      	ldr	r0, [pc, #20]	@ (800b664 <__i2b+0x28>)
 800b64e:	f240 1145 	movw	r1, #325	@ 0x145
 800b652:	f000 fc4d 	bl	800bef0 <__assert_func>
 800b656:	2301      	movs	r3, #1
 800b658:	6144      	str	r4, [r0, #20]
 800b65a:	6103      	str	r3, [r0, #16]
 800b65c:	bd10      	pop	{r4, pc}
 800b65e:	bf00      	nop
 800b660:	0800c9c7 	.word	0x0800c9c7
 800b664:	0800ca49 	.word	0x0800ca49

0800b668 <__multiply>:
 800b668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b66c:	4617      	mov	r7, r2
 800b66e:	690a      	ldr	r2, [r1, #16]
 800b670:	693b      	ldr	r3, [r7, #16]
 800b672:	429a      	cmp	r2, r3
 800b674:	bfa8      	it	ge
 800b676:	463b      	movge	r3, r7
 800b678:	4689      	mov	r9, r1
 800b67a:	bfa4      	itt	ge
 800b67c:	460f      	movge	r7, r1
 800b67e:	4699      	movge	r9, r3
 800b680:	693d      	ldr	r5, [r7, #16]
 800b682:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b686:	68bb      	ldr	r3, [r7, #8]
 800b688:	6879      	ldr	r1, [r7, #4]
 800b68a:	eb05 060a 	add.w	r6, r5, sl
 800b68e:	42b3      	cmp	r3, r6
 800b690:	b085      	sub	sp, #20
 800b692:	bfb8      	it	lt
 800b694:	3101      	addlt	r1, #1
 800b696:	f7ff fe93 	bl	800b3c0 <_Balloc>
 800b69a:	b930      	cbnz	r0, 800b6aa <__multiply+0x42>
 800b69c:	4602      	mov	r2, r0
 800b69e:	4b41      	ldr	r3, [pc, #260]	@ (800b7a4 <__multiply+0x13c>)
 800b6a0:	4841      	ldr	r0, [pc, #260]	@ (800b7a8 <__multiply+0x140>)
 800b6a2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b6a6:	f000 fc23 	bl	800bef0 <__assert_func>
 800b6aa:	f100 0414 	add.w	r4, r0, #20
 800b6ae:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800b6b2:	4623      	mov	r3, r4
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	4573      	cmp	r3, lr
 800b6b8:	d320      	bcc.n	800b6fc <__multiply+0x94>
 800b6ba:	f107 0814 	add.w	r8, r7, #20
 800b6be:	f109 0114 	add.w	r1, r9, #20
 800b6c2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800b6c6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800b6ca:	9302      	str	r3, [sp, #8]
 800b6cc:	1beb      	subs	r3, r5, r7
 800b6ce:	3b15      	subs	r3, #21
 800b6d0:	f023 0303 	bic.w	r3, r3, #3
 800b6d4:	3304      	adds	r3, #4
 800b6d6:	3715      	adds	r7, #21
 800b6d8:	42bd      	cmp	r5, r7
 800b6da:	bf38      	it	cc
 800b6dc:	2304      	movcc	r3, #4
 800b6de:	9301      	str	r3, [sp, #4]
 800b6e0:	9b02      	ldr	r3, [sp, #8]
 800b6e2:	9103      	str	r1, [sp, #12]
 800b6e4:	428b      	cmp	r3, r1
 800b6e6:	d80c      	bhi.n	800b702 <__multiply+0x9a>
 800b6e8:	2e00      	cmp	r6, #0
 800b6ea:	dd03      	ble.n	800b6f4 <__multiply+0x8c>
 800b6ec:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d055      	beq.n	800b7a0 <__multiply+0x138>
 800b6f4:	6106      	str	r6, [r0, #16]
 800b6f6:	b005      	add	sp, #20
 800b6f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6fc:	f843 2b04 	str.w	r2, [r3], #4
 800b700:	e7d9      	b.n	800b6b6 <__multiply+0x4e>
 800b702:	f8b1 a000 	ldrh.w	sl, [r1]
 800b706:	f1ba 0f00 	cmp.w	sl, #0
 800b70a:	d01f      	beq.n	800b74c <__multiply+0xe4>
 800b70c:	46c4      	mov	ip, r8
 800b70e:	46a1      	mov	r9, r4
 800b710:	2700      	movs	r7, #0
 800b712:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b716:	f8d9 3000 	ldr.w	r3, [r9]
 800b71a:	fa1f fb82 	uxth.w	fp, r2
 800b71e:	b29b      	uxth	r3, r3
 800b720:	fb0a 330b 	mla	r3, sl, fp, r3
 800b724:	443b      	add	r3, r7
 800b726:	f8d9 7000 	ldr.w	r7, [r9]
 800b72a:	0c12      	lsrs	r2, r2, #16
 800b72c:	0c3f      	lsrs	r7, r7, #16
 800b72e:	fb0a 7202 	mla	r2, sl, r2, r7
 800b732:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800b736:	b29b      	uxth	r3, r3
 800b738:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b73c:	4565      	cmp	r5, ip
 800b73e:	f849 3b04 	str.w	r3, [r9], #4
 800b742:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800b746:	d8e4      	bhi.n	800b712 <__multiply+0xaa>
 800b748:	9b01      	ldr	r3, [sp, #4]
 800b74a:	50e7      	str	r7, [r4, r3]
 800b74c:	9b03      	ldr	r3, [sp, #12]
 800b74e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b752:	3104      	adds	r1, #4
 800b754:	f1b9 0f00 	cmp.w	r9, #0
 800b758:	d020      	beq.n	800b79c <__multiply+0x134>
 800b75a:	6823      	ldr	r3, [r4, #0]
 800b75c:	4647      	mov	r7, r8
 800b75e:	46a4      	mov	ip, r4
 800b760:	f04f 0a00 	mov.w	sl, #0
 800b764:	f8b7 b000 	ldrh.w	fp, [r7]
 800b768:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800b76c:	fb09 220b 	mla	r2, r9, fp, r2
 800b770:	4452      	add	r2, sl
 800b772:	b29b      	uxth	r3, r3
 800b774:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b778:	f84c 3b04 	str.w	r3, [ip], #4
 800b77c:	f857 3b04 	ldr.w	r3, [r7], #4
 800b780:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b784:	f8bc 3000 	ldrh.w	r3, [ip]
 800b788:	fb09 330a 	mla	r3, r9, sl, r3
 800b78c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800b790:	42bd      	cmp	r5, r7
 800b792:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b796:	d8e5      	bhi.n	800b764 <__multiply+0xfc>
 800b798:	9a01      	ldr	r2, [sp, #4]
 800b79a:	50a3      	str	r3, [r4, r2]
 800b79c:	3404      	adds	r4, #4
 800b79e:	e79f      	b.n	800b6e0 <__multiply+0x78>
 800b7a0:	3e01      	subs	r6, #1
 800b7a2:	e7a1      	b.n	800b6e8 <__multiply+0x80>
 800b7a4:	0800c9c7 	.word	0x0800c9c7
 800b7a8:	0800ca49 	.word	0x0800ca49

0800b7ac <__pow5mult>:
 800b7ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7b0:	4615      	mov	r5, r2
 800b7b2:	f012 0203 	ands.w	r2, r2, #3
 800b7b6:	4607      	mov	r7, r0
 800b7b8:	460e      	mov	r6, r1
 800b7ba:	d007      	beq.n	800b7cc <__pow5mult+0x20>
 800b7bc:	4c25      	ldr	r4, [pc, #148]	@ (800b854 <__pow5mult+0xa8>)
 800b7be:	3a01      	subs	r2, #1
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b7c6:	f7ff fe5d 	bl	800b484 <__multadd>
 800b7ca:	4606      	mov	r6, r0
 800b7cc:	10ad      	asrs	r5, r5, #2
 800b7ce:	d03d      	beq.n	800b84c <__pow5mult+0xa0>
 800b7d0:	69fc      	ldr	r4, [r7, #28]
 800b7d2:	b97c      	cbnz	r4, 800b7f4 <__pow5mult+0x48>
 800b7d4:	2010      	movs	r0, #16
 800b7d6:	f7ff fc7f 	bl	800b0d8 <malloc>
 800b7da:	4602      	mov	r2, r0
 800b7dc:	61f8      	str	r0, [r7, #28]
 800b7de:	b928      	cbnz	r0, 800b7ec <__pow5mult+0x40>
 800b7e0:	4b1d      	ldr	r3, [pc, #116]	@ (800b858 <__pow5mult+0xac>)
 800b7e2:	481e      	ldr	r0, [pc, #120]	@ (800b85c <__pow5mult+0xb0>)
 800b7e4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b7e8:	f000 fb82 	bl	800bef0 <__assert_func>
 800b7ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b7f0:	6004      	str	r4, [r0, #0]
 800b7f2:	60c4      	str	r4, [r0, #12]
 800b7f4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b7f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b7fc:	b94c      	cbnz	r4, 800b812 <__pow5mult+0x66>
 800b7fe:	f240 2171 	movw	r1, #625	@ 0x271
 800b802:	4638      	mov	r0, r7
 800b804:	f7ff ff1a 	bl	800b63c <__i2b>
 800b808:	2300      	movs	r3, #0
 800b80a:	f8c8 0008 	str.w	r0, [r8, #8]
 800b80e:	4604      	mov	r4, r0
 800b810:	6003      	str	r3, [r0, #0]
 800b812:	f04f 0900 	mov.w	r9, #0
 800b816:	07eb      	lsls	r3, r5, #31
 800b818:	d50a      	bpl.n	800b830 <__pow5mult+0x84>
 800b81a:	4631      	mov	r1, r6
 800b81c:	4622      	mov	r2, r4
 800b81e:	4638      	mov	r0, r7
 800b820:	f7ff ff22 	bl	800b668 <__multiply>
 800b824:	4631      	mov	r1, r6
 800b826:	4680      	mov	r8, r0
 800b828:	4638      	mov	r0, r7
 800b82a:	f7ff fe09 	bl	800b440 <_Bfree>
 800b82e:	4646      	mov	r6, r8
 800b830:	106d      	asrs	r5, r5, #1
 800b832:	d00b      	beq.n	800b84c <__pow5mult+0xa0>
 800b834:	6820      	ldr	r0, [r4, #0]
 800b836:	b938      	cbnz	r0, 800b848 <__pow5mult+0x9c>
 800b838:	4622      	mov	r2, r4
 800b83a:	4621      	mov	r1, r4
 800b83c:	4638      	mov	r0, r7
 800b83e:	f7ff ff13 	bl	800b668 <__multiply>
 800b842:	6020      	str	r0, [r4, #0]
 800b844:	f8c0 9000 	str.w	r9, [r0]
 800b848:	4604      	mov	r4, r0
 800b84a:	e7e4      	b.n	800b816 <__pow5mult+0x6a>
 800b84c:	4630      	mov	r0, r6
 800b84e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b852:	bf00      	nop
 800b854:	0800cc34 	.word	0x0800cc34
 800b858:	0800c958 	.word	0x0800c958
 800b85c:	0800ca49 	.word	0x0800ca49

0800b860 <__lshift>:
 800b860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b864:	460c      	mov	r4, r1
 800b866:	6849      	ldr	r1, [r1, #4]
 800b868:	6923      	ldr	r3, [r4, #16]
 800b86a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b86e:	68a3      	ldr	r3, [r4, #8]
 800b870:	4607      	mov	r7, r0
 800b872:	4691      	mov	r9, r2
 800b874:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b878:	f108 0601 	add.w	r6, r8, #1
 800b87c:	42b3      	cmp	r3, r6
 800b87e:	db0b      	blt.n	800b898 <__lshift+0x38>
 800b880:	4638      	mov	r0, r7
 800b882:	f7ff fd9d 	bl	800b3c0 <_Balloc>
 800b886:	4605      	mov	r5, r0
 800b888:	b948      	cbnz	r0, 800b89e <__lshift+0x3e>
 800b88a:	4602      	mov	r2, r0
 800b88c:	4b28      	ldr	r3, [pc, #160]	@ (800b930 <__lshift+0xd0>)
 800b88e:	4829      	ldr	r0, [pc, #164]	@ (800b934 <__lshift+0xd4>)
 800b890:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b894:	f000 fb2c 	bl	800bef0 <__assert_func>
 800b898:	3101      	adds	r1, #1
 800b89a:	005b      	lsls	r3, r3, #1
 800b89c:	e7ee      	b.n	800b87c <__lshift+0x1c>
 800b89e:	2300      	movs	r3, #0
 800b8a0:	f100 0114 	add.w	r1, r0, #20
 800b8a4:	f100 0210 	add.w	r2, r0, #16
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	4553      	cmp	r3, sl
 800b8ac:	db33      	blt.n	800b916 <__lshift+0xb6>
 800b8ae:	6920      	ldr	r0, [r4, #16]
 800b8b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b8b4:	f104 0314 	add.w	r3, r4, #20
 800b8b8:	f019 091f 	ands.w	r9, r9, #31
 800b8bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b8c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b8c4:	d02b      	beq.n	800b91e <__lshift+0xbe>
 800b8c6:	f1c9 0e20 	rsb	lr, r9, #32
 800b8ca:	468a      	mov	sl, r1
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	6818      	ldr	r0, [r3, #0]
 800b8d0:	fa00 f009 	lsl.w	r0, r0, r9
 800b8d4:	4310      	orrs	r0, r2
 800b8d6:	f84a 0b04 	str.w	r0, [sl], #4
 800b8da:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8de:	459c      	cmp	ip, r3
 800b8e0:	fa22 f20e 	lsr.w	r2, r2, lr
 800b8e4:	d8f3      	bhi.n	800b8ce <__lshift+0x6e>
 800b8e6:	ebac 0304 	sub.w	r3, ip, r4
 800b8ea:	3b15      	subs	r3, #21
 800b8ec:	f023 0303 	bic.w	r3, r3, #3
 800b8f0:	3304      	adds	r3, #4
 800b8f2:	f104 0015 	add.w	r0, r4, #21
 800b8f6:	4560      	cmp	r0, ip
 800b8f8:	bf88      	it	hi
 800b8fa:	2304      	movhi	r3, #4
 800b8fc:	50ca      	str	r2, [r1, r3]
 800b8fe:	b10a      	cbz	r2, 800b904 <__lshift+0xa4>
 800b900:	f108 0602 	add.w	r6, r8, #2
 800b904:	3e01      	subs	r6, #1
 800b906:	4638      	mov	r0, r7
 800b908:	612e      	str	r6, [r5, #16]
 800b90a:	4621      	mov	r1, r4
 800b90c:	f7ff fd98 	bl	800b440 <_Bfree>
 800b910:	4628      	mov	r0, r5
 800b912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b916:	f842 0f04 	str.w	r0, [r2, #4]!
 800b91a:	3301      	adds	r3, #1
 800b91c:	e7c5      	b.n	800b8aa <__lshift+0x4a>
 800b91e:	3904      	subs	r1, #4
 800b920:	f853 2b04 	ldr.w	r2, [r3], #4
 800b924:	f841 2f04 	str.w	r2, [r1, #4]!
 800b928:	459c      	cmp	ip, r3
 800b92a:	d8f9      	bhi.n	800b920 <__lshift+0xc0>
 800b92c:	e7ea      	b.n	800b904 <__lshift+0xa4>
 800b92e:	bf00      	nop
 800b930:	0800c9c7 	.word	0x0800c9c7
 800b934:	0800ca49 	.word	0x0800ca49

0800b938 <__mcmp>:
 800b938:	690a      	ldr	r2, [r1, #16]
 800b93a:	4603      	mov	r3, r0
 800b93c:	6900      	ldr	r0, [r0, #16]
 800b93e:	1a80      	subs	r0, r0, r2
 800b940:	b530      	push	{r4, r5, lr}
 800b942:	d10e      	bne.n	800b962 <__mcmp+0x2a>
 800b944:	3314      	adds	r3, #20
 800b946:	3114      	adds	r1, #20
 800b948:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b94c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b950:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b954:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b958:	4295      	cmp	r5, r2
 800b95a:	d003      	beq.n	800b964 <__mcmp+0x2c>
 800b95c:	d205      	bcs.n	800b96a <__mcmp+0x32>
 800b95e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b962:	bd30      	pop	{r4, r5, pc}
 800b964:	42a3      	cmp	r3, r4
 800b966:	d3f3      	bcc.n	800b950 <__mcmp+0x18>
 800b968:	e7fb      	b.n	800b962 <__mcmp+0x2a>
 800b96a:	2001      	movs	r0, #1
 800b96c:	e7f9      	b.n	800b962 <__mcmp+0x2a>
	...

0800b970 <__mdiff>:
 800b970:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b974:	4689      	mov	r9, r1
 800b976:	4606      	mov	r6, r0
 800b978:	4611      	mov	r1, r2
 800b97a:	4648      	mov	r0, r9
 800b97c:	4614      	mov	r4, r2
 800b97e:	f7ff ffdb 	bl	800b938 <__mcmp>
 800b982:	1e05      	subs	r5, r0, #0
 800b984:	d112      	bne.n	800b9ac <__mdiff+0x3c>
 800b986:	4629      	mov	r1, r5
 800b988:	4630      	mov	r0, r6
 800b98a:	f7ff fd19 	bl	800b3c0 <_Balloc>
 800b98e:	4602      	mov	r2, r0
 800b990:	b928      	cbnz	r0, 800b99e <__mdiff+0x2e>
 800b992:	4b3f      	ldr	r3, [pc, #252]	@ (800ba90 <__mdiff+0x120>)
 800b994:	f240 2137 	movw	r1, #567	@ 0x237
 800b998:	483e      	ldr	r0, [pc, #248]	@ (800ba94 <__mdiff+0x124>)
 800b99a:	f000 faa9 	bl	800bef0 <__assert_func>
 800b99e:	2301      	movs	r3, #1
 800b9a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b9a4:	4610      	mov	r0, r2
 800b9a6:	b003      	add	sp, #12
 800b9a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9ac:	bfbc      	itt	lt
 800b9ae:	464b      	movlt	r3, r9
 800b9b0:	46a1      	movlt	r9, r4
 800b9b2:	4630      	mov	r0, r6
 800b9b4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b9b8:	bfba      	itte	lt
 800b9ba:	461c      	movlt	r4, r3
 800b9bc:	2501      	movlt	r5, #1
 800b9be:	2500      	movge	r5, #0
 800b9c0:	f7ff fcfe 	bl	800b3c0 <_Balloc>
 800b9c4:	4602      	mov	r2, r0
 800b9c6:	b918      	cbnz	r0, 800b9d0 <__mdiff+0x60>
 800b9c8:	4b31      	ldr	r3, [pc, #196]	@ (800ba90 <__mdiff+0x120>)
 800b9ca:	f240 2145 	movw	r1, #581	@ 0x245
 800b9ce:	e7e3      	b.n	800b998 <__mdiff+0x28>
 800b9d0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b9d4:	6926      	ldr	r6, [r4, #16]
 800b9d6:	60c5      	str	r5, [r0, #12]
 800b9d8:	f109 0310 	add.w	r3, r9, #16
 800b9dc:	f109 0514 	add.w	r5, r9, #20
 800b9e0:	f104 0e14 	add.w	lr, r4, #20
 800b9e4:	f100 0b14 	add.w	fp, r0, #20
 800b9e8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b9ec:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b9f0:	9301      	str	r3, [sp, #4]
 800b9f2:	46d9      	mov	r9, fp
 800b9f4:	f04f 0c00 	mov.w	ip, #0
 800b9f8:	9b01      	ldr	r3, [sp, #4]
 800b9fa:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b9fe:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ba02:	9301      	str	r3, [sp, #4]
 800ba04:	fa1f f38a 	uxth.w	r3, sl
 800ba08:	4619      	mov	r1, r3
 800ba0a:	b283      	uxth	r3, r0
 800ba0c:	1acb      	subs	r3, r1, r3
 800ba0e:	0c00      	lsrs	r0, r0, #16
 800ba10:	4463      	add	r3, ip
 800ba12:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ba16:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ba1a:	b29b      	uxth	r3, r3
 800ba1c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ba20:	4576      	cmp	r6, lr
 800ba22:	f849 3b04 	str.w	r3, [r9], #4
 800ba26:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ba2a:	d8e5      	bhi.n	800b9f8 <__mdiff+0x88>
 800ba2c:	1b33      	subs	r3, r6, r4
 800ba2e:	3b15      	subs	r3, #21
 800ba30:	f023 0303 	bic.w	r3, r3, #3
 800ba34:	3415      	adds	r4, #21
 800ba36:	3304      	adds	r3, #4
 800ba38:	42a6      	cmp	r6, r4
 800ba3a:	bf38      	it	cc
 800ba3c:	2304      	movcc	r3, #4
 800ba3e:	441d      	add	r5, r3
 800ba40:	445b      	add	r3, fp
 800ba42:	461e      	mov	r6, r3
 800ba44:	462c      	mov	r4, r5
 800ba46:	4544      	cmp	r4, r8
 800ba48:	d30e      	bcc.n	800ba68 <__mdiff+0xf8>
 800ba4a:	f108 0103 	add.w	r1, r8, #3
 800ba4e:	1b49      	subs	r1, r1, r5
 800ba50:	f021 0103 	bic.w	r1, r1, #3
 800ba54:	3d03      	subs	r5, #3
 800ba56:	45a8      	cmp	r8, r5
 800ba58:	bf38      	it	cc
 800ba5a:	2100      	movcc	r1, #0
 800ba5c:	440b      	add	r3, r1
 800ba5e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ba62:	b191      	cbz	r1, 800ba8a <__mdiff+0x11a>
 800ba64:	6117      	str	r7, [r2, #16]
 800ba66:	e79d      	b.n	800b9a4 <__mdiff+0x34>
 800ba68:	f854 1b04 	ldr.w	r1, [r4], #4
 800ba6c:	46e6      	mov	lr, ip
 800ba6e:	0c08      	lsrs	r0, r1, #16
 800ba70:	fa1c fc81 	uxtah	ip, ip, r1
 800ba74:	4471      	add	r1, lr
 800ba76:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ba7a:	b289      	uxth	r1, r1
 800ba7c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ba80:	f846 1b04 	str.w	r1, [r6], #4
 800ba84:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ba88:	e7dd      	b.n	800ba46 <__mdiff+0xd6>
 800ba8a:	3f01      	subs	r7, #1
 800ba8c:	e7e7      	b.n	800ba5e <__mdiff+0xee>
 800ba8e:	bf00      	nop
 800ba90:	0800c9c7 	.word	0x0800c9c7
 800ba94:	0800ca49 	.word	0x0800ca49

0800ba98 <__ulp>:
 800ba98:	b082      	sub	sp, #8
 800ba9a:	ed8d 0b00 	vstr	d0, [sp]
 800ba9e:	9a01      	ldr	r2, [sp, #4]
 800baa0:	4b0f      	ldr	r3, [pc, #60]	@ (800bae0 <__ulp+0x48>)
 800baa2:	4013      	ands	r3, r2
 800baa4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	dc08      	bgt.n	800babe <__ulp+0x26>
 800baac:	425b      	negs	r3, r3
 800baae:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800bab2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bab6:	da04      	bge.n	800bac2 <__ulp+0x2a>
 800bab8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800babc:	4113      	asrs	r3, r2
 800babe:	2200      	movs	r2, #0
 800bac0:	e008      	b.n	800bad4 <__ulp+0x3c>
 800bac2:	f1a2 0314 	sub.w	r3, r2, #20
 800bac6:	2b1e      	cmp	r3, #30
 800bac8:	bfda      	itte	le
 800baca:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800bace:	40da      	lsrle	r2, r3
 800bad0:	2201      	movgt	r2, #1
 800bad2:	2300      	movs	r3, #0
 800bad4:	4619      	mov	r1, r3
 800bad6:	4610      	mov	r0, r2
 800bad8:	ec41 0b10 	vmov	d0, r0, r1
 800badc:	b002      	add	sp, #8
 800bade:	4770      	bx	lr
 800bae0:	7ff00000 	.word	0x7ff00000

0800bae4 <__b2d>:
 800bae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bae8:	6906      	ldr	r6, [r0, #16]
 800baea:	f100 0814 	add.w	r8, r0, #20
 800baee:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800baf2:	1f37      	subs	r7, r6, #4
 800baf4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800baf8:	4610      	mov	r0, r2
 800bafa:	f7ff fd53 	bl	800b5a4 <__hi0bits>
 800bafe:	f1c0 0320 	rsb	r3, r0, #32
 800bb02:	280a      	cmp	r0, #10
 800bb04:	600b      	str	r3, [r1, #0]
 800bb06:	491b      	ldr	r1, [pc, #108]	@ (800bb74 <__b2d+0x90>)
 800bb08:	dc15      	bgt.n	800bb36 <__b2d+0x52>
 800bb0a:	f1c0 0c0b 	rsb	ip, r0, #11
 800bb0e:	fa22 f30c 	lsr.w	r3, r2, ip
 800bb12:	45b8      	cmp	r8, r7
 800bb14:	ea43 0501 	orr.w	r5, r3, r1
 800bb18:	bf34      	ite	cc
 800bb1a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bb1e:	2300      	movcs	r3, #0
 800bb20:	3015      	adds	r0, #21
 800bb22:	fa02 f000 	lsl.w	r0, r2, r0
 800bb26:	fa23 f30c 	lsr.w	r3, r3, ip
 800bb2a:	4303      	orrs	r3, r0
 800bb2c:	461c      	mov	r4, r3
 800bb2e:	ec45 4b10 	vmov	d0, r4, r5
 800bb32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb36:	45b8      	cmp	r8, r7
 800bb38:	bf3a      	itte	cc
 800bb3a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bb3e:	f1a6 0708 	subcc.w	r7, r6, #8
 800bb42:	2300      	movcs	r3, #0
 800bb44:	380b      	subs	r0, #11
 800bb46:	d012      	beq.n	800bb6e <__b2d+0x8a>
 800bb48:	f1c0 0120 	rsb	r1, r0, #32
 800bb4c:	fa23 f401 	lsr.w	r4, r3, r1
 800bb50:	4082      	lsls	r2, r0
 800bb52:	4322      	orrs	r2, r4
 800bb54:	4547      	cmp	r7, r8
 800bb56:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800bb5a:	bf8c      	ite	hi
 800bb5c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800bb60:	2200      	movls	r2, #0
 800bb62:	4083      	lsls	r3, r0
 800bb64:	40ca      	lsrs	r2, r1
 800bb66:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800bb6a:	4313      	orrs	r3, r2
 800bb6c:	e7de      	b.n	800bb2c <__b2d+0x48>
 800bb6e:	ea42 0501 	orr.w	r5, r2, r1
 800bb72:	e7db      	b.n	800bb2c <__b2d+0x48>
 800bb74:	3ff00000 	.word	0x3ff00000

0800bb78 <__d2b>:
 800bb78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bb7c:	460f      	mov	r7, r1
 800bb7e:	2101      	movs	r1, #1
 800bb80:	ec59 8b10 	vmov	r8, r9, d0
 800bb84:	4616      	mov	r6, r2
 800bb86:	f7ff fc1b 	bl	800b3c0 <_Balloc>
 800bb8a:	4604      	mov	r4, r0
 800bb8c:	b930      	cbnz	r0, 800bb9c <__d2b+0x24>
 800bb8e:	4602      	mov	r2, r0
 800bb90:	4b23      	ldr	r3, [pc, #140]	@ (800bc20 <__d2b+0xa8>)
 800bb92:	4824      	ldr	r0, [pc, #144]	@ (800bc24 <__d2b+0xac>)
 800bb94:	f240 310f 	movw	r1, #783	@ 0x30f
 800bb98:	f000 f9aa 	bl	800bef0 <__assert_func>
 800bb9c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bba0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bba4:	b10d      	cbz	r5, 800bbaa <__d2b+0x32>
 800bba6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bbaa:	9301      	str	r3, [sp, #4]
 800bbac:	f1b8 0300 	subs.w	r3, r8, #0
 800bbb0:	d023      	beq.n	800bbfa <__d2b+0x82>
 800bbb2:	4668      	mov	r0, sp
 800bbb4:	9300      	str	r3, [sp, #0]
 800bbb6:	f7ff fd14 	bl	800b5e2 <__lo0bits>
 800bbba:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bbbe:	b1d0      	cbz	r0, 800bbf6 <__d2b+0x7e>
 800bbc0:	f1c0 0320 	rsb	r3, r0, #32
 800bbc4:	fa02 f303 	lsl.w	r3, r2, r3
 800bbc8:	430b      	orrs	r3, r1
 800bbca:	40c2      	lsrs	r2, r0
 800bbcc:	6163      	str	r3, [r4, #20]
 800bbce:	9201      	str	r2, [sp, #4]
 800bbd0:	9b01      	ldr	r3, [sp, #4]
 800bbd2:	61a3      	str	r3, [r4, #24]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	bf0c      	ite	eq
 800bbd8:	2201      	moveq	r2, #1
 800bbda:	2202      	movne	r2, #2
 800bbdc:	6122      	str	r2, [r4, #16]
 800bbde:	b1a5      	cbz	r5, 800bc0a <__d2b+0x92>
 800bbe0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bbe4:	4405      	add	r5, r0
 800bbe6:	603d      	str	r5, [r7, #0]
 800bbe8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bbec:	6030      	str	r0, [r6, #0]
 800bbee:	4620      	mov	r0, r4
 800bbf0:	b003      	add	sp, #12
 800bbf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bbf6:	6161      	str	r1, [r4, #20]
 800bbf8:	e7ea      	b.n	800bbd0 <__d2b+0x58>
 800bbfa:	a801      	add	r0, sp, #4
 800bbfc:	f7ff fcf1 	bl	800b5e2 <__lo0bits>
 800bc00:	9b01      	ldr	r3, [sp, #4]
 800bc02:	6163      	str	r3, [r4, #20]
 800bc04:	3020      	adds	r0, #32
 800bc06:	2201      	movs	r2, #1
 800bc08:	e7e8      	b.n	800bbdc <__d2b+0x64>
 800bc0a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bc0e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bc12:	6038      	str	r0, [r7, #0]
 800bc14:	6918      	ldr	r0, [r3, #16]
 800bc16:	f7ff fcc5 	bl	800b5a4 <__hi0bits>
 800bc1a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bc1e:	e7e5      	b.n	800bbec <__d2b+0x74>
 800bc20:	0800c9c7 	.word	0x0800c9c7
 800bc24:	0800ca49 	.word	0x0800ca49

0800bc28 <__ratio>:
 800bc28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc2c:	b085      	sub	sp, #20
 800bc2e:	e9cd 1000 	strd	r1, r0, [sp]
 800bc32:	a902      	add	r1, sp, #8
 800bc34:	f7ff ff56 	bl	800bae4 <__b2d>
 800bc38:	9800      	ldr	r0, [sp, #0]
 800bc3a:	a903      	add	r1, sp, #12
 800bc3c:	ec55 4b10 	vmov	r4, r5, d0
 800bc40:	f7ff ff50 	bl	800bae4 <__b2d>
 800bc44:	9b01      	ldr	r3, [sp, #4]
 800bc46:	6919      	ldr	r1, [r3, #16]
 800bc48:	9b00      	ldr	r3, [sp, #0]
 800bc4a:	691b      	ldr	r3, [r3, #16]
 800bc4c:	1ac9      	subs	r1, r1, r3
 800bc4e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800bc52:	1a9b      	subs	r3, r3, r2
 800bc54:	ec5b ab10 	vmov	sl, fp, d0
 800bc58:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	bfce      	itee	gt
 800bc60:	462a      	movgt	r2, r5
 800bc62:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bc66:	465a      	movle	r2, fp
 800bc68:	462f      	mov	r7, r5
 800bc6a:	46d9      	mov	r9, fp
 800bc6c:	bfcc      	ite	gt
 800bc6e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800bc72:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800bc76:	464b      	mov	r3, r9
 800bc78:	4652      	mov	r2, sl
 800bc7a:	4620      	mov	r0, r4
 800bc7c:	4639      	mov	r1, r7
 800bc7e:	f7f4 fde5 	bl	800084c <__aeabi_ddiv>
 800bc82:	ec41 0b10 	vmov	d0, r0, r1
 800bc86:	b005      	add	sp, #20
 800bc88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bc8c <__copybits>:
 800bc8c:	3901      	subs	r1, #1
 800bc8e:	b570      	push	{r4, r5, r6, lr}
 800bc90:	1149      	asrs	r1, r1, #5
 800bc92:	6914      	ldr	r4, [r2, #16]
 800bc94:	3101      	adds	r1, #1
 800bc96:	f102 0314 	add.w	r3, r2, #20
 800bc9a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bc9e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bca2:	1f05      	subs	r5, r0, #4
 800bca4:	42a3      	cmp	r3, r4
 800bca6:	d30c      	bcc.n	800bcc2 <__copybits+0x36>
 800bca8:	1aa3      	subs	r3, r4, r2
 800bcaa:	3b11      	subs	r3, #17
 800bcac:	f023 0303 	bic.w	r3, r3, #3
 800bcb0:	3211      	adds	r2, #17
 800bcb2:	42a2      	cmp	r2, r4
 800bcb4:	bf88      	it	hi
 800bcb6:	2300      	movhi	r3, #0
 800bcb8:	4418      	add	r0, r3
 800bcba:	2300      	movs	r3, #0
 800bcbc:	4288      	cmp	r0, r1
 800bcbe:	d305      	bcc.n	800bccc <__copybits+0x40>
 800bcc0:	bd70      	pop	{r4, r5, r6, pc}
 800bcc2:	f853 6b04 	ldr.w	r6, [r3], #4
 800bcc6:	f845 6f04 	str.w	r6, [r5, #4]!
 800bcca:	e7eb      	b.n	800bca4 <__copybits+0x18>
 800bccc:	f840 3b04 	str.w	r3, [r0], #4
 800bcd0:	e7f4      	b.n	800bcbc <__copybits+0x30>

0800bcd2 <__any_on>:
 800bcd2:	f100 0214 	add.w	r2, r0, #20
 800bcd6:	6900      	ldr	r0, [r0, #16]
 800bcd8:	114b      	asrs	r3, r1, #5
 800bcda:	4298      	cmp	r0, r3
 800bcdc:	b510      	push	{r4, lr}
 800bcde:	db11      	blt.n	800bd04 <__any_on+0x32>
 800bce0:	dd0a      	ble.n	800bcf8 <__any_on+0x26>
 800bce2:	f011 011f 	ands.w	r1, r1, #31
 800bce6:	d007      	beq.n	800bcf8 <__any_on+0x26>
 800bce8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bcec:	fa24 f001 	lsr.w	r0, r4, r1
 800bcf0:	fa00 f101 	lsl.w	r1, r0, r1
 800bcf4:	428c      	cmp	r4, r1
 800bcf6:	d10b      	bne.n	800bd10 <__any_on+0x3e>
 800bcf8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bcfc:	4293      	cmp	r3, r2
 800bcfe:	d803      	bhi.n	800bd08 <__any_on+0x36>
 800bd00:	2000      	movs	r0, #0
 800bd02:	bd10      	pop	{r4, pc}
 800bd04:	4603      	mov	r3, r0
 800bd06:	e7f7      	b.n	800bcf8 <__any_on+0x26>
 800bd08:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bd0c:	2900      	cmp	r1, #0
 800bd0e:	d0f5      	beq.n	800bcfc <__any_on+0x2a>
 800bd10:	2001      	movs	r0, #1
 800bd12:	e7f6      	b.n	800bd02 <__any_on+0x30>

0800bd14 <__sread>:
 800bd14:	b510      	push	{r4, lr}
 800bd16:	460c      	mov	r4, r1
 800bd18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd1c:	f000 f8a4 	bl	800be68 <_read_r>
 800bd20:	2800      	cmp	r0, #0
 800bd22:	bfab      	itete	ge
 800bd24:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bd26:	89a3      	ldrhlt	r3, [r4, #12]
 800bd28:	181b      	addge	r3, r3, r0
 800bd2a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bd2e:	bfac      	ite	ge
 800bd30:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bd32:	81a3      	strhlt	r3, [r4, #12]
 800bd34:	bd10      	pop	{r4, pc}

0800bd36 <__swrite>:
 800bd36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd3a:	461f      	mov	r7, r3
 800bd3c:	898b      	ldrh	r3, [r1, #12]
 800bd3e:	05db      	lsls	r3, r3, #23
 800bd40:	4605      	mov	r5, r0
 800bd42:	460c      	mov	r4, r1
 800bd44:	4616      	mov	r6, r2
 800bd46:	d505      	bpl.n	800bd54 <__swrite+0x1e>
 800bd48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd4c:	2302      	movs	r3, #2
 800bd4e:	2200      	movs	r2, #0
 800bd50:	f000 f878 	bl	800be44 <_lseek_r>
 800bd54:	89a3      	ldrh	r3, [r4, #12]
 800bd56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd5a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bd5e:	81a3      	strh	r3, [r4, #12]
 800bd60:	4632      	mov	r2, r6
 800bd62:	463b      	mov	r3, r7
 800bd64:	4628      	mov	r0, r5
 800bd66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd6a:	f000 b89f 	b.w	800beac <_write_r>

0800bd6e <__sseek>:
 800bd6e:	b510      	push	{r4, lr}
 800bd70:	460c      	mov	r4, r1
 800bd72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd76:	f000 f865 	bl	800be44 <_lseek_r>
 800bd7a:	1c43      	adds	r3, r0, #1
 800bd7c:	89a3      	ldrh	r3, [r4, #12]
 800bd7e:	bf15      	itete	ne
 800bd80:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bd82:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bd86:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bd8a:	81a3      	strheq	r3, [r4, #12]
 800bd8c:	bf18      	it	ne
 800bd8e:	81a3      	strhne	r3, [r4, #12]
 800bd90:	bd10      	pop	{r4, pc}

0800bd92 <__sclose>:
 800bd92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd96:	f000 b89b 	b.w	800bed0 <_close_r>

0800bd9a <_realloc_r>:
 800bd9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd9e:	4607      	mov	r7, r0
 800bda0:	4614      	mov	r4, r2
 800bda2:	460d      	mov	r5, r1
 800bda4:	b921      	cbnz	r1, 800bdb0 <_realloc_r+0x16>
 800bda6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bdaa:	4611      	mov	r1, r2
 800bdac:	f7ff b9be 	b.w	800b12c <_malloc_r>
 800bdb0:	b92a      	cbnz	r2, 800bdbe <_realloc_r+0x24>
 800bdb2:	f000 f8cf 	bl	800bf54 <_free_r>
 800bdb6:	4625      	mov	r5, r4
 800bdb8:	4628      	mov	r0, r5
 800bdba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdbe:	f000 f913 	bl	800bfe8 <_malloc_usable_size_r>
 800bdc2:	4284      	cmp	r4, r0
 800bdc4:	4606      	mov	r6, r0
 800bdc6:	d802      	bhi.n	800bdce <_realloc_r+0x34>
 800bdc8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bdcc:	d8f4      	bhi.n	800bdb8 <_realloc_r+0x1e>
 800bdce:	4621      	mov	r1, r4
 800bdd0:	4638      	mov	r0, r7
 800bdd2:	f7ff f9ab 	bl	800b12c <_malloc_r>
 800bdd6:	4680      	mov	r8, r0
 800bdd8:	b908      	cbnz	r0, 800bdde <_realloc_r+0x44>
 800bdda:	4645      	mov	r5, r8
 800bddc:	e7ec      	b.n	800bdb8 <_realloc_r+0x1e>
 800bdde:	42b4      	cmp	r4, r6
 800bde0:	4622      	mov	r2, r4
 800bde2:	4629      	mov	r1, r5
 800bde4:	bf28      	it	cs
 800bde6:	4632      	movcs	r2, r6
 800bde8:	f7fd fe6e 	bl	8009ac8 <memcpy>
 800bdec:	4629      	mov	r1, r5
 800bdee:	4638      	mov	r0, r7
 800bdf0:	f000 f8b0 	bl	800bf54 <_free_r>
 800bdf4:	e7f1      	b.n	800bdda <_realloc_r+0x40>

0800bdf6 <__ascii_wctomb>:
 800bdf6:	4603      	mov	r3, r0
 800bdf8:	4608      	mov	r0, r1
 800bdfa:	b141      	cbz	r1, 800be0e <__ascii_wctomb+0x18>
 800bdfc:	2aff      	cmp	r2, #255	@ 0xff
 800bdfe:	d904      	bls.n	800be0a <__ascii_wctomb+0x14>
 800be00:	228a      	movs	r2, #138	@ 0x8a
 800be02:	601a      	str	r2, [r3, #0]
 800be04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800be08:	4770      	bx	lr
 800be0a:	700a      	strb	r2, [r1, #0]
 800be0c:	2001      	movs	r0, #1
 800be0e:	4770      	bx	lr

0800be10 <memmove>:
 800be10:	4288      	cmp	r0, r1
 800be12:	b510      	push	{r4, lr}
 800be14:	eb01 0402 	add.w	r4, r1, r2
 800be18:	d902      	bls.n	800be20 <memmove+0x10>
 800be1a:	4284      	cmp	r4, r0
 800be1c:	4623      	mov	r3, r4
 800be1e:	d807      	bhi.n	800be30 <memmove+0x20>
 800be20:	1e43      	subs	r3, r0, #1
 800be22:	42a1      	cmp	r1, r4
 800be24:	d008      	beq.n	800be38 <memmove+0x28>
 800be26:	f811 2b01 	ldrb.w	r2, [r1], #1
 800be2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800be2e:	e7f8      	b.n	800be22 <memmove+0x12>
 800be30:	4402      	add	r2, r0
 800be32:	4601      	mov	r1, r0
 800be34:	428a      	cmp	r2, r1
 800be36:	d100      	bne.n	800be3a <memmove+0x2a>
 800be38:	bd10      	pop	{r4, pc}
 800be3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800be3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800be42:	e7f7      	b.n	800be34 <memmove+0x24>

0800be44 <_lseek_r>:
 800be44:	b538      	push	{r3, r4, r5, lr}
 800be46:	4d07      	ldr	r5, [pc, #28]	@ (800be64 <_lseek_r+0x20>)
 800be48:	4604      	mov	r4, r0
 800be4a:	4608      	mov	r0, r1
 800be4c:	4611      	mov	r1, r2
 800be4e:	2200      	movs	r2, #0
 800be50:	602a      	str	r2, [r5, #0]
 800be52:	461a      	mov	r2, r3
 800be54:	f7f6 ff17 	bl	8002c86 <_lseek>
 800be58:	1c43      	adds	r3, r0, #1
 800be5a:	d102      	bne.n	800be62 <_lseek_r+0x1e>
 800be5c:	682b      	ldr	r3, [r5, #0]
 800be5e:	b103      	cbz	r3, 800be62 <_lseek_r+0x1e>
 800be60:	6023      	str	r3, [r4, #0]
 800be62:	bd38      	pop	{r3, r4, r5, pc}
 800be64:	200006bc 	.word	0x200006bc

0800be68 <_read_r>:
 800be68:	b538      	push	{r3, r4, r5, lr}
 800be6a:	4d07      	ldr	r5, [pc, #28]	@ (800be88 <_read_r+0x20>)
 800be6c:	4604      	mov	r4, r0
 800be6e:	4608      	mov	r0, r1
 800be70:	4611      	mov	r1, r2
 800be72:	2200      	movs	r2, #0
 800be74:	602a      	str	r2, [r5, #0]
 800be76:	461a      	mov	r2, r3
 800be78:	f7f6 fec1 	bl	8002bfe <_read>
 800be7c:	1c43      	adds	r3, r0, #1
 800be7e:	d102      	bne.n	800be86 <_read_r+0x1e>
 800be80:	682b      	ldr	r3, [r5, #0]
 800be82:	b103      	cbz	r3, 800be86 <_read_r+0x1e>
 800be84:	6023      	str	r3, [r4, #0]
 800be86:	bd38      	pop	{r3, r4, r5, pc}
 800be88:	200006bc 	.word	0x200006bc

0800be8c <_sbrk_r>:
 800be8c:	b538      	push	{r3, r4, r5, lr}
 800be8e:	4d06      	ldr	r5, [pc, #24]	@ (800bea8 <_sbrk_r+0x1c>)
 800be90:	2300      	movs	r3, #0
 800be92:	4604      	mov	r4, r0
 800be94:	4608      	mov	r0, r1
 800be96:	602b      	str	r3, [r5, #0]
 800be98:	f7f6 ff02 	bl	8002ca0 <_sbrk>
 800be9c:	1c43      	adds	r3, r0, #1
 800be9e:	d102      	bne.n	800bea6 <_sbrk_r+0x1a>
 800bea0:	682b      	ldr	r3, [r5, #0]
 800bea2:	b103      	cbz	r3, 800bea6 <_sbrk_r+0x1a>
 800bea4:	6023      	str	r3, [r4, #0]
 800bea6:	bd38      	pop	{r3, r4, r5, pc}
 800bea8:	200006bc 	.word	0x200006bc

0800beac <_write_r>:
 800beac:	b538      	push	{r3, r4, r5, lr}
 800beae:	4d07      	ldr	r5, [pc, #28]	@ (800becc <_write_r+0x20>)
 800beb0:	4604      	mov	r4, r0
 800beb2:	4608      	mov	r0, r1
 800beb4:	4611      	mov	r1, r2
 800beb6:	2200      	movs	r2, #0
 800beb8:	602a      	str	r2, [r5, #0]
 800beba:	461a      	mov	r2, r3
 800bebc:	f7f6 fb58 	bl	8002570 <_write>
 800bec0:	1c43      	adds	r3, r0, #1
 800bec2:	d102      	bne.n	800beca <_write_r+0x1e>
 800bec4:	682b      	ldr	r3, [r5, #0]
 800bec6:	b103      	cbz	r3, 800beca <_write_r+0x1e>
 800bec8:	6023      	str	r3, [r4, #0]
 800beca:	bd38      	pop	{r3, r4, r5, pc}
 800becc:	200006bc 	.word	0x200006bc

0800bed0 <_close_r>:
 800bed0:	b538      	push	{r3, r4, r5, lr}
 800bed2:	4d06      	ldr	r5, [pc, #24]	@ (800beec <_close_r+0x1c>)
 800bed4:	2300      	movs	r3, #0
 800bed6:	4604      	mov	r4, r0
 800bed8:	4608      	mov	r0, r1
 800beda:	602b      	str	r3, [r5, #0]
 800bedc:	f7f6 feac 	bl	8002c38 <_close>
 800bee0:	1c43      	adds	r3, r0, #1
 800bee2:	d102      	bne.n	800beea <_close_r+0x1a>
 800bee4:	682b      	ldr	r3, [r5, #0]
 800bee6:	b103      	cbz	r3, 800beea <_close_r+0x1a>
 800bee8:	6023      	str	r3, [r4, #0]
 800beea:	bd38      	pop	{r3, r4, r5, pc}
 800beec:	200006bc 	.word	0x200006bc

0800bef0 <__assert_func>:
 800bef0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bef2:	4614      	mov	r4, r2
 800bef4:	461a      	mov	r2, r3
 800bef6:	4b09      	ldr	r3, [pc, #36]	@ (800bf1c <__assert_func+0x2c>)
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	4605      	mov	r5, r0
 800befc:	68d8      	ldr	r0, [r3, #12]
 800befe:	b14c      	cbz	r4, 800bf14 <__assert_func+0x24>
 800bf00:	4b07      	ldr	r3, [pc, #28]	@ (800bf20 <__assert_func+0x30>)
 800bf02:	9100      	str	r1, [sp, #0]
 800bf04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bf08:	4906      	ldr	r1, [pc, #24]	@ (800bf24 <__assert_func+0x34>)
 800bf0a:	462b      	mov	r3, r5
 800bf0c:	f000 f874 	bl	800bff8 <fiprintf>
 800bf10:	f000 f884 	bl	800c01c <abort>
 800bf14:	4b04      	ldr	r3, [pc, #16]	@ (800bf28 <__assert_func+0x38>)
 800bf16:	461c      	mov	r4, r3
 800bf18:	e7f3      	b.n	800bf02 <__assert_func+0x12>
 800bf1a:	bf00      	nop
 800bf1c:	20000188 	.word	0x20000188
 800bf20:	0800caa2 	.word	0x0800caa2
 800bf24:	0800caaf 	.word	0x0800caaf
 800bf28:	0800cadd 	.word	0x0800cadd

0800bf2c <_calloc_r>:
 800bf2c:	b570      	push	{r4, r5, r6, lr}
 800bf2e:	fba1 5402 	umull	r5, r4, r1, r2
 800bf32:	b934      	cbnz	r4, 800bf42 <_calloc_r+0x16>
 800bf34:	4629      	mov	r1, r5
 800bf36:	f7ff f8f9 	bl	800b12c <_malloc_r>
 800bf3a:	4606      	mov	r6, r0
 800bf3c:	b928      	cbnz	r0, 800bf4a <_calloc_r+0x1e>
 800bf3e:	4630      	mov	r0, r6
 800bf40:	bd70      	pop	{r4, r5, r6, pc}
 800bf42:	220c      	movs	r2, #12
 800bf44:	6002      	str	r2, [r0, #0]
 800bf46:	2600      	movs	r6, #0
 800bf48:	e7f9      	b.n	800bf3e <_calloc_r+0x12>
 800bf4a:	462a      	mov	r2, r5
 800bf4c:	4621      	mov	r1, r4
 800bf4e:	f7fd fd6f 	bl	8009a30 <memset>
 800bf52:	e7f4      	b.n	800bf3e <_calloc_r+0x12>

0800bf54 <_free_r>:
 800bf54:	b538      	push	{r3, r4, r5, lr}
 800bf56:	4605      	mov	r5, r0
 800bf58:	2900      	cmp	r1, #0
 800bf5a:	d041      	beq.n	800bfe0 <_free_r+0x8c>
 800bf5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf60:	1f0c      	subs	r4, r1, #4
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	bfb8      	it	lt
 800bf66:	18e4      	addlt	r4, r4, r3
 800bf68:	f7ff fa1e 	bl	800b3a8 <__malloc_lock>
 800bf6c:	4a1d      	ldr	r2, [pc, #116]	@ (800bfe4 <_free_r+0x90>)
 800bf6e:	6813      	ldr	r3, [r2, #0]
 800bf70:	b933      	cbnz	r3, 800bf80 <_free_r+0x2c>
 800bf72:	6063      	str	r3, [r4, #4]
 800bf74:	6014      	str	r4, [r2, #0]
 800bf76:	4628      	mov	r0, r5
 800bf78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf7c:	f7ff ba1a 	b.w	800b3b4 <__malloc_unlock>
 800bf80:	42a3      	cmp	r3, r4
 800bf82:	d908      	bls.n	800bf96 <_free_r+0x42>
 800bf84:	6820      	ldr	r0, [r4, #0]
 800bf86:	1821      	adds	r1, r4, r0
 800bf88:	428b      	cmp	r3, r1
 800bf8a:	bf01      	itttt	eq
 800bf8c:	6819      	ldreq	r1, [r3, #0]
 800bf8e:	685b      	ldreq	r3, [r3, #4]
 800bf90:	1809      	addeq	r1, r1, r0
 800bf92:	6021      	streq	r1, [r4, #0]
 800bf94:	e7ed      	b.n	800bf72 <_free_r+0x1e>
 800bf96:	461a      	mov	r2, r3
 800bf98:	685b      	ldr	r3, [r3, #4]
 800bf9a:	b10b      	cbz	r3, 800bfa0 <_free_r+0x4c>
 800bf9c:	42a3      	cmp	r3, r4
 800bf9e:	d9fa      	bls.n	800bf96 <_free_r+0x42>
 800bfa0:	6811      	ldr	r1, [r2, #0]
 800bfa2:	1850      	adds	r0, r2, r1
 800bfa4:	42a0      	cmp	r0, r4
 800bfa6:	d10b      	bne.n	800bfc0 <_free_r+0x6c>
 800bfa8:	6820      	ldr	r0, [r4, #0]
 800bfaa:	4401      	add	r1, r0
 800bfac:	1850      	adds	r0, r2, r1
 800bfae:	4283      	cmp	r3, r0
 800bfb0:	6011      	str	r1, [r2, #0]
 800bfb2:	d1e0      	bne.n	800bf76 <_free_r+0x22>
 800bfb4:	6818      	ldr	r0, [r3, #0]
 800bfb6:	685b      	ldr	r3, [r3, #4]
 800bfb8:	6053      	str	r3, [r2, #4]
 800bfba:	4408      	add	r0, r1
 800bfbc:	6010      	str	r0, [r2, #0]
 800bfbe:	e7da      	b.n	800bf76 <_free_r+0x22>
 800bfc0:	d902      	bls.n	800bfc8 <_free_r+0x74>
 800bfc2:	230c      	movs	r3, #12
 800bfc4:	602b      	str	r3, [r5, #0]
 800bfc6:	e7d6      	b.n	800bf76 <_free_r+0x22>
 800bfc8:	6820      	ldr	r0, [r4, #0]
 800bfca:	1821      	adds	r1, r4, r0
 800bfcc:	428b      	cmp	r3, r1
 800bfce:	bf04      	itt	eq
 800bfd0:	6819      	ldreq	r1, [r3, #0]
 800bfd2:	685b      	ldreq	r3, [r3, #4]
 800bfd4:	6063      	str	r3, [r4, #4]
 800bfd6:	bf04      	itt	eq
 800bfd8:	1809      	addeq	r1, r1, r0
 800bfda:	6021      	streq	r1, [r4, #0]
 800bfdc:	6054      	str	r4, [r2, #4]
 800bfde:	e7ca      	b.n	800bf76 <_free_r+0x22>
 800bfe0:	bd38      	pop	{r3, r4, r5, pc}
 800bfe2:	bf00      	nop
 800bfe4:	200006b8 	.word	0x200006b8

0800bfe8 <_malloc_usable_size_r>:
 800bfe8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bfec:	1f18      	subs	r0, r3, #4
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	bfbc      	itt	lt
 800bff2:	580b      	ldrlt	r3, [r1, r0]
 800bff4:	18c0      	addlt	r0, r0, r3
 800bff6:	4770      	bx	lr

0800bff8 <fiprintf>:
 800bff8:	b40e      	push	{r1, r2, r3}
 800bffa:	b503      	push	{r0, r1, lr}
 800bffc:	4601      	mov	r1, r0
 800bffe:	ab03      	add	r3, sp, #12
 800c000:	4805      	ldr	r0, [pc, #20]	@ (800c018 <fiprintf+0x20>)
 800c002:	f853 2b04 	ldr.w	r2, [r3], #4
 800c006:	6800      	ldr	r0, [r0, #0]
 800c008:	9301      	str	r3, [sp, #4]
 800c00a:	f000 f837 	bl	800c07c <_vfiprintf_r>
 800c00e:	b002      	add	sp, #8
 800c010:	f85d eb04 	ldr.w	lr, [sp], #4
 800c014:	b003      	add	sp, #12
 800c016:	4770      	bx	lr
 800c018:	20000188 	.word	0x20000188

0800c01c <abort>:
 800c01c:	b508      	push	{r3, lr}
 800c01e:	2006      	movs	r0, #6
 800c020:	f000 fa62 	bl	800c4e8 <raise>
 800c024:	2001      	movs	r0, #1
 800c026:	f7f6 fddf 	bl	8002be8 <_exit>

0800c02a <__sfputc_r>:
 800c02a:	6893      	ldr	r3, [r2, #8]
 800c02c:	3b01      	subs	r3, #1
 800c02e:	2b00      	cmp	r3, #0
 800c030:	b410      	push	{r4}
 800c032:	6093      	str	r3, [r2, #8]
 800c034:	da08      	bge.n	800c048 <__sfputc_r+0x1e>
 800c036:	6994      	ldr	r4, [r2, #24]
 800c038:	42a3      	cmp	r3, r4
 800c03a:	db01      	blt.n	800c040 <__sfputc_r+0x16>
 800c03c:	290a      	cmp	r1, #10
 800c03e:	d103      	bne.n	800c048 <__sfputc_r+0x1e>
 800c040:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c044:	f000 b932 	b.w	800c2ac <__swbuf_r>
 800c048:	6813      	ldr	r3, [r2, #0]
 800c04a:	1c58      	adds	r0, r3, #1
 800c04c:	6010      	str	r0, [r2, #0]
 800c04e:	7019      	strb	r1, [r3, #0]
 800c050:	4608      	mov	r0, r1
 800c052:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c056:	4770      	bx	lr

0800c058 <__sfputs_r>:
 800c058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c05a:	4606      	mov	r6, r0
 800c05c:	460f      	mov	r7, r1
 800c05e:	4614      	mov	r4, r2
 800c060:	18d5      	adds	r5, r2, r3
 800c062:	42ac      	cmp	r4, r5
 800c064:	d101      	bne.n	800c06a <__sfputs_r+0x12>
 800c066:	2000      	movs	r0, #0
 800c068:	e007      	b.n	800c07a <__sfputs_r+0x22>
 800c06a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c06e:	463a      	mov	r2, r7
 800c070:	4630      	mov	r0, r6
 800c072:	f7ff ffda 	bl	800c02a <__sfputc_r>
 800c076:	1c43      	adds	r3, r0, #1
 800c078:	d1f3      	bne.n	800c062 <__sfputs_r+0xa>
 800c07a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c07c <_vfiprintf_r>:
 800c07c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c080:	460d      	mov	r5, r1
 800c082:	b09d      	sub	sp, #116	@ 0x74
 800c084:	4614      	mov	r4, r2
 800c086:	4698      	mov	r8, r3
 800c088:	4606      	mov	r6, r0
 800c08a:	b118      	cbz	r0, 800c094 <_vfiprintf_r+0x18>
 800c08c:	6a03      	ldr	r3, [r0, #32]
 800c08e:	b90b      	cbnz	r3, 800c094 <_vfiprintf_r+0x18>
 800c090:	f7fc fe14 	bl	8008cbc <__sinit>
 800c094:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c096:	07d9      	lsls	r1, r3, #31
 800c098:	d405      	bmi.n	800c0a6 <_vfiprintf_r+0x2a>
 800c09a:	89ab      	ldrh	r3, [r5, #12]
 800c09c:	059a      	lsls	r2, r3, #22
 800c09e:	d402      	bmi.n	800c0a6 <_vfiprintf_r+0x2a>
 800c0a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c0a2:	f7fd fd0a 	bl	8009aba <__retarget_lock_acquire_recursive>
 800c0a6:	89ab      	ldrh	r3, [r5, #12]
 800c0a8:	071b      	lsls	r3, r3, #28
 800c0aa:	d501      	bpl.n	800c0b0 <_vfiprintf_r+0x34>
 800c0ac:	692b      	ldr	r3, [r5, #16]
 800c0ae:	b99b      	cbnz	r3, 800c0d8 <_vfiprintf_r+0x5c>
 800c0b0:	4629      	mov	r1, r5
 800c0b2:	4630      	mov	r0, r6
 800c0b4:	f000 f938 	bl	800c328 <__swsetup_r>
 800c0b8:	b170      	cbz	r0, 800c0d8 <_vfiprintf_r+0x5c>
 800c0ba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c0bc:	07dc      	lsls	r4, r3, #31
 800c0be:	d504      	bpl.n	800c0ca <_vfiprintf_r+0x4e>
 800c0c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c0c4:	b01d      	add	sp, #116	@ 0x74
 800c0c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0ca:	89ab      	ldrh	r3, [r5, #12]
 800c0cc:	0598      	lsls	r0, r3, #22
 800c0ce:	d4f7      	bmi.n	800c0c0 <_vfiprintf_r+0x44>
 800c0d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c0d2:	f7fd fcf3 	bl	8009abc <__retarget_lock_release_recursive>
 800c0d6:	e7f3      	b.n	800c0c0 <_vfiprintf_r+0x44>
 800c0d8:	2300      	movs	r3, #0
 800c0da:	9309      	str	r3, [sp, #36]	@ 0x24
 800c0dc:	2320      	movs	r3, #32
 800c0de:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c0e2:	f8cd 800c 	str.w	r8, [sp, #12]
 800c0e6:	2330      	movs	r3, #48	@ 0x30
 800c0e8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c298 <_vfiprintf_r+0x21c>
 800c0ec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c0f0:	f04f 0901 	mov.w	r9, #1
 800c0f4:	4623      	mov	r3, r4
 800c0f6:	469a      	mov	sl, r3
 800c0f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c0fc:	b10a      	cbz	r2, 800c102 <_vfiprintf_r+0x86>
 800c0fe:	2a25      	cmp	r2, #37	@ 0x25
 800c100:	d1f9      	bne.n	800c0f6 <_vfiprintf_r+0x7a>
 800c102:	ebba 0b04 	subs.w	fp, sl, r4
 800c106:	d00b      	beq.n	800c120 <_vfiprintf_r+0xa4>
 800c108:	465b      	mov	r3, fp
 800c10a:	4622      	mov	r2, r4
 800c10c:	4629      	mov	r1, r5
 800c10e:	4630      	mov	r0, r6
 800c110:	f7ff ffa2 	bl	800c058 <__sfputs_r>
 800c114:	3001      	adds	r0, #1
 800c116:	f000 80a7 	beq.w	800c268 <_vfiprintf_r+0x1ec>
 800c11a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c11c:	445a      	add	r2, fp
 800c11e:	9209      	str	r2, [sp, #36]	@ 0x24
 800c120:	f89a 3000 	ldrb.w	r3, [sl]
 800c124:	2b00      	cmp	r3, #0
 800c126:	f000 809f 	beq.w	800c268 <_vfiprintf_r+0x1ec>
 800c12a:	2300      	movs	r3, #0
 800c12c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c130:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c134:	f10a 0a01 	add.w	sl, sl, #1
 800c138:	9304      	str	r3, [sp, #16]
 800c13a:	9307      	str	r3, [sp, #28]
 800c13c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c140:	931a      	str	r3, [sp, #104]	@ 0x68
 800c142:	4654      	mov	r4, sl
 800c144:	2205      	movs	r2, #5
 800c146:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c14a:	4853      	ldr	r0, [pc, #332]	@ (800c298 <_vfiprintf_r+0x21c>)
 800c14c:	f7f4 f840 	bl	80001d0 <memchr>
 800c150:	9a04      	ldr	r2, [sp, #16]
 800c152:	b9d8      	cbnz	r0, 800c18c <_vfiprintf_r+0x110>
 800c154:	06d1      	lsls	r1, r2, #27
 800c156:	bf44      	itt	mi
 800c158:	2320      	movmi	r3, #32
 800c15a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c15e:	0713      	lsls	r3, r2, #28
 800c160:	bf44      	itt	mi
 800c162:	232b      	movmi	r3, #43	@ 0x2b
 800c164:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c168:	f89a 3000 	ldrb.w	r3, [sl]
 800c16c:	2b2a      	cmp	r3, #42	@ 0x2a
 800c16e:	d015      	beq.n	800c19c <_vfiprintf_r+0x120>
 800c170:	9a07      	ldr	r2, [sp, #28]
 800c172:	4654      	mov	r4, sl
 800c174:	2000      	movs	r0, #0
 800c176:	f04f 0c0a 	mov.w	ip, #10
 800c17a:	4621      	mov	r1, r4
 800c17c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c180:	3b30      	subs	r3, #48	@ 0x30
 800c182:	2b09      	cmp	r3, #9
 800c184:	d94b      	bls.n	800c21e <_vfiprintf_r+0x1a2>
 800c186:	b1b0      	cbz	r0, 800c1b6 <_vfiprintf_r+0x13a>
 800c188:	9207      	str	r2, [sp, #28]
 800c18a:	e014      	b.n	800c1b6 <_vfiprintf_r+0x13a>
 800c18c:	eba0 0308 	sub.w	r3, r0, r8
 800c190:	fa09 f303 	lsl.w	r3, r9, r3
 800c194:	4313      	orrs	r3, r2
 800c196:	9304      	str	r3, [sp, #16]
 800c198:	46a2      	mov	sl, r4
 800c19a:	e7d2      	b.n	800c142 <_vfiprintf_r+0xc6>
 800c19c:	9b03      	ldr	r3, [sp, #12]
 800c19e:	1d19      	adds	r1, r3, #4
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	9103      	str	r1, [sp, #12]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	bfbb      	ittet	lt
 800c1a8:	425b      	neglt	r3, r3
 800c1aa:	f042 0202 	orrlt.w	r2, r2, #2
 800c1ae:	9307      	strge	r3, [sp, #28]
 800c1b0:	9307      	strlt	r3, [sp, #28]
 800c1b2:	bfb8      	it	lt
 800c1b4:	9204      	strlt	r2, [sp, #16]
 800c1b6:	7823      	ldrb	r3, [r4, #0]
 800c1b8:	2b2e      	cmp	r3, #46	@ 0x2e
 800c1ba:	d10a      	bne.n	800c1d2 <_vfiprintf_r+0x156>
 800c1bc:	7863      	ldrb	r3, [r4, #1]
 800c1be:	2b2a      	cmp	r3, #42	@ 0x2a
 800c1c0:	d132      	bne.n	800c228 <_vfiprintf_r+0x1ac>
 800c1c2:	9b03      	ldr	r3, [sp, #12]
 800c1c4:	1d1a      	adds	r2, r3, #4
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	9203      	str	r2, [sp, #12]
 800c1ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c1ce:	3402      	adds	r4, #2
 800c1d0:	9305      	str	r3, [sp, #20]
 800c1d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c2a8 <_vfiprintf_r+0x22c>
 800c1d6:	7821      	ldrb	r1, [r4, #0]
 800c1d8:	2203      	movs	r2, #3
 800c1da:	4650      	mov	r0, sl
 800c1dc:	f7f3 fff8 	bl	80001d0 <memchr>
 800c1e0:	b138      	cbz	r0, 800c1f2 <_vfiprintf_r+0x176>
 800c1e2:	9b04      	ldr	r3, [sp, #16]
 800c1e4:	eba0 000a 	sub.w	r0, r0, sl
 800c1e8:	2240      	movs	r2, #64	@ 0x40
 800c1ea:	4082      	lsls	r2, r0
 800c1ec:	4313      	orrs	r3, r2
 800c1ee:	3401      	adds	r4, #1
 800c1f0:	9304      	str	r3, [sp, #16]
 800c1f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1f6:	4829      	ldr	r0, [pc, #164]	@ (800c29c <_vfiprintf_r+0x220>)
 800c1f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c1fc:	2206      	movs	r2, #6
 800c1fe:	f7f3 ffe7 	bl	80001d0 <memchr>
 800c202:	2800      	cmp	r0, #0
 800c204:	d03f      	beq.n	800c286 <_vfiprintf_r+0x20a>
 800c206:	4b26      	ldr	r3, [pc, #152]	@ (800c2a0 <_vfiprintf_r+0x224>)
 800c208:	bb1b      	cbnz	r3, 800c252 <_vfiprintf_r+0x1d6>
 800c20a:	9b03      	ldr	r3, [sp, #12]
 800c20c:	3307      	adds	r3, #7
 800c20e:	f023 0307 	bic.w	r3, r3, #7
 800c212:	3308      	adds	r3, #8
 800c214:	9303      	str	r3, [sp, #12]
 800c216:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c218:	443b      	add	r3, r7
 800c21a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c21c:	e76a      	b.n	800c0f4 <_vfiprintf_r+0x78>
 800c21e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c222:	460c      	mov	r4, r1
 800c224:	2001      	movs	r0, #1
 800c226:	e7a8      	b.n	800c17a <_vfiprintf_r+0xfe>
 800c228:	2300      	movs	r3, #0
 800c22a:	3401      	adds	r4, #1
 800c22c:	9305      	str	r3, [sp, #20]
 800c22e:	4619      	mov	r1, r3
 800c230:	f04f 0c0a 	mov.w	ip, #10
 800c234:	4620      	mov	r0, r4
 800c236:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c23a:	3a30      	subs	r2, #48	@ 0x30
 800c23c:	2a09      	cmp	r2, #9
 800c23e:	d903      	bls.n	800c248 <_vfiprintf_r+0x1cc>
 800c240:	2b00      	cmp	r3, #0
 800c242:	d0c6      	beq.n	800c1d2 <_vfiprintf_r+0x156>
 800c244:	9105      	str	r1, [sp, #20]
 800c246:	e7c4      	b.n	800c1d2 <_vfiprintf_r+0x156>
 800c248:	fb0c 2101 	mla	r1, ip, r1, r2
 800c24c:	4604      	mov	r4, r0
 800c24e:	2301      	movs	r3, #1
 800c250:	e7f0      	b.n	800c234 <_vfiprintf_r+0x1b8>
 800c252:	ab03      	add	r3, sp, #12
 800c254:	9300      	str	r3, [sp, #0]
 800c256:	462a      	mov	r2, r5
 800c258:	4b12      	ldr	r3, [pc, #72]	@ (800c2a4 <_vfiprintf_r+0x228>)
 800c25a:	a904      	add	r1, sp, #16
 800c25c:	4630      	mov	r0, r6
 800c25e:	f7fb febb 	bl	8007fd8 <_printf_float>
 800c262:	4607      	mov	r7, r0
 800c264:	1c78      	adds	r0, r7, #1
 800c266:	d1d6      	bne.n	800c216 <_vfiprintf_r+0x19a>
 800c268:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c26a:	07d9      	lsls	r1, r3, #31
 800c26c:	d405      	bmi.n	800c27a <_vfiprintf_r+0x1fe>
 800c26e:	89ab      	ldrh	r3, [r5, #12]
 800c270:	059a      	lsls	r2, r3, #22
 800c272:	d402      	bmi.n	800c27a <_vfiprintf_r+0x1fe>
 800c274:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c276:	f7fd fc21 	bl	8009abc <__retarget_lock_release_recursive>
 800c27a:	89ab      	ldrh	r3, [r5, #12]
 800c27c:	065b      	lsls	r3, r3, #25
 800c27e:	f53f af1f 	bmi.w	800c0c0 <_vfiprintf_r+0x44>
 800c282:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c284:	e71e      	b.n	800c0c4 <_vfiprintf_r+0x48>
 800c286:	ab03      	add	r3, sp, #12
 800c288:	9300      	str	r3, [sp, #0]
 800c28a:	462a      	mov	r2, r5
 800c28c:	4b05      	ldr	r3, [pc, #20]	@ (800c2a4 <_vfiprintf_r+0x228>)
 800c28e:	a904      	add	r1, sp, #16
 800c290:	4630      	mov	r0, r6
 800c292:	f7fc f939 	bl	8008508 <_printf_i>
 800c296:	e7e4      	b.n	800c262 <_vfiprintf_r+0x1e6>
 800c298:	0800ca38 	.word	0x0800ca38
 800c29c:	0800ca42 	.word	0x0800ca42
 800c2a0:	08007fd9 	.word	0x08007fd9
 800c2a4:	0800c059 	.word	0x0800c059
 800c2a8:	0800ca3e 	.word	0x0800ca3e

0800c2ac <__swbuf_r>:
 800c2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2ae:	460e      	mov	r6, r1
 800c2b0:	4614      	mov	r4, r2
 800c2b2:	4605      	mov	r5, r0
 800c2b4:	b118      	cbz	r0, 800c2be <__swbuf_r+0x12>
 800c2b6:	6a03      	ldr	r3, [r0, #32]
 800c2b8:	b90b      	cbnz	r3, 800c2be <__swbuf_r+0x12>
 800c2ba:	f7fc fcff 	bl	8008cbc <__sinit>
 800c2be:	69a3      	ldr	r3, [r4, #24]
 800c2c0:	60a3      	str	r3, [r4, #8]
 800c2c2:	89a3      	ldrh	r3, [r4, #12]
 800c2c4:	071a      	lsls	r2, r3, #28
 800c2c6:	d501      	bpl.n	800c2cc <__swbuf_r+0x20>
 800c2c8:	6923      	ldr	r3, [r4, #16]
 800c2ca:	b943      	cbnz	r3, 800c2de <__swbuf_r+0x32>
 800c2cc:	4621      	mov	r1, r4
 800c2ce:	4628      	mov	r0, r5
 800c2d0:	f000 f82a 	bl	800c328 <__swsetup_r>
 800c2d4:	b118      	cbz	r0, 800c2de <__swbuf_r+0x32>
 800c2d6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800c2da:	4638      	mov	r0, r7
 800c2dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2de:	6823      	ldr	r3, [r4, #0]
 800c2e0:	6922      	ldr	r2, [r4, #16]
 800c2e2:	1a98      	subs	r0, r3, r2
 800c2e4:	6963      	ldr	r3, [r4, #20]
 800c2e6:	b2f6      	uxtb	r6, r6
 800c2e8:	4283      	cmp	r3, r0
 800c2ea:	4637      	mov	r7, r6
 800c2ec:	dc05      	bgt.n	800c2fa <__swbuf_r+0x4e>
 800c2ee:	4621      	mov	r1, r4
 800c2f0:	4628      	mov	r0, r5
 800c2f2:	f7ff f831 	bl	800b358 <_fflush_r>
 800c2f6:	2800      	cmp	r0, #0
 800c2f8:	d1ed      	bne.n	800c2d6 <__swbuf_r+0x2a>
 800c2fa:	68a3      	ldr	r3, [r4, #8]
 800c2fc:	3b01      	subs	r3, #1
 800c2fe:	60a3      	str	r3, [r4, #8]
 800c300:	6823      	ldr	r3, [r4, #0]
 800c302:	1c5a      	adds	r2, r3, #1
 800c304:	6022      	str	r2, [r4, #0]
 800c306:	701e      	strb	r6, [r3, #0]
 800c308:	6962      	ldr	r2, [r4, #20]
 800c30a:	1c43      	adds	r3, r0, #1
 800c30c:	429a      	cmp	r2, r3
 800c30e:	d004      	beq.n	800c31a <__swbuf_r+0x6e>
 800c310:	89a3      	ldrh	r3, [r4, #12]
 800c312:	07db      	lsls	r3, r3, #31
 800c314:	d5e1      	bpl.n	800c2da <__swbuf_r+0x2e>
 800c316:	2e0a      	cmp	r6, #10
 800c318:	d1df      	bne.n	800c2da <__swbuf_r+0x2e>
 800c31a:	4621      	mov	r1, r4
 800c31c:	4628      	mov	r0, r5
 800c31e:	f7ff f81b 	bl	800b358 <_fflush_r>
 800c322:	2800      	cmp	r0, #0
 800c324:	d0d9      	beq.n	800c2da <__swbuf_r+0x2e>
 800c326:	e7d6      	b.n	800c2d6 <__swbuf_r+0x2a>

0800c328 <__swsetup_r>:
 800c328:	b538      	push	{r3, r4, r5, lr}
 800c32a:	4b29      	ldr	r3, [pc, #164]	@ (800c3d0 <__swsetup_r+0xa8>)
 800c32c:	4605      	mov	r5, r0
 800c32e:	6818      	ldr	r0, [r3, #0]
 800c330:	460c      	mov	r4, r1
 800c332:	b118      	cbz	r0, 800c33c <__swsetup_r+0x14>
 800c334:	6a03      	ldr	r3, [r0, #32]
 800c336:	b90b      	cbnz	r3, 800c33c <__swsetup_r+0x14>
 800c338:	f7fc fcc0 	bl	8008cbc <__sinit>
 800c33c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c340:	0719      	lsls	r1, r3, #28
 800c342:	d422      	bmi.n	800c38a <__swsetup_r+0x62>
 800c344:	06da      	lsls	r2, r3, #27
 800c346:	d407      	bmi.n	800c358 <__swsetup_r+0x30>
 800c348:	2209      	movs	r2, #9
 800c34a:	602a      	str	r2, [r5, #0]
 800c34c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c350:	81a3      	strh	r3, [r4, #12]
 800c352:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c356:	e033      	b.n	800c3c0 <__swsetup_r+0x98>
 800c358:	0758      	lsls	r0, r3, #29
 800c35a:	d512      	bpl.n	800c382 <__swsetup_r+0x5a>
 800c35c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c35e:	b141      	cbz	r1, 800c372 <__swsetup_r+0x4a>
 800c360:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c364:	4299      	cmp	r1, r3
 800c366:	d002      	beq.n	800c36e <__swsetup_r+0x46>
 800c368:	4628      	mov	r0, r5
 800c36a:	f7ff fdf3 	bl	800bf54 <_free_r>
 800c36e:	2300      	movs	r3, #0
 800c370:	6363      	str	r3, [r4, #52]	@ 0x34
 800c372:	89a3      	ldrh	r3, [r4, #12]
 800c374:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c378:	81a3      	strh	r3, [r4, #12]
 800c37a:	2300      	movs	r3, #0
 800c37c:	6063      	str	r3, [r4, #4]
 800c37e:	6923      	ldr	r3, [r4, #16]
 800c380:	6023      	str	r3, [r4, #0]
 800c382:	89a3      	ldrh	r3, [r4, #12]
 800c384:	f043 0308 	orr.w	r3, r3, #8
 800c388:	81a3      	strh	r3, [r4, #12]
 800c38a:	6923      	ldr	r3, [r4, #16]
 800c38c:	b94b      	cbnz	r3, 800c3a2 <__swsetup_r+0x7a>
 800c38e:	89a3      	ldrh	r3, [r4, #12]
 800c390:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c394:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c398:	d003      	beq.n	800c3a2 <__swsetup_r+0x7a>
 800c39a:	4621      	mov	r1, r4
 800c39c:	4628      	mov	r0, r5
 800c39e:	f000 f83f 	bl	800c420 <__smakebuf_r>
 800c3a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3a6:	f013 0201 	ands.w	r2, r3, #1
 800c3aa:	d00a      	beq.n	800c3c2 <__swsetup_r+0x9a>
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	60a2      	str	r2, [r4, #8]
 800c3b0:	6962      	ldr	r2, [r4, #20]
 800c3b2:	4252      	negs	r2, r2
 800c3b4:	61a2      	str	r2, [r4, #24]
 800c3b6:	6922      	ldr	r2, [r4, #16]
 800c3b8:	b942      	cbnz	r2, 800c3cc <__swsetup_r+0xa4>
 800c3ba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c3be:	d1c5      	bne.n	800c34c <__swsetup_r+0x24>
 800c3c0:	bd38      	pop	{r3, r4, r5, pc}
 800c3c2:	0799      	lsls	r1, r3, #30
 800c3c4:	bf58      	it	pl
 800c3c6:	6962      	ldrpl	r2, [r4, #20]
 800c3c8:	60a2      	str	r2, [r4, #8]
 800c3ca:	e7f4      	b.n	800c3b6 <__swsetup_r+0x8e>
 800c3cc:	2000      	movs	r0, #0
 800c3ce:	e7f7      	b.n	800c3c0 <__swsetup_r+0x98>
 800c3d0:	20000188 	.word	0x20000188

0800c3d4 <__swhatbuf_r>:
 800c3d4:	b570      	push	{r4, r5, r6, lr}
 800c3d6:	460c      	mov	r4, r1
 800c3d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3dc:	2900      	cmp	r1, #0
 800c3de:	b096      	sub	sp, #88	@ 0x58
 800c3e0:	4615      	mov	r5, r2
 800c3e2:	461e      	mov	r6, r3
 800c3e4:	da0d      	bge.n	800c402 <__swhatbuf_r+0x2e>
 800c3e6:	89a3      	ldrh	r3, [r4, #12]
 800c3e8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c3ec:	f04f 0100 	mov.w	r1, #0
 800c3f0:	bf14      	ite	ne
 800c3f2:	2340      	movne	r3, #64	@ 0x40
 800c3f4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c3f8:	2000      	movs	r0, #0
 800c3fa:	6031      	str	r1, [r6, #0]
 800c3fc:	602b      	str	r3, [r5, #0]
 800c3fe:	b016      	add	sp, #88	@ 0x58
 800c400:	bd70      	pop	{r4, r5, r6, pc}
 800c402:	466a      	mov	r2, sp
 800c404:	f000 f89c 	bl	800c540 <_fstat_r>
 800c408:	2800      	cmp	r0, #0
 800c40a:	dbec      	blt.n	800c3e6 <__swhatbuf_r+0x12>
 800c40c:	9901      	ldr	r1, [sp, #4]
 800c40e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c412:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c416:	4259      	negs	r1, r3
 800c418:	4159      	adcs	r1, r3
 800c41a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c41e:	e7eb      	b.n	800c3f8 <__swhatbuf_r+0x24>

0800c420 <__smakebuf_r>:
 800c420:	898b      	ldrh	r3, [r1, #12]
 800c422:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c424:	079d      	lsls	r5, r3, #30
 800c426:	4606      	mov	r6, r0
 800c428:	460c      	mov	r4, r1
 800c42a:	d507      	bpl.n	800c43c <__smakebuf_r+0x1c>
 800c42c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c430:	6023      	str	r3, [r4, #0]
 800c432:	6123      	str	r3, [r4, #16]
 800c434:	2301      	movs	r3, #1
 800c436:	6163      	str	r3, [r4, #20]
 800c438:	b003      	add	sp, #12
 800c43a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c43c:	ab01      	add	r3, sp, #4
 800c43e:	466a      	mov	r2, sp
 800c440:	f7ff ffc8 	bl	800c3d4 <__swhatbuf_r>
 800c444:	9f00      	ldr	r7, [sp, #0]
 800c446:	4605      	mov	r5, r0
 800c448:	4639      	mov	r1, r7
 800c44a:	4630      	mov	r0, r6
 800c44c:	f7fe fe6e 	bl	800b12c <_malloc_r>
 800c450:	b948      	cbnz	r0, 800c466 <__smakebuf_r+0x46>
 800c452:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c456:	059a      	lsls	r2, r3, #22
 800c458:	d4ee      	bmi.n	800c438 <__smakebuf_r+0x18>
 800c45a:	f023 0303 	bic.w	r3, r3, #3
 800c45e:	f043 0302 	orr.w	r3, r3, #2
 800c462:	81a3      	strh	r3, [r4, #12]
 800c464:	e7e2      	b.n	800c42c <__smakebuf_r+0xc>
 800c466:	89a3      	ldrh	r3, [r4, #12]
 800c468:	6020      	str	r0, [r4, #0]
 800c46a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c46e:	81a3      	strh	r3, [r4, #12]
 800c470:	9b01      	ldr	r3, [sp, #4]
 800c472:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c476:	b15b      	cbz	r3, 800c490 <__smakebuf_r+0x70>
 800c478:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c47c:	4630      	mov	r0, r6
 800c47e:	f000 f83b 	bl	800c4f8 <_isatty_r>
 800c482:	b128      	cbz	r0, 800c490 <__smakebuf_r+0x70>
 800c484:	89a3      	ldrh	r3, [r4, #12]
 800c486:	f023 0303 	bic.w	r3, r3, #3
 800c48a:	f043 0301 	orr.w	r3, r3, #1
 800c48e:	81a3      	strh	r3, [r4, #12]
 800c490:	89a3      	ldrh	r3, [r4, #12]
 800c492:	431d      	orrs	r5, r3
 800c494:	81a5      	strh	r5, [r4, #12]
 800c496:	e7cf      	b.n	800c438 <__smakebuf_r+0x18>

0800c498 <_raise_r>:
 800c498:	291f      	cmp	r1, #31
 800c49a:	b538      	push	{r3, r4, r5, lr}
 800c49c:	4605      	mov	r5, r0
 800c49e:	460c      	mov	r4, r1
 800c4a0:	d904      	bls.n	800c4ac <_raise_r+0x14>
 800c4a2:	2316      	movs	r3, #22
 800c4a4:	6003      	str	r3, [r0, #0]
 800c4a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c4aa:	bd38      	pop	{r3, r4, r5, pc}
 800c4ac:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c4ae:	b112      	cbz	r2, 800c4b6 <_raise_r+0x1e>
 800c4b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c4b4:	b94b      	cbnz	r3, 800c4ca <_raise_r+0x32>
 800c4b6:	4628      	mov	r0, r5
 800c4b8:	f000 f840 	bl	800c53c <_getpid_r>
 800c4bc:	4622      	mov	r2, r4
 800c4be:	4601      	mov	r1, r0
 800c4c0:	4628      	mov	r0, r5
 800c4c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c4c6:	f000 b827 	b.w	800c518 <_kill_r>
 800c4ca:	2b01      	cmp	r3, #1
 800c4cc:	d00a      	beq.n	800c4e4 <_raise_r+0x4c>
 800c4ce:	1c59      	adds	r1, r3, #1
 800c4d0:	d103      	bne.n	800c4da <_raise_r+0x42>
 800c4d2:	2316      	movs	r3, #22
 800c4d4:	6003      	str	r3, [r0, #0]
 800c4d6:	2001      	movs	r0, #1
 800c4d8:	e7e7      	b.n	800c4aa <_raise_r+0x12>
 800c4da:	2100      	movs	r1, #0
 800c4dc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c4e0:	4620      	mov	r0, r4
 800c4e2:	4798      	blx	r3
 800c4e4:	2000      	movs	r0, #0
 800c4e6:	e7e0      	b.n	800c4aa <_raise_r+0x12>

0800c4e8 <raise>:
 800c4e8:	4b02      	ldr	r3, [pc, #8]	@ (800c4f4 <raise+0xc>)
 800c4ea:	4601      	mov	r1, r0
 800c4ec:	6818      	ldr	r0, [r3, #0]
 800c4ee:	f7ff bfd3 	b.w	800c498 <_raise_r>
 800c4f2:	bf00      	nop
 800c4f4:	20000188 	.word	0x20000188

0800c4f8 <_isatty_r>:
 800c4f8:	b538      	push	{r3, r4, r5, lr}
 800c4fa:	4d06      	ldr	r5, [pc, #24]	@ (800c514 <_isatty_r+0x1c>)
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	4604      	mov	r4, r0
 800c500:	4608      	mov	r0, r1
 800c502:	602b      	str	r3, [r5, #0]
 800c504:	f7f6 fbb4 	bl	8002c70 <_isatty>
 800c508:	1c43      	adds	r3, r0, #1
 800c50a:	d102      	bne.n	800c512 <_isatty_r+0x1a>
 800c50c:	682b      	ldr	r3, [r5, #0]
 800c50e:	b103      	cbz	r3, 800c512 <_isatty_r+0x1a>
 800c510:	6023      	str	r3, [r4, #0]
 800c512:	bd38      	pop	{r3, r4, r5, pc}
 800c514:	200006bc 	.word	0x200006bc

0800c518 <_kill_r>:
 800c518:	b538      	push	{r3, r4, r5, lr}
 800c51a:	4d07      	ldr	r5, [pc, #28]	@ (800c538 <_kill_r+0x20>)
 800c51c:	2300      	movs	r3, #0
 800c51e:	4604      	mov	r4, r0
 800c520:	4608      	mov	r0, r1
 800c522:	4611      	mov	r1, r2
 800c524:	602b      	str	r3, [r5, #0]
 800c526:	f7f6 fb4f 	bl	8002bc8 <_kill>
 800c52a:	1c43      	adds	r3, r0, #1
 800c52c:	d102      	bne.n	800c534 <_kill_r+0x1c>
 800c52e:	682b      	ldr	r3, [r5, #0]
 800c530:	b103      	cbz	r3, 800c534 <_kill_r+0x1c>
 800c532:	6023      	str	r3, [r4, #0]
 800c534:	bd38      	pop	{r3, r4, r5, pc}
 800c536:	bf00      	nop
 800c538:	200006bc 	.word	0x200006bc

0800c53c <_getpid_r>:
 800c53c:	f7f6 bb3c 	b.w	8002bb8 <_getpid>

0800c540 <_fstat_r>:
 800c540:	b538      	push	{r3, r4, r5, lr}
 800c542:	4d07      	ldr	r5, [pc, #28]	@ (800c560 <_fstat_r+0x20>)
 800c544:	2300      	movs	r3, #0
 800c546:	4604      	mov	r4, r0
 800c548:	4608      	mov	r0, r1
 800c54a:	4611      	mov	r1, r2
 800c54c:	602b      	str	r3, [r5, #0]
 800c54e:	f7f6 fb7f 	bl	8002c50 <_fstat>
 800c552:	1c43      	adds	r3, r0, #1
 800c554:	d102      	bne.n	800c55c <_fstat_r+0x1c>
 800c556:	682b      	ldr	r3, [r5, #0]
 800c558:	b103      	cbz	r3, 800c55c <_fstat_r+0x1c>
 800c55a:	6023      	str	r3, [r4, #0]
 800c55c:	bd38      	pop	{r3, r4, r5, pc}
 800c55e:	bf00      	nop
 800c560:	200006bc 	.word	0x200006bc

0800c564 <atan2f>:
 800c564:	f000 b81e 	b.w	800c5a4 <__ieee754_atan2f>

0800c568 <sqrtf>:
 800c568:	b508      	push	{r3, lr}
 800c56a:	ed2d 8b02 	vpush	{d8}
 800c56e:	eeb0 8a40 	vmov.f32	s16, s0
 800c572:	f000 f8b7 	bl	800c6e4 <__ieee754_sqrtf>
 800c576:	eeb4 8a48 	vcmp.f32	s16, s16
 800c57a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c57e:	d60c      	bvs.n	800c59a <sqrtf+0x32>
 800c580:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800c5a0 <sqrtf+0x38>
 800c584:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c58c:	d505      	bpl.n	800c59a <sqrtf+0x32>
 800c58e:	f7fd fa69 	bl	8009a64 <__errno>
 800c592:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800c596:	2321      	movs	r3, #33	@ 0x21
 800c598:	6003      	str	r3, [r0, #0]
 800c59a:	ecbd 8b02 	vpop	{d8}
 800c59e:	bd08      	pop	{r3, pc}
 800c5a0:	00000000 	.word	0x00000000

0800c5a4 <__ieee754_atan2f>:
 800c5a4:	ee10 2a90 	vmov	r2, s1
 800c5a8:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800c5ac:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800c5b0:	b510      	push	{r4, lr}
 800c5b2:	eef0 7a40 	vmov.f32	s15, s0
 800c5b6:	d806      	bhi.n	800c5c6 <__ieee754_atan2f+0x22>
 800c5b8:	ee10 0a10 	vmov	r0, s0
 800c5bc:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800c5c0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c5c4:	d904      	bls.n	800c5d0 <__ieee754_atan2f+0x2c>
 800c5c6:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800c5ca:	eeb0 0a67 	vmov.f32	s0, s15
 800c5ce:	bd10      	pop	{r4, pc}
 800c5d0:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800c5d4:	d103      	bne.n	800c5de <__ieee754_atan2f+0x3a>
 800c5d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c5da:	f000 b887 	b.w	800c6ec <atanf>
 800c5de:	1794      	asrs	r4, r2, #30
 800c5e0:	f004 0402 	and.w	r4, r4, #2
 800c5e4:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800c5e8:	b943      	cbnz	r3, 800c5fc <__ieee754_atan2f+0x58>
 800c5ea:	2c02      	cmp	r4, #2
 800c5ec:	d05e      	beq.n	800c6ac <__ieee754_atan2f+0x108>
 800c5ee:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800c6c0 <__ieee754_atan2f+0x11c>
 800c5f2:	2c03      	cmp	r4, #3
 800c5f4:	bf08      	it	eq
 800c5f6:	eef0 7a47 	vmoveq.f32	s15, s14
 800c5fa:	e7e6      	b.n	800c5ca <__ieee754_atan2f+0x26>
 800c5fc:	b941      	cbnz	r1, 800c610 <__ieee754_atan2f+0x6c>
 800c5fe:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800c6c4 <__ieee754_atan2f+0x120>
 800c602:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800c6c8 <__ieee754_atan2f+0x124>
 800c606:	2800      	cmp	r0, #0
 800c608:	bfa8      	it	ge
 800c60a:	eef0 7a47 	vmovge.f32	s15, s14
 800c60e:	e7dc      	b.n	800c5ca <__ieee754_atan2f+0x26>
 800c610:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800c614:	d110      	bne.n	800c638 <__ieee754_atan2f+0x94>
 800c616:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c61a:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 800c61e:	d107      	bne.n	800c630 <__ieee754_atan2f+0x8c>
 800c620:	2c02      	cmp	r4, #2
 800c622:	d846      	bhi.n	800c6b2 <__ieee754_atan2f+0x10e>
 800c624:	4b29      	ldr	r3, [pc, #164]	@ (800c6cc <__ieee754_atan2f+0x128>)
 800c626:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c62a:	edd3 7a00 	vldr	s15, [r3]
 800c62e:	e7cc      	b.n	800c5ca <__ieee754_atan2f+0x26>
 800c630:	2c02      	cmp	r4, #2
 800c632:	d841      	bhi.n	800c6b8 <__ieee754_atan2f+0x114>
 800c634:	4b26      	ldr	r3, [pc, #152]	@ (800c6d0 <__ieee754_atan2f+0x12c>)
 800c636:	e7f6      	b.n	800c626 <__ieee754_atan2f+0x82>
 800c638:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c63c:	d0df      	beq.n	800c5fe <__ieee754_atan2f+0x5a>
 800c63e:	1a5b      	subs	r3, r3, r1
 800c640:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800c644:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800c648:	da1a      	bge.n	800c680 <__ieee754_atan2f+0xdc>
 800c64a:	2a00      	cmp	r2, #0
 800c64c:	da01      	bge.n	800c652 <__ieee754_atan2f+0xae>
 800c64e:	313c      	adds	r1, #60	@ 0x3c
 800c650:	db19      	blt.n	800c686 <__ieee754_atan2f+0xe2>
 800c652:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800c656:	f000 f91d 	bl	800c894 <fabsf>
 800c65a:	f000 f847 	bl	800c6ec <atanf>
 800c65e:	eef0 7a40 	vmov.f32	s15, s0
 800c662:	2c01      	cmp	r4, #1
 800c664:	d012      	beq.n	800c68c <__ieee754_atan2f+0xe8>
 800c666:	2c02      	cmp	r4, #2
 800c668:	d017      	beq.n	800c69a <__ieee754_atan2f+0xf6>
 800c66a:	2c00      	cmp	r4, #0
 800c66c:	d0ad      	beq.n	800c5ca <__ieee754_atan2f+0x26>
 800c66e:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800c6d4 <__ieee754_atan2f+0x130>
 800c672:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c676:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800c6d8 <__ieee754_atan2f+0x134>
 800c67a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c67e:	e7a4      	b.n	800c5ca <__ieee754_atan2f+0x26>
 800c680:	eddf 7a11 	vldr	s15, [pc, #68]	@ 800c6c8 <__ieee754_atan2f+0x124>
 800c684:	e7ed      	b.n	800c662 <__ieee754_atan2f+0xbe>
 800c686:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800c6dc <__ieee754_atan2f+0x138>
 800c68a:	e7ea      	b.n	800c662 <__ieee754_atan2f+0xbe>
 800c68c:	ee17 3a90 	vmov	r3, s15
 800c690:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800c694:	ee07 3a90 	vmov	s15, r3
 800c698:	e797      	b.n	800c5ca <__ieee754_atan2f+0x26>
 800c69a:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800c6d4 <__ieee754_atan2f+0x130>
 800c69e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c6a2:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800c6d8 <__ieee754_atan2f+0x134>
 800c6a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c6aa:	e78e      	b.n	800c5ca <__ieee754_atan2f+0x26>
 800c6ac:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800c6d8 <__ieee754_atan2f+0x134>
 800c6b0:	e78b      	b.n	800c5ca <__ieee754_atan2f+0x26>
 800c6b2:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800c6e0 <__ieee754_atan2f+0x13c>
 800c6b6:	e788      	b.n	800c5ca <__ieee754_atan2f+0x26>
 800c6b8:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800c6dc <__ieee754_atan2f+0x138>
 800c6bc:	e785      	b.n	800c5ca <__ieee754_atan2f+0x26>
 800c6be:	bf00      	nop
 800c6c0:	c0490fdb 	.word	0xc0490fdb
 800c6c4:	bfc90fdb 	.word	0xbfc90fdb
 800c6c8:	3fc90fdb 	.word	0x3fc90fdb
 800c6cc:	0800cd3c 	.word	0x0800cd3c
 800c6d0:	0800cd30 	.word	0x0800cd30
 800c6d4:	33bbbd2e 	.word	0x33bbbd2e
 800c6d8:	40490fdb 	.word	0x40490fdb
 800c6dc:	00000000 	.word	0x00000000
 800c6e0:	3f490fdb 	.word	0x3f490fdb

0800c6e4 <__ieee754_sqrtf>:
 800c6e4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c6e8:	4770      	bx	lr
	...

0800c6ec <atanf>:
 800c6ec:	b538      	push	{r3, r4, r5, lr}
 800c6ee:	ee10 5a10 	vmov	r5, s0
 800c6f2:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800c6f6:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800c6fa:	eef0 7a40 	vmov.f32	s15, s0
 800c6fe:	d310      	bcc.n	800c722 <atanf+0x36>
 800c700:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800c704:	d904      	bls.n	800c710 <atanf+0x24>
 800c706:	ee70 7a00 	vadd.f32	s15, s0, s0
 800c70a:	eeb0 0a67 	vmov.f32	s0, s15
 800c70e:	bd38      	pop	{r3, r4, r5, pc}
 800c710:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800c848 <atanf+0x15c>
 800c714:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800c84c <atanf+0x160>
 800c718:	2d00      	cmp	r5, #0
 800c71a:	bfc8      	it	gt
 800c71c:	eef0 7a47 	vmovgt.f32	s15, s14
 800c720:	e7f3      	b.n	800c70a <atanf+0x1e>
 800c722:	4b4b      	ldr	r3, [pc, #300]	@ (800c850 <atanf+0x164>)
 800c724:	429c      	cmp	r4, r3
 800c726:	d810      	bhi.n	800c74a <atanf+0x5e>
 800c728:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800c72c:	d20a      	bcs.n	800c744 <atanf+0x58>
 800c72e:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800c854 <atanf+0x168>
 800c732:	ee30 7a07 	vadd.f32	s14, s0, s14
 800c736:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c73a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800c73e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c742:	dce2      	bgt.n	800c70a <atanf+0x1e>
 800c744:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c748:	e013      	b.n	800c772 <atanf+0x86>
 800c74a:	f000 f8a3 	bl	800c894 <fabsf>
 800c74e:	4b42      	ldr	r3, [pc, #264]	@ (800c858 <atanf+0x16c>)
 800c750:	429c      	cmp	r4, r3
 800c752:	d84f      	bhi.n	800c7f4 <atanf+0x108>
 800c754:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800c758:	429c      	cmp	r4, r3
 800c75a:	d841      	bhi.n	800c7e0 <atanf+0xf4>
 800c75c:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800c760:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800c764:	eea0 7a27 	vfma.f32	s14, s0, s15
 800c768:	2300      	movs	r3, #0
 800c76a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c76e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c772:	1c5a      	adds	r2, r3, #1
 800c774:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800c778:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800c85c <atanf+0x170>
 800c77c:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800c860 <atanf+0x174>
 800c780:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800c864 <atanf+0x178>
 800c784:	ee66 6a06 	vmul.f32	s13, s12, s12
 800c788:	eee6 5a87 	vfma.f32	s11, s13, s14
 800c78c:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800c868 <atanf+0x17c>
 800c790:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800c794:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800c86c <atanf+0x180>
 800c798:	eee7 5a26 	vfma.f32	s11, s14, s13
 800c79c:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800c870 <atanf+0x184>
 800c7a0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800c7a4:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800c874 <atanf+0x188>
 800c7a8:	eee7 5a26 	vfma.f32	s11, s14, s13
 800c7ac:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800c878 <atanf+0x18c>
 800c7b0:	eea6 5a87 	vfma.f32	s10, s13, s14
 800c7b4:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800c87c <atanf+0x190>
 800c7b8:	eea5 7a26 	vfma.f32	s14, s10, s13
 800c7bc:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800c880 <atanf+0x194>
 800c7c0:	eea7 5a26 	vfma.f32	s10, s14, s13
 800c7c4:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800c884 <atanf+0x198>
 800c7c8:	eea5 7a26 	vfma.f32	s14, s10, s13
 800c7cc:	ee27 7a26 	vmul.f32	s14, s14, s13
 800c7d0:	eea5 7a86 	vfma.f32	s14, s11, s12
 800c7d4:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c7d8:	d121      	bne.n	800c81e <atanf+0x132>
 800c7da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c7de:	e794      	b.n	800c70a <atanf+0x1e>
 800c7e0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800c7e4:	ee30 7a67 	vsub.f32	s14, s0, s15
 800c7e8:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c7ec:	2301      	movs	r3, #1
 800c7ee:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c7f2:	e7be      	b.n	800c772 <atanf+0x86>
 800c7f4:	4b24      	ldr	r3, [pc, #144]	@ (800c888 <atanf+0x19c>)
 800c7f6:	429c      	cmp	r4, r3
 800c7f8:	d80b      	bhi.n	800c812 <atanf+0x126>
 800c7fa:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800c7fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c802:	eea0 7a27 	vfma.f32	s14, s0, s15
 800c806:	2302      	movs	r3, #2
 800c808:	ee70 6a67 	vsub.f32	s13, s0, s15
 800c80c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c810:	e7af      	b.n	800c772 <atanf+0x86>
 800c812:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800c816:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c81a:	2303      	movs	r3, #3
 800c81c:	e7a9      	b.n	800c772 <atanf+0x86>
 800c81e:	4a1b      	ldr	r2, [pc, #108]	@ (800c88c <atanf+0x1a0>)
 800c820:	491b      	ldr	r1, [pc, #108]	@ (800c890 <atanf+0x1a4>)
 800c822:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800c826:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800c82a:	edd3 6a00 	vldr	s13, [r3]
 800c82e:	ee37 7a66 	vsub.f32	s14, s14, s13
 800c832:	2d00      	cmp	r5, #0
 800c834:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c838:	edd2 7a00 	vldr	s15, [r2]
 800c83c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c840:	bfb8      	it	lt
 800c842:	eef1 7a67 	vneglt.f32	s15, s15
 800c846:	e760      	b.n	800c70a <atanf+0x1e>
 800c848:	bfc90fdb 	.word	0xbfc90fdb
 800c84c:	3fc90fdb 	.word	0x3fc90fdb
 800c850:	3edfffff 	.word	0x3edfffff
 800c854:	7149f2ca 	.word	0x7149f2ca
 800c858:	3f97ffff 	.word	0x3f97ffff
 800c85c:	3c8569d7 	.word	0x3c8569d7
 800c860:	3d4bda59 	.word	0x3d4bda59
 800c864:	bd6ef16b 	.word	0xbd6ef16b
 800c868:	3d886b35 	.word	0x3d886b35
 800c86c:	3dba2e6e 	.word	0x3dba2e6e
 800c870:	3e124925 	.word	0x3e124925
 800c874:	3eaaaaab 	.word	0x3eaaaaab
 800c878:	bd15a221 	.word	0xbd15a221
 800c87c:	bd9d8795 	.word	0xbd9d8795
 800c880:	bde38e38 	.word	0xbde38e38
 800c884:	be4ccccd 	.word	0xbe4ccccd
 800c888:	401bffff 	.word	0x401bffff
 800c88c:	0800cd58 	.word	0x0800cd58
 800c890:	0800cd48 	.word	0x0800cd48

0800c894 <fabsf>:
 800c894:	ee10 3a10 	vmov	r3, s0
 800c898:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c89c:	ee00 3a10 	vmov	s0, r3
 800c8a0:	4770      	bx	lr
	...

0800c8a4 <_init>:
 800c8a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8a6:	bf00      	nop
 800c8a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8aa:	bc08      	pop	{r3}
 800c8ac:	469e      	mov	lr, r3
 800c8ae:	4770      	bx	lr

0800c8b0 <_fini>:
 800c8b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8b2:	bf00      	nop
 800c8b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8b6:	bc08      	pop	{r3}
 800c8b8:	469e      	mov	lr, r3
 800c8ba:	4770      	bx	lr
