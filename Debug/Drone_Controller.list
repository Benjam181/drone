
Drone_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb70  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a8  0800cd00  0800cd00  0000dd00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d1a8  0800d1a8  0000f1e8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d1a8  0800d1a8  0000e1a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d1b0  0800d1b0  0000f1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d1b0  0800d1b0  0000e1b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d1b4  0800d1b4  0000e1b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800d1b8  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000514  200001e8  0800d3a0  0000f1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006fc  0800d3a0  0000f6fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001489e  00000000  00000000  0000f218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028f5  00000000  00000000  00023ab6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012e0  00000000  00000000  000263b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ed1  00000000  00000000  00027690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028608  00000000  00000000  00028561  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001638e  00000000  00000000  00050b69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7f30  00000000  00000000  00066ef7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015ee27  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066e0  00000000  00000000  0015ee6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0016554c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cce8 	.word	0x0800cce8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800cce8 	.word	0x0800cce8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <PID_Init>:
#include "PID.h"

void PID_Init(PID *pid, float kp, float ki, float kd, float dt, float u_min, float u_max) {
 8001020:	b480      	push	{r7}
 8001022:	b089      	sub	sp, #36	@ 0x24
 8001024:	af00      	add	r7, sp, #0
 8001026:	61f8      	str	r0, [r7, #28]
 8001028:	ed87 0a06 	vstr	s0, [r7, #24]
 800102c:	edc7 0a05 	vstr	s1, [r7, #20]
 8001030:	ed87 1a04 	vstr	s2, [r7, #16]
 8001034:	edc7 1a03 	vstr	s3, [r7, #12]
 8001038:	ed87 2a02 	vstr	s4, [r7, #8]
 800103c:	edc7 2a01 	vstr	s5, [r7, #4]
    pid->kp = kp;
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	601a      	str	r2, [r3, #0]
    pid->ki = ki;
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	697a      	ldr	r2, [r7, #20]
 800104a:	605a      	str	r2, [r3, #4]
    pid->kd = kd;
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	609a      	str	r2, [r3, #8]
    pid->dt = dt;
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	68fa      	ldr	r2, [r7, #12]
 8001056:	60da      	str	r2, [r3, #12]
    pid->integral = 0.0f;
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	f04f 0200 	mov.w	r2, #0
 800105e:	611a      	str	r2, [r3, #16]
    pid->previous_error = 0.0f;
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	f04f 0200 	mov.w	r2, #0
 8001066:	615a      	str	r2, [r3, #20]
    pid->anti_windup = 100.0f; // Initialize anti-windup term
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	4a07      	ldr	r2, [pc, #28]	@ (8001088 <PID_Init+0x68>)
 800106c:	619a      	str	r2, [r3, #24]
    pid->u_min = u_min; // Minimum output value
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	68ba      	ldr	r2, [r7, #8]
 8001072:	61da      	str	r2, [r3, #28]
    pid->u_max = u_max; // Maximum output value
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	687a      	ldr	r2, [r7, #4]
 8001078:	621a      	str	r2, [r3, #32]
}
 800107a:	bf00      	nop
 800107c:	3724      	adds	r7, #36	@ 0x24
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	42c80000 	.word	0x42c80000

0800108c <PID_Compute>:

float PID_Compute(PID *pid, float setpoint, float measured_value) {
 800108c:	b580      	push	{r7, lr}
 800108e:	b088      	sub	sp, #32
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	ed87 0a02 	vstr	s0, [r7, #8]
 8001098:	edc7 0a01 	vstr	s1, [r7, #4]
    // Calculate error
    float error = setpoint - measured_value;
 800109c:	ed97 7a02 	vldr	s14, [r7, #8]
 80010a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80010a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010a8:	edc7 7a07 	vstr	s15, [r7, #28]

    // Proportional term
    float proportional = pid->kp * error;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	edd3 7a00 	vldr	s15, [r3]
 80010b2:	ed97 7a07 	vldr	s14, [r7, #28]
 80010b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010ba:	edc7 7a06 	vstr	s15, [r7, #24]

    // Integral term
    pid->integral += pid->ki * error * pid->dt;
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	ed93 7a04 	vldr	s14, [r3, #16]
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	edd3 6a01 	vldr	s13, [r3, #4]
 80010ca:	edd7 7a07 	vldr	s15, [r7, #28]
 80010ce:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	edd3 7a03 	vldr	s15, [r3, #12]
 80010d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	edc3 7a04 	vstr	s15, [r3, #16]

    // Anti-windup
    if (pid->integral > pid->anti_windup) {
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	ed93 7a04 	vldr	s14, [r3, #16]
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	edd3 7a06 	vldr	s15, [r3, #24]
 80010f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010fa:	dd04      	ble.n	8001106 <PID_Compute+0x7a>
        pid->integral = pid->anti_windup;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	699a      	ldr	r2, [r3, #24]
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	611a      	str	r2, [r3, #16]
 8001104:	e014      	b.n	8001130 <PID_Compute+0xa4>
    } else if (pid->integral < -pid->anti_windup) {
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	ed93 7a04 	vldr	s14, [r3, #16]
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001112:	eef1 7a67 	vneg.f32	s15, s15
 8001116:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800111a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800111e:	d507      	bpl.n	8001130 <PID_Compute+0xa4>
        pid->integral = -pid->anti_windup;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	edd3 7a06 	vldr	s15, [r3, #24]
 8001126:	eef1 7a67 	vneg.f32	s15, s15
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	edc3 7a04 	vstr	s15, [r3, #16]
    }

    // Derivative term
    float derivative = pid->kd * (error - pid->previous_error) / pid->dt;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	ed93 7a02 	vldr	s14, [r3, #8]
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	edd3 7a05 	vldr	s15, [r3, #20]
 800113c:	edd7 6a07 	vldr	s13, [r7, #28]
 8001140:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001144:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	ed93 7a03 	vldr	s14, [r3, #12]
 800114e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001152:	edc7 7a05 	vstr	s15, [r7, #20]

    // Update previous error
    pid->previous_error = error;
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	69fa      	ldr	r2, [r7, #28]
 800115a:	615a      	str	r2, [r3, #20]

    // Compute output
    return fminf((fmaxf(proportional + pid->integral + derivative, pid->u_min)), pid->u_max);
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001162:	edd7 7a06 	vldr	s15, [r7, #24]
 8001166:	ee37 7a27 	vadd.f32	s14, s14, s15
 800116a:	edd7 7a05 	vldr	s15, [r7, #20]
 800116e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	ed93 7a07 	vldr	s14, [r3, #28]
 8001178:	eef0 0a47 	vmov.f32	s1, s14
 800117c:	eeb0 0a67 	vmov.f32	s0, s15
 8001180:	f00b fc7f 	bl	800ca82 <fmaxf>
 8001184:	eeb0 7a40 	vmov.f32	s14, s0
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	edd3 7a08 	vldr	s15, [r3, #32]
 800118e:	eef0 0a67 	vmov.f32	s1, s15
 8001192:	eeb0 0a47 	vmov.f32	s0, s14
 8001196:	f00b fc91 	bl	800cabc <fminf>
 800119a:	eef0 7a40 	vmov.f32	s15, s0
}
 800119e:	eeb0 0a67 	vmov.f32	s0, s15
 80011a2:	3720      	adds	r7, #32
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <Accelerometer_Init>:
 * and ensures it is ready for operation.
 *
 * @note This function should be called before attempting to read data from the accelerometer.
 */
void Accelerometer_Init(I2C_HandleTypeDef *hi2c)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b088      	sub	sp, #32
 80011ac:	af04      	add	r7, sp, #16
 80011ae:	6078      	str	r0, [r7, #4]
    uint8_t data = 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	73fb      	strb	r3, [r7, #15]
    uint8_t check;
    // Read WHO_AM_I register (0x75) to check if the device is connected
    HAL_I2C_Mem_Read(hi2c, MPU6050_ADDR, 0x75, 1, &check, 1, 1000);
 80011b4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011b8:	9302      	str	r3, [sp, #8]
 80011ba:	2301      	movs	r3, #1
 80011bc:	9301      	str	r3, [sp, #4]
 80011be:	f107 030e 	add.w	r3, r7, #14
 80011c2:	9300      	str	r3, [sp, #0]
 80011c4:	2301      	movs	r3, #1
 80011c6:	2275      	movs	r2, #117	@ 0x75
 80011c8:	21d0      	movs	r1, #208	@ 0xd0
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f002 fcc8 	bl	8003b60 <HAL_I2C_Mem_Read>
    if (check != 0x68) {
 80011d0:	7bbb      	ldrb	r3, [r7, #14]
 80011d2:	2b68      	cmp	r3, #104	@ 0x68
 80011d4:	d13e      	bne.n	8001254 <Accelerometer_Init+0xac>
        // Device not found, handle error
        return;
    }
    // PWR_MGMT_1 Register (0x6B) : wake-up
    HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, 0x6B, 1, &data, 1, 1000);
 80011d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011da:	9302      	str	r3, [sp, #8]
 80011dc:	2301      	movs	r3, #1
 80011de:	9301      	str	r3, [sp, #4]
 80011e0:	f107 030f 	add.w	r3, r7, #15
 80011e4:	9300      	str	r3, [sp, #0]
 80011e6:	2301      	movs	r3, #1
 80011e8:	226b      	movs	r2, #107	@ 0x6b
 80011ea:	21d0      	movs	r1, #208	@ 0xd0
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f002 fba3 	bl	8003938 <HAL_I2C_Mem_Write>
    // Set DATA RATE of 1kHz by writing SMPLRT_DIV register
    data = 0x07; // 1000 Hz / (1 + 7) = 125 Hz
 80011f2:	2307      	movs	r3, #7
 80011f4:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, 0x19, 1, &data, 1, 1000);
 80011f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011fa:	9302      	str	r3, [sp, #8]
 80011fc:	2301      	movs	r3, #1
 80011fe:	9301      	str	r3, [sp, #4]
 8001200:	f107 030f 	add.w	r3, r7, #15
 8001204:	9300      	str	r3, [sp, #0]
 8001206:	2301      	movs	r3, #1
 8001208:	2219      	movs	r2, #25
 800120a:	21d0      	movs	r1, #208	@ 0xd0
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f002 fb93 	bl	8003938 <HAL_I2C_Mem_Write>
    // Set accelerometer configuration in ACCEL_CONFIG Register (0x1C)
    data = 0x00; // ±2g full scale
 8001212:	2300      	movs	r3, #0
 8001214:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, 0x1C, 1, &data, 1, 1000);
 8001216:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800121a:	9302      	str	r3, [sp, #8]
 800121c:	2301      	movs	r3, #1
 800121e:	9301      	str	r3, [sp, #4]
 8001220:	f107 030f 	add.w	r3, r7, #15
 8001224:	9300      	str	r3, [sp, #0]
 8001226:	2301      	movs	r3, #1
 8001228:	221c      	movs	r2, #28
 800122a:	21d0      	movs	r1, #208	@ 0xd0
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f002 fb83 	bl	8003938 <HAL_I2C_Mem_Write>
    // set Gyroscopic configuration in GYRO_CONFIG Register (0x1B)
    data = 0x00; // ±250°/s full scale
 8001232:	2300      	movs	r3, #0
 8001234:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, 0x1B, 1, &data, 1, 1000);
 8001236:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800123a:	9302      	str	r3, [sp, #8]
 800123c:	2301      	movs	r3, #1
 800123e:	9301      	str	r3, [sp, #4]
 8001240:	f107 030f 	add.w	r3, r7, #15
 8001244:	9300      	str	r3, [sp, #0]
 8001246:	2301      	movs	r3, #1
 8001248:	221b      	movs	r2, #27
 800124a:	21d0      	movs	r1, #208	@ 0xd0
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f002 fb73 	bl	8003938 <HAL_I2C_Mem_Write>
 8001252:	e000      	b.n	8001256 <Accelerometer_Init+0xae>
        return;
 8001254:	bf00      	nop
}
 8001256:	3710      	adds	r7, #16
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <Accelerometer_Read>:
 * acceleration information.
 *
 * @return int Returns 0 on success, or a negative error code on failure.
 */
void Accelerometer_Read(I2C_HandleTypeDef *hi2c, AccelData *accel_data, GyroData *gyro_data)
{    
 800125c:	b580      	push	{r7, lr}
 800125e:	b08a      	sub	sp, #40	@ 0x28
 8001260:	af04      	add	r7, sp, #16
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from ACCEL_XOUT_H (0x3B) Register
    HAL_I2C_Mem_Read(hi2c, MPU6050_ADDR, 0x3B, 1, Rec_Data, 6, 1000);
 8001268:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800126c:	9302      	str	r3, [sp, #8]
 800126e:	2306      	movs	r3, #6
 8001270:	9301      	str	r3, [sp, #4]
 8001272:	f107 0310 	add.w	r3, r7, #16
 8001276:	9300      	str	r3, [sp, #0]
 8001278:	2301      	movs	r3, #1
 800127a:	223b      	movs	r2, #59	@ 0x3b
 800127c:	21d0      	movs	r1, #208	@ 0xd0
 800127e:	68f8      	ldr	r0, [r7, #12]
 8001280:	f002 fc6e 	bl	8003b60 <HAL_I2C_Mem_Read>
    // Convert the data to 16-bit signed integers
    accel_data->x = (int16_t)((Rec_Data[0] << 8) | Rec_Data[1]);
 8001284:	7c3b      	ldrb	r3, [r7, #16]
 8001286:	b21b      	sxth	r3, r3
 8001288:	021b      	lsls	r3, r3, #8
 800128a:	b21a      	sxth	r2, r3
 800128c:	7c7b      	ldrb	r3, [r7, #17]
 800128e:	b21b      	sxth	r3, r3
 8001290:	4313      	orrs	r3, r2
 8001292:	b21b      	sxth	r3, r3
 8001294:	ee07 3a90 	vmov	s15, r3
 8001298:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	edc3 7a00 	vstr	s15, [r3]
    accel_data->y = (int16_t)((Rec_Data[2] << 8) | Rec_Data[3]);
 80012a2:	7cbb      	ldrb	r3, [r7, #18]
 80012a4:	b21b      	sxth	r3, r3
 80012a6:	021b      	lsls	r3, r3, #8
 80012a8:	b21a      	sxth	r2, r3
 80012aa:	7cfb      	ldrb	r3, [r7, #19]
 80012ac:	b21b      	sxth	r3, r3
 80012ae:	4313      	orrs	r3, r2
 80012b0:	b21b      	sxth	r3, r3
 80012b2:	ee07 3a90 	vmov	s15, r3
 80012b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	edc3 7a01 	vstr	s15, [r3, #4]
    accel_data->z = (int16_t)((Rec_Data[4] << 8) | Rec_Data[5]);
 80012c0:	7d3b      	ldrb	r3, [r7, #20]
 80012c2:	b21b      	sxth	r3, r3
 80012c4:	021b      	lsls	r3, r3, #8
 80012c6:	b21a      	sxth	r2, r3
 80012c8:	7d7b      	ldrb	r3, [r7, #21]
 80012ca:	b21b      	sxth	r3, r3
 80012cc:	4313      	orrs	r3, r2
 80012ce:	b21b      	sxth	r3, r3
 80012d0:	ee07 3a90 	vmov	s15, r3
 80012d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	edc3 7a02 	vstr	s15, [r3, #8]
    // Convert raw value to g-force
    accel_data->x = (float)accel_data->x / 16384.0f; // For ±2g full scale
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	ed93 7a00 	vldr	s14, [r3]
 80012e4:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80013d4 <Accelerometer_Read+0x178>
 80012e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	edc3 7a00 	vstr	s15, [r3]
    accel_data->y = (float)accel_data->y / 16384.0f; 
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	ed93 7a01 	vldr	s14, [r3, #4]
 80012f8:	eddf 6a36 	vldr	s13, [pc, #216]	@ 80013d4 <Accelerometer_Read+0x178>
 80012fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	edc3 7a01 	vstr	s15, [r3, #4]
    accel_data->z = (float)accel_data->z / 16384.0f;
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	ed93 7a02 	vldr	s14, [r3, #8]
 800130c:	eddf 6a31 	vldr	s13, [pc, #196]	@ 80013d4 <Accelerometer_Read+0x178>
 8001310:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	edc3 7a02 	vstr	s15, [r3, #8]

    // Read 6 BYTES of data starting from GYRO_XOUT_H (0x43) Register
    HAL_I2C_Mem_Read(hi2c, MPU6050_ADDR, 0x43, 1, Rec_Data, 6, 1000);
 800131a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800131e:	9302      	str	r3, [sp, #8]
 8001320:	2306      	movs	r3, #6
 8001322:	9301      	str	r3, [sp, #4]
 8001324:	f107 0310 	add.w	r3, r7, #16
 8001328:	9300      	str	r3, [sp, #0]
 800132a:	2301      	movs	r3, #1
 800132c:	2243      	movs	r2, #67	@ 0x43
 800132e:	21d0      	movs	r1, #208	@ 0xd0
 8001330:	68f8      	ldr	r0, [r7, #12]
 8001332:	f002 fc15 	bl	8003b60 <HAL_I2C_Mem_Read>
    // Convert the data to 16-bit signed integers
    gyro_data->x = (int16_t)((Rec_Data[0] << 8) | Rec_Data[1]);
 8001336:	7c3b      	ldrb	r3, [r7, #16]
 8001338:	b21b      	sxth	r3, r3
 800133a:	021b      	lsls	r3, r3, #8
 800133c:	b21a      	sxth	r2, r3
 800133e:	7c7b      	ldrb	r3, [r7, #17]
 8001340:	b21b      	sxth	r3, r3
 8001342:	4313      	orrs	r3, r2
 8001344:	b21b      	sxth	r3, r3
 8001346:	ee07 3a90 	vmov	s15, r3
 800134a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	edc3 7a00 	vstr	s15, [r3]
    gyro_data->y = (int16_t)((Rec_Data[2] << 8) | Rec_Data[3]);
 8001354:	7cbb      	ldrb	r3, [r7, #18]
 8001356:	b21b      	sxth	r3, r3
 8001358:	021b      	lsls	r3, r3, #8
 800135a:	b21a      	sxth	r2, r3
 800135c:	7cfb      	ldrb	r3, [r7, #19]
 800135e:	b21b      	sxth	r3, r3
 8001360:	4313      	orrs	r3, r2
 8001362:	b21b      	sxth	r3, r3
 8001364:	ee07 3a90 	vmov	s15, r3
 8001368:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	edc3 7a01 	vstr	s15, [r3, #4]
    gyro_data->z = (int16_t)((Rec_Data[4] << 8) | Rec_Data[5]);
 8001372:	7d3b      	ldrb	r3, [r7, #20]
 8001374:	b21b      	sxth	r3, r3
 8001376:	021b      	lsls	r3, r3, #8
 8001378:	b21a      	sxth	r2, r3
 800137a:	7d7b      	ldrb	r3, [r7, #21]
 800137c:	b21b      	sxth	r3, r3
 800137e:	4313      	orrs	r3, r2
 8001380:	b21b      	sxth	r3, r3
 8001382:	ee07 3a90 	vmov	s15, r3
 8001386:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	edc3 7a02 	vstr	s15, [r3, #8]
    // Convert raw value to degrees per second
    gyro_data->x = (float)gyro_data->x / 131.0f; // For ±250°/s full scale
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	ed93 7a00 	vldr	s14, [r3]
 8001396:	eddf 6a10 	vldr	s13, [pc, #64]	@ 80013d8 <Accelerometer_Read+0x17c>
 800139a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	edc3 7a00 	vstr	s15, [r3]
    gyro_data->y = (float)gyro_data->y / 131.0f;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	ed93 7a01 	vldr	s14, [r3, #4]
 80013aa:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 80013d8 <Accelerometer_Read+0x17c>
 80013ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	edc3 7a01 	vstr	s15, [r3, #4]
    gyro_data->z = (float)gyro_data->z / 131.0f; 
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	ed93 7a02 	vldr	s14, [r3, #8]
 80013be:	eddf 6a06 	vldr	s13, [pc, #24]	@ 80013d8 <Accelerometer_Read+0x17c>
 80013c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80013cc:	bf00      	nop
 80013ce:	3718      	adds	r7, #24
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	46800000 	.word	0x46800000
 80013d8:	43030000 	.word	0x43030000
 80013dc:	00000000 	.word	0x00000000

080013e0 <angles_from_accel>:
 *
 * @param accel_data Structure containing accelerometer data (x, y, z).
 * @param pitch Pointer to store the calculated pitch angle (in degrees).
 * @param roll Pointer to store the calculated roll angle (in degrees).
 */
void angles_from_accel(AccelData accel_data, float *pitch, float *roll) {
 80013e0:	b580      	push	{r7, lr}
 80013e2:	ed2d 8b02 	vpush	{d8}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	eef0 6a40 	vmov.f32	s13, s0
 80013ee:	eeb0 7a60 	vmov.f32	s14, s1
 80013f2:	eef0 7a41 	vmov.f32	s15, s2
 80013f6:	60b8      	str	r0, [r7, #8]
 80013f8:	6079      	str	r1, [r7, #4]
 80013fa:	edc7 6a03 	vstr	s13, [r7, #12]
 80013fe:	ed87 7a04 	vstr	s14, [r7, #16]
 8001402:	edc7 7a05 	vstr	s15, [r7, #20]
    *pitch = atan2f(accel_data.y, sqrtf(accel_data.x * accel_data.x + accel_data.z * accel_data.z)) * (180.0f / M_PI);
 8001406:	ed97 8a04 	vldr	s16, [r7, #16]
 800140a:	ed97 7a03 	vldr	s14, [r7, #12]
 800140e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001412:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001416:	edd7 6a05 	vldr	s13, [r7, #20]
 800141a:	edd7 7a05 	vldr	s15, [r7, #20]
 800141e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001422:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001426:	eeb0 0a67 	vmov.f32	s0, s15
 800142a:	f00b fa69 	bl	800c900 <sqrtf>
 800142e:	eef0 7a40 	vmov.f32	s15, s0
 8001432:	eef0 0a67 	vmov.f32	s1, s15
 8001436:	eeb0 0a48 	vmov.f32	s0, s16
 800143a:	f00b fa5f 	bl	800c8fc <atan2f>
 800143e:	ee10 3a10 	vmov	r3, s0
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff f880 	bl	8000548 <__aeabi_f2d>
 8001448:	a323      	add	r3, pc, #140	@ (adr r3, 80014d8 <angles_from_accel+0xf8>)
 800144a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144e:	f7ff f8d3 	bl	80005f8 <__aeabi_dmul>
 8001452:	4602      	mov	r2, r0
 8001454:	460b      	mov	r3, r1
 8001456:	4610      	mov	r0, r2
 8001458:	4619      	mov	r1, r3
 800145a:	f7ff fbc5 	bl	8000be8 <__aeabi_d2f>
 800145e:	4602      	mov	r2, r0
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	601a      	str	r2, [r3, #0]
    *roll = atan2f(-accel_data.x, sqrtf(accel_data.y * accel_data.y + accel_data.z * accel_data.z)) * (180.0f / M_PI);
 8001464:	edd7 7a03 	vldr	s15, [r7, #12]
 8001468:	eeb1 8a67 	vneg.f32	s16, s15
 800146c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001470:	edd7 7a04 	vldr	s15, [r7, #16]
 8001474:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001478:	edd7 6a05 	vldr	s13, [r7, #20]
 800147c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001480:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001484:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001488:	eeb0 0a67 	vmov.f32	s0, s15
 800148c:	f00b fa38 	bl	800c900 <sqrtf>
 8001490:	eef0 7a40 	vmov.f32	s15, s0
 8001494:	eef0 0a67 	vmov.f32	s1, s15
 8001498:	eeb0 0a48 	vmov.f32	s0, s16
 800149c:	f00b fa2e 	bl	800c8fc <atan2f>
 80014a0:	ee10 3a10 	vmov	r3, s0
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff f84f 	bl	8000548 <__aeabi_f2d>
 80014aa:	a30b      	add	r3, pc, #44	@ (adr r3, 80014d8 <angles_from_accel+0xf8>)
 80014ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b0:	f7ff f8a2 	bl	80005f8 <__aeabi_dmul>
 80014b4:	4602      	mov	r2, r0
 80014b6:	460b      	mov	r3, r1
 80014b8:	4610      	mov	r0, r2
 80014ba:	4619      	mov	r1, r3
 80014bc:	f7ff fb94 	bl	8000be8 <__aeabi_d2f>
 80014c0:	4602      	mov	r2, r0
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	601a      	str	r2, [r3, #0]
}
 80014c6:	bf00      	nop
 80014c8:	3718      	adds	r7, #24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	ecbd 8b02 	vpop	{d8}
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	f3af 8000 	nop.w
 80014d8:	1a63c1f8 	.word	0x1a63c1f8
 80014dc:	404ca5dc 	.word	0x404ca5dc

080014e0 <angles_rate_from_gyro>:
 *
 * @param gyro_data Structure containing gyroscope data (x, y, z).
 * @param pitch_rate Pointer to store the calculated pitch rate (in degrees per second).
 * @param roll_rate Pointer to store the calculated roll rate (in degrees per second).
 */
void angles_rate_from_gyro(GyroData gyro_data, float *pitch_rate, float *roll_rate, float *yaw_rate) {
 80014e0:	b480      	push	{r7}
 80014e2:	b087      	sub	sp, #28
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	eef0 6a40 	vmov.f32	s13, s0
 80014ea:	eeb0 7a60 	vmov.f32	s14, s1
 80014ee:	eef0 7a41 	vmov.f32	s15, s2
 80014f2:	60b8      	str	r0, [r7, #8]
 80014f4:	6079      	str	r1, [r7, #4]
 80014f6:	603a      	str	r2, [r7, #0]
 80014f8:	edc7 6a03 	vstr	s13, [r7, #12]
 80014fc:	ed87 7a04 	vstr	s14, [r7, #16]
 8001500:	edc7 7a05 	vstr	s15, [r7, #20]
    *pitch_rate = gyro_data.y; // Gyro Y-axis for pitch rate
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	601a      	str	r2, [r3, #0]
    *roll_rate = gyro_data.x;  // Gyro X-axis for roll rate
 800150a:	68fa      	ldr	r2, [r7, #12]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	601a      	str	r2, [r3, #0]
    *yaw_rate = gyro_data.z;   // Gyro Z-axis for yaw rate
 8001510:	697a      	ldr	r2, [r7, #20]
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	601a      	str	r2, [r3, #0]
}
 8001516:	bf00      	nop
 8001518:	371c      	adds	r7, #28
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
	...

08001524 <Kalman_Init>:
 * @param init_covariance Initial estimate of the error covariance.
 * @param process_noise Process noise covariance (Q).
 * @param measurement_noise Measurement noise covariance (R).
 */
void Kalman_Init(Kalman_t *kalman_x, Kalman_t *kalman_y)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	6039      	str	r1, [r7, #0]
    // Initialize Kalman filter parameters for X, Y, and Z axes
    kalman_x->angle = 0.0f;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f04f 0200 	mov.w	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
    kalman_x->bias = 0.0f;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f04f 0200 	mov.w	r2, #0
 800153c:	605a      	str	r2, [r3, #4]
    kalman_x->rate = 0.0f;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f04f 0200 	mov.w	r2, #0
 8001544:	609a      	str	r2, [r3, #8]
    kalman_x->P[0][0] = 1.0f; // P[0][0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800154c:	60da      	str	r2, [r3, #12]
    kalman_x->P[0][1] = 0.0f; // P[0][1]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f04f 0200 	mov.w	r2, #0
 8001554:	611a      	str	r2, [r3, #16]
    kalman_x->P[1][0] = 0.0f; // P[1][0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f04f 0200 	mov.w	r2, #0
 800155c:	615a      	str	r2, [r3, #20]
    kalman_x->P[1][1] = 1.0f; // P[1][1]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001564:	619a      	str	r2, [r3, #24]
    kalman_x->Q_angle = 0.001f; // Process noise covariance for angle
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a19      	ldr	r2, [pc, #100]	@ (80015d0 <Kalman_Init+0xac>)
 800156a:	61da      	str	r2, [r3, #28]
    kalman_x->Q_bias = 0.003f; // Process noise covariance for bias
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4a19      	ldr	r2, [pc, #100]	@ (80015d4 <Kalman_Init+0xb0>)
 8001570:	621a      	str	r2, [r3, #32]
    kalman_x->R_measure = 0.03f; // Measurement noise covariance
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a18      	ldr	r2, [pc, #96]	@ (80015d8 <Kalman_Init+0xb4>)
 8001576:	625a      	str	r2, [r3, #36]	@ 0x24

    kalman_y->angle = 0.0f;
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	f04f 0200 	mov.w	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
    kalman_y->bias = 0.0f;
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	f04f 0200 	mov.w	r2, #0
 8001586:	605a      	str	r2, [r3, #4]
    kalman_y->rate = 0.0f;
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	f04f 0200 	mov.w	r2, #0
 800158e:	609a      	str	r2, [r3, #8]
    kalman_y->P[0][0] = 1.0f;
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001596:	60da      	str	r2, [r3, #12]
    kalman_y->P[0][1] = 0.0f;
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	f04f 0200 	mov.w	r2, #0
 800159e:	611a      	str	r2, [r3, #16]
    kalman_y->P[1][0] = 0.0f;
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	f04f 0200 	mov.w	r2, #0
 80015a6:	615a      	str	r2, [r3, #20]
    kalman_y->P[1][1] = 1.0f;
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80015ae:	619a      	str	r2, [r3, #24]
    kalman_y->Q_angle = 0.001f;
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	4a07      	ldr	r2, [pc, #28]	@ (80015d0 <Kalman_Init+0xac>)
 80015b4:	61da      	str	r2, [r3, #28]
    kalman_y->Q_bias = 0.003f;
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	4a06      	ldr	r2, [pc, #24]	@ (80015d4 <Kalman_Init+0xb0>)
 80015ba:	621a      	str	r2, [r3, #32]
    kalman_y->R_measure = 0.03f;
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	4a06      	ldr	r2, [pc, #24]	@ (80015d8 <Kalman_Init+0xb4>)
 80015c0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80015c2:	bf00      	nop
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	3a83126f 	.word	0x3a83126f
 80015d4:	3b449ba6 	.word	0x3b449ba6
 80015d8:	3cf5c28f 	.word	0x3cf5c28f

080015dc <Kalman_GetAngle>:
 * @param kalman Pointer to the Kalman filter structure for the axis.
 * @param acc_angle Angle measured from the accelerometer (in degrees).
 * @param gyro_rate Angular rate measured from the gyroscope (in degrees per second).
 * @param dt Time interval since the last update (in seconds).
 */
void Kalman_GetAngle(Kalman_t *kalman, float acc_angle, float gyro_rate, float dt) {
 80015dc:	b480      	push	{r7}
 80015de:	b08b      	sub	sp, #44	@ 0x2c
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	ed87 0a02 	vstr	s0, [r7, #8]
 80015e8:	edc7 0a01 	vstr	s1, [r7, #4]
 80015ec:	ed87 1a00 	vstr	s2, [r7]
    // 1. Prediction
    kalman->rate = gyro_rate - kalman->bias;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	edd3 7a01 	vldr	s15, [r3, #4]
 80015f6:	ed97 7a01 	vldr	s14, [r7, #4]
 80015fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	edc3 7a02 	vstr	s15, [r3, #8]
    kalman->angle += dt * kalman->rate;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	ed93 7a00 	vldr	s14, [r3]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001610:	edd7 7a00 	vldr	s15, [r7]
 8001614:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001618:	ee77 7a27 	vadd.f32	s15, s14, s15
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	edc3 7a00 	vstr	s15, [r3]

    // state covariance update
    kalman->P[0][0] += dt * (dt*kalman->P[1][1] - kalman->P[0][1] - kalman->P[1][0] + kalman->Q_angle);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	ed93 7a03 	vldr	s14, [r3, #12]
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	edd3 6a06 	vldr	s13, [r3, #24]
 800162e:	edd7 7a00 	vldr	s15, [r7]
 8001632:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	edd3 7a04 	vldr	s15, [r3, #16]
 800163c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	edd3 7a05 	vldr	s15, [r3, #20]
 8001646:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001650:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001654:	edd7 7a00 	vldr	s15, [r7]
 8001658:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800165c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	edc3 7a03 	vstr	s15, [r3, #12]
    kalman->P[0][1] -= dt * kalman->P[1][1];
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	ed93 7a04 	vldr	s14, [r3, #16]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	edd3 6a06 	vldr	s13, [r3, #24]
 8001672:	edd7 7a00 	vldr	s15, [r7]
 8001676:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800167a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	edc3 7a04 	vstr	s15, [r3, #16]
    kalman->P[1][0] -= dt * kalman->P[1][1];
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	ed93 7a05 	vldr	s14, [r3, #20]
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	edd3 6a06 	vldr	s13, [r3, #24]
 8001690:	edd7 7a00 	vldr	s15, [r7]
 8001694:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001698:	ee77 7a67 	vsub.f32	s15, s14, s15
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	edc3 7a05 	vstr	s15, [r3, #20]
    kalman->P[1][1] += kalman->Q_bias * dt;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	ed93 7a06 	vldr	s14, [r3, #24]
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	edd3 6a08 	vldr	s13, [r3, #32]
 80016ae:	edd7 7a00 	vldr	s15, [r7]
 80016b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	edc3 7a06 	vstr	s15, [r3, #24]

    // 2. update
    float y = acc_angle - kalman->angle; // innovation
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	edd3 7a00 	vldr	s15, [r3]
 80016c6:	ed97 7a02 	vldr	s14, [r7, #8]
 80016ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016ce:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float S = kalman->P[0][0] + kalman->R_measure; // incertitude innovation
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	ed93 7a03 	vldr	s14, [r3, #12]
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80016de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016e2:	edc7 7a08 	vstr	s15, [r7, #32]
    float K0 = kalman->P[0][0] / S;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	edd3 6a03 	vldr	s13, [r3, #12]
 80016ec:	ed97 7a08 	vldr	s14, [r7, #32]
 80016f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016f4:	edc7 7a07 	vstr	s15, [r7, #28]
    float K1 = kalman->P[1][0] / S;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	edd3 6a05 	vldr	s13, [r3, #20]
 80016fe:	ed97 7a08 	vldr	s14, [r7, #32]
 8001702:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001706:	edc7 7a06 	vstr	s15, [r7, #24]

    // state update
    kalman->angle += K0 * y;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	ed93 7a00 	vldr	s14, [r3]
 8001710:	edd7 6a07 	vldr	s13, [r7, #28]
 8001714:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001718:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800171c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	edc3 7a00 	vstr	s15, [r3]
    kalman->bias  += K1 * y;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	ed93 7a01 	vldr	s14, [r3, #4]
 800172c:	edd7 6a06 	vldr	s13, [r7, #24]
 8001730:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001734:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001738:	ee77 7a27 	vadd.f32	s15, s14, s15
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	edc3 7a01 	vstr	s15, [r3, #4]

    // state covariance update
    float P00_temp = kalman->P[0][0];
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	617b      	str	r3, [r7, #20]
    float P01_temp = kalman->P[0][1];
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	691b      	ldr	r3, [r3, #16]
 800174c:	613b      	str	r3, [r7, #16]

    kalman->P[0][0] -= K0 * P00_temp;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	ed93 7a03 	vldr	s14, [r3, #12]
 8001754:	edd7 6a07 	vldr	s13, [r7, #28]
 8001758:	edd7 7a05 	vldr	s15, [r7, #20]
 800175c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001760:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	edc3 7a03 	vstr	s15, [r3, #12]
    kalman->P[0][1] -= K0 * P01_temp;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	ed93 7a04 	vldr	s14, [r3, #16]
 8001770:	edd7 6a07 	vldr	s13, [r7, #28]
 8001774:	edd7 7a04 	vldr	s15, [r7, #16]
 8001778:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800177c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	edc3 7a04 	vstr	s15, [r3, #16]
    kalman->P[1][0] -= K1 * P00_temp;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	ed93 7a05 	vldr	s14, [r3, #20]
 800178c:	edd7 6a06 	vldr	s13, [r7, #24]
 8001790:	edd7 7a05 	vldr	s15, [r7, #20]
 8001794:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001798:	ee77 7a67 	vsub.f32	s15, s14, s15
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	edc3 7a05 	vstr	s15, [r3, #20]
    kalman->P[1][1] -= K1 * P01_temp;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	ed93 7a06 	vldr	s14, [r3, #24]
 80017a8:	edd7 6a06 	vldr	s13, [r7, #24]
 80017ac:	edd7 7a04 	vldr	s15, [r7, #16]
 80017b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	edc3 7a06 	vstr	s15, [r3, #24]
}
 80017be:	bf00      	nop
 80017c0:	372c      	adds	r7, #44	@ 0x2c
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80017ca:	b480      	push	{r7}
 80017cc:	b083      	sub	sp, #12
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80017d2:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80017d6:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d013      	beq.n	800180a <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80017e2:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80017e6:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80017ea:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d00b      	beq.n	800180a <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80017f2:	e000      	b.n	80017f6 <ITM_SendChar+0x2c>
    {
      __NOP();
 80017f4:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80017f6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d0f9      	beq.n	80017f4 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001800:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	b2d2      	uxtb	r2, r2
 8001808:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800180a:	687b      	ldr	r3, [r7, #4]
}
 800180c:	4618      	mov	r0, r3
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	ed2d 8b02 	vpush	{d8}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001822:	f001 fc79 	bl	8003118 <HAL_Init>

  /* USER CODE BEGIN Init */
  Accelerometer_Init(&hi2c1); // Initialize the accelerometer
 8001826:	48cc      	ldr	r0, [pc, #816]	@ (8001b58 <main+0x340>)
 8001828:	f7ff fcbe 	bl	80011a8 <Accelerometer_Init>
  Kalman_Init(&kalman_pitch, &kalman_roll); // Initialize Kalman filters for x, y, z axes
 800182c:	49cb      	ldr	r1, [pc, #812]	@ (8001b5c <main+0x344>)
 800182e:	48cc      	ldr	r0, [pc, #816]	@ (8001b60 <main+0x348>)
 8001830:	f7ff fe78 	bl	8001524 <Kalman_Init>

  // Initialize PID controllers for pitch and roll
  PID_Init(&pid_pitch, 1.0f, 0.1f, 0.01f, dt, -30, 30); // Initialize PID for pitch
 8001834:	4bcb      	ldr	r3, [pc, #812]	@ (8001b64 <main+0x34c>)
 8001836:	edd3 7a00 	vldr	s15, [r3]
 800183a:	eef3 2a0e 	vmov.f32	s5, #62	@ 0x41f00000  30.0
 800183e:	eebb 2a0e 	vmov.f32	s4, #190	@ 0xc1f00000 -30.0
 8001842:	eef0 1a67 	vmov.f32	s3, s15
 8001846:	ed9f 1ac8 	vldr	s2, [pc, #800]	@ 8001b68 <main+0x350>
 800184a:	eddf 0ac8 	vldr	s1, [pc, #800]	@ 8001b6c <main+0x354>
 800184e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001852:	48c7      	ldr	r0, [pc, #796]	@ (8001b70 <main+0x358>)
 8001854:	f7ff fbe4 	bl	8001020 <PID_Init>
  PID_Init(&pid_roll, 1.0f, 0.1f, 0.01f, dt, -30, 30); // Initialize PID for roll
 8001858:	4bc2      	ldr	r3, [pc, #776]	@ (8001b64 <main+0x34c>)
 800185a:	edd3 7a00 	vldr	s15, [r3]
 800185e:	eef3 2a0e 	vmov.f32	s5, #62	@ 0x41f00000  30.0
 8001862:	eebb 2a0e 	vmov.f32	s4, #190	@ 0xc1f00000 -30.0
 8001866:	eef0 1a67 	vmov.f32	s3, s15
 800186a:	ed9f 1abf 	vldr	s2, [pc, #764]	@ 8001b68 <main+0x350>
 800186e:	eddf 0abf 	vldr	s1, [pc, #764]	@ 8001b6c <main+0x354>
 8001872:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001876:	48bf      	ldr	r0, [pc, #764]	@ (8001b74 <main+0x35c>)
 8001878:	f7ff fbd2 	bl	8001020 <PID_Init>
  PID_Init(&pid_thrust, 1.0f, 0.1f, 0.01f, dt, 0, 2); // Initialize PID for thrust
 800187c:	4bb9      	ldr	r3, [pc, #740]	@ (8001b64 <main+0x34c>)
 800187e:	edd3 7a00 	vldr	s15, [r3]
 8001882:	eef0 2a00 	vmov.f32	s5, #0	@ 0x40000000  2.0
 8001886:	ed9f 2abc 	vldr	s4, [pc, #752]	@ 8001b78 <main+0x360>
 800188a:	eef0 1a67 	vmov.f32	s3, s15
 800188e:	ed9f 1ab6 	vldr	s2, [pc, #728]	@ 8001b68 <main+0x350>
 8001892:	eddf 0ab6 	vldr	s1, [pc, #728]	@ 8001b6c <main+0x354>
 8001896:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800189a:	48b8      	ldr	r0, [pc, #736]	@ (8001b7c <main+0x364>)
 800189c:	f7ff fbc0 	bl	8001020 <PID_Init>
  PID_Init(&pid_yaw, 1.0f, 0.1f, 0.01f, dt, -180, 180); // Initialize PID for yaw (if needed)
 80018a0:	4bb0      	ldr	r3, [pc, #704]	@ (8001b64 <main+0x34c>)
 80018a2:	edd3 7a00 	vldr	s15, [r3]
 80018a6:	eddf 2ab6 	vldr	s5, [pc, #728]	@ 8001b80 <main+0x368>
 80018aa:	ed9f 2ab6 	vldr	s4, [pc, #728]	@ 8001b84 <main+0x36c>
 80018ae:	eef0 1a67 	vmov.f32	s3, s15
 80018b2:	ed9f 1aad 	vldr	s2, [pc, #692]	@ 8001b68 <main+0x350>
 80018b6:	eddf 0aad 	vldr	s1, [pc, #692]	@ 8001b6c <main+0x354>
 80018ba:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80018be:	48b2      	ldr	r0, [pc, #712]	@ (8001b88 <main+0x370>)
 80018c0:	f7ff fbae 	bl	8001020 <PID_Init>

  timestamp = 0;
 80018c4:	4bb1      	ldr	r3, [pc, #708]	@ (8001b8c <main+0x374>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018ca:	f000 fb4b 	bl	8001f64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018ce:	f000 ff73 	bl	80027b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80018d2:	f000 ff41 	bl	8002758 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80018d6:	f000 fca7 	bl	8002228 <MX_TIM2_Init>
  MX_I2C1_Init();
 80018da:	f000 fb95 	bl	8002008 <MX_I2C1_Init>
  MX_TIM3_Init();
 80018de:	f000 fd49 	bl	8002374 <MX_TIM3_Init>
  MX_TIM4_Init();
 80018e2:	f000 fded 	bl	80024c0 <MX_TIM4_Init>
  MX_TIM5_Init();
 80018e6:	f000 fe91 	bl	800260c <MX_TIM5_Init>
  MX_TIM1_Init();
 80018ea:	f000 fbcd 	bl	8002088 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  // Start the TIM1 PWM channels for motor control
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80018ee:	2100      	movs	r1, #0
 80018f0:	48a7      	ldr	r0, [pc, #668]	@ (8001b90 <main+0x378>)
 80018f2:	f004 f981 	bl	8005bf8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80018f6:	2104      	movs	r1, #4
 80018f8:	48a5      	ldr	r0, [pc, #660]	@ (8001b90 <main+0x378>)
 80018fa:	f004 f97d 	bl	8005bf8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80018fe:	2108      	movs	r1, #8
 8001900:	48a3      	ldr	r0, [pc, #652]	@ (8001b90 <main+0x378>)
 8001902:	f004 f979 	bl	8005bf8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001906:	210c      	movs	r1, #12
 8001908:	48a1      	ldr	r0, [pc, #644]	@ (8001b90 <main+0x378>)
 800190a:	f004 f975 	bl	8005bf8 <HAL_TIM_PWM_Start>

  // Arm the motors
  TIM1->CCR1 = 1000;
 800190e:	4ba1      	ldr	r3, [pc, #644]	@ (8001b94 <main+0x37c>)
 8001910:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001914:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM1->CCR2 = 1000;
 8001916:	4b9f      	ldr	r3, [pc, #636]	@ (8001b94 <main+0x37c>)
 8001918:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800191c:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM1->CCR3 = 1000;
 800191e:	4b9d      	ldr	r3, [pc, #628]	@ (8001b94 <main+0x37c>)
 8001920:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001924:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM1->CCR4 = 1000;
 8001926:	4b9b      	ldr	r3, [pc, #620]	@ (8001b94 <main+0x37c>)
 8001928:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800192c:	641a      	str	r2, [r3, #64]	@ 0x40
  HAL_Delay(1000);
 800192e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001932:	f001 fc6d 	bl	8003210 <HAL_Delay>
  TIM1->CCR1 = 2000;
 8001936:	4b97      	ldr	r3, [pc, #604]	@ (8001b94 <main+0x37c>)
 8001938:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800193c:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM1->CCR2 = 2000;
 800193e:	4b95      	ldr	r3, [pc, #596]	@ (8001b94 <main+0x37c>)
 8001940:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001944:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM1->CCR3 = 2000;
 8001946:	4b93      	ldr	r3, [pc, #588]	@ (8001b94 <main+0x37c>)
 8001948:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800194c:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM1->CCR4 = 2000;
 800194e:	4b91      	ldr	r3, [pc, #580]	@ (8001b94 <main+0x37c>)
 8001950:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001954:	641a      	str	r2, [r3, #64]	@ 0x40
  HAL_Delay(1000);
 8001956:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800195a:	f001 fc59 	bl	8003210 <HAL_Delay>
  TIM1->CCR1 = 1000;
 800195e:	4b8d      	ldr	r3, [pc, #564]	@ (8001b94 <main+0x37c>)
 8001960:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001964:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM1->CCR2 = 1000;
 8001966:	4b8b      	ldr	r3, [pc, #556]	@ (8001b94 <main+0x37c>)
 8001968:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800196c:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM1->CCR3 = 1000;
 800196e:	4b89      	ldr	r3, [pc, #548]	@ (8001b94 <main+0x37c>)
 8001970:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001974:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM1->CCR4 = 1000;
 8001976:	4b87      	ldr	r3, [pc, #540]	@ (8001b94 <main+0x37c>)
 8001978:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800197c:	641a      	str	r2, [r3, #64]	@ 0x40
  HAL_Delay(1000);
 800197e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001982:	f001 fc45 	bl	8003210 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    Accelerometer_Read(&hi2c1, &accel_data, &gyro_data); // Read accelerometer and gyro data
 8001986:	4a84      	ldr	r2, [pc, #528]	@ (8001b98 <main+0x380>)
 8001988:	4984      	ldr	r1, [pc, #528]	@ (8001b9c <main+0x384>)
 800198a:	4873      	ldr	r0, [pc, #460]	@ (8001b58 <main+0x340>)
 800198c:	f7ff fc66 	bl	800125c <Accelerometer_Read>
    
    angles_from_accel(accel_data, &pitch_calc, &roll_calc); // Calculate pitch and roll from accelerometer data
 8001990:	4b82      	ldr	r3, [pc, #520]	@ (8001b9c <main+0x384>)
 8001992:	edd3 6a00 	vldr	s13, [r3]
 8001996:	ed93 7a01 	vldr	s14, [r3, #4]
 800199a:	edd3 7a02 	vldr	s15, [r3, #8]
 800199e:	4980      	ldr	r1, [pc, #512]	@ (8001ba0 <main+0x388>)
 80019a0:	4880      	ldr	r0, [pc, #512]	@ (8001ba4 <main+0x38c>)
 80019a2:	eeb0 0a66 	vmov.f32	s0, s13
 80019a6:	eef0 0a47 	vmov.f32	s1, s14
 80019aa:	eeb0 1a67 	vmov.f32	s2, s15
 80019ae:	f7ff fd17 	bl	80013e0 <angles_from_accel>
    angles_rate_from_gyro(gyro_data, &pitch_rate_calc, &roll_rate_calc, &yaw_rate); // Calculate pitch, roll and yaw rates from gyro data
 80019b2:	4b79      	ldr	r3, [pc, #484]	@ (8001b98 <main+0x380>)
 80019b4:	edd3 6a00 	vldr	s13, [r3]
 80019b8:	ed93 7a01 	vldr	s14, [r3, #4]
 80019bc:	edd3 7a02 	vldr	s15, [r3, #8]
 80019c0:	4a79      	ldr	r2, [pc, #484]	@ (8001ba8 <main+0x390>)
 80019c2:	497a      	ldr	r1, [pc, #488]	@ (8001bac <main+0x394>)
 80019c4:	487a      	ldr	r0, [pc, #488]	@ (8001bb0 <main+0x398>)
 80019c6:	eeb0 0a66 	vmov.f32	s0, s13
 80019ca:	eef0 0a47 	vmov.f32	s1, s14
 80019ce:	eeb0 1a67 	vmov.f32	s2, s15
 80019d2:	f7ff fd85 	bl	80014e0 <angles_rate_from_gyro>
    // Apply Kalman filter to the angles
    Kalman_GetAngle(&kalman_pitch, pitch_calc, pitch_rate_calc, dt);
 80019d6:	4b73      	ldr	r3, [pc, #460]	@ (8001ba4 <main+0x38c>)
 80019d8:	edd3 7a00 	vldr	s15, [r3]
 80019dc:	4b74      	ldr	r3, [pc, #464]	@ (8001bb0 <main+0x398>)
 80019de:	ed93 7a00 	vldr	s14, [r3]
 80019e2:	4b60      	ldr	r3, [pc, #384]	@ (8001b64 <main+0x34c>)
 80019e4:	edd3 6a00 	vldr	s13, [r3]
 80019e8:	eeb0 1a66 	vmov.f32	s2, s13
 80019ec:	eef0 0a47 	vmov.f32	s1, s14
 80019f0:	eeb0 0a67 	vmov.f32	s0, s15
 80019f4:	485a      	ldr	r0, [pc, #360]	@ (8001b60 <main+0x348>)
 80019f6:	f7ff fdf1 	bl	80015dc <Kalman_GetAngle>
    Kalman_GetAngle(&kalman_roll, roll_calc, roll_rate_calc, dt);
 80019fa:	4b69      	ldr	r3, [pc, #420]	@ (8001ba0 <main+0x388>)
 80019fc:	edd3 7a00 	vldr	s15, [r3]
 8001a00:	4b6a      	ldr	r3, [pc, #424]	@ (8001bac <main+0x394>)
 8001a02:	ed93 7a00 	vldr	s14, [r3]
 8001a06:	4b57      	ldr	r3, [pc, #348]	@ (8001b64 <main+0x34c>)
 8001a08:	edd3 6a00 	vldr	s13, [r3]
 8001a0c:	eeb0 1a66 	vmov.f32	s2, s13
 8001a10:	eef0 0a47 	vmov.f32	s1, s14
 8001a14:	eeb0 0a67 	vmov.f32	s0, s15
 8001a18:	4850      	ldr	r0, [pc, #320]	@ (8001b5c <main+0x344>)
 8001a1a:	f7ff fddf 	bl	80015dc <Kalman_GetAngle>

    // Calculate PID control for thrust, pitch, roll and yaw
    // u_thrust = PID_Compute(&pid_thrust, thrust_input_g, accel_data.z);
    u_pitch = PID_Compute(&pid_pitch, pitch_input_deg, kalman_pitch.angle);
 8001a1e:	4b65      	ldr	r3, [pc, #404]	@ (8001bb4 <main+0x39c>)
 8001a20:	edd3 7a00 	vldr	s15, [r3]
 8001a24:	4b4e      	ldr	r3, [pc, #312]	@ (8001b60 <main+0x348>)
 8001a26:	ed93 7a00 	vldr	s14, [r3]
 8001a2a:	eef0 0a47 	vmov.f32	s1, s14
 8001a2e:	eeb0 0a67 	vmov.f32	s0, s15
 8001a32:	484f      	ldr	r0, [pc, #316]	@ (8001b70 <main+0x358>)
 8001a34:	f7ff fb2a 	bl	800108c <PID_Compute>
 8001a38:	eef0 7a40 	vmov.f32	s15, s0
 8001a3c:	4b5e      	ldr	r3, [pc, #376]	@ (8001bb8 <main+0x3a0>)
 8001a3e:	edc3 7a00 	vstr	s15, [r3]
    u_roll = PID_Compute(&pid_roll, roll_input_deg, kalman_roll.angle);
 8001a42:	4b5e      	ldr	r3, [pc, #376]	@ (8001bbc <main+0x3a4>)
 8001a44:	edd3 7a00 	vldr	s15, [r3]
 8001a48:	4b44      	ldr	r3, [pc, #272]	@ (8001b5c <main+0x344>)
 8001a4a:	ed93 7a00 	vldr	s14, [r3]
 8001a4e:	eef0 0a47 	vmov.f32	s1, s14
 8001a52:	eeb0 0a67 	vmov.f32	s0, s15
 8001a56:	4847      	ldr	r0, [pc, #284]	@ (8001b74 <main+0x35c>)
 8001a58:	f7ff fb18 	bl	800108c <PID_Compute>
 8001a5c:	eef0 7a40 	vmov.f32	s15, s0
 8001a60:	4b57      	ldr	r3, [pc, #348]	@ (8001bc0 <main+0x3a8>)
 8001a62:	edc3 7a00 	vstr	s15, [r3]
    u_yaw = PID_Compute(&pid_yaw, yaw_input_degps, yaw_rate); 
 8001a66:	4b57      	ldr	r3, [pc, #348]	@ (8001bc4 <main+0x3ac>)
 8001a68:	edd3 7a00 	vldr	s15, [r3]
 8001a6c:	4b4e      	ldr	r3, [pc, #312]	@ (8001ba8 <main+0x390>)
 8001a6e:	ed93 7a00 	vldr	s14, [r3]
 8001a72:	eef0 0a47 	vmov.f32	s1, s14
 8001a76:	eeb0 0a67 	vmov.f32	s0, s15
 8001a7a:	4843      	ldr	r0, [pc, #268]	@ (8001b88 <main+0x370>)
 8001a7c:	f7ff fb06 	bl	800108c <PID_Compute>
 8001a80:	eef0 7a40 	vmov.f32	s15, s0
 8001a84:	4b50      	ldr	r3, [pc, #320]	@ (8001bc8 <main+0x3b0>)
 8001a86:	edc3 7a00 	vstr	s15, [r3]

    u_thrust = Kt * thrust_input; // Scale thrust control signal
 8001a8a:	4b50      	ldr	r3, [pc, #320]	@ (8001bcc <main+0x3b4>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	ee07 3a90 	vmov	s15, r3
 8001a92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a96:	4b4e      	ldr	r3, [pc, #312]	@ (8001bd0 <main+0x3b8>)
 8001a98:	edd3 7a00 	vldr	s15, [r3]
 8001a9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aa0:	4b4c      	ldr	r3, [pc, #304]	@ (8001bd4 <main+0x3bc>)
 8001aa2:	edc3 7a00 	vstr	s15, [r3]
    u_pitch = Kp * u_pitch; // Scale pitch control signal
 8001aa6:	4b4c      	ldr	r3, [pc, #304]	@ (8001bd8 <main+0x3c0>)
 8001aa8:	ed93 7a00 	vldr	s14, [r3]
 8001aac:	4b42      	ldr	r3, [pc, #264]	@ (8001bb8 <main+0x3a0>)
 8001aae:	edd3 7a00 	vldr	s15, [r3]
 8001ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ab6:	4b40      	ldr	r3, [pc, #256]	@ (8001bb8 <main+0x3a0>)
 8001ab8:	edc3 7a00 	vstr	s15, [r3]
    u_roll = Kr * u_roll; // Scale roll control signal
 8001abc:	4b47      	ldr	r3, [pc, #284]	@ (8001bdc <main+0x3c4>)
 8001abe:	ed93 7a00 	vldr	s14, [r3]
 8001ac2:	4b3f      	ldr	r3, [pc, #252]	@ (8001bc0 <main+0x3a8>)
 8001ac4:	edd3 7a00 	vldr	s15, [r3]
 8001ac8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001acc:	4b3c      	ldr	r3, [pc, #240]	@ (8001bc0 <main+0x3a8>)
 8001ace:	edc3 7a00 	vstr	s15, [r3]
    u_yaw = Ky * u_yaw; // Scale yaw control signal
 8001ad2:	4b43      	ldr	r3, [pc, #268]	@ (8001be0 <main+0x3c8>)
 8001ad4:	ed93 7a00 	vldr	s14, [r3]
 8001ad8:	4b3b      	ldr	r3, [pc, #236]	@ (8001bc8 <main+0x3b0>)
 8001ada:	edd3 7a00 	vldr	s15, [r3]
 8001ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ae2:	4b39      	ldr	r3, [pc, #228]	@ (8001bc8 <main+0x3b0>)
 8001ae4:	edc3 7a00 	vstr	s15, [r3]
      [M1]     [M2]
           |
           v
          Front
    */
    M1 = u_thrust - u_pitch - u_roll - u_yaw; // Motor 1 control signal CW
 8001ae8:	4b3a      	ldr	r3, [pc, #232]	@ (8001bd4 <main+0x3bc>)
 8001aea:	ed93 7a00 	vldr	s14, [r3]
 8001aee:	4b32      	ldr	r3, [pc, #200]	@ (8001bb8 <main+0x3a0>)
 8001af0:	edd3 7a00 	vldr	s15, [r3]
 8001af4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001af8:	4b31      	ldr	r3, [pc, #196]	@ (8001bc0 <main+0x3a8>)
 8001afa:	edd3 7a00 	vldr	s15, [r3]
 8001afe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b02:	4b31      	ldr	r3, [pc, #196]	@ (8001bc8 <main+0x3b0>)
 8001b04:	edd3 7a00 	vldr	s15, [r3]
 8001b08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b0c:	4b35      	ldr	r3, [pc, #212]	@ (8001be4 <main+0x3cc>)
 8001b0e:	edc3 7a00 	vstr	s15, [r3]
    M2 = u_thrust - u_pitch + u_roll + u_yaw; // Motor 2 control signal CCW
 8001b12:	4b30      	ldr	r3, [pc, #192]	@ (8001bd4 <main+0x3bc>)
 8001b14:	ed93 7a00 	vldr	s14, [r3]
 8001b18:	4b27      	ldr	r3, [pc, #156]	@ (8001bb8 <main+0x3a0>)
 8001b1a:	edd3 7a00 	vldr	s15, [r3]
 8001b1e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b22:	4b27      	ldr	r3, [pc, #156]	@ (8001bc0 <main+0x3a8>)
 8001b24:	edd3 7a00 	vldr	s15, [r3]
 8001b28:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b2c:	4b26      	ldr	r3, [pc, #152]	@ (8001bc8 <main+0x3b0>)
 8001b2e:	edd3 7a00 	vldr	s15, [r3]
 8001b32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b36:	4b2c      	ldr	r3, [pc, #176]	@ (8001be8 <main+0x3d0>)
 8001b38:	edc3 7a00 	vstr	s15, [r3]
    M3 = u_thrust + u_pitch - u_roll + u_yaw; // Motor 3 control signal CCW
 8001b3c:	4b25      	ldr	r3, [pc, #148]	@ (8001bd4 <main+0x3bc>)
 8001b3e:	ed93 7a00 	vldr	s14, [r3]
 8001b42:	4b1d      	ldr	r3, [pc, #116]	@ (8001bb8 <main+0x3a0>)
 8001b44:	edd3 7a00 	vldr	s15, [r3]
 8001b48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b4c:	4b1c      	ldr	r3, [pc, #112]	@ (8001bc0 <main+0x3a8>)
 8001b4e:	edd3 7a00 	vldr	s15, [r3]
 8001b52:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b56:	e049      	b.n	8001bec <main+0x3d4>
 8001b58:	20000204 	.word	0x20000204
 8001b5c:	2000049c 	.word	0x2000049c
 8001b60:	20000474 	.word	0x20000474
 8001b64:	20000000 	.word	0x20000000
 8001b68:	3c23d70a 	.word	0x3c23d70a
 8001b6c:	3dcccccd 	.word	0x3dcccccd
 8001b70:	200004fc 	.word	0x200004fc
 8001b74:	20000520 	.word	0x20000520
 8001b78:	00000000 	.word	0x00000000
 8001b7c:	200004d8 	.word	0x200004d8
 8001b80:	43340000 	.word	0x43340000
 8001b84:	c3340000 	.word	0xc3340000
 8001b88:	20000544 	.word	0x20000544
 8001b8c:	20000588 	.word	0x20000588
 8001b90:	20000258 	.word	0x20000258
 8001b94:	40012c00 	.word	0x40012c00
 8001b98:	20000468 	.word	0x20000468
 8001b9c:	2000045c 	.word	0x2000045c
 8001ba0:	200004c8 	.word	0x200004c8
 8001ba4:	200004c4 	.word	0x200004c4
 8001ba8:	200004d4 	.word	0x200004d4
 8001bac:	200004d0 	.word	0x200004d0
 8001bb0:	200004cc 	.word	0x200004cc
 8001bb4:	200005a0 	.word	0x200005a0
 8001bb8:	2000057c 	.word	0x2000057c
 8001bbc:	2000059c 	.word	0x2000059c
 8001bc0:	20000580 	.word	0x20000580
 8001bc4:	200005a4 	.word	0x200005a4
 8001bc8:	20000584 	.word	0x20000584
 8001bcc:	20000594 	.word	0x20000594
 8001bd0:	20000004 	.word	0x20000004
 8001bd4:	20000578 	.word	0x20000578
 8001bd8:	20000008 	.word	0x20000008
 8001bdc:	2000000c 	.word	0x2000000c
 8001be0:	20000010 	.word	0x20000010
 8001be4:	20000568 	.word	0x20000568
 8001be8:	2000056c 	.word	0x2000056c
 8001bec:	4bd1      	ldr	r3, [pc, #836]	@ (8001f34 <main+0x71c>)
 8001bee:	edd3 7a00 	vldr	s15, [r3]
 8001bf2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bf6:	4bd0      	ldr	r3, [pc, #832]	@ (8001f38 <main+0x720>)
 8001bf8:	edc3 7a00 	vstr	s15, [r3]
    M4 = u_thrust + u_pitch + u_roll - u_yaw; // Motor 4 control signal CW
 8001bfc:	4bcf      	ldr	r3, [pc, #828]	@ (8001f3c <main+0x724>)
 8001bfe:	ed93 7a00 	vldr	s14, [r3]
 8001c02:	4bcf      	ldr	r3, [pc, #828]	@ (8001f40 <main+0x728>)
 8001c04:	edd3 7a00 	vldr	s15, [r3]
 8001c08:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c0c:	4bcd      	ldr	r3, [pc, #820]	@ (8001f44 <main+0x72c>)
 8001c0e:	edd3 7a00 	vldr	s15, [r3]
 8001c12:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c16:	4bc7      	ldr	r3, [pc, #796]	@ (8001f34 <main+0x71c>)
 8001c18:	edd3 7a00 	vldr	s15, [r3]
 8001c1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c20:	4bc9      	ldr	r3, [pc, #804]	@ (8001f48 <main+0x730>)
 8001c22:	edc3 7a00 	vstr	s15, [r3]

    M1 = 1000 + (M1/4)*1000;
 8001c26:	4bc9      	ldr	r3, [pc, #804]	@ (8001f4c <main+0x734>)
 8001c28:	ed93 7a00 	vldr	s14, [r3]
 8001c2c:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8001c30:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c34:	ed9f 7ac6 	vldr	s14, [pc, #792]	@ 8001f50 <main+0x738>
 8001c38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c3c:	ed9f 7ac4 	vldr	s14, [pc, #784]	@ 8001f50 <main+0x738>
 8001c40:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c44:	4bc1      	ldr	r3, [pc, #772]	@ (8001f4c <main+0x734>)
 8001c46:	edc3 7a00 	vstr	s15, [r3]
    M2 = 1000 + (M2/4)*1000;
 8001c4a:	4bc2      	ldr	r3, [pc, #776]	@ (8001f54 <main+0x73c>)
 8001c4c:	ed93 7a00 	vldr	s14, [r3]
 8001c50:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8001c54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c58:	ed9f 7abd 	vldr	s14, [pc, #756]	@ 8001f50 <main+0x738>
 8001c5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c60:	ed9f 7abb 	vldr	s14, [pc, #748]	@ 8001f50 <main+0x738>
 8001c64:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c68:	4bba      	ldr	r3, [pc, #744]	@ (8001f54 <main+0x73c>)
 8001c6a:	edc3 7a00 	vstr	s15, [r3]
    M3 = 1000 + (M3/4)*1000;
 8001c6e:	4bb2      	ldr	r3, [pc, #712]	@ (8001f38 <main+0x720>)
 8001c70:	ed93 7a00 	vldr	s14, [r3]
 8001c74:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8001c78:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c7c:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8001f50 <main+0x738>
 8001c80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c84:	ed9f 7ab2 	vldr	s14, [pc, #712]	@ 8001f50 <main+0x738>
 8001c88:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c8c:	4baa      	ldr	r3, [pc, #680]	@ (8001f38 <main+0x720>)
 8001c8e:	edc3 7a00 	vstr	s15, [r3]
    M4 = 1000 + (M4/4)*1000;
 8001c92:	4bad      	ldr	r3, [pc, #692]	@ (8001f48 <main+0x730>)
 8001c94:	ed93 7a00 	vldr	s14, [r3]
 8001c98:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8001c9c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ca0:	ed9f 7aab 	vldr	s14, [pc, #684]	@ 8001f50 <main+0x738>
 8001ca4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ca8:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 8001f50 <main+0x738>
 8001cac:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001cb0:	4ba5      	ldr	r3, [pc, #660]	@ (8001f48 <main+0x730>)
 8001cb2:	edc3 7a00 	vstr	s15, [r3]

    // Trouver le dépassement max
    float max_val = fmaxf(fmaxf(M1, M2), fmaxf(M3, M4));
 8001cb6:	4ba5      	ldr	r3, [pc, #660]	@ (8001f4c <main+0x734>)
 8001cb8:	edd3 7a00 	vldr	s15, [r3]
 8001cbc:	4ba5      	ldr	r3, [pc, #660]	@ (8001f54 <main+0x73c>)
 8001cbe:	ed93 7a00 	vldr	s14, [r3]
 8001cc2:	eef0 0a47 	vmov.f32	s1, s14
 8001cc6:	eeb0 0a67 	vmov.f32	s0, s15
 8001cca:	f00a feda 	bl	800ca82 <fmaxf>
 8001cce:	eeb0 8a40 	vmov.f32	s16, s0
 8001cd2:	4b99      	ldr	r3, [pc, #612]	@ (8001f38 <main+0x720>)
 8001cd4:	edd3 7a00 	vldr	s15, [r3]
 8001cd8:	4b9b      	ldr	r3, [pc, #620]	@ (8001f48 <main+0x730>)
 8001cda:	ed93 7a00 	vldr	s14, [r3]
 8001cde:	eef0 0a47 	vmov.f32	s1, s14
 8001ce2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ce6:	f00a fecc 	bl	800ca82 <fmaxf>
 8001cea:	eef0 7a40 	vmov.f32	s15, s0
 8001cee:	eef0 0a67 	vmov.f32	s1, s15
 8001cf2:	eeb0 0a48 	vmov.f32	s0, s16
 8001cf6:	f00a fec4 	bl	800ca82 <fmaxf>
 8001cfa:	ed87 0a04 	vstr	s0, [r7, #16]
    float min_val = fminf(fminf(M1, M2), fminf(M3, M4));
 8001cfe:	4b93      	ldr	r3, [pc, #588]	@ (8001f4c <main+0x734>)
 8001d00:	edd3 7a00 	vldr	s15, [r3]
 8001d04:	4b93      	ldr	r3, [pc, #588]	@ (8001f54 <main+0x73c>)
 8001d06:	ed93 7a00 	vldr	s14, [r3]
 8001d0a:	eef0 0a47 	vmov.f32	s1, s14
 8001d0e:	eeb0 0a67 	vmov.f32	s0, s15
 8001d12:	f00a fed3 	bl	800cabc <fminf>
 8001d16:	eeb0 8a40 	vmov.f32	s16, s0
 8001d1a:	4b87      	ldr	r3, [pc, #540]	@ (8001f38 <main+0x720>)
 8001d1c:	edd3 7a00 	vldr	s15, [r3]
 8001d20:	4b89      	ldr	r3, [pc, #548]	@ (8001f48 <main+0x730>)
 8001d22:	ed93 7a00 	vldr	s14, [r3]
 8001d26:	eef0 0a47 	vmov.f32	s1, s14
 8001d2a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d2e:	f00a fec5 	bl	800cabc <fminf>
 8001d32:	eef0 7a40 	vmov.f32	s15, s0
 8001d36:	eef0 0a67 	vmov.f32	s1, s15
 8001d3a:	eeb0 0a48 	vmov.f32	s0, s16
 8001d3e:	f00a febd 	bl	800cabc <fminf>
 8001d42:	ed87 0a03 	vstr	s0, [r7, #12]

    // Calcul du facteur de scaling
    float scale = 1.0f;
 8001d46:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001d4a:	617b      	str	r3, [r7, #20]
    if (max_val > PWM_MAX) {
 8001d4c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d50:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 8001f58 <main+0x740>
 8001d54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d5c:	dd12      	ble.n	8001d84 <main+0x56c>
        float s = (PWM_MAX) / (max_val);
 8001d5e:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8001f58 <main+0x740>
 8001d62:	ed97 7a04 	vldr	s14, [r7, #16]
 8001d66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d6a:	edc7 7a02 	vstr	s15, [r7, #8]
        if (s < scale) scale = s;
 8001d6e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001d72:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d7e:	d501      	bpl.n	8001d84 <main+0x56c>
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	617b      	str	r3, [r7, #20]
    }
    if (min_val < PWM_MIN) {
 8001d84:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d88:	ed9f 7a71 	vldr	s14, [pc, #452]	@ 8001f50 <main+0x738>
 8001d8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d94:	d512      	bpl.n	8001dbc <main+0x5a4>
        float s = (PWM_MIN) / (min_val);
 8001d96:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8001f50 <main+0x738>
 8001d9a:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001da2:	edc7 7a01 	vstr	s15, [r7, #4]
        if (s < scale) scale = s;
 8001da6:	ed97 7a01 	vldr	s14, [r7, #4]
 8001daa:	edd7 7a05 	vldr	s15, [r7, #20]
 8001dae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001db6:	d501      	bpl.n	8001dbc <main+0x5a4>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	617b      	str	r3, [r7, #20]
    }

    // Application du scaling (seulement sur les deltas)
    if (scale < 1.0f) {
 8001dbc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001dc0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001dc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dcc:	d527      	bpl.n	8001e1e <main+0x606>
        M1 = + (M1) * scale;
 8001dce:	4b5f      	ldr	r3, [pc, #380]	@ (8001f4c <main+0x734>)
 8001dd0:	ed93 7a00 	vldr	s14, [r3]
 8001dd4:	edd7 7a05 	vldr	s15, [r7, #20]
 8001dd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ddc:	4b5b      	ldr	r3, [pc, #364]	@ (8001f4c <main+0x734>)
 8001dde:	edc3 7a00 	vstr	s15, [r3]
        M2 = + (M2) * scale;
 8001de2:	4b5c      	ldr	r3, [pc, #368]	@ (8001f54 <main+0x73c>)
 8001de4:	ed93 7a00 	vldr	s14, [r3]
 8001de8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001dec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001df0:	4b58      	ldr	r3, [pc, #352]	@ (8001f54 <main+0x73c>)
 8001df2:	edc3 7a00 	vstr	s15, [r3]
        M3 = + (M3) * scale;
 8001df6:	4b50      	ldr	r3, [pc, #320]	@ (8001f38 <main+0x720>)
 8001df8:	ed93 7a00 	vldr	s14, [r3]
 8001dfc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e04:	4b4c      	ldr	r3, [pc, #304]	@ (8001f38 <main+0x720>)
 8001e06:	edc3 7a00 	vstr	s15, [r3]
        M4 = + (M4) * scale;
 8001e0a:	4b4f      	ldr	r3, [pc, #316]	@ (8001f48 <main+0x730>)
 8001e0c:	ed93 7a00 	vldr	s14, [r3]
 8001e10:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e18:	4b4b      	ldr	r3, [pc, #300]	@ (8001f48 <main+0x730>)
 8001e1a:	edc3 7a00 	vstr	s15, [r3]
    }

    // Clamp final
    M1 = fminf(fmaxf(M1, PWM_MIN), PWM_MAX);
 8001e1e:	4b4b      	ldr	r3, [pc, #300]	@ (8001f4c <main+0x734>)
 8001e20:	edd3 7a00 	vldr	s15, [r3]
 8001e24:	eddf 0a4a 	vldr	s1, [pc, #296]	@ 8001f50 <main+0x738>
 8001e28:	eeb0 0a67 	vmov.f32	s0, s15
 8001e2c:	f00a fe29 	bl	800ca82 <fmaxf>
 8001e30:	eef0 7a40 	vmov.f32	s15, s0
 8001e34:	eddf 0a48 	vldr	s1, [pc, #288]	@ 8001f58 <main+0x740>
 8001e38:	eeb0 0a67 	vmov.f32	s0, s15
 8001e3c:	f00a fe3e 	bl	800cabc <fminf>
 8001e40:	eef0 7a40 	vmov.f32	s15, s0
 8001e44:	4b41      	ldr	r3, [pc, #260]	@ (8001f4c <main+0x734>)
 8001e46:	edc3 7a00 	vstr	s15, [r3]
    M2 = fminf(fmaxf(M2, PWM_MIN), PWM_MAX);
 8001e4a:	4b42      	ldr	r3, [pc, #264]	@ (8001f54 <main+0x73c>)
 8001e4c:	edd3 7a00 	vldr	s15, [r3]
 8001e50:	eddf 0a3f 	vldr	s1, [pc, #252]	@ 8001f50 <main+0x738>
 8001e54:	eeb0 0a67 	vmov.f32	s0, s15
 8001e58:	f00a fe13 	bl	800ca82 <fmaxf>
 8001e5c:	eef0 7a40 	vmov.f32	s15, s0
 8001e60:	eddf 0a3d 	vldr	s1, [pc, #244]	@ 8001f58 <main+0x740>
 8001e64:	eeb0 0a67 	vmov.f32	s0, s15
 8001e68:	f00a fe28 	bl	800cabc <fminf>
 8001e6c:	eef0 7a40 	vmov.f32	s15, s0
 8001e70:	4b38      	ldr	r3, [pc, #224]	@ (8001f54 <main+0x73c>)
 8001e72:	edc3 7a00 	vstr	s15, [r3]
    M3 = fminf(fmaxf(M3, PWM_MIN), PWM_MAX);
 8001e76:	4b30      	ldr	r3, [pc, #192]	@ (8001f38 <main+0x720>)
 8001e78:	edd3 7a00 	vldr	s15, [r3]
 8001e7c:	eddf 0a34 	vldr	s1, [pc, #208]	@ 8001f50 <main+0x738>
 8001e80:	eeb0 0a67 	vmov.f32	s0, s15
 8001e84:	f00a fdfd 	bl	800ca82 <fmaxf>
 8001e88:	eef0 7a40 	vmov.f32	s15, s0
 8001e8c:	eddf 0a32 	vldr	s1, [pc, #200]	@ 8001f58 <main+0x740>
 8001e90:	eeb0 0a67 	vmov.f32	s0, s15
 8001e94:	f00a fe12 	bl	800cabc <fminf>
 8001e98:	eef0 7a40 	vmov.f32	s15, s0
 8001e9c:	4b26      	ldr	r3, [pc, #152]	@ (8001f38 <main+0x720>)
 8001e9e:	edc3 7a00 	vstr	s15, [r3]
    M4 = fminf(fmaxf(M4, PWM_MIN), PWM_MAX);
 8001ea2:	4b29      	ldr	r3, [pc, #164]	@ (8001f48 <main+0x730>)
 8001ea4:	edd3 7a00 	vldr	s15, [r3]
 8001ea8:	eddf 0a29 	vldr	s1, [pc, #164]	@ 8001f50 <main+0x738>
 8001eac:	eeb0 0a67 	vmov.f32	s0, s15
 8001eb0:	f00a fde7 	bl	800ca82 <fmaxf>
 8001eb4:	eef0 7a40 	vmov.f32	s15, s0
 8001eb8:	eddf 0a27 	vldr	s1, [pc, #156]	@ 8001f58 <main+0x740>
 8001ebc:	eeb0 0a67 	vmov.f32	s0, s15
 8001ec0:	f00a fdfc 	bl	800cabc <fminf>
 8001ec4:	eef0 7a40 	vmov.f32	s15, s0
 8001ec8:	4b1f      	ldr	r3, [pc, #124]	@ (8001f48 <main+0x730>)
 8001eca:	edc3 7a00 	vstr	s15, [r3]

    TIM1->CCR1 = (uint32_t)M1; // Set PWM duty cycle for motor 1
 8001ece:	4b1f      	ldr	r3, [pc, #124]	@ (8001f4c <main+0x734>)
 8001ed0:	edd3 7a00 	vldr	s15, [r3]
 8001ed4:	4b21      	ldr	r3, [pc, #132]	@ (8001f5c <main+0x744>)
 8001ed6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001eda:	ee17 2a90 	vmov	r2, s15
 8001ede:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM1->CCR2 = (uint32_t)M2; // Set PWM duty cycle for motor 2
 8001ee0:	4b1c      	ldr	r3, [pc, #112]	@ (8001f54 <main+0x73c>)
 8001ee2:	edd3 7a00 	vldr	s15, [r3]
 8001ee6:	4b1d      	ldr	r3, [pc, #116]	@ (8001f5c <main+0x744>)
 8001ee8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001eec:	ee17 2a90 	vmov	r2, s15
 8001ef0:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM1->CCR3 = (uint32_t)M3; // Set PWM duty cycle for motor 3
 8001ef2:	4b11      	ldr	r3, [pc, #68]	@ (8001f38 <main+0x720>)
 8001ef4:	edd3 7a00 	vldr	s15, [r3]
 8001ef8:	4b18      	ldr	r3, [pc, #96]	@ (8001f5c <main+0x744>)
 8001efa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001efe:	ee17 2a90 	vmov	r2, s15
 8001f02:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM1->CCR4 = (uint32_t)M4; // Set PWM duty cycle for motor 4
 8001f04:	4b10      	ldr	r3, [pc, #64]	@ (8001f48 <main+0x730>)
 8001f06:	edd3 7a00 	vldr	s15, [r3]
 8001f0a:	4b14      	ldr	r3, [pc, #80]	@ (8001f5c <main+0x744>)
 8001f0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f10:	ee17 2a90 	vmov	r2, s15
 8001f14:	641a      	str	r2, [r3, #64]	@ 0x40

    HAL_Delay(dt * 1000);  // 10ms par boucle
 8001f16:	4b12      	ldr	r3, [pc, #72]	@ (8001f60 <main+0x748>)
 8001f18:	edd3 7a00 	vldr	s15, [r3]
 8001f1c:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8001f50 <main+0x738>
 8001f20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f28:	ee17 0a90 	vmov	r0, s15
 8001f2c:	f001 f970 	bl	8003210 <HAL_Delay>
  {
 8001f30:	e529      	b.n	8001986 <main+0x16e>
 8001f32:	bf00      	nop
 8001f34:	20000584 	.word	0x20000584
 8001f38:	20000570 	.word	0x20000570
 8001f3c:	20000578 	.word	0x20000578
 8001f40:	2000057c 	.word	0x2000057c
 8001f44:	20000580 	.word	0x20000580
 8001f48:	20000574 	.word	0x20000574
 8001f4c:	20000568 	.word	0x20000568
 8001f50:	447a0000 	.word	0x447a0000
 8001f54:	2000056c 	.word	0x2000056c
 8001f58:	44fa0000 	.word	0x44fa0000
 8001f5c:	40012c00 	.word	0x40012c00
 8001f60:	20000000 	.word	0x20000000

08001f64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b096      	sub	sp, #88	@ 0x58
 8001f68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f6a:	f107 0314 	add.w	r3, r7, #20
 8001f6e:	2244      	movs	r2, #68	@ 0x44
 8001f70:	2100      	movs	r1, #0
 8001f72:	4618      	mov	r0, r3
 8001f74:	f007 ff28 	bl	8009dc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f78:	463b      	mov	r3, r7
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	605a      	str	r2, [r3, #4]
 8001f80:	609a      	str	r2, [r3, #8]
 8001f82:	60da      	str	r2, [r3, #12]
 8001f84:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001f86:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001f8a:	f002 fa6b 	bl	8004464 <HAL_PWREx_ControlVoltageScaling>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001f94:	f000 fd5c 	bl	8002a50 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f98:	2302      	movs	r3, #2
 8001f9a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f9c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fa0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001fa2:	2310      	movs	r3, #16
 8001fa4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001faa:	2302      	movs	r3, #2
 8001fac:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001fb2:	230a      	movs	r3, #10
 8001fb4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001fb6:	2307      	movs	r3, #7
 8001fb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001fba:	2302      	movs	r3, #2
 8001fbc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fc2:	f107 0314 	add.w	r3, r7, #20
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f002 faa2 	bl	8004510 <HAL_RCC_OscConfig>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001fd2:	f000 fd3d 	bl	8002a50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fd6:	230f      	movs	r3, #15
 8001fd8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001fea:	463b      	mov	r3, r7
 8001fec:	2104      	movs	r1, #4
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f002 fe6a 	bl	8004cc8 <HAL_RCC_ClockConfig>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001ffa:	f000 fd29 	bl	8002a50 <Error_Handler>
  }
}
 8001ffe:	bf00      	nop
 8002000:	3758      	adds	r7, #88	@ 0x58
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
	...

08002008 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800200c:	4b1b      	ldr	r3, [pc, #108]	@ (800207c <MX_I2C1_Init+0x74>)
 800200e:	4a1c      	ldr	r2, [pc, #112]	@ (8002080 <MX_I2C1_Init+0x78>)
 8002010:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 8002012:	4b1a      	ldr	r3, [pc, #104]	@ (800207c <MX_I2C1_Init+0x74>)
 8002014:	4a1b      	ldr	r2, [pc, #108]	@ (8002084 <MX_I2C1_Init+0x7c>)
 8002016:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002018:	4b18      	ldr	r3, [pc, #96]	@ (800207c <MX_I2C1_Init+0x74>)
 800201a:	2200      	movs	r2, #0
 800201c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800201e:	4b17      	ldr	r3, [pc, #92]	@ (800207c <MX_I2C1_Init+0x74>)
 8002020:	2201      	movs	r2, #1
 8002022:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002024:	4b15      	ldr	r3, [pc, #84]	@ (800207c <MX_I2C1_Init+0x74>)
 8002026:	2200      	movs	r2, #0
 8002028:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800202a:	4b14      	ldr	r3, [pc, #80]	@ (800207c <MX_I2C1_Init+0x74>)
 800202c:	2200      	movs	r2, #0
 800202e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002030:	4b12      	ldr	r3, [pc, #72]	@ (800207c <MX_I2C1_Init+0x74>)
 8002032:	2200      	movs	r2, #0
 8002034:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002036:	4b11      	ldr	r3, [pc, #68]	@ (800207c <MX_I2C1_Init+0x74>)
 8002038:	2200      	movs	r2, #0
 800203a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800203c:	4b0f      	ldr	r3, [pc, #60]	@ (800207c <MX_I2C1_Init+0x74>)
 800203e:	2200      	movs	r2, #0
 8002040:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002042:	480e      	ldr	r0, [pc, #56]	@ (800207c <MX_I2C1_Init+0x74>)
 8002044:	f001 fbdc 	bl	8003800 <HAL_I2C_Init>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800204e:	f000 fcff 	bl	8002a50 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002052:	2100      	movs	r1, #0
 8002054:	4809      	ldr	r0, [pc, #36]	@ (800207c <MX_I2C1_Init+0x74>)
 8002056:	f002 f95f 	bl	8004318 <HAL_I2CEx_ConfigAnalogFilter>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002060:	f000 fcf6 	bl	8002a50 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002064:	2100      	movs	r1, #0
 8002066:	4805      	ldr	r0, [pc, #20]	@ (800207c <MX_I2C1_Init+0x74>)
 8002068:	f002 f9a1 	bl	80043ae <HAL_I2CEx_ConfigDigitalFilter>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002072:	f000 fced 	bl	8002a50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002076:	bf00      	nop
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	20000204 	.word	0x20000204
 8002080:	40005400 	.word	0x40005400
 8002084:	10d19ce4 	.word	0x10d19ce4

08002088 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b09a      	sub	sp, #104	@ 0x68
 800208c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800208e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002092:	2200      	movs	r2, #0
 8002094:	601a      	str	r2, [r3, #0]
 8002096:	605a      	str	r2, [r3, #4]
 8002098:	609a      	str	r2, [r3, #8]
 800209a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800209c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]
 80020a4:	605a      	str	r2, [r3, #4]
 80020a6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020a8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	605a      	str	r2, [r3, #4]
 80020b2:	609a      	str	r2, [r3, #8]
 80020b4:	60da      	str	r2, [r3, #12]
 80020b6:	611a      	str	r2, [r3, #16]
 80020b8:	615a      	str	r2, [r3, #20]
 80020ba:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80020bc:	1d3b      	adds	r3, r7, #4
 80020be:	222c      	movs	r2, #44	@ 0x2c
 80020c0:	2100      	movs	r1, #0
 80020c2:	4618      	mov	r0, r3
 80020c4:	f007 fe80 	bl	8009dc8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80020c8:	4b55      	ldr	r3, [pc, #340]	@ (8002220 <MX_TIM1_Init+0x198>)
 80020ca:	4a56      	ldr	r2, [pc, #344]	@ (8002224 <MX_TIM1_Init+0x19c>)
 80020cc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 80020ce:	4b54      	ldr	r3, [pc, #336]	@ (8002220 <MX_TIM1_Init+0x198>)
 80020d0:	224f      	movs	r2, #79	@ 0x4f
 80020d2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020d4:	4b52      	ldr	r3, [pc, #328]	@ (8002220 <MX_TIM1_Init+0x198>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 80020da:	4b51      	ldr	r3, [pc, #324]	@ (8002220 <MX_TIM1_Init+0x198>)
 80020dc:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80020e0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020e2:	4b4f      	ldr	r3, [pc, #316]	@ (8002220 <MX_TIM1_Init+0x198>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80020e8:	4b4d      	ldr	r3, [pc, #308]	@ (8002220 <MX_TIM1_Init+0x198>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020ee:	4b4c      	ldr	r3, [pc, #304]	@ (8002220 <MX_TIM1_Init+0x198>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80020f4:	484a      	ldr	r0, [pc, #296]	@ (8002220 <MX_TIM1_Init+0x198>)
 80020f6:	f003 fcc7 	bl	8005a88 <HAL_TIM_Base_Init>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002100:	f000 fca6 	bl	8002a50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002104:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002108:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800210a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800210e:	4619      	mov	r1, r3
 8002110:	4843      	ldr	r0, [pc, #268]	@ (8002220 <MX_TIM1_Init+0x198>)
 8002112:	f004 fadb 	bl	80066cc <HAL_TIM_ConfigClockSource>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800211c:	f000 fc98 	bl	8002a50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002120:	483f      	ldr	r0, [pc, #252]	@ (8002220 <MX_TIM1_Init+0x198>)
 8002122:	f003 fd08 	bl	8005b36 <HAL_TIM_PWM_Init>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800212c:	f000 fc90 	bl	8002a50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002130:	2300      	movs	r3, #0
 8002132:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002134:	2300      	movs	r3, #0
 8002136:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002138:	2300      	movs	r3, #0
 800213a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800213c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002140:	4619      	mov	r1, r3
 8002142:	4837      	ldr	r0, [pc, #220]	@ (8002220 <MX_TIM1_Init+0x198>)
 8002144:	f005 fa2e 	bl	80075a4 <HAL_TIMEx_MasterConfigSynchronization>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800214e:	f000 fc7f 	bl	8002a50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002152:	2360      	movs	r3, #96	@ 0x60
 8002154:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8002156:	2300      	movs	r3, #0
 8002158:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800215a:	2300      	movs	r3, #0
 800215c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800215e:	2300      	movs	r3, #0
 8002160:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002162:	2300      	movs	r3, #0
 8002164:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002166:	2300      	movs	r3, #0
 8002168:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800216a:	2300      	movs	r3, #0
 800216c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800216e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002172:	2200      	movs	r2, #0
 8002174:	4619      	mov	r1, r3
 8002176:	482a      	ldr	r0, [pc, #168]	@ (8002220 <MX_TIM1_Init+0x198>)
 8002178:	f004 f994 	bl	80064a4 <HAL_TIM_PWM_ConfigChannel>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8002182:	f000 fc65 	bl	8002a50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002186:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800218a:	2204      	movs	r2, #4
 800218c:	4619      	mov	r1, r3
 800218e:	4824      	ldr	r0, [pc, #144]	@ (8002220 <MX_TIM1_Init+0x198>)
 8002190:	f004 f988 	bl	80064a4 <HAL_TIM_PWM_ConfigChannel>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800219a:	f000 fc59 	bl	8002a50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800219e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80021a2:	2208      	movs	r2, #8
 80021a4:	4619      	mov	r1, r3
 80021a6:	481e      	ldr	r0, [pc, #120]	@ (8002220 <MX_TIM1_Init+0x198>)
 80021a8:	f004 f97c 	bl	80064a4 <HAL_TIM_PWM_ConfigChannel>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80021b2:	f000 fc4d 	bl	8002a50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80021b6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80021ba:	220c      	movs	r2, #12
 80021bc:	4619      	mov	r1, r3
 80021be:	4818      	ldr	r0, [pc, #96]	@ (8002220 <MX_TIM1_Init+0x198>)
 80021c0:	f004 f970 	bl	80064a4 <HAL_TIM_PWM_ConfigChannel>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 80021ca:	f000 fc41 	bl	8002a50 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80021ce:	2300      	movs	r3, #0
 80021d0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80021d2:	2300      	movs	r3, #0
 80021d4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80021d6:	2300      	movs	r3, #0
 80021d8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80021da:	2300      	movs	r3, #0
 80021dc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80021de:	2300      	movs	r3, #0
 80021e0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80021e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80021e6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80021e8:	2300      	movs	r3, #0
 80021ea:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80021ec:	2300      	movs	r3, #0
 80021ee:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80021f0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80021f4:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80021f6:	2300      	movs	r3, #0
 80021f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80021fa:	2300      	movs	r3, #0
 80021fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80021fe:	1d3b      	adds	r3, r7, #4
 8002200:	4619      	mov	r1, r3
 8002202:	4807      	ldr	r0, [pc, #28]	@ (8002220 <MX_TIM1_Init+0x198>)
 8002204:	f005 fa56 	bl	80076b4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 800220e:	f000 fc1f 	bl	8002a50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002212:	4803      	ldr	r0, [pc, #12]	@ (8002220 <MX_TIM1_Init+0x198>)
 8002214:	f000 fdae 	bl	8002d74 <HAL_TIM_MspPostInit>

}
 8002218:	bf00      	nop
 800221a:	3768      	adds	r7, #104	@ 0x68
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	20000258 	.word	0x20000258
 8002224:	40012c00 	.word	0x40012c00

08002228 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b090      	sub	sp, #64	@ 0x40
 800222c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800222e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002232:	2200      	movs	r2, #0
 8002234:	601a      	str	r2, [r3, #0]
 8002236:	605a      	str	r2, [r3, #4]
 8002238:	609a      	str	r2, [r3, #8]
 800223a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800223c:	f107 031c 	add.w	r3, r7, #28
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	605a      	str	r2, [r3, #4]
 8002246:	609a      	str	r2, [r3, #8]
 8002248:	60da      	str	r2, [r3, #12]
 800224a:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800224c:	f107 030c 	add.w	r3, r7, #12
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	605a      	str	r2, [r3, #4]
 8002256:	609a      	str	r2, [r3, #8]
 8002258:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800225a:	463b      	mov	r3, r7
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]
 8002260:	605a      	str	r2, [r3, #4]
 8002262:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002264:	4b42      	ldr	r3, [pc, #264]	@ (8002370 <MX_TIM2_Init+0x148>)
 8002266:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800226a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800226c:	4b40      	ldr	r3, [pc, #256]	@ (8002370 <MX_TIM2_Init+0x148>)
 800226e:	2200      	movs	r2, #0
 8002270:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002272:	4b3f      	ldr	r3, [pc, #252]	@ (8002370 <MX_TIM2_Init+0x148>)
 8002274:	2200      	movs	r2, #0
 8002276:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002278:	4b3d      	ldr	r3, [pc, #244]	@ (8002370 <MX_TIM2_Init+0x148>)
 800227a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800227e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002280:	4b3b      	ldr	r3, [pc, #236]	@ (8002370 <MX_TIM2_Init+0x148>)
 8002282:	2200      	movs	r2, #0
 8002284:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002286:	4b3a      	ldr	r3, [pc, #232]	@ (8002370 <MX_TIM2_Init+0x148>)
 8002288:	2200      	movs	r2, #0
 800228a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800228c:	4838      	ldr	r0, [pc, #224]	@ (8002370 <MX_TIM2_Init+0x148>)
 800228e:	f003 fbfb 	bl	8005a88 <HAL_TIM_Base_Init>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8002298:	f000 fbda 	bl	8002a50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800229c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022a0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80022a2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80022a6:	4619      	mov	r1, r3
 80022a8:	4831      	ldr	r0, [pc, #196]	@ (8002370 <MX_TIM2_Init+0x148>)
 80022aa:	f004 fa0f 	bl	80066cc <HAL_TIM_ConfigClockSource>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80022b4:	f000 fbcc 	bl	8002a50 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80022b8:	482d      	ldr	r0, [pc, #180]	@ (8002370 <MX_TIM2_Init+0x148>)
 80022ba:	f003 fda3 	bl	8005e04 <HAL_TIM_IC_Init>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80022c4:	f000 fbc4 	bl	8002a50 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80022c8:	2304      	movs	r3, #4
 80022ca:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80022cc:	2350      	movs	r3, #80	@ 0x50
 80022ce:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80022d0:	2300      	movs	r3, #0
 80022d2:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80022d4:	2300      	movs	r3, #0
 80022d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 80022d8:	2300      	movs	r3, #0
 80022da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80022dc:	f107 031c 	add.w	r3, r7, #28
 80022e0:	4619      	mov	r1, r3
 80022e2:	4823      	ldr	r0, [pc, #140]	@ (8002370 <MX_TIM2_Init+0x148>)
 80022e4:	f004 fabb 	bl	800685e <HAL_TIM_SlaveConfigSynchro>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 80022ee:	f000 fbaf 	bl	8002a50 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80022f2:	2300      	movs	r3, #0
 80022f4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80022f6:	2301      	movs	r3, #1
 80022f8:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80022fa:	2300      	movs	r3, #0
 80022fc:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80022fe:	2300      	movs	r3, #0
 8002300:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002302:	f107 030c 	add.w	r3, r7, #12
 8002306:	2200      	movs	r2, #0
 8002308:	4619      	mov	r1, r3
 800230a:	4819      	ldr	r0, [pc, #100]	@ (8002370 <MX_TIM2_Init+0x148>)
 800230c:	f004 f82d 	bl	800636a <HAL_TIM_IC_ConfigChannel>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8002316:	f000 fb9b 	bl	8002a50 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800231a:	2302      	movs	r3, #2
 800231c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800231e:	2302      	movs	r3, #2
 8002320:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002322:	f107 030c 	add.w	r3, r7, #12
 8002326:	2204      	movs	r2, #4
 8002328:	4619      	mov	r1, r3
 800232a:	4811      	ldr	r0, [pc, #68]	@ (8002370 <MX_TIM2_Init+0x148>)
 800232c:	f004 f81d 	bl	800636a <HAL_TIM_IC_ConfigChannel>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <MX_TIM2_Init+0x112>
  {
    Error_Handler();
 8002336:	f000 fb8b 	bl	8002a50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800233a:	2300      	movs	r3, #0
 800233c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800233e:	2300      	movs	r3, #0
 8002340:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002342:	463b      	mov	r3, r7
 8002344:	4619      	mov	r1, r3
 8002346:	480a      	ldr	r0, [pc, #40]	@ (8002370 <MX_TIM2_Init+0x148>)
 8002348:	f005 f92c 	bl	80075a4 <HAL_TIMEx_MasterConfigSynchronization>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <MX_TIM2_Init+0x12e>
  {
    Error_Handler();
 8002352:	f000 fb7d 	bl	8002a50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1); // Start input capture on channel 1
 8002356:	2100      	movs	r1, #0
 8002358:	4805      	ldr	r0, [pc, #20]	@ (8002370 <MX_TIM2_Init+0x148>)
 800235a:	f003 fdb5 	bl	8005ec8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2); // Start input capture on channel 2
 800235e:	2104      	movs	r1, #4
 8002360:	4803      	ldr	r0, [pc, #12]	@ (8002370 <MX_TIM2_Init+0x148>)
 8002362:	f003 fdb1 	bl	8005ec8 <HAL_TIM_IC_Start_IT>
  /* USER CODE END TIM2_Init 2 */

}
 8002366:	bf00      	nop
 8002368:	3740      	adds	r7, #64	@ 0x40
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	200002a4 	.word	0x200002a4

08002374 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b090      	sub	sp, #64	@ 0x40
 8002378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800237a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800237e:	2200      	movs	r2, #0
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	605a      	str	r2, [r3, #4]
 8002384:	609a      	str	r2, [r3, #8]
 8002386:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002388:	f107 031c 	add.w	r3, r7, #28
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	605a      	str	r2, [r3, #4]
 8002392:	609a      	str	r2, [r3, #8]
 8002394:	60da      	str	r2, [r3, #12]
 8002396:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002398:	f107 030c 	add.w	r3, r7, #12
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	605a      	str	r2, [r3, #4]
 80023a2:	609a      	str	r2, [r3, #8]
 80023a4:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023a6:	463b      	mov	r3, r7
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	605a      	str	r2, [r3, #4]
 80023ae:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80023b0:	4b41      	ldr	r3, [pc, #260]	@ (80024b8 <MX_TIM3_Init+0x144>)
 80023b2:	4a42      	ldr	r2, [pc, #264]	@ (80024bc <MX_TIM3_Init+0x148>)
 80023b4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 80023b6:	4b40      	ldr	r3, [pc, #256]	@ (80024b8 <MX_TIM3_Init+0x144>)
 80023b8:	224f      	movs	r2, #79	@ 0x4f
 80023ba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023bc:	4b3e      	ldr	r3, [pc, #248]	@ (80024b8 <MX_TIM3_Init+0x144>)
 80023be:	2200      	movs	r2, #0
 80023c0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 25000;
 80023c2:	4b3d      	ldr	r3, [pc, #244]	@ (80024b8 <MX_TIM3_Init+0x144>)
 80023c4:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 80023c8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023ca:	4b3b      	ldr	r3, [pc, #236]	@ (80024b8 <MX_TIM3_Init+0x144>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023d0:	4b39      	ldr	r3, [pc, #228]	@ (80024b8 <MX_TIM3_Init+0x144>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80023d6:	4838      	ldr	r0, [pc, #224]	@ (80024b8 <MX_TIM3_Init+0x144>)
 80023d8:	f003 fb56 	bl	8005a88 <HAL_TIM_Base_Init>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80023e2:	f000 fb35 	bl	8002a50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023ea:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80023ec:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80023f0:	4619      	mov	r1, r3
 80023f2:	4831      	ldr	r0, [pc, #196]	@ (80024b8 <MX_TIM3_Init+0x144>)
 80023f4:	f004 f96a 	bl	80066cc <HAL_TIM_ConfigClockSource>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80023fe:	f000 fb27 	bl	8002a50 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002402:	482d      	ldr	r0, [pc, #180]	@ (80024b8 <MX_TIM3_Init+0x144>)
 8002404:	f003 fcfe 	bl	8005e04 <HAL_TIM_IC_Init>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800240e:	f000 fb1f 	bl	8002a50 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002412:	2304      	movs	r3, #4
 8002414:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002416:	2350      	movs	r3, #80	@ 0x50
 8002418:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800241a:	2300      	movs	r3, #0
 800241c:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800241e:	2300      	movs	r3, #0
 8002420:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 8002422:	2300      	movs	r3, #0
 8002424:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8002426:	f107 031c 	add.w	r3, r7, #28
 800242a:	4619      	mov	r1, r3
 800242c:	4822      	ldr	r0, [pc, #136]	@ (80024b8 <MX_TIM3_Init+0x144>)
 800242e:	f004 fa16 	bl	800685e <HAL_TIM_SlaveConfigSynchro>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8002438:	f000 fb0a 	bl	8002a50 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800243c:	2300      	movs	r3, #0
 800243e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002440:	2301      	movs	r3, #1
 8002442:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002444:	2300      	movs	r3, #0
 8002446:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8002448:	2300      	movs	r3, #0
 800244a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800244c:	f107 030c 	add.w	r3, r7, #12
 8002450:	2200      	movs	r2, #0
 8002452:	4619      	mov	r1, r3
 8002454:	4818      	ldr	r0, [pc, #96]	@ (80024b8 <MX_TIM3_Init+0x144>)
 8002456:	f003 ff88 	bl	800636a <HAL_TIM_IC_ConfigChannel>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8002460:	f000 faf6 	bl	8002a50 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002464:	2302      	movs	r3, #2
 8002466:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002468:	2302      	movs	r3, #2
 800246a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800246c:	f107 030c 	add.w	r3, r7, #12
 8002470:	2204      	movs	r2, #4
 8002472:	4619      	mov	r1, r3
 8002474:	4810      	ldr	r0, [pc, #64]	@ (80024b8 <MX_TIM3_Init+0x144>)
 8002476:	f003 ff78 	bl	800636a <HAL_TIM_IC_ConfigChannel>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <MX_TIM3_Init+0x110>
  {
    Error_Handler();
 8002480:	f000 fae6 	bl	8002a50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002484:	2300      	movs	r3, #0
 8002486:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002488:	2300      	movs	r3, #0
 800248a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800248c:	463b      	mov	r3, r7
 800248e:	4619      	mov	r1, r3
 8002490:	4809      	ldr	r0, [pc, #36]	@ (80024b8 <MX_TIM3_Init+0x144>)
 8002492:	f005 f887 	bl	80075a4 <HAL_TIMEx_MasterConfigSynchronization>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <MX_TIM3_Init+0x12c>
  {
    Error_Handler();
 800249c:	f000 fad8 	bl	8002a50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1); // Start input capture on channel 1
 80024a0:	2100      	movs	r1, #0
 80024a2:	4805      	ldr	r0, [pc, #20]	@ (80024b8 <MX_TIM3_Init+0x144>)
 80024a4:	f003 fd10 	bl	8005ec8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2); // Start input capture on channel 2
 80024a8:	2104      	movs	r1, #4
 80024aa:	4803      	ldr	r0, [pc, #12]	@ (80024b8 <MX_TIM3_Init+0x144>)
 80024ac:	f003 fd0c 	bl	8005ec8 <HAL_TIM_IC_Start_IT>
  /* USER CODE END TIM3_Init 2 */

}
 80024b0:	bf00      	nop
 80024b2:	3740      	adds	r7, #64	@ 0x40
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	200002f0 	.word	0x200002f0
 80024bc:	40000400 	.word	0x40000400

080024c0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b090      	sub	sp, #64	@ 0x40
 80024c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024c6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80024ca:	2200      	movs	r2, #0
 80024cc:	601a      	str	r2, [r3, #0]
 80024ce:	605a      	str	r2, [r3, #4]
 80024d0:	609a      	str	r2, [r3, #8]
 80024d2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80024d4:	f107 031c 	add.w	r3, r7, #28
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	605a      	str	r2, [r3, #4]
 80024de:	609a      	str	r2, [r3, #8]
 80024e0:	60da      	str	r2, [r3, #12]
 80024e2:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80024e4:	f107 030c 	add.w	r3, r7, #12
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	605a      	str	r2, [r3, #4]
 80024ee:	609a      	str	r2, [r3, #8]
 80024f0:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024f2:	463b      	mov	r3, r7
 80024f4:	2200      	movs	r2, #0
 80024f6:	601a      	str	r2, [r3, #0]
 80024f8:	605a      	str	r2, [r3, #4]
 80024fa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80024fc:	4b41      	ldr	r3, [pc, #260]	@ (8002604 <MX_TIM4_Init+0x144>)
 80024fe:	4a42      	ldr	r2, [pc, #264]	@ (8002608 <MX_TIM4_Init+0x148>)
 8002500:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 79;
 8002502:	4b40      	ldr	r3, [pc, #256]	@ (8002604 <MX_TIM4_Init+0x144>)
 8002504:	224f      	movs	r2, #79	@ 0x4f
 8002506:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002508:	4b3e      	ldr	r3, [pc, #248]	@ (8002604 <MX_TIM4_Init+0x144>)
 800250a:	2200      	movs	r2, #0
 800250c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 25000;
 800250e:	4b3d      	ldr	r3, [pc, #244]	@ (8002604 <MX_TIM4_Init+0x144>)
 8002510:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8002514:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002516:	4b3b      	ldr	r3, [pc, #236]	@ (8002604 <MX_TIM4_Init+0x144>)
 8002518:	2200      	movs	r2, #0
 800251a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800251c:	4b39      	ldr	r3, [pc, #228]	@ (8002604 <MX_TIM4_Init+0x144>)
 800251e:	2200      	movs	r2, #0
 8002520:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002522:	4838      	ldr	r0, [pc, #224]	@ (8002604 <MX_TIM4_Init+0x144>)
 8002524:	f003 fab0 	bl	8005a88 <HAL_TIM_Base_Init>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 800252e:	f000 fa8f 	bl	8002a50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002532:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002536:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002538:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800253c:	4619      	mov	r1, r3
 800253e:	4831      	ldr	r0, [pc, #196]	@ (8002604 <MX_TIM4_Init+0x144>)
 8002540:	f004 f8c4 	bl	80066cc <HAL_TIM_ConfigClockSource>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 800254a:	f000 fa81 	bl	8002a50 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800254e:	482d      	ldr	r0, [pc, #180]	@ (8002604 <MX_TIM4_Init+0x144>)
 8002550:	f003 fc58 	bl	8005e04 <HAL_TIM_IC_Init>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800255a:	f000 fa79 	bl	8002a50 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800255e:	2304      	movs	r3, #4
 8002560:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002562:	2350      	movs	r3, #80	@ 0x50
 8002564:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002566:	2300      	movs	r3, #0
 8002568:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800256a:	2300      	movs	r3, #0
 800256c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 800256e:	2300      	movs	r3, #0
 8002570:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8002572:	f107 031c 	add.w	r3, r7, #28
 8002576:	4619      	mov	r1, r3
 8002578:	4822      	ldr	r0, [pc, #136]	@ (8002604 <MX_TIM4_Init+0x144>)
 800257a:	f004 f970 	bl	800685e <HAL_TIM_SlaveConfigSynchro>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8002584:	f000 fa64 	bl	8002a50 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002588:	2300      	movs	r3, #0
 800258a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800258c:	2301      	movs	r3, #1
 800258e:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002590:	2300      	movs	r3, #0
 8002592:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8002594:	2300      	movs	r3, #0
 8002596:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002598:	f107 030c 	add.w	r3, r7, #12
 800259c:	2200      	movs	r2, #0
 800259e:	4619      	mov	r1, r3
 80025a0:	4818      	ldr	r0, [pc, #96]	@ (8002604 <MX_TIM4_Init+0x144>)
 80025a2:	f003 fee2 	bl	800636a <HAL_TIM_IC_ConfigChannel>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <MX_TIM4_Init+0xf0>
  {
    Error_Handler();
 80025ac:	f000 fa50 	bl	8002a50 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80025b0:	2302      	movs	r3, #2
 80025b2:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80025b4:	2302      	movs	r3, #2
 80025b6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80025b8:	f107 030c 	add.w	r3, r7, #12
 80025bc:	2204      	movs	r2, #4
 80025be:	4619      	mov	r1, r3
 80025c0:	4810      	ldr	r0, [pc, #64]	@ (8002604 <MX_TIM4_Init+0x144>)
 80025c2:	f003 fed2 	bl	800636a <HAL_TIM_IC_ConfigChannel>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d001      	beq.n	80025d0 <MX_TIM4_Init+0x110>
  {
    Error_Handler();
 80025cc:	f000 fa40 	bl	8002a50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025d0:	2300      	movs	r3, #0
 80025d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025d4:	2300      	movs	r3, #0
 80025d6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80025d8:	463b      	mov	r3, r7
 80025da:	4619      	mov	r1, r3
 80025dc:	4809      	ldr	r0, [pc, #36]	@ (8002604 <MX_TIM4_Init+0x144>)
 80025de:	f004 ffe1 	bl	80075a4 <HAL_TIMEx_MasterConfigSynchronization>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <MX_TIM4_Init+0x12c>
  {
    Error_Handler();
 80025e8:	f000 fa32 	bl	8002a50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1); // Start input capture on channel 1
 80025ec:	2100      	movs	r1, #0
 80025ee:	4805      	ldr	r0, [pc, #20]	@ (8002604 <MX_TIM4_Init+0x144>)
 80025f0:	f003 fc6a 	bl	8005ec8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2); // Start input capture on channel 2
 80025f4:	2104      	movs	r1, #4
 80025f6:	4803      	ldr	r0, [pc, #12]	@ (8002604 <MX_TIM4_Init+0x144>)
 80025f8:	f003 fc66 	bl	8005ec8 <HAL_TIM_IC_Start_IT>
  /* USER CODE END TIM4_Init 2 */

}
 80025fc:	bf00      	nop
 80025fe:	3740      	adds	r7, #64	@ 0x40
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	2000033c 	.word	0x2000033c
 8002608:	40000800 	.word	0x40000800

0800260c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b090      	sub	sp, #64	@ 0x40
 8002610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002612:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002616:	2200      	movs	r2, #0
 8002618:	601a      	str	r2, [r3, #0]
 800261a:	605a      	str	r2, [r3, #4]
 800261c:	609a      	str	r2, [r3, #8]
 800261e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002620:	f107 031c 	add.w	r3, r7, #28
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	605a      	str	r2, [r3, #4]
 800262a:	609a      	str	r2, [r3, #8]
 800262c:	60da      	str	r2, [r3, #12]
 800262e:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002630:	f107 030c 	add.w	r3, r7, #12
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	605a      	str	r2, [r3, #4]
 800263a:	609a      	str	r2, [r3, #8]
 800263c:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800263e:	463b      	mov	r3, r7
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	605a      	str	r2, [r3, #4]
 8002646:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002648:	4b41      	ldr	r3, [pc, #260]	@ (8002750 <MX_TIM5_Init+0x144>)
 800264a:	4a42      	ldr	r2, [pc, #264]	@ (8002754 <MX_TIM5_Init+0x148>)
 800264c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800264e:	4b40      	ldr	r3, [pc, #256]	@ (8002750 <MX_TIM5_Init+0x144>)
 8002650:	2200      	movs	r2, #0
 8002652:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002654:	4b3e      	ldr	r3, [pc, #248]	@ (8002750 <MX_TIM5_Init+0x144>)
 8002656:	2200      	movs	r2, #0
 8002658:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800265a:	4b3d      	ldr	r3, [pc, #244]	@ (8002750 <MX_TIM5_Init+0x144>)
 800265c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002660:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002662:	4b3b      	ldr	r3, [pc, #236]	@ (8002750 <MX_TIM5_Init+0x144>)
 8002664:	2200      	movs	r2, #0
 8002666:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002668:	4b39      	ldr	r3, [pc, #228]	@ (8002750 <MX_TIM5_Init+0x144>)
 800266a:	2200      	movs	r2, #0
 800266c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800266e:	4838      	ldr	r0, [pc, #224]	@ (8002750 <MX_TIM5_Init+0x144>)
 8002670:	f003 fa0a 	bl	8005a88 <HAL_TIM_Base_Init>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 800267a:	f000 f9e9 	bl	8002a50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800267e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002682:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002684:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002688:	4619      	mov	r1, r3
 800268a:	4831      	ldr	r0, [pc, #196]	@ (8002750 <MX_TIM5_Init+0x144>)
 800268c:	f004 f81e 	bl	80066cc <HAL_TIM_ConfigClockSource>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8002696:	f000 f9db 	bl	8002a50 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 800269a:	482d      	ldr	r0, [pc, #180]	@ (8002750 <MX_TIM5_Init+0x144>)
 800269c:	f003 fbb2 	bl	8005e04 <HAL_TIM_IC_Init>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 80026a6:	f000 f9d3 	bl	8002a50 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80026aa:	2304      	movs	r3, #4
 80026ac:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80026ae:	2350      	movs	r3, #80	@ 0x50
 80026b0:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80026b2:	2300      	movs	r3, #0
 80026b4:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80026b6:	2300      	movs	r3, #0
 80026b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 80026ba:	2300      	movs	r3, #0
 80026bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 80026be:	f107 031c 	add.w	r3, r7, #28
 80026c2:	4619      	mov	r1, r3
 80026c4:	4822      	ldr	r0, [pc, #136]	@ (8002750 <MX_TIM5_Init+0x144>)
 80026c6:	f004 f8ca 	bl	800685e <HAL_TIM_SlaveConfigSynchro>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 80026d0:	f000 f9be 	bl	8002a50 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80026d4:	2300      	movs	r3, #0
 80026d6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80026d8:	2301      	movs	r3, #1
 80026da:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80026dc:	2300      	movs	r3, #0
 80026de:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80026e0:	2300      	movs	r3, #0
 80026e2:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80026e4:	f107 030c 	add.w	r3, r7, #12
 80026e8:	2200      	movs	r2, #0
 80026ea:	4619      	mov	r1, r3
 80026ec:	4818      	ldr	r0, [pc, #96]	@ (8002750 <MX_TIM5_Init+0x144>)
 80026ee:	f003 fe3c 	bl	800636a <HAL_TIM_IC_ConfigChannel>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <MX_TIM5_Init+0xf0>
  {
    Error_Handler();
 80026f8:	f000 f9aa 	bl	8002a50 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80026fc:	2302      	movs	r3, #2
 80026fe:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002700:	2302      	movs	r3, #2
 8002702:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002704:	f107 030c 	add.w	r3, r7, #12
 8002708:	2204      	movs	r2, #4
 800270a:	4619      	mov	r1, r3
 800270c:	4810      	ldr	r0, [pc, #64]	@ (8002750 <MX_TIM5_Init+0x144>)
 800270e:	f003 fe2c 	bl	800636a <HAL_TIM_IC_ConfigChannel>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <MX_TIM5_Init+0x110>
  {
    Error_Handler();
 8002718:	f000 f99a 	bl	8002a50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800271c:	2300      	movs	r3, #0
 800271e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002720:	2300      	movs	r3, #0
 8002722:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002724:	463b      	mov	r3, r7
 8002726:	4619      	mov	r1, r3
 8002728:	4809      	ldr	r0, [pc, #36]	@ (8002750 <MX_TIM5_Init+0x144>)
 800272a:	f004 ff3b 	bl	80075a4 <HAL_TIMEx_MasterConfigSynchronization>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <MX_TIM5_Init+0x12c>
  {
    Error_Handler();
 8002734:	f000 f98c 	bl	8002a50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1); // Start input capture on channel 1
 8002738:	2100      	movs	r1, #0
 800273a:	4805      	ldr	r0, [pc, #20]	@ (8002750 <MX_TIM5_Init+0x144>)
 800273c:	f003 fbc4 	bl	8005ec8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_2); // Start input capture on channel 2
 8002740:	2104      	movs	r1, #4
 8002742:	4803      	ldr	r0, [pc, #12]	@ (8002750 <MX_TIM5_Init+0x144>)
 8002744:	f003 fbc0 	bl	8005ec8 <HAL_TIM_IC_Start_IT>
  /* USER CODE END TIM5_Init 2 */

}
 8002748:	bf00      	nop
 800274a:	3740      	adds	r7, #64	@ 0x40
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	20000388 	.word	0x20000388
 8002754:	40000c00 	.word	0x40000c00

08002758 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800275c:	4b14      	ldr	r3, [pc, #80]	@ (80027b0 <MX_USART2_UART_Init+0x58>)
 800275e:	4a15      	ldr	r2, [pc, #84]	@ (80027b4 <MX_USART2_UART_Init+0x5c>)
 8002760:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002762:	4b13      	ldr	r3, [pc, #76]	@ (80027b0 <MX_USART2_UART_Init+0x58>)
 8002764:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002768:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800276a:	4b11      	ldr	r3, [pc, #68]	@ (80027b0 <MX_USART2_UART_Init+0x58>)
 800276c:	2200      	movs	r2, #0
 800276e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002770:	4b0f      	ldr	r3, [pc, #60]	@ (80027b0 <MX_USART2_UART_Init+0x58>)
 8002772:	2200      	movs	r2, #0
 8002774:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002776:	4b0e      	ldr	r3, [pc, #56]	@ (80027b0 <MX_USART2_UART_Init+0x58>)
 8002778:	2200      	movs	r2, #0
 800277a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800277c:	4b0c      	ldr	r3, [pc, #48]	@ (80027b0 <MX_USART2_UART_Init+0x58>)
 800277e:	220c      	movs	r2, #12
 8002780:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002782:	4b0b      	ldr	r3, [pc, #44]	@ (80027b0 <MX_USART2_UART_Init+0x58>)
 8002784:	2200      	movs	r2, #0
 8002786:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002788:	4b09      	ldr	r3, [pc, #36]	@ (80027b0 <MX_USART2_UART_Init+0x58>)
 800278a:	2200      	movs	r2, #0
 800278c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800278e:	4b08      	ldr	r3, [pc, #32]	@ (80027b0 <MX_USART2_UART_Init+0x58>)
 8002790:	2200      	movs	r2, #0
 8002792:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002794:	4b06      	ldr	r3, [pc, #24]	@ (80027b0 <MX_USART2_UART_Init+0x58>)
 8002796:	2200      	movs	r2, #0
 8002798:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800279a:	4805      	ldr	r0, [pc, #20]	@ (80027b0 <MX_USART2_UART_Init+0x58>)
 800279c:	f005 f826 	bl	80077ec <HAL_UART_Init>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80027a6:	f000 f953 	bl	8002a50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80027aa:	bf00      	nop
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	200003d4 	.word	0x200003d4
 80027b4:	40004400 	.word	0x40004400

080027b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b08a      	sub	sp, #40	@ 0x28
 80027bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027be:	f107 0314 	add.w	r3, r7, #20
 80027c2:	2200      	movs	r2, #0
 80027c4:	601a      	str	r2, [r3, #0]
 80027c6:	605a      	str	r2, [r3, #4]
 80027c8:	609a      	str	r2, [r3, #8]
 80027ca:	60da      	str	r2, [r3, #12]
 80027cc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027ce:	4b2b      	ldr	r3, [pc, #172]	@ (800287c <MX_GPIO_Init+0xc4>)
 80027d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027d2:	4a2a      	ldr	r2, [pc, #168]	@ (800287c <MX_GPIO_Init+0xc4>)
 80027d4:	f043 0304 	orr.w	r3, r3, #4
 80027d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027da:	4b28      	ldr	r3, [pc, #160]	@ (800287c <MX_GPIO_Init+0xc4>)
 80027dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027de:	f003 0304 	and.w	r3, r3, #4
 80027e2:	613b      	str	r3, [r7, #16]
 80027e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80027e6:	4b25      	ldr	r3, [pc, #148]	@ (800287c <MX_GPIO_Init+0xc4>)
 80027e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027ea:	4a24      	ldr	r2, [pc, #144]	@ (800287c <MX_GPIO_Init+0xc4>)
 80027ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027f2:	4b22      	ldr	r3, [pc, #136]	@ (800287c <MX_GPIO_Init+0xc4>)
 80027f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027fa:	60fb      	str	r3, [r7, #12]
 80027fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027fe:	4b1f      	ldr	r3, [pc, #124]	@ (800287c <MX_GPIO_Init+0xc4>)
 8002800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002802:	4a1e      	ldr	r2, [pc, #120]	@ (800287c <MX_GPIO_Init+0xc4>)
 8002804:	f043 0301 	orr.w	r3, r3, #1
 8002808:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800280a:	4b1c      	ldr	r3, [pc, #112]	@ (800287c <MX_GPIO_Init+0xc4>)
 800280c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	60bb      	str	r3, [r7, #8]
 8002814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002816:	4b19      	ldr	r3, [pc, #100]	@ (800287c <MX_GPIO_Init+0xc4>)
 8002818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800281a:	4a18      	ldr	r2, [pc, #96]	@ (800287c <MX_GPIO_Init+0xc4>)
 800281c:	f043 0302 	orr.w	r3, r3, #2
 8002820:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002822:	4b16      	ldr	r3, [pc, #88]	@ (800287c <MX_GPIO_Init+0xc4>)
 8002824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	607b      	str	r3, [r7, #4]
 800282c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800282e:	2200      	movs	r2, #0
 8002830:	2120      	movs	r1, #32
 8002832:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002836:	f000 ffcb 	bl	80037d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800283a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800283e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002840:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002844:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002846:	2300      	movs	r3, #0
 8002848:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800284a:	f107 0314 	add.w	r3, r7, #20
 800284e:	4619      	mov	r1, r3
 8002850:	480b      	ldr	r0, [pc, #44]	@ (8002880 <MX_GPIO_Init+0xc8>)
 8002852:	f000 fe13 	bl	800347c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002856:	2320      	movs	r3, #32
 8002858:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800285a:	2301      	movs	r3, #1
 800285c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285e:	2300      	movs	r3, #0
 8002860:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002862:	2300      	movs	r3, #0
 8002864:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002866:	f107 0314 	add.w	r3, r7, #20
 800286a:	4619      	mov	r1, r3
 800286c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002870:	f000 fe04 	bl	800347c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002874:	bf00      	nop
 8002876:	3728      	adds	r7, #40	@ 0x28
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	40021000 	.word	0x40021000
 8002880:	48000800 	.word	0x48000800

08002884 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002890:	2300      	movs	r3, #0
 8002892:	617b      	str	r3, [r7, #20]
 8002894:	e009      	b.n	80028aa <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	1c5a      	adds	r2, r3, #1
 800289a:	60ba      	str	r2, [r7, #8]
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	4618      	mov	r0, r3
 80028a0:	f7fe ff93 	bl	80017ca <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	3301      	adds	r3, #1
 80028a8:	617b      	str	r3, [r7, #20]
 80028aa:	697a      	ldr	r2, [r7, #20]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	dbf1      	blt.n	8002896 <_write+0x12>
  }
  return len;
 80028b2:	687b      	ldr	r3, [r7, #4]
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3718      	adds	r7, #24
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <HAL_TIM_IC_CaptureCallback>:
// 		}
// 	}
// }

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028bc:	b590      	push	{r4, r7, lr}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
    if(htim ->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	7f1b      	ldrb	r3, [r3, #28]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	f040 80a5 	bne.w	8002a18 <HAL_TIM_IC_CaptureCallback+0x15c>
    {
      if(htim == &htim2)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a53      	ldr	r2, [pc, #332]	@ (8002a20 <HAL_TIM_IC_CaptureCallback+0x164>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d128      	bne.n	8002928 <HAL_TIM_IC_CaptureCallback+0x6c>
      {
        roll_input = 10000 * HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2) / HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1) - 750;
 80028d6:	2104      	movs	r1, #4
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f004 f803 	bl	80068e4 <HAL_TIM_ReadCapturedValue>
 80028de:	4603      	mov	r3, r0
 80028e0:	f242 7210 	movw	r2, #10000	@ 0x2710
 80028e4:	fb02 f403 	mul.w	r4, r2, r3
 80028e8:	2100      	movs	r1, #0
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f003 fffa 	bl	80068e4 <HAL_TIM_ReadCapturedValue>
 80028f0:	4603      	mov	r3, r0
 80028f2:	fbb4 f3f3 	udiv	r3, r4, r3
 80028f6:	f2a3 23ee 	subw	r3, r3, #750	@ 0x2ee
 80028fa:	461a      	mov	r2, r3
 80028fc:	4b49      	ldr	r3, [pc, #292]	@ (8002a24 <HAL_TIM_IC_CaptureCallback+0x168>)
 80028fe:	601a      	str	r2, [r3, #0]
        roll_input_deg = roll_input / 250 * MAX_ANGLE;
 8002900:	4b48      	ldr	r3, [pc, #288]	@ (8002a24 <HAL_TIM_IC_CaptureCallback+0x168>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a48      	ldr	r2, [pc, #288]	@ (8002a28 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8002906:	fb82 1203 	smull	r1, r2, r2, r3
 800290a:	1112      	asrs	r2, r2, #4
 800290c:	17db      	asrs	r3, r3, #31
 800290e:	1ad2      	subs	r2, r2, r3
 8002910:	4613      	mov	r3, r2
 8002912:	011b      	lsls	r3, r3, #4
 8002914:	1a9b      	subs	r3, r3, r2
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	ee07 3a90 	vmov	s15, r3
 800291c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002920:	4b42      	ldr	r3, [pc, #264]	@ (8002a2c <HAL_TIM_IC_CaptureCallback+0x170>)
 8002922:	edc3 7a00 	vstr	s15, [r3]
      {
        yaw_input = 10000 * HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2) / HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1) - 750;
        yaw_input_degps = yaw_input / 250 * MAX_YAW_RATE;
      }
     }
}
 8002926:	e077      	b.n	8002a18 <HAL_TIM_IC_CaptureCallback+0x15c>
      else if(htim->Instance == htim3.Instance)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	4b40      	ldr	r3, [pc, #256]	@ (8002a30 <HAL_TIM_IC_CaptureCallback+0x174>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	429a      	cmp	r2, r3
 8002932:	d128      	bne.n	8002986 <HAL_TIM_IC_CaptureCallback+0xca>
        pitch_input = 10000 * HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2) / HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1) - 750;
 8002934:	2104      	movs	r1, #4
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f003 ffd4 	bl	80068e4 <HAL_TIM_ReadCapturedValue>
 800293c:	4603      	mov	r3, r0
 800293e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8002942:	fb02 f403 	mul.w	r4, r2, r3
 8002946:	2100      	movs	r1, #0
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f003 ffcb 	bl	80068e4 <HAL_TIM_ReadCapturedValue>
 800294e:	4603      	mov	r3, r0
 8002950:	fbb4 f3f3 	udiv	r3, r4, r3
 8002954:	f2a3 23ee 	subw	r3, r3, #750	@ 0x2ee
 8002958:	461a      	mov	r2, r3
 800295a:	4b36      	ldr	r3, [pc, #216]	@ (8002a34 <HAL_TIM_IC_CaptureCallback+0x178>)
 800295c:	601a      	str	r2, [r3, #0]
        pitch_input_deg = pitch_input / 250 * MAX_ANGLE;
 800295e:	4b35      	ldr	r3, [pc, #212]	@ (8002a34 <HAL_TIM_IC_CaptureCallback+0x178>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a31      	ldr	r2, [pc, #196]	@ (8002a28 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8002964:	fb82 1203 	smull	r1, r2, r2, r3
 8002968:	1112      	asrs	r2, r2, #4
 800296a:	17db      	asrs	r3, r3, #31
 800296c:	1ad2      	subs	r2, r2, r3
 800296e:	4613      	mov	r3, r2
 8002970:	011b      	lsls	r3, r3, #4
 8002972:	1a9b      	subs	r3, r3, r2
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	ee07 3a90 	vmov	s15, r3
 800297a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800297e:	4b2e      	ldr	r3, [pc, #184]	@ (8002a38 <HAL_TIM_IC_CaptureCallback+0x17c>)
 8002980:	edc3 7a00 	vstr	s15, [r3]
}
 8002984:	e048      	b.n	8002a18 <HAL_TIM_IC_CaptureCallback+0x15c>
      else if(htim->Instance == htim4.Instance)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	4b2c      	ldr	r3, [pc, #176]	@ (8002a3c <HAL_TIM_IC_CaptureCallback+0x180>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	429a      	cmp	r2, r3
 8002990:	d115      	bne.n	80029be <HAL_TIM_IC_CaptureCallback+0x102>
        thrust_input = 10000 * HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2) / HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1) - 500;
 8002992:	2104      	movs	r1, #4
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f003 ffa5 	bl	80068e4 <HAL_TIM_ReadCapturedValue>
 800299a:	4603      	mov	r3, r0
 800299c:	f242 7210 	movw	r2, #10000	@ 0x2710
 80029a0:	fb02 f403 	mul.w	r4, r2, r3
 80029a4:	2100      	movs	r1, #0
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f003 ff9c 	bl	80068e4 <HAL_TIM_ReadCapturedValue>
 80029ac:	4603      	mov	r3, r0
 80029ae:	fbb4 f3f3 	udiv	r3, r4, r3
 80029b2:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80029b6:	461a      	mov	r2, r3
 80029b8:	4b21      	ldr	r3, [pc, #132]	@ (8002a40 <HAL_TIM_IC_CaptureCallback+0x184>)
 80029ba:	601a      	str	r2, [r3, #0]
}
 80029bc:	e02c      	b.n	8002a18 <HAL_TIM_IC_CaptureCallback+0x15c>
      else if(htim->Instance == htim5.Instance)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	4b20      	ldr	r3, [pc, #128]	@ (8002a44 <HAL_TIM_IC_CaptureCallback+0x188>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d126      	bne.n	8002a18 <HAL_TIM_IC_CaptureCallback+0x15c>
        yaw_input = 10000 * HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2) / HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1) - 750;
 80029ca:	2104      	movs	r1, #4
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f003 ff89 	bl	80068e4 <HAL_TIM_ReadCapturedValue>
 80029d2:	4603      	mov	r3, r0
 80029d4:	f242 7210 	movw	r2, #10000	@ 0x2710
 80029d8:	fb02 f403 	mul.w	r4, r2, r3
 80029dc:	2100      	movs	r1, #0
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f003 ff80 	bl	80068e4 <HAL_TIM_ReadCapturedValue>
 80029e4:	4603      	mov	r3, r0
 80029e6:	fbb4 f3f3 	udiv	r3, r4, r3
 80029ea:	f2a3 23ee 	subw	r3, r3, #750	@ 0x2ee
 80029ee:	461a      	mov	r2, r3
 80029f0:	4b15      	ldr	r3, [pc, #84]	@ (8002a48 <HAL_TIM_IC_CaptureCallback+0x18c>)
 80029f2:	601a      	str	r2, [r3, #0]
        yaw_input_degps = yaw_input / 250 * MAX_YAW_RATE;
 80029f4:	4b14      	ldr	r3, [pc, #80]	@ (8002a48 <HAL_TIM_IC_CaptureCallback+0x18c>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a0b      	ldr	r2, [pc, #44]	@ (8002a28 <HAL_TIM_IC_CaptureCallback+0x16c>)
 80029fa:	fb82 1203 	smull	r1, r2, r2, r3
 80029fe:	1112      	asrs	r2, r2, #4
 8002a00:	17db      	asrs	r3, r3, #31
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	22b4      	movs	r2, #180	@ 0xb4
 8002a06:	fb02 f303 	mul.w	r3, r2, r3
 8002a0a:	ee07 3a90 	vmov	s15, r3
 8002a0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a12:	4b0e      	ldr	r3, [pc, #56]	@ (8002a4c <HAL_TIM_IC_CaptureCallback+0x190>)
 8002a14:	edc3 7a00 	vstr	s15, [r3]
}
 8002a18:	bf00      	nop
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd90      	pop	{r4, r7, pc}
 8002a20:	200002a4 	.word	0x200002a4
 8002a24:	2000058c 	.word	0x2000058c
 8002a28:	10624dd3 	.word	0x10624dd3
 8002a2c:	2000059c 	.word	0x2000059c
 8002a30:	200002f0 	.word	0x200002f0
 8002a34:	20000590 	.word	0x20000590
 8002a38:	200005a0 	.word	0x200005a0
 8002a3c:	2000033c 	.word	0x2000033c
 8002a40:	20000594 	.word	0x20000594
 8002a44:	20000388 	.word	0x20000388
 8002a48:	20000598 	.word	0x20000598
 8002a4c:	200005a4 	.word	0x200005a4

08002a50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a54:	b672      	cpsid	i
}
 8002a56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a58:	bf00      	nop
 8002a5a:	e7fd      	b.n	8002a58 <Error_Handler+0x8>

08002a5c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a62:	4b0f      	ldr	r3, [pc, #60]	@ (8002aa0 <HAL_MspInit+0x44>)
 8002a64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a66:	4a0e      	ldr	r2, [pc, #56]	@ (8002aa0 <HAL_MspInit+0x44>)
 8002a68:	f043 0301 	orr.w	r3, r3, #1
 8002a6c:	6613      	str	r3, [r2, #96]	@ 0x60
 8002a6e:	4b0c      	ldr	r3, [pc, #48]	@ (8002aa0 <HAL_MspInit+0x44>)
 8002a70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	607b      	str	r3, [r7, #4]
 8002a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a7a:	4b09      	ldr	r3, [pc, #36]	@ (8002aa0 <HAL_MspInit+0x44>)
 8002a7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a7e:	4a08      	ldr	r2, [pc, #32]	@ (8002aa0 <HAL_MspInit+0x44>)
 8002a80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a84:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a86:	4b06      	ldr	r3, [pc, #24]	@ (8002aa0 <HAL_MspInit+0x44>)
 8002a88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a8e:	603b      	str	r3, [r7, #0]
 8002a90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a92:	bf00      	nop
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	40021000 	.word	0x40021000

08002aa4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b0ac      	sub	sp, #176	@ 0xb0
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aac:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	601a      	str	r2, [r3, #0]
 8002ab4:	605a      	str	r2, [r3, #4]
 8002ab6:	609a      	str	r2, [r3, #8]
 8002ab8:	60da      	str	r2, [r3, #12]
 8002aba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002abc:	f107 0314 	add.w	r3, r7, #20
 8002ac0:	2288      	movs	r2, #136	@ 0x88
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f007 f97f 	bl	8009dc8 <memset>
  if(hi2c->Instance==I2C1)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a21      	ldr	r2, [pc, #132]	@ (8002b54 <HAL_I2C_MspInit+0xb0>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d13b      	bne.n	8002b4c <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002ad4:	2340      	movs	r3, #64	@ 0x40
 8002ad6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002adc:	f107 0314 	add.w	r3, r7, #20
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f002 fb15 	bl	8005110 <HAL_RCCEx_PeriphCLKConfig>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002aec:	f7ff ffb0 	bl	8002a50 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002af0:	4b19      	ldr	r3, [pc, #100]	@ (8002b58 <HAL_I2C_MspInit+0xb4>)
 8002af2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002af4:	4a18      	ldr	r2, [pc, #96]	@ (8002b58 <HAL_I2C_MspInit+0xb4>)
 8002af6:	f043 0302 	orr.w	r3, r3, #2
 8002afa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002afc:	4b16      	ldr	r3, [pc, #88]	@ (8002b58 <HAL_I2C_MspInit+0xb4>)
 8002afe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	613b      	str	r3, [r7, #16]
 8002b06:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002b08:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002b0c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b10:	2312      	movs	r3, #18
 8002b12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b16:	2300      	movs	r3, #0
 8002b18:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b22:	2304      	movs	r3, #4
 8002b24:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b28:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	480b      	ldr	r0, [pc, #44]	@ (8002b5c <HAL_I2C_MspInit+0xb8>)
 8002b30:	f000 fca4 	bl	800347c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b34:	4b08      	ldr	r3, [pc, #32]	@ (8002b58 <HAL_I2C_MspInit+0xb4>)
 8002b36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b38:	4a07      	ldr	r2, [pc, #28]	@ (8002b58 <HAL_I2C_MspInit+0xb4>)
 8002b3a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002b3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b40:	4b05      	ldr	r3, [pc, #20]	@ (8002b58 <HAL_I2C_MspInit+0xb4>)
 8002b42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b48:	60fb      	str	r3, [r7, #12]
 8002b4a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002b4c:	bf00      	nop
 8002b4e:	37b0      	adds	r7, #176	@ 0xb0
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	40005400 	.word	0x40005400
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	48000400 	.word	0x48000400

08002b60 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b090      	sub	sp, #64	@ 0x40
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b68:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]
 8002b70:	605a      	str	r2, [r3, #4]
 8002b72:	609a      	str	r2, [r3, #8]
 8002b74:	60da      	str	r2, [r3, #12]
 8002b76:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a77      	ldr	r2, [pc, #476]	@ (8002d5c <HAL_TIM_Base_MspInit+0x1fc>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d10c      	bne.n	8002b9c <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b82:	4b77      	ldr	r3, [pc, #476]	@ (8002d60 <HAL_TIM_Base_MspInit+0x200>)
 8002b84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b86:	4a76      	ldr	r2, [pc, #472]	@ (8002d60 <HAL_TIM_Base_MspInit+0x200>)
 8002b88:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002b8c:	6613      	str	r3, [r2, #96]	@ 0x60
 8002b8e:	4b74      	ldr	r3, [pc, #464]	@ (8002d60 <HAL_TIM_Base_MspInit+0x200>)
 8002b90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b96:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /* USER CODE BEGIN TIM5_MspInit 1 */

    /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002b9a:	e0da      	b.n	8002d52 <HAL_TIM_Base_MspInit+0x1f2>
  else if(htim_base->Instance==TIM2)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ba4:	d132      	bne.n	8002c0c <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ba6:	4b6e      	ldr	r3, [pc, #440]	@ (8002d60 <HAL_TIM_Base_MspInit+0x200>)
 8002ba8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002baa:	4a6d      	ldr	r2, [pc, #436]	@ (8002d60 <HAL_TIM_Base_MspInit+0x200>)
 8002bac:	f043 0301 	orr.w	r3, r3, #1
 8002bb0:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bb2:	4b6b      	ldr	r3, [pc, #428]	@ (8002d60 <HAL_TIM_Base_MspInit+0x200>)
 8002bb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bbe:	4b68      	ldr	r3, [pc, #416]	@ (8002d60 <HAL_TIM_Base_MspInit+0x200>)
 8002bc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bc2:	4a67      	ldr	r2, [pc, #412]	@ (8002d60 <HAL_TIM_Base_MspInit+0x200>)
 8002bc4:	f043 0301 	orr.w	r3, r3, #1
 8002bc8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002bca:	4b65      	ldr	r3, [pc, #404]	@ (8002d60 <HAL_TIM_Base_MspInit+0x200>)
 8002bcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	623b      	str	r3, [r7, #32]
 8002bd4:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = ROLL_INPUT_PWM_Pin;
 8002bd6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002bda:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bdc:	2302      	movs	r3, #2
 8002bde:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be0:	2300      	movs	r3, #0
 8002be2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be4:	2300      	movs	r3, #0
 8002be6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002be8:	2301      	movs	r3, #1
 8002bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(ROLL_INPUT_PWM_GPIO_Port, &GPIO_InitStruct);
 8002bec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002bf6:	f000 fc41 	bl	800347c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	2100      	movs	r1, #0
 8002bfe:	201c      	movs	r0, #28
 8002c00:	f000 fc05 	bl	800340e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002c04:	201c      	movs	r0, #28
 8002c06:	f000 fc1e 	bl	8003446 <HAL_NVIC_EnableIRQ>
}
 8002c0a:	e0a2      	b.n	8002d52 <HAL_TIM_Base_MspInit+0x1f2>
  else if(htim_base->Instance==TIM3)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a54      	ldr	r2, [pc, #336]	@ (8002d64 <HAL_TIM_Base_MspInit+0x204>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d131      	bne.n	8002c7a <HAL_TIM_Base_MspInit+0x11a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c16:	4b52      	ldr	r3, [pc, #328]	@ (8002d60 <HAL_TIM_Base_MspInit+0x200>)
 8002c18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c1a:	4a51      	ldr	r2, [pc, #324]	@ (8002d60 <HAL_TIM_Base_MspInit+0x200>)
 8002c1c:	f043 0302 	orr.w	r3, r3, #2
 8002c20:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c22:	4b4f      	ldr	r3, [pc, #316]	@ (8002d60 <HAL_TIM_Base_MspInit+0x200>)
 8002c24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	61fb      	str	r3, [r7, #28]
 8002c2c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c2e:	4b4c      	ldr	r3, [pc, #304]	@ (8002d60 <HAL_TIM_Base_MspInit+0x200>)
 8002c30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c32:	4a4b      	ldr	r2, [pc, #300]	@ (8002d60 <HAL_TIM_Base_MspInit+0x200>)
 8002c34:	f043 0301 	orr.w	r3, r3, #1
 8002c38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c3a:	4b49      	ldr	r3, [pc, #292]	@ (8002d60 <HAL_TIM_Base_MspInit+0x200>)
 8002c3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	61bb      	str	r3, [r7, #24]
 8002c44:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = PITCH_INPUT_PWM_Pin;
 8002c46:	2340      	movs	r3, #64	@ 0x40
 8002c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c52:	2300      	movs	r3, #0
 8002c54:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c56:	2302      	movs	r3, #2
 8002c58:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(PITCH_INPUT_PWM_GPIO_Port, &GPIO_InitStruct);
 8002c5a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c5e:	4619      	mov	r1, r3
 8002c60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c64:	f000 fc0a 	bl	800347c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002c68:	2200      	movs	r2, #0
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	201d      	movs	r0, #29
 8002c6e:	f000 fbce 	bl	800340e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002c72:	201d      	movs	r0, #29
 8002c74:	f000 fbe7 	bl	8003446 <HAL_NVIC_EnableIRQ>
}
 8002c78:	e06b      	b.n	8002d52 <HAL_TIM_Base_MspInit+0x1f2>
  else if(htim_base->Instance==TIM4)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a3a      	ldr	r2, [pc, #232]	@ (8002d68 <HAL_TIM_Base_MspInit+0x208>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d130      	bne.n	8002ce6 <HAL_TIM_Base_MspInit+0x186>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002c84:	4b36      	ldr	r3, [pc, #216]	@ (8002d60 <HAL_TIM_Base_MspInit+0x200>)
 8002c86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c88:	4a35      	ldr	r2, [pc, #212]	@ (8002d60 <HAL_TIM_Base_MspInit+0x200>)
 8002c8a:	f043 0304 	orr.w	r3, r3, #4
 8002c8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c90:	4b33      	ldr	r3, [pc, #204]	@ (8002d60 <HAL_TIM_Base_MspInit+0x200>)
 8002c92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c94:	f003 0304 	and.w	r3, r3, #4
 8002c98:	617b      	str	r3, [r7, #20]
 8002c9a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c9c:	4b30      	ldr	r3, [pc, #192]	@ (8002d60 <HAL_TIM_Base_MspInit+0x200>)
 8002c9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ca0:	4a2f      	ldr	r2, [pc, #188]	@ (8002d60 <HAL_TIM_Base_MspInit+0x200>)
 8002ca2:	f043 0302 	orr.w	r3, r3, #2
 8002ca6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ca8:	4b2d      	ldr	r3, [pc, #180]	@ (8002d60 <HAL_TIM_Base_MspInit+0x200>)
 8002caa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cac:	f003 0302 	and.w	r3, r3, #2
 8002cb0:	613b      	str	r3, [r7, #16]
 8002cb2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TRHUST_INPUT_PWM_Pin;
 8002cb4:	2340      	movs	r3, #64	@ 0x40
 8002cb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cb8:	2302      	movs	r3, #2
 8002cba:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(TRHUST_INPUT_PWM_GPIO_Port, &GPIO_InitStruct);
 8002cc8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ccc:	4619      	mov	r1, r3
 8002cce:	4827      	ldr	r0, [pc, #156]	@ (8002d6c <HAL_TIM_Base_MspInit+0x20c>)
 8002cd0:	f000 fbd4 	bl	800347c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	201e      	movs	r0, #30
 8002cda:	f000 fb98 	bl	800340e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002cde:	201e      	movs	r0, #30
 8002ce0:	f000 fbb1 	bl	8003446 <HAL_NVIC_EnableIRQ>
}
 8002ce4:	e035      	b.n	8002d52 <HAL_TIM_Base_MspInit+0x1f2>
  else if(htim_base->Instance==TIM5)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a21      	ldr	r2, [pc, #132]	@ (8002d70 <HAL_TIM_Base_MspInit+0x210>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d130      	bne.n	8002d52 <HAL_TIM_Base_MspInit+0x1f2>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002cf0:	4b1b      	ldr	r3, [pc, #108]	@ (8002d60 <HAL_TIM_Base_MspInit+0x200>)
 8002cf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cf4:	4a1a      	ldr	r2, [pc, #104]	@ (8002d60 <HAL_TIM_Base_MspInit+0x200>)
 8002cf6:	f043 0308 	orr.w	r3, r3, #8
 8002cfa:	6593      	str	r3, [r2, #88]	@ 0x58
 8002cfc:	4b18      	ldr	r3, [pc, #96]	@ (8002d60 <HAL_TIM_Base_MspInit+0x200>)
 8002cfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d00:	f003 0308 	and.w	r3, r3, #8
 8002d04:	60fb      	str	r3, [r7, #12]
 8002d06:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d08:	4b15      	ldr	r3, [pc, #84]	@ (8002d60 <HAL_TIM_Base_MspInit+0x200>)
 8002d0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d0c:	4a14      	ldr	r2, [pc, #80]	@ (8002d60 <HAL_TIM_Base_MspInit+0x200>)
 8002d0e:	f043 0301 	orr.w	r3, r3, #1
 8002d12:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d14:	4b12      	ldr	r3, [pc, #72]	@ (8002d60 <HAL_TIM_Base_MspInit+0x200>)
 8002d16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d18:	f003 0301 	and.w	r3, r3, #1
 8002d1c:	60bb      	str	r3, [r7, #8]
 8002d1e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = YAW_INPUT_PWM_Pin;
 8002d20:	2301      	movs	r3, #1
 8002d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d24:	2302      	movs	r3, #2
 8002d26:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002d30:	2302      	movs	r3, #2
 8002d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(YAW_INPUT_PWM_GPIO_Port, &GPIO_InitStruct);
 8002d34:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d38:	4619      	mov	r1, r3
 8002d3a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d3e:	f000 fb9d 	bl	800347c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002d42:	2200      	movs	r2, #0
 8002d44:	2100      	movs	r1, #0
 8002d46:	2032      	movs	r0, #50	@ 0x32
 8002d48:	f000 fb61 	bl	800340e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002d4c:	2032      	movs	r0, #50	@ 0x32
 8002d4e:	f000 fb7a 	bl	8003446 <HAL_NVIC_EnableIRQ>
}
 8002d52:	bf00      	nop
 8002d54:	3740      	adds	r7, #64	@ 0x40
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	40012c00 	.word	0x40012c00
 8002d60:	40021000 	.word	0x40021000
 8002d64:	40000400 	.word	0x40000400
 8002d68:	40000800 	.word	0x40000800
 8002d6c:	48000400 	.word	0x48000400
 8002d70:	40000c00 	.word	0x40000c00

08002d74 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b088      	sub	sp, #32
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d7c:	f107 030c 	add.w	r3, r7, #12
 8002d80:	2200      	movs	r2, #0
 8002d82:	601a      	str	r2, [r3, #0]
 8002d84:	605a      	str	r2, [r3, #4]
 8002d86:	609a      	str	r2, [r3, #8]
 8002d88:	60da      	str	r2, [r3, #12]
 8002d8a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a12      	ldr	r2, [pc, #72]	@ (8002ddc <HAL_TIM_MspPostInit+0x68>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d11d      	bne.n	8002dd2 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d96:	4b12      	ldr	r3, [pc, #72]	@ (8002de0 <HAL_TIM_MspPostInit+0x6c>)
 8002d98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d9a:	4a11      	ldr	r2, [pc, #68]	@ (8002de0 <HAL_TIM_MspPostInit+0x6c>)
 8002d9c:	f043 0301 	orr.w	r3, r3, #1
 8002da0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002da2:	4b0f      	ldr	r3, [pc, #60]	@ (8002de0 <HAL_TIM_MspPostInit+0x6c>)
 8002da4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	60bb      	str	r3, [r7, #8]
 8002dac:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8002dae:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002db2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db4:	2302      	movs	r3, #2
 8002db6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db8:	2300      	movs	r3, #0
 8002dba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dc4:	f107 030c 	add.w	r3, r7, #12
 8002dc8:	4619      	mov	r1, r3
 8002dca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002dce:	f000 fb55 	bl	800347c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002dd2:	bf00      	nop
 8002dd4:	3720      	adds	r7, #32
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	40012c00 	.word	0x40012c00
 8002de0:	40021000 	.word	0x40021000

08002de4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b0ac      	sub	sp, #176	@ 0xb0
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dec:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002df0:	2200      	movs	r2, #0
 8002df2:	601a      	str	r2, [r3, #0]
 8002df4:	605a      	str	r2, [r3, #4]
 8002df6:	609a      	str	r2, [r3, #8]
 8002df8:	60da      	str	r2, [r3, #12]
 8002dfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002dfc:	f107 0314 	add.w	r3, r7, #20
 8002e00:	2288      	movs	r2, #136	@ 0x88
 8002e02:	2100      	movs	r1, #0
 8002e04:	4618      	mov	r0, r3
 8002e06:	f006 ffdf 	bl	8009dc8 <memset>
  if(huart->Instance==USART2)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a21      	ldr	r2, [pc, #132]	@ (8002e94 <HAL_UART_MspInit+0xb0>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d13b      	bne.n	8002e8c <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002e14:	2302      	movs	r3, #2
 8002e16:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e1c:	f107 0314 	add.w	r3, r7, #20
 8002e20:	4618      	mov	r0, r3
 8002e22:	f002 f975 	bl	8005110 <HAL_RCCEx_PeriphCLKConfig>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d001      	beq.n	8002e30 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002e2c:	f7ff fe10 	bl	8002a50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e30:	4b19      	ldr	r3, [pc, #100]	@ (8002e98 <HAL_UART_MspInit+0xb4>)
 8002e32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e34:	4a18      	ldr	r2, [pc, #96]	@ (8002e98 <HAL_UART_MspInit+0xb4>)
 8002e36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e3c:	4b16      	ldr	r3, [pc, #88]	@ (8002e98 <HAL_UART_MspInit+0xb4>)
 8002e3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e44:	613b      	str	r3, [r7, #16]
 8002e46:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e48:	4b13      	ldr	r3, [pc, #76]	@ (8002e98 <HAL_UART_MspInit+0xb4>)
 8002e4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e4c:	4a12      	ldr	r2, [pc, #72]	@ (8002e98 <HAL_UART_MspInit+0xb4>)
 8002e4e:	f043 0301 	orr.w	r3, r3, #1
 8002e52:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e54:	4b10      	ldr	r3, [pc, #64]	@ (8002e98 <HAL_UART_MspInit+0xb4>)
 8002e56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e58:	f003 0301 	and.w	r3, r3, #1
 8002e5c:	60fb      	str	r3, [r7, #12]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002e60:	230c      	movs	r3, #12
 8002e62:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e66:	2302      	movs	r3, #2
 8002e68:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e72:	2303      	movs	r3, #3
 8002e74:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e78:	2307      	movs	r3, #7
 8002e7a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e7e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002e82:	4619      	mov	r1, r3
 8002e84:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e88:	f000 faf8 	bl	800347c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8002e8c:	bf00      	nop
 8002e8e:	37b0      	adds	r7, #176	@ 0xb0
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	40004400 	.word	0x40004400
 8002e98:	40021000 	.word	0x40021000

08002e9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ea0:	bf00      	nop
 8002ea2:	e7fd      	b.n	8002ea0 <NMI_Handler+0x4>

08002ea4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ea8:	bf00      	nop
 8002eaa:	e7fd      	b.n	8002ea8 <HardFault_Handler+0x4>

08002eac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002eb0:	bf00      	nop
 8002eb2:	e7fd      	b.n	8002eb0 <MemManage_Handler+0x4>

08002eb4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002eb8:	bf00      	nop
 8002eba:	e7fd      	b.n	8002eb8 <BusFault_Handler+0x4>

08002ebc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ec0:	bf00      	nop
 8002ec2:	e7fd      	b.n	8002ec0 <UsageFault_Handler+0x4>

08002ec4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ec8:	bf00      	nop
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr

08002ed2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ed6:	bf00      	nop
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ee4:	bf00      	nop
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr

08002eee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ef2:	f000 f96d 	bl	80031d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ef6:	bf00      	nop
 8002ef8:	bd80      	pop	{r7, pc}
	...

08002efc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002f00:	4802      	ldr	r0, [pc, #8]	@ (8002f0c <TIM2_IRQHandler+0x10>)
 8002f02:	f003 f92b 	bl	800615c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002f06:	bf00      	nop
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	200002a4 	.word	0x200002a4

08002f10 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002f14:	4802      	ldr	r0, [pc, #8]	@ (8002f20 <TIM3_IRQHandler+0x10>)
 8002f16:	f003 f921 	bl	800615c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002f1a:	bf00      	nop
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	200002f0 	.word	0x200002f0

08002f24 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002f28:	4802      	ldr	r0, [pc, #8]	@ (8002f34 <TIM4_IRQHandler+0x10>)
 8002f2a:	f003 f917 	bl	800615c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002f2e:	bf00      	nop
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	2000033c 	.word	0x2000033c

08002f38 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002f3c:	4802      	ldr	r0, [pc, #8]	@ (8002f48 <TIM5_IRQHandler+0x10>)
 8002f3e:	f003 f90d 	bl	800615c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002f42:	bf00      	nop
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	20000388 	.word	0x20000388

08002f4c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
  return 1;
 8002f50:	2301      	movs	r3, #1
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <_kill>:

int _kill(int pid, int sig)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002f66:	f006 ff49 	bl	8009dfc <__errno>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2216      	movs	r2, #22
 8002f6e:	601a      	str	r2, [r3, #0]
  return -1;
 8002f70:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3708      	adds	r7, #8
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <_exit>:

void _exit (int status)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002f84:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f7ff ffe7 	bl	8002f5c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002f8e:	bf00      	nop
 8002f90:	e7fd      	b.n	8002f8e <_exit+0x12>

08002f92 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b086      	sub	sp, #24
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	60f8      	str	r0, [r7, #12]
 8002f9a:	60b9      	str	r1, [r7, #8]
 8002f9c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	617b      	str	r3, [r7, #20]
 8002fa2:	e00a      	b.n	8002fba <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002fa4:	f3af 8000 	nop.w
 8002fa8:	4601      	mov	r1, r0
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	1c5a      	adds	r2, r3, #1
 8002fae:	60ba      	str	r2, [r7, #8]
 8002fb0:	b2ca      	uxtb	r2, r1
 8002fb2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	617b      	str	r3, [r7, #20]
 8002fba:	697a      	ldr	r2, [r7, #20]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	dbf0      	blt.n	8002fa4 <_read+0x12>
  }

  return len;
 8002fc2:	687b      	ldr	r3, [r7, #4]
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3718      	adds	r7, #24
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <_close>:
  }
  return len;
}

int _close(int file)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002fd4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ff4:	605a      	str	r2, [r3, #4]
  return 0;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <_isatty>:

int _isatty(int file)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800300c:	2301      	movs	r3, #1
}
 800300e:	4618      	mov	r0, r3
 8003010:	370c      	adds	r7, #12
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr

0800301a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800301a:	b480      	push	{r7}
 800301c:	b085      	sub	sp, #20
 800301e:	af00      	add	r7, sp, #0
 8003020:	60f8      	str	r0, [r7, #12]
 8003022:	60b9      	str	r1, [r7, #8]
 8003024:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3714      	adds	r7, #20
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b086      	sub	sp, #24
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800303c:	4a14      	ldr	r2, [pc, #80]	@ (8003090 <_sbrk+0x5c>)
 800303e:	4b15      	ldr	r3, [pc, #84]	@ (8003094 <_sbrk+0x60>)
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003048:	4b13      	ldr	r3, [pc, #76]	@ (8003098 <_sbrk+0x64>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d102      	bne.n	8003056 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003050:	4b11      	ldr	r3, [pc, #68]	@ (8003098 <_sbrk+0x64>)
 8003052:	4a12      	ldr	r2, [pc, #72]	@ (800309c <_sbrk+0x68>)
 8003054:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003056:	4b10      	ldr	r3, [pc, #64]	@ (8003098 <_sbrk+0x64>)
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4413      	add	r3, r2
 800305e:	693a      	ldr	r2, [r7, #16]
 8003060:	429a      	cmp	r2, r3
 8003062:	d207      	bcs.n	8003074 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003064:	f006 feca 	bl	8009dfc <__errno>
 8003068:	4603      	mov	r3, r0
 800306a:	220c      	movs	r2, #12
 800306c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800306e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003072:	e009      	b.n	8003088 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003074:	4b08      	ldr	r3, [pc, #32]	@ (8003098 <_sbrk+0x64>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800307a:	4b07      	ldr	r3, [pc, #28]	@ (8003098 <_sbrk+0x64>)
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4413      	add	r3, r2
 8003082:	4a05      	ldr	r2, [pc, #20]	@ (8003098 <_sbrk+0x64>)
 8003084:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003086:	68fb      	ldr	r3, [r7, #12]
}
 8003088:	4618      	mov	r0, r3
 800308a:	3718      	adds	r7, #24
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	20018000 	.word	0x20018000
 8003094:	00000400 	.word	0x00000400
 8003098:	200005a8 	.word	0x200005a8
 800309c:	20000700 	.word	0x20000700

080030a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80030a4:	4b06      	ldr	r3, [pc, #24]	@ (80030c0 <SystemInit+0x20>)
 80030a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030aa:	4a05      	ldr	r2, [pc, #20]	@ (80030c0 <SystemInit+0x20>)
 80030ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80030b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80030b4:	bf00      	nop
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	e000ed00 	.word	0xe000ed00

080030c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80030c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80030fc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80030c8:	f7ff ffea 	bl	80030a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80030cc:	480c      	ldr	r0, [pc, #48]	@ (8003100 <LoopForever+0x6>)
  ldr r1, =_edata
 80030ce:	490d      	ldr	r1, [pc, #52]	@ (8003104 <LoopForever+0xa>)
  ldr r2, =_sidata
 80030d0:	4a0d      	ldr	r2, [pc, #52]	@ (8003108 <LoopForever+0xe>)
  movs r3, #0
 80030d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030d4:	e002      	b.n	80030dc <LoopCopyDataInit>

080030d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030da:	3304      	adds	r3, #4

080030dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030e0:	d3f9      	bcc.n	80030d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030e2:	4a0a      	ldr	r2, [pc, #40]	@ (800310c <LoopForever+0x12>)
  ldr r4, =_ebss
 80030e4:	4c0a      	ldr	r4, [pc, #40]	@ (8003110 <LoopForever+0x16>)
  movs r3, #0
 80030e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030e8:	e001      	b.n	80030ee <LoopFillZerobss>

080030ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030ec:	3204      	adds	r2, #4

080030ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030f0:	d3fb      	bcc.n	80030ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80030f2:	f006 fe89 	bl	8009e08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80030f6:	f7fe fb8f 	bl	8001818 <main>

080030fa <LoopForever>:

LoopForever:
    b LoopForever
 80030fa:	e7fe      	b.n	80030fa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80030fc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003100:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003104:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8003108:	0800d1b8 	.word	0x0800d1b8
  ldr r2, =_sbss
 800310c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8003110:	200006fc 	.word	0x200006fc

08003114 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003114:	e7fe      	b.n	8003114 <ADC1_2_IRQHandler>
	...

08003118 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800311e:	2300      	movs	r3, #0
 8003120:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003122:	4b0c      	ldr	r3, [pc, #48]	@ (8003154 <HAL_Init+0x3c>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a0b      	ldr	r2, [pc, #44]	@ (8003154 <HAL_Init+0x3c>)
 8003128:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800312c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800312e:	2003      	movs	r0, #3
 8003130:	f000 f962 	bl	80033f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003134:	2000      	movs	r0, #0
 8003136:	f000 f80f 	bl	8003158 <HAL_InitTick>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d002      	beq.n	8003146 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	71fb      	strb	r3, [r7, #7]
 8003144:	e001      	b.n	800314a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003146:	f7ff fc89 	bl	8002a5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800314a:	79fb      	ldrb	r3, [r7, #7]
}
 800314c:	4618      	mov	r0, r3
 800314e:	3708      	adds	r7, #8
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	40022000 	.word	0x40022000

08003158 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003160:	2300      	movs	r3, #0
 8003162:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003164:	4b17      	ldr	r3, [pc, #92]	@ (80031c4 <HAL_InitTick+0x6c>)
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d023      	beq.n	80031b4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800316c:	4b16      	ldr	r3, [pc, #88]	@ (80031c8 <HAL_InitTick+0x70>)
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	4b14      	ldr	r3, [pc, #80]	@ (80031c4 <HAL_InitTick+0x6c>)
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	4619      	mov	r1, r3
 8003176:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800317a:	fbb3 f3f1 	udiv	r3, r3, r1
 800317e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003182:	4618      	mov	r0, r3
 8003184:	f000 f96d 	bl	8003462 <HAL_SYSTICK_Config>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d10f      	bne.n	80031ae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2b0f      	cmp	r3, #15
 8003192:	d809      	bhi.n	80031a8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003194:	2200      	movs	r2, #0
 8003196:	6879      	ldr	r1, [r7, #4]
 8003198:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800319c:	f000 f937 	bl	800340e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80031a0:	4a0a      	ldr	r2, [pc, #40]	@ (80031cc <HAL_InitTick+0x74>)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6013      	str	r3, [r2, #0]
 80031a6:	e007      	b.n	80031b8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	73fb      	strb	r3, [r7, #15]
 80031ac:	e004      	b.n	80031b8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	73fb      	strb	r3, [r7, #15]
 80031b2:	e001      	b.n	80031b8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80031b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3710      	adds	r7, #16
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	2000001c 	.word	0x2000001c
 80031c8:	20000014 	.word	0x20000014
 80031cc:	20000018 	.word	0x20000018

080031d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80031d4:	4b06      	ldr	r3, [pc, #24]	@ (80031f0 <HAL_IncTick+0x20>)
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	461a      	mov	r2, r3
 80031da:	4b06      	ldr	r3, [pc, #24]	@ (80031f4 <HAL_IncTick+0x24>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4413      	add	r3, r2
 80031e0:	4a04      	ldr	r2, [pc, #16]	@ (80031f4 <HAL_IncTick+0x24>)
 80031e2:	6013      	str	r3, [r2, #0]
}
 80031e4:	bf00      	nop
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	2000001c 	.word	0x2000001c
 80031f4:	200005ac 	.word	0x200005ac

080031f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031f8:	b480      	push	{r7}
 80031fa:	af00      	add	r7, sp, #0
  return uwTick;
 80031fc:	4b03      	ldr	r3, [pc, #12]	@ (800320c <HAL_GetTick+0x14>)
 80031fe:	681b      	ldr	r3, [r3, #0]
}
 8003200:	4618      	mov	r0, r3
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	200005ac 	.word	0x200005ac

08003210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003218:	f7ff ffee 	bl	80031f8 <HAL_GetTick>
 800321c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003228:	d005      	beq.n	8003236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800322a:	4b0a      	ldr	r3, [pc, #40]	@ (8003254 <HAL_Delay+0x44>)
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	461a      	mov	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	4413      	add	r3, r2
 8003234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003236:	bf00      	nop
 8003238:	f7ff ffde 	bl	80031f8 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	429a      	cmp	r2, r3
 8003246:	d8f7      	bhi.n	8003238 <HAL_Delay+0x28>
  {
  }
}
 8003248:	bf00      	nop
 800324a:	bf00      	nop
 800324c:	3710      	adds	r7, #16
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	2000001c 	.word	0x2000001c

08003258 <__NVIC_SetPriorityGrouping>:
{
 8003258:	b480      	push	{r7}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f003 0307 	and.w	r3, r3, #7
 8003266:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003268:	4b0c      	ldr	r3, [pc, #48]	@ (800329c <__NVIC_SetPriorityGrouping+0x44>)
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800326e:	68ba      	ldr	r2, [r7, #8]
 8003270:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003274:	4013      	ands	r3, r2
 8003276:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003280:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003284:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003288:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800328a:	4a04      	ldr	r2, [pc, #16]	@ (800329c <__NVIC_SetPriorityGrouping+0x44>)
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	60d3      	str	r3, [r2, #12]
}
 8003290:	bf00      	nop
 8003292:	3714      	adds	r7, #20
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr
 800329c:	e000ed00 	.word	0xe000ed00

080032a0 <__NVIC_GetPriorityGrouping>:
{
 80032a0:	b480      	push	{r7}
 80032a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032a4:	4b04      	ldr	r3, [pc, #16]	@ (80032b8 <__NVIC_GetPriorityGrouping+0x18>)
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	0a1b      	lsrs	r3, r3, #8
 80032aa:	f003 0307 	and.w	r3, r3, #7
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr
 80032b8:	e000ed00 	.word	0xe000ed00

080032bc <__NVIC_EnableIRQ>:
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	4603      	mov	r3, r0
 80032c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	db0b      	blt.n	80032e6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032ce:	79fb      	ldrb	r3, [r7, #7]
 80032d0:	f003 021f 	and.w	r2, r3, #31
 80032d4:	4907      	ldr	r1, [pc, #28]	@ (80032f4 <__NVIC_EnableIRQ+0x38>)
 80032d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032da:	095b      	lsrs	r3, r3, #5
 80032dc:	2001      	movs	r0, #1
 80032de:	fa00 f202 	lsl.w	r2, r0, r2
 80032e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80032e6:	bf00      	nop
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	e000e100 	.word	0xe000e100

080032f8 <__NVIC_SetPriority>:
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	4603      	mov	r3, r0
 8003300:	6039      	str	r1, [r7, #0]
 8003302:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003308:	2b00      	cmp	r3, #0
 800330a:	db0a      	blt.n	8003322 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	b2da      	uxtb	r2, r3
 8003310:	490c      	ldr	r1, [pc, #48]	@ (8003344 <__NVIC_SetPriority+0x4c>)
 8003312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003316:	0112      	lsls	r2, r2, #4
 8003318:	b2d2      	uxtb	r2, r2
 800331a:	440b      	add	r3, r1
 800331c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003320:	e00a      	b.n	8003338 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	b2da      	uxtb	r2, r3
 8003326:	4908      	ldr	r1, [pc, #32]	@ (8003348 <__NVIC_SetPriority+0x50>)
 8003328:	79fb      	ldrb	r3, [r7, #7]
 800332a:	f003 030f 	and.w	r3, r3, #15
 800332e:	3b04      	subs	r3, #4
 8003330:	0112      	lsls	r2, r2, #4
 8003332:	b2d2      	uxtb	r2, r2
 8003334:	440b      	add	r3, r1
 8003336:	761a      	strb	r2, [r3, #24]
}
 8003338:	bf00      	nop
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr
 8003344:	e000e100 	.word	0xe000e100
 8003348:	e000ed00 	.word	0xe000ed00

0800334c <NVIC_EncodePriority>:
{
 800334c:	b480      	push	{r7}
 800334e:	b089      	sub	sp, #36	@ 0x24
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f003 0307 	and.w	r3, r3, #7
 800335e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	f1c3 0307 	rsb	r3, r3, #7
 8003366:	2b04      	cmp	r3, #4
 8003368:	bf28      	it	cs
 800336a:	2304      	movcs	r3, #4
 800336c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	3304      	adds	r3, #4
 8003372:	2b06      	cmp	r3, #6
 8003374:	d902      	bls.n	800337c <NVIC_EncodePriority+0x30>
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	3b03      	subs	r3, #3
 800337a:	e000      	b.n	800337e <NVIC_EncodePriority+0x32>
 800337c:	2300      	movs	r3, #0
 800337e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003380:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	fa02 f303 	lsl.w	r3, r2, r3
 800338a:	43da      	mvns	r2, r3
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	401a      	ands	r2, r3
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003394:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	fa01 f303 	lsl.w	r3, r1, r3
 800339e:	43d9      	mvns	r1, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033a4:	4313      	orrs	r3, r2
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3724      	adds	r7, #36	@ 0x24
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
	...

080033b4 <SysTick_Config>:
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	3b01      	subs	r3, #1
 80033c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80033c4:	d301      	bcc.n	80033ca <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80033c6:	2301      	movs	r3, #1
 80033c8:	e00f      	b.n	80033ea <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033ca:	4a0a      	ldr	r2, [pc, #40]	@ (80033f4 <SysTick_Config+0x40>)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	3b01      	subs	r3, #1
 80033d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033d2:	210f      	movs	r1, #15
 80033d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80033d8:	f7ff ff8e 	bl	80032f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033dc:	4b05      	ldr	r3, [pc, #20]	@ (80033f4 <SysTick_Config+0x40>)
 80033de:	2200      	movs	r2, #0
 80033e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033e2:	4b04      	ldr	r3, [pc, #16]	@ (80033f4 <SysTick_Config+0x40>)
 80033e4:	2207      	movs	r2, #7
 80033e6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3708      	adds	r7, #8
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	e000e010 	.word	0xe000e010

080033f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f7ff ff29 	bl	8003258 <__NVIC_SetPriorityGrouping>
}
 8003406:	bf00      	nop
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b086      	sub	sp, #24
 8003412:	af00      	add	r7, sp, #0
 8003414:	4603      	mov	r3, r0
 8003416:	60b9      	str	r1, [r7, #8]
 8003418:	607a      	str	r2, [r7, #4]
 800341a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800341c:	2300      	movs	r3, #0
 800341e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003420:	f7ff ff3e 	bl	80032a0 <__NVIC_GetPriorityGrouping>
 8003424:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	68b9      	ldr	r1, [r7, #8]
 800342a:	6978      	ldr	r0, [r7, #20]
 800342c:	f7ff ff8e 	bl	800334c <NVIC_EncodePriority>
 8003430:	4602      	mov	r2, r0
 8003432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003436:	4611      	mov	r1, r2
 8003438:	4618      	mov	r0, r3
 800343a:	f7ff ff5d 	bl	80032f8 <__NVIC_SetPriority>
}
 800343e:	bf00      	nop
 8003440:	3718      	adds	r7, #24
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b082      	sub	sp, #8
 800344a:	af00      	add	r7, sp, #0
 800344c:	4603      	mov	r3, r0
 800344e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003454:	4618      	mov	r0, r3
 8003456:	f7ff ff31 	bl	80032bc <__NVIC_EnableIRQ>
}
 800345a:	bf00      	nop
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}

08003462 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003462:	b580      	push	{r7, lr}
 8003464:	b082      	sub	sp, #8
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f7ff ffa2 	bl	80033b4 <SysTick_Config>
 8003470:	4603      	mov	r3, r0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3708      	adds	r7, #8
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
	...

0800347c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800347c:	b480      	push	{r7}
 800347e:	b087      	sub	sp, #28
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003486:	2300      	movs	r3, #0
 8003488:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800348a:	e17f      	b.n	800378c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	2101      	movs	r1, #1
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	fa01 f303 	lsl.w	r3, r1, r3
 8003498:	4013      	ands	r3, r2
 800349a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f000 8171 	beq.w	8003786 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f003 0303 	and.w	r3, r3, #3
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d005      	beq.n	80034bc <HAL_GPIO_Init+0x40>
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f003 0303 	and.w	r3, r3, #3
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d130      	bne.n	800351e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	005b      	lsls	r3, r3, #1
 80034c6:	2203      	movs	r2, #3
 80034c8:	fa02 f303 	lsl.w	r3, r2, r3
 80034cc:	43db      	mvns	r3, r3
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	4013      	ands	r3, r2
 80034d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	68da      	ldr	r2, [r3, #12]
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	005b      	lsls	r3, r3, #1
 80034dc:	fa02 f303 	lsl.w	r3, r2, r3
 80034e0:	693a      	ldr	r2, [r7, #16]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	693a      	ldr	r2, [r7, #16]
 80034ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80034f2:	2201      	movs	r2, #1
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	fa02 f303 	lsl.w	r3, r2, r3
 80034fa:	43db      	mvns	r3, r3
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	4013      	ands	r3, r2
 8003500:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	091b      	lsrs	r3, r3, #4
 8003508:	f003 0201 	and.w	r2, r3, #1
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	fa02 f303 	lsl.w	r3, r2, r3
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	4313      	orrs	r3, r2
 8003516:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f003 0303 	and.w	r3, r3, #3
 8003526:	2b03      	cmp	r3, #3
 8003528:	d118      	bne.n	800355c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800352e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003530:	2201      	movs	r2, #1
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	fa02 f303 	lsl.w	r3, r2, r3
 8003538:	43db      	mvns	r3, r3
 800353a:	693a      	ldr	r2, [r7, #16]
 800353c:	4013      	ands	r3, r2
 800353e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	08db      	lsrs	r3, r3, #3
 8003546:	f003 0201 	and.w	r2, r3, #1
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	fa02 f303 	lsl.w	r3, r2, r3
 8003550:	693a      	ldr	r2, [r7, #16]
 8003552:	4313      	orrs	r3, r2
 8003554:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	693a      	ldr	r2, [r7, #16]
 800355a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f003 0303 	and.w	r3, r3, #3
 8003564:	2b03      	cmp	r3, #3
 8003566:	d017      	beq.n	8003598 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	005b      	lsls	r3, r3, #1
 8003572:	2203      	movs	r2, #3
 8003574:	fa02 f303 	lsl.w	r3, r2, r3
 8003578:	43db      	mvns	r3, r3
 800357a:	693a      	ldr	r2, [r7, #16]
 800357c:	4013      	ands	r3, r2
 800357e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	689a      	ldr	r2, [r3, #8]
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	fa02 f303 	lsl.w	r3, r2, r3
 800358c:	693a      	ldr	r2, [r7, #16]
 800358e:	4313      	orrs	r3, r2
 8003590:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f003 0303 	and.w	r3, r3, #3
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d123      	bne.n	80035ec <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	08da      	lsrs	r2, r3, #3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	3208      	adds	r2, #8
 80035ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	f003 0307 	and.w	r3, r3, #7
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	220f      	movs	r2, #15
 80035bc:	fa02 f303 	lsl.w	r3, r2, r3
 80035c0:	43db      	mvns	r3, r3
 80035c2:	693a      	ldr	r2, [r7, #16]
 80035c4:	4013      	ands	r3, r2
 80035c6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	691a      	ldr	r2, [r3, #16]
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	f003 0307 	and.w	r3, r3, #7
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	fa02 f303 	lsl.w	r3, r2, r3
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	4313      	orrs	r3, r2
 80035dc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	08da      	lsrs	r2, r3, #3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	3208      	adds	r2, #8
 80035e6:	6939      	ldr	r1, [r7, #16]
 80035e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	005b      	lsls	r3, r3, #1
 80035f6:	2203      	movs	r2, #3
 80035f8:	fa02 f303 	lsl.w	r3, r2, r3
 80035fc:	43db      	mvns	r3, r3
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	4013      	ands	r3, r2
 8003602:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f003 0203 	and.w	r2, r3, #3
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	005b      	lsls	r3, r3, #1
 8003610:	fa02 f303 	lsl.w	r3, r2, r3
 8003614:	693a      	ldr	r2, [r7, #16]
 8003616:	4313      	orrs	r3, r2
 8003618:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003628:	2b00      	cmp	r3, #0
 800362a:	f000 80ac 	beq.w	8003786 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800362e:	4b5f      	ldr	r3, [pc, #380]	@ (80037ac <HAL_GPIO_Init+0x330>)
 8003630:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003632:	4a5e      	ldr	r2, [pc, #376]	@ (80037ac <HAL_GPIO_Init+0x330>)
 8003634:	f043 0301 	orr.w	r3, r3, #1
 8003638:	6613      	str	r3, [r2, #96]	@ 0x60
 800363a:	4b5c      	ldr	r3, [pc, #368]	@ (80037ac <HAL_GPIO_Init+0x330>)
 800363c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	60bb      	str	r3, [r7, #8]
 8003644:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003646:	4a5a      	ldr	r2, [pc, #360]	@ (80037b0 <HAL_GPIO_Init+0x334>)
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	089b      	lsrs	r3, r3, #2
 800364c:	3302      	adds	r3, #2
 800364e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003652:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	f003 0303 	and.w	r3, r3, #3
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	220f      	movs	r2, #15
 800365e:	fa02 f303 	lsl.w	r3, r2, r3
 8003662:	43db      	mvns	r3, r3
 8003664:	693a      	ldr	r2, [r7, #16]
 8003666:	4013      	ands	r3, r2
 8003668:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003670:	d025      	beq.n	80036be <HAL_GPIO_Init+0x242>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a4f      	ldr	r2, [pc, #316]	@ (80037b4 <HAL_GPIO_Init+0x338>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d01f      	beq.n	80036ba <HAL_GPIO_Init+0x23e>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a4e      	ldr	r2, [pc, #312]	@ (80037b8 <HAL_GPIO_Init+0x33c>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d019      	beq.n	80036b6 <HAL_GPIO_Init+0x23a>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a4d      	ldr	r2, [pc, #308]	@ (80037bc <HAL_GPIO_Init+0x340>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d013      	beq.n	80036b2 <HAL_GPIO_Init+0x236>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a4c      	ldr	r2, [pc, #304]	@ (80037c0 <HAL_GPIO_Init+0x344>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d00d      	beq.n	80036ae <HAL_GPIO_Init+0x232>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a4b      	ldr	r2, [pc, #300]	@ (80037c4 <HAL_GPIO_Init+0x348>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d007      	beq.n	80036aa <HAL_GPIO_Init+0x22e>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a4a      	ldr	r2, [pc, #296]	@ (80037c8 <HAL_GPIO_Init+0x34c>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d101      	bne.n	80036a6 <HAL_GPIO_Init+0x22a>
 80036a2:	2306      	movs	r3, #6
 80036a4:	e00c      	b.n	80036c0 <HAL_GPIO_Init+0x244>
 80036a6:	2307      	movs	r3, #7
 80036a8:	e00a      	b.n	80036c0 <HAL_GPIO_Init+0x244>
 80036aa:	2305      	movs	r3, #5
 80036ac:	e008      	b.n	80036c0 <HAL_GPIO_Init+0x244>
 80036ae:	2304      	movs	r3, #4
 80036b0:	e006      	b.n	80036c0 <HAL_GPIO_Init+0x244>
 80036b2:	2303      	movs	r3, #3
 80036b4:	e004      	b.n	80036c0 <HAL_GPIO_Init+0x244>
 80036b6:	2302      	movs	r3, #2
 80036b8:	e002      	b.n	80036c0 <HAL_GPIO_Init+0x244>
 80036ba:	2301      	movs	r3, #1
 80036bc:	e000      	b.n	80036c0 <HAL_GPIO_Init+0x244>
 80036be:	2300      	movs	r3, #0
 80036c0:	697a      	ldr	r2, [r7, #20]
 80036c2:	f002 0203 	and.w	r2, r2, #3
 80036c6:	0092      	lsls	r2, r2, #2
 80036c8:	4093      	lsls	r3, r2
 80036ca:	693a      	ldr	r2, [r7, #16]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80036d0:	4937      	ldr	r1, [pc, #220]	@ (80037b0 <HAL_GPIO_Init+0x334>)
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	089b      	lsrs	r3, r3, #2
 80036d6:	3302      	adds	r3, #2
 80036d8:	693a      	ldr	r2, [r7, #16]
 80036da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80036de:	4b3b      	ldr	r3, [pc, #236]	@ (80037cc <HAL_GPIO_Init+0x350>)
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	43db      	mvns	r3, r3
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	4013      	ands	r3, r2
 80036ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d003      	beq.n	8003702 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	4313      	orrs	r3, r2
 8003700:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003702:	4a32      	ldr	r2, [pc, #200]	@ (80037cc <HAL_GPIO_Init+0x350>)
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003708:	4b30      	ldr	r3, [pc, #192]	@ (80037cc <HAL_GPIO_Init+0x350>)
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	43db      	mvns	r3, r3
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	4013      	ands	r3, r2
 8003716:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d003      	beq.n	800372c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003724:	693a      	ldr	r2, [r7, #16]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	4313      	orrs	r3, r2
 800372a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800372c:	4a27      	ldr	r2, [pc, #156]	@ (80037cc <HAL_GPIO_Init+0x350>)
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003732:	4b26      	ldr	r3, [pc, #152]	@ (80037cc <HAL_GPIO_Init+0x350>)
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	43db      	mvns	r3, r3
 800373c:	693a      	ldr	r2, [r7, #16]
 800373e:	4013      	ands	r3, r2
 8003740:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d003      	beq.n	8003756 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800374e:	693a      	ldr	r2, [r7, #16]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	4313      	orrs	r3, r2
 8003754:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003756:	4a1d      	ldr	r2, [pc, #116]	@ (80037cc <HAL_GPIO_Init+0x350>)
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800375c:	4b1b      	ldr	r3, [pc, #108]	@ (80037cc <HAL_GPIO_Init+0x350>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	43db      	mvns	r3, r3
 8003766:	693a      	ldr	r2, [r7, #16]
 8003768:	4013      	ands	r3, r2
 800376a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d003      	beq.n	8003780 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	4313      	orrs	r3, r2
 800377e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003780:	4a12      	ldr	r2, [pc, #72]	@ (80037cc <HAL_GPIO_Init+0x350>)
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	3301      	adds	r3, #1
 800378a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	fa22 f303 	lsr.w	r3, r2, r3
 8003796:	2b00      	cmp	r3, #0
 8003798:	f47f ae78 	bne.w	800348c <HAL_GPIO_Init+0x10>
  }
}
 800379c:	bf00      	nop
 800379e:	bf00      	nop
 80037a0:	371c      	adds	r7, #28
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	40021000 	.word	0x40021000
 80037b0:	40010000 	.word	0x40010000
 80037b4:	48000400 	.word	0x48000400
 80037b8:	48000800 	.word	0x48000800
 80037bc:	48000c00 	.word	0x48000c00
 80037c0:	48001000 	.word	0x48001000
 80037c4:	48001400 	.word	0x48001400
 80037c8:	48001800 	.word	0x48001800
 80037cc:	40010400 	.word	0x40010400

080037d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	460b      	mov	r3, r1
 80037da:	807b      	strh	r3, [r7, #2]
 80037dc:	4613      	mov	r3, r2
 80037de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037e0:	787b      	ldrb	r3, [r7, #1]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d003      	beq.n	80037ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80037e6:	887a      	ldrh	r2, [r7, #2]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80037ec:	e002      	b.n	80037f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80037ee:	887a      	ldrh	r2, [r7, #2]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80037f4:	bf00      	nop
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d101      	bne.n	8003812 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e08d      	b.n	800392e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d106      	bne.n	800382c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f7ff f93c 	bl	8002aa4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2224      	movs	r2, #36	@ 0x24
 8003830:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f022 0201 	bic.w	r2, r2, #1
 8003842:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685a      	ldr	r2, [r3, #4]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003850:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	689a      	ldr	r2, [r3, #8]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003860:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	2b01      	cmp	r3, #1
 8003868:	d107      	bne.n	800387a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	689a      	ldr	r2, [r3, #8]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003876:	609a      	str	r2, [r3, #8]
 8003878:	e006      	b.n	8003888 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	689a      	ldr	r2, [r3, #8]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003886:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	2b02      	cmp	r3, #2
 800388e:	d108      	bne.n	80038a2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	685a      	ldr	r2, [r3, #4]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800389e:	605a      	str	r2, [r3, #4]
 80038a0:	e007      	b.n	80038b2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	685a      	ldr	r2, [r3, #4]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	6812      	ldr	r2, [r2, #0]
 80038bc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80038c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68da      	ldr	r2, [r3, #12]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80038d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	691a      	ldr	r2, [r3, #16]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	430a      	orrs	r2, r1
 80038ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	69d9      	ldr	r1, [r3, #28]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a1a      	ldr	r2, [r3, #32]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	430a      	orrs	r2, r1
 80038fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f042 0201 	orr.w	r2, r2, #1
 800390e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2220      	movs	r2, #32
 800391a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3708      	adds	r7, #8
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
	...

08003938 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b088      	sub	sp, #32
 800393c:	af02      	add	r7, sp, #8
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	4608      	mov	r0, r1
 8003942:	4611      	mov	r1, r2
 8003944:	461a      	mov	r2, r3
 8003946:	4603      	mov	r3, r0
 8003948:	817b      	strh	r3, [r7, #10]
 800394a:	460b      	mov	r3, r1
 800394c:	813b      	strh	r3, [r7, #8]
 800394e:	4613      	mov	r3, r2
 8003950:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b20      	cmp	r3, #32
 800395c:	f040 80f9 	bne.w	8003b52 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003960:	6a3b      	ldr	r3, [r7, #32]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d002      	beq.n	800396c <HAL_I2C_Mem_Write+0x34>
 8003966:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003968:	2b00      	cmp	r3, #0
 800396a:	d105      	bne.n	8003978 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003972:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e0ed      	b.n	8003b54 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800397e:	2b01      	cmp	r3, #1
 8003980:	d101      	bne.n	8003986 <HAL_I2C_Mem_Write+0x4e>
 8003982:	2302      	movs	r3, #2
 8003984:	e0e6      	b.n	8003b54 <HAL_I2C_Mem_Write+0x21c>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2201      	movs	r2, #1
 800398a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800398e:	f7ff fc33 	bl	80031f8 <HAL_GetTick>
 8003992:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	9300      	str	r3, [sp, #0]
 8003998:	2319      	movs	r3, #25
 800399a:	2201      	movs	r2, #1
 800399c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80039a0:	68f8      	ldr	r0, [r7, #12]
 80039a2:	f000 fac3 	bl	8003f2c <I2C_WaitOnFlagUntilTimeout>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d001      	beq.n	80039b0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e0d1      	b.n	8003b54 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2221      	movs	r2, #33	@ 0x21
 80039b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2240      	movs	r2, #64	@ 0x40
 80039bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2200      	movs	r2, #0
 80039c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6a3a      	ldr	r2, [r7, #32]
 80039ca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80039d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2200      	movs	r2, #0
 80039d6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80039d8:	88f8      	ldrh	r0, [r7, #6]
 80039da:	893a      	ldrh	r2, [r7, #8]
 80039dc:	8979      	ldrh	r1, [r7, #10]
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	9301      	str	r3, [sp, #4]
 80039e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039e4:	9300      	str	r3, [sp, #0]
 80039e6:	4603      	mov	r3, r0
 80039e8:	68f8      	ldr	r0, [r7, #12]
 80039ea:	f000 f9d3 	bl	8003d94 <I2C_RequestMemoryWrite>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d005      	beq.n	8003a00 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e0a9      	b.n	8003b54 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	2bff      	cmp	r3, #255	@ 0xff
 8003a08:	d90e      	bls.n	8003a28 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	22ff      	movs	r2, #255	@ 0xff
 8003a0e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a14:	b2da      	uxtb	r2, r3
 8003a16:	8979      	ldrh	r1, [r7, #10]
 8003a18:	2300      	movs	r3, #0
 8003a1a:	9300      	str	r3, [sp, #0]
 8003a1c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003a20:	68f8      	ldr	r0, [r7, #12]
 8003a22:	f000 fc47 	bl	80042b4 <I2C_TransferConfig>
 8003a26:	e00f      	b.n	8003a48 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a2c:	b29a      	uxth	r2, r3
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a36:	b2da      	uxtb	r2, r3
 8003a38:	8979      	ldrh	r1, [r7, #10]
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	9300      	str	r3, [sp, #0]
 8003a3e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003a42:	68f8      	ldr	r0, [r7, #12]
 8003a44:	f000 fc36 	bl	80042b4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a48:	697a      	ldr	r2, [r7, #20]
 8003a4a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a4c:	68f8      	ldr	r0, [r7, #12]
 8003a4e:	f000 fac6 	bl	8003fde <I2C_WaitOnTXISFlagUntilTimeout>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d001      	beq.n	8003a5c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e07b      	b.n	8003b54 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a60:	781a      	ldrb	r2, [r3, #0]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a6c:	1c5a      	adds	r2, r3, #1
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	b29a      	uxth	r2, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a84:	3b01      	subs	r3, #1
 8003a86:	b29a      	uxth	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d034      	beq.n	8003b00 <HAL_I2C_Mem_Write+0x1c8>
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d130      	bne.n	8003b00 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	9300      	str	r3, [sp, #0]
 8003aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	2180      	movs	r1, #128	@ 0x80
 8003aa8:	68f8      	ldr	r0, [r7, #12]
 8003aaa:	f000 fa3f 	bl	8003f2c <I2C_WaitOnFlagUntilTimeout>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d001      	beq.n	8003ab8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e04d      	b.n	8003b54 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	2bff      	cmp	r3, #255	@ 0xff
 8003ac0:	d90e      	bls.n	8003ae0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	22ff      	movs	r2, #255	@ 0xff
 8003ac6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003acc:	b2da      	uxtb	r2, r3
 8003ace:	8979      	ldrh	r1, [r7, #10]
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	9300      	str	r3, [sp, #0]
 8003ad4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003ad8:	68f8      	ldr	r0, [r7, #12]
 8003ada:	f000 fbeb 	bl	80042b4 <I2C_TransferConfig>
 8003ade:	e00f      	b.n	8003b00 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ae4:	b29a      	uxth	r2, r3
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aee:	b2da      	uxtb	r2, r3
 8003af0:	8979      	ldrh	r1, [r7, #10]
 8003af2:	2300      	movs	r3, #0
 8003af4:	9300      	str	r3, [sp, #0]
 8003af6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003afa:	68f8      	ldr	r0, [r7, #12]
 8003afc:	f000 fbda 	bl	80042b4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d19e      	bne.n	8003a48 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b0a:	697a      	ldr	r2, [r7, #20]
 8003b0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b0e:	68f8      	ldr	r0, [r7, #12]
 8003b10:	f000 faac 	bl	800406c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d001      	beq.n	8003b1e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e01a      	b.n	8003b54 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2220      	movs	r2, #32
 8003b24:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	6859      	ldr	r1, [r3, #4]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	4b0a      	ldr	r3, [pc, #40]	@ (8003b5c <HAL_I2C_Mem_Write+0x224>)
 8003b32:	400b      	ands	r3, r1
 8003b34:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2220      	movs	r2, #32
 8003b3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	e000      	b.n	8003b54 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003b52:	2302      	movs	r3, #2
  }
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3718      	adds	r7, #24
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	fe00e800 	.word	0xfe00e800

08003b60 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b088      	sub	sp, #32
 8003b64:	af02      	add	r7, sp, #8
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	4608      	mov	r0, r1
 8003b6a:	4611      	mov	r1, r2
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	4603      	mov	r3, r0
 8003b70:	817b      	strh	r3, [r7, #10]
 8003b72:	460b      	mov	r3, r1
 8003b74:	813b      	strh	r3, [r7, #8]
 8003b76:	4613      	mov	r3, r2
 8003b78:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	2b20      	cmp	r3, #32
 8003b84:	f040 80fd 	bne.w	8003d82 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b88:	6a3b      	ldr	r3, [r7, #32]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d002      	beq.n	8003b94 <HAL_I2C_Mem_Read+0x34>
 8003b8e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d105      	bne.n	8003ba0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b9a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e0f1      	b.n	8003d84 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d101      	bne.n	8003bae <HAL_I2C_Mem_Read+0x4e>
 8003baa:	2302      	movs	r3, #2
 8003bac:	e0ea      	b.n	8003d84 <HAL_I2C_Mem_Read+0x224>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003bb6:	f7ff fb1f 	bl	80031f8 <HAL_GetTick>
 8003bba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	9300      	str	r3, [sp, #0]
 8003bc0:	2319      	movs	r3, #25
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003bc8:	68f8      	ldr	r0, [r7, #12]
 8003bca:	f000 f9af 	bl	8003f2c <I2C_WaitOnFlagUntilTimeout>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d001      	beq.n	8003bd8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e0d5      	b.n	8003d84 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2222      	movs	r2, #34	@ 0x22
 8003bdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2240      	movs	r2, #64	@ 0x40
 8003be4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6a3a      	ldr	r2, [r7, #32]
 8003bf2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003bf8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c00:	88f8      	ldrh	r0, [r7, #6]
 8003c02:	893a      	ldrh	r2, [r7, #8]
 8003c04:	8979      	ldrh	r1, [r7, #10]
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	9301      	str	r3, [sp, #4]
 8003c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c0c:	9300      	str	r3, [sp, #0]
 8003c0e:	4603      	mov	r3, r0
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	f000 f913 	bl	8003e3c <I2C_RequestMemoryRead>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d005      	beq.n	8003c28 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e0ad      	b.n	8003d84 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	2bff      	cmp	r3, #255	@ 0xff
 8003c30:	d90e      	bls.n	8003c50 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2201      	movs	r2, #1
 8003c36:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c3c:	b2da      	uxtb	r2, r3
 8003c3e:	8979      	ldrh	r1, [r7, #10]
 8003c40:	4b52      	ldr	r3, [pc, #328]	@ (8003d8c <HAL_I2C_Mem_Read+0x22c>)
 8003c42:	9300      	str	r3, [sp, #0]
 8003c44:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003c48:	68f8      	ldr	r0, [r7, #12]
 8003c4a:	f000 fb33 	bl	80042b4 <I2C_TransferConfig>
 8003c4e:	e00f      	b.n	8003c70 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c54:	b29a      	uxth	r2, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c5e:	b2da      	uxtb	r2, r3
 8003c60:	8979      	ldrh	r1, [r7, #10]
 8003c62:	4b4a      	ldr	r3, [pc, #296]	@ (8003d8c <HAL_I2C_Mem_Read+0x22c>)
 8003c64:	9300      	str	r3, [sp, #0]
 8003c66:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f000 fb22 	bl	80042b4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	9300      	str	r3, [sp, #0]
 8003c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c76:	2200      	movs	r2, #0
 8003c78:	2104      	movs	r1, #4
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f000 f956 	bl	8003f2c <I2C_WaitOnFlagUntilTimeout>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d001      	beq.n	8003c8a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e07c      	b.n	8003d84 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c94:	b2d2      	uxtb	r2, r2
 8003c96:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c9c:	1c5a      	adds	r2, r3, #1
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	b29a      	uxth	r2, r3
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d034      	beq.n	8003d30 <HAL_I2C_Mem_Read+0x1d0>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d130      	bne.n	8003d30 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	9300      	str	r3, [sp, #0]
 8003cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	2180      	movs	r1, #128	@ 0x80
 8003cd8:	68f8      	ldr	r0, [r7, #12]
 8003cda:	f000 f927 	bl	8003f2c <I2C_WaitOnFlagUntilTimeout>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d001      	beq.n	8003ce8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e04d      	b.n	8003d84 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	2bff      	cmp	r3, #255	@ 0xff
 8003cf0:	d90e      	bls.n	8003d10 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cfc:	b2da      	uxtb	r2, r3
 8003cfe:	8979      	ldrh	r1, [r7, #10]
 8003d00:	2300      	movs	r3, #0
 8003d02:	9300      	str	r3, [sp, #0]
 8003d04:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003d08:	68f8      	ldr	r0, [r7, #12]
 8003d0a:	f000 fad3 	bl	80042b4 <I2C_TransferConfig>
 8003d0e:	e00f      	b.n	8003d30 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d14:	b29a      	uxth	r2, r3
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d1e:	b2da      	uxtb	r2, r3
 8003d20:	8979      	ldrh	r1, [r7, #10]
 8003d22:	2300      	movs	r3, #0
 8003d24:	9300      	str	r3, [sp, #0]
 8003d26:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d2a:	68f8      	ldr	r0, [r7, #12]
 8003d2c:	f000 fac2 	bl	80042b4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d19a      	bne.n	8003c70 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d3a:	697a      	ldr	r2, [r7, #20]
 8003d3c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d3e:	68f8      	ldr	r0, [r7, #12]
 8003d40:	f000 f994 	bl	800406c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d001      	beq.n	8003d4e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e01a      	b.n	8003d84 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2220      	movs	r2, #32
 8003d54:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	6859      	ldr	r1, [r3, #4]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	4b0b      	ldr	r3, [pc, #44]	@ (8003d90 <HAL_I2C_Mem_Read+0x230>)
 8003d62:	400b      	ands	r3, r1
 8003d64:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2220      	movs	r2, #32
 8003d6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	e000      	b.n	8003d84 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003d82:	2302      	movs	r3, #2
  }
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3718      	adds	r7, #24
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	80002400 	.word	0x80002400
 8003d90:	fe00e800 	.word	0xfe00e800

08003d94 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b086      	sub	sp, #24
 8003d98:	af02      	add	r7, sp, #8
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	4608      	mov	r0, r1
 8003d9e:	4611      	mov	r1, r2
 8003da0:	461a      	mov	r2, r3
 8003da2:	4603      	mov	r3, r0
 8003da4:	817b      	strh	r3, [r7, #10]
 8003da6:	460b      	mov	r3, r1
 8003da8:	813b      	strh	r3, [r7, #8]
 8003daa:	4613      	mov	r3, r2
 8003dac:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003dae:	88fb      	ldrh	r3, [r7, #6]
 8003db0:	b2da      	uxtb	r2, r3
 8003db2:	8979      	ldrh	r1, [r7, #10]
 8003db4:	4b20      	ldr	r3, [pc, #128]	@ (8003e38 <I2C_RequestMemoryWrite+0xa4>)
 8003db6:	9300      	str	r3, [sp, #0]
 8003db8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003dbc:	68f8      	ldr	r0, [r7, #12]
 8003dbe:	f000 fa79 	bl	80042b4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dc2:	69fa      	ldr	r2, [r7, #28]
 8003dc4:	69b9      	ldr	r1, [r7, #24]
 8003dc6:	68f8      	ldr	r0, [r7, #12]
 8003dc8:	f000 f909 	bl	8003fde <I2C_WaitOnTXISFlagUntilTimeout>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d001      	beq.n	8003dd6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e02c      	b.n	8003e30 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003dd6:	88fb      	ldrh	r3, [r7, #6]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d105      	bne.n	8003de8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ddc:	893b      	ldrh	r3, [r7, #8]
 8003dde:	b2da      	uxtb	r2, r3
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	629a      	str	r2, [r3, #40]	@ 0x28
 8003de6:	e015      	b.n	8003e14 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003de8:	893b      	ldrh	r3, [r7, #8]
 8003dea:	0a1b      	lsrs	r3, r3, #8
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	b2da      	uxtb	r2, r3
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003df6:	69fa      	ldr	r2, [r7, #28]
 8003df8:	69b9      	ldr	r1, [r7, #24]
 8003dfa:	68f8      	ldr	r0, [r7, #12]
 8003dfc:	f000 f8ef 	bl	8003fde <I2C_WaitOnTXISFlagUntilTimeout>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d001      	beq.n	8003e0a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e012      	b.n	8003e30 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e0a:	893b      	ldrh	r3, [r7, #8]
 8003e0c:	b2da      	uxtb	r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	9300      	str	r3, [sp, #0]
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	2180      	movs	r1, #128	@ 0x80
 8003e1e:	68f8      	ldr	r0, [r7, #12]
 8003e20:	f000 f884 	bl	8003f2c <I2C_WaitOnFlagUntilTimeout>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d001      	beq.n	8003e2e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e000      	b.n	8003e30 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3710      	adds	r7, #16
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	80002000 	.word	0x80002000

08003e3c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b086      	sub	sp, #24
 8003e40:	af02      	add	r7, sp, #8
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	4608      	mov	r0, r1
 8003e46:	4611      	mov	r1, r2
 8003e48:	461a      	mov	r2, r3
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	817b      	strh	r3, [r7, #10]
 8003e4e:	460b      	mov	r3, r1
 8003e50:	813b      	strh	r3, [r7, #8]
 8003e52:	4613      	mov	r3, r2
 8003e54:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003e56:	88fb      	ldrh	r3, [r7, #6]
 8003e58:	b2da      	uxtb	r2, r3
 8003e5a:	8979      	ldrh	r1, [r7, #10]
 8003e5c:	4b20      	ldr	r3, [pc, #128]	@ (8003ee0 <I2C_RequestMemoryRead+0xa4>)
 8003e5e:	9300      	str	r3, [sp, #0]
 8003e60:	2300      	movs	r3, #0
 8003e62:	68f8      	ldr	r0, [r7, #12]
 8003e64:	f000 fa26 	bl	80042b4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e68:	69fa      	ldr	r2, [r7, #28]
 8003e6a:	69b9      	ldr	r1, [r7, #24]
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	f000 f8b6 	bl	8003fde <I2C_WaitOnTXISFlagUntilTimeout>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d001      	beq.n	8003e7c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e02c      	b.n	8003ed6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e7c:	88fb      	ldrh	r3, [r7, #6]
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d105      	bne.n	8003e8e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e82:	893b      	ldrh	r3, [r7, #8]
 8003e84:	b2da      	uxtb	r2, r3
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	629a      	str	r2, [r3, #40]	@ 0x28
 8003e8c:	e015      	b.n	8003eba <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003e8e:	893b      	ldrh	r3, [r7, #8]
 8003e90:	0a1b      	lsrs	r3, r3, #8
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	b2da      	uxtb	r2, r3
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e9c:	69fa      	ldr	r2, [r7, #28]
 8003e9e:	69b9      	ldr	r1, [r7, #24]
 8003ea0:	68f8      	ldr	r0, [r7, #12]
 8003ea2:	f000 f89c 	bl	8003fde <I2C_WaitOnTXISFlagUntilTimeout>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d001      	beq.n	8003eb0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e012      	b.n	8003ed6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003eb0:	893b      	ldrh	r3, [r7, #8]
 8003eb2:	b2da      	uxtb	r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	9300      	str	r3, [sp, #0]
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	2140      	movs	r1, #64	@ 0x40
 8003ec4:	68f8      	ldr	r0, [r7, #12]
 8003ec6:	f000 f831 	bl	8003f2c <I2C_WaitOnFlagUntilTimeout>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d001      	beq.n	8003ed4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e000      	b.n	8003ed6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3710      	adds	r7, #16
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	80002000 	.word	0x80002000

08003ee4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	699b      	ldr	r3, [r3, #24]
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d103      	bne.n	8003f02 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2200      	movs	r2, #0
 8003f00:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	f003 0301 	and.w	r3, r3, #1
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d007      	beq.n	8003f20 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	699a      	ldr	r2, [r3, #24]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f042 0201 	orr.w	r2, r2, #1
 8003f1e:	619a      	str	r2, [r3, #24]
  }
}
 8003f20:	bf00      	nop
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	603b      	str	r3, [r7, #0]
 8003f38:	4613      	mov	r3, r2
 8003f3a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f3c:	e03b      	b.n	8003fb6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f3e:	69ba      	ldr	r2, [r7, #24]
 8003f40:	6839      	ldr	r1, [r7, #0]
 8003f42:	68f8      	ldr	r0, [r7, #12]
 8003f44:	f000 f8d6 	bl	80040f4 <I2C_IsErrorOccurred>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d001      	beq.n	8003f52 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e041      	b.n	8003fd6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f58:	d02d      	beq.n	8003fb6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f5a:	f7ff f94d 	bl	80031f8 <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	683a      	ldr	r2, [r7, #0]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d302      	bcc.n	8003f70 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d122      	bne.n	8003fb6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	699a      	ldr	r2, [r3, #24]
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	4013      	ands	r3, r2
 8003f7a:	68ba      	ldr	r2, [r7, #8]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	bf0c      	ite	eq
 8003f80:	2301      	moveq	r3, #1
 8003f82:	2300      	movne	r3, #0
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	461a      	mov	r2, r3
 8003f88:	79fb      	ldrb	r3, [r7, #7]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d113      	bne.n	8003fb6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f92:	f043 0220 	orr.w	r2, r3, #32
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2220      	movs	r2, #32
 8003f9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e00f      	b.n	8003fd6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	699a      	ldr	r2, [r3, #24]
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	68ba      	ldr	r2, [r7, #8]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	bf0c      	ite	eq
 8003fc6:	2301      	moveq	r3, #1
 8003fc8:	2300      	movne	r3, #0
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	461a      	mov	r2, r3
 8003fce:	79fb      	ldrb	r3, [r7, #7]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d0b4      	beq.n	8003f3e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3710      	adds	r7, #16
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}

08003fde <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003fde:	b580      	push	{r7, lr}
 8003fe0:	b084      	sub	sp, #16
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	60f8      	str	r0, [r7, #12]
 8003fe6:	60b9      	str	r1, [r7, #8]
 8003fe8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003fea:	e033      	b.n	8004054 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	68b9      	ldr	r1, [r7, #8]
 8003ff0:	68f8      	ldr	r0, [r7, #12]
 8003ff2:	f000 f87f 	bl	80040f4 <I2C_IsErrorOccurred>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d001      	beq.n	8004000 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e031      	b.n	8004064 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004006:	d025      	beq.n	8004054 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004008:	f7ff f8f6 	bl	80031f8 <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	68ba      	ldr	r2, [r7, #8]
 8004014:	429a      	cmp	r2, r3
 8004016:	d302      	bcc.n	800401e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d11a      	bne.n	8004054 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	699b      	ldr	r3, [r3, #24]
 8004024:	f003 0302 	and.w	r3, r3, #2
 8004028:	2b02      	cmp	r3, #2
 800402a:	d013      	beq.n	8004054 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004030:	f043 0220 	orr.w	r2, r3, #32
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2220      	movs	r2, #32
 800403c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e007      	b.n	8004064 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	699b      	ldr	r3, [r3, #24]
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	2b02      	cmp	r3, #2
 8004060:	d1c4      	bne.n	8003fec <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004062:	2300      	movs	r3, #0
}
 8004064:	4618      	mov	r0, r3
 8004066:	3710      	adds	r7, #16
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004078:	e02f      	b.n	80040da <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	68b9      	ldr	r1, [r7, #8]
 800407e:	68f8      	ldr	r0, [r7, #12]
 8004080:	f000 f838 	bl	80040f4 <I2C_IsErrorOccurred>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d001      	beq.n	800408e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e02d      	b.n	80040ea <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800408e:	f7ff f8b3 	bl	80031f8 <HAL_GetTick>
 8004092:	4602      	mov	r2, r0
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	68ba      	ldr	r2, [r7, #8]
 800409a:	429a      	cmp	r2, r3
 800409c:	d302      	bcc.n	80040a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d11a      	bne.n	80040da <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	f003 0320 	and.w	r3, r3, #32
 80040ae:	2b20      	cmp	r3, #32
 80040b0:	d013      	beq.n	80040da <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040b6:	f043 0220 	orr.w	r2, r3, #32
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2220      	movs	r2, #32
 80040c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e007      	b.n	80040ea <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	699b      	ldr	r3, [r3, #24]
 80040e0:	f003 0320 	and.w	r3, r3, #32
 80040e4:	2b20      	cmp	r3, #32
 80040e6:	d1c8      	bne.n	800407a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3710      	adds	r7, #16
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
	...

080040f4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b08a      	sub	sp, #40	@ 0x28
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004100:	2300      	movs	r3, #0
 8004102:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	699b      	ldr	r3, [r3, #24]
 800410c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800410e:	2300      	movs	r3, #0
 8004110:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	f003 0310 	and.w	r3, r3, #16
 800411c:	2b00      	cmp	r3, #0
 800411e:	d068      	beq.n	80041f2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2210      	movs	r2, #16
 8004126:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004128:	e049      	b.n	80041be <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004130:	d045      	beq.n	80041be <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004132:	f7ff f861 	bl	80031f8 <HAL_GetTick>
 8004136:	4602      	mov	r2, r0
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	68ba      	ldr	r2, [r7, #8]
 800413e:	429a      	cmp	r2, r3
 8004140:	d302      	bcc.n	8004148 <I2C_IsErrorOccurred+0x54>
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d13a      	bne.n	80041be <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004152:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800415a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004166:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800416a:	d121      	bne.n	80041b0 <I2C_IsErrorOccurred+0xbc>
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004172:	d01d      	beq.n	80041b0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004174:	7cfb      	ldrb	r3, [r7, #19]
 8004176:	2b20      	cmp	r3, #32
 8004178:	d01a      	beq.n	80041b0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	685a      	ldr	r2, [r3, #4]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004188:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800418a:	f7ff f835 	bl	80031f8 <HAL_GetTick>
 800418e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004190:	e00e      	b.n	80041b0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004192:	f7ff f831 	bl	80031f8 <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	2b19      	cmp	r3, #25
 800419e:	d907      	bls.n	80041b0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80041a0:	6a3b      	ldr	r3, [r7, #32]
 80041a2:	f043 0320 	orr.w	r3, r3, #32
 80041a6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80041ae:	e006      	b.n	80041be <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	f003 0320 	and.w	r3, r3, #32
 80041ba:	2b20      	cmp	r3, #32
 80041bc:	d1e9      	bne.n	8004192 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	699b      	ldr	r3, [r3, #24]
 80041c4:	f003 0320 	and.w	r3, r3, #32
 80041c8:	2b20      	cmp	r3, #32
 80041ca:	d003      	beq.n	80041d4 <I2C_IsErrorOccurred+0xe0>
 80041cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d0aa      	beq.n	800412a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80041d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d103      	bne.n	80041e4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2220      	movs	r2, #32
 80041e2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80041e4:	6a3b      	ldr	r3, [r7, #32]
 80041e6:	f043 0304 	orr.w	r3, r3, #4
 80041ea:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00b      	beq.n	800421c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004204:	6a3b      	ldr	r3, [r7, #32]
 8004206:	f043 0301 	orr.w	r3, r3, #1
 800420a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004214:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00b      	beq.n	800423e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004226:	6a3b      	ldr	r3, [r7, #32]
 8004228:	f043 0308 	orr.w	r3, r3, #8
 800422c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004236:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00b      	beq.n	8004260 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004248:	6a3b      	ldr	r3, [r7, #32]
 800424a:	f043 0302 	orr.w	r3, r3, #2
 800424e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004258:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004260:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004264:	2b00      	cmp	r3, #0
 8004266:	d01c      	beq.n	80042a2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	f7ff fe3b 	bl	8003ee4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	6859      	ldr	r1, [r3, #4]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	4b0d      	ldr	r3, [pc, #52]	@ (80042b0 <I2C_IsErrorOccurred+0x1bc>)
 800427a:	400b      	ands	r3, r1
 800427c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004282:	6a3b      	ldr	r3, [r7, #32]
 8004284:	431a      	orrs	r2, r3
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2220      	movs	r2, #32
 800428e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80042a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3728      	adds	r7, #40	@ 0x28
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	fe00e800 	.word	0xfe00e800

080042b4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b087      	sub	sp, #28
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	607b      	str	r3, [r7, #4]
 80042be:	460b      	mov	r3, r1
 80042c0:	817b      	strh	r3, [r7, #10]
 80042c2:	4613      	mov	r3, r2
 80042c4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80042c6:	897b      	ldrh	r3, [r7, #10]
 80042c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80042cc:	7a7b      	ldrb	r3, [r7, #9]
 80042ce:	041b      	lsls	r3, r3, #16
 80042d0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80042d4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80042da:	6a3b      	ldr	r3, [r7, #32]
 80042dc:	4313      	orrs	r3, r2
 80042de:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80042e2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	685a      	ldr	r2, [r3, #4]
 80042ea:	6a3b      	ldr	r3, [r7, #32]
 80042ec:	0d5b      	lsrs	r3, r3, #21
 80042ee:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80042f2:	4b08      	ldr	r3, [pc, #32]	@ (8004314 <I2C_TransferConfig+0x60>)
 80042f4:	430b      	orrs	r3, r1
 80042f6:	43db      	mvns	r3, r3
 80042f8:	ea02 0103 	and.w	r1, r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	697a      	ldr	r2, [r7, #20]
 8004302:	430a      	orrs	r2, r1
 8004304:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004306:	bf00      	nop
 8004308:	371c      	adds	r7, #28
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	03ff63ff 	.word	0x03ff63ff

08004318 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004328:	b2db      	uxtb	r3, r3
 800432a:	2b20      	cmp	r3, #32
 800432c:	d138      	bne.n	80043a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004334:	2b01      	cmp	r3, #1
 8004336:	d101      	bne.n	800433c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004338:	2302      	movs	r3, #2
 800433a:	e032      	b.n	80043a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2224      	movs	r2, #36	@ 0x24
 8004348:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f022 0201 	bic.w	r2, r2, #1
 800435a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800436a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	6819      	ldr	r1, [r3, #0]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	683a      	ldr	r2, [r7, #0]
 8004378:	430a      	orrs	r2, r1
 800437a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f042 0201 	orr.w	r2, r2, #1
 800438a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2220      	movs	r2, #32
 8004390:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800439c:	2300      	movs	r3, #0
 800439e:	e000      	b.n	80043a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80043a0:	2302      	movs	r3, #2
  }
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	370c      	adds	r7, #12
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr

080043ae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80043ae:	b480      	push	{r7}
 80043b0:	b085      	sub	sp, #20
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
 80043b6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	2b20      	cmp	r3, #32
 80043c2:	d139      	bne.n	8004438 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d101      	bne.n	80043d2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80043ce:	2302      	movs	r3, #2
 80043d0:	e033      	b.n	800443a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2201      	movs	r2, #1
 80043d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2224      	movs	r2, #36	@ 0x24
 80043de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f022 0201 	bic.w	r2, r2, #1
 80043f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004400:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	021b      	lsls	r3, r3, #8
 8004406:	68fa      	ldr	r2, [r7, #12]
 8004408:	4313      	orrs	r3, r2
 800440a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f042 0201 	orr.w	r2, r2, #1
 8004422:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2220      	movs	r2, #32
 8004428:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004434:	2300      	movs	r3, #0
 8004436:	e000      	b.n	800443a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004438:	2302      	movs	r3, #2
  }
}
 800443a:	4618      	mov	r0, r3
 800443c:	3714      	adds	r7, #20
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
	...

08004448 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004448:	b480      	push	{r7}
 800444a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800444c:	4b04      	ldr	r3, [pc, #16]	@ (8004460 <HAL_PWREx_GetVoltageRange+0x18>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004454:	4618      	mov	r0, r3
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	40007000 	.word	0x40007000

08004464 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004464:	b480      	push	{r7}
 8004466:	b085      	sub	sp, #20
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004472:	d130      	bne.n	80044d6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004474:	4b23      	ldr	r3, [pc, #140]	@ (8004504 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800447c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004480:	d038      	beq.n	80044f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004482:	4b20      	ldr	r3, [pc, #128]	@ (8004504 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800448a:	4a1e      	ldr	r2, [pc, #120]	@ (8004504 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800448c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004490:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004492:	4b1d      	ldr	r3, [pc, #116]	@ (8004508 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2232      	movs	r2, #50	@ 0x32
 8004498:	fb02 f303 	mul.w	r3, r2, r3
 800449c:	4a1b      	ldr	r2, [pc, #108]	@ (800450c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800449e:	fba2 2303 	umull	r2, r3, r2, r3
 80044a2:	0c9b      	lsrs	r3, r3, #18
 80044a4:	3301      	adds	r3, #1
 80044a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80044a8:	e002      	b.n	80044b0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	3b01      	subs	r3, #1
 80044ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80044b0:	4b14      	ldr	r3, [pc, #80]	@ (8004504 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044b2:	695b      	ldr	r3, [r3, #20]
 80044b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044bc:	d102      	bne.n	80044c4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d1f2      	bne.n	80044aa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80044c4:	4b0f      	ldr	r3, [pc, #60]	@ (8004504 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044c6:	695b      	ldr	r3, [r3, #20]
 80044c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044d0:	d110      	bne.n	80044f4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e00f      	b.n	80044f6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80044d6:	4b0b      	ldr	r3, [pc, #44]	@ (8004504 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80044de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044e2:	d007      	beq.n	80044f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80044e4:	4b07      	ldr	r3, [pc, #28]	@ (8004504 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80044ec:	4a05      	ldr	r2, [pc, #20]	@ (8004504 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80044f2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3714      	adds	r7, #20
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	40007000 	.word	0x40007000
 8004508:	20000014 	.word	0x20000014
 800450c:	431bde83 	.word	0x431bde83

08004510 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b088      	sub	sp, #32
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d101      	bne.n	8004522 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e3ca      	b.n	8004cb8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004522:	4b97      	ldr	r3, [pc, #604]	@ (8004780 <HAL_RCC_OscConfig+0x270>)
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f003 030c 	and.w	r3, r3, #12
 800452a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800452c:	4b94      	ldr	r3, [pc, #592]	@ (8004780 <HAL_RCC_OscConfig+0x270>)
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	f003 0303 	and.w	r3, r3, #3
 8004534:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0310 	and.w	r3, r3, #16
 800453e:	2b00      	cmp	r3, #0
 8004540:	f000 80e4 	beq.w	800470c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d007      	beq.n	800455a <HAL_RCC_OscConfig+0x4a>
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	2b0c      	cmp	r3, #12
 800454e:	f040 808b 	bne.w	8004668 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	2b01      	cmp	r3, #1
 8004556:	f040 8087 	bne.w	8004668 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800455a:	4b89      	ldr	r3, [pc, #548]	@ (8004780 <HAL_RCC_OscConfig+0x270>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0302 	and.w	r3, r3, #2
 8004562:	2b00      	cmp	r3, #0
 8004564:	d005      	beq.n	8004572 <HAL_RCC_OscConfig+0x62>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	699b      	ldr	r3, [r3, #24]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d101      	bne.n	8004572 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e3a2      	b.n	8004cb8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a1a      	ldr	r2, [r3, #32]
 8004576:	4b82      	ldr	r3, [pc, #520]	@ (8004780 <HAL_RCC_OscConfig+0x270>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0308 	and.w	r3, r3, #8
 800457e:	2b00      	cmp	r3, #0
 8004580:	d004      	beq.n	800458c <HAL_RCC_OscConfig+0x7c>
 8004582:	4b7f      	ldr	r3, [pc, #508]	@ (8004780 <HAL_RCC_OscConfig+0x270>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800458a:	e005      	b.n	8004598 <HAL_RCC_OscConfig+0x88>
 800458c:	4b7c      	ldr	r3, [pc, #496]	@ (8004780 <HAL_RCC_OscConfig+0x270>)
 800458e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004592:	091b      	lsrs	r3, r3, #4
 8004594:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004598:	4293      	cmp	r3, r2
 800459a:	d223      	bcs.n	80045e4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a1b      	ldr	r3, [r3, #32]
 80045a0:	4618      	mov	r0, r3
 80045a2:	f000 fd55 	bl	8005050 <RCC_SetFlashLatencyFromMSIRange>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d001      	beq.n	80045b0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e383      	b.n	8004cb8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045b0:	4b73      	ldr	r3, [pc, #460]	@ (8004780 <HAL_RCC_OscConfig+0x270>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a72      	ldr	r2, [pc, #456]	@ (8004780 <HAL_RCC_OscConfig+0x270>)
 80045b6:	f043 0308 	orr.w	r3, r3, #8
 80045ba:	6013      	str	r3, [r2, #0]
 80045bc:	4b70      	ldr	r3, [pc, #448]	@ (8004780 <HAL_RCC_OscConfig+0x270>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a1b      	ldr	r3, [r3, #32]
 80045c8:	496d      	ldr	r1, [pc, #436]	@ (8004780 <HAL_RCC_OscConfig+0x270>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045ce:	4b6c      	ldr	r3, [pc, #432]	@ (8004780 <HAL_RCC_OscConfig+0x270>)
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	69db      	ldr	r3, [r3, #28]
 80045da:	021b      	lsls	r3, r3, #8
 80045dc:	4968      	ldr	r1, [pc, #416]	@ (8004780 <HAL_RCC_OscConfig+0x270>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	604b      	str	r3, [r1, #4]
 80045e2:	e025      	b.n	8004630 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045e4:	4b66      	ldr	r3, [pc, #408]	@ (8004780 <HAL_RCC_OscConfig+0x270>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a65      	ldr	r2, [pc, #404]	@ (8004780 <HAL_RCC_OscConfig+0x270>)
 80045ea:	f043 0308 	orr.w	r3, r3, #8
 80045ee:	6013      	str	r3, [r2, #0]
 80045f0:	4b63      	ldr	r3, [pc, #396]	@ (8004780 <HAL_RCC_OscConfig+0x270>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6a1b      	ldr	r3, [r3, #32]
 80045fc:	4960      	ldr	r1, [pc, #384]	@ (8004780 <HAL_RCC_OscConfig+0x270>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004602:	4b5f      	ldr	r3, [pc, #380]	@ (8004780 <HAL_RCC_OscConfig+0x270>)
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	69db      	ldr	r3, [r3, #28]
 800460e:	021b      	lsls	r3, r3, #8
 8004610:	495b      	ldr	r1, [pc, #364]	@ (8004780 <HAL_RCC_OscConfig+0x270>)
 8004612:	4313      	orrs	r3, r2
 8004614:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d109      	bne.n	8004630 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a1b      	ldr	r3, [r3, #32]
 8004620:	4618      	mov	r0, r3
 8004622:	f000 fd15 	bl	8005050 <RCC_SetFlashLatencyFromMSIRange>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d001      	beq.n	8004630 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e343      	b.n	8004cb8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004630:	f000 fc4a 	bl	8004ec8 <HAL_RCC_GetSysClockFreq>
 8004634:	4602      	mov	r2, r0
 8004636:	4b52      	ldr	r3, [pc, #328]	@ (8004780 <HAL_RCC_OscConfig+0x270>)
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	091b      	lsrs	r3, r3, #4
 800463c:	f003 030f 	and.w	r3, r3, #15
 8004640:	4950      	ldr	r1, [pc, #320]	@ (8004784 <HAL_RCC_OscConfig+0x274>)
 8004642:	5ccb      	ldrb	r3, [r1, r3]
 8004644:	f003 031f 	and.w	r3, r3, #31
 8004648:	fa22 f303 	lsr.w	r3, r2, r3
 800464c:	4a4e      	ldr	r2, [pc, #312]	@ (8004788 <HAL_RCC_OscConfig+0x278>)
 800464e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004650:	4b4e      	ldr	r3, [pc, #312]	@ (800478c <HAL_RCC_OscConfig+0x27c>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4618      	mov	r0, r3
 8004656:	f7fe fd7f 	bl	8003158 <HAL_InitTick>
 800465a:	4603      	mov	r3, r0
 800465c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800465e:	7bfb      	ldrb	r3, [r7, #15]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d052      	beq.n	800470a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004664:	7bfb      	ldrb	r3, [r7, #15]
 8004666:	e327      	b.n	8004cb8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d032      	beq.n	80046d6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004670:	4b43      	ldr	r3, [pc, #268]	@ (8004780 <HAL_RCC_OscConfig+0x270>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a42      	ldr	r2, [pc, #264]	@ (8004780 <HAL_RCC_OscConfig+0x270>)
 8004676:	f043 0301 	orr.w	r3, r3, #1
 800467a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800467c:	f7fe fdbc 	bl	80031f8 <HAL_GetTick>
 8004680:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004682:	e008      	b.n	8004696 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004684:	f7fe fdb8 	bl	80031f8 <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	2b02      	cmp	r3, #2
 8004690:	d901      	bls.n	8004696 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e310      	b.n	8004cb8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004696:	4b3a      	ldr	r3, [pc, #232]	@ (8004780 <HAL_RCC_OscConfig+0x270>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0302 	and.w	r3, r3, #2
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d0f0      	beq.n	8004684 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046a2:	4b37      	ldr	r3, [pc, #220]	@ (8004780 <HAL_RCC_OscConfig+0x270>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a36      	ldr	r2, [pc, #216]	@ (8004780 <HAL_RCC_OscConfig+0x270>)
 80046a8:	f043 0308 	orr.w	r3, r3, #8
 80046ac:	6013      	str	r3, [r2, #0]
 80046ae:	4b34      	ldr	r3, [pc, #208]	@ (8004780 <HAL_RCC_OscConfig+0x270>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a1b      	ldr	r3, [r3, #32]
 80046ba:	4931      	ldr	r1, [pc, #196]	@ (8004780 <HAL_RCC_OscConfig+0x270>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046c0:	4b2f      	ldr	r3, [pc, #188]	@ (8004780 <HAL_RCC_OscConfig+0x270>)
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	69db      	ldr	r3, [r3, #28]
 80046cc:	021b      	lsls	r3, r3, #8
 80046ce:	492c      	ldr	r1, [pc, #176]	@ (8004780 <HAL_RCC_OscConfig+0x270>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	604b      	str	r3, [r1, #4]
 80046d4:	e01a      	b.n	800470c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80046d6:	4b2a      	ldr	r3, [pc, #168]	@ (8004780 <HAL_RCC_OscConfig+0x270>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a29      	ldr	r2, [pc, #164]	@ (8004780 <HAL_RCC_OscConfig+0x270>)
 80046dc:	f023 0301 	bic.w	r3, r3, #1
 80046e0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80046e2:	f7fe fd89 	bl	80031f8 <HAL_GetTick>
 80046e6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80046e8:	e008      	b.n	80046fc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80046ea:	f7fe fd85 	bl	80031f8 <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d901      	bls.n	80046fc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	e2dd      	b.n	8004cb8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80046fc:	4b20      	ldr	r3, [pc, #128]	@ (8004780 <HAL_RCC_OscConfig+0x270>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0302 	and.w	r3, r3, #2
 8004704:	2b00      	cmp	r3, #0
 8004706:	d1f0      	bne.n	80046ea <HAL_RCC_OscConfig+0x1da>
 8004708:	e000      	b.n	800470c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800470a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0301 	and.w	r3, r3, #1
 8004714:	2b00      	cmp	r3, #0
 8004716:	d074      	beq.n	8004802 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	2b08      	cmp	r3, #8
 800471c:	d005      	beq.n	800472a <HAL_RCC_OscConfig+0x21a>
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	2b0c      	cmp	r3, #12
 8004722:	d10e      	bne.n	8004742 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	2b03      	cmp	r3, #3
 8004728:	d10b      	bne.n	8004742 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800472a:	4b15      	ldr	r3, [pc, #84]	@ (8004780 <HAL_RCC_OscConfig+0x270>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d064      	beq.n	8004800 <HAL_RCC_OscConfig+0x2f0>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d160      	bne.n	8004800 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e2ba      	b.n	8004cb8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800474a:	d106      	bne.n	800475a <HAL_RCC_OscConfig+0x24a>
 800474c:	4b0c      	ldr	r3, [pc, #48]	@ (8004780 <HAL_RCC_OscConfig+0x270>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a0b      	ldr	r2, [pc, #44]	@ (8004780 <HAL_RCC_OscConfig+0x270>)
 8004752:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004756:	6013      	str	r3, [r2, #0]
 8004758:	e026      	b.n	80047a8 <HAL_RCC_OscConfig+0x298>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004762:	d115      	bne.n	8004790 <HAL_RCC_OscConfig+0x280>
 8004764:	4b06      	ldr	r3, [pc, #24]	@ (8004780 <HAL_RCC_OscConfig+0x270>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a05      	ldr	r2, [pc, #20]	@ (8004780 <HAL_RCC_OscConfig+0x270>)
 800476a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800476e:	6013      	str	r3, [r2, #0]
 8004770:	4b03      	ldr	r3, [pc, #12]	@ (8004780 <HAL_RCC_OscConfig+0x270>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a02      	ldr	r2, [pc, #8]	@ (8004780 <HAL_RCC_OscConfig+0x270>)
 8004776:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800477a:	6013      	str	r3, [r2, #0]
 800477c:	e014      	b.n	80047a8 <HAL_RCC_OscConfig+0x298>
 800477e:	bf00      	nop
 8004780:	40021000 	.word	0x40021000
 8004784:	0800cd00 	.word	0x0800cd00
 8004788:	20000014 	.word	0x20000014
 800478c:	20000018 	.word	0x20000018
 8004790:	4ba0      	ldr	r3, [pc, #640]	@ (8004a14 <HAL_RCC_OscConfig+0x504>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a9f      	ldr	r2, [pc, #636]	@ (8004a14 <HAL_RCC_OscConfig+0x504>)
 8004796:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800479a:	6013      	str	r3, [r2, #0]
 800479c:	4b9d      	ldr	r3, [pc, #628]	@ (8004a14 <HAL_RCC_OscConfig+0x504>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a9c      	ldr	r2, [pc, #624]	@ (8004a14 <HAL_RCC_OscConfig+0x504>)
 80047a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80047a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d013      	beq.n	80047d8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b0:	f7fe fd22 	bl	80031f8 <HAL_GetTick>
 80047b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047b6:	e008      	b.n	80047ca <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047b8:	f7fe fd1e 	bl	80031f8 <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	2b64      	cmp	r3, #100	@ 0x64
 80047c4:	d901      	bls.n	80047ca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e276      	b.n	8004cb8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047ca:	4b92      	ldr	r3, [pc, #584]	@ (8004a14 <HAL_RCC_OscConfig+0x504>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d0f0      	beq.n	80047b8 <HAL_RCC_OscConfig+0x2a8>
 80047d6:	e014      	b.n	8004802 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047d8:	f7fe fd0e 	bl	80031f8 <HAL_GetTick>
 80047dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047de:	e008      	b.n	80047f2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047e0:	f7fe fd0a 	bl	80031f8 <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	2b64      	cmp	r3, #100	@ 0x64
 80047ec:	d901      	bls.n	80047f2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e262      	b.n	8004cb8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047f2:	4b88      	ldr	r3, [pc, #544]	@ (8004a14 <HAL_RCC_OscConfig+0x504>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1f0      	bne.n	80047e0 <HAL_RCC_OscConfig+0x2d0>
 80047fe:	e000      	b.n	8004802 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004800:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0302 	and.w	r3, r3, #2
 800480a:	2b00      	cmp	r3, #0
 800480c:	d060      	beq.n	80048d0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	2b04      	cmp	r3, #4
 8004812:	d005      	beq.n	8004820 <HAL_RCC_OscConfig+0x310>
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	2b0c      	cmp	r3, #12
 8004818:	d119      	bne.n	800484e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	2b02      	cmp	r3, #2
 800481e:	d116      	bne.n	800484e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004820:	4b7c      	ldr	r3, [pc, #496]	@ (8004a14 <HAL_RCC_OscConfig+0x504>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004828:	2b00      	cmp	r3, #0
 800482a:	d005      	beq.n	8004838 <HAL_RCC_OscConfig+0x328>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d101      	bne.n	8004838 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e23f      	b.n	8004cb8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004838:	4b76      	ldr	r3, [pc, #472]	@ (8004a14 <HAL_RCC_OscConfig+0x504>)
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	061b      	lsls	r3, r3, #24
 8004846:	4973      	ldr	r1, [pc, #460]	@ (8004a14 <HAL_RCC_OscConfig+0x504>)
 8004848:	4313      	orrs	r3, r2
 800484a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800484c:	e040      	b.n	80048d0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d023      	beq.n	800489e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004856:	4b6f      	ldr	r3, [pc, #444]	@ (8004a14 <HAL_RCC_OscConfig+0x504>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a6e      	ldr	r2, [pc, #440]	@ (8004a14 <HAL_RCC_OscConfig+0x504>)
 800485c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004860:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004862:	f7fe fcc9 	bl	80031f8 <HAL_GetTick>
 8004866:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004868:	e008      	b.n	800487c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800486a:	f7fe fcc5 	bl	80031f8 <HAL_GetTick>
 800486e:	4602      	mov	r2, r0
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	2b02      	cmp	r3, #2
 8004876:	d901      	bls.n	800487c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004878:	2303      	movs	r3, #3
 800487a:	e21d      	b.n	8004cb8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800487c:	4b65      	ldr	r3, [pc, #404]	@ (8004a14 <HAL_RCC_OscConfig+0x504>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004884:	2b00      	cmp	r3, #0
 8004886:	d0f0      	beq.n	800486a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004888:	4b62      	ldr	r3, [pc, #392]	@ (8004a14 <HAL_RCC_OscConfig+0x504>)
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	691b      	ldr	r3, [r3, #16]
 8004894:	061b      	lsls	r3, r3, #24
 8004896:	495f      	ldr	r1, [pc, #380]	@ (8004a14 <HAL_RCC_OscConfig+0x504>)
 8004898:	4313      	orrs	r3, r2
 800489a:	604b      	str	r3, [r1, #4]
 800489c:	e018      	b.n	80048d0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800489e:	4b5d      	ldr	r3, [pc, #372]	@ (8004a14 <HAL_RCC_OscConfig+0x504>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a5c      	ldr	r2, [pc, #368]	@ (8004a14 <HAL_RCC_OscConfig+0x504>)
 80048a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048aa:	f7fe fca5 	bl	80031f8 <HAL_GetTick>
 80048ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048b0:	e008      	b.n	80048c4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048b2:	f7fe fca1 	bl	80031f8 <HAL_GetTick>
 80048b6:	4602      	mov	r2, r0
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	2b02      	cmp	r3, #2
 80048be:	d901      	bls.n	80048c4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	e1f9      	b.n	8004cb8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048c4:	4b53      	ldr	r3, [pc, #332]	@ (8004a14 <HAL_RCC_OscConfig+0x504>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d1f0      	bne.n	80048b2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0308 	and.w	r3, r3, #8
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d03c      	beq.n	8004956 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	695b      	ldr	r3, [r3, #20]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d01c      	beq.n	800491e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048e4:	4b4b      	ldr	r3, [pc, #300]	@ (8004a14 <HAL_RCC_OscConfig+0x504>)
 80048e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048ea:	4a4a      	ldr	r2, [pc, #296]	@ (8004a14 <HAL_RCC_OscConfig+0x504>)
 80048ec:	f043 0301 	orr.w	r3, r3, #1
 80048f0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048f4:	f7fe fc80 	bl	80031f8 <HAL_GetTick>
 80048f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048fa:	e008      	b.n	800490e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048fc:	f7fe fc7c 	bl	80031f8 <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	2b02      	cmp	r3, #2
 8004908:	d901      	bls.n	800490e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e1d4      	b.n	8004cb8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800490e:	4b41      	ldr	r3, [pc, #260]	@ (8004a14 <HAL_RCC_OscConfig+0x504>)
 8004910:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004914:	f003 0302 	and.w	r3, r3, #2
 8004918:	2b00      	cmp	r3, #0
 800491a:	d0ef      	beq.n	80048fc <HAL_RCC_OscConfig+0x3ec>
 800491c:	e01b      	b.n	8004956 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800491e:	4b3d      	ldr	r3, [pc, #244]	@ (8004a14 <HAL_RCC_OscConfig+0x504>)
 8004920:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004924:	4a3b      	ldr	r2, [pc, #236]	@ (8004a14 <HAL_RCC_OscConfig+0x504>)
 8004926:	f023 0301 	bic.w	r3, r3, #1
 800492a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800492e:	f7fe fc63 	bl	80031f8 <HAL_GetTick>
 8004932:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004934:	e008      	b.n	8004948 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004936:	f7fe fc5f 	bl	80031f8 <HAL_GetTick>
 800493a:	4602      	mov	r2, r0
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	2b02      	cmp	r3, #2
 8004942:	d901      	bls.n	8004948 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	e1b7      	b.n	8004cb8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004948:	4b32      	ldr	r3, [pc, #200]	@ (8004a14 <HAL_RCC_OscConfig+0x504>)
 800494a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800494e:	f003 0302 	and.w	r3, r3, #2
 8004952:	2b00      	cmp	r3, #0
 8004954:	d1ef      	bne.n	8004936 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0304 	and.w	r3, r3, #4
 800495e:	2b00      	cmp	r3, #0
 8004960:	f000 80a6 	beq.w	8004ab0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004964:	2300      	movs	r3, #0
 8004966:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004968:	4b2a      	ldr	r3, [pc, #168]	@ (8004a14 <HAL_RCC_OscConfig+0x504>)
 800496a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800496c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004970:	2b00      	cmp	r3, #0
 8004972:	d10d      	bne.n	8004990 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004974:	4b27      	ldr	r3, [pc, #156]	@ (8004a14 <HAL_RCC_OscConfig+0x504>)
 8004976:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004978:	4a26      	ldr	r2, [pc, #152]	@ (8004a14 <HAL_RCC_OscConfig+0x504>)
 800497a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800497e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004980:	4b24      	ldr	r3, [pc, #144]	@ (8004a14 <HAL_RCC_OscConfig+0x504>)
 8004982:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004984:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004988:	60bb      	str	r3, [r7, #8]
 800498a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800498c:	2301      	movs	r3, #1
 800498e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004990:	4b21      	ldr	r3, [pc, #132]	@ (8004a18 <HAL_RCC_OscConfig+0x508>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004998:	2b00      	cmp	r3, #0
 800499a:	d118      	bne.n	80049ce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800499c:	4b1e      	ldr	r3, [pc, #120]	@ (8004a18 <HAL_RCC_OscConfig+0x508>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a1d      	ldr	r2, [pc, #116]	@ (8004a18 <HAL_RCC_OscConfig+0x508>)
 80049a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049a8:	f7fe fc26 	bl	80031f8 <HAL_GetTick>
 80049ac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049ae:	e008      	b.n	80049c2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049b0:	f7fe fc22 	bl	80031f8 <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d901      	bls.n	80049c2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e17a      	b.n	8004cb8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049c2:	4b15      	ldr	r3, [pc, #84]	@ (8004a18 <HAL_RCC_OscConfig+0x508>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d0f0      	beq.n	80049b0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d108      	bne.n	80049e8 <HAL_RCC_OscConfig+0x4d8>
 80049d6:	4b0f      	ldr	r3, [pc, #60]	@ (8004a14 <HAL_RCC_OscConfig+0x504>)
 80049d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049dc:	4a0d      	ldr	r2, [pc, #52]	@ (8004a14 <HAL_RCC_OscConfig+0x504>)
 80049de:	f043 0301 	orr.w	r3, r3, #1
 80049e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80049e6:	e029      	b.n	8004a3c <HAL_RCC_OscConfig+0x52c>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	2b05      	cmp	r3, #5
 80049ee:	d115      	bne.n	8004a1c <HAL_RCC_OscConfig+0x50c>
 80049f0:	4b08      	ldr	r3, [pc, #32]	@ (8004a14 <HAL_RCC_OscConfig+0x504>)
 80049f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049f6:	4a07      	ldr	r2, [pc, #28]	@ (8004a14 <HAL_RCC_OscConfig+0x504>)
 80049f8:	f043 0304 	orr.w	r3, r3, #4
 80049fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004a00:	4b04      	ldr	r3, [pc, #16]	@ (8004a14 <HAL_RCC_OscConfig+0x504>)
 8004a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a06:	4a03      	ldr	r2, [pc, #12]	@ (8004a14 <HAL_RCC_OscConfig+0x504>)
 8004a08:	f043 0301 	orr.w	r3, r3, #1
 8004a0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004a10:	e014      	b.n	8004a3c <HAL_RCC_OscConfig+0x52c>
 8004a12:	bf00      	nop
 8004a14:	40021000 	.word	0x40021000
 8004a18:	40007000 	.word	0x40007000
 8004a1c:	4b9c      	ldr	r3, [pc, #624]	@ (8004c90 <HAL_RCC_OscConfig+0x780>)
 8004a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a22:	4a9b      	ldr	r2, [pc, #620]	@ (8004c90 <HAL_RCC_OscConfig+0x780>)
 8004a24:	f023 0301 	bic.w	r3, r3, #1
 8004a28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004a2c:	4b98      	ldr	r3, [pc, #608]	@ (8004c90 <HAL_RCC_OscConfig+0x780>)
 8004a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a32:	4a97      	ldr	r2, [pc, #604]	@ (8004c90 <HAL_RCC_OscConfig+0x780>)
 8004a34:	f023 0304 	bic.w	r3, r3, #4
 8004a38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d016      	beq.n	8004a72 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a44:	f7fe fbd8 	bl	80031f8 <HAL_GetTick>
 8004a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a4a:	e00a      	b.n	8004a62 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a4c:	f7fe fbd4 	bl	80031f8 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d901      	bls.n	8004a62 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e12a      	b.n	8004cb8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a62:	4b8b      	ldr	r3, [pc, #556]	@ (8004c90 <HAL_RCC_OscConfig+0x780>)
 8004a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a68:	f003 0302 	and.w	r3, r3, #2
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d0ed      	beq.n	8004a4c <HAL_RCC_OscConfig+0x53c>
 8004a70:	e015      	b.n	8004a9e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a72:	f7fe fbc1 	bl	80031f8 <HAL_GetTick>
 8004a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a78:	e00a      	b.n	8004a90 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a7a:	f7fe fbbd 	bl	80031f8 <HAL_GetTick>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d901      	bls.n	8004a90 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	e113      	b.n	8004cb8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a90:	4b7f      	ldr	r3, [pc, #508]	@ (8004c90 <HAL_RCC_OscConfig+0x780>)
 8004a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a96:	f003 0302 	and.w	r3, r3, #2
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d1ed      	bne.n	8004a7a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a9e:	7ffb      	ldrb	r3, [r7, #31]
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d105      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004aa4:	4b7a      	ldr	r3, [pc, #488]	@ (8004c90 <HAL_RCC_OscConfig+0x780>)
 8004aa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aa8:	4a79      	ldr	r2, [pc, #484]	@ (8004c90 <HAL_RCC_OscConfig+0x780>)
 8004aaa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004aae:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	f000 80fe 	beq.w	8004cb6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	f040 80d0 	bne.w	8004c64 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004ac4:	4b72      	ldr	r3, [pc, #456]	@ (8004c90 <HAL_RCC_OscConfig+0x780>)
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	f003 0203 	and.w	r2, r3, #3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d130      	bne.n	8004b3a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d127      	bne.n	8004b3a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004af4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d11f      	bne.n	8004b3a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004b04:	2a07      	cmp	r2, #7
 8004b06:	bf14      	ite	ne
 8004b08:	2201      	movne	r2, #1
 8004b0a:	2200      	moveq	r2, #0
 8004b0c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d113      	bne.n	8004b3a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b1c:	085b      	lsrs	r3, r3, #1
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d109      	bne.n	8004b3a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b30:	085b      	lsrs	r3, r3, #1
 8004b32:	3b01      	subs	r3, #1
 8004b34:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d06e      	beq.n	8004c18 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	2b0c      	cmp	r3, #12
 8004b3e:	d069      	beq.n	8004c14 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004b40:	4b53      	ldr	r3, [pc, #332]	@ (8004c90 <HAL_RCC_OscConfig+0x780>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d105      	bne.n	8004b58 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004b4c:	4b50      	ldr	r3, [pc, #320]	@ (8004c90 <HAL_RCC_OscConfig+0x780>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d001      	beq.n	8004b5c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e0ad      	b.n	8004cb8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004b5c:	4b4c      	ldr	r3, [pc, #304]	@ (8004c90 <HAL_RCC_OscConfig+0x780>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a4b      	ldr	r2, [pc, #300]	@ (8004c90 <HAL_RCC_OscConfig+0x780>)
 8004b62:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b66:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b68:	f7fe fb46 	bl	80031f8 <HAL_GetTick>
 8004b6c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b6e:	e008      	b.n	8004b82 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b70:	f7fe fb42 	bl	80031f8 <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d901      	bls.n	8004b82 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e09a      	b.n	8004cb8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b82:	4b43      	ldr	r3, [pc, #268]	@ (8004c90 <HAL_RCC_OscConfig+0x780>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1f0      	bne.n	8004b70 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b8e:	4b40      	ldr	r3, [pc, #256]	@ (8004c90 <HAL_RCC_OscConfig+0x780>)
 8004b90:	68da      	ldr	r2, [r3, #12]
 8004b92:	4b40      	ldr	r3, [pc, #256]	@ (8004c94 <HAL_RCC_OscConfig+0x784>)
 8004b94:	4013      	ands	r3, r2
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004b9e:	3a01      	subs	r2, #1
 8004ba0:	0112      	lsls	r2, r2, #4
 8004ba2:	4311      	orrs	r1, r2
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004ba8:	0212      	lsls	r2, r2, #8
 8004baa:	4311      	orrs	r1, r2
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004bb0:	0852      	lsrs	r2, r2, #1
 8004bb2:	3a01      	subs	r2, #1
 8004bb4:	0552      	lsls	r2, r2, #21
 8004bb6:	4311      	orrs	r1, r2
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004bbc:	0852      	lsrs	r2, r2, #1
 8004bbe:	3a01      	subs	r2, #1
 8004bc0:	0652      	lsls	r2, r2, #25
 8004bc2:	4311      	orrs	r1, r2
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004bc8:	0912      	lsrs	r2, r2, #4
 8004bca:	0452      	lsls	r2, r2, #17
 8004bcc:	430a      	orrs	r2, r1
 8004bce:	4930      	ldr	r1, [pc, #192]	@ (8004c90 <HAL_RCC_OscConfig+0x780>)
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004bd4:	4b2e      	ldr	r3, [pc, #184]	@ (8004c90 <HAL_RCC_OscConfig+0x780>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a2d      	ldr	r2, [pc, #180]	@ (8004c90 <HAL_RCC_OscConfig+0x780>)
 8004bda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004bde:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004be0:	4b2b      	ldr	r3, [pc, #172]	@ (8004c90 <HAL_RCC_OscConfig+0x780>)
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	4a2a      	ldr	r2, [pc, #168]	@ (8004c90 <HAL_RCC_OscConfig+0x780>)
 8004be6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004bea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004bec:	f7fe fb04 	bl	80031f8 <HAL_GetTick>
 8004bf0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bf2:	e008      	b.n	8004c06 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bf4:	f7fe fb00 	bl	80031f8 <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d901      	bls.n	8004c06 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	e058      	b.n	8004cb8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c06:	4b22      	ldr	r3, [pc, #136]	@ (8004c90 <HAL_RCC_OscConfig+0x780>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d0f0      	beq.n	8004bf4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c12:	e050      	b.n	8004cb6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e04f      	b.n	8004cb8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c18:	4b1d      	ldr	r3, [pc, #116]	@ (8004c90 <HAL_RCC_OscConfig+0x780>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d148      	bne.n	8004cb6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004c24:	4b1a      	ldr	r3, [pc, #104]	@ (8004c90 <HAL_RCC_OscConfig+0x780>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a19      	ldr	r2, [pc, #100]	@ (8004c90 <HAL_RCC_OscConfig+0x780>)
 8004c2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c2e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c30:	4b17      	ldr	r3, [pc, #92]	@ (8004c90 <HAL_RCC_OscConfig+0x780>)
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	4a16      	ldr	r2, [pc, #88]	@ (8004c90 <HAL_RCC_OscConfig+0x780>)
 8004c36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c3a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c3c:	f7fe fadc 	bl	80031f8 <HAL_GetTick>
 8004c40:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c42:	e008      	b.n	8004c56 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c44:	f7fe fad8 	bl	80031f8 <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d901      	bls.n	8004c56 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e030      	b.n	8004cb8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c56:	4b0e      	ldr	r3, [pc, #56]	@ (8004c90 <HAL_RCC_OscConfig+0x780>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d0f0      	beq.n	8004c44 <HAL_RCC_OscConfig+0x734>
 8004c62:	e028      	b.n	8004cb6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c64:	69bb      	ldr	r3, [r7, #24]
 8004c66:	2b0c      	cmp	r3, #12
 8004c68:	d023      	beq.n	8004cb2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c6a:	4b09      	ldr	r3, [pc, #36]	@ (8004c90 <HAL_RCC_OscConfig+0x780>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a08      	ldr	r2, [pc, #32]	@ (8004c90 <HAL_RCC_OscConfig+0x780>)
 8004c70:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c76:	f7fe fabf 	bl	80031f8 <HAL_GetTick>
 8004c7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c7c:	e00c      	b.n	8004c98 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c7e:	f7fe fabb 	bl	80031f8 <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d905      	bls.n	8004c98 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e013      	b.n	8004cb8 <HAL_RCC_OscConfig+0x7a8>
 8004c90:	40021000 	.word	0x40021000
 8004c94:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c98:	4b09      	ldr	r3, [pc, #36]	@ (8004cc0 <HAL_RCC_OscConfig+0x7b0>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1ec      	bne.n	8004c7e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004ca4:	4b06      	ldr	r3, [pc, #24]	@ (8004cc0 <HAL_RCC_OscConfig+0x7b0>)
 8004ca6:	68da      	ldr	r2, [r3, #12]
 8004ca8:	4905      	ldr	r1, [pc, #20]	@ (8004cc0 <HAL_RCC_OscConfig+0x7b0>)
 8004caa:	4b06      	ldr	r3, [pc, #24]	@ (8004cc4 <HAL_RCC_OscConfig+0x7b4>)
 8004cac:	4013      	ands	r3, r2
 8004cae:	60cb      	str	r3, [r1, #12]
 8004cb0:	e001      	b.n	8004cb6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e000      	b.n	8004cb8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004cb6:	2300      	movs	r3, #0
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3720      	adds	r7, #32
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	40021000 	.word	0x40021000
 8004cc4:	feeefffc 	.word	0xfeeefffc

08004cc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d101      	bne.n	8004cdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e0e7      	b.n	8004eac <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004cdc:	4b75      	ldr	r3, [pc, #468]	@ (8004eb4 <HAL_RCC_ClockConfig+0x1ec>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 0307 	and.w	r3, r3, #7
 8004ce4:	683a      	ldr	r2, [r7, #0]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d910      	bls.n	8004d0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cea:	4b72      	ldr	r3, [pc, #456]	@ (8004eb4 <HAL_RCC_ClockConfig+0x1ec>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f023 0207 	bic.w	r2, r3, #7
 8004cf2:	4970      	ldr	r1, [pc, #448]	@ (8004eb4 <HAL_RCC_ClockConfig+0x1ec>)
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cfa:	4b6e      	ldr	r3, [pc, #440]	@ (8004eb4 <HAL_RCC_ClockConfig+0x1ec>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0307 	and.w	r3, r3, #7
 8004d02:	683a      	ldr	r2, [r7, #0]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d001      	beq.n	8004d0c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e0cf      	b.n	8004eac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0302 	and.w	r3, r3, #2
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d010      	beq.n	8004d3a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	689a      	ldr	r2, [r3, #8]
 8004d1c:	4b66      	ldr	r3, [pc, #408]	@ (8004eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d908      	bls.n	8004d3a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d28:	4b63      	ldr	r3, [pc, #396]	@ (8004eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	4960      	ldr	r1, [pc, #384]	@ (8004eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8004d36:	4313      	orrs	r3, r2
 8004d38:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 0301 	and.w	r3, r3, #1
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d04c      	beq.n	8004de0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	2b03      	cmp	r3, #3
 8004d4c:	d107      	bne.n	8004d5e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d4e:	4b5a      	ldr	r3, [pc, #360]	@ (8004eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d121      	bne.n	8004d9e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e0a6      	b.n	8004eac <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d107      	bne.n	8004d76 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d66:	4b54      	ldr	r3, [pc, #336]	@ (8004eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d115      	bne.n	8004d9e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e09a      	b.n	8004eac <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d107      	bne.n	8004d8e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d7e:	4b4e      	ldr	r3, [pc, #312]	@ (8004eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0302 	and.w	r3, r3, #2
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d109      	bne.n	8004d9e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e08e      	b.n	8004eac <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d8e:	4b4a      	ldr	r3, [pc, #296]	@ (8004eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d101      	bne.n	8004d9e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e086      	b.n	8004eac <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d9e:	4b46      	ldr	r3, [pc, #280]	@ (8004eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f023 0203 	bic.w	r2, r3, #3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	4943      	ldr	r1, [pc, #268]	@ (8004eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8004dac:	4313      	orrs	r3, r2
 8004dae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004db0:	f7fe fa22 	bl	80031f8 <HAL_GetTick>
 8004db4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004db6:	e00a      	b.n	8004dce <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004db8:	f7fe fa1e 	bl	80031f8 <HAL_GetTick>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d901      	bls.n	8004dce <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e06e      	b.n	8004eac <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dce:	4b3a      	ldr	r3, [pc, #232]	@ (8004eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f003 020c 	and.w	r2, r3, #12
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d1eb      	bne.n	8004db8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0302 	and.w	r3, r3, #2
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d010      	beq.n	8004e0e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	689a      	ldr	r2, [r3, #8]
 8004df0:	4b31      	ldr	r3, [pc, #196]	@ (8004eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d208      	bcs.n	8004e0e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dfc:	4b2e      	ldr	r3, [pc, #184]	@ (8004eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	492b      	ldr	r1, [pc, #172]	@ (8004eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e0e:	4b29      	ldr	r3, [pc, #164]	@ (8004eb4 <HAL_RCC_ClockConfig+0x1ec>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 0307 	and.w	r3, r3, #7
 8004e16:	683a      	ldr	r2, [r7, #0]
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d210      	bcs.n	8004e3e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e1c:	4b25      	ldr	r3, [pc, #148]	@ (8004eb4 <HAL_RCC_ClockConfig+0x1ec>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f023 0207 	bic.w	r2, r3, #7
 8004e24:	4923      	ldr	r1, [pc, #140]	@ (8004eb4 <HAL_RCC_ClockConfig+0x1ec>)
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e2c:	4b21      	ldr	r3, [pc, #132]	@ (8004eb4 <HAL_RCC_ClockConfig+0x1ec>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0307 	and.w	r3, r3, #7
 8004e34:	683a      	ldr	r2, [r7, #0]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d001      	beq.n	8004e3e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e036      	b.n	8004eac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0304 	and.w	r3, r3, #4
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d008      	beq.n	8004e5c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e4a:	4b1b      	ldr	r3, [pc, #108]	@ (8004eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	4918      	ldr	r1, [pc, #96]	@ (8004eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 0308 	and.w	r3, r3, #8
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d009      	beq.n	8004e7c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e68:	4b13      	ldr	r3, [pc, #76]	@ (8004eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	00db      	lsls	r3, r3, #3
 8004e76:	4910      	ldr	r1, [pc, #64]	@ (8004eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004e7c:	f000 f824 	bl	8004ec8 <HAL_RCC_GetSysClockFreq>
 8004e80:	4602      	mov	r2, r0
 8004e82:	4b0d      	ldr	r3, [pc, #52]	@ (8004eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	091b      	lsrs	r3, r3, #4
 8004e88:	f003 030f 	and.w	r3, r3, #15
 8004e8c:	490b      	ldr	r1, [pc, #44]	@ (8004ebc <HAL_RCC_ClockConfig+0x1f4>)
 8004e8e:	5ccb      	ldrb	r3, [r1, r3]
 8004e90:	f003 031f 	and.w	r3, r3, #31
 8004e94:	fa22 f303 	lsr.w	r3, r2, r3
 8004e98:	4a09      	ldr	r2, [pc, #36]	@ (8004ec0 <HAL_RCC_ClockConfig+0x1f8>)
 8004e9a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004e9c:	4b09      	ldr	r3, [pc, #36]	@ (8004ec4 <HAL_RCC_ClockConfig+0x1fc>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f7fe f959 	bl	8003158 <HAL_InitTick>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	72fb      	strb	r3, [r7, #11]

  return status;
 8004eaa:	7afb      	ldrb	r3, [r7, #11]
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3710      	adds	r7, #16
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	40022000 	.word	0x40022000
 8004eb8:	40021000 	.word	0x40021000
 8004ebc:	0800cd00 	.word	0x0800cd00
 8004ec0:	20000014 	.word	0x20000014
 8004ec4:	20000018 	.word	0x20000018

08004ec8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b089      	sub	sp, #36	@ 0x24
 8004ecc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	61fb      	str	r3, [r7, #28]
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ed6:	4b3e      	ldr	r3, [pc, #248]	@ (8004fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	f003 030c 	and.w	r3, r3, #12
 8004ede:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ee0:	4b3b      	ldr	r3, [pc, #236]	@ (8004fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	f003 0303 	and.w	r3, r3, #3
 8004ee8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d005      	beq.n	8004efc <HAL_RCC_GetSysClockFreq+0x34>
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	2b0c      	cmp	r3, #12
 8004ef4:	d121      	bne.n	8004f3a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d11e      	bne.n	8004f3a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004efc:	4b34      	ldr	r3, [pc, #208]	@ (8004fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 0308 	and.w	r3, r3, #8
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d107      	bne.n	8004f18 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004f08:	4b31      	ldr	r3, [pc, #196]	@ (8004fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f0e:	0a1b      	lsrs	r3, r3, #8
 8004f10:	f003 030f 	and.w	r3, r3, #15
 8004f14:	61fb      	str	r3, [r7, #28]
 8004f16:	e005      	b.n	8004f24 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004f18:	4b2d      	ldr	r3, [pc, #180]	@ (8004fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	091b      	lsrs	r3, r3, #4
 8004f1e:	f003 030f 	and.w	r3, r3, #15
 8004f22:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004f24:	4a2b      	ldr	r2, [pc, #172]	@ (8004fd4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f2c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d10d      	bne.n	8004f50 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f38:	e00a      	b.n	8004f50 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	2b04      	cmp	r3, #4
 8004f3e:	d102      	bne.n	8004f46 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004f40:	4b25      	ldr	r3, [pc, #148]	@ (8004fd8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004f42:	61bb      	str	r3, [r7, #24]
 8004f44:	e004      	b.n	8004f50 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	2b08      	cmp	r3, #8
 8004f4a:	d101      	bne.n	8004f50 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004f4c:	4b23      	ldr	r3, [pc, #140]	@ (8004fdc <HAL_RCC_GetSysClockFreq+0x114>)
 8004f4e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	2b0c      	cmp	r3, #12
 8004f54:	d134      	bne.n	8004fc0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004f56:	4b1e      	ldr	r3, [pc, #120]	@ (8004fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	f003 0303 	and.w	r3, r3, #3
 8004f5e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d003      	beq.n	8004f6e <HAL_RCC_GetSysClockFreq+0xa6>
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	2b03      	cmp	r3, #3
 8004f6a:	d003      	beq.n	8004f74 <HAL_RCC_GetSysClockFreq+0xac>
 8004f6c:	e005      	b.n	8004f7a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004f6e:	4b1a      	ldr	r3, [pc, #104]	@ (8004fd8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004f70:	617b      	str	r3, [r7, #20]
      break;
 8004f72:	e005      	b.n	8004f80 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004f74:	4b19      	ldr	r3, [pc, #100]	@ (8004fdc <HAL_RCC_GetSysClockFreq+0x114>)
 8004f76:	617b      	str	r3, [r7, #20]
      break;
 8004f78:	e002      	b.n	8004f80 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	617b      	str	r3, [r7, #20]
      break;
 8004f7e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f80:	4b13      	ldr	r3, [pc, #76]	@ (8004fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	091b      	lsrs	r3, r3, #4
 8004f86:	f003 0307 	and.w	r3, r3, #7
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004f8e:	4b10      	ldr	r3, [pc, #64]	@ (8004fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	0a1b      	lsrs	r3, r3, #8
 8004f94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f98:	697a      	ldr	r2, [r7, #20]
 8004f9a:	fb03 f202 	mul.w	r2, r3, r2
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fa4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8004fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	0e5b      	lsrs	r3, r3, #25
 8004fac:	f003 0303 	and.w	r3, r3, #3
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	005b      	lsls	r3, r3, #1
 8004fb4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fbe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004fc0:	69bb      	ldr	r3, [r7, #24]
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3724      	adds	r7, #36	@ 0x24
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr
 8004fce:	bf00      	nop
 8004fd0:	40021000 	.word	0x40021000
 8004fd4:	0800cd18 	.word	0x0800cd18
 8004fd8:	00f42400 	.word	0x00f42400
 8004fdc:	007a1200 	.word	0x007a1200

08004fe0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fe4:	4b03      	ldr	r3, [pc, #12]	@ (8004ff4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	20000014 	.word	0x20000014

08004ff8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004ffc:	f7ff fff0 	bl	8004fe0 <HAL_RCC_GetHCLKFreq>
 8005000:	4602      	mov	r2, r0
 8005002:	4b06      	ldr	r3, [pc, #24]	@ (800501c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	0a1b      	lsrs	r3, r3, #8
 8005008:	f003 0307 	and.w	r3, r3, #7
 800500c:	4904      	ldr	r1, [pc, #16]	@ (8005020 <HAL_RCC_GetPCLK1Freq+0x28>)
 800500e:	5ccb      	ldrb	r3, [r1, r3]
 8005010:	f003 031f 	and.w	r3, r3, #31
 8005014:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005018:	4618      	mov	r0, r3
 800501a:	bd80      	pop	{r7, pc}
 800501c:	40021000 	.word	0x40021000
 8005020:	0800cd10 	.word	0x0800cd10

08005024 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005028:	f7ff ffda 	bl	8004fe0 <HAL_RCC_GetHCLKFreq>
 800502c:	4602      	mov	r2, r0
 800502e:	4b06      	ldr	r3, [pc, #24]	@ (8005048 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	0adb      	lsrs	r3, r3, #11
 8005034:	f003 0307 	and.w	r3, r3, #7
 8005038:	4904      	ldr	r1, [pc, #16]	@ (800504c <HAL_RCC_GetPCLK2Freq+0x28>)
 800503a:	5ccb      	ldrb	r3, [r1, r3]
 800503c:	f003 031f 	and.w	r3, r3, #31
 8005040:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005044:	4618      	mov	r0, r3
 8005046:	bd80      	pop	{r7, pc}
 8005048:	40021000 	.word	0x40021000
 800504c:	0800cd10 	.word	0x0800cd10

08005050 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b086      	sub	sp, #24
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005058:	2300      	movs	r3, #0
 800505a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800505c:	4b2a      	ldr	r3, [pc, #168]	@ (8005108 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800505e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005060:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005064:	2b00      	cmp	r3, #0
 8005066:	d003      	beq.n	8005070 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005068:	f7ff f9ee 	bl	8004448 <HAL_PWREx_GetVoltageRange>
 800506c:	6178      	str	r0, [r7, #20]
 800506e:	e014      	b.n	800509a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005070:	4b25      	ldr	r3, [pc, #148]	@ (8005108 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005072:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005074:	4a24      	ldr	r2, [pc, #144]	@ (8005108 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005076:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800507a:	6593      	str	r3, [r2, #88]	@ 0x58
 800507c:	4b22      	ldr	r3, [pc, #136]	@ (8005108 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800507e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005080:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005084:	60fb      	str	r3, [r7, #12]
 8005086:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005088:	f7ff f9de 	bl	8004448 <HAL_PWREx_GetVoltageRange>
 800508c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800508e:	4b1e      	ldr	r3, [pc, #120]	@ (8005108 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005092:	4a1d      	ldr	r2, [pc, #116]	@ (8005108 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005094:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005098:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050a0:	d10b      	bne.n	80050ba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2b80      	cmp	r3, #128	@ 0x80
 80050a6:	d919      	bls.n	80050dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2ba0      	cmp	r3, #160	@ 0xa0
 80050ac:	d902      	bls.n	80050b4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80050ae:	2302      	movs	r3, #2
 80050b0:	613b      	str	r3, [r7, #16]
 80050b2:	e013      	b.n	80050dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80050b4:	2301      	movs	r3, #1
 80050b6:	613b      	str	r3, [r7, #16]
 80050b8:	e010      	b.n	80050dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2b80      	cmp	r3, #128	@ 0x80
 80050be:	d902      	bls.n	80050c6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80050c0:	2303      	movs	r3, #3
 80050c2:	613b      	str	r3, [r7, #16]
 80050c4:	e00a      	b.n	80050dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2b80      	cmp	r3, #128	@ 0x80
 80050ca:	d102      	bne.n	80050d2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80050cc:	2302      	movs	r3, #2
 80050ce:	613b      	str	r3, [r7, #16]
 80050d0:	e004      	b.n	80050dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2b70      	cmp	r3, #112	@ 0x70
 80050d6:	d101      	bne.n	80050dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80050d8:	2301      	movs	r3, #1
 80050da:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80050dc:	4b0b      	ldr	r3, [pc, #44]	@ (800510c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f023 0207 	bic.w	r2, r3, #7
 80050e4:	4909      	ldr	r1, [pc, #36]	@ (800510c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80050ec:	4b07      	ldr	r3, [pc, #28]	@ (800510c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0307 	and.w	r3, r3, #7
 80050f4:	693a      	ldr	r2, [r7, #16]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d001      	beq.n	80050fe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e000      	b.n	8005100 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80050fe:	2300      	movs	r3, #0
}
 8005100:	4618      	mov	r0, r3
 8005102:	3718      	adds	r7, #24
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}
 8005108:	40021000 	.word	0x40021000
 800510c:	40022000 	.word	0x40022000

08005110 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b086      	sub	sp, #24
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005118:	2300      	movs	r3, #0
 800511a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800511c:	2300      	movs	r3, #0
 800511e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005128:	2b00      	cmp	r3, #0
 800512a:	d041      	beq.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005130:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005134:	d02a      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005136:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800513a:	d824      	bhi.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800513c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005140:	d008      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005142:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005146:	d81e      	bhi.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005148:	2b00      	cmp	r3, #0
 800514a:	d00a      	beq.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800514c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005150:	d010      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005152:	e018      	b.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005154:	4b86      	ldr	r3, [pc, #536]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	4a85      	ldr	r2, [pc, #532]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800515a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800515e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005160:	e015      	b.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	3304      	adds	r3, #4
 8005166:	2100      	movs	r1, #0
 8005168:	4618      	mov	r0, r3
 800516a:	f000 fabb 	bl	80056e4 <RCCEx_PLLSAI1_Config>
 800516e:	4603      	mov	r3, r0
 8005170:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005172:	e00c      	b.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	3320      	adds	r3, #32
 8005178:	2100      	movs	r1, #0
 800517a:	4618      	mov	r0, r3
 800517c:	f000 fba6 	bl	80058cc <RCCEx_PLLSAI2_Config>
 8005180:	4603      	mov	r3, r0
 8005182:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005184:	e003      	b.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	74fb      	strb	r3, [r7, #19]
      break;
 800518a:	e000      	b.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800518c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800518e:	7cfb      	ldrb	r3, [r7, #19]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d10b      	bne.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005194:	4b76      	ldr	r3, [pc, #472]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005196:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800519a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80051a2:	4973      	ldr	r1, [pc, #460]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051a4:	4313      	orrs	r3, r2
 80051a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80051aa:	e001      	b.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051ac:	7cfb      	ldrb	r3, [r7, #19]
 80051ae:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d041      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80051c0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80051c4:	d02a      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80051c6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80051ca:	d824      	bhi.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80051cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80051d0:	d008      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80051d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80051d6:	d81e      	bhi.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d00a      	beq.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80051dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80051e0:	d010      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80051e2:	e018      	b.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80051e4:	4b62      	ldr	r3, [pc, #392]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	4a61      	ldr	r2, [pc, #388]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051ee:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80051f0:	e015      	b.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	3304      	adds	r3, #4
 80051f6:	2100      	movs	r1, #0
 80051f8:	4618      	mov	r0, r3
 80051fa:	f000 fa73 	bl	80056e4 <RCCEx_PLLSAI1_Config>
 80051fe:	4603      	mov	r3, r0
 8005200:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005202:	e00c      	b.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	3320      	adds	r3, #32
 8005208:	2100      	movs	r1, #0
 800520a:	4618      	mov	r0, r3
 800520c:	f000 fb5e 	bl	80058cc <RCCEx_PLLSAI2_Config>
 8005210:	4603      	mov	r3, r0
 8005212:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005214:	e003      	b.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	74fb      	strb	r3, [r7, #19]
      break;
 800521a:	e000      	b.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800521c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800521e:	7cfb      	ldrb	r3, [r7, #19]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d10b      	bne.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005224:	4b52      	ldr	r3, [pc, #328]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005226:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800522a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005232:	494f      	ldr	r1, [pc, #316]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005234:	4313      	orrs	r3, r2
 8005236:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800523a:	e001      	b.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800523c:	7cfb      	ldrb	r3, [r7, #19]
 800523e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005248:	2b00      	cmp	r3, #0
 800524a:	f000 80a0 	beq.w	800538e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800524e:	2300      	movs	r3, #0
 8005250:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005252:	4b47      	ldr	r3, [pc, #284]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005254:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005256:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800525a:	2b00      	cmp	r3, #0
 800525c:	d101      	bne.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800525e:	2301      	movs	r3, #1
 8005260:	e000      	b.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005262:	2300      	movs	r3, #0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d00d      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005268:	4b41      	ldr	r3, [pc, #260]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800526a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800526c:	4a40      	ldr	r2, [pc, #256]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800526e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005272:	6593      	str	r3, [r2, #88]	@ 0x58
 8005274:	4b3e      	ldr	r3, [pc, #248]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005276:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005278:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800527c:	60bb      	str	r3, [r7, #8]
 800527e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005280:	2301      	movs	r3, #1
 8005282:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005284:	4b3b      	ldr	r3, [pc, #236]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a3a      	ldr	r2, [pc, #232]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800528a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800528e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005290:	f7fd ffb2 	bl	80031f8 <HAL_GetTick>
 8005294:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005296:	e009      	b.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005298:	f7fd ffae 	bl	80031f8 <HAL_GetTick>
 800529c:	4602      	mov	r2, r0
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	2b02      	cmp	r3, #2
 80052a4:	d902      	bls.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	74fb      	strb	r3, [r7, #19]
        break;
 80052aa:	e005      	b.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80052ac:	4b31      	ldr	r3, [pc, #196]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d0ef      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80052b8:	7cfb      	ldrb	r3, [r7, #19]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d15c      	bne.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80052be:	4b2c      	ldr	r3, [pc, #176]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052c8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d01f      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80052d6:	697a      	ldr	r2, [r7, #20]
 80052d8:	429a      	cmp	r2, r3
 80052da:	d019      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80052dc:	4b24      	ldr	r3, [pc, #144]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052e6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80052e8:	4b21      	ldr	r3, [pc, #132]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052ee:	4a20      	ldr	r2, [pc, #128]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80052f8:	4b1d      	ldr	r3, [pc, #116]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052fe:	4a1c      	ldr	r2, [pc, #112]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005300:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005304:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005308:	4a19      	ldr	r2, [pc, #100]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	f003 0301 	and.w	r3, r3, #1
 8005316:	2b00      	cmp	r3, #0
 8005318:	d016      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800531a:	f7fd ff6d 	bl	80031f8 <HAL_GetTick>
 800531e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005320:	e00b      	b.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005322:	f7fd ff69 	bl	80031f8 <HAL_GetTick>
 8005326:	4602      	mov	r2, r0
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005330:	4293      	cmp	r3, r2
 8005332:	d902      	bls.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005334:	2303      	movs	r3, #3
 8005336:	74fb      	strb	r3, [r7, #19]
            break;
 8005338:	e006      	b.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800533a:	4b0d      	ldr	r3, [pc, #52]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800533c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005340:	f003 0302 	and.w	r3, r3, #2
 8005344:	2b00      	cmp	r3, #0
 8005346:	d0ec      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005348:	7cfb      	ldrb	r3, [r7, #19]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d10c      	bne.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800534e:	4b08      	ldr	r3, [pc, #32]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005350:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005354:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800535e:	4904      	ldr	r1, [pc, #16]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005360:	4313      	orrs	r3, r2
 8005362:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005366:	e009      	b.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005368:	7cfb      	ldrb	r3, [r7, #19]
 800536a:	74bb      	strb	r3, [r7, #18]
 800536c:	e006      	b.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800536e:	bf00      	nop
 8005370:	40021000 	.word	0x40021000
 8005374:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005378:	7cfb      	ldrb	r3, [r7, #19]
 800537a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800537c:	7c7b      	ldrb	r3, [r7, #17]
 800537e:	2b01      	cmp	r3, #1
 8005380:	d105      	bne.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005382:	4b9e      	ldr	r3, [pc, #632]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005384:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005386:	4a9d      	ldr	r2, [pc, #628]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005388:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800538c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 0301 	and.w	r3, r3, #1
 8005396:	2b00      	cmp	r3, #0
 8005398:	d00a      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800539a:	4b98      	ldr	r3, [pc, #608]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800539c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053a0:	f023 0203 	bic.w	r2, r3, #3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053a8:	4994      	ldr	r1, [pc, #592]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053aa:	4313      	orrs	r3, r2
 80053ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 0302 	and.w	r3, r3, #2
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d00a      	beq.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80053bc:	4b8f      	ldr	r3, [pc, #572]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053c2:	f023 020c 	bic.w	r2, r3, #12
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053ca:	498c      	ldr	r1, [pc, #560]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053cc:	4313      	orrs	r3, r2
 80053ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 0304 	and.w	r3, r3, #4
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00a      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80053de:	4b87      	ldr	r3, [pc, #540]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053e4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ec:	4983      	ldr	r1, [pc, #524]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053ee:	4313      	orrs	r3, r2
 80053f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 0308 	and.w	r3, r3, #8
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d00a      	beq.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005400:	4b7e      	ldr	r3, [pc, #504]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005402:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005406:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800540e:	497b      	ldr	r1, [pc, #492]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005410:	4313      	orrs	r3, r2
 8005412:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 0310 	and.w	r3, r3, #16
 800541e:	2b00      	cmp	r3, #0
 8005420:	d00a      	beq.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005422:	4b76      	ldr	r3, [pc, #472]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005424:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005428:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005430:	4972      	ldr	r1, [pc, #456]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005432:	4313      	orrs	r3, r2
 8005434:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 0320 	and.w	r3, r3, #32
 8005440:	2b00      	cmp	r3, #0
 8005442:	d00a      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005444:	4b6d      	ldr	r3, [pc, #436]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005446:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800544a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005452:	496a      	ldr	r1, [pc, #424]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005454:	4313      	orrs	r3, r2
 8005456:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00a      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005466:	4b65      	ldr	r3, [pc, #404]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005468:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800546c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005474:	4961      	ldr	r1, [pc, #388]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005476:	4313      	orrs	r3, r2
 8005478:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005484:	2b00      	cmp	r3, #0
 8005486:	d00a      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005488:	4b5c      	ldr	r3, [pc, #368]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800548a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800548e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005496:	4959      	ldr	r1, [pc, #356]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005498:	4313      	orrs	r3, r2
 800549a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d00a      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80054aa:	4b54      	ldr	r3, [pc, #336]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054b0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054b8:	4950      	ldr	r1, [pc, #320]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054ba:	4313      	orrs	r3, r2
 80054bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d00a      	beq.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80054cc:	4b4b      	ldr	r3, [pc, #300]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054d2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054da:	4948      	ldr	r1, [pc, #288]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054dc:	4313      	orrs	r3, r2
 80054de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00a      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80054ee:	4b43      	ldr	r3, [pc, #268]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054f4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054fc:	493f      	ldr	r1, [pc, #252]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054fe:	4313      	orrs	r3, r2
 8005500:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800550c:	2b00      	cmp	r3, #0
 800550e:	d028      	beq.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005510:	4b3a      	ldr	r3, [pc, #232]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005512:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005516:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800551e:	4937      	ldr	r1, [pc, #220]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005520:	4313      	orrs	r3, r2
 8005522:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800552a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800552e:	d106      	bne.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005530:	4b32      	ldr	r3, [pc, #200]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	4a31      	ldr	r2, [pc, #196]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005536:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800553a:	60d3      	str	r3, [r2, #12]
 800553c:	e011      	b.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005542:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005546:	d10c      	bne.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	3304      	adds	r3, #4
 800554c:	2101      	movs	r1, #1
 800554e:	4618      	mov	r0, r3
 8005550:	f000 f8c8 	bl	80056e4 <RCCEx_PLLSAI1_Config>
 8005554:	4603      	mov	r3, r0
 8005556:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005558:	7cfb      	ldrb	r3, [r7, #19]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d001      	beq.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800555e:	7cfb      	ldrb	r3, [r7, #19]
 8005560:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800556a:	2b00      	cmp	r3, #0
 800556c:	d028      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800556e:	4b23      	ldr	r3, [pc, #140]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005570:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005574:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800557c:	491f      	ldr	r1, [pc, #124]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800557e:	4313      	orrs	r3, r2
 8005580:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005588:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800558c:	d106      	bne.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800558e:	4b1b      	ldr	r3, [pc, #108]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	4a1a      	ldr	r2, [pc, #104]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005594:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005598:	60d3      	str	r3, [r2, #12]
 800559a:	e011      	b.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80055a4:	d10c      	bne.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	3304      	adds	r3, #4
 80055aa:	2101      	movs	r1, #1
 80055ac:	4618      	mov	r0, r3
 80055ae:	f000 f899 	bl	80056e4 <RCCEx_PLLSAI1_Config>
 80055b2:	4603      	mov	r3, r0
 80055b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80055b6:	7cfb      	ldrb	r3, [r7, #19]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d001      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80055bc:	7cfb      	ldrb	r3, [r7, #19]
 80055be:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d02b      	beq.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80055cc:	4b0b      	ldr	r3, [pc, #44]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055d2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055da:	4908      	ldr	r1, [pc, #32]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055dc:	4313      	orrs	r3, r2
 80055de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80055ea:	d109      	bne.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055ec:	4b03      	ldr	r3, [pc, #12]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	4a02      	ldr	r2, [pc, #8]	@ (80055fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80055f6:	60d3      	str	r3, [r2, #12]
 80055f8:	e014      	b.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80055fa:	bf00      	nop
 80055fc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005604:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005608:	d10c      	bne.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	3304      	adds	r3, #4
 800560e:	2101      	movs	r1, #1
 8005610:	4618      	mov	r0, r3
 8005612:	f000 f867 	bl	80056e4 <RCCEx_PLLSAI1_Config>
 8005616:	4603      	mov	r3, r0
 8005618:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800561a:	7cfb      	ldrb	r3, [r7, #19]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d001      	beq.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005620:	7cfb      	ldrb	r3, [r7, #19]
 8005622:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800562c:	2b00      	cmp	r3, #0
 800562e:	d02f      	beq.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005630:	4b2b      	ldr	r3, [pc, #172]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005632:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005636:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800563e:	4928      	ldr	r1, [pc, #160]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005640:	4313      	orrs	r3, r2
 8005642:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800564a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800564e:	d10d      	bne.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	3304      	adds	r3, #4
 8005654:	2102      	movs	r1, #2
 8005656:	4618      	mov	r0, r3
 8005658:	f000 f844 	bl	80056e4 <RCCEx_PLLSAI1_Config>
 800565c:	4603      	mov	r3, r0
 800565e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005660:	7cfb      	ldrb	r3, [r7, #19]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d014      	beq.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005666:	7cfb      	ldrb	r3, [r7, #19]
 8005668:	74bb      	strb	r3, [r7, #18]
 800566a:	e011      	b.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005670:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005674:	d10c      	bne.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	3320      	adds	r3, #32
 800567a:	2102      	movs	r1, #2
 800567c:	4618      	mov	r0, r3
 800567e:	f000 f925 	bl	80058cc <RCCEx_PLLSAI2_Config>
 8005682:	4603      	mov	r3, r0
 8005684:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005686:	7cfb      	ldrb	r3, [r7, #19]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d001      	beq.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800568c:	7cfb      	ldrb	r3, [r7, #19]
 800568e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005698:	2b00      	cmp	r3, #0
 800569a:	d00a      	beq.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800569c:	4b10      	ldr	r3, [pc, #64]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800569e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056a2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80056aa:	490d      	ldr	r1, [pc, #52]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80056ac:	4313      	orrs	r3, r2
 80056ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d00b      	beq.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80056be:	4b08      	ldr	r3, [pc, #32]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80056c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056c4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056ce:	4904      	ldr	r1, [pc, #16]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80056d0:	4313      	orrs	r3, r2
 80056d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80056d6:	7cbb      	ldrb	r3, [r7, #18]
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3718      	adds	r7, #24
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}
 80056e0:	40021000 	.word	0x40021000

080056e4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b084      	sub	sp, #16
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056ee:	2300      	movs	r3, #0
 80056f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80056f2:	4b75      	ldr	r3, [pc, #468]	@ (80058c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	f003 0303 	and.w	r3, r3, #3
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d018      	beq.n	8005730 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80056fe:	4b72      	ldr	r3, [pc, #456]	@ (80058c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	f003 0203 	and.w	r2, r3, #3
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	429a      	cmp	r2, r3
 800570c:	d10d      	bne.n	800572a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
       ||
 8005712:	2b00      	cmp	r3, #0
 8005714:	d009      	beq.n	800572a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005716:	4b6c      	ldr	r3, [pc, #432]	@ (80058c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	091b      	lsrs	r3, r3, #4
 800571c:	f003 0307 	and.w	r3, r3, #7
 8005720:	1c5a      	adds	r2, r3, #1
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	685b      	ldr	r3, [r3, #4]
       ||
 8005726:	429a      	cmp	r2, r3
 8005728:	d047      	beq.n	80057ba <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	73fb      	strb	r3, [r7, #15]
 800572e:	e044      	b.n	80057ba <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2b03      	cmp	r3, #3
 8005736:	d018      	beq.n	800576a <RCCEx_PLLSAI1_Config+0x86>
 8005738:	2b03      	cmp	r3, #3
 800573a:	d825      	bhi.n	8005788 <RCCEx_PLLSAI1_Config+0xa4>
 800573c:	2b01      	cmp	r3, #1
 800573e:	d002      	beq.n	8005746 <RCCEx_PLLSAI1_Config+0x62>
 8005740:	2b02      	cmp	r3, #2
 8005742:	d009      	beq.n	8005758 <RCCEx_PLLSAI1_Config+0x74>
 8005744:	e020      	b.n	8005788 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005746:	4b60      	ldr	r3, [pc, #384]	@ (80058c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 0302 	and.w	r3, r3, #2
 800574e:	2b00      	cmp	r3, #0
 8005750:	d11d      	bne.n	800578e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005756:	e01a      	b.n	800578e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005758:	4b5b      	ldr	r3, [pc, #364]	@ (80058c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005760:	2b00      	cmp	r3, #0
 8005762:	d116      	bne.n	8005792 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005768:	e013      	b.n	8005792 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800576a:	4b57      	ldr	r3, [pc, #348]	@ (80058c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005772:	2b00      	cmp	r3, #0
 8005774:	d10f      	bne.n	8005796 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005776:	4b54      	ldr	r3, [pc, #336]	@ (80058c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800577e:	2b00      	cmp	r3, #0
 8005780:	d109      	bne.n	8005796 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005786:	e006      	b.n	8005796 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	73fb      	strb	r3, [r7, #15]
      break;
 800578c:	e004      	b.n	8005798 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800578e:	bf00      	nop
 8005790:	e002      	b.n	8005798 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005792:	bf00      	nop
 8005794:	e000      	b.n	8005798 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005796:	bf00      	nop
    }

    if(status == HAL_OK)
 8005798:	7bfb      	ldrb	r3, [r7, #15]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d10d      	bne.n	80057ba <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800579e:	4b4a      	ldr	r3, [pc, #296]	@ (80058c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6819      	ldr	r1, [r3, #0]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	3b01      	subs	r3, #1
 80057b0:	011b      	lsls	r3, r3, #4
 80057b2:	430b      	orrs	r3, r1
 80057b4:	4944      	ldr	r1, [pc, #272]	@ (80058c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057b6:	4313      	orrs	r3, r2
 80057b8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80057ba:	7bfb      	ldrb	r3, [r7, #15]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d17d      	bne.n	80058bc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80057c0:	4b41      	ldr	r3, [pc, #260]	@ (80058c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a40      	ldr	r2, [pc, #256]	@ (80058c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057c6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80057ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057cc:	f7fd fd14 	bl	80031f8 <HAL_GetTick>
 80057d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80057d2:	e009      	b.n	80057e8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80057d4:	f7fd fd10 	bl	80031f8 <HAL_GetTick>
 80057d8:	4602      	mov	r2, r0
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	2b02      	cmp	r3, #2
 80057e0:	d902      	bls.n	80057e8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80057e2:	2303      	movs	r3, #3
 80057e4:	73fb      	strb	r3, [r7, #15]
        break;
 80057e6:	e005      	b.n	80057f4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80057e8:	4b37      	ldr	r3, [pc, #220]	@ (80058c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d1ef      	bne.n	80057d4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80057f4:	7bfb      	ldrb	r3, [r7, #15]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d160      	bne.n	80058bc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d111      	bne.n	8005824 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005800:	4b31      	ldr	r3, [pc, #196]	@ (80058c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005802:	691b      	ldr	r3, [r3, #16]
 8005804:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005808:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	6892      	ldr	r2, [r2, #8]
 8005810:	0211      	lsls	r1, r2, #8
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	68d2      	ldr	r2, [r2, #12]
 8005816:	0912      	lsrs	r2, r2, #4
 8005818:	0452      	lsls	r2, r2, #17
 800581a:	430a      	orrs	r2, r1
 800581c:	492a      	ldr	r1, [pc, #168]	@ (80058c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800581e:	4313      	orrs	r3, r2
 8005820:	610b      	str	r3, [r1, #16]
 8005822:	e027      	b.n	8005874 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	2b01      	cmp	r3, #1
 8005828:	d112      	bne.n	8005850 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800582a:	4b27      	ldr	r3, [pc, #156]	@ (80058c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005832:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	6892      	ldr	r2, [r2, #8]
 800583a:	0211      	lsls	r1, r2, #8
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	6912      	ldr	r2, [r2, #16]
 8005840:	0852      	lsrs	r2, r2, #1
 8005842:	3a01      	subs	r2, #1
 8005844:	0552      	lsls	r2, r2, #21
 8005846:	430a      	orrs	r2, r1
 8005848:	491f      	ldr	r1, [pc, #124]	@ (80058c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800584a:	4313      	orrs	r3, r2
 800584c:	610b      	str	r3, [r1, #16]
 800584e:	e011      	b.n	8005874 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005850:	4b1d      	ldr	r3, [pc, #116]	@ (80058c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005852:	691b      	ldr	r3, [r3, #16]
 8005854:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005858:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	6892      	ldr	r2, [r2, #8]
 8005860:	0211      	lsls	r1, r2, #8
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	6952      	ldr	r2, [r2, #20]
 8005866:	0852      	lsrs	r2, r2, #1
 8005868:	3a01      	subs	r2, #1
 800586a:	0652      	lsls	r2, r2, #25
 800586c:	430a      	orrs	r2, r1
 800586e:	4916      	ldr	r1, [pc, #88]	@ (80058c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005870:	4313      	orrs	r3, r2
 8005872:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005874:	4b14      	ldr	r3, [pc, #80]	@ (80058c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a13      	ldr	r2, [pc, #76]	@ (80058c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800587a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800587e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005880:	f7fd fcba 	bl	80031f8 <HAL_GetTick>
 8005884:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005886:	e009      	b.n	800589c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005888:	f7fd fcb6 	bl	80031f8 <HAL_GetTick>
 800588c:	4602      	mov	r2, r0
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	1ad3      	subs	r3, r2, r3
 8005892:	2b02      	cmp	r3, #2
 8005894:	d902      	bls.n	800589c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005896:	2303      	movs	r3, #3
 8005898:	73fb      	strb	r3, [r7, #15]
          break;
 800589a:	e005      	b.n	80058a8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800589c:	4b0a      	ldr	r3, [pc, #40]	@ (80058c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d0ef      	beq.n	8005888 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80058a8:	7bfb      	ldrb	r3, [r7, #15]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d106      	bne.n	80058bc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80058ae:	4b06      	ldr	r3, [pc, #24]	@ (80058c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058b0:	691a      	ldr	r2, [r3, #16]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	699b      	ldr	r3, [r3, #24]
 80058b6:	4904      	ldr	r1, [pc, #16]	@ (80058c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058b8:	4313      	orrs	r3, r2
 80058ba:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80058bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3710      	adds	r7, #16
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	40021000 	.word	0x40021000

080058cc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80058d6:	2300      	movs	r3, #0
 80058d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80058da:	4b6a      	ldr	r3, [pc, #424]	@ (8005a84 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	f003 0303 	and.w	r3, r3, #3
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d018      	beq.n	8005918 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80058e6:	4b67      	ldr	r3, [pc, #412]	@ (8005a84 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	f003 0203 	and.w	r2, r3, #3
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d10d      	bne.n	8005912 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
       ||
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d009      	beq.n	8005912 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80058fe:	4b61      	ldr	r3, [pc, #388]	@ (8005a84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	091b      	lsrs	r3, r3, #4
 8005904:	f003 0307 	and.w	r3, r3, #7
 8005908:	1c5a      	adds	r2, r3, #1
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	685b      	ldr	r3, [r3, #4]
       ||
 800590e:	429a      	cmp	r2, r3
 8005910:	d047      	beq.n	80059a2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	73fb      	strb	r3, [r7, #15]
 8005916:	e044      	b.n	80059a2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	2b03      	cmp	r3, #3
 800591e:	d018      	beq.n	8005952 <RCCEx_PLLSAI2_Config+0x86>
 8005920:	2b03      	cmp	r3, #3
 8005922:	d825      	bhi.n	8005970 <RCCEx_PLLSAI2_Config+0xa4>
 8005924:	2b01      	cmp	r3, #1
 8005926:	d002      	beq.n	800592e <RCCEx_PLLSAI2_Config+0x62>
 8005928:	2b02      	cmp	r3, #2
 800592a:	d009      	beq.n	8005940 <RCCEx_PLLSAI2_Config+0x74>
 800592c:	e020      	b.n	8005970 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800592e:	4b55      	ldr	r3, [pc, #340]	@ (8005a84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 0302 	and.w	r3, r3, #2
 8005936:	2b00      	cmp	r3, #0
 8005938:	d11d      	bne.n	8005976 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800593e:	e01a      	b.n	8005976 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005940:	4b50      	ldr	r3, [pc, #320]	@ (8005a84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005948:	2b00      	cmp	r3, #0
 800594a:	d116      	bne.n	800597a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005950:	e013      	b.n	800597a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005952:	4b4c      	ldr	r3, [pc, #304]	@ (8005a84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800595a:	2b00      	cmp	r3, #0
 800595c:	d10f      	bne.n	800597e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800595e:	4b49      	ldr	r3, [pc, #292]	@ (8005a84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005966:	2b00      	cmp	r3, #0
 8005968:	d109      	bne.n	800597e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800596e:	e006      	b.n	800597e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	73fb      	strb	r3, [r7, #15]
      break;
 8005974:	e004      	b.n	8005980 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005976:	bf00      	nop
 8005978:	e002      	b.n	8005980 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800597a:	bf00      	nop
 800597c:	e000      	b.n	8005980 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800597e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005980:	7bfb      	ldrb	r3, [r7, #15]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d10d      	bne.n	80059a2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005986:	4b3f      	ldr	r3, [pc, #252]	@ (8005a84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6819      	ldr	r1, [r3, #0]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	3b01      	subs	r3, #1
 8005998:	011b      	lsls	r3, r3, #4
 800599a:	430b      	orrs	r3, r1
 800599c:	4939      	ldr	r1, [pc, #228]	@ (8005a84 <RCCEx_PLLSAI2_Config+0x1b8>)
 800599e:	4313      	orrs	r3, r2
 80059a0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80059a2:	7bfb      	ldrb	r3, [r7, #15]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d167      	bne.n	8005a78 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80059a8:	4b36      	ldr	r3, [pc, #216]	@ (8005a84 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a35      	ldr	r2, [pc, #212]	@ (8005a84 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80059b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059b4:	f7fd fc20 	bl	80031f8 <HAL_GetTick>
 80059b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80059ba:	e009      	b.n	80059d0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80059bc:	f7fd fc1c 	bl	80031f8 <HAL_GetTick>
 80059c0:	4602      	mov	r2, r0
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	d902      	bls.n	80059d0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	73fb      	strb	r3, [r7, #15]
        break;
 80059ce:	e005      	b.n	80059dc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80059d0:	4b2c      	ldr	r3, [pc, #176]	@ (8005a84 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d1ef      	bne.n	80059bc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80059dc:	7bfb      	ldrb	r3, [r7, #15]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d14a      	bne.n	8005a78 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d111      	bne.n	8005a0c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80059e8:	4b26      	ldr	r3, [pc, #152]	@ (8005a84 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059ea:	695b      	ldr	r3, [r3, #20]
 80059ec:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80059f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	6892      	ldr	r2, [r2, #8]
 80059f8:	0211      	lsls	r1, r2, #8
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	68d2      	ldr	r2, [r2, #12]
 80059fe:	0912      	lsrs	r2, r2, #4
 8005a00:	0452      	lsls	r2, r2, #17
 8005a02:	430a      	orrs	r2, r1
 8005a04:	491f      	ldr	r1, [pc, #124]	@ (8005a84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a06:	4313      	orrs	r3, r2
 8005a08:	614b      	str	r3, [r1, #20]
 8005a0a:	e011      	b.n	8005a30 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005a0c:	4b1d      	ldr	r3, [pc, #116]	@ (8005a84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a0e:	695b      	ldr	r3, [r3, #20]
 8005a10:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005a14:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	6892      	ldr	r2, [r2, #8]
 8005a1c:	0211      	lsls	r1, r2, #8
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	6912      	ldr	r2, [r2, #16]
 8005a22:	0852      	lsrs	r2, r2, #1
 8005a24:	3a01      	subs	r2, #1
 8005a26:	0652      	lsls	r2, r2, #25
 8005a28:	430a      	orrs	r2, r1
 8005a2a:	4916      	ldr	r1, [pc, #88]	@ (8005a84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005a30:	4b14      	ldr	r3, [pc, #80]	@ (8005a84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a13      	ldr	r2, [pc, #76]	@ (8005a84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a3a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a3c:	f7fd fbdc 	bl	80031f8 <HAL_GetTick>
 8005a40:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005a42:	e009      	b.n	8005a58 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005a44:	f7fd fbd8 	bl	80031f8 <HAL_GetTick>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	d902      	bls.n	8005a58 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005a52:	2303      	movs	r3, #3
 8005a54:	73fb      	strb	r3, [r7, #15]
          break;
 8005a56:	e005      	b.n	8005a64 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005a58:	4b0a      	ldr	r3, [pc, #40]	@ (8005a84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d0ef      	beq.n	8005a44 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005a64:	7bfb      	ldrb	r3, [r7, #15]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d106      	bne.n	8005a78 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005a6a:	4b06      	ldr	r3, [pc, #24]	@ (8005a84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a6c:	695a      	ldr	r2, [r3, #20]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	695b      	ldr	r3, [r3, #20]
 8005a72:	4904      	ldr	r1, [pc, #16]	@ (8005a84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a74:	4313      	orrs	r3, r2
 8005a76:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3710      	adds	r7, #16
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop
 8005a84:	40021000 	.word	0x40021000

08005a88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b082      	sub	sp, #8
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d101      	bne.n	8005a9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	e049      	b.n	8005b2e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d106      	bne.n	8005ab4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f7fd f856 	bl	8002b60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2202      	movs	r2, #2
 8005ab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	3304      	adds	r3, #4
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	4610      	mov	r0, r2
 8005ac8:	f000 ff78 	bl	80069bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3708      	adds	r7, #8
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}

08005b36 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005b36:	b580      	push	{r7, lr}
 8005b38:	b082      	sub	sp, #8
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d101      	bne.n	8005b48 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e049      	b.n	8005bdc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d106      	bne.n	8005b62 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f000 f841 	bl	8005be4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2202      	movs	r2, #2
 8005b66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	3304      	adds	r3, #4
 8005b72:	4619      	mov	r1, r3
 8005b74:	4610      	mov	r0, r2
 8005b76:	f000 ff21 	bl	80069bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2201      	movs	r2, #1
 8005b86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2201      	movs	r2, #1
 8005b96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2201      	movs	r2, #1
 8005bae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2201      	movs	r2, #1
 8005bce:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005bda:	2300      	movs	r3, #0
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3708      	adds	r7, #8
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b083      	sub	sp, #12
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005bec:	bf00      	nop
 8005bee:	370c      	adds	r7, #12
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b084      	sub	sp, #16
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d109      	bne.n	8005c1c <HAL_TIM_PWM_Start+0x24>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	bf14      	ite	ne
 8005c14:	2301      	movne	r3, #1
 8005c16:	2300      	moveq	r3, #0
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	e03c      	b.n	8005c96 <HAL_TIM_PWM_Start+0x9e>
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	2b04      	cmp	r3, #4
 8005c20:	d109      	bne.n	8005c36 <HAL_TIM_PWM_Start+0x3e>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	bf14      	ite	ne
 8005c2e:	2301      	movne	r3, #1
 8005c30:	2300      	moveq	r3, #0
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	e02f      	b.n	8005c96 <HAL_TIM_PWM_Start+0x9e>
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	2b08      	cmp	r3, #8
 8005c3a:	d109      	bne.n	8005c50 <HAL_TIM_PWM_Start+0x58>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	bf14      	ite	ne
 8005c48:	2301      	movne	r3, #1
 8005c4a:	2300      	moveq	r3, #0
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	e022      	b.n	8005c96 <HAL_TIM_PWM_Start+0x9e>
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	2b0c      	cmp	r3, #12
 8005c54:	d109      	bne.n	8005c6a <HAL_TIM_PWM_Start+0x72>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	bf14      	ite	ne
 8005c62:	2301      	movne	r3, #1
 8005c64:	2300      	moveq	r3, #0
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	e015      	b.n	8005c96 <HAL_TIM_PWM_Start+0x9e>
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	2b10      	cmp	r3, #16
 8005c6e:	d109      	bne.n	8005c84 <HAL_TIM_PWM_Start+0x8c>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	bf14      	ite	ne
 8005c7c:	2301      	movne	r3, #1
 8005c7e:	2300      	moveq	r3, #0
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	e008      	b.n	8005c96 <HAL_TIM_PWM_Start+0x9e>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	bf14      	ite	ne
 8005c90:	2301      	movne	r3, #1
 8005c92:	2300      	moveq	r3, #0
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d001      	beq.n	8005c9e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e09c      	b.n	8005dd8 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d104      	bne.n	8005cae <HAL_TIM_PWM_Start+0xb6>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2202      	movs	r2, #2
 8005ca8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005cac:	e023      	b.n	8005cf6 <HAL_TIM_PWM_Start+0xfe>
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	2b04      	cmp	r3, #4
 8005cb2:	d104      	bne.n	8005cbe <HAL_TIM_PWM_Start+0xc6>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2202      	movs	r2, #2
 8005cb8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005cbc:	e01b      	b.n	8005cf6 <HAL_TIM_PWM_Start+0xfe>
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	2b08      	cmp	r3, #8
 8005cc2:	d104      	bne.n	8005cce <HAL_TIM_PWM_Start+0xd6>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2202      	movs	r2, #2
 8005cc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ccc:	e013      	b.n	8005cf6 <HAL_TIM_PWM_Start+0xfe>
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	2b0c      	cmp	r3, #12
 8005cd2:	d104      	bne.n	8005cde <HAL_TIM_PWM_Start+0xe6>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2202      	movs	r2, #2
 8005cd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005cdc:	e00b      	b.n	8005cf6 <HAL_TIM_PWM_Start+0xfe>
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	2b10      	cmp	r3, #16
 8005ce2:	d104      	bne.n	8005cee <HAL_TIM_PWM_Start+0xf6>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2202      	movs	r2, #2
 8005ce8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005cec:	e003      	b.n	8005cf6 <HAL_TIM_PWM_Start+0xfe>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2202      	movs	r2, #2
 8005cf2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	6839      	ldr	r1, [r7, #0]
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f001 fc2a 	bl	8007558 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a35      	ldr	r2, [pc, #212]	@ (8005de0 <HAL_TIM_PWM_Start+0x1e8>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d013      	beq.n	8005d36 <HAL_TIM_PWM_Start+0x13e>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a34      	ldr	r2, [pc, #208]	@ (8005de4 <HAL_TIM_PWM_Start+0x1ec>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d00e      	beq.n	8005d36 <HAL_TIM_PWM_Start+0x13e>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a32      	ldr	r2, [pc, #200]	@ (8005de8 <HAL_TIM_PWM_Start+0x1f0>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d009      	beq.n	8005d36 <HAL_TIM_PWM_Start+0x13e>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a31      	ldr	r2, [pc, #196]	@ (8005dec <HAL_TIM_PWM_Start+0x1f4>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d004      	beq.n	8005d36 <HAL_TIM_PWM_Start+0x13e>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a2f      	ldr	r2, [pc, #188]	@ (8005df0 <HAL_TIM_PWM_Start+0x1f8>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d101      	bne.n	8005d3a <HAL_TIM_PWM_Start+0x142>
 8005d36:	2301      	movs	r3, #1
 8005d38:	e000      	b.n	8005d3c <HAL_TIM_PWM_Start+0x144>
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d007      	beq.n	8005d50 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005d4e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a22      	ldr	r2, [pc, #136]	@ (8005de0 <HAL_TIM_PWM_Start+0x1e8>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d01d      	beq.n	8005d96 <HAL_TIM_PWM_Start+0x19e>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d62:	d018      	beq.n	8005d96 <HAL_TIM_PWM_Start+0x19e>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a22      	ldr	r2, [pc, #136]	@ (8005df4 <HAL_TIM_PWM_Start+0x1fc>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d013      	beq.n	8005d96 <HAL_TIM_PWM_Start+0x19e>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a21      	ldr	r2, [pc, #132]	@ (8005df8 <HAL_TIM_PWM_Start+0x200>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d00e      	beq.n	8005d96 <HAL_TIM_PWM_Start+0x19e>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a1f      	ldr	r2, [pc, #124]	@ (8005dfc <HAL_TIM_PWM_Start+0x204>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d009      	beq.n	8005d96 <HAL_TIM_PWM_Start+0x19e>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a17      	ldr	r2, [pc, #92]	@ (8005de4 <HAL_TIM_PWM_Start+0x1ec>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d004      	beq.n	8005d96 <HAL_TIM_PWM_Start+0x19e>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a15      	ldr	r2, [pc, #84]	@ (8005de8 <HAL_TIM_PWM_Start+0x1f0>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d115      	bne.n	8005dc2 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	689a      	ldr	r2, [r3, #8]
 8005d9c:	4b18      	ldr	r3, [pc, #96]	@ (8005e00 <HAL_TIM_PWM_Start+0x208>)
 8005d9e:	4013      	ands	r3, r2
 8005da0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2b06      	cmp	r3, #6
 8005da6:	d015      	beq.n	8005dd4 <HAL_TIM_PWM_Start+0x1dc>
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005dae:	d011      	beq.n	8005dd4 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f042 0201 	orr.w	r2, r2, #1
 8005dbe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dc0:	e008      	b.n	8005dd4 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f042 0201 	orr.w	r2, r2, #1
 8005dd0:	601a      	str	r2, [r3, #0]
 8005dd2:	e000      	b.n	8005dd6 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dd4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005dd6:	2300      	movs	r3, #0
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3710      	adds	r7, #16
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}
 8005de0:	40012c00 	.word	0x40012c00
 8005de4:	40013400 	.word	0x40013400
 8005de8:	40014000 	.word	0x40014000
 8005dec:	40014400 	.word	0x40014400
 8005df0:	40014800 	.word	0x40014800
 8005df4:	40000400 	.word	0x40000400
 8005df8:	40000800 	.word	0x40000800
 8005dfc:	40000c00 	.word	0x40000c00
 8005e00:	00010007 	.word	0x00010007

08005e04 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b082      	sub	sp, #8
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d101      	bne.n	8005e16 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	e049      	b.n	8005eaa <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d106      	bne.n	8005e30 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 f841 	bl	8005eb2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2202      	movs	r2, #2
 8005e34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	3304      	adds	r3, #4
 8005e40:	4619      	mov	r1, r3
 8005e42:	4610      	mov	r0, r2
 8005e44:	f000 fdba 	bl	80069bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ea8:	2300      	movs	r3, #0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3708      	adds	r7, #8
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}

08005eb2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005eb2:	b480      	push	{r7}
 8005eb4:	b083      	sub	sp, #12
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005eba:	bf00      	nop
 8005ebc:	370c      	adds	r7, #12
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr
	...

08005ec8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d104      	bne.n	8005ee6 <HAL_TIM_IC_Start_IT+0x1e>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	e023      	b.n	8005f2e <HAL_TIM_IC_Start_IT+0x66>
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	2b04      	cmp	r3, #4
 8005eea:	d104      	bne.n	8005ef6 <HAL_TIM_IC_Start_IT+0x2e>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	e01b      	b.n	8005f2e <HAL_TIM_IC_Start_IT+0x66>
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	2b08      	cmp	r3, #8
 8005efa:	d104      	bne.n	8005f06 <HAL_TIM_IC_Start_IT+0x3e>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	e013      	b.n	8005f2e <HAL_TIM_IC_Start_IT+0x66>
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	2b0c      	cmp	r3, #12
 8005f0a:	d104      	bne.n	8005f16 <HAL_TIM_IC_Start_IT+0x4e>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	e00b      	b.n	8005f2e <HAL_TIM_IC_Start_IT+0x66>
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	2b10      	cmp	r3, #16
 8005f1a:	d104      	bne.n	8005f26 <HAL_TIM_IC_Start_IT+0x5e>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	e003      	b.n	8005f2e <HAL_TIM_IC_Start_IT+0x66>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d104      	bne.n	8005f40 <HAL_TIM_IC_Start_IT+0x78>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	e013      	b.n	8005f68 <HAL_TIM_IC_Start_IT+0xa0>
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	2b04      	cmp	r3, #4
 8005f44:	d104      	bne.n	8005f50 <HAL_TIM_IC_Start_IT+0x88>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	e00b      	b.n	8005f68 <HAL_TIM_IC_Start_IT+0xa0>
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	2b08      	cmp	r3, #8
 8005f54:	d104      	bne.n	8005f60 <HAL_TIM_IC_Start_IT+0x98>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	e003      	b.n	8005f68 <HAL_TIM_IC_Start_IT+0xa0>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8005f66:	b2db      	uxtb	r3, r3
 8005f68:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f6a:	7bbb      	ldrb	r3, [r7, #14]
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d102      	bne.n	8005f76 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005f70:	7b7b      	ldrb	r3, [r7, #13]
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d001      	beq.n	8005f7a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e0dd      	b.n	8006136 <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d104      	bne.n	8005f8a <HAL_TIM_IC_Start_IT+0xc2>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2202      	movs	r2, #2
 8005f84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f88:	e023      	b.n	8005fd2 <HAL_TIM_IC_Start_IT+0x10a>
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	2b04      	cmp	r3, #4
 8005f8e:	d104      	bne.n	8005f9a <HAL_TIM_IC_Start_IT+0xd2>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2202      	movs	r2, #2
 8005f94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f98:	e01b      	b.n	8005fd2 <HAL_TIM_IC_Start_IT+0x10a>
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	2b08      	cmp	r3, #8
 8005f9e:	d104      	bne.n	8005faa <HAL_TIM_IC_Start_IT+0xe2>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2202      	movs	r2, #2
 8005fa4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005fa8:	e013      	b.n	8005fd2 <HAL_TIM_IC_Start_IT+0x10a>
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	2b0c      	cmp	r3, #12
 8005fae:	d104      	bne.n	8005fba <HAL_TIM_IC_Start_IT+0xf2>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2202      	movs	r2, #2
 8005fb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005fb8:	e00b      	b.n	8005fd2 <HAL_TIM_IC_Start_IT+0x10a>
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	2b10      	cmp	r3, #16
 8005fbe:	d104      	bne.n	8005fca <HAL_TIM_IC_Start_IT+0x102>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2202      	movs	r2, #2
 8005fc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005fc8:	e003      	b.n	8005fd2 <HAL_TIM_IC_Start_IT+0x10a>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2202      	movs	r2, #2
 8005fce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d104      	bne.n	8005fe2 <HAL_TIM_IC_Start_IT+0x11a>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2202      	movs	r2, #2
 8005fdc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005fe0:	e013      	b.n	800600a <HAL_TIM_IC_Start_IT+0x142>
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	2b04      	cmp	r3, #4
 8005fe6:	d104      	bne.n	8005ff2 <HAL_TIM_IC_Start_IT+0x12a>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2202      	movs	r2, #2
 8005fec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ff0:	e00b      	b.n	800600a <HAL_TIM_IC_Start_IT+0x142>
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	2b08      	cmp	r3, #8
 8005ff6:	d104      	bne.n	8006002 <HAL_TIM_IC_Start_IT+0x13a>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2202      	movs	r2, #2
 8005ffc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006000:	e003      	b.n	800600a <HAL_TIM_IC_Start_IT+0x142>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2202      	movs	r2, #2
 8006006:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	2b0c      	cmp	r3, #12
 800600e:	d841      	bhi.n	8006094 <HAL_TIM_IC_Start_IT+0x1cc>
 8006010:	a201      	add	r2, pc, #4	@ (adr r2, 8006018 <HAL_TIM_IC_Start_IT+0x150>)
 8006012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006016:	bf00      	nop
 8006018:	0800604d 	.word	0x0800604d
 800601c:	08006095 	.word	0x08006095
 8006020:	08006095 	.word	0x08006095
 8006024:	08006095 	.word	0x08006095
 8006028:	0800605f 	.word	0x0800605f
 800602c:	08006095 	.word	0x08006095
 8006030:	08006095 	.word	0x08006095
 8006034:	08006095 	.word	0x08006095
 8006038:	08006071 	.word	0x08006071
 800603c:	08006095 	.word	0x08006095
 8006040:	08006095 	.word	0x08006095
 8006044:	08006095 	.word	0x08006095
 8006048:	08006083 	.word	0x08006083
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	68da      	ldr	r2, [r3, #12]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f042 0202 	orr.w	r2, r2, #2
 800605a:	60da      	str	r2, [r3, #12]
      break;
 800605c:	e01d      	b.n	800609a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	68da      	ldr	r2, [r3, #12]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f042 0204 	orr.w	r2, r2, #4
 800606c:	60da      	str	r2, [r3, #12]
      break;
 800606e:	e014      	b.n	800609a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	68da      	ldr	r2, [r3, #12]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f042 0208 	orr.w	r2, r2, #8
 800607e:	60da      	str	r2, [r3, #12]
      break;
 8006080:	e00b      	b.n	800609a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	68da      	ldr	r2, [r3, #12]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f042 0210 	orr.w	r2, r2, #16
 8006090:	60da      	str	r2, [r3, #12]
      break;
 8006092:	e002      	b.n	800609a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	73fb      	strb	r3, [r7, #15]
      break;
 8006098:	bf00      	nop
  }

  if (status == HAL_OK)
 800609a:	7bfb      	ldrb	r3, [r7, #15]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d149      	bne.n	8006134 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	2201      	movs	r2, #1
 80060a6:	6839      	ldr	r1, [r7, #0]
 80060a8:	4618      	mov	r0, r3
 80060aa:	f001 fa55 	bl	8007558 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a23      	ldr	r2, [pc, #140]	@ (8006140 <HAL_TIM_IC_Start_IT+0x278>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d01d      	beq.n	80060f4 <HAL_TIM_IC_Start_IT+0x22c>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060c0:	d018      	beq.n	80060f4 <HAL_TIM_IC_Start_IT+0x22c>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a1f      	ldr	r2, [pc, #124]	@ (8006144 <HAL_TIM_IC_Start_IT+0x27c>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d013      	beq.n	80060f4 <HAL_TIM_IC_Start_IT+0x22c>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a1d      	ldr	r2, [pc, #116]	@ (8006148 <HAL_TIM_IC_Start_IT+0x280>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d00e      	beq.n	80060f4 <HAL_TIM_IC_Start_IT+0x22c>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a1c      	ldr	r2, [pc, #112]	@ (800614c <HAL_TIM_IC_Start_IT+0x284>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d009      	beq.n	80060f4 <HAL_TIM_IC_Start_IT+0x22c>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a1a      	ldr	r2, [pc, #104]	@ (8006150 <HAL_TIM_IC_Start_IT+0x288>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d004      	beq.n	80060f4 <HAL_TIM_IC_Start_IT+0x22c>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a19      	ldr	r2, [pc, #100]	@ (8006154 <HAL_TIM_IC_Start_IT+0x28c>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d115      	bne.n	8006120 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	689a      	ldr	r2, [r3, #8]
 80060fa:	4b17      	ldr	r3, [pc, #92]	@ (8006158 <HAL_TIM_IC_Start_IT+0x290>)
 80060fc:	4013      	ands	r3, r2
 80060fe:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	2b06      	cmp	r3, #6
 8006104:	d015      	beq.n	8006132 <HAL_TIM_IC_Start_IT+0x26a>
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800610c:	d011      	beq.n	8006132 <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f042 0201 	orr.w	r2, r2, #1
 800611c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800611e:	e008      	b.n	8006132 <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f042 0201 	orr.w	r2, r2, #1
 800612e:	601a      	str	r2, [r3, #0]
 8006130:	e000      	b.n	8006134 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006132:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8006134:	7bfb      	ldrb	r3, [r7, #15]
}
 8006136:	4618      	mov	r0, r3
 8006138:	3710      	adds	r7, #16
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop
 8006140:	40012c00 	.word	0x40012c00
 8006144:	40000400 	.word	0x40000400
 8006148:	40000800 	.word	0x40000800
 800614c:	40000c00 	.word	0x40000c00
 8006150:	40013400 	.word	0x40013400
 8006154:	40014000 	.word	0x40014000
 8006158:	00010007 	.word	0x00010007

0800615c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	f003 0302 	and.w	r3, r3, #2
 800617a:	2b00      	cmp	r3, #0
 800617c:	d020      	beq.n	80061c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f003 0302 	and.w	r3, r3, #2
 8006184:	2b00      	cmp	r3, #0
 8006186:	d01b      	beq.n	80061c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f06f 0202 	mvn.w	r2, #2
 8006190:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2201      	movs	r2, #1
 8006196:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	699b      	ldr	r3, [r3, #24]
 800619e:	f003 0303 	and.w	r3, r3, #3
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d003      	beq.n	80061ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f7fc fb88 	bl	80028bc <HAL_TIM_IC_CaptureCallback>
 80061ac:	e005      	b.n	80061ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 fbe6 	bl	8006980 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f000 fbed 	bl	8006994 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	f003 0304 	and.w	r3, r3, #4
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d020      	beq.n	800620c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f003 0304 	and.w	r3, r3, #4
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d01b      	beq.n	800620c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f06f 0204 	mvn.w	r2, #4
 80061dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2202      	movs	r2, #2
 80061e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	699b      	ldr	r3, [r3, #24]
 80061ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d003      	beq.n	80061fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f7fc fb62 	bl	80028bc <HAL_TIM_IC_CaptureCallback>
 80061f8:	e005      	b.n	8006206 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 fbc0 	bl	8006980 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f000 fbc7 	bl	8006994 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	f003 0308 	and.w	r3, r3, #8
 8006212:	2b00      	cmp	r3, #0
 8006214:	d020      	beq.n	8006258 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f003 0308 	and.w	r3, r3, #8
 800621c:	2b00      	cmp	r3, #0
 800621e:	d01b      	beq.n	8006258 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f06f 0208 	mvn.w	r2, #8
 8006228:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2204      	movs	r2, #4
 800622e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	69db      	ldr	r3, [r3, #28]
 8006236:	f003 0303 	and.w	r3, r3, #3
 800623a:	2b00      	cmp	r3, #0
 800623c:	d003      	beq.n	8006246 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f7fc fb3c 	bl	80028bc <HAL_TIM_IC_CaptureCallback>
 8006244:	e005      	b.n	8006252 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 fb9a 	bl	8006980 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f000 fba1 	bl	8006994 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	f003 0310 	and.w	r3, r3, #16
 800625e:	2b00      	cmp	r3, #0
 8006260:	d020      	beq.n	80062a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f003 0310 	and.w	r3, r3, #16
 8006268:	2b00      	cmp	r3, #0
 800626a:	d01b      	beq.n	80062a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f06f 0210 	mvn.w	r2, #16
 8006274:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2208      	movs	r2, #8
 800627a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	69db      	ldr	r3, [r3, #28]
 8006282:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006286:	2b00      	cmp	r3, #0
 8006288:	d003      	beq.n	8006292 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f7fc fb16 	bl	80028bc <HAL_TIM_IC_CaptureCallback>
 8006290:	e005      	b.n	800629e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 fb74 	bl	8006980 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 fb7b 	bl	8006994 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	f003 0301 	and.w	r3, r3, #1
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d00c      	beq.n	80062c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f003 0301 	and.w	r3, r3, #1
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d007      	beq.n	80062c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f06f 0201 	mvn.w	r2, #1
 80062c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 fb52 	bl	800696c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d104      	bne.n	80062dc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d00c      	beq.n	80062f6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d007      	beq.n	80062f6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80062ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f001 fa67 	bl	80077c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d00c      	beq.n	800631a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006306:	2b00      	cmp	r3, #0
 8006308:	d007      	beq.n	800631a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006312:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f001 fa5f 	bl	80077d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006320:	2b00      	cmp	r3, #0
 8006322:	d00c      	beq.n	800633e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800632a:	2b00      	cmp	r3, #0
 800632c:	d007      	beq.n	800633e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006336:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f000 fb35 	bl	80069a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	f003 0320 	and.w	r3, r3, #32
 8006344:	2b00      	cmp	r3, #0
 8006346:	d00c      	beq.n	8006362 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f003 0320 	and.w	r3, r3, #32
 800634e:	2b00      	cmp	r3, #0
 8006350:	d007      	beq.n	8006362 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f06f 0220 	mvn.w	r2, #32
 800635a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f001 fa27 	bl	80077b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006362:	bf00      	nop
 8006364:	3710      	adds	r7, #16
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}

0800636a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800636a:	b580      	push	{r7, lr}
 800636c:	b086      	sub	sp, #24
 800636e:	af00      	add	r7, sp, #0
 8006370:	60f8      	str	r0, [r7, #12]
 8006372:	60b9      	str	r1, [r7, #8]
 8006374:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006376:	2300      	movs	r3, #0
 8006378:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006380:	2b01      	cmp	r3, #1
 8006382:	d101      	bne.n	8006388 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006384:	2302      	movs	r3, #2
 8006386:	e088      	b.n	800649a <HAL_TIM_IC_ConfigChannel+0x130>
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d11b      	bne.n	80063ce <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80063a6:	f000 ff19 	bl	80071dc <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	699a      	ldr	r2, [r3, #24]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f022 020c 	bic.w	r2, r2, #12
 80063b8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	6999      	ldr	r1, [r3, #24]
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	689a      	ldr	r2, [r3, #8]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	430a      	orrs	r2, r1
 80063ca:	619a      	str	r2, [r3, #24]
 80063cc:	e060      	b.n	8006490 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2b04      	cmp	r3, #4
 80063d2:	d11c      	bne.n	800640e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80063e4:	f000 ff97 	bl	8007316 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	699a      	ldr	r2, [r3, #24]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80063f6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	6999      	ldr	r1, [r3, #24]
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	021a      	lsls	r2, r3, #8
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	430a      	orrs	r2, r1
 800640a:	619a      	str	r2, [r3, #24]
 800640c:	e040      	b.n	8006490 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2b08      	cmp	r3, #8
 8006412:	d11b      	bne.n	800644c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8006424:	f000 ffe4 	bl	80073f0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	69da      	ldr	r2, [r3, #28]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f022 020c 	bic.w	r2, r2, #12
 8006436:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	69d9      	ldr	r1, [r3, #28]
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	689a      	ldr	r2, [r3, #8]
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	430a      	orrs	r2, r1
 8006448:	61da      	str	r2, [r3, #28]
 800644a:	e021      	b.n	8006490 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2b0c      	cmp	r3, #12
 8006450:	d11c      	bne.n	800648c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8006462:	f001 f801 	bl	8007468 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	69da      	ldr	r2, [r3, #28]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006474:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	69d9      	ldr	r1, [r3, #28]
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	021a      	lsls	r2, r3, #8
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	430a      	orrs	r2, r1
 8006488:	61da      	str	r2, [r3, #28]
 800648a:	e001      	b.n	8006490 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800648c:	2301      	movs	r3, #1
 800648e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2200      	movs	r2, #0
 8006494:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006498:	7dfb      	ldrb	r3, [r7, #23]
}
 800649a:	4618      	mov	r0, r3
 800649c:	3718      	adds	r7, #24
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
	...

080064a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b086      	sub	sp, #24
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	60f8      	str	r0, [r7, #12]
 80064ac:	60b9      	str	r1, [r7, #8]
 80064ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064b0:	2300      	movs	r3, #0
 80064b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d101      	bne.n	80064c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80064be:	2302      	movs	r3, #2
 80064c0:	e0ff      	b.n	80066c2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2201      	movs	r2, #1
 80064c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2b14      	cmp	r3, #20
 80064ce:	f200 80f0 	bhi.w	80066b2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80064d2:	a201      	add	r2, pc, #4	@ (adr r2, 80064d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80064d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064d8:	0800652d 	.word	0x0800652d
 80064dc:	080066b3 	.word	0x080066b3
 80064e0:	080066b3 	.word	0x080066b3
 80064e4:	080066b3 	.word	0x080066b3
 80064e8:	0800656d 	.word	0x0800656d
 80064ec:	080066b3 	.word	0x080066b3
 80064f0:	080066b3 	.word	0x080066b3
 80064f4:	080066b3 	.word	0x080066b3
 80064f8:	080065af 	.word	0x080065af
 80064fc:	080066b3 	.word	0x080066b3
 8006500:	080066b3 	.word	0x080066b3
 8006504:	080066b3 	.word	0x080066b3
 8006508:	080065ef 	.word	0x080065ef
 800650c:	080066b3 	.word	0x080066b3
 8006510:	080066b3 	.word	0x080066b3
 8006514:	080066b3 	.word	0x080066b3
 8006518:	08006631 	.word	0x08006631
 800651c:	080066b3 	.word	0x080066b3
 8006520:	080066b3 	.word	0x080066b3
 8006524:	080066b3 	.word	0x080066b3
 8006528:	08006671 	.word	0x08006671
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	68b9      	ldr	r1, [r7, #8]
 8006532:	4618      	mov	r0, r3
 8006534:	f000 fae8 	bl	8006b08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	699a      	ldr	r2, [r3, #24]
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f042 0208 	orr.w	r2, r2, #8
 8006546:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	699a      	ldr	r2, [r3, #24]
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f022 0204 	bic.w	r2, r2, #4
 8006556:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	6999      	ldr	r1, [r3, #24]
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	691a      	ldr	r2, [r3, #16]
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	430a      	orrs	r2, r1
 8006568:	619a      	str	r2, [r3, #24]
      break;
 800656a:	e0a5      	b.n	80066b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	68b9      	ldr	r1, [r7, #8]
 8006572:	4618      	mov	r0, r3
 8006574:	f000 fb58 	bl	8006c28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	699a      	ldr	r2, [r3, #24]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006586:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	699a      	ldr	r2, [r3, #24]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006596:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	6999      	ldr	r1, [r3, #24]
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	691b      	ldr	r3, [r3, #16]
 80065a2:	021a      	lsls	r2, r3, #8
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	430a      	orrs	r2, r1
 80065aa:	619a      	str	r2, [r3, #24]
      break;
 80065ac:	e084      	b.n	80066b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	68b9      	ldr	r1, [r7, #8]
 80065b4:	4618      	mov	r0, r3
 80065b6:	f000 fbc1 	bl	8006d3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	69da      	ldr	r2, [r3, #28]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f042 0208 	orr.w	r2, r2, #8
 80065c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	69da      	ldr	r2, [r3, #28]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f022 0204 	bic.w	r2, r2, #4
 80065d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	69d9      	ldr	r1, [r3, #28]
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	691a      	ldr	r2, [r3, #16]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	430a      	orrs	r2, r1
 80065ea:	61da      	str	r2, [r3, #28]
      break;
 80065ec:	e064      	b.n	80066b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	68b9      	ldr	r1, [r7, #8]
 80065f4:	4618      	mov	r0, r3
 80065f6:	f000 fc29 	bl	8006e4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	69da      	ldr	r2, [r3, #28]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006608:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	69da      	ldr	r2, [r3, #28]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006618:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	69d9      	ldr	r1, [r3, #28]
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	691b      	ldr	r3, [r3, #16]
 8006624:	021a      	lsls	r2, r3, #8
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	430a      	orrs	r2, r1
 800662c:	61da      	str	r2, [r3, #28]
      break;
 800662e:	e043      	b.n	80066b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68b9      	ldr	r1, [r7, #8]
 8006636:	4618      	mov	r0, r3
 8006638:	f000 fc72 	bl	8006f20 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f042 0208 	orr.w	r2, r2, #8
 800664a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f022 0204 	bic.w	r2, r2, #4
 800665a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	691a      	ldr	r2, [r3, #16]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	430a      	orrs	r2, r1
 800666c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800666e:	e023      	b.n	80066b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	68b9      	ldr	r1, [r7, #8]
 8006676:	4618      	mov	r0, r3
 8006678:	f000 fcb6 	bl	8006fe8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800668a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800669a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	691b      	ldr	r3, [r3, #16]
 80066a6:	021a      	lsls	r2, r3, #8
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	430a      	orrs	r2, r1
 80066ae:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80066b0:	e002      	b.n	80066b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	75fb      	strb	r3, [r7, #23]
      break;
 80066b6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80066c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3718      	adds	r7, #24
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}
 80066ca:	bf00      	nop

080066cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b084      	sub	sp, #16
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80066d6:	2300      	movs	r3, #0
 80066d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d101      	bne.n	80066e8 <HAL_TIM_ConfigClockSource+0x1c>
 80066e4:	2302      	movs	r3, #2
 80066e6:	e0b6      	b.n	8006856 <HAL_TIM_ConfigClockSource+0x18a>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2201      	movs	r2, #1
 80066ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2202      	movs	r2, #2
 80066f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006706:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800670a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006712:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	68ba      	ldr	r2, [r7, #8]
 800671a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006724:	d03e      	beq.n	80067a4 <HAL_TIM_ConfigClockSource+0xd8>
 8006726:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800672a:	f200 8087 	bhi.w	800683c <HAL_TIM_ConfigClockSource+0x170>
 800672e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006732:	f000 8086 	beq.w	8006842 <HAL_TIM_ConfigClockSource+0x176>
 8006736:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800673a:	d87f      	bhi.n	800683c <HAL_TIM_ConfigClockSource+0x170>
 800673c:	2b70      	cmp	r3, #112	@ 0x70
 800673e:	d01a      	beq.n	8006776 <HAL_TIM_ConfigClockSource+0xaa>
 8006740:	2b70      	cmp	r3, #112	@ 0x70
 8006742:	d87b      	bhi.n	800683c <HAL_TIM_ConfigClockSource+0x170>
 8006744:	2b60      	cmp	r3, #96	@ 0x60
 8006746:	d050      	beq.n	80067ea <HAL_TIM_ConfigClockSource+0x11e>
 8006748:	2b60      	cmp	r3, #96	@ 0x60
 800674a:	d877      	bhi.n	800683c <HAL_TIM_ConfigClockSource+0x170>
 800674c:	2b50      	cmp	r3, #80	@ 0x50
 800674e:	d03c      	beq.n	80067ca <HAL_TIM_ConfigClockSource+0xfe>
 8006750:	2b50      	cmp	r3, #80	@ 0x50
 8006752:	d873      	bhi.n	800683c <HAL_TIM_ConfigClockSource+0x170>
 8006754:	2b40      	cmp	r3, #64	@ 0x40
 8006756:	d058      	beq.n	800680a <HAL_TIM_ConfigClockSource+0x13e>
 8006758:	2b40      	cmp	r3, #64	@ 0x40
 800675a:	d86f      	bhi.n	800683c <HAL_TIM_ConfigClockSource+0x170>
 800675c:	2b30      	cmp	r3, #48	@ 0x30
 800675e:	d064      	beq.n	800682a <HAL_TIM_ConfigClockSource+0x15e>
 8006760:	2b30      	cmp	r3, #48	@ 0x30
 8006762:	d86b      	bhi.n	800683c <HAL_TIM_ConfigClockSource+0x170>
 8006764:	2b20      	cmp	r3, #32
 8006766:	d060      	beq.n	800682a <HAL_TIM_ConfigClockSource+0x15e>
 8006768:	2b20      	cmp	r3, #32
 800676a:	d867      	bhi.n	800683c <HAL_TIM_ConfigClockSource+0x170>
 800676c:	2b00      	cmp	r3, #0
 800676e:	d05c      	beq.n	800682a <HAL_TIM_ConfigClockSource+0x15e>
 8006770:	2b10      	cmp	r3, #16
 8006772:	d05a      	beq.n	800682a <HAL_TIM_ConfigClockSource+0x15e>
 8006774:	e062      	b.n	800683c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006786:	f000 fec7 	bl	8007518 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006798:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	68ba      	ldr	r2, [r7, #8]
 80067a0:	609a      	str	r2, [r3, #8]
      break;
 80067a2:	e04f      	b.n	8006844 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80067b4:	f000 feb0 	bl	8007518 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	689a      	ldr	r2, [r3, #8]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80067c6:	609a      	str	r2, [r3, #8]
      break;
 80067c8:	e03c      	b.n	8006844 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067d6:	461a      	mov	r2, r3
 80067d8:	f000 fd6e 	bl	80072b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	2150      	movs	r1, #80	@ 0x50
 80067e2:	4618      	mov	r0, r3
 80067e4:	f000 fe7d 	bl	80074e2 <TIM_ITRx_SetConfig>
      break;
 80067e8:	e02c      	b.n	8006844 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80067f6:	461a      	mov	r2, r3
 80067f8:	f000 fdca 	bl	8007390 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	2160      	movs	r1, #96	@ 0x60
 8006802:	4618      	mov	r0, r3
 8006804:	f000 fe6d 	bl	80074e2 <TIM_ITRx_SetConfig>
      break;
 8006808:	e01c      	b.n	8006844 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006816:	461a      	mov	r2, r3
 8006818:	f000 fd4e 	bl	80072b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	2140      	movs	r1, #64	@ 0x40
 8006822:	4618      	mov	r0, r3
 8006824:	f000 fe5d 	bl	80074e2 <TIM_ITRx_SetConfig>
      break;
 8006828:	e00c      	b.n	8006844 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4619      	mov	r1, r3
 8006834:	4610      	mov	r0, r2
 8006836:	f000 fe54 	bl	80074e2 <TIM_ITRx_SetConfig>
      break;
 800683a:	e003      	b.n	8006844 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	73fb      	strb	r3, [r7, #15]
      break;
 8006840:	e000      	b.n	8006844 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006842:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2201      	movs	r2, #1
 8006848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006854:	7bfb      	ldrb	r3, [r7, #15]
}
 8006856:	4618      	mov	r0, r3
 8006858:	3710      	adds	r7, #16
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}

0800685e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800685e:	b580      	push	{r7, lr}
 8006860:	b082      	sub	sp, #8
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
 8006866:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800686e:	2b01      	cmp	r3, #1
 8006870:	d101      	bne.n	8006876 <HAL_TIM_SlaveConfigSynchro+0x18>
 8006872:	2302      	movs	r3, #2
 8006874:	e031      	b.n	80068da <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2201      	movs	r2, #1
 800687a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2202      	movs	r2, #2
 8006882:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006886:	6839      	ldr	r1, [r7, #0]
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f000 fc13 	bl	80070b4 <TIM_SlaveTimer_SetConfig>
 800688e:	4603      	mov	r3, r0
 8006890:	2b00      	cmp	r3, #0
 8006892:	d009      	beq.n	80068a8 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	e018      	b.n	80068da <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	68da      	ldr	r2, [r3, #12]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80068b6:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	68da      	ldr	r2, [r3, #12]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80068c6:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2201      	movs	r2, #1
 80068cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80068d8:	2300      	movs	r3, #0
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3708      	adds	r7, #8
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
	...

080068e4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b085      	sub	sp, #20
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80068ee:	2300      	movs	r3, #0
 80068f0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	2b0c      	cmp	r3, #12
 80068f6:	d831      	bhi.n	800695c <HAL_TIM_ReadCapturedValue+0x78>
 80068f8:	a201      	add	r2, pc, #4	@ (adr r2, 8006900 <HAL_TIM_ReadCapturedValue+0x1c>)
 80068fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068fe:	bf00      	nop
 8006900:	08006935 	.word	0x08006935
 8006904:	0800695d 	.word	0x0800695d
 8006908:	0800695d 	.word	0x0800695d
 800690c:	0800695d 	.word	0x0800695d
 8006910:	0800693f 	.word	0x0800693f
 8006914:	0800695d 	.word	0x0800695d
 8006918:	0800695d 	.word	0x0800695d
 800691c:	0800695d 	.word	0x0800695d
 8006920:	08006949 	.word	0x08006949
 8006924:	0800695d 	.word	0x0800695d
 8006928:	0800695d 	.word	0x0800695d
 800692c:	0800695d 	.word	0x0800695d
 8006930:	08006953 	.word	0x08006953
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800693a:	60fb      	str	r3, [r7, #12]

      break;
 800693c:	e00f      	b.n	800695e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006944:	60fb      	str	r3, [r7, #12]

      break;
 8006946:	e00a      	b.n	800695e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800694e:	60fb      	str	r3, [r7, #12]

      break;
 8006950:	e005      	b.n	800695e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006958:	60fb      	str	r3, [r7, #12]

      break;
 800695a:	e000      	b.n	800695e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800695c:	bf00      	nop
  }

  return tmpreg;
 800695e:	68fb      	ldr	r3, [r7, #12]
}
 8006960:	4618      	mov	r0, r3
 8006962:	3714      	adds	r7, #20
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800696c:	b480      	push	{r7}
 800696e:	b083      	sub	sp, #12
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006974:	bf00      	nop
 8006976:	370c      	adds	r7, #12
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr

08006980 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006980:	b480      	push	{r7}
 8006982:	b083      	sub	sp, #12
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006988:	bf00      	nop
 800698a:	370c      	adds	r7, #12
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr

08006994 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800699c:	bf00      	nop
 800699e:	370c      	adds	r7, #12
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr

080069a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b083      	sub	sp, #12
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80069b0:	bf00      	nop
 80069b2:	370c      	adds	r7, #12
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr

080069bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80069bc:	b480      	push	{r7}
 80069be:	b085      	sub	sp, #20
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	4a46      	ldr	r2, [pc, #280]	@ (8006ae8 <TIM_Base_SetConfig+0x12c>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d013      	beq.n	80069fc <TIM_Base_SetConfig+0x40>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069da:	d00f      	beq.n	80069fc <TIM_Base_SetConfig+0x40>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	4a43      	ldr	r2, [pc, #268]	@ (8006aec <TIM_Base_SetConfig+0x130>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d00b      	beq.n	80069fc <TIM_Base_SetConfig+0x40>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4a42      	ldr	r2, [pc, #264]	@ (8006af0 <TIM_Base_SetConfig+0x134>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d007      	beq.n	80069fc <TIM_Base_SetConfig+0x40>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	4a41      	ldr	r2, [pc, #260]	@ (8006af4 <TIM_Base_SetConfig+0x138>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d003      	beq.n	80069fc <TIM_Base_SetConfig+0x40>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	4a40      	ldr	r2, [pc, #256]	@ (8006af8 <TIM_Base_SetConfig+0x13c>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d108      	bne.n	8006a0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	68fa      	ldr	r2, [r7, #12]
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	4a35      	ldr	r2, [pc, #212]	@ (8006ae8 <TIM_Base_SetConfig+0x12c>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d01f      	beq.n	8006a56 <TIM_Base_SetConfig+0x9a>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a1c:	d01b      	beq.n	8006a56 <TIM_Base_SetConfig+0x9a>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	4a32      	ldr	r2, [pc, #200]	@ (8006aec <TIM_Base_SetConfig+0x130>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d017      	beq.n	8006a56 <TIM_Base_SetConfig+0x9a>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	4a31      	ldr	r2, [pc, #196]	@ (8006af0 <TIM_Base_SetConfig+0x134>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d013      	beq.n	8006a56 <TIM_Base_SetConfig+0x9a>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4a30      	ldr	r2, [pc, #192]	@ (8006af4 <TIM_Base_SetConfig+0x138>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d00f      	beq.n	8006a56 <TIM_Base_SetConfig+0x9a>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4a2f      	ldr	r2, [pc, #188]	@ (8006af8 <TIM_Base_SetConfig+0x13c>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d00b      	beq.n	8006a56 <TIM_Base_SetConfig+0x9a>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4a2e      	ldr	r2, [pc, #184]	@ (8006afc <TIM_Base_SetConfig+0x140>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d007      	beq.n	8006a56 <TIM_Base_SetConfig+0x9a>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4a2d      	ldr	r2, [pc, #180]	@ (8006b00 <TIM_Base_SetConfig+0x144>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d003      	beq.n	8006a56 <TIM_Base_SetConfig+0x9a>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	4a2c      	ldr	r2, [pc, #176]	@ (8006b04 <TIM_Base_SetConfig+0x148>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d108      	bne.n	8006a68 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	68db      	ldr	r3, [r3, #12]
 8006a62:	68fa      	ldr	r2, [r7, #12]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	695b      	ldr	r3, [r3, #20]
 8006a72:	4313      	orrs	r3, r2
 8006a74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	68fa      	ldr	r2, [r7, #12]
 8006a7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	689a      	ldr	r2, [r3, #8]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4a16      	ldr	r2, [pc, #88]	@ (8006ae8 <TIM_Base_SetConfig+0x12c>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d00f      	beq.n	8006ab4 <TIM_Base_SetConfig+0xf8>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4a18      	ldr	r2, [pc, #96]	@ (8006af8 <TIM_Base_SetConfig+0x13c>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d00b      	beq.n	8006ab4 <TIM_Base_SetConfig+0xf8>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	4a17      	ldr	r2, [pc, #92]	@ (8006afc <TIM_Base_SetConfig+0x140>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d007      	beq.n	8006ab4 <TIM_Base_SetConfig+0xf8>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4a16      	ldr	r2, [pc, #88]	@ (8006b00 <TIM_Base_SetConfig+0x144>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d003      	beq.n	8006ab4 <TIM_Base_SetConfig+0xf8>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	4a15      	ldr	r2, [pc, #84]	@ (8006b04 <TIM_Base_SetConfig+0x148>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d103      	bne.n	8006abc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	691a      	ldr	r2, [r3, #16]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	691b      	ldr	r3, [r3, #16]
 8006ac6:	f003 0301 	and.w	r3, r3, #1
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d105      	bne.n	8006ada <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	691b      	ldr	r3, [r3, #16]
 8006ad2:	f023 0201 	bic.w	r2, r3, #1
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	611a      	str	r2, [r3, #16]
  }
}
 8006ada:	bf00      	nop
 8006adc:	3714      	adds	r7, #20
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr
 8006ae6:	bf00      	nop
 8006ae8:	40012c00 	.word	0x40012c00
 8006aec:	40000400 	.word	0x40000400
 8006af0:	40000800 	.word	0x40000800
 8006af4:	40000c00 	.word	0x40000c00
 8006af8:	40013400 	.word	0x40013400
 8006afc:	40014000 	.word	0x40014000
 8006b00:	40014400 	.word	0x40014400
 8006b04:	40014800 	.word	0x40014800

08006b08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b087      	sub	sp, #28
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6a1b      	ldr	r3, [r3, #32]
 8006b16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6a1b      	ldr	r3, [r3, #32]
 8006b1c:	f023 0201 	bic.w	r2, r3, #1
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	699b      	ldr	r3, [r3, #24]
 8006b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f023 0303 	bic.w	r3, r3, #3
 8006b42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	68fa      	ldr	r2, [r7, #12]
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	f023 0302 	bic.w	r3, r3, #2
 8006b54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	697a      	ldr	r2, [r7, #20]
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	4a2c      	ldr	r2, [pc, #176]	@ (8006c14 <TIM_OC1_SetConfig+0x10c>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d00f      	beq.n	8006b88 <TIM_OC1_SetConfig+0x80>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	4a2b      	ldr	r2, [pc, #172]	@ (8006c18 <TIM_OC1_SetConfig+0x110>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d00b      	beq.n	8006b88 <TIM_OC1_SetConfig+0x80>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4a2a      	ldr	r2, [pc, #168]	@ (8006c1c <TIM_OC1_SetConfig+0x114>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d007      	beq.n	8006b88 <TIM_OC1_SetConfig+0x80>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	4a29      	ldr	r2, [pc, #164]	@ (8006c20 <TIM_OC1_SetConfig+0x118>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d003      	beq.n	8006b88 <TIM_OC1_SetConfig+0x80>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	4a28      	ldr	r2, [pc, #160]	@ (8006c24 <TIM_OC1_SetConfig+0x11c>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d10c      	bne.n	8006ba2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	f023 0308 	bic.w	r3, r3, #8
 8006b8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	68db      	ldr	r3, [r3, #12]
 8006b94:	697a      	ldr	r2, [r7, #20]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	f023 0304 	bic.w	r3, r3, #4
 8006ba0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4a1b      	ldr	r2, [pc, #108]	@ (8006c14 <TIM_OC1_SetConfig+0x10c>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d00f      	beq.n	8006bca <TIM_OC1_SetConfig+0xc2>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4a1a      	ldr	r2, [pc, #104]	@ (8006c18 <TIM_OC1_SetConfig+0x110>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d00b      	beq.n	8006bca <TIM_OC1_SetConfig+0xc2>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	4a19      	ldr	r2, [pc, #100]	@ (8006c1c <TIM_OC1_SetConfig+0x114>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d007      	beq.n	8006bca <TIM_OC1_SetConfig+0xc2>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	4a18      	ldr	r2, [pc, #96]	@ (8006c20 <TIM_OC1_SetConfig+0x118>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d003      	beq.n	8006bca <TIM_OC1_SetConfig+0xc2>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	4a17      	ldr	r2, [pc, #92]	@ (8006c24 <TIM_OC1_SetConfig+0x11c>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d111      	bne.n	8006bee <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006bd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006bd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	695b      	ldr	r3, [r3, #20]
 8006bde:	693a      	ldr	r2, [r7, #16]
 8006be0:	4313      	orrs	r3, r2
 8006be2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	699b      	ldr	r3, [r3, #24]
 8006be8:	693a      	ldr	r2, [r7, #16]
 8006bea:	4313      	orrs	r3, r2
 8006bec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	693a      	ldr	r2, [r7, #16]
 8006bf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	68fa      	ldr	r2, [r7, #12]
 8006bf8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	685a      	ldr	r2, [r3, #4]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	697a      	ldr	r2, [r7, #20]
 8006c06:	621a      	str	r2, [r3, #32]
}
 8006c08:	bf00      	nop
 8006c0a:	371c      	adds	r7, #28
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr
 8006c14:	40012c00 	.word	0x40012c00
 8006c18:	40013400 	.word	0x40013400
 8006c1c:	40014000 	.word	0x40014000
 8006c20:	40014400 	.word	0x40014400
 8006c24:	40014800 	.word	0x40014800

08006c28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b087      	sub	sp, #28
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6a1b      	ldr	r3, [r3, #32]
 8006c36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6a1b      	ldr	r3, [r3, #32]
 8006c3c:	f023 0210 	bic.w	r2, r3, #16
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	699b      	ldr	r3, [r3, #24]
 8006c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006c56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	021b      	lsls	r3, r3, #8
 8006c6a:	68fa      	ldr	r2, [r7, #12]
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	f023 0320 	bic.w	r3, r3, #32
 8006c76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	011b      	lsls	r3, r3, #4
 8006c7e:	697a      	ldr	r2, [r7, #20]
 8006c80:	4313      	orrs	r3, r2
 8006c82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	4a28      	ldr	r2, [pc, #160]	@ (8006d28 <TIM_OC2_SetConfig+0x100>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d003      	beq.n	8006c94 <TIM_OC2_SetConfig+0x6c>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	4a27      	ldr	r2, [pc, #156]	@ (8006d2c <TIM_OC2_SetConfig+0x104>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d10d      	bne.n	8006cb0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	68db      	ldr	r3, [r3, #12]
 8006ca0:	011b      	lsls	r3, r3, #4
 8006ca2:	697a      	ldr	r2, [r7, #20]
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006cae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4a1d      	ldr	r2, [pc, #116]	@ (8006d28 <TIM_OC2_SetConfig+0x100>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d00f      	beq.n	8006cd8 <TIM_OC2_SetConfig+0xb0>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	4a1c      	ldr	r2, [pc, #112]	@ (8006d2c <TIM_OC2_SetConfig+0x104>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d00b      	beq.n	8006cd8 <TIM_OC2_SetConfig+0xb0>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	4a1b      	ldr	r2, [pc, #108]	@ (8006d30 <TIM_OC2_SetConfig+0x108>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d007      	beq.n	8006cd8 <TIM_OC2_SetConfig+0xb0>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	4a1a      	ldr	r2, [pc, #104]	@ (8006d34 <TIM_OC2_SetConfig+0x10c>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d003      	beq.n	8006cd8 <TIM_OC2_SetConfig+0xb0>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	4a19      	ldr	r2, [pc, #100]	@ (8006d38 <TIM_OC2_SetConfig+0x110>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d113      	bne.n	8006d00 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006cde:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006ce6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	695b      	ldr	r3, [r3, #20]
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	693a      	ldr	r2, [r7, #16]
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	699b      	ldr	r3, [r3, #24]
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	693a      	ldr	r2, [r7, #16]
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	693a      	ldr	r2, [r7, #16]
 8006d04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	68fa      	ldr	r2, [r7, #12]
 8006d0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	685a      	ldr	r2, [r3, #4]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	697a      	ldr	r2, [r7, #20]
 8006d18:	621a      	str	r2, [r3, #32]
}
 8006d1a:	bf00      	nop
 8006d1c:	371c      	adds	r7, #28
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d24:	4770      	bx	lr
 8006d26:	bf00      	nop
 8006d28:	40012c00 	.word	0x40012c00
 8006d2c:	40013400 	.word	0x40013400
 8006d30:	40014000 	.word	0x40014000
 8006d34:	40014400 	.word	0x40014400
 8006d38:	40014800 	.word	0x40014800

08006d3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b087      	sub	sp, #28
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6a1b      	ldr	r3, [r3, #32]
 8006d4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6a1b      	ldr	r3, [r3, #32]
 8006d50:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	69db      	ldr	r3, [r3, #28]
 8006d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f023 0303 	bic.w	r3, r3, #3
 8006d76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	68fa      	ldr	r2, [r7, #12]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006d88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	021b      	lsls	r3, r3, #8
 8006d90:	697a      	ldr	r2, [r7, #20]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	4a27      	ldr	r2, [pc, #156]	@ (8006e38 <TIM_OC3_SetConfig+0xfc>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d003      	beq.n	8006da6 <TIM_OC3_SetConfig+0x6a>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	4a26      	ldr	r2, [pc, #152]	@ (8006e3c <TIM_OC3_SetConfig+0x100>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d10d      	bne.n	8006dc2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006dac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	68db      	ldr	r3, [r3, #12]
 8006db2:	021b      	lsls	r3, r3, #8
 8006db4:	697a      	ldr	r2, [r7, #20]
 8006db6:	4313      	orrs	r3, r2
 8006db8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006dc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	4a1c      	ldr	r2, [pc, #112]	@ (8006e38 <TIM_OC3_SetConfig+0xfc>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d00f      	beq.n	8006dea <TIM_OC3_SetConfig+0xae>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	4a1b      	ldr	r2, [pc, #108]	@ (8006e3c <TIM_OC3_SetConfig+0x100>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d00b      	beq.n	8006dea <TIM_OC3_SetConfig+0xae>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4a1a      	ldr	r2, [pc, #104]	@ (8006e40 <TIM_OC3_SetConfig+0x104>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d007      	beq.n	8006dea <TIM_OC3_SetConfig+0xae>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4a19      	ldr	r2, [pc, #100]	@ (8006e44 <TIM_OC3_SetConfig+0x108>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d003      	beq.n	8006dea <TIM_OC3_SetConfig+0xae>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	4a18      	ldr	r2, [pc, #96]	@ (8006e48 <TIM_OC3_SetConfig+0x10c>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d113      	bne.n	8006e12 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006df0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006df8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	695b      	ldr	r3, [r3, #20]
 8006dfe:	011b      	lsls	r3, r3, #4
 8006e00:	693a      	ldr	r2, [r7, #16]
 8006e02:	4313      	orrs	r3, r2
 8006e04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	699b      	ldr	r3, [r3, #24]
 8006e0a:	011b      	lsls	r3, r3, #4
 8006e0c:	693a      	ldr	r2, [r7, #16]
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	693a      	ldr	r2, [r7, #16]
 8006e16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	68fa      	ldr	r2, [r7, #12]
 8006e1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	685a      	ldr	r2, [r3, #4]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	697a      	ldr	r2, [r7, #20]
 8006e2a:	621a      	str	r2, [r3, #32]
}
 8006e2c:	bf00      	nop
 8006e2e:	371c      	adds	r7, #28
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr
 8006e38:	40012c00 	.word	0x40012c00
 8006e3c:	40013400 	.word	0x40013400
 8006e40:	40014000 	.word	0x40014000
 8006e44:	40014400 	.word	0x40014400
 8006e48:	40014800 	.word	0x40014800

08006e4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b087      	sub	sp, #28
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6a1b      	ldr	r3, [r3, #32]
 8006e5a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6a1b      	ldr	r3, [r3, #32]
 8006e60:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	69db      	ldr	r3, [r3, #28]
 8006e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006e7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	021b      	lsls	r3, r3, #8
 8006e8e:	68fa      	ldr	r2, [r7, #12]
 8006e90:	4313      	orrs	r3, r2
 8006e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006e9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	031b      	lsls	r3, r3, #12
 8006ea2:	693a      	ldr	r2, [r7, #16]
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	4a18      	ldr	r2, [pc, #96]	@ (8006f0c <TIM_OC4_SetConfig+0xc0>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d00f      	beq.n	8006ed0 <TIM_OC4_SetConfig+0x84>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	4a17      	ldr	r2, [pc, #92]	@ (8006f10 <TIM_OC4_SetConfig+0xc4>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d00b      	beq.n	8006ed0 <TIM_OC4_SetConfig+0x84>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	4a16      	ldr	r2, [pc, #88]	@ (8006f14 <TIM_OC4_SetConfig+0xc8>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d007      	beq.n	8006ed0 <TIM_OC4_SetConfig+0x84>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	4a15      	ldr	r2, [pc, #84]	@ (8006f18 <TIM_OC4_SetConfig+0xcc>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d003      	beq.n	8006ed0 <TIM_OC4_SetConfig+0x84>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	4a14      	ldr	r2, [pc, #80]	@ (8006f1c <TIM_OC4_SetConfig+0xd0>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d109      	bne.n	8006ee4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ed6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	695b      	ldr	r3, [r3, #20]
 8006edc:	019b      	lsls	r3, r3, #6
 8006ede:	697a      	ldr	r2, [r7, #20]
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	697a      	ldr	r2, [r7, #20]
 8006ee8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	68fa      	ldr	r2, [r7, #12]
 8006eee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	685a      	ldr	r2, [r3, #4]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	693a      	ldr	r2, [r7, #16]
 8006efc:	621a      	str	r2, [r3, #32]
}
 8006efe:	bf00      	nop
 8006f00:	371c      	adds	r7, #28
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr
 8006f0a:	bf00      	nop
 8006f0c:	40012c00 	.word	0x40012c00
 8006f10:	40013400 	.word	0x40013400
 8006f14:	40014000 	.word	0x40014000
 8006f18:	40014400 	.word	0x40014400
 8006f1c:	40014800 	.word	0x40014800

08006f20 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b087      	sub	sp, #28
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a1b      	ldr	r3, [r3, #32]
 8006f2e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6a1b      	ldr	r3, [r3, #32]
 8006f34:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	68fa      	ldr	r2, [r7, #12]
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006f64:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	041b      	lsls	r3, r3, #16
 8006f6c:	693a      	ldr	r2, [r7, #16]
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	4a17      	ldr	r2, [pc, #92]	@ (8006fd4 <TIM_OC5_SetConfig+0xb4>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d00f      	beq.n	8006f9a <TIM_OC5_SetConfig+0x7a>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	4a16      	ldr	r2, [pc, #88]	@ (8006fd8 <TIM_OC5_SetConfig+0xb8>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d00b      	beq.n	8006f9a <TIM_OC5_SetConfig+0x7a>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	4a15      	ldr	r2, [pc, #84]	@ (8006fdc <TIM_OC5_SetConfig+0xbc>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d007      	beq.n	8006f9a <TIM_OC5_SetConfig+0x7a>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	4a14      	ldr	r2, [pc, #80]	@ (8006fe0 <TIM_OC5_SetConfig+0xc0>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d003      	beq.n	8006f9a <TIM_OC5_SetConfig+0x7a>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	4a13      	ldr	r2, [pc, #76]	@ (8006fe4 <TIM_OC5_SetConfig+0xc4>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d109      	bne.n	8006fae <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006fa0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	695b      	ldr	r3, [r3, #20]
 8006fa6:	021b      	lsls	r3, r3, #8
 8006fa8:	697a      	ldr	r2, [r7, #20]
 8006faa:	4313      	orrs	r3, r2
 8006fac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	697a      	ldr	r2, [r7, #20]
 8006fb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	68fa      	ldr	r2, [r7, #12]
 8006fb8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	685a      	ldr	r2, [r3, #4]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	693a      	ldr	r2, [r7, #16]
 8006fc6:	621a      	str	r2, [r3, #32]
}
 8006fc8:	bf00      	nop
 8006fca:	371c      	adds	r7, #28
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr
 8006fd4:	40012c00 	.word	0x40012c00
 8006fd8:	40013400 	.word	0x40013400
 8006fdc:	40014000 	.word	0x40014000
 8006fe0:	40014400 	.word	0x40014400
 8006fe4:	40014800 	.word	0x40014800

08006fe8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b087      	sub	sp, #28
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6a1b      	ldr	r3, [r3, #32]
 8006ff6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6a1b      	ldr	r3, [r3, #32]
 8006ffc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800700e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007016:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800701a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	021b      	lsls	r3, r3, #8
 8007022:	68fa      	ldr	r2, [r7, #12]
 8007024:	4313      	orrs	r3, r2
 8007026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800702e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	051b      	lsls	r3, r3, #20
 8007036:	693a      	ldr	r2, [r7, #16]
 8007038:	4313      	orrs	r3, r2
 800703a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	4a18      	ldr	r2, [pc, #96]	@ (80070a0 <TIM_OC6_SetConfig+0xb8>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d00f      	beq.n	8007064 <TIM_OC6_SetConfig+0x7c>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	4a17      	ldr	r2, [pc, #92]	@ (80070a4 <TIM_OC6_SetConfig+0xbc>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d00b      	beq.n	8007064 <TIM_OC6_SetConfig+0x7c>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4a16      	ldr	r2, [pc, #88]	@ (80070a8 <TIM_OC6_SetConfig+0xc0>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d007      	beq.n	8007064 <TIM_OC6_SetConfig+0x7c>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	4a15      	ldr	r2, [pc, #84]	@ (80070ac <TIM_OC6_SetConfig+0xc4>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d003      	beq.n	8007064 <TIM_OC6_SetConfig+0x7c>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	4a14      	ldr	r2, [pc, #80]	@ (80070b0 <TIM_OC6_SetConfig+0xc8>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d109      	bne.n	8007078 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800706a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	695b      	ldr	r3, [r3, #20]
 8007070:	029b      	lsls	r3, r3, #10
 8007072:	697a      	ldr	r2, [r7, #20]
 8007074:	4313      	orrs	r3, r2
 8007076:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	697a      	ldr	r2, [r7, #20]
 800707c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	68fa      	ldr	r2, [r7, #12]
 8007082:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	685a      	ldr	r2, [r3, #4]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	693a      	ldr	r2, [r7, #16]
 8007090:	621a      	str	r2, [r3, #32]
}
 8007092:	bf00      	nop
 8007094:	371c      	adds	r7, #28
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr
 800709e:	bf00      	nop
 80070a0:	40012c00 	.word	0x40012c00
 80070a4:	40013400 	.word	0x40013400
 80070a8:	40014000 	.word	0x40014000
 80070ac:	40014400 	.word	0x40014400
 80070b0:	40014800 	.word	0x40014800

080070b4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b086      	sub	sp, #24
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80070be:	2300      	movs	r3, #0
 80070c0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070d0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	693a      	ldr	r2, [r7, #16]
 80070d8:	4313      	orrs	r3, r2
 80070da:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80070e2:	f023 0307 	bic.w	r3, r3, #7
 80070e6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	693a      	ldr	r2, [r7, #16]
 80070ee:	4313      	orrs	r3, r2
 80070f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	693a      	ldr	r2, [r7, #16]
 80070f8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	2b70      	cmp	r3, #112	@ 0x70
 8007100:	d01a      	beq.n	8007138 <TIM_SlaveTimer_SetConfig+0x84>
 8007102:	2b70      	cmp	r3, #112	@ 0x70
 8007104:	d860      	bhi.n	80071c8 <TIM_SlaveTimer_SetConfig+0x114>
 8007106:	2b60      	cmp	r3, #96	@ 0x60
 8007108:	d054      	beq.n	80071b4 <TIM_SlaveTimer_SetConfig+0x100>
 800710a:	2b60      	cmp	r3, #96	@ 0x60
 800710c:	d85c      	bhi.n	80071c8 <TIM_SlaveTimer_SetConfig+0x114>
 800710e:	2b50      	cmp	r3, #80	@ 0x50
 8007110:	d046      	beq.n	80071a0 <TIM_SlaveTimer_SetConfig+0xec>
 8007112:	2b50      	cmp	r3, #80	@ 0x50
 8007114:	d858      	bhi.n	80071c8 <TIM_SlaveTimer_SetConfig+0x114>
 8007116:	2b40      	cmp	r3, #64	@ 0x40
 8007118:	d019      	beq.n	800714e <TIM_SlaveTimer_SetConfig+0x9a>
 800711a:	2b40      	cmp	r3, #64	@ 0x40
 800711c:	d854      	bhi.n	80071c8 <TIM_SlaveTimer_SetConfig+0x114>
 800711e:	2b30      	cmp	r3, #48	@ 0x30
 8007120:	d055      	beq.n	80071ce <TIM_SlaveTimer_SetConfig+0x11a>
 8007122:	2b30      	cmp	r3, #48	@ 0x30
 8007124:	d850      	bhi.n	80071c8 <TIM_SlaveTimer_SetConfig+0x114>
 8007126:	2b20      	cmp	r3, #32
 8007128:	d051      	beq.n	80071ce <TIM_SlaveTimer_SetConfig+0x11a>
 800712a:	2b20      	cmp	r3, #32
 800712c:	d84c      	bhi.n	80071c8 <TIM_SlaveTimer_SetConfig+0x114>
 800712e:	2b00      	cmp	r3, #0
 8007130:	d04d      	beq.n	80071ce <TIM_SlaveTimer_SetConfig+0x11a>
 8007132:	2b10      	cmp	r3, #16
 8007134:	d04b      	beq.n	80071ce <TIM_SlaveTimer_SetConfig+0x11a>
 8007136:	e047      	b.n	80071c8 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8007148:	f000 f9e6 	bl	8007518 <TIM_ETR_SetConfig>
      break;
 800714c:	e040      	b.n	80071d0 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	2b05      	cmp	r3, #5
 8007154:	d101      	bne.n	800715a <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 8007156:	2301      	movs	r3, #1
 8007158:	e03b      	b.n	80071d2 <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	6a1b      	ldr	r3, [r3, #32]
 8007160:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	6a1a      	ldr	r2, [r3, #32]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f022 0201 	bic.w	r2, r2, #1
 8007170:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	699b      	ldr	r3, [r3, #24]
 8007178:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007180:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	691b      	ldr	r3, [r3, #16]
 8007186:	011b      	lsls	r3, r3, #4
 8007188:	68ba      	ldr	r2, [r7, #8]
 800718a:	4313      	orrs	r3, r2
 800718c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	68ba      	ldr	r2, [r7, #8]
 8007194:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	68fa      	ldr	r2, [r7, #12]
 800719c:	621a      	str	r2, [r3, #32]
      break;
 800719e:	e017      	b.n	80071d0 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80071ac:	461a      	mov	r2, r3
 80071ae:	f000 f883 	bl	80072b8 <TIM_TI1_ConfigInputStage>
      break;
 80071b2:	e00d      	b.n	80071d0 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80071c0:	461a      	mov	r2, r3
 80071c2:	f000 f8e5 	bl	8007390 <TIM_TI2_ConfigInputStage>
      break;
 80071c6:	e003      	b.n	80071d0 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80071c8:	2301      	movs	r3, #1
 80071ca:	75fb      	strb	r3, [r7, #23]
      break;
 80071cc:	e000      	b.n	80071d0 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 80071ce:	bf00      	nop
  }

  return status;
 80071d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3718      	adds	r7, #24
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
	...

080071dc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80071dc:	b480      	push	{r7}
 80071de:	b087      	sub	sp, #28
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	60f8      	str	r0, [r7, #12]
 80071e4:	60b9      	str	r1, [r7, #8]
 80071e6:	607a      	str	r2, [r7, #4]
 80071e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	6a1b      	ldr	r3, [r3, #32]
 80071ee:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	6a1b      	ldr	r3, [r3, #32]
 80071f4:	f023 0201 	bic.w	r2, r3, #1
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	699b      	ldr	r3, [r3, #24]
 8007200:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	4a26      	ldr	r2, [pc, #152]	@ (80072a0 <TIM_TI1_SetConfig+0xc4>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d017      	beq.n	800723a <TIM_TI1_SetConfig+0x5e>
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007210:	d013      	beq.n	800723a <TIM_TI1_SetConfig+0x5e>
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	4a23      	ldr	r2, [pc, #140]	@ (80072a4 <TIM_TI1_SetConfig+0xc8>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d00f      	beq.n	800723a <TIM_TI1_SetConfig+0x5e>
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	4a22      	ldr	r2, [pc, #136]	@ (80072a8 <TIM_TI1_SetConfig+0xcc>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d00b      	beq.n	800723a <TIM_TI1_SetConfig+0x5e>
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	4a21      	ldr	r2, [pc, #132]	@ (80072ac <TIM_TI1_SetConfig+0xd0>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d007      	beq.n	800723a <TIM_TI1_SetConfig+0x5e>
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	4a20      	ldr	r2, [pc, #128]	@ (80072b0 <TIM_TI1_SetConfig+0xd4>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d003      	beq.n	800723a <TIM_TI1_SetConfig+0x5e>
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	4a1f      	ldr	r2, [pc, #124]	@ (80072b4 <TIM_TI1_SetConfig+0xd8>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d101      	bne.n	800723e <TIM_TI1_SetConfig+0x62>
 800723a:	2301      	movs	r3, #1
 800723c:	e000      	b.n	8007240 <TIM_TI1_SetConfig+0x64>
 800723e:	2300      	movs	r3, #0
 8007240:	2b00      	cmp	r3, #0
 8007242:	d008      	beq.n	8007256 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	f023 0303 	bic.w	r3, r3, #3
 800724a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800724c:	697a      	ldr	r2, [r7, #20]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	4313      	orrs	r3, r2
 8007252:	617b      	str	r3, [r7, #20]
 8007254:	e003      	b.n	800725e <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	f043 0301 	orr.w	r3, r3, #1
 800725c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007264:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	011b      	lsls	r3, r3, #4
 800726a:	b2db      	uxtb	r3, r3
 800726c:	697a      	ldr	r2, [r7, #20]
 800726e:	4313      	orrs	r3, r2
 8007270:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	f023 030a 	bic.w	r3, r3, #10
 8007278:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	f003 030a 	and.w	r3, r3, #10
 8007280:	693a      	ldr	r2, [r7, #16]
 8007282:	4313      	orrs	r3, r2
 8007284:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	697a      	ldr	r2, [r7, #20]
 800728a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	693a      	ldr	r2, [r7, #16]
 8007290:	621a      	str	r2, [r3, #32]
}
 8007292:	bf00      	nop
 8007294:	371c      	adds	r7, #28
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr
 800729e:	bf00      	nop
 80072a0:	40012c00 	.word	0x40012c00
 80072a4:	40000400 	.word	0x40000400
 80072a8:	40000800 	.word	0x40000800
 80072ac:	40000c00 	.word	0x40000c00
 80072b0:	40013400 	.word	0x40013400
 80072b4:	40014000 	.word	0x40014000

080072b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b087      	sub	sp, #28
 80072bc:	af00      	add	r7, sp, #0
 80072be:	60f8      	str	r0, [r7, #12]
 80072c0:	60b9      	str	r1, [r7, #8]
 80072c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	6a1b      	ldr	r3, [r3, #32]
 80072c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	6a1b      	ldr	r3, [r3, #32]
 80072ce:	f023 0201 	bic.w	r2, r3, #1
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	699b      	ldr	r3, [r3, #24]
 80072da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80072e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	011b      	lsls	r3, r3, #4
 80072e8:	693a      	ldr	r2, [r7, #16]
 80072ea:	4313      	orrs	r3, r2
 80072ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	f023 030a 	bic.w	r3, r3, #10
 80072f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80072f6:	697a      	ldr	r2, [r7, #20]
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	4313      	orrs	r3, r2
 80072fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	693a      	ldr	r2, [r7, #16]
 8007302:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	697a      	ldr	r2, [r7, #20]
 8007308:	621a      	str	r2, [r3, #32]
}
 800730a:	bf00      	nop
 800730c:	371c      	adds	r7, #28
 800730e:	46bd      	mov	sp, r7
 8007310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007314:	4770      	bx	lr

08007316 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007316:	b480      	push	{r7}
 8007318:	b087      	sub	sp, #28
 800731a:	af00      	add	r7, sp, #0
 800731c:	60f8      	str	r0, [r7, #12]
 800731e:	60b9      	str	r1, [r7, #8]
 8007320:	607a      	str	r2, [r7, #4]
 8007322:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	6a1b      	ldr	r3, [r3, #32]
 8007328:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	6a1b      	ldr	r3, [r3, #32]
 800732e:	f023 0210 	bic.w	r2, r3, #16
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	699b      	ldr	r3, [r3, #24]
 800733a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007342:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	021b      	lsls	r3, r3, #8
 8007348:	693a      	ldr	r2, [r7, #16]
 800734a:	4313      	orrs	r3, r2
 800734c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007354:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	031b      	lsls	r3, r3, #12
 800735a:	b29b      	uxth	r3, r3
 800735c:	693a      	ldr	r2, [r7, #16]
 800735e:	4313      	orrs	r3, r2
 8007360:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007368:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	011b      	lsls	r3, r3, #4
 800736e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8007372:	697a      	ldr	r2, [r7, #20]
 8007374:	4313      	orrs	r3, r2
 8007376:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	693a      	ldr	r2, [r7, #16]
 800737c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	697a      	ldr	r2, [r7, #20]
 8007382:	621a      	str	r2, [r3, #32]
}
 8007384:	bf00      	nop
 8007386:	371c      	adds	r7, #28
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr

08007390 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007390:	b480      	push	{r7}
 8007392:	b087      	sub	sp, #28
 8007394:	af00      	add	r7, sp, #0
 8007396:	60f8      	str	r0, [r7, #12]
 8007398:	60b9      	str	r1, [r7, #8]
 800739a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	6a1b      	ldr	r3, [r3, #32]
 80073a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	6a1b      	ldr	r3, [r3, #32]
 80073a6:	f023 0210 	bic.w	r2, r3, #16
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	699b      	ldr	r3, [r3, #24]
 80073b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80073ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	031b      	lsls	r3, r3, #12
 80073c0:	693a      	ldr	r2, [r7, #16]
 80073c2:	4313      	orrs	r3, r2
 80073c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80073cc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	011b      	lsls	r3, r3, #4
 80073d2:	697a      	ldr	r2, [r7, #20]
 80073d4:	4313      	orrs	r3, r2
 80073d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	693a      	ldr	r2, [r7, #16]
 80073dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	697a      	ldr	r2, [r7, #20]
 80073e2:	621a      	str	r2, [r3, #32]
}
 80073e4:	bf00      	nop
 80073e6:	371c      	adds	r7, #28
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr

080073f0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b087      	sub	sp, #28
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	60f8      	str	r0, [r7, #12]
 80073f8:	60b9      	str	r1, [r7, #8]
 80073fa:	607a      	str	r2, [r7, #4]
 80073fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	6a1b      	ldr	r3, [r3, #32]
 8007402:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	6a1b      	ldr	r3, [r3, #32]
 8007408:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	69db      	ldr	r3, [r3, #28]
 8007414:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	f023 0303 	bic.w	r3, r3, #3
 800741c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800741e:	693a      	ldr	r2, [r7, #16]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	4313      	orrs	r3, r2
 8007424:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800742c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	011b      	lsls	r3, r3, #4
 8007432:	b2db      	uxtb	r3, r3
 8007434:	693a      	ldr	r2, [r7, #16]
 8007436:	4313      	orrs	r3, r2
 8007438:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8007440:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	021b      	lsls	r3, r3, #8
 8007446:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800744a:	697a      	ldr	r2, [r7, #20]
 800744c:	4313      	orrs	r3, r2
 800744e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	693a      	ldr	r2, [r7, #16]
 8007454:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	697a      	ldr	r2, [r7, #20]
 800745a:	621a      	str	r2, [r3, #32]
}
 800745c:	bf00      	nop
 800745e:	371c      	adds	r7, #28
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr

08007468 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007468:	b480      	push	{r7}
 800746a:	b087      	sub	sp, #28
 800746c:	af00      	add	r7, sp, #0
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	60b9      	str	r1, [r7, #8]
 8007472:	607a      	str	r2, [r7, #4]
 8007474:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	6a1b      	ldr	r3, [r3, #32]
 800747a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	6a1b      	ldr	r3, [r3, #32]
 8007480:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	69db      	ldr	r3, [r3, #28]
 800748c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007494:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	021b      	lsls	r3, r3, #8
 800749a:	693a      	ldr	r2, [r7, #16]
 800749c:	4313      	orrs	r3, r2
 800749e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80074a6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	031b      	lsls	r3, r3, #12
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	693a      	ldr	r2, [r7, #16]
 80074b0:	4313      	orrs	r3, r2
 80074b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80074ba:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	031b      	lsls	r3, r3, #12
 80074c0:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80074c4:	697a      	ldr	r2, [r7, #20]
 80074c6:	4313      	orrs	r3, r2
 80074c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	693a      	ldr	r2, [r7, #16]
 80074ce:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	697a      	ldr	r2, [r7, #20]
 80074d4:	621a      	str	r2, [r3, #32]
}
 80074d6:	bf00      	nop
 80074d8:	371c      	adds	r7, #28
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr

080074e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80074e2:	b480      	push	{r7}
 80074e4:	b085      	sub	sp, #20
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
 80074ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	689b      	ldr	r3, [r3, #8]
 80074f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80074fa:	683a      	ldr	r2, [r7, #0]
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	4313      	orrs	r3, r2
 8007500:	f043 0307 	orr.w	r3, r3, #7
 8007504:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	68fa      	ldr	r2, [r7, #12]
 800750a:	609a      	str	r2, [r3, #8]
}
 800750c:	bf00      	nop
 800750e:	3714      	adds	r7, #20
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr

08007518 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007518:	b480      	push	{r7}
 800751a:	b087      	sub	sp, #28
 800751c:	af00      	add	r7, sp, #0
 800751e:	60f8      	str	r0, [r7, #12]
 8007520:	60b9      	str	r1, [r7, #8]
 8007522:	607a      	str	r2, [r7, #4]
 8007524:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007532:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	021a      	lsls	r2, r3, #8
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	431a      	orrs	r2, r3
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	4313      	orrs	r3, r2
 8007540:	697a      	ldr	r2, [r7, #20]
 8007542:	4313      	orrs	r3, r2
 8007544:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	697a      	ldr	r2, [r7, #20]
 800754a:	609a      	str	r2, [r3, #8]
}
 800754c:	bf00      	nop
 800754e:	371c      	adds	r7, #28
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr

08007558 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007558:	b480      	push	{r7}
 800755a:	b087      	sub	sp, #28
 800755c:	af00      	add	r7, sp, #0
 800755e:	60f8      	str	r0, [r7, #12]
 8007560:	60b9      	str	r1, [r7, #8]
 8007562:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	f003 031f 	and.w	r3, r3, #31
 800756a:	2201      	movs	r2, #1
 800756c:	fa02 f303 	lsl.w	r3, r2, r3
 8007570:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	6a1a      	ldr	r2, [r3, #32]
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	43db      	mvns	r3, r3
 800757a:	401a      	ands	r2, r3
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	6a1a      	ldr	r2, [r3, #32]
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	f003 031f 	and.w	r3, r3, #31
 800758a:	6879      	ldr	r1, [r7, #4]
 800758c:	fa01 f303 	lsl.w	r3, r1, r3
 8007590:	431a      	orrs	r2, r3
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	621a      	str	r2, [r3, #32]
}
 8007596:	bf00      	nop
 8007598:	371c      	adds	r7, #28
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr
	...

080075a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b085      	sub	sp, #20
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d101      	bne.n	80075bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80075b8:	2302      	movs	r3, #2
 80075ba:	e068      	b.n	800768e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2201      	movs	r2, #1
 80075c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2202      	movs	r2, #2
 80075c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	689b      	ldr	r3, [r3, #8]
 80075da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a2e      	ldr	r2, [pc, #184]	@ (800769c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d004      	beq.n	80075f0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a2d      	ldr	r2, [pc, #180]	@ (80076a0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d108      	bne.n	8007602 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80075f6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	68fa      	ldr	r2, [r7, #12]
 80075fe:	4313      	orrs	r3, r2
 8007600:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007608:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	68fa      	ldr	r2, [r7, #12]
 8007610:	4313      	orrs	r3, r2
 8007612:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	68fa      	ldr	r2, [r7, #12]
 800761a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a1e      	ldr	r2, [pc, #120]	@ (800769c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d01d      	beq.n	8007662 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800762e:	d018      	beq.n	8007662 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a1b      	ldr	r2, [pc, #108]	@ (80076a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d013      	beq.n	8007662 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a1a      	ldr	r2, [pc, #104]	@ (80076a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d00e      	beq.n	8007662 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a18      	ldr	r2, [pc, #96]	@ (80076ac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d009      	beq.n	8007662 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a13      	ldr	r2, [pc, #76]	@ (80076a0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d004      	beq.n	8007662 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a14      	ldr	r2, [pc, #80]	@ (80076b0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d10c      	bne.n	800767c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007668:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	68ba      	ldr	r2, [r7, #8]
 8007670:	4313      	orrs	r3, r2
 8007672:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	68ba      	ldr	r2, [r7, #8]
 800767a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2201      	movs	r2, #1
 8007680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2200      	movs	r2, #0
 8007688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800768c:	2300      	movs	r3, #0
}
 800768e:	4618      	mov	r0, r3
 8007690:	3714      	adds	r7, #20
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr
 800769a:	bf00      	nop
 800769c:	40012c00 	.word	0x40012c00
 80076a0:	40013400 	.word	0x40013400
 80076a4:	40000400 	.word	0x40000400
 80076a8:	40000800 	.word	0x40000800
 80076ac:	40000c00 	.word	0x40000c00
 80076b0:	40014000 	.word	0x40014000

080076b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b085      	sub	sp, #20
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80076be:	2300      	movs	r3, #0
 80076c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d101      	bne.n	80076d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80076cc:	2302      	movs	r3, #2
 80076ce:	e065      	b.n	800779c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2201      	movs	r2, #1
 80076d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	68db      	ldr	r3, [r3, #12]
 80076e2:	4313      	orrs	r3, r2
 80076e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	4313      	orrs	r3, r2
 80076f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	4313      	orrs	r3, r2
 8007700:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4313      	orrs	r3, r2
 800770e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	691b      	ldr	r3, [r3, #16]
 800771a:	4313      	orrs	r3, r2
 800771c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	695b      	ldr	r3, [r3, #20]
 8007728:	4313      	orrs	r3, r2
 800772a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007736:	4313      	orrs	r3, r2
 8007738:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	699b      	ldr	r3, [r3, #24]
 8007744:	041b      	lsls	r3, r3, #16
 8007746:	4313      	orrs	r3, r2
 8007748:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a16      	ldr	r2, [pc, #88]	@ (80077a8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d004      	beq.n	800775e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a14      	ldr	r2, [pc, #80]	@ (80077ac <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d115      	bne.n	800778a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007768:	051b      	lsls	r3, r3, #20
 800776a:	4313      	orrs	r3, r2
 800776c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	69db      	ldr	r3, [r3, #28]
 8007778:	4313      	orrs	r3, r2
 800777a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	6a1b      	ldr	r3, [r3, #32]
 8007786:	4313      	orrs	r3, r2
 8007788:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	68fa      	ldr	r2, [r7, #12]
 8007790:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2200      	movs	r2, #0
 8007796:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800779a:	2300      	movs	r3, #0
}
 800779c:	4618      	mov	r0, r3
 800779e:	3714      	adds	r7, #20
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr
 80077a8:	40012c00 	.word	0x40012c00
 80077ac:	40013400 	.word	0x40013400

080077b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b083      	sub	sp, #12
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80077b8:	bf00      	nop
 80077ba:	370c      	adds	r7, #12
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr

080077c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b083      	sub	sp, #12
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80077cc:	bf00      	nop
 80077ce:	370c      	adds	r7, #12
 80077d0:	46bd      	mov	sp, r7
 80077d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d6:	4770      	bx	lr

080077d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80077d8:	b480      	push	{r7}
 80077da:	b083      	sub	sp, #12
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80077e0:	bf00      	nop
 80077e2:	370c      	adds	r7, #12
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr

080077ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b082      	sub	sp, #8
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d101      	bne.n	80077fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077fa:	2301      	movs	r3, #1
 80077fc:	e040      	b.n	8007880 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007802:	2b00      	cmp	r3, #0
 8007804:	d106      	bne.n	8007814 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2200      	movs	r2, #0
 800780a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f7fb fae8 	bl	8002de4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2224      	movs	r2, #36	@ 0x24
 8007818:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	681a      	ldr	r2, [r3, #0]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f022 0201 	bic.w	r2, r2, #1
 8007828:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800782e:	2b00      	cmp	r3, #0
 8007830:	d002      	beq.n	8007838 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 fae0 	bl	8007df8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f000 f825 	bl	8007888 <UART_SetConfig>
 800783e:	4603      	mov	r3, r0
 8007840:	2b01      	cmp	r3, #1
 8007842:	d101      	bne.n	8007848 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007844:	2301      	movs	r3, #1
 8007846:	e01b      	b.n	8007880 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	685a      	ldr	r2, [r3, #4]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007856:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	689a      	ldr	r2, [r3, #8]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007866:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	681a      	ldr	r2, [r3, #0]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f042 0201 	orr.w	r2, r2, #1
 8007876:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f000 fb5f 	bl	8007f3c <UART_CheckIdleState>
 800787e:	4603      	mov	r3, r0
}
 8007880:	4618      	mov	r0, r3
 8007882:	3708      	adds	r7, #8
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007888:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800788c:	b08a      	sub	sp, #40	@ 0x28
 800788e:	af00      	add	r7, sp, #0
 8007890:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007892:	2300      	movs	r3, #0
 8007894:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	689a      	ldr	r2, [r3, #8]
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	691b      	ldr	r3, [r3, #16]
 80078a0:	431a      	orrs	r2, r3
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	695b      	ldr	r3, [r3, #20]
 80078a6:	431a      	orrs	r2, r3
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	69db      	ldr	r3, [r3, #28]
 80078ac:	4313      	orrs	r3, r2
 80078ae:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	681a      	ldr	r2, [r3, #0]
 80078b6:	4ba4      	ldr	r3, [pc, #656]	@ (8007b48 <UART_SetConfig+0x2c0>)
 80078b8:	4013      	ands	r3, r2
 80078ba:	68fa      	ldr	r2, [r7, #12]
 80078bc:	6812      	ldr	r2, [r2, #0]
 80078be:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80078c0:	430b      	orrs	r3, r1
 80078c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	68da      	ldr	r2, [r3, #12]
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	430a      	orrs	r2, r1
 80078d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	699b      	ldr	r3, [r3, #24]
 80078de:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a99      	ldr	r2, [pc, #612]	@ (8007b4c <UART_SetConfig+0x2c4>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d004      	beq.n	80078f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	6a1b      	ldr	r3, [r3, #32]
 80078ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078f0:	4313      	orrs	r3, r2
 80078f2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	689b      	ldr	r3, [r3, #8]
 80078fa:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007904:	430a      	orrs	r2, r1
 8007906:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a90      	ldr	r2, [pc, #576]	@ (8007b50 <UART_SetConfig+0x2c8>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d126      	bne.n	8007960 <UART_SetConfig+0xd8>
 8007912:	4b90      	ldr	r3, [pc, #576]	@ (8007b54 <UART_SetConfig+0x2cc>)
 8007914:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007918:	f003 0303 	and.w	r3, r3, #3
 800791c:	2b03      	cmp	r3, #3
 800791e:	d81b      	bhi.n	8007958 <UART_SetConfig+0xd0>
 8007920:	a201      	add	r2, pc, #4	@ (adr r2, 8007928 <UART_SetConfig+0xa0>)
 8007922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007926:	bf00      	nop
 8007928:	08007939 	.word	0x08007939
 800792c:	08007949 	.word	0x08007949
 8007930:	08007941 	.word	0x08007941
 8007934:	08007951 	.word	0x08007951
 8007938:	2301      	movs	r3, #1
 800793a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800793e:	e116      	b.n	8007b6e <UART_SetConfig+0x2e6>
 8007940:	2302      	movs	r3, #2
 8007942:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007946:	e112      	b.n	8007b6e <UART_SetConfig+0x2e6>
 8007948:	2304      	movs	r3, #4
 800794a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800794e:	e10e      	b.n	8007b6e <UART_SetConfig+0x2e6>
 8007950:	2308      	movs	r3, #8
 8007952:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007956:	e10a      	b.n	8007b6e <UART_SetConfig+0x2e6>
 8007958:	2310      	movs	r3, #16
 800795a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800795e:	e106      	b.n	8007b6e <UART_SetConfig+0x2e6>
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a7c      	ldr	r2, [pc, #496]	@ (8007b58 <UART_SetConfig+0x2d0>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d138      	bne.n	80079dc <UART_SetConfig+0x154>
 800796a:	4b7a      	ldr	r3, [pc, #488]	@ (8007b54 <UART_SetConfig+0x2cc>)
 800796c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007970:	f003 030c 	and.w	r3, r3, #12
 8007974:	2b0c      	cmp	r3, #12
 8007976:	d82d      	bhi.n	80079d4 <UART_SetConfig+0x14c>
 8007978:	a201      	add	r2, pc, #4	@ (adr r2, 8007980 <UART_SetConfig+0xf8>)
 800797a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800797e:	bf00      	nop
 8007980:	080079b5 	.word	0x080079b5
 8007984:	080079d5 	.word	0x080079d5
 8007988:	080079d5 	.word	0x080079d5
 800798c:	080079d5 	.word	0x080079d5
 8007990:	080079c5 	.word	0x080079c5
 8007994:	080079d5 	.word	0x080079d5
 8007998:	080079d5 	.word	0x080079d5
 800799c:	080079d5 	.word	0x080079d5
 80079a0:	080079bd 	.word	0x080079bd
 80079a4:	080079d5 	.word	0x080079d5
 80079a8:	080079d5 	.word	0x080079d5
 80079ac:	080079d5 	.word	0x080079d5
 80079b0:	080079cd 	.word	0x080079cd
 80079b4:	2300      	movs	r3, #0
 80079b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079ba:	e0d8      	b.n	8007b6e <UART_SetConfig+0x2e6>
 80079bc:	2302      	movs	r3, #2
 80079be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079c2:	e0d4      	b.n	8007b6e <UART_SetConfig+0x2e6>
 80079c4:	2304      	movs	r3, #4
 80079c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079ca:	e0d0      	b.n	8007b6e <UART_SetConfig+0x2e6>
 80079cc:	2308      	movs	r3, #8
 80079ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079d2:	e0cc      	b.n	8007b6e <UART_SetConfig+0x2e6>
 80079d4:	2310      	movs	r3, #16
 80079d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079da:	e0c8      	b.n	8007b6e <UART_SetConfig+0x2e6>
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a5e      	ldr	r2, [pc, #376]	@ (8007b5c <UART_SetConfig+0x2d4>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d125      	bne.n	8007a32 <UART_SetConfig+0x1aa>
 80079e6:	4b5b      	ldr	r3, [pc, #364]	@ (8007b54 <UART_SetConfig+0x2cc>)
 80079e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079ec:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80079f0:	2b30      	cmp	r3, #48	@ 0x30
 80079f2:	d016      	beq.n	8007a22 <UART_SetConfig+0x19a>
 80079f4:	2b30      	cmp	r3, #48	@ 0x30
 80079f6:	d818      	bhi.n	8007a2a <UART_SetConfig+0x1a2>
 80079f8:	2b20      	cmp	r3, #32
 80079fa:	d00a      	beq.n	8007a12 <UART_SetConfig+0x18a>
 80079fc:	2b20      	cmp	r3, #32
 80079fe:	d814      	bhi.n	8007a2a <UART_SetConfig+0x1a2>
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d002      	beq.n	8007a0a <UART_SetConfig+0x182>
 8007a04:	2b10      	cmp	r3, #16
 8007a06:	d008      	beq.n	8007a1a <UART_SetConfig+0x192>
 8007a08:	e00f      	b.n	8007a2a <UART_SetConfig+0x1a2>
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a10:	e0ad      	b.n	8007b6e <UART_SetConfig+0x2e6>
 8007a12:	2302      	movs	r3, #2
 8007a14:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a18:	e0a9      	b.n	8007b6e <UART_SetConfig+0x2e6>
 8007a1a:	2304      	movs	r3, #4
 8007a1c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a20:	e0a5      	b.n	8007b6e <UART_SetConfig+0x2e6>
 8007a22:	2308      	movs	r3, #8
 8007a24:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a28:	e0a1      	b.n	8007b6e <UART_SetConfig+0x2e6>
 8007a2a:	2310      	movs	r3, #16
 8007a2c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a30:	e09d      	b.n	8007b6e <UART_SetConfig+0x2e6>
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a4a      	ldr	r2, [pc, #296]	@ (8007b60 <UART_SetConfig+0x2d8>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d125      	bne.n	8007a88 <UART_SetConfig+0x200>
 8007a3c:	4b45      	ldr	r3, [pc, #276]	@ (8007b54 <UART_SetConfig+0x2cc>)
 8007a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a42:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007a46:	2bc0      	cmp	r3, #192	@ 0xc0
 8007a48:	d016      	beq.n	8007a78 <UART_SetConfig+0x1f0>
 8007a4a:	2bc0      	cmp	r3, #192	@ 0xc0
 8007a4c:	d818      	bhi.n	8007a80 <UART_SetConfig+0x1f8>
 8007a4e:	2b80      	cmp	r3, #128	@ 0x80
 8007a50:	d00a      	beq.n	8007a68 <UART_SetConfig+0x1e0>
 8007a52:	2b80      	cmp	r3, #128	@ 0x80
 8007a54:	d814      	bhi.n	8007a80 <UART_SetConfig+0x1f8>
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d002      	beq.n	8007a60 <UART_SetConfig+0x1d8>
 8007a5a:	2b40      	cmp	r3, #64	@ 0x40
 8007a5c:	d008      	beq.n	8007a70 <UART_SetConfig+0x1e8>
 8007a5e:	e00f      	b.n	8007a80 <UART_SetConfig+0x1f8>
 8007a60:	2300      	movs	r3, #0
 8007a62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a66:	e082      	b.n	8007b6e <UART_SetConfig+0x2e6>
 8007a68:	2302      	movs	r3, #2
 8007a6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a6e:	e07e      	b.n	8007b6e <UART_SetConfig+0x2e6>
 8007a70:	2304      	movs	r3, #4
 8007a72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a76:	e07a      	b.n	8007b6e <UART_SetConfig+0x2e6>
 8007a78:	2308      	movs	r3, #8
 8007a7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a7e:	e076      	b.n	8007b6e <UART_SetConfig+0x2e6>
 8007a80:	2310      	movs	r3, #16
 8007a82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a86:	e072      	b.n	8007b6e <UART_SetConfig+0x2e6>
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a35      	ldr	r2, [pc, #212]	@ (8007b64 <UART_SetConfig+0x2dc>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d12a      	bne.n	8007ae8 <UART_SetConfig+0x260>
 8007a92:	4b30      	ldr	r3, [pc, #192]	@ (8007b54 <UART_SetConfig+0x2cc>)
 8007a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a98:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a9c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007aa0:	d01a      	beq.n	8007ad8 <UART_SetConfig+0x250>
 8007aa2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007aa6:	d81b      	bhi.n	8007ae0 <UART_SetConfig+0x258>
 8007aa8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007aac:	d00c      	beq.n	8007ac8 <UART_SetConfig+0x240>
 8007aae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ab2:	d815      	bhi.n	8007ae0 <UART_SetConfig+0x258>
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d003      	beq.n	8007ac0 <UART_SetConfig+0x238>
 8007ab8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007abc:	d008      	beq.n	8007ad0 <UART_SetConfig+0x248>
 8007abe:	e00f      	b.n	8007ae0 <UART_SetConfig+0x258>
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ac6:	e052      	b.n	8007b6e <UART_SetConfig+0x2e6>
 8007ac8:	2302      	movs	r3, #2
 8007aca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ace:	e04e      	b.n	8007b6e <UART_SetConfig+0x2e6>
 8007ad0:	2304      	movs	r3, #4
 8007ad2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ad6:	e04a      	b.n	8007b6e <UART_SetConfig+0x2e6>
 8007ad8:	2308      	movs	r3, #8
 8007ada:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ade:	e046      	b.n	8007b6e <UART_SetConfig+0x2e6>
 8007ae0:	2310      	movs	r3, #16
 8007ae2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ae6:	e042      	b.n	8007b6e <UART_SetConfig+0x2e6>
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a17      	ldr	r2, [pc, #92]	@ (8007b4c <UART_SetConfig+0x2c4>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d13a      	bne.n	8007b68 <UART_SetConfig+0x2e0>
 8007af2:	4b18      	ldr	r3, [pc, #96]	@ (8007b54 <UART_SetConfig+0x2cc>)
 8007af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007af8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007afc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007b00:	d01a      	beq.n	8007b38 <UART_SetConfig+0x2b0>
 8007b02:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007b06:	d81b      	bhi.n	8007b40 <UART_SetConfig+0x2b8>
 8007b08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b0c:	d00c      	beq.n	8007b28 <UART_SetConfig+0x2a0>
 8007b0e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b12:	d815      	bhi.n	8007b40 <UART_SetConfig+0x2b8>
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d003      	beq.n	8007b20 <UART_SetConfig+0x298>
 8007b18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b1c:	d008      	beq.n	8007b30 <UART_SetConfig+0x2a8>
 8007b1e:	e00f      	b.n	8007b40 <UART_SetConfig+0x2b8>
 8007b20:	2300      	movs	r3, #0
 8007b22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b26:	e022      	b.n	8007b6e <UART_SetConfig+0x2e6>
 8007b28:	2302      	movs	r3, #2
 8007b2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b2e:	e01e      	b.n	8007b6e <UART_SetConfig+0x2e6>
 8007b30:	2304      	movs	r3, #4
 8007b32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b36:	e01a      	b.n	8007b6e <UART_SetConfig+0x2e6>
 8007b38:	2308      	movs	r3, #8
 8007b3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b3e:	e016      	b.n	8007b6e <UART_SetConfig+0x2e6>
 8007b40:	2310      	movs	r3, #16
 8007b42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b46:	e012      	b.n	8007b6e <UART_SetConfig+0x2e6>
 8007b48:	efff69f3 	.word	0xefff69f3
 8007b4c:	40008000 	.word	0x40008000
 8007b50:	40013800 	.word	0x40013800
 8007b54:	40021000 	.word	0x40021000
 8007b58:	40004400 	.word	0x40004400
 8007b5c:	40004800 	.word	0x40004800
 8007b60:	40004c00 	.word	0x40004c00
 8007b64:	40005000 	.word	0x40005000
 8007b68:	2310      	movs	r3, #16
 8007b6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a9f      	ldr	r2, [pc, #636]	@ (8007df0 <UART_SetConfig+0x568>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d17a      	bne.n	8007c6e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007b78:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007b7c:	2b08      	cmp	r3, #8
 8007b7e:	d824      	bhi.n	8007bca <UART_SetConfig+0x342>
 8007b80:	a201      	add	r2, pc, #4	@ (adr r2, 8007b88 <UART_SetConfig+0x300>)
 8007b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b86:	bf00      	nop
 8007b88:	08007bad 	.word	0x08007bad
 8007b8c:	08007bcb 	.word	0x08007bcb
 8007b90:	08007bb5 	.word	0x08007bb5
 8007b94:	08007bcb 	.word	0x08007bcb
 8007b98:	08007bbb 	.word	0x08007bbb
 8007b9c:	08007bcb 	.word	0x08007bcb
 8007ba0:	08007bcb 	.word	0x08007bcb
 8007ba4:	08007bcb 	.word	0x08007bcb
 8007ba8:	08007bc3 	.word	0x08007bc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007bac:	f7fd fa24 	bl	8004ff8 <HAL_RCC_GetPCLK1Freq>
 8007bb0:	61f8      	str	r0, [r7, #28]
        break;
 8007bb2:	e010      	b.n	8007bd6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007bb4:	4b8f      	ldr	r3, [pc, #572]	@ (8007df4 <UART_SetConfig+0x56c>)
 8007bb6:	61fb      	str	r3, [r7, #28]
        break;
 8007bb8:	e00d      	b.n	8007bd6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007bba:	f7fd f985 	bl	8004ec8 <HAL_RCC_GetSysClockFreq>
 8007bbe:	61f8      	str	r0, [r7, #28]
        break;
 8007bc0:	e009      	b.n	8007bd6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007bc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007bc6:	61fb      	str	r3, [r7, #28]
        break;
 8007bc8:	e005      	b.n	8007bd6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007bd4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007bd6:	69fb      	ldr	r3, [r7, #28]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	f000 80fb 	beq.w	8007dd4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	685a      	ldr	r2, [r3, #4]
 8007be2:	4613      	mov	r3, r2
 8007be4:	005b      	lsls	r3, r3, #1
 8007be6:	4413      	add	r3, r2
 8007be8:	69fa      	ldr	r2, [r7, #28]
 8007bea:	429a      	cmp	r2, r3
 8007bec:	d305      	bcc.n	8007bfa <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007bf4:	69fa      	ldr	r2, [r7, #28]
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	d903      	bls.n	8007c02 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007c00:	e0e8      	b.n	8007dd4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007c02:	69fb      	ldr	r3, [r7, #28]
 8007c04:	2200      	movs	r2, #0
 8007c06:	461c      	mov	r4, r3
 8007c08:	4615      	mov	r5, r2
 8007c0a:	f04f 0200 	mov.w	r2, #0
 8007c0e:	f04f 0300 	mov.w	r3, #0
 8007c12:	022b      	lsls	r3, r5, #8
 8007c14:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007c18:	0222      	lsls	r2, r4, #8
 8007c1a:	68f9      	ldr	r1, [r7, #12]
 8007c1c:	6849      	ldr	r1, [r1, #4]
 8007c1e:	0849      	lsrs	r1, r1, #1
 8007c20:	2000      	movs	r0, #0
 8007c22:	4688      	mov	r8, r1
 8007c24:	4681      	mov	r9, r0
 8007c26:	eb12 0a08 	adds.w	sl, r2, r8
 8007c2a:	eb43 0b09 	adc.w	fp, r3, r9
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	2200      	movs	r2, #0
 8007c34:	603b      	str	r3, [r7, #0]
 8007c36:	607a      	str	r2, [r7, #4]
 8007c38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c3c:	4650      	mov	r0, sl
 8007c3e:	4659      	mov	r1, fp
 8007c40:	f7f9 f822 	bl	8000c88 <__aeabi_uldivmod>
 8007c44:	4602      	mov	r2, r0
 8007c46:	460b      	mov	r3, r1
 8007c48:	4613      	mov	r3, r2
 8007c4a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007c4c:	69bb      	ldr	r3, [r7, #24]
 8007c4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007c52:	d308      	bcc.n	8007c66 <UART_SetConfig+0x3de>
 8007c54:	69bb      	ldr	r3, [r7, #24]
 8007c56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c5a:	d204      	bcs.n	8007c66 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	69ba      	ldr	r2, [r7, #24]
 8007c62:	60da      	str	r2, [r3, #12]
 8007c64:	e0b6      	b.n	8007dd4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007c66:	2301      	movs	r3, #1
 8007c68:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007c6c:	e0b2      	b.n	8007dd4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	69db      	ldr	r3, [r3, #28]
 8007c72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c76:	d15e      	bne.n	8007d36 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007c78:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007c7c:	2b08      	cmp	r3, #8
 8007c7e:	d828      	bhi.n	8007cd2 <UART_SetConfig+0x44a>
 8007c80:	a201      	add	r2, pc, #4	@ (adr r2, 8007c88 <UART_SetConfig+0x400>)
 8007c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c86:	bf00      	nop
 8007c88:	08007cad 	.word	0x08007cad
 8007c8c:	08007cb5 	.word	0x08007cb5
 8007c90:	08007cbd 	.word	0x08007cbd
 8007c94:	08007cd3 	.word	0x08007cd3
 8007c98:	08007cc3 	.word	0x08007cc3
 8007c9c:	08007cd3 	.word	0x08007cd3
 8007ca0:	08007cd3 	.word	0x08007cd3
 8007ca4:	08007cd3 	.word	0x08007cd3
 8007ca8:	08007ccb 	.word	0x08007ccb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007cac:	f7fd f9a4 	bl	8004ff8 <HAL_RCC_GetPCLK1Freq>
 8007cb0:	61f8      	str	r0, [r7, #28]
        break;
 8007cb2:	e014      	b.n	8007cde <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007cb4:	f7fd f9b6 	bl	8005024 <HAL_RCC_GetPCLK2Freq>
 8007cb8:	61f8      	str	r0, [r7, #28]
        break;
 8007cba:	e010      	b.n	8007cde <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007cbc:	4b4d      	ldr	r3, [pc, #308]	@ (8007df4 <UART_SetConfig+0x56c>)
 8007cbe:	61fb      	str	r3, [r7, #28]
        break;
 8007cc0:	e00d      	b.n	8007cde <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007cc2:	f7fd f901 	bl	8004ec8 <HAL_RCC_GetSysClockFreq>
 8007cc6:	61f8      	str	r0, [r7, #28]
        break;
 8007cc8:	e009      	b.n	8007cde <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007cce:	61fb      	str	r3, [r7, #28]
        break;
 8007cd0:	e005      	b.n	8007cde <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007cdc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007cde:	69fb      	ldr	r3, [r7, #28]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d077      	beq.n	8007dd4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007ce4:	69fb      	ldr	r3, [r7, #28]
 8007ce6:	005a      	lsls	r2, r3, #1
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	085b      	lsrs	r3, r3, #1
 8007cee:	441a      	add	r2, r3
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cf8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007cfa:	69bb      	ldr	r3, [r7, #24]
 8007cfc:	2b0f      	cmp	r3, #15
 8007cfe:	d916      	bls.n	8007d2e <UART_SetConfig+0x4a6>
 8007d00:	69bb      	ldr	r3, [r7, #24]
 8007d02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d06:	d212      	bcs.n	8007d2e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007d08:	69bb      	ldr	r3, [r7, #24]
 8007d0a:	b29b      	uxth	r3, r3
 8007d0c:	f023 030f 	bic.w	r3, r3, #15
 8007d10:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007d12:	69bb      	ldr	r3, [r7, #24]
 8007d14:	085b      	lsrs	r3, r3, #1
 8007d16:	b29b      	uxth	r3, r3
 8007d18:	f003 0307 	and.w	r3, r3, #7
 8007d1c:	b29a      	uxth	r2, r3
 8007d1e:	8afb      	ldrh	r3, [r7, #22]
 8007d20:	4313      	orrs	r3, r2
 8007d22:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	8afa      	ldrh	r2, [r7, #22]
 8007d2a:	60da      	str	r2, [r3, #12]
 8007d2c:	e052      	b.n	8007dd4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007d34:	e04e      	b.n	8007dd4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007d36:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007d3a:	2b08      	cmp	r3, #8
 8007d3c:	d827      	bhi.n	8007d8e <UART_SetConfig+0x506>
 8007d3e:	a201      	add	r2, pc, #4	@ (adr r2, 8007d44 <UART_SetConfig+0x4bc>)
 8007d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d44:	08007d69 	.word	0x08007d69
 8007d48:	08007d71 	.word	0x08007d71
 8007d4c:	08007d79 	.word	0x08007d79
 8007d50:	08007d8f 	.word	0x08007d8f
 8007d54:	08007d7f 	.word	0x08007d7f
 8007d58:	08007d8f 	.word	0x08007d8f
 8007d5c:	08007d8f 	.word	0x08007d8f
 8007d60:	08007d8f 	.word	0x08007d8f
 8007d64:	08007d87 	.word	0x08007d87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d68:	f7fd f946 	bl	8004ff8 <HAL_RCC_GetPCLK1Freq>
 8007d6c:	61f8      	str	r0, [r7, #28]
        break;
 8007d6e:	e014      	b.n	8007d9a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d70:	f7fd f958 	bl	8005024 <HAL_RCC_GetPCLK2Freq>
 8007d74:	61f8      	str	r0, [r7, #28]
        break;
 8007d76:	e010      	b.n	8007d9a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d78:	4b1e      	ldr	r3, [pc, #120]	@ (8007df4 <UART_SetConfig+0x56c>)
 8007d7a:	61fb      	str	r3, [r7, #28]
        break;
 8007d7c:	e00d      	b.n	8007d9a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d7e:	f7fd f8a3 	bl	8004ec8 <HAL_RCC_GetSysClockFreq>
 8007d82:	61f8      	str	r0, [r7, #28]
        break;
 8007d84:	e009      	b.n	8007d9a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d8a:	61fb      	str	r3, [r7, #28]
        break;
 8007d8c:	e005      	b.n	8007d9a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007d92:	2301      	movs	r3, #1
 8007d94:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007d98:	bf00      	nop
    }

    if (pclk != 0U)
 8007d9a:	69fb      	ldr	r3, [r7, #28]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d019      	beq.n	8007dd4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	085a      	lsrs	r2, r3, #1
 8007da6:	69fb      	ldr	r3, [r7, #28]
 8007da8:	441a      	add	r2, r3
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8007db2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007db4:	69bb      	ldr	r3, [r7, #24]
 8007db6:	2b0f      	cmp	r3, #15
 8007db8:	d909      	bls.n	8007dce <UART_SetConfig+0x546>
 8007dba:	69bb      	ldr	r3, [r7, #24]
 8007dbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007dc0:	d205      	bcs.n	8007dce <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007dc2:	69bb      	ldr	r3, [r7, #24]
 8007dc4:	b29a      	uxth	r2, r3
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	60da      	str	r2, [r3, #12]
 8007dcc:	e002      	b.n	8007dd4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007dce:	2301      	movs	r3, #1
 8007dd0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007de0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3728      	adds	r7, #40	@ 0x28
 8007de8:	46bd      	mov	sp, r7
 8007dea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007dee:	bf00      	nop
 8007df0:	40008000 	.word	0x40008000
 8007df4:	00f42400 	.word	0x00f42400

08007df8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b083      	sub	sp, #12
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e04:	f003 0308 	and.w	r3, r3, #8
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d00a      	beq.n	8007e22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	430a      	orrs	r2, r1
 8007e20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e26:	f003 0301 	and.w	r3, r3, #1
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d00a      	beq.n	8007e44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	430a      	orrs	r2, r1
 8007e42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e48:	f003 0302 	and.w	r3, r3, #2
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d00a      	beq.n	8007e66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	430a      	orrs	r2, r1
 8007e64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e6a:	f003 0304 	and.w	r3, r3, #4
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d00a      	beq.n	8007e88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	430a      	orrs	r2, r1
 8007e86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e8c:	f003 0310 	and.w	r3, r3, #16
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d00a      	beq.n	8007eaa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	689b      	ldr	r3, [r3, #8]
 8007e9a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	430a      	orrs	r2, r1
 8007ea8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eae:	f003 0320 	and.w	r3, r3, #32
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d00a      	beq.n	8007ecc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	689b      	ldr	r3, [r3, #8]
 8007ebc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	430a      	orrs	r2, r1
 8007eca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ed0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d01a      	beq.n	8007f0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	430a      	orrs	r2, r1
 8007eec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ef2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ef6:	d10a      	bne.n	8007f0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	430a      	orrs	r2, r1
 8007f0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d00a      	beq.n	8007f30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	430a      	orrs	r2, r1
 8007f2e:	605a      	str	r2, [r3, #4]
  }
}
 8007f30:	bf00      	nop
 8007f32:	370c      	adds	r7, #12
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr

08007f3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b098      	sub	sp, #96	@ 0x60
 8007f40:	af02      	add	r7, sp, #8
 8007f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2200      	movs	r2, #0
 8007f48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007f4c:	f7fb f954 	bl	80031f8 <HAL_GetTick>
 8007f50:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f003 0308 	and.w	r3, r3, #8
 8007f5c:	2b08      	cmp	r3, #8
 8007f5e:	d12e      	bne.n	8007fbe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f60:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007f64:	9300      	str	r3, [sp, #0]
 8007f66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f68:	2200      	movs	r2, #0
 8007f6a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f000 f88c 	bl	800808c <UART_WaitOnFlagUntilTimeout>
 8007f74:	4603      	mov	r3, r0
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d021      	beq.n	8007fbe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f82:	e853 3f00 	ldrex	r3, [r3]
 8007f86:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007f88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007f8e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	461a      	mov	r2, r3
 8007f96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f98:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f9a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f9c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007f9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007fa0:	e841 2300 	strex	r3, r2, [r1]
 8007fa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007fa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d1e6      	bne.n	8007f7a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2220      	movs	r2, #32
 8007fb0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007fba:	2303      	movs	r3, #3
 8007fbc:	e062      	b.n	8008084 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f003 0304 	and.w	r3, r3, #4
 8007fc8:	2b04      	cmp	r3, #4
 8007fca:	d149      	bne.n	8008060 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007fcc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007fd0:	9300      	str	r3, [sp, #0]
 8007fd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f000 f856 	bl	800808c <UART_WaitOnFlagUntilTimeout>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d03c      	beq.n	8008060 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fee:	e853 3f00 	ldrex	r3, [r3]
 8007ff2:	623b      	str	r3, [r7, #32]
   return(result);
 8007ff4:	6a3b      	ldr	r3, [r7, #32]
 8007ff6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ffa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	461a      	mov	r2, r3
 8008002:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008004:	633b      	str	r3, [r7, #48]	@ 0x30
 8008006:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008008:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800800a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800800c:	e841 2300 	strex	r3, r2, [r1]
 8008010:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008014:	2b00      	cmp	r3, #0
 8008016:	d1e6      	bne.n	8007fe6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	3308      	adds	r3, #8
 800801e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	e853 3f00 	ldrex	r3, [r3]
 8008026:	60fb      	str	r3, [r7, #12]
   return(result);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	f023 0301 	bic.w	r3, r3, #1
 800802e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	3308      	adds	r3, #8
 8008036:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008038:	61fa      	str	r2, [r7, #28]
 800803a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800803c:	69b9      	ldr	r1, [r7, #24]
 800803e:	69fa      	ldr	r2, [r7, #28]
 8008040:	e841 2300 	strex	r3, r2, [r1]
 8008044:	617b      	str	r3, [r7, #20]
   return(result);
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d1e5      	bne.n	8008018 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2220      	movs	r2, #32
 8008050:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2200      	movs	r2, #0
 8008058:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800805c:	2303      	movs	r3, #3
 800805e:	e011      	b.n	8008084 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2220      	movs	r2, #32
 8008064:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2220      	movs	r2, #32
 800806a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2200      	movs	r2, #0
 8008072:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2200      	movs	r2, #0
 8008078:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2200      	movs	r2, #0
 800807e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8008082:	2300      	movs	r3, #0
}
 8008084:	4618      	mov	r0, r3
 8008086:	3758      	adds	r7, #88	@ 0x58
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}

0800808c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b084      	sub	sp, #16
 8008090:	af00      	add	r7, sp, #0
 8008092:	60f8      	str	r0, [r7, #12]
 8008094:	60b9      	str	r1, [r7, #8]
 8008096:	603b      	str	r3, [r7, #0]
 8008098:	4613      	mov	r3, r2
 800809a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800809c:	e04f      	b.n	800813e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800809e:	69bb      	ldr	r3, [r7, #24]
 80080a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80080a4:	d04b      	beq.n	800813e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080a6:	f7fb f8a7 	bl	80031f8 <HAL_GetTick>
 80080aa:	4602      	mov	r2, r0
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	1ad3      	subs	r3, r2, r3
 80080b0:	69ba      	ldr	r2, [r7, #24]
 80080b2:	429a      	cmp	r2, r3
 80080b4:	d302      	bcc.n	80080bc <UART_WaitOnFlagUntilTimeout+0x30>
 80080b6:	69bb      	ldr	r3, [r7, #24]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d101      	bne.n	80080c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80080bc:	2303      	movs	r3, #3
 80080be:	e04e      	b.n	800815e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f003 0304 	and.w	r3, r3, #4
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d037      	beq.n	800813e <UART_WaitOnFlagUntilTimeout+0xb2>
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	2b80      	cmp	r3, #128	@ 0x80
 80080d2:	d034      	beq.n	800813e <UART_WaitOnFlagUntilTimeout+0xb2>
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	2b40      	cmp	r3, #64	@ 0x40
 80080d8:	d031      	beq.n	800813e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	69db      	ldr	r3, [r3, #28]
 80080e0:	f003 0308 	and.w	r3, r3, #8
 80080e4:	2b08      	cmp	r3, #8
 80080e6:	d110      	bne.n	800810a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	2208      	movs	r2, #8
 80080ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80080f0:	68f8      	ldr	r0, [r7, #12]
 80080f2:	f000 f838 	bl	8008166 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2208      	movs	r2, #8
 80080fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2200      	movs	r2, #0
 8008102:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8008106:	2301      	movs	r3, #1
 8008108:	e029      	b.n	800815e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	69db      	ldr	r3, [r3, #28]
 8008110:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008114:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008118:	d111      	bne.n	800813e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008122:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008124:	68f8      	ldr	r0, [r7, #12]
 8008126:	f000 f81e 	bl	8008166 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	2220      	movs	r2, #32
 800812e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	2200      	movs	r2, #0
 8008136:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800813a:	2303      	movs	r3, #3
 800813c:	e00f      	b.n	800815e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	69da      	ldr	r2, [r3, #28]
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	4013      	ands	r3, r2
 8008148:	68ba      	ldr	r2, [r7, #8]
 800814a:	429a      	cmp	r2, r3
 800814c:	bf0c      	ite	eq
 800814e:	2301      	moveq	r3, #1
 8008150:	2300      	movne	r3, #0
 8008152:	b2db      	uxtb	r3, r3
 8008154:	461a      	mov	r2, r3
 8008156:	79fb      	ldrb	r3, [r7, #7]
 8008158:	429a      	cmp	r2, r3
 800815a:	d0a0      	beq.n	800809e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800815c:	2300      	movs	r3, #0
}
 800815e:	4618      	mov	r0, r3
 8008160:	3710      	adds	r7, #16
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}

08008166 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008166:	b480      	push	{r7}
 8008168:	b095      	sub	sp, #84	@ 0x54
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008174:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008176:	e853 3f00 	ldrex	r3, [r3]
 800817a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800817c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800817e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008182:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	461a      	mov	r2, r3
 800818a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800818c:	643b      	str	r3, [r7, #64]	@ 0x40
 800818e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008190:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008192:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008194:	e841 2300 	strex	r3, r2, [r1]
 8008198:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800819a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800819c:	2b00      	cmp	r3, #0
 800819e:	d1e6      	bne.n	800816e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	3308      	adds	r3, #8
 80081a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081a8:	6a3b      	ldr	r3, [r7, #32]
 80081aa:	e853 3f00 	ldrex	r3, [r3]
 80081ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80081b0:	69fb      	ldr	r3, [r7, #28]
 80081b2:	f023 0301 	bic.w	r3, r3, #1
 80081b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	3308      	adds	r3, #8
 80081be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80081c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80081c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80081c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80081c8:	e841 2300 	strex	r3, r2, [r1]
 80081cc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80081ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d1e5      	bne.n	80081a0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081d8:	2b01      	cmp	r3, #1
 80081da:	d118      	bne.n	800820e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	e853 3f00 	ldrex	r3, [r3]
 80081e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	f023 0310 	bic.w	r3, r3, #16
 80081f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	461a      	mov	r2, r3
 80081f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80081fa:	61bb      	str	r3, [r7, #24]
 80081fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081fe:	6979      	ldr	r1, [r7, #20]
 8008200:	69ba      	ldr	r2, [r7, #24]
 8008202:	e841 2300 	strex	r3, r2, [r1]
 8008206:	613b      	str	r3, [r7, #16]
   return(result);
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d1e6      	bne.n	80081dc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2220      	movs	r2, #32
 8008212:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2200      	movs	r2, #0
 800821a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2200      	movs	r2, #0
 8008220:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008222:	bf00      	nop
 8008224:	3754      	adds	r7, #84	@ 0x54
 8008226:	46bd      	mov	sp, r7
 8008228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822c:	4770      	bx	lr

0800822e <__cvt>:
 800822e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008232:	ec57 6b10 	vmov	r6, r7, d0
 8008236:	2f00      	cmp	r7, #0
 8008238:	460c      	mov	r4, r1
 800823a:	4619      	mov	r1, r3
 800823c:	463b      	mov	r3, r7
 800823e:	bfbb      	ittet	lt
 8008240:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008244:	461f      	movlt	r7, r3
 8008246:	2300      	movge	r3, #0
 8008248:	232d      	movlt	r3, #45	@ 0x2d
 800824a:	700b      	strb	r3, [r1, #0]
 800824c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800824e:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008252:	4691      	mov	r9, r2
 8008254:	f023 0820 	bic.w	r8, r3, #32
 8008258:	bfbc      	itt	lt
 800825a:	4632      	movlt	r2, r6
 800825c:	4616      	movlt	r6, r2
 800825e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008262:	d005      	beq.n	8008270 <__cvt+0x42>
 8008264:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008268:	d100      	bne.n	800826c <__cvt+0x3e>
 800826a:	3401      	adds	r4, #1
 800826c:	2102      	movs	r1, #2
 800826e:	e000      	b.n	8008272 <__cvt+0x44>
 8008270:	2103      	movs	r1, #3
 8008272:	ab03      	add	r3, sp, #12
 8008274:	9301      	str	r3, [sp, #4]
 8008276:	ab02      	add	r3, sp, #8
 8008278:	9300      	str	r3, [sp, #0]
 800827a:	ec47 6b10 	vmov	d0, r6, r7
 800827e:	4653      	mov	r3, sl
 8008280:	4622      	mov	r2, r4
 8008282:	f001 fe95 	bl	8009fb0 <_dtoa_r>
 8008286:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800828a:	4605      	mov	r5, r0
 800828c:	d119      	bne.n	80082c2 <__cvt+0x94>
 800828e:	f019 0f01 	tst.w	r9, #1
 8008292:	d00e      	beq.n	80082b2 <__cvt+0x84>
 8008294:	eb00 0904 	add.w	r9, r0, r4
 8008298:	2200      	movs	r2, #0
 800829a:	2300      	movs	r3, #0
 800829c:	4630      	mov	r0, r6
 800829e:	4639      	mov	r1, r7
 80082a0:	f7f8 fc12 	bl	8000ac8 <__aeabi_dcmpeq>
 80082a4:	b108      	cbz	r0, 80082aa <__cvt+0x7c>
 80082a6:	f8cd 900c 	str.w	r9, [sp, #12]
 80082aa:	2230      	movs	r2, #48	@ 0x30
 80082ac:	9b03      	ldr	r3, [sp, #12]
 80082ae:	454b      	cmp	r3, r9
 80082b0:	d31e      	bcc.n	80082f0 <__cvt+0xc2>
 80082b2:	9b03      	ldr	r3, [sp, #12]
 80082b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80082b6:	1b5b      	subs	r3, r3, r5
 80082b8:	4628      	mov	r0, r5
 80082ba:	6013      	str	r3, [r2, #0]
 80082bc:	b004      	add	sp, #16
 80082be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082c2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80082c6:	eb00 0904 	add.w	r9, r0, r4
 80082ca:	d1e5      	bne.n	8008298 <__cvt+0x6a>
 80082cc:	7803      	ldrb	r3, [r0, #0]
 80082ce:	2b30      	cmp	r3, #48	@ 0x30
 80082d0:	d10a      	bne.n	80082e8 <__cvt+0xba>
 80082d2:	2200      	movs	r2, #0
 80082d4:	2300      	movs	r3, #0
 80082d6:	4630      	mov	r0, r6
 80082d8:	4639      	mov	r1, r7
 80082da:	f7f8 fbf5 	bl	8000ac8 <__aeabi_dcmpeq>
 80082de:	b918      	cbnz	r0, 80082e8 <__cvt+0xba>
 80082e0:	f1c4 0401 	rsb	r4, r4, #1
 80082e4:	f8ca 4000 	str.w	r4, [sl]
 80082e8:	f8da 3000 	ldr.w	r3, [sl]
 80082ec:	4499      	add	r9, r3
 80082ee:	e7d3      	b.n	8008298 <__cvt+0x6a>
 80082f0:	1c59      	adds	r1, r3, #1
 80082f2:	9103      	str	r1, [sp, #12]
 80082f4:	701a      	strb	r2, [r3, #0]
 80082f6:	e7d9      	b.n	80082ac <__cvt+0x7e>

080082f8 <__exponent>:
 80082f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082fa:	2900      	cmp	r1, #0
 80082fc:	bfba      	itte	lt
 80082fe:	4249      	neglt	r1, r1
 8008300:	232d      	movlt	r3, #45	@ 0x2d
 8008302:	232b      	movge	r3, #43	@ 0x2b
 8008304:	2909      	cmp	r1, #9
 8008306:	7002      	strb	r2, [r0, #0]
 8008308:	7043      	strb	r3, [r0, #1]
 800830a:	dd29      	ble.n	8008360 <__exponent+0x68>
 800830c:	f10d 0307 	add.w	r3, sp, #7
 8008310:	461d      	mov	r5, r3
 8008312:	270a      	movs	r7, #10
 8008314:	461a      	mov	r2, r3
 8008316:	fbb1 f6f7 	udiv	r6, r1, r7
 800831a:	fb07 1416 	mls	r4, r7, r6, r1
 800831e:	3430      	adds	r4, #48	@ 0x30
 8008320:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008324:	460c      	mov	r4, r1
 8008326:	2c63      	cmp	r4, #99	@ 0x63
 8008328:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800832c:	4631      	mov	r1, r6
 800832e:	dcf1      	bgt.n	8008314 <__exponent+0x1c>
 8008330:	3130      	adds	r1, #48	@ 0x30
 8008332:	1e94      	subs	r4, r2, #2
 8008334:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008338:	1c41      	adds	r1, r0, #1
 800833a:	4623      	mov	r3, r4
 800833c:	42ab      	cmp	r3, r5
 800833e:	d30a      	bcc.n	8008356 <__exponent+0x5e>
 8008340:	f10d 0309 	add.w	r3, sp, #9
 8008344:	1a9b      	subs	r3, r3, r2
 8008346:	42ac      	cmp	r4, r5
 8008348:	bf88      	it	hi
 800834a:	2300      	movhi	r3, #0
 800834c:	3302      	adds	r3, #2
 800834e:	4403      	add	r3, r0
 8008350:	1a18      	subs	r0, r3, r0
 8008352:	b003      	add	sp, #12
 8008354:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008356:	f813 6b01 	ldrb.w	r6, [r3], #1
 800835a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800835e:	e7ed      	b.n	800833c <__exponent+0x44>
 8008360:	2330      	movs	r3, #48	@ 0x30
 8008362:	3130      	adds	r1, #48	@ 0x30
 8008364:	7083      	strb	r3, [r0, #2]
 8008366:	70c1      	strb	r1, [r0, #3]
 8008368:	1d03      	adds	r3, r0, #4
 800836a:	e7f1      	b.n	8008350 <__exponent+0x58>

0800836c <_printf_float>:
 800836c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008370:	b08d      	sub	sp, #52	@ 0x34
 8008372:	460c      	mov	r4, r1
 8008374:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008378:	4616      	mov	r6, r2
 800837a:	461f      	mov	r7, r3
 800837c:	4605      	mov	r5, r0
 800837e:	f001 fd6b 	bl	8009e58 <_localeconv_r>
 8008382:	6803      	ldr	r3, [r0, #0]
 8008384:	9304      	str	r3, [sp, #16]
 8008386:	4618      	mov	r0, r3
 8008388:	f7f7 ff72 	bl	8000270 <strlen>
 800838c:	2300      	movs	r3, #0
 800838e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008390:	f8d8 3000 	ldr.w	r3, [r8]
 8008394:	9005      	str	r0, [sp, #20]
 8008396:	3307      	adds	r3, #7
 8008398:	f023 0307 	bic.w	r3, r3, #7
 800839c:	f103 0208 	add.w	r2, r3, #8
 80083a0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80083a4:	f8d4 b000 	ldr.w	fp, [r4]
 80083a8:	f8c8 2000 	str.w	r2, [r8]
 80083ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 80083b0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80083b4:	9307      	str	r3, [sp, #28]
 80083b6:	f8cd 8018 	str.w	r8, [sp, #24]
 80083ba:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80083be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80083c2:	4b9c      	ldr	r3, [pc, #624]	@ (8008634 <_printf_float+0x2c8>)
 80083c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80083c8:	f7f8 fbb0 	bl	8000b2c <__aeabi_dcmpun>
 80083cc:	bb70      	cbnz	r0, 800842c <_printf_float+0xc0>
 80083ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80083d2:	4b98      	ldr	r3, [pc, #608]	@ (8008634 <_printf_float+0x2c8>)
 80083d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80083d8:	f7f8 fb8a 	bl	8000af0 <__aeabi_dcmple>
 80083dc:	bb30      	cbnz	r0, 800842c <_printf_float+0xc0>
 80083de:	2200      	movs	r2, #0
 80083e0:	2300      	movs	r3, #0
 80083e2:	4640      	mov	r0, r8
 80083e4:	4649      	mov	r1, r9
 80083e6:	f7f8 fb79 	bl	8000adc <__aeabi_dcmplt>
 80083ea:	b110      	cbz	r0, 80083f2 <_printf_float+0x86>
 80083ec:	232d      	movs	r3, #45	@ 0x2d
 80083ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80083f2:	4a91      	ldr	r2, [pc, #580]	@ (8008638 <_printf_float+0x2cc>)
 80083f4:	4b91      	ldr	r3, [pc, #580]	@ (800863c <_printf_float+0x2d0>)
 80083f6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80083fa:	bf8c      	ite	hi
 80083fc:	4690      	movhi	r8, r2
 80083fe:	4698      	movls	r8, r3
 8008400:	2303      	movs	r3, #3
 8008402:	6123      	str	r3, [r4, #16]
 8008404:	f02b 0304 	bic.w	r3, fp, #4
 8008408:	6023      	str	r3, [r4, #0]
 800840a:	f04f 0900 	mov.w	r9, #0
 800840e:	9700      	str	r7, [sp, #0]
 8008410:	4633      	mov	r3, r6
 8008412:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008414:	4621      	mov	r1, r4
 8008416:	4628      	mov	r0, r5
 8008418:	f000 f9d2 	bl	80087c0 <_printf_common>
 800841c:	3001      	adds	r0, #1
 800841e:	f040 808d 	bne.w	800853c <_printf_float+0x1d0>
 8008422:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008426:	b00d      	add	sp, #52	@ 0x34
 8008428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800842c:	4642      	mov	r2, r8
 800842e:	464b      	mov	r3, r9
 8008430:	4640      	mov	r0, r8
 8008432:	4649      	mov	r1, r9
 8008434:	f7f8 fb7a 	bl	8000b2c <__aeabi_dcmpun>
 8008438:	b140      	cbz	r0, 800844c <_printf_float+0xe0>
 800843a:	464b      	mov	r3, r9
 800843c:	2b00      	cmp	r3, #0
 800843e:	bfbc      	itt	lt
 8008440:	232d      	movlt	r3, #45	@ 0x2d
 8008442:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008446:	4a7e      	ldr	r2, [pc, #504]	@ (8008640 <_printf_float+0x2d4>)
 8008448:	4b7e      	ldr	r3, [pc, #504]	@ (8008644 <_printf_float+0x2d8>)
 800844a:	e7d4      	b.n	80083f6 <_printf_float+0x8a>
 800844c:	6863      	ldr	r3, [r4, #4]
 800844e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008452:	9206      	str	r2, [sp, #24]
 8008454:	1c5a      	adds	r2, r3, #1
 8008456:	d13b      	bne.n	80084d0 <_printf_float+0x164>
 8008458:	2306      	movs	r3, #6
 800845a:	6063      	str	r3, [r4, #4]
 800845c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008460:	2300      	movs	r3, #0
 8008462:	6022      	str	r2, [r4, #0]
 8008464:	9303      	str	r3, [sp, #12]
 8008466:	ab0a      	add	r3, sp, #40	@ 0x28
 8008468:	e9cd a301 	strd	sl, r3, [sp, #4]
 800846c:	ab09      	add	r3, sp, #36	@ 0x24
 800846e:	9300      	str	r3, [sp, #0]
 8008470:	6861      	ldr	r1, [r4, #4]
 8008472:	ec49 8b10 	vmov	d0, r8, r9
 8008476:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800847a:	4628      	mov	r0, r5
 800847c:	f7ff fed7 	bl	800822e <__cvt>
 8008480:	9b06      	ldr	r3, [sp, #24]
 8008482:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008484:	2b47      	cmp	r3, #71	@ 0x47
 8008486:	4680      	mov	r8, r0
 8008488:	d129      	bne.n	80084de <_printf_float+0x172>
 800848a:	1cc8      	adds	r0, r1, #3
 800848c:	db02      	blt.n	8008494 <_printf_float+0x128>
 800848e:	6863      	ldr	r3, [r4, #4]
 8008490:	4299      	cmp	r1, r3
 8008492:	dd41      	ble.n	8008518 <_printf_float+0x1ac>
 8008494:	f1aa 0a02 	sub.w	sl, sl, #2
 8008498:	fa5f fa8a 	uxtb.w	sl, sl
 800849c:	3901      	subs	r1, #1
 800849e:	4652      	mov	r2, sl
 80084a0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80084a4:	9109      	str	r1, [sp, #36]	@ 0x24
 80084a6:	f7ff ff27 	bl	80082f8 <__exponent>
 80084aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80084ac:	1813      	adds	r3, r2, r0
 80084ae:	2a01      	cmp	r2, #1
 80084b0:	4681      	mov	r9, r0
 80084b2:	6123      	str	r3, [r4, #16]
 80084b4:	dc02      	bgt.n	80084bc <_printf_float+0x150>
 80084b6:	6822      	ldr	r2, [r4, #0]
 80084b8:	07d2      	lsls	r2, r2, #31
 80084ba:	d501      	bpl.n	80084c0 <_printf_float+0x154>
 80084bc:	3301      	adds	r3, #1
 80084be:	6123      	str	r3, [r4, #16]
 80084c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d0a2      	beq.n	800840e <_printf_float+0xa2>
 80084c8:	232d      	movs	r3, #45	@ 0x2d
 80084ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80084ce:	e79e      	b.n	800840e <_printf_float+0xa2>
 80084d0:	9a06      	ldr	r2, [sp, #24]
 80084d2:	2a47      	cmp	r2, #71	@ 0x47
 80084d4:	d1c2      	bne.n	800845c <_printf_float+0xf0>
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d1c0      	bne.n	800845c <_printf_float+0xf0>
 80084da:	2301      	movs	r3, #1
 80084dc:	e7bd      	b.n	800845a <_printf_float+0xee>
 80084de:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80084e2:	d9db      	bls.n	800849c <_printf_float+0x130>
 80084e4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80084e8:	d118      	bne.n	800851c <_printf_float+0x1b0>
 80084ea:	2900      	cmp	r1, #0
 80084ec:	6863      	ldr	r3, [r4, #4]
 80084ee:	dd0b      	ble.n	8008508 <_printf_float+0x19c>
 80084f0:	6121      	str	r1, [r4, #16]
 80084f2:	b913      	cbnz	r3, 80084fa <_printf_float+0x18e>
 80084f4:	6822      	ldr	r2, [r4, #0]
 80084f6:	07d0      	lsls	r0, r2, #31
 80084f8:	d502      	bpl.n	8008500 <_printf_float+0x194>
 80084fa:	3301      	adds	r3, #1
 80084fc:	440b      	add	r3, r1
 80084fe:	6123      	str	r3, [r4, #16]
 8008500:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008502:	f04f 0900 	mov.w	r9, #0
 8008506:	e7db      	b.n	80084c0 <_printf_float+0x154>
 8008508:	b913      	cbnz	r3, 8008510 <_printf_float+0x1a4>
 800850a:	6822      	ldr	r2, [r4, #0]
 800850c:	07d2      	lsls	r2, r2, #31
 800850e:	d501      	bpl.n	8008514 <_printf_float+0x1a8>
 8008510:	3302      	adds	r3, #2
 8008512:	e7f4      	b.n	80084fe <_printf_float+0x192>
 8008514:	2301      	movs	r3, #1
 8008516:	e7f2      	b.n	80084fe <_printf_float+0x192>
 8008518:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800851c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800851e:	4299      	cmp	r1, r3
 8008520:	db05      	blt.n	800852e <_printf_float+0x1c2>
 8008522:	6823      	ldr	r3, [r4, #0]
 8008524:	6121      	str	r1, [r4, #16]
 8008526:	07d8      	lsls	r0, r3, #31
 8008528:	d5ea      	bpl.n	8008500 <_printf_float+0x194>
 800852a:	1c4b      	adds	r3, r1, #1
 800852c:	e7e7      	b.n	80084fe <_printf_float+0x192>
 800852e:	2900      	cmp	r1, #0
 8008530:	bfd4      	ite	le
 8008532:	f1c1 0202 	rsble	r2, r1, #2
 8008536:	2201      	movgt	r2, #1
 8008538:	4413      	add	r3, r2
 800853a:	e7e0      	b.n	80084fe <_printf_float+0x192>
 800853c:	6823      	ldr	r3, [r4, #0]
 800853e:	055a      	lsls	r2, r3, #21
 8008540:	d407      	bmi.n	8008552 <_printf_float+0x1e6>
 8008542:	6923      	ldr	r3, [r4, #16]
 8008544:	4642      	mov	r2, r8
 8008546:	4631      	mov	r1, r6
 8008548:	4628      	mov	r0, r5
 800854a:	47b8      	blx	r7
 800854c:	3001      	adds	r0, #1
 800854e:	d12b      	bne.n	80085a8 <_printf_float+0x23c>
 8008550:	e767      	b.n	8008422 <_printf_float+0xb6>
 8008552:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008556:	f240 80dd 	bls.w	8008714 <_printf_float+0x3a8>
 800855a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800855e:	2200      	movs	r2, #0
 8008560:	2300      	movs	r3, #0
 8008562:	f7f8 fab1 	bl	8000ac8 <__aeabi_dcmpeq>
 8008566:	2800      	cmp	r0, #0
 8008568:	d033      	beq.n	80085d2 <_printf_float+0x266>
 800856a:	4a37      	ldr	r2, [pc, #220]	@ (8008648 <_printf_float+0x2dc>)
 800856c:	2301      	movs	r3, #1
 800856e:	4631      	mov	r1, r6
 8008570:	4628      	mov	r0, r5
 8008572:	47b8      	blx	r7
 8008574:	3001      	adds	r0, #1
 8008576:	f43f af54 	beq.w	8008422 <_printf_float+0xb6>
 800857a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800857e:	4543      	cmp	r3, r8
 8008580:	db02      	blt.n	8008588 <_printf_float+0x21c>
 8008582:	6823      	ldr	r3, [r4, #0]
 8008584:	07d8      	lsls	r0, r3, #31
 8008586:	d50f      	bpl.n	80085a8 <_printf_float+0x23c>
 8008588:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800858c:	4631      	mov	r1, r6
 800858e:	4628      	mov	r0, r5
 8008590:	47b8      	blx	r7
 8008592:	3001      	adds	r0, #1
 8008594:	f43f af45 	beq.w	8008422 <_printf_float+0xb6>
 8008598:	f04f 0900 	mov.w	r9, #0
 800859c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80085a0:	f104 0a1a 	add.w	sl, r4, #26
 80085a4:	45c8      	cmp	r8, r9
 80085a6:	dc09      	bgt.n	80085bc <_printf_float+0x250>
 80085a8:	6823      	ldr	r3, [r4, #0]
 80085aa:	079b      	lsls	r3, r3, #30
 80085ac:	f100 8103 	bmi.w	80087b6 <_printf_float+0x44a>
 80085b0:	68e0      	ldr	r0, [r4, #12]
 80085b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80085b4:	4298      	cmp	r0, r3
 80085b6:	bfb8      	it	lt
 80085b8:	4618      	movlt	r0, r3
 80085ba:	e734      	b.n	8008426 <_printf_float+0xba>
 80085bc:	2301      	movs	r3, #1
 80085be:	4652      	mov	r2, sl
 80085c0:	4631      	mov	r1, r6
 80085c2:	4628      	mov	r0, r5
 80085c4:	47b8      	blx	r7
 80085c6:	3001      	adds	r0, #1
 80085c8:	f43f af2b 	beq.w	8008422 <_printf_float+0xb6>
 80085cc:	f109 0901 	add.w	r9, r9, #1
 80085d0:	e7e8      	b.n	80085a4 <_printf_float+0x238>
 80085d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	dc39      	bgt.n	800864c <_printf_float+0x2e0>
 80085d8:	4a1b      	ldr	r2, [pc, #108]	@ (8008648 <_printf_float+0x2dc>)
 80085da:	2301      	movs	r3, #1
 80085dc:	4631      	mov	r1, r6
 80085de:	4628      	mov	r0, r5
 80085e0:	47b8      	blx	r7
 80085e2:	3001      	adds	r0, #1
 80085e4:	f43f af1d 	beq.w	8008422 <_printf_float+0xb6>
 80085e8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80085ec:	ea59 0303 	orrs.w	r3, r9, r3
 80085f0:	d102      	bne.n	80085f8 <_printf_float+0x28c>
 80085f2:	6823      	ldr	r3, [r4, #0]
 80085f4:	07d9      	lsls	r1, r3, #31
 80085f6:	d5d7      	bpl.n	80085a8 <_printf_float+0x23c>
 80085f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085fc:	4631      	mov	r1, r6
 80085fe:	4628      	mov	r0, r5
 8008600:	47b8      	blx	r7
 8008602:	3001      	adds	r0, #1
 8008604:	f43f af0d 	beq.w	8008422 <_printf_float+0xb6>
 8008608:	f04f 0a00 	mov.w	sl, #0
 800860c:	f104 0b1a 	add.w	fp, r4, #26
 8008610:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008612:	425b      	negs	r3, r3
 8008614:	4553      	cmp	r3, sl
 8008616:	dc01      	bgt.n	800861c <_printf_float+0x2b0>
 8008618:	464b      	mov	r3, r9
 800861a:	e793      	b.n	8008544 <_printf_float+0x1d8>
 800861c:	2301      	movs	r3, #1
 800861e:	465a      	mov	r2, fp
 8008620:	4631      	mov	r1, r6
 8008622:	4628      	mov	r0, r5
 8008624:	47b8      	blx	r7
 8008626:	3001      	adds	r0, #1
 8008628:	f43f aefb 	beq.w	8008422 <_printf_float+0xb6>
 800862c:	f10a 0a01 	add.w	sl, sl, #1
 8008630:	e7ee      	b.n	8008610 <_printf_float+0x2a4>
 8008632:	bf00      	nop
 8008634:	7fefffff 	.word	0x7fefffff
 8008638:	0800cd4c 	.word	0x0800cd4c
 800863c:	0800cd48 	.word	0x0800cd48
 8008640:	0800cd54 	.word	0x0800cd54
 8008644:	0800cd50 	.word	0x0800cd50
 8008648:	0800cd58 	.word	0x0800cd58
 800864c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800864e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008652:	4553      	cmp	r3, sl
 8008654:	bfa8      	it	ge
 8008656:	4653      	movge	r3, sl
 8008658:	2b00      	cmp	r3, #0
 800865a:	4699      	mov	r9, r3
 800865c:	dc36      	bgt.n	80086cc <_printf_float+0x360>
 800865e:	f04f 0b00 	mov.w	fp, #0
 8008662:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008666:	f104 021a 	add.w	r2, r4, #26
 800866a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800866c:	9306      	str	r3, [sp, #24]
 800866e:	eba3 0309 	sub.w	r3, r3, r9
 8008672:	455b      	cmp	r3, fp
 8008674:	dc31      	bgt.n	80086da <_printf_float+0x36e>
 8008676:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008678:	459a      	cmp	sl, r3
 800867a:	dc3a      	bgt.n	80086f2 <_printf_float+0x386>
 800867c:	6823      	ldr	r3, [r4, #0]
 800867e:	07da      	lsls	r2, r3, #31
 8008680:	d437      	bmi.n	80086f2 <_printf_float+0x386>
 8008682:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008684:	ebaa 0903 	sub.w	r9, sl, r3
 8008688:	9b06      	ldr	r3, [sp, #24]
 800868a:	ebaa 0303 	sub.w	r3, sl, r3
 800868e:	4599      	cmp	r9, r3
 8008690:	bfa8      	it	ge
 8008692:	4699      	movge	r9, r3
 8008694:	f1b9 0f00 	cmp.w	r9, #0
 8008698:	dc33      	bgt.n	8008702 <_printf_float+0x396>
 800869a:	f04f 0800 	mov.w	r8, #0
 800869e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80086a2:	f104 0b1a 	add.w	fp, r4, #26
 80086a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086a8:	ebaa 0303 	sub.w	r3, sl, r3
 80086ac:	eba3 0309 	sub.w	r3, r3, r9
 80086b0:	4543      	cmp	r3, r8
 80086b2:	f77f af79 	ble.w	80085a8 <_printf_float+0x23c>
 80086b6:	2301      	movs	r3, #1
 80086b8:	465a      	mov	r2, fp
 80086ba:	4631      	mov	r1, r6
 80086bc:	4628      	mov	r0, r5
 80086be:	47b8      	blx	r7
 80086c0:	3001      	adds	r0, #1
 80086c2:	f43f aeae 	beq.w	8008422 <_printf_float+0xb6>
 80086c6:	f108 0801 	add.w	r8, r8, #1
 80086ca:	e7ec      	b.n	80086a6 <_printf_float+0x33a>
 80086cc:	4642      	mov	r2, r8
 80086ce:	4631      	mov	r1, r6
 80086d0:	4628      	mov	r0, r5
 80086d2:	47b8      	blx	r7
 80086d4:	3001      	adds	r0, #1
 80086d6:	d1c2      	bne.n	800865e <_printf_float+0x2f2>
 80086d8:	e6a3      	b.n	8008422 <_printf_float+0xb6>
 80086da:	2301      	movs	r3, #1
 80086dc:	4631      	mov	r1, r6
 80086de:	4628      	mov	r0, r5
 80086e0:	9206      	str	r2, [sp, #24]
 80086e2:	47b8      	blx	r7
 80086e4:	3001      	adds	r0, #1
 80086e6:	f43f ae9c 	beq.w	8008422 <_printf_float+0xb6>
 80086ea:	9a06      	ldr	r2, [sp, #24]
 80086ec:	f10b 0b01 	add.w	fp, fp, #1
 80086f0:	e7bb      	b.n	800866a <_printf_float+0x2fe>
 80086f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086f6:	4631      	mov	r1, r6
 80086f8:	4628      	mov	r0, r5
 80086fa:	47b8      	blx	r7
 80086fc:	3001      	adds	r0, #1
 80086fe:	d1c0      	bne.n	8008682 <_printf_float+0x316>
 8008700:	e68f      	b.n	8008422 <_printf_float+0xb6>
 8008702:	9a06      	ldr	r2, [sp, #24]
 8008704:	464b      	mov	r3, r9
 8008706:	4442      	add	r2, r8
 8008708:	4631      	mov	r1, r6
 800870a:	4628      	mov	r0, r5
 800870c:	47b8      	blx	r7
 800870e:	3001      	adds	r0, #1
 8008710:	d1c3      	bne.n	800869a <_printf_float+0x32e>
 8008712:	e686      	b.n	8008422 <_printf_float+0xb6>
 8008714:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008718:	f1ba 0f01 	cmp.w	sl, #1
 800871c:	dc01      	bgt.n	8008722 <_printf_float+0x3b6>
 800871e:	07db      	lsls	r3, r3, #31
 8008720:	d536      	bpl.n	8008790 <_printf_float+0x424>
 8008722:	2301      	movs	r3, #1
 8008724:	4642      	mov	r2, r8
 8008726:	4631      	mov	r1, r6
 8008728:	4628      	mov	r0, r5
 800872a:	47b8      	blx	r7
 800872c:	3001      	adds	r0, #1
 800872e:	f43f ae78 	beq.w	8008422 <_printf_float+0xb6>
 8008732:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008736:	4631      	mov	r1, r6
 8008738:	4628      	mov	r0, r5
 800873a:	47b8      	blx	r7
 800873c:	3001      	adds	r0, #1
 800873e:	f43f ae70 	beq.w	8008422 <_printf_float+0xb6>
 8008742:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008746:	2200      	movs	r2, #0
 8008748:	2300      	movs	r3, #0
 800874a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800874e:	f7f8 f9bb 	bl	8000ac8 <__aeabi_dcmpeq>
 8008752:	b9c0      	cbnz	r0, 8008786 <_printf_float+0x41a>
 8008754:	4653      	mov	r3, sl
 8008756:	f108 0201 	add.w	r2, r8, #1
 800875a:	4631      	mov	r1, r6
 800875c:	4628      	mov	r0, r5
 800875e:	47b8      	blx	r7
 8008760:	3001      	adds	r0, #1
 8008762:	d10c      	bne.n	800877e <_printf_float+0x412>
 8008764:	e65d      	b.n	8008422 <_printf_float+0xb6>
 8008766:	2301      	movs	r3, #1
 8008768:	465a      	mov	r2, fp
 800876a:	4631      	mov	r1, r6
 800876c:	4628      	mov	r0, r5
 800876e:	47b8      	blx	r7
 8008770:	3001      	adds	r0, #1
 8008772:	f43f ae56 	beq.w	8008422 <_printf_float+0xb6>
 8008776:	f108 0801 	add.w	r8, r8, #1
 800877a:	45d0      	cmp	r8, sl
 800877c:	dbf3      	blt.n	8008766 <_printf_float+0x3fa>
 800877e:	464b      	mov	r3, r9
 8008780:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008784:	e6df      	b.n	8008546 <_printf_float+0x1da>
 8008786:	f04f 0800 	mov.w	r8, #0
 800878a:	f104 0b1a 	add.w	fp, r4, #26
 800878e:	e7f4      	b.n	800877a <_printf_float+0x40e>
 8008790:	2301      	movs	r3, #1
 8008792:	4642      	mov	r2, r8
 8008794:	e7e1      	b.n	800875a <_printf_float+0x3ee>
 8008796:	2301      	movs	r3, #1
 8008798:	464a      	mov	r2, r9
 800879a:	4631      	mov	r1, r6
 800879c:	4628      	mov	r0, r5
 800879e:	47b8      	blx	r7
 80087a0:	3001      	adds	r0, #1
 80087a2:	f43f ae3e 	beq.w	8008422 <_printf_float+0xb6>
 80087a6:	f108 0801 	add.w	r8, r8, #1
 80087aa:	68e3      	ldr	r3, [r4, #12]
 80087ac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80087ae:	1a5b      	subs	r3, r3, r1
 80087b0:	4543      	cmp	r3, r8
 80087b2:	dcf0      	bgt.n	8008796 <_printf_float+0x42a>
 80087b4:	e6fc      	b.n	80085b0 <_printf_float+0x244>
 80087b6:	f04f 0800 	mov.w	r8, #0
 80087ba:	f104 0919 	add.w	r9, r4, #25
 80087be:	e7f4      	b.n	80087aa <_printf_float+0x43e>

080087c0 <_printf_common>:
 80087c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087c4:	4616      	mov	r6, r2
 80087c6:	4698      	mov	r8, r3
 80087c8:	688a      	ldr	r2, [r1, #8]
 80087ca:	690b      	ldr	r3, [r1, #16]
 80087cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80087d0:	4293      	cmp	r3, r2
 80087d2:	bfb8      	it	lt
 80087d4:	4613      	movlt	r3, r2
 80087d6:	6033      	str	r3, [r6, #0]
 80087d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80087dc:	4607      	mov	r7, r0
 80087de:	460c      	mov	r4, r1
 80087e0:	b10a      	cbz	r2, 80087e6 <_printf_common+0x26>
 80087e2:	3301      	adds	r3, #1
 80087e4:	6033      	str	r3, [r6, #0]
 80087e6:	6823      	ldr	r3, [r4, #0]
 80087e8:	0699      	lsls	r1, r3, #26
 80087ea:	bf42      	ittt	mi
 80087ec:	6833      	ldrmi	r3, [r6, #0]
 80087ee:	3302      	addmi	r3, #2
 80087f0:	6033      	strmi	r3, [r6, #0]
 80087f2:	6825      	ldr	r5, [r4, #0]
 80087f4:	f015 0506 	ands.w	r5, r5, #6
 80087f8:	d106      	bne.n	8008808 <_printf_common+0x48>
 80087fa:	f104 0a19 	add.w	sl, r4, #25
 80087fe:	68e3      	ldr	r3, [r4, #12]
 8008800:	6832      	ldr	r2, [r6, #0]
 8008802:	1a9b      	subs	r3, r3, r2
 8008804:	42ab      	cmp	r3, r5
 8008806:	dc26      	bgt.n	8008856 <_printf_common+0x96>
 8008808:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800880c:	6822      	ldr	r2, [r4, #0]
 800880e:	3b00      	subs	r3, #0
 8008810:	bf18      	it	ne
 8008812:	2301      	movne	r3, #1
 8008814:	0692      	lsls	r2, r2, #26
 8008816:	d42b      	bmi.n	8008870 <_printf_common+0xb0>
 8008818:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800881c:	4641      	mov	r1, r8
 800881e:	4638      	mov	r0, r7
 8008820:	47c8      	blx	r9
 8008822:	3001      	adds	r0, #1
 8008824:	d01e      	beq.n	8008864 <_printf_common+0xa4>
 8008826:	6823      	ldr	r3, [r4, #0]
 8008828:	6922      	ldr	r2, [r4, #16]
 800882a:	f003 0306 	and.w	r3, r3, #6
 800882e:	2b04      	cmp	r3, #4
 8008830:	bf02      	ittt	eq
 8008832:	68e5      	ldreq	r5, [r4, #12]
 8008834:	6833      	ldreq	r3, [r6, #0]
 8008836:	1aed      	subeq	r5, r5, r3
 8008838:	68a3      	ldr	r3, [r4, #8]
 800883a:	bf0c      	ite	eq
 800883c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008840:	2500      	movne	r5, #0
 8008842:	4293      	cmp	r3, r2
 8008844:	bfc4      	itt	gt
 8008846:	1a9b      	subgt	r3, r3, r2
 8008848:	18ed      	addgt	r5, r5, r3
 800884a:	2600      	movs	r6, #0
 800884c:	341a      	adds	r4, #26
 800884e:	42b5      	cmp	r5, r6
 8008850:	d11a      	bne.n	8008888 <_printf_common+0xc8>
 8008852:	2000      	movs	r0, #0
 8008854:	e008      	b.n	8008868 <_printf_common+0xa8>
 8008856:	2301      	movs	r3, #1
 8008858:	4652      	mov	r2, sl
 800885a:	4641      	mov	r1, r8
 800885c:	4638      	mov	r0, r7
 800885e:	47c8      	blx	r9
 8008860:	3001      	adds	r0, #1
 8008862:	d103      	bne.n	800886c <_printf_common+0xac>
 8008864:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800886c:	3501      	adds	r5, #1
 800886e:	e7c6      	b.n	80087fe <_printf_common+0x3e>
 8008870:	18e1      	adds	r1, r4, r3
 8008872:	1c5a      	adds	r2, r3, #1
 8008874:	2030      	movs	r0, #48	@ 0x30
 8008876:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800887a:	4422      	add	r2, r4
 800887c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008880:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008884:	3302      	adds	r3, #2
 8008886:	e7c7      	b.n	8008818 <_printf_common+0x58>
 8008888:	2301      	movs	r3, #1
 800888a:	4622      	mov	r2, r4
 800888c:	4641      	mov	r1, r8
 800888e:	4638      	mov	r0, r7
 8008890:	47c8      	blx	r9
 8008892:	3001      	adds	r0, #1
 8008894:	d0e6      	beq.n	8008864 <_printf_common+0xa4>
 8008896:	3601      	adds	r6, #1
 8008898:	e7d9      	b.n	800884e <_printf_common+0x8e>
	...

0800889c <_printf_i>:
 800889c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80088a0:	7e0f      	ldrb	r7, [r1, #24]
 80088a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80088a4:	2f78      	cmp	r7, #120	@ 0x78
 80088a6:	4691      	mov	r9, r2
 80088a8:	4680      	mov	r8, r0
 80088aa:	460c      	mov	r4, r1
 80088ac:	469a      	mov	sl, r3
 80088ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80088b2:	d807      	bhi.n	80088c4 <_printf_i+0x28>
 80088b4:	2f62      	cmp	r7, #98	@ 0x62
 80088b6:	d80a      	bhi.n	80088ce <_printf_i+0x32>
 80088b8:	2f00      	cmp	r7, #0
 80088ba:	f000 80d1 	beq.w	8008a60 <_printf_i+0x1c4>
 80088be:	2f58      	cmp	r7, #88	@ 0x58
 80088c0:	f000 80b8 	beq.w	8008a34 <_printf_i+0x198>
 80088c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80088c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80088cc:	e03a      	b.n	8008944 <_printf_i+0xa8>
 80088ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80088d2:	2b15      	cmp	r3, #21
 80088d4:	d8f6      	bhi.n	80088c4 <_printf_i+0x28>
 80088d6:	a101      	add	r1, pc, #4	@ (adr r1, 80088dc <_printf_i+0x40>)
 80088d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80088dc:	08008935 	.word	0x08008935
 80088e0:	08008949 	.word	0x08008949
 80088e4:	080088c5 	.word	0x080088c5
 80088e8:	080088c5 	.word	0x080088c5
 80088ec:	080088c5 	.word	0x080088c5
 80088f0:	080088c5 	.word	0x080088c5
 80088f4:	08008949 	.word	0x08008949
 80088f8:	080088c5 	.word	0x080088c5
 80088fc:	080088c5 	.word	0x080088c5
 8008900:	080088c5 	.word	0x080088c5
 8008904:	080088c5 	.word	0x080088c5
 8008908:	08008a47 	.word	0x08008a47
 800890c:	08008973 	.word	0x08008973
 8008910:	08008a01 	.word	0x08008a01
 8008914:	080088c5 	.word	0x080088c5
 8008918:	080088c5 	.word	0x080088c5
 800891c:	08008a69 	.word	0x08008a69
 8008920:	080088c5 	.word	0x080088c5
 8008924:	08008973 	.word	0x08008973
 8008928:	080088c5 	.word	0x080088c5
 800892c:	080088c5 	.word	0x080088c5
 8008930:	08008a09 	.word	0x08008a09
 8008934:	6833      	ldr	r3, [r6, #0]
 8008936:	1d1a      	adds	r2, r3, #4
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	6032      	str	r2, [r6, #0]
 800893c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008940:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008944:	2301      	movs	r3, #1
 8008946:	e09c      	b.n	8008a82 <_printf_i+0x1e6>
 8008948:	6833      	ldr	r3, [r6, #0]
 800894a:	6820      	ldr	r0, [r4, #0]
 800894c:	1d19      	adds	r1, r3, #4
 800894e:	6031      	str	r1, [r6, #0]
 8008950:	0606      	lsls	r6, r0, #24
 8008952:	d501      	bpl.n	8008958 <_printf_i+0xbc>
 8008954:	681d      	ldr	r5, [r3, #0]
 8008956:	e003      	b.n	8008960 <_printf_i+0xc4>
 8008958:	0645      	lsls	r5, r0, #25
 800895a:	d5fb      	bpl.n	8008954 <_printf_i+0xb8>
 800895c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008960:	2d00      	cmp	r5, #0
 8008962:	da03      	bge.n	800896c <_printf_i+0xd0>
 8008964:	232d      	movs	r3, #45	@ 0x2d
 8008966:	426d      	negs	r5, r5
 8008968:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800896c:	4858      	ldr	r0, [pc, #352]	@ (8008ad0 <_printf_i+0x234>)
 800896e:	230a      	movs	r3, #10
 8008970:	e011      	b.n	8008996 <_printf_i+0xfa>
 8008972:	6821      	ldr	r1, [r4, #0]
 8008974:	6833      	ldr	r3, [r6, #0]
 8008976:	0608      	lsls	r0, r1, #24
 8008978:	f853 5b04 	ldr.w	r5, [r3], #4
 800897c:	d402      	bmi.n	8008984 <_printf_i+0xe8>
 800897e:	0649      	lsls	r1, r1, #25
 8008980:	bf48      	it	mi
 8008982:	b2ad      	uxthmi	r5, r5
 8008984:	2f6f      	cmp	r7, #111	@ 0x6f
 8008986:	4852      	ldr	r0, [pc, #328]	@ (8008ad0 <_printf_i+0x234>)
 8008988:	6033      	str	r3, [r6, #0]
 800898a:	bf14      	ite	ne
 800898c:	230a      	movne	r3, #10
 800898e:	2308      	moveq	r3, #8
 8008990:	2100      	movs	r1, #0
 8008992:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008996:	6866      	ldr	r6, [r4, #4]
 8008998:	60a6      	str	r6, [r4, #8]
 800899a:	2e00      	cmp	r6, #0
 800899c:	db05      	blt.n	80089aa <_printf_i+0x10e>
 800899e:	6821      	ldr	r1, [r4, #0]
 80089a0:	432e      	orrs	r6, r5
 80089a2:	f021 0104 	bic.w	r1, r1, #4
 80089a6:	6021      	str	r1, [r4, #0]
 80089a8:	d04b      	beq.n	8008a42 <_printf_i+0x1a6>
 80089aa:	4616      	mov	r6, r2
 80089ac:	fbb5 f1f3 	udiv	r1, r5, r3
 80089b0:	fb03 5711 	mls	r7, r3, r1, r5
 80089b4:	5dc7      	ldrb	r7, [r0, r7]
 80089b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80089ba:	462f      	mov	r7, r5
 80089bc:	42bb      	cmp	r3, r7
 80089be:	460d      	mov	r5, r1
 80089c0:	d9f4      	bls.n	80089ac <_printf_i+0x110>
 80089c2:	2b08      	cmp	r3, #8
 80089c4:	d10b      	bne.n	80089de <_printf_i+0x142>
 80089c6:	6823      	ldr	r3, [r4, #0]
 80089c8:	07df      	lsls	r7, r3, #31
 80089ca:	d508      	bpl.n	80089de <_printf_i+0x142>
 80089cc:	6923      	ldr	r3, [r4, #16]
 80089ce:	6861      	ldr	r1, [r4, #4]
 80089d0:	4299      	cmp	r1, r3
 80089d2:	bfde      	ittt	le
 80089d4:	2330      	movle	r3, #48	@ 0x30
 80089d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80089da:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80089de:	1b92      	subs	r2, r2, r6
 80089e0:	6122      	str	r2, [r4, #16]
 80089e2:	f8cd a000 	str.w	sl, [sp]
 80089e6:	464b      	mov	r3, r9
 80089e8:	aa03      	add	r2, sp, #12
 80089ea:	4621      	mov	r1, r4
 80089ec:	4640      	mov	r0, r8
 80089ee:	f7ff fee7 	bl	80087c0 <_printf_common>
 80089f2:	3001      	adds	r0, #1
 80089f4:	d14a      	bne.n	8008a8c <_printf_i+0x1f0>
 80089f6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80089fa:	b004      	add	sp, #16
 80089fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a00:	6823      	ldr	r3, [r4, #0]
 8008a02:	f043 0320 	orr.w	r3, r3, #32
 8008a06:	6023      	str	r3, [r4, #0]
 8008a08:	4832      	ldr	r0, [pc, #200]	@ (8008ad4 <_printf_i+0x238>)
 8008a0a:	2778      	movs	r7, #120	@ 0x78
 8008a0c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008a10:	6823      	ldr	r3, [r4, #0]
 8008a12:	6831      	ldr	r1, [r6, #0]
 8008a14:	061f      	lsls	r7, r3, #24
 8008a16:	f851 5b04 	ldr.w	r5, [r1], #4
 8008a1a:	d402      	bmi.n	8008a22 <_printf_i+0x186>
 8008a1c:	065f      	lsls	r7, r3, #25
 8008a1e:	bf48      	it	mi
 8008a20:	b2ad      	uxthmi	r5, r5
 8008a22:	6031      	str	r1, [r6, #0]
 8008a24:	07d9      	lsls	r1, r3, #31
 8008a26:	bf44      	itt	mi
 8008a28:	f043 0320 	orrmi.w	r3, r3, #32
 8008a2c:	6023      	strmi	r3, [r4, #0]
 8008a2e:	b11d      	cbz	r5, 8008a38 <_printf_i+0x19c>
 8008a30:	2310      	movs	r3, #16
 8008a32:	e7ad      	b.n	8008990 <_printf_i+0xf4>
 8008a34:	4826      	ldr	r0, [pc, #152]	@ (8008ad0 <_printf_i+0x234>)
 8008a36:	e7e9      	b.n	8008a0c <_printf_i+0x170>
 8008a38:	6823      	ldr	r3, [r4, #0]
 8008a3a:	f023 0320 	bic.w	r3, r3, #32
 8008a3e:	6023      	str	r3, [r4, #0]
 8008a40:	e7f6      	b.n	8008a30 <_printf_i+0x194>
 8008a42:	4616      	mov	r6, r2
 8008a44:	e7bd      	b.n	80089c2 <_printf_i+0x126>
 8008a46:	6833      	ldr	r3, [r6, #0]
 8008a48:	6825      	ldr	r5, [r4, #0]
 8008a4a:	6961      	ldr	r1, [r4, #20]
 8008a4c:	1d18      	adds	r0, r3, #4
 8008a4e:	6030      	str	r0, [r6, #0]
 8008a50:	062e      	lsls	r6, r5, #24
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	d501      	bpl.n	8008a5a <_printf_i+0x1be>
 8008a56:	6019      	str	r1, [r3, #0]
 8008a58:	e002      	b.n	8008a60 <_printf_i+0x1c4>
 8008a5a:	0668      	lsls	r0, r5, #25
 8008a5c:	d5fb      	bpl.n	8008a56 <_printf_i+0x1ba>
 8008a5e:	8019      	strh	r1, [r3, #0]
 8008a60:	2300      	movs	r3, #0
 8008a62:	6123      	str	r3, [r4, #16]
 8008a64:	4616      	mov	r6, r2
 8008a66:	e7bc      	b.n	80089e2 <_printf_i+0x146>
 8008a68:	6833      	ldr	r3, [r6, #0]
 8008a6a:	1d1a      	adds	r2, r3, #4
 8008a6c:	6032      	str	r2, [r6, #0]
 8008a6e:	681e      	ldr	r6, [r3, #0]
 8008a70:	6862      	ldr	r2, [r4, #4]
 8008a72:	2100      	movs	r1, #0
 8008a74:	4630      	mov	r0, r6
 8008a76:	f7f7 fbab 	bl	80001d0 <memchr>
 8008a7a:	b108      	cbz	r0, 8008a80 <_printf_i+0x1e4>
 8008a7c:	1b80      	subs	r0, r0, r6
 8008a7e:	6060      	str	r0, [r4, #4]
 8008a80:	6863      	ldr	r3, [r4, #4]
 8008a82:	6123      	str	r3, [r4, #16]
 8008a84:	2300      	movs	r3, #0
 8008a86:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a8a:	e7aa      	b.n	80089e2 <_printf_i+0x146>
 8008a8c:	6923      	ldr	r3, [r4, #16]
 8008a8e:	4632      	mov	r2, r6
 8008a90:	4649      	mov	r1, r9
 8008a92:	4640      	mov	r0, r8
 8008a94:	47d0      	blx	sl
 8008a96:	3001      	adds	r0, #1
 8008a98:	d0ad      	beq.n	80089f6 <_printf_i+0x15a>
 8008a9a:	6823      	ldr	r3, [r4, #0]
 8008a9c:	079b      	lsls	r3, r3, #30
 8008a9e:	d413      	bmi.n	8008ac8 <_printf_i+0x22c>
 8008aa0:	68e0      	ldr	r0, [r4, #12]
 8008aa2:	9b03      	ldr	r3, [sp, #12]
 8008aa4:	4298      	cmp	r0, r3
 8008aa6:	bfb8      	it	lt
 8008aa8:	4618      	movlt	r0, r3
 8008aaa:	e7a6      	b.n	80089fa <_printf_i+0x15e>
 8008aac:	2301      	movs	r3, #1
 8008aae:	4632      	mov	r2, r6
 8008ab0:	4649      	mov	r1, r9
 8008ab2:	4640      	mov	r0, r8
 8008ab4:	47d0      	blx	sl
 8008ab6:	3001      	adds	r0, #1
 8008ab8:	d09d      	beq.n	80089f6 <_printf_i+0x15a>
 8008aba:	3501      	adds	r5, #1
 8008abc:	68e3      	ldr	r3, [r4, #12]
 8008abe:	9903      	ldr	r1, [sp, #12]
 8008ac0:	1a5b      	subs	r3, r3, r1
 8008ac2:	42ab      	cmp	r3, r5
 8008ac4:	dcf2      	bgt.n	8008aac <_printf_i+0x210>
 8008ac6:	e7eb      	b.n	8008aa0 <_printf_i+0x204>
 8008ac8:	2500      	movs	r5, #0
 8008aca:	f104 0619 	add.w	r6, r4, #25
 8008ace:	e7f5      	b.n	8008abc <_printf_i+0x220>
 8008ad0:	0800cd5a 	.word	0x0800cd5a
 8008ad4:	0800cd6b 	.word	0x0800cd6b

08008ad8 <_scanf_float>:
 8008ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008adc:	b087      	sub	sp, #28
 8008ade:	4691      	mov	r9, r2
 8008ae0:	9303      	str	r3, [sp, #12]
 8008ae2:	688b      	ldr	r3, [r1, #8]
 8008ae4:	1e5a      	subs	r2, r3, #1
 8008ae6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008aea:	bf81      	itttt	hi
 8008aec:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008af0:	eb03 0b05 	addhi.w	fp, r3, r5
 8008af4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008af8:	608b      	strhi	r3, [r1, #8]
 8008afa:	680b      	ldr	r3, [r1, #0]
 8008afc:	460a      	mov	r2, r1
 8008afe:	f04f 0500 	mov.w	r5, #0
 8008b02:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008b06:	f842 3b1c 	str.w	r3, [r2], #28
 8008b0a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008b0e:	4680      	mov	r8, r0
 8008b10:	460c      	mov	r4, r1
 8008b12:	bf98      	it	ls
 8008b14:	f04f 0b00 	movls.w	fp, #0
 8008b18:	9201      	str	r2, [sp, #4]
 8008b1a:	4616      	mov	r6, r2
 8008b1c:	46aa      	mov	sl, r5
 8008b1e:	462f      	mov	r7, r5
 8008b20:	9502      	str	r5, [sp, #8]
 8008b22:	68a2      	ldr	r2, [r4, #8]
 8008b24:	b15a      	cbz	r2, 8008b3e <_scanf_float+0x66>
 8008b26:	f8d9 3000 	ldr.w	r3, [r9]
 8008b2a:	781b      	ldrb	r3, [r3, #0]
 8008b2c:	2b4e      	cmp	r3, #78	@ 0x4e
 8008b2e:	d863      	bhi.n	8008bf8 <_scanf_float+0x120>
 8008b30:	2b40      	cmp	r3, #64	@ 0x40
 8008b32:	d83b      	bhi.n	8008bac <_scanf_float+0xd4>
 8008b34:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008b38:	b2c8      	uxtb	r0, r1
 8008b3a:	280e      	cmp	r0, #14
 8008b3c:	d939      	bls.n	8008bb2 <_scanf_float+0xda>
 8008b3e:	b11f      	cbz	r7, 8008b48 <_scanf_float+0x70>
 8008b40:	6823      	ldr	r3, [r4, #0]
 8008b42:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008b46:	6023      	str	r3, [r4, #0]
 8008b48:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8008b4c:	f1ba 0f01 	cmp.w	sl, #1
 8008b50:	f200 8114 	bhi.w	8008d7c <_scanf_float+0x2a4>
 8008b54:	9b01      	ldr	r3, [sp, #4]
 8008b56:	429e      	cmp	r6, r3
 8008b58:	f200 8105 	bhi.w	8008d66 <_scanf_float+0x28e>
 8008b5c:	2001      	movs	r0, #1
 8008b5e:	b007      	add	sp, #28
 8008b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b64:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008b68:	2a0d      	cmp	r2, #13
 8008b6a:	d8e8      	bhi.n	8008b3e <_scanf_float+0x66>
 8008b6c:	a101      	add	r1, pc, #4	@ (adr r1, 8008b74 <_scanf_float+0x9c>)
 8008b6e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008b72:	bf00      	nop
 8008b74:	08008cbd 	.word	0x08008cbd
 8008b78:	08008b3f 	.word	0x08008b3f
 8008b7c:	08008b3f 	.word	0x08008b3f
 8008b80:	08008b3f 	.word	0x08008b3f
 8008b84:	08008d19 	.word	0x08008d19
 8008b88:	08008cf3 	.word	0x08008cf3
 8008b8c:	08008b3f 	.word	0x08008b3f
 8008b90:	08008b3f 	.word	0x08008b3f
 8008b94:	08008ccb 	.word	0x08008ccb
 8008b98:	08008b3f 	.word	0x08008b3f
 8008b9c:	08008b3f 	.word	0x08008b3f
 8008ba0:	08008b3f 	.word	0x08008b3f
 8008ba4:	08008b3f 	.word	0x08008b3f
 8008ba8:	08008c87 	.word	0x08008c87
 8008bac:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008bb0:	e7da      	b.n	8008b68 <_scanf_float+0x90>
 8008bb2:	290e      	cmp	r1, #14
 8008bb4:	d8c3      	bhi.n	8008b3e <_scanf_float+0x66>
 8008bb6:	a001      	add	r0, pc, #4	@ (adr r0, 8008bbc <_scanf_float+0xe4>)
 8008bb8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008bbc:	08008c77 	.word	0x08008c77
 8008bc0:	08008b3f 	.word	0x08008b3f
 8008bc4:	08008c77 	.word	0x08008c77
 8008bc8:	08008d07 	.word	0x08008d07
 8008bcc:	08008b3f 	.word	0x08008b3f
 8008bd0:	08008c19 	.word	0x08008c19
 8008bd4:	08008c5d 	.word	0x08008c5d
 8008bd8:	08008c5d 	.word	0x08008c5d
 8008bdc:	08008c5d 	.word	0x08008c5d
 8008be0:	08008c5d 	.word	0x08008c5d
 8008be4:	08008c5d 	.word	0x08008c5d
 8008be8:	08008c5d 	.word	0x08008c5d
 8008bec:	08008c5d 	.word	0x08008c5d
 8008bf0:	08008c5d 	.word	0x08008c5d
 8008bf4:	08008c5d 	.word	0x08008c5d
 8008bf8:	2b6e      	cmp	r3, #110	@ 0x6e
 8008bfa:	d809      	bhi.n	8008c10 <_scanf_float+0x138>
 8008bfc:	2b60      	cmp	r3, #96	@ 0x60
 8008bfe:	d8b1      	bhi.n	8008b64 <_scanf_float+0x8c>
 8008c00:	2b54      	cmp	r3, #84	@ 0x54
 8008c02:	d07b      	beq.n	8008cfc <_scanf_float+0x224>
 8008c04:	2b59      	cmp	r3, #89	@ 0x59
 8008c06:	d19a      	bne.n	8008b3e <_scanf_float+0x66>
 8008c08:	2d07      	cmp	r5, #7
 8008c0a:	d198      	bne.n	8008b3e <_scanf_float+0x66>
 8008c0c:	2508      	movs	r5, #8
 8008c0e:	e02f      	b.n	8008c70 <_scanf_float+0x198>
 8008c10:	2b74      	cmp	r3, #116	@ 0x74
 8008c12:	d073      	beq.n	8008cfc <_scanf_float+0x224>
 8008c14:	2b79      	cmp	r3, #121	@ 0x79
 8008c16:	e7f6      	b.n	8008c06 <_scanf_float+0x12e>
 8008c18:	6821      	ldr	r1, [r4, #0]
 8008c1a:	05c8      	lsls	r0, r1, #23
 8008c1c:	d51e      	bpl.n	8008c5c <_scanf_float+0x184>
 8008c1e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8008c22:	6021      	str	r1, [r4, #0]
 8008c24:	3701      	adds	r7, #1
 8008c26:	f1bb 0f00 	cmp.w	fp, #0
 8008c2a:	d003      	beq.n	8008c34 <_scanf_float+0x15c>
 8008c2c:	3201      	adds	r2, #1
 8008c2e:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8008c32:	60a2      	str	r2, [r4, #8]
 8008c34:	68a3      	ldr	r3, [r4, #8]
 8008c36:	3b01      	subs	r3, #1
 8008c38:	60a3      	str	r3, [r4, #8]
 8008c3a:	6923      	ldr	r3, [r4, #16]
 8008c3c:	3301      	adds	r3, #1
 8008c3e:	6123      	str	r3, [r4, #16]
 8008c40:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8008c44:	3b01      	subs	r3, #1
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	f8c9 3004 	str.w	r3, [r9, #4]
 8008c4c:	f340 8082 	ble.w	8008d54 <_scanf_float+0x27c>
 8008c50:	f8d9 3000 	ldr.w	r3, [r9]
 8008c54:	3301      	adds	r3, #1
 8008c56:	f8c9 3000 	str.w	r3, [r9]
 8008c5a:	e762      	b.n	8008b22 <_scanf_float+0x4a>
 8008c5c:	eb1a 0105 	adds.w	r1, sl, r5
 8008c60:	f47f af6d 	bne.w	8008b3e <_scanf_float+0x66>
 8008c64:	6822      	ldr	r2, [r4, #0]
 8008c66:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008c6a:	6022      	str	r2, [r4, #0]
 8008c6c:	460d      	mov	r5, r1
 8008c6e:	468a      	mov	sl, r1
 8008c70:	f806 3b01 	strb.w	r3, [r6], #1
 8008c74:	e7de      	b.n	8008c34 <_scanf_float+0x15c>
 8008c76:	6822      	ldr	r2, [r4, #0]
 8008c78:	0610      	lsls	r0, r2, #24
 8008c7a:	f57f af60 	bpl.w	8008b3e <_scanf_float+0x66>
 8008c7e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008c82:	6022      	str	r2, [r4, #0]
 8008c84:	e7f4      	b.n	8008c70 <_scanf_float+0x198>
 8008c86:	f1ba 0f00 	cmp.w	sl, #0
 8008c8a:	d10c      	bne.n	8008ca6 <_scanf_float+0x1ce>
 8008c8c:	b977      	cbnz	r7, 8008cac <_scanf_float+0x1d4>
 8008c8e:	6822      	ldr	r2, [r4, #0]
 8008c90:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008c94:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008c98:	d108      	bne.n	8008cac <_scanf_float+0x1d4>
 8008c9a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008c9e:	6022      	str	r2, [r4, #0]
 8008ca0:	f04f 0a01 	mov.w	sl, #1
 8008ca4:	e7e4      	b.n	8008c70 <_scanf_float+0x198>
 8008ca6:	f1ba 0f02 	cmp.w	sl, #2
 8008caa:	d050      	beq.n	8008d4e <_scanf_float+0x276>
 8008cac:	2d01      	cmp	r5, #1
 8008cae:	d002      	beq.n	8008cb6 <_scanf_float+0x1de>
 8008cb0:	2d04      	cmp	r5, #4
 8008cb2:	f47f af44 	bne.w	8008b3e <_scanf_float+0x66>
 8008cb6:	3501      	adds	r5, #1
 8008cb8:	b2ed      	uxtb	r5, r5
 8008cba:	e7d9      	b.n	8008c70 <_scanf_float+0x198>
 8008cbc:	f1ba 0f01 	cmp.w	sl, #1
 8008cc0:	f47f af3d 	bne.w	8008b3e <_scanf_float+0x66>
 8008cc4:	f04f 0a02 	mov.w	sl, #2
 8008cc8:	e7d2      	b.n	8008c70 <_scanf_float+0x198>
 8008cca:	b975      	cbnz	r5, 8008cea <_scanf_float+0x212>
 8008ccc:	2f00      	cmp	r7, #0
 8008cce:	f47f af37 	bne.w	8008b40 <_scanf_float+0x68>
 8008cd2:	6822      	ldr	r2, [r4, #0]
 8008cd4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008cd8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008cdc:	f040 8103 	bne.w	8008ee6 <_scanf_float+0x40e>
 8008ce0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008ce4:	6022      	str	r2, [r4, #0]
 8008ce6:	2501      	movs	r5, #1
 8008ce8:	e7c2      	b.n	8008c70 <_scanf_float+0x198>
 8008cea:	2d03      	cmp	r5, #3
 8008cec:	d0e3      	beq.n	8008cb6 <_scanf_float+0x1de>
 8008cee:	2d05      	cmp	r5, #5
 8008cf0:	e7df      	b.n	8008cb2 <_scanf_float+0x1da>
 8008cf2:	2d02      	cmp	r5, #2
 8008cf4:	f47f af23 	bne.w	8008b3e <_scanf_float+0x66>
 8008cf8:	2503      	movs	r5, #3
 8008cfa:	e7b9      	b.n	8008c70 <_scanf_float+0x198>
 8008cfc:	2d06      	cmp	r5, #6
 8008cfe:	f47f af1e 	bne.w	8008b3e <_scanf_float+0x66>
 8008d02:	2507      	movs	r5, #7
 8008d04:	e7b4      	b.n	8008c70 <_scanf_float+0x198>
 8008d06:	6822      	ldr	r2, [r4, #0]
 8008d08:	0591      	lsls	r1, r2, #22
 8008d0a:	f57f af18 	bpl.w	8008b3e <_scanf_float+0x66>
 8008d0e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8008d12:	6022      	str	r2, [r4, #0]
 8008d14:	9702      	str	r7, [sp, #8]
 8008d16:	e7ab      	b.n	8008c70 <_scanf_float+0x198>
 8008d18:	6822      	ldr	r2, [r4, #0]
 8008d1a:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008d1e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008d22:	d005      	beq.n	8008d30 <_scanf_float+0x258>
 8008d24:	0550      	lsls	r0, r2, #21
 8008d26:	f57f af0a 	bpl.w	8008b3e <_scanf_float+0x66>
 8008d2a:	2f00      	cmp	r7, #0
 8008d2c:	f000 80db 	beq.w	8008ee6 <_scanf_float+0x40e>
 8008d30:	0591      	lsls	r1, r2, #22
 8008d32:	bf58      	it	pl
 8008d34:	9902      	ldrpl	r1, [sp, #8]
 8008d36:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008d3a:	bf58      	it	pl
 8008d3c:	1a79      	subpl	r1, r7, r1
 8008d3e:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008d42:	bf58      	it	pl
 8008d44:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008d48:	6022      	str	r2, [r4, #0]
 8008d4a:	2700      	movs	r7, #0
 8008d4c:	e790      	b.n	8008c70 <_scanf_float+0x198>
 8008d4e:	f04f 0a03 	mov.w	sl, #3
 8008d52:	e78d      	b.n	8008c70 <_scanf_float+0x198>
 8008d54:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008d58:	4649      	mov	r1, r9
 8008d5a:	4640      	mov	r0, r8
 8008d5c:	4798      	blx	r3
 8008d5e:	2800      	cmp	r0, #0
 8008d60:	f43f aedf 	beq.w	8008b22 <_scanf_float+0x4a>
 8008d64:	e6eb      	b.n	8008b3e <_scanf_float+0x66>
 8008d66:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008d6a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008d6e:	464a      	mov	r2, r9
 8008d70:	4640      	mov	r0, r8
 8008d72:	4798      	blx	r3
 8008d74:	6923      	ldr	r3, [r4, #16]
 8008d76:	3b01      	subs	r3, #1
 8008d78:	6123      	str	r3, [r4, #16]
 8008d7a:	e6eb      	b.n	8008b54 <_scanf_float+0x7c>
 8008d7c:	1e6b      	subs	r3, r5, #1
 8008d7e:	2b06      	cmp	r3, #6
 8008d80:	d824      	bhi.n	8008dcc <_scanf_float+0x2f4>
 8008d82:	2d02      	cmp	r5, #2
 8008d84:	d836      	bhi.n	8008df4 <_scanf_float+0x31c>
 8008d86:	9b01      	ldr	r3, [sp, #4]
 8008d88:	429e      	cmp	r6, r3
 8008d8a:	f67f aee7 	bls.w	8008b5c <_scanf_float+0x84>
 8008d8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008d92:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008d96:	464a      	mov	r2, r9
 8008d98:	4640      	mov	r0, r8
 8008d9a:	4798      	blx	r3
 8008d9c:	6923      	ldr	r3, [r4, #16]
 8008d9e:	3b01      	subs	r3, #1
 8008da0:	6123      	str	r3, [r4, #16]
 8008da2:	e7f0      	b.n	8008d86 <_scanf_float+0x2ae>
 8008da4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008da8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008dac:	464a      	mov	r2, r9
 8008dae:	4640      	mov	r0, r8
 8008db0:	4798      	blx	r3
 8008db2:	6923      	ldr	r3, [r4, #16]
 8008db4:	3b01      	subs	r3, #1
 8008db6:	6123      	str	r3, [r4, #16]
 8008db8:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8008dbc:	fa5f fa8a 	uxtb.w	sl, sl
 8008dc0:	f1ba 0f02 	cmp.w	sl, #2
 8008dc4:	d1ee      	bne.n	8008da4 <_scanf_float+0x2cc>
 8008dc6:	3d03      	subs	r5, #3
 8008dc8:	b2ed      	uxtb	r5, r5
 8008dca:	1b76      	subs	r6, r6, r5
 8008dcc:	6823      	ldr	r3, [r4, #0]
 8008dce:	05da      	lsls	r2, r3, #23
 8008dd0:	d530      	bpl.n	8008e34 <_scanf_float+0x35c>
 8008dd2:	055b      	lsls	r3, r3, #21
 8008dd4:	d511      	bpl.n	8008dfa <_scanf_float+0x322>
 8008dd6:	9b01      	ldr	r3, [sp, #4]
 8008dd8:	429e      	cmp	r6, r3
 8008dda:	f67f aebf 	bls.w	8008b5c <_scanf_float+0x84>
 8008dde:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008de2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008de6:	464a      	mov	r2, r9
 8008de8:	4640      	mov	r0, r8
 8008dea:	4798      	blx	r3
 8008dec:	6923      	ldr	r3, [r4, #16]
 8008dee:	3b01      	subs	r3, #1
 8008df0:	6123      	str	r3, [r4, #16]
 8008df2:	e7f0      	b.n	8008dd6 <_scanf_float+0x2fe>
 8008df4:	46aa      	mov	sl, r5
 8008df6:	46b3      	mov	fp, r6
 8008df8:	e7de      	b.n	8008db8 <_scanf_float+0x2e0>
 8008dfa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008dfe:	6923      	ldr	r3, [r4, #16]
 8008e00:	2965      	cmp	r1, #101	@ 0x65
 8008e02:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8008e06:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8008e0a:	6123      	str	r3, [r4, #16]
 8008e0c:	d00c      	beq.n	8008e28 <_scanf_float+0x350>
 8008e0e:	2945      	cmp	r1, #69	@ 0x45
 8008e10:	d00a      	beq.n	8008e28 <_scanf_float+0x350>
 8008e12:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008e16:	464a      	mov	r2, r9
 8008e18:	4640      	mov	r0, r8
 8008e1a:	4798      	blx	r3
 8008e1c:	6923      	ldr	r3, [r4, #16]
 8008e1e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008e22:	3b01      	subs	r3, #1
 8008e24:	1eb5      	subs	r5, r6, #2
 8008e26:	6123      	str	r3, [r4, #16]
 8008e28:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008e2c:	464a      	mov	r2, r9
 8008e2e:	4640      	mov	r0, r8
 8008e30:	4798      	blx	r3
 8008e32:	462e      	mov	r6, r5
 8008e34:	6822      	ldr	r2, [r4, #0]
 8008e36:	f012 0210 	ands.w	r2, r2, #16
 8008e3a:	d001      	beq.n	8008e40 <_scanf_float+0x368>
 8008e3c:	2000      	movs	r0, #0
 8008e3e:	e68e      	b.n	8008b5e <_scanf_float+0x86>
 8008e40:	7032      	strb	r2, [r6, #0]
 8008e42:	6823      	ldr	r3, [r4, #0]
 8008e44:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008e48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e4c:	d125      	bne.n	8008e9a <_scanf_float+0x3c2>
 8008e4e:	9b02      	ldr	r3, [sp, #8]
 8008e50:	429f      	cmp	r7, r3
 8008e52:	d00a      	beq.n	8008e6a <_scanf_float+0x392>
 8008e54:	1bda      	subs	r2, r3, r7
 8008e56:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008e5a:	429e      	cmp	r6, r3
 8008e5c:	bf28      	it	cs
 8008e5e:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008e62:	4922      	ldr	r1, [pc, #136]	@ (8008eec <_scanf_float+0x414>)
 8008e64:	4630      	mov	r0, r6
 8008e66:	f000 f845 	bl	8008ef4 <siprintf>
 8008e6a:	9901      	ldr	r1, [sp, #4]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	4640      	mov	r0, r8
 8008e70:	f000 ff0a 	bl	8009c88 <_strtod_r>
 8008e74:	9b03      	ldr	r3, [sp, #12]
 8008e76:	6821      	ldr	r1, [r4, #0]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f011 0f02 	tst.w	r1, #2
 8008e7e:	ec57 6b10 	vmov	r6, r7, d0
 8008e82:	f103 0204 	add.w	r2, r3, #4
 8008e86:	d015      	beq.n	8008eb4 <_scanf_float+0x3dc>
 8008e88:	9903      	ldr	r1, [sp, #12]
 8008e8a:	600a      	str	r2, [r1, #0]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	e9c3 6700 	strd	r6, r7, [r3]
 8008e92:	68e3      	ldr	r3, [r4, #12]
 8008e94:	3301      	adds	r3, #1
 8008e96:	60e3      	str	r3, [r4, #12]
 8008e98:	e7d0      	b.n	8008e3c <_scanf_float+0x364>
 8008e9a:	9b04      	ldr	r3, [sp, #16]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d0e4      	beq.n	8008e6a <_scanf_float+0x392>
 8008ea0:	9905      	ldr	r1, [sp, #20]
 8008ea2:	230a      	movs	r3, #10
 8008ea4:	3101      	adds	r1, #1
 8008ea6:	4640      	mov	r0, r8
 8008ea8:	f000 ff6e 	bl	8009d88 <_strtol_r>
 8008eac:	9b04      	ldr	r3, [sp, #16]
 8008eae:	9e05      	ldr	r6, [sp, #20]
 8008eb0:	1ac2      	subs	r2, r0, r3
 8008eb2:	e7d0      	b.n	8008e56 <_scanf_float+0x37e>
 8008eb4:	f011 0f04 	tst.w	r1, #4
 8008eb8:	9903      	ldr	r1, [sp, #12]
 8008eba:	600a      	str	r2, [r1, #0]
 8008ebc:	d1e6      	bne.n	8008e8c <_scanf_float+0x3b4>
 8008ebe:	681d      	ldr	r5, [r3, #0]
 8008ec0:	4632      	mov	r2, r6
 8008ec2:	463b      	mov	r3, r7
 8008ec4:	4630      	mov	r0, r6
 8008ec6:	4639      	mov	r1, r7
 8008ec8:	f7f7 fe30 	bl	8000b2c <__aeabi_dcmpun>
 8008ecc:	b128      	cbz	r0, 8008eda <_scanf_float+0x402>
 8008ece:	4808      	ldr	r0, [pc, #32]	@ (8008ef0 <_scanf_float+0x418>)
 8008ed0:	f000 ffde 	bl	8009e90 <nanf>
 8008ed4:	ed85 0a00 	vstr	s0, [r5]
 8008ed8:	e7db      	b.n	8008e92 <_scanf_float+0x3ba>
 8008eda:	4630      	mov	r0, r6
 8008edc:	4639      	mov	r1, r7
 8008ede:	f7f7 fe83 	bl	8000be8 <__aeabi_d2f>
 8008ee2:	6028      	str	r0, [r5, #0]
 8008ee4:	e7d5      	b.n	8008e92 <_scanf_float+0x3ba>
 8008ee6:	2700      	movs	r7, #0
 8008ee8:	e62e      	b.n	8008b48 <_scanf_float+0x70>
 8008eea:	bf00      	nop
 8008eec:	0800cd7c 	.word	0x0800cd7c
 8008ef0:	0800cf1d 	.word	0x0800cf1d

08008ef4 <siprintf>:
 8008ef4:	b40e      	push	{r1, r2, r3}
 8008ef6:	b510      	push	{r4, lr}
 8008ef8:	b09d      	sub	sp, #116	@ 0x74
 8008efa:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008efc:	9002      	str	r0, [sp, #8]
 8008efe:	9006      	str	r0, [sp, #24]
 8008f00:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008f04:	480a      	ldr	r0, [pc, #40]	@ (8008f30 <siprintf+0x3c>)
 8008f06:	9107      	str	r1, [sp, #28]
 8008f08:	9104      	str	r1, [sp, #16]
 8008f0a:	490a      	ldr	r1, [pc, #40]	@ (8008f34 <siprintf+0x40>)
 8008f0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f10:	9105      	str	r1, [sp, #20]
 8008f12:	2400      	movs	r4, #0
 8008f14:	a902      	add	r1, sp, #8
 8008f16:	6800      	ldr	r0, [r0, #0]
 8008f18:	9301      	str	r3, [sp, #4]
 8008f1a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008f1c:	f002 f9ac 	bl	800b278 <_svfiprintf_r>
 8008f20:	9b02      	ldr	r3, [sp, #8]
 8008f22:	701c      	strb	r4, [r3, #0]
 8008f24:	b01d      	add	sp, #116	@ 0x74
 8008f26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f2a:	b003      	add	sp, #12
 8008f2c:	4770      	bx	lr
 8008f2e:	bf00      	nop
 8008f30:	20000198 	.word	0x20000198
 8008f34:	ffff0208 	.word	0xffff0208

08008f38 <std>:
 8008f38:	2300      	movs	r3, #0
 8008f3a:	b510      	push	{r4, lr}
 8008f3c:	4604      	mov	r4, r0
 8008f3e:	e9c0 3300 	strd	r3, r3, [r0]
 8008f42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008f46:	6083      	str	r3, [r0, #8]
 8008f48:	8181      	strh	r1, [r0, #12]
 8008f4a:	6643      	str	r3, [r0, #100]	@ 0x64
 8008f4c:	81c2      	strh	r2, [r0, #14]
 8008f4e:	6183      	str	r3, [r0, #24]
 8008f50:	4619      	mov	r1, r3
 8008f52:	2208      	movs	r2, #8
 8008f54:	305c      	adds	r0, #92	@ 0x5c
 8008f56:	f000 ff37 	bl	8009dc8 <memset>
 8008f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8008f90 <std+0x58>)
 8008f5c:	6263      	str	r3, [r4, #36]	@ 0x24
 8008f5e:	4b0d      	ldr	r3, [pc, #52]	@ (8008f94 <std+0x5c>)
 8008f60:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008f62:	4b0d      	ldr	r3, [pc, #52]	@ (8008f98 <std+0x60>)
 8008f64:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008f66:	4b0d      	ldr	r3, [pc, #52]	@ (8008f9c <std+0x64>)
 8008f68:	6323      	str	r3, [r4, #48]	@ 0x30
 8008f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8008fa0 <std+0x68>)
 8008f6c:	6224      	str	r4, [r4, #32]
 8008f6e:	429c      	cmp	r4, r3
 8008f70:	d006      	beq.n	8008f80 <std+0x48>
 8008f72:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008f76:	4294      	cmp	r4, r2
 8008f78:	d002      	beq.n	8008f80 <std+0x48>
 8008f7a:	33d0      	adds	r3, #208	@ 0xd0
 8008f7c:	429c      	cmp	r4, r3
 8008f7e:	d105      	bne.n	8008f8c <std+0x54>
 8008f80:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008f84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f88:	f000 bf62 	b.w	8009e50 <__retarget_lock_init_recursive>
 8008f8c:	bd10      	pop	{r4, pc}
 8008f8e:	bf00      	nop
 8008f90:	0800c0ad 	.word	0x0800c0ad
 8008f94:	0800c0cf 	.word	0x0800c0cf
 8008f98:	0800c107 	.word	0x0800c107
 8008f9c:	0800c12b 	.word	0x0800c12b
 8008fa0:	200005b0 	.word	0x200005b0

08008fa4 <stdio_exit_handler>:
 8008fa4:	4a02      	ldr	r2, [pc, #8]	@ (8008fb0 <stdio_exit_handler+0xc>)
 8008fa6:	4903      	ldr	r1, [pc, #12]	@ (8008fb4 <stdio_exit_handler+0x10>)
 8008fa8:	4803      	ldr	r0, [pc, #12]	@ (8008fb8 <stdio_exit_handler+0x14>)
 8008faa:	f000 beef 	b.w	8009d8c <_fwalk_sglue>
 8008fae:	bf00      	nop
 8008fb0:	20000020 	.word	0x20000020
 8008fb4:	0800b6f1 	.word	0x0800b6f1
 8008fb8:	2000019c 	.word	0x2000019c

08008fbc <cleanup_stdio>:
 8008fbc:	6841      	ldr	r1, [r0, #4]
 8008fbe:	4b0c      	ldr	r3, [pc, #48]	@ (8008ff0 <cleanup_stdio+0x34>)
 8008fc0:	4299      	cmp	r1, r3
 8008fc2:	b510      	push	{r4, lr}
 8008fc4:	4604      	mov	r4, r0
 8008fc6:	d001      	beq.n	8008fcc <cleanup_stdio+0x10>
 8008fc8:	f002 fb92 	bl	800b6f0 <_fflush_r>
 8008fcc:	68a1      	ldr	r1, [r4, #8]
 8008fce:	4b09      	ldr	r3, [pc, #36]	@ (8008ff4 <cleanup_stdio+0x38>)
 8008fd0:	4299      	cmp	r1, r3
 8008fd2:	d002      	beq.n	8008fda <cleanup_stdio+0x1e>
 8008fd4:	4620      	mov	r0, r4
 8008fd6:	f002 fb8b 	bl	800b6f0 <_fflush_r>
 8008fda:	68e1      	ldr	r1, [r4, #12]
 8008fdc:	4b06      	ldr	r3, [pc, #24]	@ (8008ff8 <cleanup_stdio+0x3c>)
 8008fde:	4299      	cmp	r1, r3
 8008fe0:	d004      	beq.n	8008fec <cleanup_stdio+0x30>
 8008fe2:	4620      	mov	r0, r4
 8008fe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fe8:	f002 bb82 	b.w	800b6f0 <_fflush_r>
 8008fec:	bd10      	pop	{r4, pc}
 8008fee:	bf00      	nop
 8008ff0:	200005b0 	.word	0x200005b0
 8008ff4:	20000618 	.word	0x20000618
 8008ff8:	20000680 	.word	0x20000680

08008ffc <global_stdio_init.part.0>:
 8008ffc:	b510      	push	{r4, lr}
 8008ffe:	4b0b      	ldr	r3, [pc, #44]	@ (800902c <global_stdio_init.part.0+0x30>)
 8009000:	4c0b      	ldr	r4, [pc, #44]	@ (8009030 <global_stdio_init.part.0+0x34>)
 8009002:	4a0c      	ldr	r2, [pc, #48]	@ (8009034 <global_stdio_init.part.0+0x38>)
 8009004:	601a      	str	r2, [r3, #0]
 8009006:	4620      	mov	r0, r4
 8009008:	2200      	movs	r2, #0
 800900a:	2104      	movs	r1, #4
 800900c:	f7ff ff94 	bl	8008f38 <std>
 8009010:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009014:	2201      	movs	r2, #1
 8009016:	2109      	movs	r1, #9
 8009018:	f7ff ff8e 	bl	8008f38 <std>
 800901c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009020:	2202      	movs	r2, #2
 8009022:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009026:	2112      	movs	r1, #18
 8009028:	f7ff bf86 	b.w	8008f38 <std>
 800902c:	200006e8 	.word	0x200006e8
 8009030:	200005b0 	.word	0x200005b0
 8009034:	08008fa5 	.word	0x08008fa5

08009038 <__sfp_lock_acquire>:
 8009038:	4801      	ldr	r0, [pc, #4]	@ (8009040 <__sfp_lock_acquire+0x8>)
 800903a:	f000 bf0a 	b.w	8009e52 <__retarget_lock_acquire_recursive>
 800903e:	bf00      	nop
 8009040:	200006ed 	.word	0x200006ed

08009044 <__sfp_lock_release>:
 8009044:	4801      	ldr	r0, [pc, #4]	@ (800904c <__sfp_lock_release+0x8>)
 8009046:	f000 bf05 	b.w	8009e54 <__retarget_lock_release_recursive>
 800904a:	bf00      	nop
 800904c:	200006ed 	.word	0x200006ed

08009050 <__sinit>:
 8009050:	b510      	push	{r4, lr}
 8009052:	4604      	mov	r4, r0
 8009054:	f7ff fff0 	bl	8009038 <__sfp_lock_acquire>
 8009058:	6a23      	ldr	r3, [r4, #32]
 800905a:	b11b      	cbz	r3, 8009064 <__sinit+0x14>
 800905c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009060:	f7ff bff0 	b.w	8009044 <__sfp_lock_release>
 8009064:	4b04      	ldr	r3, [pc, #16]	@ (8009078 <__sinit+0x28>)
 8009066:	6223      	str	r3, [r4, #32]
 8009068:	4b04      	ldr	r3, [pc, #16]	@ (800907c <__sinit+0x2c>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d1f5      	bne.n	800905c <__sinit+0xc>
 8009070:	f7ff ffc4 	bl	8008ffc <global_stdio_init.part.0>
 8009074:	e7f2      	b.n	800905c <__sinit+0xc>
 8009076:	bf00      	nop
 8009078:	08008fbd 	.word	0x08008fbd
 800907c:	200006e8 	.word	0x200006e8

08009080 <sulp>:
 8009080:	b570      	push	{r4, r5, r6, lr}
 8009082:	4604      	mov	r4, r0
 8009084:	460d      	mov	r5, r1
 8009086:	ec45 4b10 	vmov	d0, r4, r5
 800908a:	4616      	mov	r6, r2
 800908c:	f002 fed0 	bl	800be30 <__ulp>
 8009090:	ec51 0b10 	vmov	r0, r1, d0
 8009094:	b17e      	cbz	r6, 80090b6 <sulp+0x36>
 8009096:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800909a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800909e:	2b00      	cmp	r3, #0
 80090a0:	dd09      	ble.n	80090b6 <sulp+0x36>
 80090a2:	051b      	lsls	r3, r3, #20
 80090a4:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80090a8:	2400      	movs	r4, #0
 80090aa:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80090ae:	4622      	mov	r2, r4
 80090b0:	462b      	mov	r3, r5
 80090b2:	f7f7 faa1 	bl	80005f8 <__aeabi_dmul>
 80090b6:	ec41 0b10 	vmov	d0, r0, r1
 80090ba:	bd70      	pop	{r4, r5, r6, pc}
 80090bc:	0000      	movs	r0, r0
	...

080090c0 <_strtod_l>:
 80090c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090c4:	b09f      	sub	sp, #124	@ 0x7c
 80090c6:	460c      	mov	r4, r1
 80090c8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80090ca:	2200      	movs	r2, #0
 80090cc:	921a      	str	r2, [sp, #104]	@ 0x68
 80090ce:	9005      	str	r0, [sp, #20]
 80090d0:	f04f 0a00 	mov.w	sl, #0
 80090d4:	f04f 0b00 	mov.w	fp, #0
 80090d8:	460a      	mov	r2, r1
 80090da:	9219      	str	r2, [sp, #100]	@ 0x64
 80090dc:	7811      	ldrb	r1, [r2, #0]
 80090de:	292b      	cmp	r1, #43	@ 0x2b
 80090e0:	d04a      	beq.n	8009178 <_strtod_l+0xb8>
 80090e2:	d838      	bhi.n	8009156 <_strtod_l+0x96>
 80090e4:	290d      	cmp	r1, #13
 80090e6:	d832      	bhi.n	800914e <_strtod_l+0x8e>
 80090e8:	2908      	cmp	r1, #8
 80090ea:	d832      	bhi.n	8009152 <_strtod_l+0x92>
 80090ec:	2900      	cmp	r1, #0
 80090ee:	d03b      	beq.n	8009168 <_strtod_l+0xa8>
 80090f0:	2200      	movs	r2, #0
 80090f2:	920e      	str	r2, [sp, #56]	@ 0x38
 80090f4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80090f6:	782a      	ldrb	r2, [r5, #0]
 80090f8:	2a30      	cmp	r2, #48	@ 0x30
 80090fa:	f040 80b2 	bne.w	8009262 <_strtod_l+0x1a2>
 80090fe:	786a      	ldrb	r2, [r5, #1]
 8009100:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009104:	2a58      	cmp	r2, #88	@ 0x58
 8009106:	d16e      	bne.n	80091e6 <_strtod_l+0x126>
 8009108:	9302      	str	r3, [sp, #8]
 800910a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800910c:	9301      	str	r3, [sp, #4]
 800910e:	ab1a      	add	r3, sp, #104	@ 0x68
 8009110:	9300      	str	r3, [sp, #0]
 8009112:	4a8f      	ldr	r2, [pc, #572]	@ (8009350 <_strtod_l+0x290>)
 8009114:	9805      	ldr	r0, [sp, #20]
 8009116:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009118:	a919      	add	r1, sp, #100	@ 0x64
 800911a:	f001 fd81 	bl	800ac20 <__gethex>
 800911e:	f010 060f 	ands.w	r6, r0, #15
 8009122:	4604      	mov	r4, r0
 8009124:	d005      	beq.n	8009132 <_strtod_l+0x72>
 8009126:	2e06      	cmp	r6, #6
 8009128:	d128      	bne.n	800917c <_strtod_l+0xbc>
 800912a:	3501      	adds	r5, #1
 800912c:	2300      	movs	r3, #0
 800912e:	9519      	str	r5, [sp, #100]	@ 0x64
 8009130:	930e      	str	r3, [sp, #56]	@ 0x38
 8009132:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009134:	2b00      	cmp	r3, #0
 8009136:	f040 858e 	bne.w	8009c56 <_strtod_l+0xb96>
 800913a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800913c:	b1cb      	cbz	r3, 8009172 <_strtod_l+0xb2>
 800913e:	4652      	mov	r2, sl
 8009140:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8009144:	ec43 2b10 	vmov	d0, r2, r3
 8009148:	b01f      	add	sp, #124	@ 0x7c
 800914a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800914e:	2920      	cmp	r1, #32
 8009150:	d1ce      	bne.n	80090f0 <_strtod_l+0x30>
 8009152:	3201      	adds	r2, #1
 8009154:	e7c1      	b.n	80090da <_strtod_l+0x1a>
 8009156:	292d      	cmp	r1, #45	@ 0x2d
 8009158:	d1ca      	bne.n	80090f0 <_strtod_l+0x30>
 800915a:	2101      	movs	r1, #1
 800915c:	910e      	str	r1, [sp, #56]	@ 0x38
 800915e:	1c51      	adds	r1, r2, #1
 8009160:	9119      	str	r1, [sp, #100]	@ 0x64
 8009162:	7852      	ldrb	r2, [r2, #1]
 8009164:	2a00      	cmp	r2, #0
 8009166:	d1c5      	bne.n	80090f4 <_strtod_l+0x34>
 8009168:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800916a:	9419      	str	r4, [sp, #100]	@ 0x64
 800916c:	2b00      	cmp	r3, #0
 800916e:	f040 8570 	bne.w	8009c52 <_strtod_l+0xb92>
 8009172:	4652      	mov	r2, sl
 8009174:	465b      	mov	r3, fp
 8009176:	e7e5      	b.n	8009144 <_strtod_l+0x84>
 8009178:	2100      	movs	r1, #0
 800917a:	e7ef      	b.n	800915c <_strtod_l+0x9c>
 800917c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800917e:	b13a      	cbz	r2, 8009190 <_strtod_l+0xd0>
 8009180:	2135      	movs	r1, #53	@ 0x35
 8009182:	a81c      	add	r0, sp, #112	@ 0x70
 8009184:	f002 ff4e 	bl	800c024 <__copybits>
 8009188:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800918a:	9805      	ldr	r0, [sp, #20]
 800918c:	f002 fb24 	bl	800b7d8 <_Bfree>
 8009190:	3e01      	subs	r6, #1
 8009192:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009194:	2e04      	cmp	r6, #4
 8009196:	d806      	bhi.n	80091a6 <_strtod_l+0xe6>
 8009198:	e8df f006 	tbb	[pc, r6]
 800919c:	201d0314 	.word	0x201d0314
 80091a0:	14          	.byte	0x14
 80091a1:	00          	.byte	0x00
 80091a2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80091a6:	05e1      	lsls	r1, r4, #23
 80091a8:	bf48      	it	mi
 80091aa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80091ae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80091b2:	0d1b      	lsrs	r3, r3, #20
 80091b4:	051b      	lsls	r3, r3, #20
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d1bb      	bne.n	8009132 <_strtod_l+0x72>
 80091ba:	f000 fe1f 	bl	8009dfc <__errno>
 80091be:	2322      	movs	r3, #34	@ 0x22
 80091c0:	6003      	str	r3, [r0, #0]
 80091c2:	e7b6      	b.n	8009132 <_strtod_l+0x72>
 80091c4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80091c8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80091cc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80091d0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80091d4:	e7e7      	b.n	80091a6 <_strtod_l+0xe6>
 80091d6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8009358 <_strtod_l+0x298>
 80091da:	e7e4      	b.n	80091a6 <_strtod_l+0xe6>
 80091dc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80091e0:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80091e4:	e7df      	b.n	80091a6 <_strtod_l+0xe6>
 80091e6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80091e8:	1c5a      	adds	r2, r3, #1
 80091ea:	9219      	str	r2, [sp, #100]	@ 0x64
 80091ec:	785b      	ldrb	r3, [r3, #1]
 80091ee:	2b30      	cmp	r3, #48	@ 0x30
 80091f0:	d0f9      	beq.n	80091e6 <_strtod_l+0x126>
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d09d      	beq.n	8009132 <_strtod_l+0x72>
 80091f6:	2301      	movs	r3, #1
 80091f8:	2700      	movs	r7, #0
 80091fa:	9308      	str	r3, [sp, #32]
 80091fc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80091fe:	930c      	str	r3, [sp, #48]	@ 0x30
 8009200:	970b      	str	r7, [sp, #44]	@ 0x2c
 8009202:	46b9      	mov	r9, r7
 8009204:	220a      	movs	r2, #10
 8009206:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009208:	7805      	ldrb	r5, [r0, #0]
 800920a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800920e:	b2d9      	uxtb	r1, r3
 8009210:	2909      	cmp	r1, #9
 8009212:	d928      	bls.n	8009266 <_strtod_l+0x1a6>
 8009214:	494f      	ldr	r1, [pc, #316]	@ (8009354 <_strtod_l+0x294>)
 8009216:	2201      	movs	r2, #1
 8009218:	f000 fdde 	bl	8009dd8 <strncmp>
 800921c:	2800      	cmp	r0, #0
 800921e:	d032      	beq.n	8009286 <_strtod_l+0x1c6>
 8009220:	2000      	movs	r0, #0
 8009222:	462a      	mov	r2, r5
 8009224:	900a      	str	r0, [sp, #40]	@ 0x28
 8009226:	464d      	mov	r5, r9
 8009228:	4603      	mov	r3, r0
 800922a:	2a65      	cmp	r2, #101	@ 0x65
 800922c:	d001      	beq.n	8009232 <_strtod_l+0x172>
 800922e:	2a45      	cmp	r2, #69	@ 0x45
 8009230:	d114      	bne.n	800925c <_strtod_l+0x19c>
 8009232:	b91d      	cbnz	r5, 800923c <_strtod_l+0x17c>
 8009234:	9a08      	ldr	r2, [sp, #32]
 8009236:	4302      	orrs	r2, r0
 8009238:	d096      	beq.n	8009168 <_strtod_l+0xa8>
 800923a:	2500      	movs	r5, #0
 800923c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800923e:	1c62      	adds	r2, r4, #1
 8009240:	9219      	str	r2, [sp, #100]	@ 0x64
 8009242:	7862      	ldrb	r2, [r4, #1]
 8009244:	2a2b      	cmp	r2, #43	@ 0x2b
 8009246:	d07a      	beq.n	800933e <_strtod_l+0x27e>
 8009248:	2a2d      	cmp	r2, #45	@ 0x2d
 800924a:	d07e      	beq.n	800934a <_strtod_l+0x28a>
 800924c:	f04f 0c00 	mov.w	ip, #0
 8009250:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009254:	2909      	cmp	r1, #9
 8009256:	f240 8085 	bls.w	8009364 <_strtod_l+0x2a4>
 800925a:	9419      	str	r4, [sp, #100]	@ 0x64
 800925c:	f04f 0800 	mov.w	r8, #0
 8009260:	e0a5      	b.n	80093ae <_strtod_l+0x2ee>
 8009262:	2300      	movs	r3, #0
 8009264:	e7c8      	b.n	80091f8 <_strtod_l+0x138>
 8009266:	f1b9 0f08 	cmp.w	r9, #8
 800926a:	bfd8      	it	le
 800926c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800926e:	f100 0001 	add.w	r0, r0, #1
 8009272:	bfda      	itte	le
 8009274:	fb02 3301 	mlale	r3, r2, r1, r3
 8009278:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800927a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800927e:	f109 0901 	add.w	r9, r9, #1
 8009282:	9019      	str	r0, [sp, #100]	@ 0x64
 8009284:	e7bf      	b.n	8009206 <_strtod_l+0x146>
 8009286:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009288:	1c5a      	adds	r2, r3, #1
 800928a:	9219      	str	r2, [sp, #100]	@ 0x64
 800928c:	785a      	ldrb	r2, [r3, #1]
 800928e:	f1b9 0f00 	cmp.w	r9, #0
 8009292:	d03b      	beq.n	800930c <_strtod_l+0x24c>
 8009294:	900a      	str	r0, [sp, #40]	@ 0x28
 8009296:	464d      	mov	r5, r9
 8009298:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800929c:	2b09      	cmp	r3, #9
 800929e:	d912      	bls.n	80092c6 <_strtod_l+0x206>
 80092a0:	2301      	movs	r3, #1
 80092a2:	e7c2      	b.n	800922a <_strtod_l+0x16a>
 80092a4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80092a6:	1c5a      	adds	r2, r3, #1
 80092a8:	9219      	str	r2, [sp, #100]	@ 0x64
 80092aa:	785a      	ldrb	r2, [r3, #1]
 80092ac:	3001      	adds	r0, #1
 80092ae:	2a30      	cmp	r2, #48	@ 0x30
 80092b0:	d0f8      	beq.n	80092a4 <_strtod_l+0x1e4>
 80092b2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80092b6:	2b08      	cmp	r3, #8
 80092b8:	f200 84d2 	bhi.w	8009c60 <_strtod_l+0xba0>
 80092bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80092be:	900a      	str	r0, [sp, #40]	@ 0x28
 80092c0:	2000      	movs	r0, #0
 80092c2:	930c      	str	r3, [sp, #48]	@ 0x30
 80092c4:	4605      	mov	r5, r0
 80092c6:	3a30      	subs	r2, #48	@ 0x30
 80092c8:	f100 0301 	add.w	r3, r0, #1
 80092cc:	d018      	beq.n	8009300 <_strtod_l+0x240>
 80092ce:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80092d0:	4419      	add	r1, r3
 80092d2:	910a      	str	r1, [sp, #40]	@ 0x28
 80092d4:	462e      	mov	r6, r5
 80092d6:	f04f 0e0a 	mov.w	lr, #10
 80092da:	1c71      	adds	r1, r6, #1
 80092dc:	eba1 0c05 	sub.w	ip, r1, r5
 80092e0:	4563      	cmp	r3, ip
 80092e2:	dc15      	bgt.n	8009310 <_strtod_l+0x250>
 80092e4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80092e8:	182b      	adds	r3, r5, r0
 80092ea:	2b08      	cmp	r3, #8
 80092ec:	f105 0501 	add.w	r5, r5, #1
 80092f0:	4405      	add	r5, r0
 80092f2:	dc1a      	bgt.n	800932a <_strtod_l+0x26a>
 80092f4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80092f6:	230a      	movs	r3, #10
 80092f8:	fb03 2301 	mla	r3, r3, r1, r2
 80092fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80092fe:	2300      	movs	r3, #0
 8009300:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009302:	1c51      	adds	r1, r2, #1
 8009304:	9119      	str	r1, [sp, #100]	@ 0x64
 8009306:	7852      	ldrb	r2, [r2, #1]
 8009308:	4618      	mov	r0, r3
 800930a:	e7c5      	b.n	8009298 <_strtod_l+0x1d8>
 800930c:	4648      	mov	r0, r9
 800930e:	e7ce      	b.n	80092ae <_strtod_l+0x1ee>
 8009310:	2e08      	cmp	r6, #8
 8009312:	dc05      	bgt.n	8009320 <_strtod_l+0x260>
 8009314:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009316:	fb0e f606 	mul.w	r6, lr, r6
 800931a:	960b      	str	r6, [sp, #44]	@ 0x2c
 800931c:	460e      	mov	r6, r1
 800931e:	e7dc      	b.n	80092da <_strtod_l+0x21a>
 8009320:	2910      	cmp	r1, #16
 8009322:	bfd8      	it	le
 8009324:	fb0e f707 	mulle.w	r7, lr, r7
 8009328:	e7f8      	b.n	800931c <_strtod_l+0x25c>
 800932a:	2b0f      	cmp	r3, #15
 800932c:	bfdc      	itt	le
 800932e:	230a      	movle	r3, #10
 8009330:	fb03 2707 	mlale	r7, r3, r7, r2
 8009334:	e7e3      	b.n	80092fe <_strtod_l+0x23e>
 8009336:	2300      	movs	r3, #0
 8009338:	930a      	str	r3, [sp, #40]	@ 0x28
 800933a:	2301      	movs	r3, #1
 800933c:	e77a      	b.n	8009234 <_strtod_l+0x174>
 800933e:	f04f 0c00 	mov.w	ip, #0
 8009342:	1ca2      	adds	r2, r4, #2
 8009344:	9219      	str	r2, [sp, #100]	@ 0x64
 8009346:	78a2      	ldrb	r2, [r4, #2]
 8009348:	e782      	b.n	8009250 <_strtod_l+0x190>
 800934a:	f04f 0c01 	mov.w	ip, #1
 800934e:	e7f8      	b.n	8009342 <_strtod_l+0x282>
 8009350:	0800cf34 	.word	0x0800cf34
 8009354:	0800cd81 	.word	0x0800cd81
 8009358:	7ff00000 	.word	0x7ff00000
 800935c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800935e:	1c51      	adds	r1, r2, #1
 8009360:	9119      	str	r1, [sp, #100]	@ 0x64
 8009362:	7852      	ldrb	r2, [r2, #1]
 8009364:	2a30      	cmp	r2, #48	@ 0x30
 8009366:	d0f9      	beq.n	800935c <_strtod_l+0x29c>
 8009368:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800936c:	2908      	cmp	r1, #8
 800936e:	f63f af75 	bhi.w	800925c <_strtod_l+0x19c>
 8009372:	3a30      	subs	r2, #48	@ 0x30
 8009374:	9209      	str	r2, [sp, #36]	@ 0x24
 8009376:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009378:	920f      	str	r2, [sp, #60]	@ 0x3c
 800937a:	f04f 080a 	mov.w	r8, #10
 800937e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009380:	1c56      	adds	r6, r2, #1
 8009382:	9619      	str	r6, [sp, #100]	@ 0x64
 8009384:	7852      	ldrb	r2, [r2, #1]
 8009386:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800938a:	f1be 0f09 	cmp.w	lr, #9
 800938e:	d939      	bls.n	8009404 <_strtod_l+0x344>
 8009390:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009392:	1a76      	subs	r6, r6, r1
 8009394:	2e08      	cmp	r6, #8
 8009396:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800939a:	dc03      	bgt.n	80093a4 <_strtod_l+0x2e4>
 800939c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800939e:	4588      	cmp	r8, r1
 80093a0:	bfa8      	it	ge
 80093a2:	4688      	movge	r8, r1
 80093a4:	f1bc 0f00 	cmp.w	ip, #0
 80093a8:	d001      	beq.n	80093ae <_strtod_l+0x2ee>
 80093aa:	f1c8 0800 	rsb	r8, r8, #0
 80093ae:	2d00      	cmp	r5, #0
 80093b0:	d14e      	bne.n	8009450 <_strtod_l+0x390>
 80093b2:	9908      	ldr	r1, [sp, #32]
 80093b4:	4308      	orrs	r0, r1
 80093b6:	f47f aebc 	bne.w	8009132 <_strtod_l+0x72>
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	f47f aed4 	bne.w	8009168 <_strtod_l+0xa8>
 80093c0:	2a69      	cmp	r2, #105	@ 0x69
 80093c2:	d028      	beq.n	8009416 <_strtod_l+0x356>
 80093c4:	dc25      	bgt.n	8009412 <_strtod_l+0x352>
 80093c6:	2a49      	cmp	r2, #73	@ 0x49
 80093c8:	d025      	beq.n	8009416 <_strtod_l+0x356>
 80093ca:	2a4e      	cmp	r2, #78	@ 0x4e
 80093cc:	f47f aecc 	bne.w	8009168 <_strtod_l+0xa8>
 80093d0:	499a      	ldr	r1, [pc, #616]	@ (800963c <_strtod_l+0x57c>)
 80093d2:	a819      	add	r0, sp, #100	@ 0x64
 80093d4:	f001 fe46 	bl	800b064 <__match>
 80093d8:	2800      	cmp	r0, #0
 80093da:	f43f aec5 	beq.w	8009168 <_strtod_l+0xa8>
 80093de:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80093e0:	781b      	ldrb	r3, [r3, #0]
 80093e2:	2b28      	cmp	r3, #40	@ 0x28
 80093e4:	d12e      	bne.n	8009444 <_strtod_l+0x384>
 80093e6:	4996      	ldr	r1, [pc, #600]	@ (8009640 <_strtod_l+0x580>)
 80093e8:	aa1c      	add	r2, sp, #112	@ 0x70
 80093ea:	a819      	add	r0, sp, #100	@ 0x64
 80093ec:	f001 fe4e 	bl	800b08c <__hexnan>
 80093f0:	2805      	cmp	r0, #5
 80093f2:	d127      	bne.n	8009444 <_strtod_l+0x384>
 80093f4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80093f6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80093fa:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80093fe:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009402:	e696      	b.n	8009132 <_strtod_l+0x72>
 8009404:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009406:	fb08 2101 	mla	r1, r8, r1, r2
 800940a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800940e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009410:	e7b5      	b.n	800937e <_strtod_l+0x2be>
 8009412:	2a6e      	cmp	r2, #110	@ 0x6e
 8009414:	e7da      	b.n	80093cc <_strtod_l+0x30c>
 8009416:	498b      	ldr	r1, [pc, #556]	@ (8009644 <_strtod_l+0x584>)
 8009418:	a819      	add	r0, sp, #100	@ 0x64
 800941a:	f001 fe23 	bl	800b064 <__match>
 800941e:	2800      	cmp	r0, #0
 8009420:	f43f aea2 	beq.w	8009168 <_strtod_l+0xa8>
 8009424:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009426:	4988      	ldr	r1, [pc, #544]	@ (8009648 <_strtod_l+0x588>)
 8009428:	3b01      	subs	r3, #1
 800942a:	a819      	add	r0, sp, #100	@ 0x64
 800942c:	9319      	str	r3, [sp, #100]	@ 0x64
 800942e:	f001 fe19 	bl	800b064 <__match>
 8009432:	b910      	cbnz	r0, 800943a <_strtod_l+0x37a>
 8009434:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009436:	3301      	adds	r3, #1
 8009438:	9319      	str	r3, [sp, #100]	@ 0x64
 800943a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8009658 <_strtod_l+0x598>
 800943e:	f04f 0a00 	mov.w	sl, #0
 8009442:	e676      	b.n	8009132 <_strtod_l+0x72>
 8009444:	4881      	ldr	r0, [pc, #516]	@ (800964c <_strtod_l+0x58c>)
 8009446:	f000 fd1b 	bl	8009e80 <nan>
 800944a:	ec5b ab10 	vmov	sl, fp, d0
 800944e:	e670      	b.n	8009132 <_strtod_l+0x72>
 8009450:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009452:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8009454:	eba8 0303 	sub.w	r3, r8, r3
 8009458:	f1b9 0f00 	cmp.w	r9, #0
 800945c:	bf08      	it	eq
 800945e:	46a9      	moveq	r9, r5
 8009460:	2d10      	cmp	r5, #16
 8009462:	9309      	str	r3, [sp, #36]	@ 0x24
 8009464:	462c      	mov	r4, r5
 8009466:	bfa8      	it	ge
 8009468:	2410      	movge	r4, #16
 800946a:	f7f7 f84b 	bl	8000504 <__aeabi_ui2d>
 800946e:	2d09      	cmp	r5, #9
 8009470:	4682      	mov	sl, r0
 8009472:	468b      	mov	fp, r1
 8009474:	dc13      	bgt.n	800949e <_strtod_l+0x3de>
 8009476:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009478:	2b00      	cmp	r3, #0
 800947a:	f43f ae5a 	beq.w	8009132 <_strtod_l+0x72>
 800947e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009480:	dd78      	ble.n	8009574 <_strtod_l+0x4b4>
 8009482:	2b16      	cmp	r3, #22
 8009484:	dc5f      	bgt.n	8009546 <_strtod_l+0x486>
 8009486:	4972      	ldr	r1, [pc, #456]	@ (8009650 <_strtod_l+0x590>)
 8009488:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800948c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009490:	4652      	mov	r2, sl
 8009492:	465b      	mov	r3, fp
 8009494:	f7f7 f8b0 	bl	80005f8 <__aeabi_dmul>
 8009498:	4682      	mov	sl, r0
 800949a:	468b      	mov	fp, r1
 800949c:	e649      	b.n	8009132 <_strtod_l+0x72>
 800949e:	4b6c      	ldr	r3, [pc, #432]	@ (8009650 <_strtod_l+0x590>)
 80094a0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80094a4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80094a8:	f7f7 f8a6 	bl	80005f8 <__aeabi_dmul>
 80094ac:	4682      	mov	sl, r0
 80094ae:	4638      	mov	r0, r7
 80094b0:	468b      	mov	fp, r1
 80094b2:	f7f7 f827 	bl	8000504 <__aeabi_ui2d>
 80094b6:	4602      	mov	r2, r0
 80094b8:	460b      	mov	r3, r1
 80094ba:	4650      	mov	r0, sl
 80094bc:	4659      	mov	r1, fp
 80094be:	f7f6 fee5 	bl	800028c <__adddf3>
 80094c2:	2d0f      	cmp	r5, #15
 80094c4:	4682      	mov	sl, r0
 80094c6:	468b      	mov	fp, r1
 80094c8:	ddd5      	ble.n	8009476 <_strtod_l+0x3b6>
 80094ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094cc:	1b2c      	subs	r4, r5, r4
 80094ce:	441c      	add	r4, r3
 80094d0:	2c00      	cmp	r4, #0
 80094d2:	f340 8093 	ble.w	80095fc <_strtod_l+0x53c>
 80094d6:	f014 030f 	ands.w	r3, r4, #15
 80094da:	d00a      	beq.n	80094f2 <_strtod_l+0x432>
 80094dc:	495c      	ldr	r1, [pc, #368]	@ (8009650 <_strtod_l+0x590>)
 80094de:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80094e2:	4652      	mov	r2, sl
 80094e4:	465b      	mov	r3, fp
 80094e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094ea:	f7f7 f885 	bl	80005f8 <__aeabi_dmul>
 80094ee:	4682      	mov	sl, r0
 80094f0:	468b      	mov	fp, r1
 80094f2:	f034 040f 	bics.w	r4, r4, #15
 80094f6:	d073      	beq.n	80095e0 <_strtod_l+0x520>
 80094f8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80094fc:	dd49      	ble.n	8009592 <_strtod_l+0x4d2>
 80094fe:	2400      	movs	r4, #0
 8009500:	46a0      	mov	r8, r4
 8009502:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009504:	46a1      	mov	r9, r4
 8009506:	9a05      	ldr	r2, [sp, #20]
 8009508:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8009658 <_strtod_l+0x598>
 800950c:	2322      	movs	r3, #34	@ 0x22
 800950e:	6013      	str	r3, [r2, #0]
 8009510:	f04f 0a00 	mov.w	sl, #0
 8009514:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009516:	2b00      	cmp	r3, #0
 8009518:	f43f ae0b 	beq.w	8009132 <_strtod_l+0x72>
 800951c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800951e:	9805      	ldr	r0, [sp, #20]
 8009520:	f002 f95a 	bl	800b7d8 <_Bfree>
 8009524:	9805      	ldr	r0, [sp, #20]
 8009526:	4649      	mov	r1, r9
 8009528:	f002 f956 	bl	800b7d8 <_Bfree>
 800952c:	9805      	ldr	r0, [sp, #20]
 800952e:	4641      	mov	r1, r8
 8009530:	f002 f952 	bl	800b7d8 <_Bfree>
 8009534:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009536:	9805      	ldr	r0, [sp, #20]
 8009538:	f002 f94e 	bl	800b7d8 <_Bfree>
 800953c:	9805      	ldr	r0, [sp, #20]
 800953e:	4621      	mov	r1, r4
 8009540:	f002 f94a 	bl	800b7d8 <_Bfree>
 8009544:	e5f5      	b.n	8009132 <_strtod_l+0x72>
 8009546:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009548:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800954c:	4293      	cmp	r3, r2
 800954e:	dbbc      	blt.n	80094ca <_strtod_l+0x40a>
 8009550:	4c3f      	ldr	r4, [pc, #252]	@ (8009650 <_strtod_l+0x590>)
 8009552:	f1c5 050f 	rsb	r5, r5, #15
 8009556:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800955a:	4652      	mov	r2, sl
 800955c:	465b      	mov	r3, fp
 800955e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009562:	f7f7 f849 	bl	80005f8 <__aeabi_dmul>
 8009566:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009568:	1b5d      	subs	r5, r3, r5
 800956a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800956e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009572:	e78f      	b.n	8009494 <_strtod_l+0x3d4>
 8009574:	3316      	adds	r3, #22
 8009576:	dba8      	blt.n	80094ca <_strtod_l+0x40a>
 8009578:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800957a:	eba3 0808 	sub.w	r8, r3, r8
 800957e:	4b34      	ldr	r3, [pc, #208]	@ (8009650 <_strtod_l+0x590>)
 8009580:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009584:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009588:	4650      	mov	r0, sl
 800958a:	4659      	mov	r1, fp
 800958c:	f7f7 f95e 	bl	800084c <__aeabi_ddiv>
 8009590:	e782      	b.n	8009498 <_strtod_l+0x3d8>
 8009592:	2300      	movs	r3, #0
 8009594:	4f2f      	ldr	r7, [pc, #188]	@ (8009654 <_strtod_l+0x594>)
 8009596:	1124      	asrs	r4, r4, #4
 8009598:	4650      	mov	r0, sl
 800959a:	4659      	mov	r1, fp
 800959c:	461e      	mov	r6, r3
 800959e:	2c01      	cmp	r4, #1
 80095a0:	dc21      	bgt.n	80095e6 <_strtod_l+0x526>
 80095a2:	b10b      	cbz	r3, 80095a8 <_strtod_l+0x4e8>
 80095a4:	4682      	mov	sl, r0
 80095a6:	468b      	mov	fp, r1
 80095a8:	492a      	ldr	r1, [pc, #168]	@ (8009654 <_strtod_l+0x594>)
 80095aa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80095ae:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80095b2:	4652      	mov	r2, sl
 80095b4:	465b      	mov	r3, fp
 80095b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095ba:	f7f7 f81d 	bl	80005f8 <__aeabi_dmul>
 80095be:	4b26      	ldr	r3, [pc, #152]	@ (8009658 <_strtod_l+0x598>)
 80095c0:	460a      	mov	r2, r1
 80095c2:	400b      	ands	r3, r1
 80095c4:	4925      	ldr	r1, [pc, #148]	@ (800965c <_strtod_l+0x59c>)
 80095c6:	428b      	cmp	r3, r1
 80095c8:	4682      	mov	sl, r0
 80095ca:	d898      	bhi.n	80094fe <_strtod_l+0x43e>
 80095cc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80095d0:	428b      	cmp	r3, r1
 80095d2:	bf86      	itte	hi
 80095d4:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8009660 <_strtod_l+0x5a0>
 80095d8:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 80095dc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80095e0:	2300      	movs	r3, #0
 80095e2:	9308      	str	r3, [sp, #32]
 80095e4:	e076      	b.n	80096d4 <_strtod_l+0x614>
 80095e6:	07e2      	lsls	r2, r4, #31
 80095e8:	d504      	bpl.n	80095f4 <_strtod_l+0x534>
 80095ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095ee:	f7f7 f803 	bl	80005f8 <__aeabi_dmul>
 80095f2:	2301      	movs	r3, #1
 80095f4:	3601      	adds	r6, #1
 80095f6:	1064      	asrs	r4, r4, #1
 80095f8:	3708      	adds	r7, #8
 80095fa:	e7d0      	b.n	800959e <_strtod_l+0x4de>
 80095fc:	d0f0      	beq.n	80095e0 <_strtod_l+0x520>
 80095fe:	4264      	negs	r4, r4
 8009600:	f014 020f 	ands.w	r2, r4, #15
 8009604:	d00a      	beq.n	800961c <_strtod_l+0x55c>
 8009606:	4b12      	ldr	r3, [pc, #72]	@ (8009650 <_strtod_l+0x590>)
 8009608:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800960c:	4650      	mov	r0, sl
 800960e:	4659      	mov	r1, fp
 8009610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009614:	f7f7 f91a 	bl	800084c <__aeabi_ddiv>
 8009618:	4682      	mov	sl, r0
 800961a:	468b      	mov	fp, r1
 800961c:	1124      	asrs	r4, r4, #4
 800961e:	d0df      	beq.n	80095e0 <_strtod_l+0x520>
 8009620:	2c1f      	cmp	r4, #31
 8009622:	dd1f      	ble.n	8009664 <_strtod_l+0x5a4>
 8009624:	2400      	movs	r4, #0
 8009626:	46a0      	mov	r8, r4
 8009628:	940b      	str	r4, [sp, #44]	@ 0x2c
 800962a:	46a1      	mov	r9, r4
 800962c:	9a05      	ldr	r2, [sp, #20]
 800962e:	2322      	movs	r3, #34	@ 0x22
 8009630:	f04f 0a00 	mov.w	sl, #0
 8009634:	f04f 0b00 	mov.w	fp, #0
 8009638:	6013      	str	r3, [r2, #0]
 800963a:	e76b      	b.n	8009514 <_strtod_l+0x454>
 800963c:	0800cd55 	.word	0x0800cd55
 8009640:	0800cf20 	.word	0x0800cf20
 8009644:	0800cd4d 	.word	0x0800cd4d
 8009648:	0800cd8e 	.word	0x0800cd8e
 800964c:	0800cf1d 	.word	0x0800cf1d
 8009650:	0800d0a8 	.word	0x0800d0a8
 8009654:	0800d080 	.word	0x0800d080
 8009658:	7ff00000 	.word	0x7ff00000
 800965c:	7ca00000 	.word	0x7ca00000
 8009660:	7fefffff 	.word	0x7fefffff
 8009664:	f014 0310 	ands.w	r3, r4, #16
 8009668:	bf18      	it	ne
 800966a:	236a      	movne	r3, #106	@ 0x6a
 800966c:	4ea9      	ldr	r6, [pc, #676]	@ (8009914 <_strtod_l+0x854>)
 800966e:	9308      	str	r3, [sp, #32]
 8009670:	4650      	mov	r0, sl
 8009672:	4659      	mov	r1, fp
 8009674:	2300      	movs	r3, #0
 8009676:	07e7      	lsls	r7, r4, #31
 8009678:	d504      	bpl.n	8009684 <_strtod_l+0x5c4>
 800967a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800967e:	f7f6 ffbb 	bl	80005f8 <__aeabi_dmul>
 8009682:	2301      	movs	r3, #1
 8009684:	1064      	asrs	r4, r4, #1
 8009686:	f106 0608 	add.w	r6, r6, #8
 800968a:	d1f4      	bne.n	8009676 <_strtod_l+0x5b6>
 800968c:	b10b      	cbz	r3, 8009692 <_strtod_l+0x5d2>
 800968e:	4682      	mov	sl, r0
 8009690:	468b      	mov	fp, r1
 8009692:	9b08      	ldr	r3, [sp, #32]
 8009694:	b1b3      	cbz	r3, 80096c4 <_strtod_l+0x604>
 8009696:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800969a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800969e:	2b00      	cmp	r3, #0
 80096a0:	4659      	mov	r1, fp
 80096a2:	dd0f      	ble.n	80096c4 <_strtod_l+0x604>
 80096a4:	2b1f      	cmp	r3, #31
 80096a6:	dd56      	ble.n	8009756 <_strtod_l+0x696>
 80096a8:	2b34      	cmp	r3, #52	@ 0x34
 80096aa:	bfde      	ittt	le
 80096ac:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 80096b0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80096b4:	4093      	lslle	r3, r2
 80096b6:	f04f 0a00 	mov.w	sl, #0
 80096ba:	bfcc      	ite	gt
 80096bc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80096c0:	ea03 0b01 	andle.w	fp, r3, r1
 80096c4:	2200      	movs	r2, #0
 80096c6:	2300      	movs	r3, #0
 80096c8:	4650      	mov	r0, sl
 80096ca:	4659      	mov	r1, fp
 80096cc:	f7f7 f9fc 	bl	8000ac8 <__aeabi_dcmpeq>
 80096d0:	2800      	cmp	r0, #0
 80096d2:	d1a7      	bne.n	8009624 <_strtod_l+0x564>
 80096d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80096d6:	9300      	str	r3, [sp, #0]
 80096d8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80096da:	9805      	ldr	r0, [sp, #20]
 80096dc:	462b      	mov	r3, r5
 80096de:	464a      	mov	r2, r9
 80096e0:	f002 f8e2 	bl	800b8a8 <__s2b>
 80096e4:	900b      	str	r0, [sp, #44]	@ 0x2c
 80096e6:	2800      	cmp	r0, #0
 80096e8:	f43f af09 	beq.w	80094fe <_strtod_l+0x43e>
 80096ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80096ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80096f0:	2a00      	cmp	r2, #0
 80096f2:	eba3 0308 	sub.w	r3, r3, r8
 80096f6:	bfa8      	it	ge
 80096f8:	2300      	movge	r3, #0
 80096fa:	9312      	str	r3, [sp, #72]	@ 0x48
 80096fc:	2400      	movs	r4, #0
 80096fe:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009702:	9316      	str	r3, [sp, #88]	@ 0x58
 8009704:	46a0      	mov	r8, r4
 8009706:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009708:	9805      	ldr	r0, [sp, #20]
 800970a:	6859      	ldr	r1, [r3, #4]
 800970c:	f002 f824 	bl	800b758 <_Balloc>
 8009710:	4681      	mov	r9, r0
 8009712:	2800      	cmp	r0, #0
 8009714:	f43f aef7 	beq.w	8009506 <_strtod_l+0x446>
 8009718:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800971a:	691a      	ldr	r2, [r3, #16]
 800971c:	3202      	adds	r2, #2
 800971e:	f103 010c 	add.w	r1, r3, #12
 8009722:	0092      	lsls	r2, r2, #2
 8009724:	300c      	adds	r0, #12
 8009726:	f000 fb9b 	bl	8009e60 <memcpy>
 800972a:	ec4b ab10 	vmov	d0, sl, fp
 800972e:	9805      	ldr	r0, [sp, #20]
 8009730:	aa1c      	add	r2, sp, #112	@ 0x70
 8009732:	a91b      	add	r1, sp, #108	@ 0x6c
 8009734:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009738:	f002 fbea 	bl	800bf10 <__d2b>
 800973c:	901a      	str	r0, [sp, #104]	@ 0x68
 800973e:	2800      	cmp	r0, #0
 8009740:	f43f aee1 	beq.w	8009506 <_strtod_l+0x446>
 8009744:	9805      	ldr	r0, [sp, #20]
 8009746:	2101      	movs	r1, #1
 8009748:	f002 f944 	bl	800b9d4 <__i2b>
 800974c:	4680      	mov	r8, r0
 800974e:	b948      	cbnz	r0, 8009764 <_strtod_l+0x6a4>
 8009750:	f04f 0800 	mov.w	r8, #0
 8009754:	e6d7      	b.n	8009506 <_strtod_l+0x446>
 8009756:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800975a:	fa02 f303 	lsl.w	r3, r2, r3
 800975e:	ea03 0a0a 	and.w	sl, r3, sl
 8009762:	e7af      	b.n	80096c4 <_strtod_l+0x604>
 8009764:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009766:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009768:	2d00      	cmp	r5, #0
 800976a:	bfab      	itete	ge
 800976c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800976e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009770:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009772:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009774:	bfac      	ite	ge
 8009776:	18ef      	addge	r7, r5, r3
 8009778:	1b5e      	sublt	r6, r3, r5
 800977a:	9b08      	ldr	r3, [sp, #32]
 800977c:	1aed      	subs	r5, r5, r3
 800977e:	4415      	add	r5, r2
 8009780:	4b65      	ldr	r3, [pc, #404]	@ (8009918 <_strtod_l+0x858>)
 8009782:	3d01      	subs	r5, #1
 8009784:	429d      	cmp	r5, r3
 8009786:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800978a:	da50      	bge.n	800982e <_strtod_l+0x76e>
 800978c:	1b5b      	subs	r3, r3, r5
 800978e:	2b1f      	cmp	r3, #31
 8009790:	eba2 0203 	sub.w	r2, r2, r3
 8009794:	f04f 0101 	mov.w	r1, #1
 8009798:	dc3d      	bgt.n	8009816 <_strtod_l+0x756>
 800979a:	fa01 f303 	lsl.w	r3, r1, r3
 800979e:	9313      	str	r3, [sp, #76]	@ 0x4c
 80097a0:	2300      	movs	r3, #0
 80097a2:	9310      	str	r3, [sp, #64]	@ 0x40
 80097a4:	18bd      	adds	r5, r7, r2
 80097a6:	9b08      	ldr	r3, [sp, #32]
 80097a8:	42af      	cmp	r7, r5
 80097aa:	4416      	add	r6, r2
 80097ac:	441e      	add	r6, r3
 80097ae:	463b      	mov	r3, r7
 80097b0:	bfa8      	it	ge
 80097b2:	462b      	movge	r3, r5
 80097b4:	42b3      	cmp	r3, r6
 80097b6:	bfa8      	it	ge
 80097b8:	4633      	movge	r3, r6
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	bfc2      	ittt	gt
 80097be:	1aed      	subgt	r5, r5, r3
 80097c0:	1af6      	subgt	r6, r6, r3
 80097c2:	1aff      	subgt	r7, r7, r3
 80097c4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	dd16      	ble.n	80097f8 <_strtod_l+0x738>
 80097ca:	4641      	mov	r1, r8
 80097cc:	9805      	ldr	r0, [sp, #20]
 80097ce:	461a      	mov	r2, r3
 80097d0:	f002 f9b8 	bl	800bb44 <__pow5mult>
 80097d4:	4680      	mov	r8, r0
 80097d6:	2800      	cmp	r0, #0
 80097d8:	d0ba      	beq.n	8009750 <_strtod_l+0x690>
 80097da:	4601      	mov	r1, r0
 80097dc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80097de:	9805      	ldr	r0, [sp, #20]
 80097e0:	f002 f90e 	bl	800ba00 <__multiply>
 80097e4:	900a      	str	r0, [sp, #40]	@ 0x28
 80097e6:	2800      	cmp	r0, #0
 80097e8:	f43f ae8d 	beq.w	8009506 <_strtod_l+0x446>
 80097ec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80097ee:	9805      	ldr	r0, [sp, #20]
 80097f0:	f001 fff2 	bl	800b7d8 <_Bfree>
 80097f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80097f6:	931a      	str	r3, [sp, #104]	@ 0x68
 80097f8:	2d00      	cmp	r5, #0
 80097fa:	dc1d      	bgt.n	8009838 <_strtod_l+0x778>
 80097fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097fe:	2b00      	cmp	r3, #0
 8009800:	dd23      	ble.n	800984a <_strtod_l+0x78a>
 8009802:	4649      	mov	r1, r9
 8009804:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009806:	9805      	ldr	r0, [sp, #20]
 8009808:	f002 f99c 	bl	800bb44 <__pow5mult>
 800980c:	4681      	mov	r9, r0
 800980e:	b9e0      	cbnz	r0, 800984a <_strtod_l+0x78a>
 8009810:	f04f 0900 	mov.w	r9, #0
 8009814:	e677      	b.n	8009506 <_strtod_l+0x446>
 8009816:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800981a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800981e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009822:	35e2      	adds	r5, #226	@ 0xe2
 8009824:	fa01 f305 	lsl.w	r3, r1, r5
 8009828:	9310      	str	r3, [sp, #64]	@ 0x40
 800982a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800982c:	e7ba      	b.n	80097a4 <_strtod_l+0x6e4>
 800982e:	2300      	movs	r3, #0
 8009830:	9310      	str	r3, [sp, #64]	@ 0x40
 8009832:	2301      	movs	r3, #1
 8009834:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009836:	e7b5      	b.n	80097a4 <_strtod_l+0x6e4>
 8009838:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800983a:	9805      	ldr	r0, [sp, #20]
 800983c:	462a      	mov	r2, r5
 800983e:	f002 f9db 	bl	800bbf8 <__lshift>
 8009842:	901a      	str	r0, [sp, #104]	@ 0x68
 8009844:	2800      	cmp	r0, #0
 8009846:	d1d9      	bne.n	80097fc <_strtod_l+0x73c>
 8009848:	e65d      	b.n	8009506 <_strtod_l+0x446>
 800984a:	2e00      	cmp	r6, #0
 800984c:	dd07      	ble.n	800985e <_strtod_l+0x79e>
 800984e:	4649      	mov	r1, r9
 8009850:	9805      	ldr	r0, [sp, #20]
 8009852:	4632      	mov	r2, r6
 8009854:	f002 f9d0 	bl	800bbf8 <__lshift>
 8009858:	4681      	mov	r9, r0
 800985a:	2800      	cmp	r0, #0
 800985c:	d0d8      	beq.n	8009810 <_strtod_l+0x750>
 800985e:	2f00      	cmp	r7, #0
 8009860:	dd08      	ble.n	8009874 <_strtod_l+0x7b4>
 8009862:	4641      	mov	r1, r8
 8009864:	9805      	ldr	r0, [sp, #20]
 8009866:	463a      	mov	r2, r7
 8009868:	f002 f9c6 	bl	800bbf8 <__lshift>
 800986c:	4680      	mov	r8, r0
 800986e:	2800      	cmp	r0, #0
 8009870:	f43f ae49 	beq.w	8009506 <_strtod_l+0x446>
 8009874:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009876:	9805      	ldr	r0, [sp, #20]
 8009878:	464a      	mov	r2, r9
 800987a:	f002 fa45 	bl	800bd08 <__mdiff>
 800987e:	4604      	mov	r4, r0
 8009880:	2800      	cmp	r0, #0
 8009882:	f43f ae40 	beq.w	8009506 <_strtod_l+0x446>
 8009886:	68c3      	ldr	r3, [r0, #12]
 8009888:	930f      	str	r3, [sp, #60]	@ 0x3c
 800988a:	2300      	movs	r3, #0
 800988c:	60c3      	str	r3, [r0, #12]
 800988e:	4641      	mov	r1, r8
 8009890:	f002 fa1e 	bl	800bcd0 <__mcmp>
 8009894:	2800      	cmp	r0, #0
 8009896:	da45      	bge.n	8009924 <_strtod_l+0x864>
 8009898:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800989a:	ea53 030a 	orrs.w	r3, r3, sl
 800989e:	d16b      	bne.n	8009978 <_strtod_l+0x8b8>
 80098a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d167      	bne.n	8009978 <_strtod_l+0x8b8>
 80098a8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80098ac:	0d1b      	lsrs	r3, r3, #20
 80098ae:	051b      	lsls	r3, r3, #20
 80098b0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80098b4:	d960      	bls.n	8009978 <_strtod_l+0x8b8>
 80098b6:	6963      	ldr	r3, [r4, #20]
 80098b8:	b913      	cbnz	r3, 80098c0 <_strtod_l+0x800>
 80098ba:	6923      	ldr	r3, [r4, #16]
 80098bc:	2b01      	cmp	r3, #1
 80098be:	dd5b      	ble.n	8009978 <_strtod_l+0x8b8>
 80098c0:	4621      	mov	r1, r4
 80098c2:	2201      	movs	r2, #1
 80098c4:	9805      	ldr	r0, [sp, #20]
 80098c6:	f002 f997 	bl	800bbf8 <__lshift>
 80098ca:	4641      	mov	r1, r8
 80098cc:	4604      	mov	r4, r0
 80098ce:	f002 f9ff 	bl	800bcd0 <__mcmp>
 80098d2:	2800      	cmp	r0, #0
 80098d4:	dd50      	ble.n	8009978 <_strtod_l+0x8b8>
 80098d6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80098da:	9a08      	ldr	r2, [sp, #32]
 80098dc:	0d1b      	lsrs	r3, r3, #20
 80098de:	051b      	lsls	r3, r3, #20
 80098e0:	2a00      	cmp	r2, #0
 80098e2:	d06a      	beq.n	80099ba <_strtod_l+0x8fa>
 80098e4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80098e8:	d867      	bhi.n	80099ba <_strtod_l+0x8fa>
 80098ea:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80098ee:	f67f ae9d 	bls.w	800962c <_strtod_l+0x56c>
 80098f2:	4b0a      	ldr	r3, [pc, #40]	@ (800991c <_strtod_l+0x85c>)
 80098f4:	4650      	mov	r0, sl
 80098f6:	4659      	mov	r1, fp
 80098f8:	2200      	movs	r2, #0
 80098fa:	f7f6 fe7d 	bl	80005f8 <__aeabi_dmul>
 80098fe:	4b08      	ldr	r3, [pc, #32]	@ (8009920 <_strtod_l+0x860>)
 8009900:	400b      	ands	r3, r1
 8009902:	4682      	mov	sl, r0
 8009904:	468b      	mov	fp, r1
 8009906:	2b00      	cmp	r3, #0
 8009908:	f47f ae08 	bne.w	800951c <_strtod_l+0x45c>
 800990c:	9a05      	ldr	r2, [sp, #20]
 800990e:	2322      	movs	r3, #34	@ 0x22
 8009910:	6013      	str	r3, [r2, #0]
 8009912:	e603      	b.n	800951c <_strtod_l+0x45c>
 8009914:	0800cf48 	.word	0x0800cf48
 8009918:	fffffc02 	.word	0xfffffc02
 800991c:	39500000 	.word	0x39500000
 8009920:	7ff00000 	.word	0x7ff00000
 8009924:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009928:	d165      	bne.n	80099f6 <_strtod_l+0x936>
 800992a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800992c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009930:	b35a      	cbz	r2, 800998a <_strtod_l+0x8ca>
 8009932:	4a9f      	ldr	r2, [pc, #636]	@ (8009bb0 <_strtod_l+0xaf0>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d12b      	bne.n	8009990 <_strtod_l+0x8d0>
 8009938:	9b08      	ldr	r3, [sp, #32]
 800993a:	4651      	mov	r1, sl
 800993c:	b303      	cbz	r3, 8009980 <_strtod_l+0x8c0>
 800993e:	4b9d      	ldr	r3, [pc, #628]	@ (8009bb4 <_strtod_l+0xaf4>)
 8009940:	465a      	mov	r2, fp
 8009942:	4013      	ands	r3, r2
 8009944:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009948:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800994c:	d81b      	bhi.n	8009986 <_strtod_l+0x8c6>
 800994e:	0d1b      	lsrs	r3, r3, #20
 8009950:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009954:	fa02 f303 	lsl.w	r3, r2, r3
 8009958:	4299      	cmp	r1, r3
 800995a:	d119      	bne.n	8009990 <_strtod_l+0x8d0>
 800995c:	4b96      	ldr	r3, [pc, #600]	@ (8009bb8 <_strtod_l+0xaf8>)
 800995e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009960:	429a      	cmp	r2, r3
 8009962:	d102      	bne.n	800996a <_strtod_l+0x8aa>
 8009964:	3101      	adds	r1, #1
 8009966:	f43f adce 	beq.w	8009506 <_strtod_l+0x446>
 800996a:	4b92      	ldr	r3, [pc, #584]	@ (8009bb4 <_strtod_l+0xaf4>)
 800996c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800996e:	401a      	ands	r2, r3
 8009970:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009974:	f04f 0a00 	mov.w	sl, #0
 8009978:	9b08      	ldr	r3, [sp, #32]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d1b9      	bne.n	80098f2 <_strtod_l+0x832>
 800997e:	e5cd      	b.n	800951c <_strtod_l+0x45c>
 8009980:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009984:	e7e8      	b.n	8009958 <_strtod_l+0x898>
 8009986:	4613      	mov	r3, r2
 8009988:	e7e6      	b.n	8009958 <_strtod_l+0x898>
 800998a:	ea53 030a 	orrs.w	r3, r3, sl
 800998e:	d0a2      	beq.n	80098d6 <_strtod_l+0x816>
 8009990:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009992:	b1db      	cbz	r3, 80099cc <_strtod_l+0x90c>
 8009994:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009996:	4213      	tst	r3, r2
 8009998:	d0ee      	beq.n	8009978 <_strtod_l+0x8b8>
 800999a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800999c:	9a08      	ldr	r2, [sp, #32]
 800999e:	4650      	mov	r0, sl
 80099a0:	4659      	mov	r1, fp
 80099a2:	b1bb      	cbz	r3, 80099d4 <_strtod_l+0x914>
 80099a4:	f7ff fb6c 	bl	8009080 <sulp>
 80099a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80099ac:	ec53 2b10 	vmov	r2, r3, d0
 80099b0:	f7f6 fc6c 	bl	800028c <__adddf3>
 80099b4:	4682      	mov	sl, r0
 80099b6:	468b      	mov	fp, r1
 80099b8:	e7de      	b.n	8009978 <_strtod_l+0x8b8>
 80099ba:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80099be:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80099c2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80099c6:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80099ca:	e7d5      	b.n	8009978 <_strtod_l+0x8b8>
 80099cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80099ce:	ea13 0f0a 	tst.w	r3, sl
 80099d2:	e7e1      	b.n	8009998 <_strtod_l+0x8d8>
 80099d4:	f7ff fb54 	bl	8009080 <sulp>
 80099d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80099dc:	ec53 2b10 	vmov	r2, r3, d0
 80099e0:	f7f6 fc52 	bl	8000288 <__aeabi_dsub>
 80099e4:	2200      	movs	r2, #0
 80099e6:	2300      	movs	r3, #0
 80099e8:	4682      	mov	sl, r0
 80099ea:	468b      	mov	fp, r1
 80099ec:	f7f7 f86c 	bl	8000ac8 <__aeabi_dcmpeq>
 80099f0:	2800      	cmp	r0, #0
 80099f2:	d0c1      	beq.n	8009978 <_strtod_l+0x8b8>
 80099f4:	e61a      	b.n	800962c <_strtod_l+0x56c>
 80099f6:	4641      	mov	r1, r8
 80099f8:	4620      	mov	r0, r4
 80099fa:	f002 fae1 	bl	800bfc0 <__ratio>
 80099fe:	ec57 6b10 	vmov	r6, r7, d0
 8009a02:	2200      	movs	r2, #0
 8009a04:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009a08:	4630      	mov	r0, r6
 8009a0a:	4639      	mov	r1, r7
 8009a0c:	f7f7 f870 	bl	8000af0 <__aeabi_dcmple>
 8009a10:	2800      	cmp	r0, #0
 8009a12:	d06f      	beq.n	8009af4 <_strtod_l+0xa34>
 8009a14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d17a      	bne.n	8009b10 <_strtod_l+0xa50>
 8009a1a:	f1ba 0f00 	cmp.w	sl, #0
 8009a1e:	d158      	bne.n	8009ad2 <_strtod_l+0xa12>
 8009a20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a22:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d15a      	bne.n	8009ae0 <_strtod_l+0xa20>
 8009a2a:	4b64      	ldr	r3, [pc, #400]	@ (8009bbc <_strtod_l+0xafc>)
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	4630      	mov	r0, r6
 8009a30:	4639      	mov	r1, r7
 8009a32:	f7f7 f853 	bl	8000adc <__aeabi_dcmplt>
 8009a36:	2800      	cmp	r0, #0
 8009a38:	d159      	bne.n	8009aee <_strtod_l+0xa2e>
 8009a3a:	4630      	mov	r0, r6
 8009a3c:	4639      	mov	r1, r7
 8009a3e:	4b60      	ldr	r3, [pc, #384]	@ (8009bc0 <_strtod_l+0xb00>)
 8009a40:	2200      	movs	r2, #0
 8009a42:	f7f6 fdd9 	bl	80005f8 <__aeabi_dmul>
 8009a46:	4606      	mov	r6, r0
 8009a48:	460f      	mov	r7, r1
 8009a4a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009a4e:	9606      	str	r6, [sp, #24]
 8009a50:	9307      	str	r3, [sp, #28]
 8009a52:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009a56:	4d57      	ldr	r5, [pc, #348]	@ (8009bb4 <_strtod_l+0xaf4>)
 8009a58:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009a5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a5e:	401d      	ands	r5, r3
 8009a60:	4b58      	ldr	r3, [pc, #352]	@ (8009bc4 <_strtod_l+0xb04>)
 8009a62:	429d      	cmp	r5, r3
 8009a64:	f040 80b2 	bne.w	8009bcc <_strtod_l+0xb0c>
 8009a68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a6a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009a6e:	ec4b ab10 	vmov	d0, sl, fp
 8009a72:	f002 f9dd 	bl	800be30 <__ulp>
 8009a76:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009a7a:	ec51 0b10 	vmov	r0, r1, d0
 8009a7e:	f7f6 fdbb 	bl	80005f8 <__aeabi_dmul>
 8009a82:	4652      	mov	r2, sl
 8009a84:	465b      	mov	r3, fp
 8009a86:	f7f6 fc01 	bl	800028c <__adddf3>
 8009a8a:	460b      	mov	r3, r1
 8009a8c:	4949      	ldr	r1, [pc, #292]	@ (8009bb4 <_strtod_l+0xaf4>)
 8009a8e:	4a4e      	ldr	r2, [pc, #312]	@ (8009bc8 <_strtod_l+0xb08>)
 8009a90:	4019      	ands	r1, r3
 8009a92:	4291      	cmp	r1, r2
 8009a94:	4682      	mov	sl, r0
 8009a96:	d942      	bls.n	8009b1e <_strtod_l+0xa5e>
 8009a98:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009a9a:	4b47      	ldr	r3, [pc, #284]	@ (8009bb8 <_strtod_l+0xaf8>)
 8009a9c:	429a      	cmp	r2, r3
 8009a9e:	d103      	bne.n	8009aa8 <_strtod_l+0x9e8>
 8009aa0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009aa2:	3301      	adds	r3, #1
 8009aa4:	f43f ad2f 	beq.w	8009506 <_strtod_l+0x446>
 8009aa8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009bb8 <_strtod_l+0xaf8>
 8009aac:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8009ab0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009ab2:	9805      	ldr	r0, [sp, #20]
 8009ab4:	f001 fe90 	bl	800b7d8 <_Bfree>
 8009ab8:	9805      	ldr	r0, [sp, #20]
 8009aba:	4649      	mov	r1, r9
 8009abc:	f001 fe8c 	bl	800b7d8 <_Bfree>
 8009ac0:	9805      	ldr	r0, [sp, #20]
 8009ac2:	4641      	mov	r1, r8
 8009ac4:	f001 fe88 	bl	800b7d8 <_Bfree>
 8009ac8:	9805      	ldr	r0, [sp, #20]
 8009aca:	4621      	mov	r1, r4
 8009acc:	f001 fe84 	bl	800b7d8 <_Bfree>
 8009ad0:	e619      	b.n	8009706 <_strtod_l+0x646>
 8009ad2:	f1ba 0f01 	cmp.w	sl, #1
 8009ad6:	d103      	bne.n	8009ae0 <_strtod_l+0xa20>
 8009ad8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	f43f ada6 	beq.w	800962c <_strtod_l+0x56c>
 8009ae0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009b90 <_strtod_l+0xad0>
 8009ae4:	4f35      	ldr	r7, [pc, #212]	@ (8009bbc <_strtod_l+0xafc>)
 8009ae6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009aea:	2600      	movs	r6, #0
 8009aec:	e7b1      	b.n	8009a52 <_strtod_l+0x992>
 8009aee:	4f34      	ldr	r7, [pc, #208]	@ (8009bc0 <_strtod_l+0xb00>)
 8009af0:	2600      	movs	r6, #0
 8009af2:	e7aa      	b.n	8009a4a <_strtod_l+0x98a>
 8009af4:	4b32      	ldr	r3, [pc, #200]	@ (8009bc0 <_strtod_l+0xb00>)
 8009af6:	4630      	mov	r0, r6
 8009af8:	4639      	mov	r1, r7
 8009afa:	2200      	movs	r2, #0
 8009afc:	f7f6 fd7c 	bl	80005f8 <__aeabi_dmul>
 8009b00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b02:	4606      	mov	r6, r0
 8009b04:	460f      	mov	r7, r1
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d09f      	beq.n	8009a4a <_strtod_l+0x98a>
 8009b0a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009b0e:	e7a0      	b.n	8009a52 <_strtod_l+0x992>
 8009b10:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009b98 <_strtod_l+0xad8>
 8009b14:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009b18:	ec57 6b17 	vmov	r6, r7, d7
 8009b1c:	e799      	b.n	8009a52 <_strtod_l+0x992>
 8009b1e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009b22:	9b08      	ldr	r3, [sp, #32]
 8009b24:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d1c1      	bne.n	8009ab0 <_strtod_l+0x9f0>
 8009b2c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009b30:	0d1b      	lsrs	r3, r3, #20
 8009b32:	051b      	lsls	r3, r3, #20
 8009b34:	429d      	cmp	r5, r3
 8009b36:	d1bb      	bne.n	8009ab0 <_strtod_l+0x9f0>
 8009b38:	4630      	mov	r0, r6
 8009b3a:	4639      	mov	r1, r7
 8009b3c:	f7f7 f8bc 	bl	8000cb8 <__aeabi_d2lz>
 8009b40:	f7f6 fd2c 	bl	800059c <__aeabi_l2d>
 8009b44:	4602      	mov	r2, r0
 8009b46:	460b      	mov	r3, r1
 8009b48:	4630      	mov	r0, r6
 8009b4a:	4639      	mov	r1, r7
 8009b4c:	f7f6 fb9c 	bl	8000288 <__aeabi_dsub>
 8009b50:	460b      	mov	r3, r1
 8009b52:	4602      	mov	r2, r0
 8009b54:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009b58:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009b5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b5e:	ea46 060a 	orr.w	r6, r6, sl
 8009b62:	431e      	orrs	r6, r3
 8009b64:	d06f      	beq.n	8009c46 <_strtod_l+0xb86>
 8009b66:	a30e      	add	r3, pc, #56	@ (adr r3, 8009ba0 <_strtod_l+0xae0>)
 8009b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b6c:	f7f6 ffb6 	bl	8000adc <__aeabi_dcmplt>
 8009b70:	2800      	cmp	r0, #0
 8009b72:	f47f acd3 	bne.w	800951c <_strtod_l+0x45c>
 8009b76:	a30c      	add	r3, pc, #48	@ (adr r3, 8009ba8 <_strtod_l+0xae8>)
 8009b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009b80:	f7f6 ffca 	bl	8000b18 <__aeabi_dcmpgt>
 8009b84:	2800      	cmp	r0, #0
 8009b86:	d093      	beq.n	8009ab0 <_strtod_l+0x9f0>
 8009b88:	e4c8      	b.n	800951c <_strtod_l+0x45c>
 8009b8a:	bf00      	nop
 8009b8c:	f3af 8000 	nop.w
 8009b90:	00000000 	.word	0x00000000
 8009b94:	bff00000 	.word	0xbff00000
 8009b98:	00000000 	.word	0x00000000
 8009b9c:	3ff00000 	.word	0x3ff00000
 8009ba0:	94a03595 	.word	0x94a03595
 8009ba4:	3fdfffff 	.word	0x3fdfffff
 8009ba8:	35afe535 	.word	0x35afe535
 8009bac:	3fe00000 	.word	0x3fe00000
 8009bb0:	000fffff 	.word	0x000fffff
 8009bb4:	7ff00000 	.word	0x7ff00000
 8009bb8:	7fefffff 	.word	0x7fefffff
 8009bbc:	3ff00000 	.word	0x3ff00000
 8009bc0:	3fe00000 	.word	0x3fe00000
 8009bc4:	7fe00000 	.word	0x7fe00000
 8009bc8:	7c9fffff 	.word	0x7c9fffff
 8009bcc:	9b08      	ldr	r3, [sp, #32]
 8009bce:	b323      	cbz	r3, 8009c1a <_strtod_l+0xb5a>
 8009bd0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009bd4:	d821      	bhi.n	8009c1a <_strtod_l+0xb5a>
 8009bd6:	a328      	add	r3, pc, #160	@ (adr r3, 8009c78 <_strtod_l+0xbb8>)
 8009bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bdc:	4630      	mov	r0, r6
 8009bde:	4639      	mov	r1, r7
 8009be0:	f7f6 ff86 	bl	8000af0 <__aeabi_dcmple>
 8009be4:	b1a0      	cbz	r0, 8009c10 <_strtod_l+0xb50>
 8009be6:	4639      	mov	r1, r7
 8009be8:	4630      	mov	r0, r6
 8009bea:	f7f6 ffdd 	bl	8000ba8 <__aeabi_d2uiz>
 8009bee:	2801      	cmp	r0, #1
 8009bf0:	bf38      	it	cc
 8009bf2:	2001      	movcc	r0, #1
 8009bf4:	f7f6 fc86 	bl	8000504 <__aeabi_ui2d>
 8009bf8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009bfa:	4606      	mov	r6, r0
 8009bfc:	460f      	mov	r7, r1
 8009bfe:	b9fb      	cbnz	r3, 8009c40 <_strtod_l+0xb80>
 8009c00:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009c04:	9014      	str	r0, [sp, #80]	@ 0x50
 8009c06:	9315      	str	r3, [sp, #84]	@ 0x54
 8009c08:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009c0c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009c10:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009c12:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009c16:	1b5b      	subs	r3, r3, r5
 8009c18:	9311      	str	r3, [sp, #68]	@ 0x44
 8009c1a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009c1e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009c22:	f002 f905 	bl	800be30 <__ulp>
 8009c26:	4650      	mov	r0, sl
 8009c28:	ec53 2b10 	vmov	r2, r3, d0
 8009c2c:	4659      	mov	r1, fp
 8009c2e:	f7f6 fce3 	bl	80005f8 <__aeabi_dmul>
 8009c32:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009c36:	f7f6 fb29 	bl	800028c <__adddf3>
 8009c3a:	4682      	mov	sl, r0
 8009c3c:	468b      	mov	fp, r1
 8009c3e:	e770      	b.n	8009b22 <_strtod_l+0xa62>
 8009c40:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009c44:	e7e0      	b.n	8009c08 <_strtod_l+0xb48>
 8009c46:	a30e      	add	r3, pc, #56	@ (adr r3, 8009c80 <_strtod_l+0xbc0>)
 8009c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c4c:	f7f6 ff46 	bl	8000adc <__aeabi_dcmplt>
 8009c50:	e798      	b.n	8009b84 <_strtod_l+0xac4>
 8009c52:	2300      	movs	r3, #0
 8009c54:	930e      	str	r3, [sp, #56]	@ 0x38
 8009c56:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009c58:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009c5a:	6013      	str	r3, [r2, #0]
 8009c5c:	f7ff ba6d 	b.w	800913a <_strtod_l+0x7a>
 8009c60:	2a65      	cmp	r2, #101	@ 0x65
 8009c62:	f43f ab68 	beq.w	8009336 <_strtod_l+0x276>
 8009c66:	2a45      	cmp	r2, #69	@ 0x45
 8009c68:	f43f ab65 	beq.w	8009336 <_strtod_l+0x276>
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	f7ff bba0 	b.w	80093b2 <_strtod_l+0x2f2>
 8009c72:	bf00      	nop
 8009c74:	f3af 8000 	nop.w
 8009c78:	ffc00000 	.word	0xffc00000
 8009c7c:	41dfffff 	.word	0x41dfffff
 8009c80:	94a03595 	.word	0x94a03595
 8009c84:	3fcfffff 	.word	0x3fcfffff

08009c88 <_strtod_r>:
 8009c88:	4b01      	ldr	r3, [pc, #4]	@ (8009c90 <_strtod_r+0x8>)
 8009c8a:	f7ff ba19 	b.w	80090c0 <_strtod_l>
 8009c8e:	bf00      	nop
 8009c90:	2000002c 	.word	0x2000002c

08009c94 <_strtol_l.isra.0>:
 8009c94:	2b24      	cmp	r3, #36	@ 0x24
 8009c96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c9a:	4686      	mov	lr, r0
 8009c9c:	4690      	mov	r8, r2
 8009c9e:	d801      	bhi.n	8009ca4 <_strtol_l.isra.0+0x10>
 8009ca0:	2b01      	cmp	r3, #1
 8009ca2:	d106      	bne.n	8009cb2 <_strtol_l.isra.0+0x1e>
 8009ca4:	f000 f8aa 	bl	8009dfc <__errno>
 8009ca8:	2316      	movs	r3, #22
 8009caa:	6003      	str	r3, [r0, #0]
 8009cac:	2000      	movs	r0, #0
 8009cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cb2:	4834      	ldr	r0, [pc, #208]	@ (8009d84 <_strtol_l.isra.0+0xf0>)
 8009cb4:	460d      	mov	r5, r1
 8009cb6:	462a      	mov	r2, r5
 8009cb8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009cbc:	5d06      	ldrb	r6, [r0, r4]
 8009cbe:	f016 0608 	ands.w	r6, r6, #8
 8009cc2:	d1f8      	bne.n	8009cb6 <_strtol_l.isra.0+0x22>
 8009cc4:	2c2d      	cmp	r4, #45	@ 0x2d
 8009cc6:	d110      	bne.n	8009cea <_strtol_l.isra.0+0x56>
 8009cc8:	782c      	ldrb	r4, [r5, #0]
 8009cca:	2601      	movs	r6, #1
 8009ccc:	1c95      	adds	r5, r2, #2
 8009cce:	f033 0210 	bics.w	r2, r3, #16
 8009cd2:	d115      	bne.n	8009d00 <_strtol_l.isra.0+0x6c>
 8009cd4:	2c30      	cmp	r4, #48	@ 0x30
 8009cd6:	d10d      	bne.n	8009cf4 <_strtol_l.isra.0+0x60>
 8009cd8:	782a      	ldrb	r2, [r5, #0]
 8009cda:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009cde:	2a58      	cmp	r2, #88	@ 0x58
 8009ce0:	d108      	bne.n	8009cf4 <_strtol_l.isra.0+0x60>
 8009ce2:	786c      	ldrb	r4, [r5, #1]
 8009ce4:	3502      	adds	r5, #2
 8009ce6:	2310      	movs	r3, #16
 8009ce8:	e00a      	b.n	8009d00 <_strtol_l.isra.0+0x6c>
 8009cea:	2c2b      	cmp	r4, #43	@ 0x2b
 8009cec:	bf04      	itt	eq
 8009cee:	782c      	ldrbeq	r4, [r5, #0]
 8009cf0:	1c95      	addeq	r5, r2, #2
 8009cf2:	e7ec      	b.n	8009cce <_strtol_l.isra.0+0x3a>
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d1f6      	bne.n	8009ce6 <_strtol_l.isra.0+0x52>
 8009cf8:	2c30      	cmp	r4, #48	@ 0x30
 8009cfa:	bf14      	ite	ne
 8009cfc:	230a      	movne	r3, #10
 8009cfe:	2308      	moveq	r3, #8
 8009d00:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009d04:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8009d08:	2200      	movs	r2, #0
 8009d0a:	fbbc f9f3 	udiv	r9, ip, r3
 8009d0e:	4610      	mov	r0, r2
 8009d10:	fb03 ca19 	mls	sl, r3, r9, ip
 8009d14:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009d18:	2f09      	cmp	r7, #9
 8009d1a:	d80f      	bhi.n	8009d3c <_strtol_l.isra.0+0xa8>
 8009d1c:	463c      	mov	r4, r7
 8009d1e:	42a3      	cmp	r3, r4
 8009d20:	dd1b      	ble.n	8009d5a <_strtol_l.isra.0+0xc6>
 8009d22:	1c57      	adds	r7, r2, #1
 8009d24:	d007      	beq.n	8009d36 <_strtol_l.isra.0+0xa2>
 8009d26:	4581      	cmp	r9, r0
 8009d28:	d314      	bcc.n	8009d54 <_strtol_l.isra.0+0xc0>
 8009d2a:	d101      	bne.n	8009d30 <_strtol_l.isra.0+0x9c>
 8009d2c:	45a2      	cmp	sl, r4
 8009d2e:	db11      	blt.n	8009d54 <_strtol_l.isra.0+0xc0>
 8009d30:	fb00 4003 	mla	r0, r0, r3, r4
 8009d34:	2201      	movs	r2, #1
 8009d36:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009d3a:	e7eb      	b.n	8009d14 <_strtol_l.isra.0+0x80>
 8009d3c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009d40:	2f19      	cmp	r7, #25
 8009d42:	d801      	bhi.n	8009d48 <_strtol_l.isra.0+0xb4>
 8009d44:	3c37      	subs	r4, #55	@ 0x37
 8009d46:	e7ea      	b.n	8009d1e <_strtol_l.isra.0+0x8a>
 8009d48:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009d4c:	2f19      	cmp	r7, #25
 8009d4e:	d804      	bhi.n	8009d5a <_strtol_l.isra.0+0xc6>
 8009d50:	3c57      	subs	r4, #87	@ 0x57
 8009d52:	e7e4      	b.n	8009d1e <_strtol_l.isra.0+0x8a>
 8009d54:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009d58:	e7ed      	b.n	8009d36 <_strtol_l.isra.0+0xa2>
 8009d5a:	1c53      	adds	r3, r2, #1
 8009d5c:	d108      	bne.n	8009d70 <_strtol_l.isra.0+0xdc>
 8009d5e:	2322      	movs	r3, #34	@ 0x22
 8009d60:	f8ce 3000 	str.w	r3, [lr]
 8009d64:	4660      	mov	r0, ip
 8009d66:	f1b8 0f00 	cmp.w	r8, #0
 8009d6a:	d0a0      	beq.n	8009cae <_strtol_l.isra.0+0x1a>
 8009d6c:	1e69      	subs	r1, r5, #1
 8009d6e:	e006      	b.n	8009d7e <_strtol_l.isra.0+0xea>
 8009d70:	b106      	cbz	r6, 8009d74 <_strtol_l.isra.0+0xe0>
 8009d72:	4240      	negs	r0, r0
 8009d74:	f1b8 0f00 	cmp.w	r8, #0
 8009d78:	d099      	beq.n	8009cae <_strtol_l.isra.0+0x1a>
 8009d7a:	2a00      	cmp	r2, #0
 8009d7c:	d1f6      	bne.n	8009d6c <_strtol_l.isra.0+0xd8>
 8009d7e:	f8c8 1000 	str.w	r1, [r8]
 8009d82:	e794      	b.n	8009cae <_strtol_l.isra.0+0x1a>
 8009d84:	0800cf71 	.word	0x0800cf71

08009d88 <_strtol_r>:
 8009d88:	f7ff bf84 	b.w	8009c94 <_strtol_l.isra.0>

08009d8c <_fwalk_sglue>:
 8009d8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d90:	4607      	mov	r7, r0
 8009d92:	4688      	mov	r8, r1
 8009d94:	4614      	mov	r4, r2
 8009d96:	2600      	movs	r6, #0
 8009d98:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009d9c:	f1b9 0901 	subs.w	r9, r9, #1
 8009da0:	d505      	bpl.n	8009dae <_fwalk_sglue+0x22>
 8009da2:	6824      	ldr	r4, [r4, #0]
 8009da4:	2c00      	cmp	r4, #0
 8009da6:	d1f7      	bne.n	8009d98 <_fwalk_sglue+0xc>
 8009da8:	4630      	mov	r0, r6
 8009daa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009dae:	89ab      	ldrh	r3, [r5, #12]
 8009db0:	2b01      	cmp	r3, #1
 8009db2:	d907      	bls.n	8009dc4 <_fwalk_sglue+0x38>
 8009db4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009db8:	3301      	adds	r3, #1
 8009dba:	d003      	beq.n	8009dc4 <_fwalk_sglue+0x38>
 8009dbc:	4629      	mov	r1, r5
 8009dbe:	4638      	mov	r0, r7
 8009dc0:	47c0      	blx	r8
 8009dc2:	4306      	orrs	r6, r0
 8009dc4:	3568      	adds	r5, #104	@ 0x68
 8009dc6:	e7e9      	b.n	8009d9c <_fwalk_sglue+0x10>

08009dc8 <memset>:
 8009dc8:	4402      	add	r2, r0
 8009dca:	4603      	mov	r3, r0
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	d100      	bne.n	8009dd2 <memset+0xa>
 8009dd0:	4770      	bx	lr
 8009dd2:	f803 1b01 	strb.w	r1, [r3], #1
 8009dd6:	e7f9      	b.n	8009dcc <memset+0x4>

08009dd8 <strncmp>:
 8009dd8:	b510      	push	{r4, lr}
 8009dda:	b16a      	cbz	r2, 8009df8 <strncmp+0x20>
 8009ddc:	3901      	subs	r1, #1
 8009dde:	1884      	adds	r4, r0, r2
 8009de0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009de4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009de8:	429a      	cmp	r2, r3
 8009dea:	d103      	bne.n	8009df4 <strncmp+0x1c>
 8009dec:	42a0      	cmp	r0, r4
 8009dee:	d001      	beq.n	8009df4 <strncmp+0x1c>
 8009df0:	2a00      	cmp	r2, #0
 8009df2:	d1f5      	bne.n	8009de0 <strncmp+0x8>
 8009df4:	1ad0      	subs	r0, r2, r3
 8009df6:	bd10      	pop	{r4, pc}
 8009df8:	4610      	mov	r0, r2
 8009dfa:	e7fc      	b.n	8009df6 <strncmp+0x1e>

08009dfc <__errno>:
 8009dfc:	4b01      	ldr	r3, [pc, #4]	@ (8009e04 <__errno+0x8>)
 8009dfe:	6818      	ldr	r0, [r3, #0]
 8009e00:	4770      	bx	lr
 8009e02:	bf00      	nop
 8009e04:	20000198 	.word	0x20000198

08009e08 <__libc_init_array>:
 8009e08:	b570      	push	{r4, r5, r6, lr}
 8009e0a:	4d0d      	ldr	r5, [pc, #52]	@ (8009e40 <__libc_init_array+0x38>)
 8009e0c:	4c0d      	ldr	r4, [pc, #52]	@ (8009e44 <__libc_init_array+0x3c>)
 8009e0e:	1b64      	subs	r4, r4, r5
 8009e10:	10a4      	asrs	r4, r4, #2
 8009e12:	2600      	movs	r6, #0
 8009e14:	42a6      	cmp	r6, r4
 8009e16:	d109      	bne.n	8009e2c <__libc_init_array+0x24>
 8009e18:	4d0b      	ldr	r5, [pc, #44]	@ (8009e48 <__libc_init_array+0x40>)
 8009e1a:	4c0c      	ldr	r4, [pc, #48]	@ (8009e4c <__libc_init_array+0x44>)
 8009e1c:	f002 ff64 	bl	800cce8 <_init>
 8009e20:	1b64      	subs	r4, r4, r5
 8009e22:	10a4      	asrs	r4, r4, #2
 8009e24:	2600      	movs	r6, #0
 8009e26:	42a6      	cmp	r6, r4
 8009e28:	d105      	bne.n	8009e36 <__libc_init_array+0x2e>
 8009e2a:	bd70      	pop	{r4, r5, r6, pc}
 8009e2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e30:	4798      	blx	r3
 8009e32:	3601      	adds	r6, #1
 8009e34:	e7ee      	b.n	8009e14 <__libc_init_array+0xc>
 8009e36:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e3a:	4798      	blx	r3
 8009e3c:	3601      	adds	r6, #1
 8009e3e:	e7f2      	b.n	8009e26 <__libc_init_array+0x1e>
 8009e40:	0800d1b0 	.word	0x0800d1b0
 8009e44:	0800d1b0 	.word	0x0800d1b0
 8009e48:	0800d1b0 	.word	0x0800d1b0
 8009e4c:	0800d1b4 	.word	0x0800d1b4

08009e50 <__retarget_lock_init_recursive>:
 8009e50:	4770      	bx	lr

08009e52 <__retarget_lock_acquire_recursive>:
 8009e52:	4770      	bx	lr

08009e54 <__retarget_lock_release_recursive>:
 8009e54:	4770      	bx	lr
	...

08009e58 <_localeconv_r>:
 8009e58:	4800      	ldr	r0, [pc, #0]	@ (8009e5c <_localeconv_r+0x4>)
 8009e5a:	4770      	bx	lr
 8009e5c:	2000011c 	.word	0x2000011c

08009e60 <memcpy>:
 8009e60:	440a      	add	r2, r1
 8009e62:	4291      	cmp	r1, r2
 8009e64:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009e68:	d100      	bne.n	8009e6c <memcpy+0xc>
 8009e6a:	4770      	bx	lr
 8009e6c:	b510      	push	{r4, lr}
 8009e6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e76:	4291      	cmp	r1, r2
 8009e78:	d1f9      	bne.n	8009e6e <memcpy+0xe>
 8009e7a:	bd10      	pop	{r4, pc}
 8009e7c:	0000      	movs	r0, r0
	...

08009e80 <nan>:
 8009e80:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009e88 <nan+0x8>
 8009e84:	4770      	bx	lr
 8009e86:	bf00      	nop
 8009e88:	00000000 	.word	0x00000000
 8009e8c:	7ff80000 	.word	0x7ff80000

08009e90 <nanf>:
 8009e90:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009e98 <nanf+0x8>
 8009e94:	4770      	bx	lr
 8009e96:	bf00      	nop
 8009e98:	7fc00000 	.word	0x7fc00000

08009e9c <quorem>:
 8009e9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ea0:	6903      	ldr	r3, [r0, #16]
 8009ea2:	690c      	ldr	r4, [r1, #16]
 8009ea4:	42a3      	cmp	r3, r4
 8009ea6:	4607      	mov	r7, r0
 8009ea8:	db7e      	blt.n	8009fa8 <quorem+0x10c>
 8009eaa:	3c01      	subs	r4, #1
 8009eac:	f101 0814 	add.w	r8, r1, #20
 8009eb0:	00a3      	lsls	r3, r4, #2
 8009eb2:	f100 0514 	add.w	r5, r0, #20
 8009eb6:	9300      	str	r3, [sp, #0]
 8009eb8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009ebc:	9301      	str	r3, [sp, #4]
 8009ebe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009ec2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009ec6:	3301      	adds	r3, #1
 8009ec8:	429a      	cmp	r2, r3
 8009eca:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009ece:	fbb2 f6f3 	udiv	r6, r2, r3
 8009ed2:	d32e      	bcc.n	8009f32 <quorem+0x96>
 8009ed4:	f04f 0a00 	mov.w	sl, #0
 8009ed8:	46c4      	mov	ip, r8
 8009eda:	46ae      	mov	lr, r5
 8009edc:	46d3      	mov	fp, sl
 8009ede:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009ee2:	b298      	uxth	r0, r3
 8009ee4:	fb06 a000 	mla	r0, r6, r0, sl
 8009ee8:	0c02      	lsrs	r2, r0, #16
 8009eea:	0c1b      	lsrs	r3, r3, #16
 8009eec:	fb06 2303 	mla	r3, r6, r3, r2
 8009ef0:	f8de 2000 	ldr.w	r2, [lr]
 8009ef4:	b280      	uxth	r0, r0
 8009ef6:	b292      	uxth	r2, r2
 8009ef8:	1a12      	subs	r2, r2, r0
 8009efa:	445a      	add	r2, fp
 8009efc:	f8de 0000 	ldr.w	r0, [lr]
 8009f00:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009f04:	b29b      	uxth	r3, r3
 8009f06:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009f0a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009f0e:	b292      	uxth	r2, r2
 8009f10:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009f14:	45e1      	cmp	r9, ip
 8009f16:	f84e 2b04 	str.w	r2, [lr], #4
 8009f1a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009f1e:	d2de      	bcs.n	8009ede <quorem+0x42>
 8009f20:	9b00      	ldr	r3, [sp, #0]
 8009f22:	58eb      	ldr	r3, [r5, r3]
 8009f24:	b92b      	cbnz	r3, 8009f32 <quorem+0x96>
 8009f26:	9b01      	ldr	r3, [sp, #4]
 8009f28:	3b04      	subs	r3, #4
 8009f2a:	429d      	cmp	r5, r3
 8009f2c:	461a      	mov	r2, r3
 8009f2e:	d32f      	bcc.n	8009f90 <quorem+0xf4>
 8009f30:	613c      	str	r4, [r7, #16]
 8009f32:	4638      	mov	r0, r7
 8009f34:	f001 fecc 	bl	800bcd0 <__mcmp>
 8009f38:	2800      	cmp	r0, #0
 8009f3a:	db25      	blt.n	8009f88 <quorem+0xec>
 8009f3c:	4629      	mov	r1, r5
 8009f3e:	2000      	movs	r0, #0
 8009f40:	f858 2b04 	ldr.w	r2, [r8], #4
 8009f44:	f8d1 c000 	ldr.w	ip, [r1]
 8009f48:	fa1f fe82 	uxth.w	lr, r2
 8009f4c:	fa1f f38c 	uxth.w	r3, ip
 8009f50:	eba3 030e 	sub.w	r3, r3, lr
 8009f54:	4403      	add	r3, r0
 8009f56:	0c12      	lsrs	r2, r2, #16
 8009f58:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009f5c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009f60:	b29b      	uxth	r3, r3
 8009f62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f66:	45c1      	cmp	r9, r8
 8009f68:	f841 3b04 	str.w	r3, [r1], #4
 8009f6c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009f70:	d2e6      	bcs.n	8009f40 <quorem+0xa4>
 8009f72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009f76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009f7a:	b922      	cbnz	r2, 8009f86 <quorem+0xea>
 8009f7c:	3b04      	subs	r3, #4
 8009f7e:	429d      	cmp	r5, r3
 8009f80:	461a      	mov	r2, r3
 8009f82:	d30b      	bcc.n	8009f9c <quorem+0x100>
 8009f84:	613c      	str	r4, [r7, #16]
 8009f86:	3601      	adds	r6, #1
 8009f88:	4630      	mov	r0, r6
 8009f8a:	b003      	add	sp, #12
 8009f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f90:	6812      	ldr	r2, [r2, #0]
 8009f92:	3b04      	subs	r3, #4
 8009f94:	2a00      	cmp	r2, #0
 8009f96:	d1cb      	bne.n	8009f30 <quorem+0x94>
 8009f98:	3c01      	subs	r4, #1
 8009f9a:	e7c6      	b.n	8009f2a <quorem+0x8e>
 8009f9c:	6812      	ldr	r2, [r2, #0]
 8009f9e:	3b04      	subs	r3, #4
 8009fa0:	2a00      	cmp	r2, #0
 8009fa2:	d1ef      	bne.n	8009f84 <quorem+0xe8>
 8009fa4:	3c01      	subs	r4, #1
 8009fa6:	e7ea      	b.n	8009f7e <quorem+0xe2>
 8009fa8:	2000      	movs	r0, #0
 8009faa:	e7ee      	b.n	8009f8a <quorem+0xee>
 8009fac:	0000      	movs	r0, r0
	...

08009fb0 <_dtoa_r>:
 8009fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fb4:	69c7      	ldr	r7, [r0, #28]
 8009fb6:	b097      	sub	sp, #92	@ 0x5c
 8009fb8:	ed8d 0b04 	vstr	d0, [sp, #16]
 8009fbc:	ec55 4b10 	vmov	r4, r5, d0
 8009fc0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8009fc2:	9107      	str	r1, [sp, #28]
 8009fc4:	4681      	mov	r9, r0
 8009fc6:	920c      	str	r2, [sp, #48]	@ 0x30
 8009fc8:	9311      	str	r3, [sp, #68]	@ 0x44
 8009fca:	b97f      	cbnz	r7, 8009fec <_dtoa_r+0x3c>
 8009fcc:	2010      	movs	r0, #16
 8009fce:	f001 fa4f 	bl	800b470 <malloc>
 8009fd2:	4602      	mov	r2, r0
 8009fd4:	f8c9 001c 	str.w	r0, [r9, #28]
 8009fd8:	b920      	cbnz	r0, 8009fe4 <_dtoa_r+0x34>
 8009fda:	4ba9      	ldr	r3, [pc, #676]	@ (800a280 <_dtoa_r+0x2d0>)
 8009fdc:	21ef      	movs	r1, #239	@ 0xef
 8009fde:	48a9      	ldr	r0, [pc, #676]	@ (800a284 <_dtoa_r+0x2d4>)
 8009fe0:	f002 f952 	bl	800c288 <__assert_func>
 8009fe4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009fe8:	6007      	str	r7, [r0, #0]
 8009fea:	60c7      	str	r7, [r0, #12]
 8009fec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009ff0:	6819      	ldr	r1, [r3, #0]
 8009ff2:	b159      	cbz	r1, 800a00c <_dtoa_r+0x5c>
 8009ff4:	685a      	ldr	r2, [r3, #4]
 8009ff6:	604a      	str	r2, [r1, #4]
 8009ff8:	2301      	movs	r3, #1
 8009ffa:	4093      	lsls	r3, r2
 8009ffc:	608b      	str	r3, [r1, #8]
 8009ffe:	4648      	mov	r0, r9
 800a000:	f001 fbea 	bl	800b7d8 <_Bfree>
 800a004:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a008:	2200      	movs	r2, #0
 800a00a:	601a      	str	r2, [r3, #0]
 800a00c:	1e2b      	subs	r3, r5, #0
 800a00e:	bfb9      	ittee	lt
 800a010:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a014:	9305      	strlt	r3, [sp, #20]
 800a016:	2300      	movge	r3, #0
 800a018:	6033      	strge	r3, [r6, #0]
 800a01a:	9f05      	ldr	r7, [sp, #20]
 800a01c:	4b9a      	ldr	r3, [pc, #616]	@ (800a288 <_dtoa_r+0x2d8>)
 800a01e:	bfbc      	itt	lt
 800a020:	2201      	movlt	r2, #1
 800a022:	6032      	strlt	r2, [r6, #0]
 800a024:	43bb      	bics	r3, r7
 800a026:	d112      	bne.n	800a04e <_dtoa_r+0x9e>
 800a028:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a02a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a02e:	6013      	str	r3, [r2, #0]
 800a030:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a034:	4323      	orrs	r3, r4
 800a036:	f000 855a 	beq.w	800aaee <_dtoa_r+0xb3e>
 800a03a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a03c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800a29c <_dtoa_r+0x2ec>
 800a040:	2b00      	cmp	r3, #0
 800a042:	f000 855c 	beq.w	800aafe <_dtoa_r+0xb4e>
 800a046:	f10a 0303 	add.w	r3, sl, #3
 800a04a:	f000 bd56 	b.w	800aafa <_dtoa_r+0xb4a>
 800a04e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a052:	2200      	movs	r2, #0
 800a054:	ec51 0b17 	vmov	r0, r1, d7
 800a058:	2300      	movs	r3, #0
 800a05a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800a05e:	f7f6 fd33 	bl	8000ac8 <__aeabi_dcmpeq>
 800a062:	4680      	mov	r8, r0
 800a064:	b158      	cbz	r0, 800a07e <_dtoa_r+0xce>
 800a066:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a068:	2301      	movs	r3, #1
 800a06a:	6013      	str	r3, [r2, #0]
 800a06c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a06e:	b113      	cbz	r3, 800a076 <_dtoa_r+0xc6>
 800a070:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a072:	4b86      	ldr	r3, [pc, #536]	@ (800a28c <_dtoa_r+0x2dc>)
 800a074:	6013      	str	r3, [r2, #0]
 800a076:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800a2a0 <_dtoa_r+0x2f0>
 800a07a:	f000 bd40 	b.w	800aafe <_dtoa_r+0xb4e>
 800a07e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800a082:	aa14      	add	r2, sp, #80	@ 0x50
 800a084:	a915      	add	r1, sp, #84	@ 0x54
 800a086:	4648      	mov	r0, r9
 800a088:	f001 ff42 	bl	800bf10 <__d2b>
 800a08c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a090:	9002      	str	r0, [sp, #8]
 800a092:	2e00      	cmp	r6, #0
 800a094:	d078      	beq.n	800a188 <_dtoa_r+0x1d8>
 800a096:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a098:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800a09c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a0a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a0a4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a0a8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a0ac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a0b0:	4619      	mov	r1, r3
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	4b76      	ldr	r3, [pc, #472]	@ (800a290 <_dtoa_r+0x2e0>)
 800a0b6:	f7f6 f8e7 	bl	8000288 <__aeabi_dsub>
 800a0ba:	a36b      	add	r3, pc, #428	@ (adr r3, 800a268 <_dtoa_r+0x2b8>)
 800a0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c0:	f7f6 fa9a 	bl	80005f8 <__aeabi_dmul>
 800a0c4:	a36a      	add	r3, pc, #424	@ (adr r3, 800a270 <_dtoa_r+0x2c0>)
 800a0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ca:	f7f6 f8df 	bl	800028c <__adddf3>
 800a0ce:	4604      	mov	r4, r0
 800a0d0:	4630      	mov	r0, r6
 800a0d2:	460d      	mov	r5, r1
 800a0d4:	f7f6 fa26 	bl	8000524 <__aeabi_i2d>
 800a0d8:	a367      	add	r3, pc, #412	@ (adr r3, 800a278 <_dtoa_r+0x2c8>)
 800a0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0de:	f7f6 fa8b 	bl	80005f8 <__aeabi_dmul>
 800a0e2:	4602      	mov	r2, r0
 800a0e4:	460b      	mov	r3, r1
 800a0e6:	4620      	mov	r0, r4
 800a0e8:	4629      	mov	r1, r5
 800a0ea:	f7f6 f8cf 	bl	800028c <__adddf3>
 800a0ee:	4604      	mov	r4, r0
 800a0f0:	460d      	mov	r5, r1
 800a0f2:	f7f6 fd31 	bl	8000b58 <__aeabi_d2iz>
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	4607      	mov	r7, r0
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	4620      	mov	r0, r4
 800a0fe:	4629      	mov	r1, r5
 800a100:	f7f6 fcec 	bl	8000adc <__aeabi_dcmplt>
 800a104:	b140      	cbz	r0, 800a118 <_dtoa_r+0x168>
 800a106:	4638      	mov	r0, r7
 800a108:	f7f6 fa0c 	bl	8000524 <__aeabi_i2d>
 800a10c:	4622      	mov	r2, r4
 800a10e:	462b      	mov	r3, r5
 800a110:	f7f6 fcda 	bl	8000ac8 <__aeabi_dcmpeq>
 800a114:	b900      	cbnz	r0, 800a118 <_dtoa_r+0x168>
 800a116:	3f01      	subs	r7, #1
 800a118:	2f16      	cmp	r7, #22
 800a11a:	d852      	bhi.n	800a1c2 <_dtoa_r+0x212>
 800a11c:	4b5d      	ldr	r3, [pc, #372]	@ (800a294 <_dtoa_r+0x2e4>)
 800a11e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a122:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a126:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a12a:	f7f6 fcd7 	bl	8000adc <__aeabi_dcmplt>
 800a12e:	2800      	cmp	r0, #0
 800a130:	d049      	beq.n	800a1c6 <_dtoa_r+0x216>
 800a132:	3f01      	subs	r7, #1
 800a134:	2300      	movs	r3, #0
 800a136:	9310      	str	r3, [sp, #64]	@ 0x40
 800a138:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a13a:	1b9b      	subs	r3, r3, r6
 800a13c:	1e5a      	subs	r2, r3, #1
 800a13e:	bf45      	ittet	mi
 800a140:	f1c3 0301 	rsbmi	r3, r3, #1
 800a144:	9300      	strmi	r3, [sp, #0]
 800a146:	2300      	movpl	r3, #0
 800a148:	2300      	movmi	r3, #0
 800a14a:	9206      	str	r2, [sp, #24]
 800a14c:	bf54      	ite	pl
 800a14e:	9300      	strpl	r3, [sp, #0]
 800a150:	9306      	strmi	r3, [sp, #24]
 800a152:	2f00      	cmp	r7, #0
 800a154:	db39      	blt.n	800a1ca <_dtoa_r+0x21a>
 800a156:	9b06      	ldr	r3, [sp, #24]
 800a158:	970d      	str	r7, [sp, #52]	@ 0x34
 800a15a:	443b      	add	r3, r7
 800a15c:	9306      	str	r3, [sp, #24]
 800a15e:	2300      	movs	r3, #0
 800a160:	9308      	str	r3, [sp, #32]
 800a162:	9b07      	ldr	r3, [sp, #28]
 800a164:	2b09      	cmp	r3, #9
 800a166:	d863      	bhi.n	800a230 <_dtoa_r+0x280>
 800a168:	2b05      	cmp	r3, #5
 800a16a:	bfc4      	itt	gt
 800a16c:	3b04      	subgt	r3, #4
 800a16e:	9307      	strgt	r3, [sp, #28]
 800a170:	9b07      	ldr	r3, [sp, #28]
 800a172:	f1a3 0302 	sub.w	r3, r3, #2
 800a176:	bfcc      	ite	gt
 800a178:	2400      	movgt	r4, #0
 800a17a:	2401      	movle	r4, #1
 800a17c:	2b03      	cmp	r3, #3
 800a17e:	d863      	bhi.n	800a248 <_dtoa_r+0x298>
 800a180:	e8df f003 	tbb	[pc, r3]
 800a184:	2b375452 	.word	0x2b375452
 800a188:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800a18c:	441e      	add	r6, r3
 800a18e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a192:	2b20      	cmp	r3, #32
 800a194:	bfc1      	itttt	gt
 800a196:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a19a:	409f      	lslgt	r7, r3
 800a19c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a1a0:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a1a4:	bfd6      	itet	le
 800a1a6:	f1c3 0320 	rsble	r3, r3, #32
 800a1aa:	ea47 0003 	orrgt.w	r0, r7, r3
 800a1ae:	fa04 f003 	lslle.w	r0, r4, r3
 800a1b2:	f7f6 f9a7 	bl	8000504 <__aeabi_ui2d>
 800a1b6:	2201      	movs	r2, #1
 800a1b8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a1bc:	3e01      	subs	r6, #1
 800a1be:	9212      	str	r2, [sp, #72]	@ 0x48
 800a1c0:	e776      	b.n	800a0b0 <_dtoa_r+0x100>
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	e7b7      	b.n	800a136 <_dtoa_r+0x186>
 800a1c6:	9010      	str	r0, [sp, #64]	@ 0x40
 800a1c8:	e7b6      	b.n	800a138 <_dtoa_r+0x188>
 800a1ca:	9b00      	ldr	r3, [sp, #0]
 800a1cc:	1bdb      	subs	r3, r3, r7
 800a1ce:	9300      	str	r3, [sp, #0]
 800a1d0:	427b      	negs	r3, r7
 800a1d2:	9308      	str	r3, [sp, #32]
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	930d      	str	r3, [sp, #52]	@ 0x34
 800a1d8:	e7c3      	b.n	800a162 <_dtoa_r+0x1b2>
 800a1da:	2301      	movs	r3, #1
 800a1dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a1de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a1e0:	eb07 0b03 	add.w	fp, r7, r3
 800a1e4:	f10b 0301 	add.w	r3, fp, #1
 800a1e8:	2b01      	cmp	r3, #1
 800a1ea:	9303      	str	r3, [sp, #12]
 800a1ec:	bfb8      	it	lt
 800a1ee:	2301      	movlt	r3, #1
 800a1f0:	e006      	b.n	800a200 <_dtoa_r+0x250>
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a1f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	dd28      	ble.n	800a24e <_dtoa_r+0x29e>
 800a1fc:	469b      	mov	fp, r3
 800a1fe:	9303      	str	r3, [sp, #12]
 800a200:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800a204:	2100      	movs	r1, #0
 800a206:	2204      	movs	r2, #4
 800a208:	f102 0514 	add.w	r5, r2, #20
 800a20c:	429d      	cmp	r5, r3
 800a20e:	d926      	bls.n	800a25e <_dtoa_r+0x2ae>
 800a210:	6041      	str	r1, [r0, #4]
 800a212:	4648      	mov	r0, r9
 800a214:	f001 faa0 	bl	800b758 <_Balloc>
 800a218:	4682      	mov	sl, r0
 800a21a:	2800      	cmp	r0, #0
 800a21c:	d142      	bne.n	800a2a4 <_dtoa_r+0x2f4>
 800a21e:	4b1e      	ldr	r3, [pc, #120]	@ (800a298 <_dtoa_r+0x2e8>)
 800a220:	4602      	mov	r2, r0
 800a222:	f240 11af 	movw	r1, #431	@ 0x1af
 800a226:	e6da      	b.n	8009fde <_dtoa_r+0x2e>
 800a228:	2300      	movs	r3, #0
 800a22a:	e7e3      	b.n	800a1f4 <_dtoa_r+0x244>
 800a22c:	2300      	movs	r3, #0
 800a22e:	e7d5      	b.n	800a1dc <_dtoa_r+0x22c>
 800a230:	2401      	movs	r4, #1
 800a232:	2300      	movs	r3, #0
 800a234:	9307      	str	r3, [sp, #28]
 800a236:	9409      	str	r4, [sp, #36]	@ 0x24
 800a238:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800a23c:	2200      	movs	r2, #0
 800a23e:	f8cd b00c 	str.w	fp, [sp, #12]
 800a242:	2312      	movs	r3, #18
 800a244:	920c      	str	r2, [sp, #48]	@ 0x30
 800a246:	e7db      	b.n	800a200 <_dtoa_r+0x250>
 800a248:	2301      	movs	r3, #1
 800a24a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a24c:	e7f4      	b.n	800a238 <_dtoa_r+0x288>
 800a24e:	f04f 0b01 	mov.w	fp, #1
 800a252:	f8cd b00c 	str.w	fp, [sp, #12]
 800a256:	465b      	mov	r3, fp
 800a258:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800a25c:	e7d0      	b.n	800a200 <_dtoa_r+0x250>
 800a25e:	3101      	adds	r1, #1
 800a260:	0052      	lsls	r2, r2, #1
 800a262:	e7d1      	b.n	800a208 <_dtoa_r+0x258>
 800a264:	f3af 8000 	nop.w
 800a268:	636f4361 	.word	0x636f4361
 800a26c:	3fd287a7 	.word	0x3fd287a7
 800a270:	8b60c8b3 	.word	0x8b60c8b3
 800a274:	3fc68a28 	.word	0x3fc68a28
 800a278:	509f79fb 	.word	0x509f79fb
 800a27c:	3fd34413 	.word	0x3fd34413
 800a280:	0800cd98 	.word	0x0800cd98
 800a284:	0800cdaf 	.word	0x0800cdaf
 800a288:	7ff00000 	.word	0x7ff00000
 800a28c:	0800cd59 	.word	0x0800cd59
 800a290:	3ff80000 	.word	0x3ff80000
 800a294:	0800d0a8 	.word	0x0800d0a8
 800a298:	0800ce07 	.word	0x0800ce07
 800a29c:	0800cd94 	.word	0x0800cd94
 800a2a0:	0800cd58 	.word	0x0800cd58
 800a2a4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a2a8:	6018      	str	r0, [r3, #0]
 800a2aa:	9b03      	ldr	r3, [sp, #12]
 800a2ac:	2b0e      	cmp	r3, #14
 800a2ae:	f200 80a1 	bhi.w	800a3f4 <_dtoa_r+0x444>
 800a2b2:	2c00      	cmp	r4, #0
 800a2b4:	f000 809e 	beq.w	800a3f4 <_dtoa_r+0x444>
 800a2b8:	2f00      	cmp	r7, #0
 800a2ba:	dd33      	ble.n	800a324 <_dtoa_r+0x374>
 800a2bc:	4b9c      	ldr	r3, [pc, #624]	@ (800a530 <_dtoa_r+0x580>)
 800a2be:	f007 020f 	and.w	r2, r7, #15
 800a2c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a2c6:	ed93 7b00 	vldr	d7, [r3]
 800a2ca:	05f8      	lsls	r0, r7, #23
 800a2cc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800a2d0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a2d4:	d516      	bpl.n	800a304 <_dtoa_r+0x354>
 800a2d6:	4b97      	ldr	r3, [pc, #604]	@ (800a534 <_dtoa_r+0x584>)
 800a2d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a2dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a2e0:	f7f6 fab4 	bl	800084c <__aeabi_ddiv>
 800a2e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a2e8:	f004 040f 	and.w	r4, r4, #15
 800a2ec:	2603      	movs	r6, #3
 800a2ee:	4d91      	ldr	r5, [pc, #580]	@ (800a534 <_dtoa_r+0x584>)
 800a2f0:	b954      	cbnz	r4, 800a308 <_dtoa_r+0x358>
 800a2f2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a2f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a2fa:	f7f6 faa7 	bl	800084c <__aeabi_ddiv>
 800a2fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a302:	e028      	b.n	800a356 <_dtoa_r+0x3a6>
 800a304:	2602      	movs	r6, #2
 800a306:	e7f2      	b.n	800a2ee <_dtoa_r+0x33e>
 800a308:	07e1      	lsls	r1, r4, #31
 800a30a:	d508      	bpl.n	800a31e <_dtoa_r+0x36e>
 800a30c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a310:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a314:	f7f6 f970 	bl	80005f8 <__aeabi_dmul>
 800a318:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a31c:	3601      	adds	r6, #1
 800a31e:	1064      	asrs	r4, r4, #1
 800a320:	3508      	adds	r5, #8
 800a322:	e7e5      	b.n	800a2f0 <_dtoa_r+0x340>
 800a324:	f000 80af 	beq.w	800a486 <_dtoa_r+0x4d6>
 800a328:	427c      	negs	r4, r7
 800a32a:	4b81      	ldr	r3, [pc, #516]	@ (800a530 <_dtoa_r+0x580>)
 800a32c:	4d81      	ldr	r5, [pc, #516]	@ (800a534 <_dtoa_r+0x584>)
 800a32e:	f004 020f 	and.w	r2, r4, #15
 800a332:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a33a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a33e:	f7f6 f95b 	bl	80005f8 <__aeabi_dmul>
 800a342:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a346:	1124      	asrs	r4, r4, #4
 800a348:	2300      	movs	r3, #0
 800a34a:	2602      	movs	r6, #2
 800a34c:	2c00      	cmp	r4, #0
 800a34e:	f040 808f 	bne.w	800a470 <_dtoa_r+0x4c0>
 800a352:	2b00      	cmp	r3, #0
 800a354:	d1d3      	bne.n	800a2fe <_dtoa_r+0x34e>
 800a356:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a358:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	f000 8094 	beq.w	800a48a <_dtoa_r+0x4da>
 800a362:	4b75      	ldr	r3, [pc, #468]	@ (800a538 <_dtoa_r+0x588>)
 800a364:	2200      	movs	r2, #0
 800a366:	4620      	mov	r0, r4
 800a368:	4629      	mov	r1, r5
 800a36a:	f7f6 fbb7 	bl	8000adc <__aeabi_dcmplt>
 800a36e:	2800      	cmp	r0, #0
 800a370:	f000 808b 	beq.w	800a48a <_dtoa_r+0x4da>
 800a374:	9b03      	ldr	r3, [sp, #12]
 800a376:	2b00      	cmp	r3, #0
 800a378:	f000 8087 	beq.w	800a48a <_dtoa_r+0x4da>
 800a37c:	f1bb 0f00 	cmp.w	fp, #0
 800a380:	dd34      	ble.n	800a3ec <_dtoa_r+0x43c>
 800a382:	4620      	mov	r0, r4
 800a384:	4b6d      	ldr	r3, [pc, #436]	@ (800a53c <_dtoa_r+0x58c>)
 800a386:	2200      	movs	r2, #0
 800a388:	4629      	mov	r1, r5
 800a38a:	f7f6 f935 	bl	80005f8 <__aeabi_dmul>
 800a38e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a392:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800a396:	3601      	adds	r6, #1
 800a398:	465c      	mov	r4, fp
 800a39a:	4630      	mov	r0, r6
 800a39c:	f7f6 f8c2 	bl	8000524 <__aeabi_i2d>
 800a3a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a3a4:	f7f6 f928 	bl	80005f8 <__aeabi_dmul>
 800a3a8:	4b65      	ldr	r3, [pc, #404]	@ (800a540 <_dtoa_r+0x590>)
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	f7f5 ff6e 	bl	800028c <__adddf3>
 800a3b0:	4605      	mov	r5, r0
 800a3b2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a3b6:	2c00      	cmp	r4, #0
 800a3b8:	d16a      	bne.n	800a490 <_dtoa_r+0x4e0>
 800a3ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a3be:	4b61      	ldr	r3, [pc, #388]	@ (800a544 <_dtoa_r+0x594>)
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	f7f5 ff61 	bl	8000288 <__aeabi_dsub>
 800a3c6:	4602      	mov	r2, r0
 800a3c8:	460b      	mov	r3, r1
 800a3ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a3ce:	462a      	mov	r2, r5
 800a3d0:	4633      	mov	r3, r6
 800a3d2:	f7f6 fba1 	bl	8000b18 <__aeabi_dcmpgt>
 800a3d6:	2800      	cmp	r0, #0
 800a3d8:	f040 8298 	bne.w	800a90c <_dtoa_r+0x95c>
 800a3dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a3e0:	462a      	mov	r2, r5
 800a3e2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a3e6:	f7f6 fb79 	bl	8000adc <__aeabi_dcmplt>
 800a3ea:	bb38      	cbnz	r0, 800a43c <_dtoa_r+0x48c>
 800a3ec:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800a3f0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a3f4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	f2c0 8157 	blt.w	800a6aa <_dtoa_r+0x6fa>
 800a3fc:	2f0e      	cmp	r7, #14
 800a3fe:	f300 8154 	bgt.w	800a6aa <_dtoa_r+0x6fa>
 800a402:	4b4b      	ldr	r3, [pc, #300]	@ (800a530 <_dtoa_r+0x580>)
 800a404:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a408:	ed93 7b00 	vldr	d7, [r3]
 800a40c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a40e:	2b00      	cmp	r3, #0
 800a410:	ed8d 7b00 	vstr	d7, [sp]
 800a414:	f280 80e5 	bge.w	800a5e2 <_dtoa_r+0x632>
 800a418:	9b03      	ldr	r3, [sp, #12]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	f300 80e1 	bgt.w	800a5e2 <_dtoa_r+0x632>
 800a420:	d10c      	bne.n	800a43c <_dtoa_r+0x48c>
 800a422:	4b48      	ldr	r3, [pc, #288]	@ (800a544 <_dtoa_r+0x594>)
 800a424:	2200      	movs	r2, #0
 800a426:	ec51 0b17 	vmov	r0, r1, d7
 800a42a:	f7f6 f8e5 	bl	80005f8 <__aeabi_dmul>
 800a42e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a432:	f7f6 fb67 	bl	8000b04 <__aeabi_dcmpge>
 800a436:	2800      	cmp	r0, #0
 800a438:	f000 8266 	beq.w	800a908 <_dtoa_r+0x958>
 800a43c:	2400      	movs	r4, #0
 800a43e:	4625      	mov	r5, r4
 800a440:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a442:	4656      	mov	r6, sl
 800a444:	ea6f 0803 	mvn.w	r8, r3
 800a448:	2700      	movs	r7, #0
 800a44a:	4621      	mov	r1, r4
 800a44c:	4648      	mov	r0, r9
 800a44e:	f001 f9c3 	bl	800b7d8 <_Bfree>
 800a452:	2d00      	cmp	r5, #0
 800a454:	f000 80bd 	beq.w	800a5d2 <_dtoa_r+0x622>
 800a458:	b12f      	cbz	r7, 800a466 <_dtoa_r+0x4b6>
 800a45a:	42af      	cmp	r7, r5
 800a45c:	d003      	beq.n	800a466 <_dtoa_r+0x4b6>
 800a45e:	4639      	mov	r1, r7
 800a460:	4648      	mov	r0, r9
 800a462:	f001 f9b9 	bl	800b7d8 <_Bfree>
 800a466:	4629      	mov	r1, r5
 800a468:	4648      	mov	r0, r9
 800a46a:	f001 f9b5 	bl	800b7d8 <_Bfree>
 800a46e:	e0b0      	b.n	800a5d2 <_dtoa_r+0x622>
 800a470:	07e2      	lsls	r2, r4, #31
 800a472:	d505      	bpl.n	800a480 <_dtoa_r+0x4d0>
 800a474:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a478:	f7f6 f8be 	bl	80005f8 <__aeabi_dmul>
 800a47c:	3601      	adds	r6, #1
 800a47e:	2301      	movs	r3, #1
 800a480:	1064      	asrs	r4, r4, #1
 800a482:	3508      	adds	r5, #8
 800a484:	e762      	b.n	800a34c <_dtoa_r+0x39c>
 800a486:	2602      	movs	r6, #2
 800a488:	e765      	b.n	800a356 <_dtoa_r+0x3a6>
 800a48a:	9c03      	ldr	r4, [sp, #12]
 800a48c:	46b8      	mov	r8, r7
 800a48e:	e784      	b.n	800a39a <_dtoa_r+0x3ea>
 800a490:	4b27      	ldr	r3, [pc, #156]	@ (800a530 <_dtoa_r+0x580>)
 800a492:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a494:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a498:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a49c:	4454      	add	r4, sl
 800a49e:	2900      	cmp	r1, #0
 800a4a0:	d054      	beq.n	800a54c <_dtoa_r+0x59c>
 800a4a2:	4929      	ldr	r1, [pc, #164]	@ (800a548 <_dtoa_r+0x598>)
 800a4a4:	2000      	movs	r0, #0
 800a4a6:	f7f6 f9d1 	bl	800084c <__aeabi_ddiv>
 800a4aa:	4633      	mov	r3, r6
 800a4ac:	462a      	mov	r2, r5
 800a4ae:	f7f5 feeb 	bl	8000288 <__aeabi_dsub>
 800a4b2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a4b6:	4656      	mov	r6, sl
 800a4b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a4bc:	f7f6 fb4c 	bl	8000b58 <__aeabi_d2iz>
 800a4c0:	4605      	mov	r5, r0
 800a4c2:	f7f6 f82f 	bl	8000524 <__aeabi_i2d>
 800a4c6:	4602      	mov	r2, r0
 800a4c8:	460b      	mov	r3, r1
 800a4ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a4ce:	f7f5 fedb 	bl	8000288 <__aeabi_dsub>
 800a4d2:	3530      	adds	r5, #48	@ 0x30
 800a4d4:	4602      	mov	r2, r0
 800a4d6:	460b      	mov	r3, r1
 800a4d8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a4dc:	f806 5b01 	strb.w	r5, [r6], #1
 800a4e0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a4e4:	f7f6 fafa 	bl	8000adc <__aeabi_dcmplt>
 800a4e8:	2800      	cmp	r0, #0
 800a4ea:	d172      	bne.n	800a5d2 <_dtoa_r+0x622>
 800a4ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a4f0:	4911      	ldr	r1, [pc, #68]	@ (800a538 <_dtoa_r+0x588>)
 800a4f2:	2000      	movs	r0, #0
 800a4f4:	f7f5 fec8 	bl	8000288 <__aeabi_dsub>
 800a4f8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a4fc:	f7f6 faee 	bl	8000adc <__aeabi_dcmplt>
 800a500:	2800      	cmp	r0, #0
 800a502:	f040 80b4 	bne.w	800a66e <_dtoa_r+0x6be>
 800a506:	42a6      	cmp	r6, r4
 800a508:	f43f af70 	beq.w	800a3ec <_dtoa_r+0x43c>
 800a50c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a510:	4b0a      	ldr	r3, [pc, #40]	@ (800a53c <_dtoa_r+0x58c>)
 800a512:	2200      	movs	r2, #0
 800a514:	f7f6 f870 	bl	80005f8 <__aeabi_dmul>
 800a518:	4b08      	ldr	r3, [pc, #32]	@ (800a53c <_dtoa_r+0x58c>)
 800a51a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a51e:	2200      	movs	r2, #0
 800a520:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a524:	f7f6 f868 	bl	80005f8 <__aeabi_dmul>
 800a528:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a52c:	e7c4      	b.n	800a4b8 <_dtoa_r+0x508>
 800a52e:	bf00      	nop
 800a530:	0800d0a8 	.word	0x0800d0a8
 800a534:	0800d080 	.word	0x0800d080
 800a538:	3ff00000 	.word	0x3ff00000
 800a53c:	40240000 	.word	0x40240000
 800a540:	401c0000 	.word	0x401c0000
 800a544:	40140000 	.word	0x40140000
 800a548:	3fe00000 	.word	0x3fe00000
 800a54c:	4631      	mov	r1, r6
 800a54e:	4628      	mov	r0, r5
 800a550:	f7f6 f852 	bl	80005f8 <__aeabi_dmul>
 800a554:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a558:	9413      	str	r4, [sp, #76]	@ 0x4c
 800a55a:	4656      	mov	r6, sl
 800a55c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a560:	f7f6 fafa 	bl	8000b58 <__aeabi_d2iz>
 800a564:	4605      	mov	r5, r0
 800a566:	f7f5 ffdd 	bl	8000524 <__aeabi_i2d>
 800a56a:	4602      	mov	r2, r0
 800a56c:	460b      	mov	r3, r1
 800a56e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a572:	f7f5 fe89 	bl	8000288 <__aeabi_dsub>
 800a576:	3530      	adds	r5, #48	@ 0x30
 800a578:	f806 5b01 	strb.w	r5, [r6], #1
 800a57c:	4602      	mov	r2, r0
 800a57e:	460b      	mov	r3, r1
 800a580:	42a6      	cmp	r6, r4
 800a582:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a586:	f04f 0200 	mov.w	r2, #0
 800a58a:	d124      	bne.n	800a5d6 <_dtoa_r+0x626>
 800a58c:	4baf      	ldr	r3, [pc, #700]	@ (800a84c <_dtoa_r+0x89c>)
 800a58e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a592:	f7f5 fe7b 	bl	800028c <__adddf3>
 800a596:	4602      	mov	r2, r0
 800a598:	460b      	mov	r3, r1
 800a59a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a59e:	f7f6 fabb 	bl	8000b18 <__aeabi_dcmpgt>
 800a5a2:	2800      	cmp	r0, #0
 800a5a4:	d163      	bne.n	800a66e <_dtoa_r+0x6be>
 800a5a6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a5aa:	49a8      	ldr	r1, [pc, #672]	@ (800a84c <_dtoa_r+0x89c>)
 800a5ac:	2000      	movs	r0, #0
 800a5ae:	f7f5 fe6b 	bl	8000288 <__aeabi_dsub>
 800a5b2:	4602      	mov	r2, r0
 800a5b4:	460b      	mov	r3, r1
 800a5b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a5ba:	f7f6 fa8f 	bl	8000adc <__aeabi_dcmplt>
 800a5be:	2800      	cmp	r0, #0
 800a5c0:	f43f af14 	beq.w	800a3ec <_dtoa_r+0x43c>
 800a5c4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800a5c6:	1e73      	subs	r3, r6, #1
 800a5c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a5ca:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a5ce:	2b30      	cmp	r3, #48	@ 0x30
 800a5d0:	d0f8      	beq.n	800a5c4 <_dtoa_r+0x614>
 800a5d2:	4647      	mov	r7, r8
 800a5d4:	e03b      	b.n	800a64e <_dtoa_r+0x69e>
 800a5d6:	4b9e      	ldr	r3, [pc, #632]	@ (800a850 <_dtoa_r+0x8a0>)
 800a5d8:	f7f6 f80e 	bl	80005f8 <__aeabi_dmul>
 800a5dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a5e0:	e7bc      	b.n	800a55c <_dtoa_r+0x5ac>
 800a5e2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800a5e6:	4656      	mov	r6, sl
 800a5e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a5ec:	4620      	mov	r0, r4
 800a5ee:	4629      	mov	r1, r5
 800a5f0:	f7f6 f92c 	bl	800084c <__aeabi_ddiv>
 800a5f4:	f7f6 fab0 	bl	8000b58 <__aeabi_d2iz>
 800a5f8:	4680      	mov	r8, r0
 800a5fa:	f7f5 ff93 	bl	8000524 <__aeabi_i2d>
 800a5fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a602:	f7f5 fff9 	bl	80005f8 <__aeabi_dmul>
 800a606:	4602      	mov	r2, r0
 800a608:	460b      	mov	r3, r1
 800a60a:	4620      	mov	r0, r4
 800a60c:	4629      	mov	r1, r5
 800a60e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a612:	f7f5 fe39 	bl	8000288 <__aeabi_dsub>
 800a616:	f806 4b01 	strb.w	r4, [r6], #1
 800a61a:	9d03      	ldr	r5, [sp, #12]
 800a61c:	eba6 040a 	sub.w	r4, r6, sl
 800a620:	42a5      	cmp	r5, r4
 800a622:	4602      	mov	r2, r0
 800a624:	460b      	mov	r3, r1
 800a626:	d133      	bne.n	800a690 <_dtoa_r+0x6e0>
 800a628:	f7f5 fe30 	bl	800028c <__adddf3>
 800a62c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a630:	4604      	mov	r4, r0
 800a632:	460d      	mov	r5, r1
 800a634:	f7f6 fa70 	bl	8000b18 <__aeabi_dcmpgt>
 800a638:	b9c0      	cbnz	r0, 800a66c <_dtoa_r+0x6bc>
 800a63a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a63e:	4620      	mov	r0, r4
 800a640:	4629      	mov	r1, r5
 800a642:	f7f6 fa41 	bl	8000ac8 <__aeabi_dcmpeq>
 800a646:	b110      	cbz	r0, 800a64e <_dtoa_r+0x69e>
 800a648:	f018 0f01 	tst.w	r8, #1
 800a64c:	d10e      	bne.n	800a66c <_dtoa_r+0x6bc>
 800a64e:	9902      	ldr	r1, [sp, #8]
 800a650:	4648      	mov	r0, r9
 800a652:	f001 f8c1 	bl	800b7d8 <_Bfree>
 800a656:	2300      	movs	r3, #0
 800a658:	7033      	strb	r3, [r6, #0]
 800a65a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a65c:	3701      	adds	r7, #1
 800a65e:	601f      	str	r7, [r3, #0]
 800a660:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a662:	2b00      	cmp	r3, #0
 800a664:	f000 824b 	beq.w	800aafe <_dtoa_r+0xb4e>
 800a668:	601e      	str	r6, [r3, #0]
 800a66a:	e248      	b.n	800aafe <_dtoa_r+0xb4e>
 800a66c:	46b8      	mov	r8, r7
 800a66e:	4633      	mov	r3, r6
 800a670:	461e      	mov	r6, r3
 800a672:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a676:	2a39      	cmp	r2, #57	@ 0x39
 800a678:	d106      	bne.n	800a688 <_dtoa_r+0x6d8>
 800a67a:	459a      	cmp	sl, r3
 800a67c:	d1f8      	bne.n	800a670 <_dtoa_r+0x6c0>
 800a67e:	2230      	movs	r2, #48	@ 0x30
 800a680:	f108 0801 	add.w	r8, r8, #1
 800a684:	f88a 2000 	strb.w	r2, [sl]
 800a688:	781a      	ldrb	r2, [r3, #0]
 800a68a:	3201      	adds	r2, #1
 800a68c:	701a      	strb	r2, [r3, #0]
 800a68e:	e7a0      	b.n	800a5d2 <_dtoa_r+0x622>
 800a690:	4b6f      	ldr	r3, [pc, #444]	@ (800a850 <_dtoa_r+0x8a0>)
 800a692:	2200      	movs	r2, #0
 800a694:	f7f5 ffb0 	bl	80005f8 <__aeabi_dmul>
 800a698:	2200      	movs	r2, #0
 800a69a:	2300      	movs	r3, #0
 800a69c:	4604      	mov	r4, r0
 800a69e:	460d      	mov	r5, r1
 800a6a0:	f7f6 fa12 	bl	8000ac8 <__aeabi_dcmpeq>
 800a6a4:	2800      	cmp	r0, #0
 800a6a6:	d09f      	beq.n	800a5e8 <_dtoa_r+0x638>
 800a6a8:	e7d1      	b.n	800a64e <_dtoa_r+0x69e>
 800a6aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a6ac:	2a00      	cmp	r2, #0
 800a6ae:	f000 80ea 	beq.w	800a886 <_dtoa_r+0x8d6>
 800a6b2:	9a07      	ldr	r2, [sp, #28]
 800a6b4:	2a01      	cmp	r2, #1
 800a6b6:	f300 80cd 	bgt.w	800a854 <_dtoa_r+0x8a4>
 800a6ba:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a6bc:	2a00      	cmp	r2, #0
 800a6be:	f000 80c1 	beq.w	800a844 <_dtoa_r+0x894>
 800a6c2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a6c6:	9c08      	ldr	r4, [sp, #32]
 800a6c8:	9e00      	ldr	r6, [sp, #0]
 800a6ca:	9a00      	ldr	r2, [sp, #0]
 800a6cc:	441a      	add	r2, r3
 800a6ce:	9200      	str	r2, [sp, #0]
 800a6d0:	9a06      	ldr	r2, [sp, #24]
 800a6d2:	2101      	movs	r1, #1
 800a6d4:	441a      	add	r2, r3
 800a6d6:	4648      	mov	r0, r9
 800a6d8:	9206      	str	r2, [sp, #24]
 800a6da:	f001 f97b 	bl	800b9d4 <__i2b>
 800a6de:	4605      	mov	r5, r0
 800a6e0:	b166      	cbz	r6, 800a6fc <_dtoa_r+0x74c>
 800a6e2:	9b06      	ldr	r3, [sp, #24]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	dd09      	ble.n	800a6fc <_dtoa_r+0x74c>
 800a6e8:	42b3      	cmp	r3, r6
 800a6ea:	9a00      	ldr	r2, [sp, #0]
 800a6ec:	bfa8      	it	ge
 800a6ee:	4633      	movge	r3, r6
 800a6f0:	1ad2      	subs	r2, r2, r3
 800a6f2:	9200      	str	r2, [sp, #0]
 800a6f4:	9a06      	ldr	r2, [sp, #24]
 800a6f6:	1af6      	subs	r6, r6, r3
 800a6f8:	1ad3      	subs	r3, r2, r3
 800a6fa:	9306      	str	r3, [sp, #24]
 800a6fc:	9b08      	ldr	r3, [sp, #32]
 800a6fe:	b30b      	cbz	r3, 800a744 <_dtoa_r+0x794>
 800a700:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a702:	2b00      	cmp	r3, #0
 800a704:	f000 80c6 	beq.w	800a894 <_dtoa_r+0x8e4>
 800a708:	2c00      	cmp	r4, #0
 800a70a:	f000 80c0 	beq.w	800a88e <_dtoa_r+0x8de>
 800a70e:	4629      	mov	r1, r5
 800a710:	4622      	mov	r2, r4
 800a712:	4648      	mov	r0, r9
 800a714:	f001 fa16 	bl	800bb44 <__pow5mult>
 800a718:	9a02      	ldr	r2, [sp, #8]
 800a71a:	4601      	mov	r1, r0
 800a71c:	4605      	mov	r5, r0
 800a71e:	4648      	mov	r0, r9
 800a720:	f001 f96e 	bl	800ba00 <__multiply>
 800a724:	9902      	ldr	r1, [sp, #8]
 800a726:	4680      	mov	r8, r0
 800a728:	4648      	mov	r0, r9
 800a72a:	f001 f855 	bl	800b7d8 <_Bfree>
 800a72e:	9b08      	ldr	r3, [sp, #32]
 800a730:	1b1b      	subs	r3, r3, r4
 800a732:	9308      	str	r3, [sp, #32]
 800a734:	f000 80b1 	beq.w	800a89a <_dtoa_r+0x8ea>
 800a738:	9a08      	ldr	r2, [sp, #32]
 800a73a:	4641      	mov	r1, r8
 800a73c:	4648      	mov	r0, r9
 800a73e:	f001 fa01 	bl	800bb44 <__pow5mult>
 800a742:	9002      	str	r0, [sp, #8]
 800a744:	2101      	movs	r1, #1
 800a746:	4648      	mov	r0, r9
 800a748:	f001 f944 	bl	800b9d4 <__i2b>
 800a74c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a74e:	4604      	mov	r4, r0
 800a750:	2b00      	cmp	r3, #0
 800a752:	f000 81d8 	beq.w	800ab06 <_dtoa_r+0xb56>
 800a756:	461a      	mov	r2, r3
 800a758:	4601      	mov	r1, r0
 800a75a:	4648      	mov	r0, r9
 800a75c:	f001 f9f2 	bl	800bb44 <__pow5mult>
 800a760:	9b07      	ldr	r3, [sp, #28]
 800a762:	2b01      	cmp	r3, #1
 800a764:	4604      	mov	r4, r0
 800a766:	f300 809f 	bgt.w	800a8a8 <_dtoa_r+0x8f8>
 800a76a:	9b04      	ldr	r3, [sp, #16]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	f040 8097 	bne.w	800a8a0 <_dtoa_r+0x8f0>
 800a772:	9b05      	ldr	r3, [sp, #20]
 800a774:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a778:	2b00      	cmp	r3, #0
 800a77a:	f040 8093 	bne.w	800a8a4 <_dtoa_r+0x8f4>
 800a77e:	9b05      	ldr	r3, [sp, #20]
 800a780:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a784:	0d1b      	lsrs	r3, r3, #20
 800a786:	051b      	lsls	r3, r3, #20
 800a788:	b133      	cbz	r3, 800a798 <_dtoa_r+0x7e8>
 800a78a:	9b00      	ldr	r3, [sp, #0]
 800a78c:	3301      	adds	r3, #1
 800a78e:	9300      	str	r3, [sp, #0]
 800a790:	9b06      	ldr	r3, [sp, #24]
 800a792:	3301      	adds	r3, #1
 800a794:	9306      	str	r3, [sp, #24]
 800a796:	2301      	movs	r3, #1
 800a798:	9308      	str	r3, [sp, #32]
 800a79a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	f000 81b8 	beq.w	800ab12 <_dtoa_r+0xb62>
 800a7a2:	6923      	ldr	r3, [r4, #16]
 800a7a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a7a8:	6918      	ldr	r0, [r3, #16]
 800a7aa:	f001 f8c7 	bl	800b93c <__hi0bits>
 800a7ae:	f1c0 0020 	rsb	r0, r0, #32
 800a7b2:	9b06      	ldr	r3, [sp, #24]
 800a7b4:	4418      	add	r0, r3
 800a7b6:	f010 001f 	ands.w	r0, r0, #31
 800a7ba:	f000 8082 	beq.w	800a8c2 <_dtoa_r+0x912>
 800a7be:	f1c0 0320 	rsb	r3, r0, #32
 800a7c2:	2b04      	cmp	r3, #4
 800a7c4:	dd73      	ble.n	800a8ae <_dtoa_r+0x8fe>
 800a7c6:	9b00      	ldr	r3, [sp, #0]
 800a7c8:	f1c0 001c 	rsb	r0, r0, #28
 800a7cc:	4403      	add	r3, r0
 800a7ce:	9300      	str	r3, [sp, #0]
 800a7d0:	9b06      	ldr	r3, [sp, #24]
 800a7d2:	4403      	add	r3, r0
 800a7d4:	4406      	add	r6, r0
 800a7d6:	9306      	str	r3, [sp, #24]
 800a7d8:	9b00      	ldr	r3, [sp, #0]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	dd05      	ble.n	800a7ea <_dtoa_r+0x83a>
 800a7de:	9902      	ldr	r1, [sp, #8]
 800a7e0:	461a      	mov	r2, r3
 800a7e2:	4648      	mov	r0, r9
 800a7e4:	f001 fa08 	bl	800bbf8 <__lshift>
 800a7e8:	9002      	str	r0, [sp, #8]
 800a7ea:	9b06      	ldr	r3, [sp, #24]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	dd05      	ble.n	800a7fc <_dtoa_r+0x84c>
 800a7f0:	4621      	mov	r1, r4
 800a7f2:	461a      	mov	r2, r3
 800a7f4:	4648      	mov	r0, r9
 800a7f6:	f001 f9ff 	bl	800bbf8 <__lshift>
 800a7fa:	4604      	mov	r4, r0
 800a7fc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d061      	beq.n	800a8c6 <_dtoa_r+0x916>
 800a802:	9802      	ldr	r0, [sp, #8]
 800a804:	4621      	mov	r1, r4
 800a806:	f001 fa63 	bl	800bcd0 <__mcmp>
 800a80a:	2800      	cmp	r0, #0
 800a80c:	da5b      	bge.n	800a8c6 <_dtoa_r+0x916>
 800a80e:	2300      	movs	r3, #0
 800a810:	9902      	ldr	r1, [sp, #8]
 800a812:	220a      	movs	r2, #10
 800a814:	4648      	mov	r0, r9
 800a816:	f001 f801 	bl	800b81c <__multadd>
 800a81a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a81c:	9002      	str	r0, [sp, #8]
 800a81e:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800a822:	2b00      	cmp	r3, #0
 800a824:	f000 8177 	beq.w	800ab16 <_dtoa_r+0xb66>
 800a828:	4629      	mov	r1, r5
 800a82a:	2300      	movs	r3, #0
 800a82c:	220a      	movs	r2, #10
 800a82e:	4648      	mov	r0, r9
 800a830:	f000 fff4 	bl	800b81c <__multadd>
 800a834:	f1bb 0f00 	cmp.w	fp, #0
 800a838:	4605      	mov	r5, r0
 800a83a:	dc6f      	bgt.n	800a91c <_dtoa_r+0x96c>
 800a83c:	9b07      	ldr	r3, [sp, #28]
 800a83e:	2b02      	cmp	r3, #2
 800a840:	dc49      	bgt.n	800a8d6 <_dtoa_r+0x926>
 800a842:	e06b      	b.n	800a91c <_dtoa_r+0x96c>
 800a844:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a846:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a84a:	e73c      	b.n	800a6c6 <_dtoa_r+0x716>
 800a84c:	3fe00000 	.word	0x3fe00000
 800a850:	40240000 	.word	0x40240000
 800a854:	9b03      	ldr	r3, [sp, #12]
 800a856:	1e5c      	subs	r4, r3, #1
 800a858:	9b08      	ldr	r3, [sp, #32]
 800a85a:	42a3      	cmp	r3, r4
 800a85c:	db09      	blt.n	800a872 <_dtoa_r+0x8c2>
 800a85e:	1b1c      	subs	r4, r3, r4
 800a860:	9b03      	ldr	r3, [sp, #12]
 800a862:	2b00      	cmp	r3, #0
 800a864:	f6bf af30 	bge.w	800a6c8 <_dtoa_r+0x718>
 800a868:	9b00      	ldr	r3, [sp, #0]
 800a86a:	9a03      	ldr	r2, [sp, #12]
 800a86c:	1a9e      	subs	r6, r3, r2
 800a86e:	2300      	movs	r3, #0
 800a870:	e72b      	b.n	800a6ca <_dtoa_r+0x71a>
 800a872:	9b08      	ldr	r3, [sp, #32]
 800a874:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a876:	9408      	str	r4, [sp, #32]
 800a878:	1ae3      	subs	r3, r4, r3
 800a87a:	441a      	add	r2, r3
 800a87c:	9e00      	ldr	r6, [sp, #0]
 800a87e:	9b03      	ldr	r3, [sp, #12]
 800a880:	920d      	str	r2, [sp, #52]	@ 0x34
 800a882:	2400      	movs	r4, #0
 800a884:	e721      	b.n	800a6ca <_dtoa_r+0x71a>
 800a886:	9c08      	ldr	r4, [sp, #32]
 800a888:	9e00      	ldr	r6, [sp, #0]
 800a88a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800a88c:	e728      	b.n	800a6e0 <_dtoa_r+0x730>
 800a88e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800a892:	e751      	b.n	800a738 <_dtoa_r+0x788>
 800a894:	9a08      	ldr	r2, [sp, #32]
 800a896:	9902      	ldr	r1, [sp, #8]
 800a898:	e750      	b.n	800a73c <_dtoa_r+0x78c>
 800a89a:	f8cd 8008 	str.w	r8, [sp, #8]
 800a89e:	e751      	b.n	800a744 <_dtoa_r+0x794>
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	e779      	b.n	800a798 <_dtoa_r+0x7e8>
 800a8a4:	9b04      	ldr	r3, [sp, #16]
 800a8a6:	e777      	b.n	800a798 <_dtoa_r+0x7e8>
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	9308      	str	r3, [sp, #32]
 800a8ac:	e779      	b.n	800a7a2 <_dtoa_r+0x7f2>
 800a8ae:	d093      	beq.n	800a7d8 <_dtoa_r+0x828>
 800a8b0:	9a00      	ldr	r2, [sp, #0]
 800a8b2:	331c      	adds	r3, #28
 800a8b4:	441a      	add	r2, r3
 800a8b6:	9200      	str	r2, [sp, #0]
 800a8b8:	9a06      	ldr	r2, [sp, #24]
 800a8ba:	441a      	add	r2, r3
 800a8bc:	441e      	add	r6, r3
 800a8be:	9206      	str	r2, [sp, #24]
 800a8c0:	e78a      	b.n	800a7d8 <_dtoa_r+0x828>
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	e7f4      	b.n	800a8b0 <_dtoa_r+0x900>
 800a8c6:	9b03      	ldr	r3, [sp, #12]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	46b8      	mov	r8, r7
 800a8cc:	dc20      	bgt.n	800a910 <_dtoa_r+0x960>
 800a8ce:	469b      	mov	fp, r3
 800a8d0:	9b07      	ldr	r3, [sp, #28]
 800a8d2:	2b02      	cmp	r3, #2
 800a8d4:	dd1e      	ble.n	800a914 <_dtoa_r+0x964>
 800a8d6:	f1bb 0f00 	cmp.w	fp, #0
 800a8da:	f47f adb1 	bne.w	800a440 <_dtoa_r+0x490>
 800a8de:	4621      	mov	r1, r4
 800a8e0:	465b      	mov	r3, fp
 800a8e2:	2205      	movs	r2, #5
 800a8e4:	4648      	mov	r0, r9
 800a8e6:	f000 ff99 	bl	800b81c <__multadd>
 800a8ea:	4601      	mov	r1, r0
 800a8ec:	4604      	mov	r4, r0
 800a8ee:	9802      	ldr	r0, [sp, #8]
 800a8f0:	f001 f9ee 	bl	800bcd0 <__mcmp>
 800a8f4:	2800      	cmp	r0, #0
 800a8f6:	f77f ada3 	ble.w	800a440 <_dtoa_r+0x490>
 800a8fa:	4656      	mov	r6, sl
 800a8fc:	2331      	movs	r3, #49	@ 0x31
 800a8fe:	f806 3b01 	strb.w	r3, [r6], #1
 800a902:	f108 0801 	add.w	r8, r8, #1
 800a906:	e59f      	b.n	800a448 <_dtoa_r+0x498>
 800a908:	9c03      	ldr	r4, [sp, #12]
 800a90a:	46b8      	mov	r8, r7
 800a90c:	4625      	mov	r5, r4
 800a90e:	e7f4      	b.n	800a8fa <_dtoa_r+0x94a>
 800a910:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800a914:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a916:	2b00      	cmp	r3, #0
 800a918:	f000 8101 	beq.w	800ab1e <_dtoa_r+0xb6e>
 800a91c:	2e00      	cmp	r6, #0
 800a91e:	dd05      	ble.n	800a92c <_dtoa_r+0x97c>
 800a920:	4629      	mov	r1, r5
 800a922:	4632      	mov	r2, r6
 800a924:	4648      	mov	r0, r9
 800a926:	f001 f967 	bl	800bbf8 <__lshift>
 800a92a:	4605      	mov	r5, r0
 800a92c:	9b08      	ldr	r3, [sp, #32]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d05c      	beq.n	800a9ec <_dtoa_r+0xa3c>
 800a932:	6869      	ldr	r1, [r5, #4]
 800a934:	4648      	mov	r0, r9
 800a936:	f000 ff0f 	bl	800b758 <_Balloc>
 800a93a:	4606      	mov	r6, r0
 800a93c:	b928      	cbnz	r0, 800a94a <_dtoa_r+0x99a>
 800a93e:	4b82      	ldr	r3, [pc, #520]	@ (800ab48 <_dtoa_r+0xb98>)
 800a940:	4602      	mov	r2, r0
 800a942:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a946:	f7ff bb4a 	b.w	8009fde <_dtoa_r+0x2e>
 800a94a:	692a      	ldr	r2, [r5, #16]
 800a94c:	3202      	adds	r2, #2
 800a94e:	0092      	lsls	r2, r2, #2
 800a950:	f105 010c 	add.w	r1, r5, #12
 800a954:	300c      	adds	r0, #12
 800a956:	f7ff fa83 	bl	8009e60 <memcpy>
 800a95a:	2201      	movs	r2, #1
 800a95c:	4631      	mov	r1, r6
 800a95e:	4648      	mov	r0, r9
 800a960:	f001 f94a 	bl	800bbf8 <__lshift>
 800a964:	f10a 0301 	add.w	r3, sl, #1
 800a968:	9300      	str	r3, [sp, #0]
 800a96a:	eb0a 030b 	add.w	r3, sl, fp
 800a96e:	9308      	str	r3, [sp, #32]
 800a970:	9b04      	ldr	r3, [sp, #16]
 800a972:	f003 0301 	and.w	r3, r3, #1
 800a976:	462f      	mov	r7, r5
 800a978:	9306      	str	r3, [sp, #24]
 800a97a:	4605      	mov	r5, r0
 800a97c:	9b00      	ldr	r3, [sp, #0]
 800a97e:	9802      	ldr	r0, [sp, #8]
 800a980:	4621      	mov	r1, r4
 800a982:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800a986:	f7ff fa89 	bl	8009e9c <quorem>
 800a98a:	4603      	mov	r3, r0
 800a98c:	3330      	adds	r3, #48	@ 0x30
 800a98e:	9003      	str	r0, [sp, #12]
 800a990:	4639      	mov	r1, r7
 800a992:	9802      	ldr	r0, [sp, #8]
 800a994:	9309      	str	r3, [sp, #36]	@ 0x24
 800a996:	f001 f99b 	bl	800bcd0 <__mcmp>
 800a99a:	462a      	mov	r2, r5
 800a99c:	9004      	str	r0, [sp, #16]
 800a99e:	4621      	mov	r1, r4
 800a9a0:	4648      	mov	r0, r9
 800a9a2:	f001 f9b1 	bl	800bd08 <__mdiff>
 800a9a6:	68c2      	ldr	r2, [r0, #12]
 800a9a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9aa:	4606      	mov	r6, r0
 800a9ac:	bb02      	cbnz	r2, 800a9f0 <_dtoa_r+0xa40>
 800a9ae:	4601      	mov	r1, r0
 800a9b0:	9802      	ldr	r0, [sp, #8]
 800a9b2:	f001 f98d 	bl	800bcd0 <__mcmp>
 800a9b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9b8:	4602      	mov	r2, r0
 800a9ba:	4631      	mov	r1, r6
 800a9bc:	4648      	mov	r0, r9
 800a9be:	920c      	str	r2, [sp, #48]	@ 0x30
 800a9c0:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9c2:	f000 ff09 	bl	800b7d8 <_Bfree>
 800a9c6:	9b07      	ldr	r3, [sp, #28]
 800a9c8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a9ca:	9e00      	ldr	r6, [sp, #0]
 800a9cc:	ea42 0103 	orr.w	r1, r2, r3
 800a9d0:	9b06      	ldr	r3, [sp, #24]
 800a9d2:	4319      	orrs	r1, r3
 800a9d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9d6:	d10d      	bne.n	800a9f4 <_dtoa_r+0xa44>
 800a9d8:	2b39      	cmp	r3, #57	@ 0x39
 800a9da:	d027      	beq.n	800aa2c <_dtoa_r+0xa7c>
 800a9dc:	9a04      	ldr	r2, [sp, #16]
 800a9de:	2a00      	cmp	r2, #0
 800a9e0:	dd01      	ble.n	800a9e6 <_dtoa_r+0xa36>
 800a9e2:	9b03      	ldr	r3, [sp, #12]
 800a9e4:	3331      	adds	r3, #49	@ 0x31
 800a9e6:	f88b 3000 	strb.w	r3, [fp]
 800a9ea:	e52e      	b.n	800a44a <_dtoa_r+0x49a>
 800a9ec:	4628      	mov	r0, r5
 800a9ee:	e7b9      	b.n	800a964 <_dtoa_r+0x9b4>
 800a9f0:	2201      	movs	r2, #1
 800a9f2:	e7e2      	b.n	800a9ba <_dtoa_r+0xa0a>
 800a9f4:	9904      	ldr	r1, [sp, #16]
 800a9f6:	2900      	cmp	r1, #0
 800a9f8:	db04      	blt.n	800aa04 <_dtoa_r+0xa54>
 800a9fa:	9807      	ldr	r0, [sp, #28]
 800a9fc:	4301      	orrs	r1, r0
 800a9fe:	9806      	ldr	r0, [sp, #24]
 800aa00:	4301      	orrs	r1, r0
 800aa02:	d120      	bne.n	800aa46 <_dtoa_r+0xa96>
 800aa04:	2a00      	cmp	r2, #0
 800aa06:	ddee      	ble.n	800a9e6 <_dtoa_r+0xa36>
 800aa08:	9902      	ldr	r1, [sp, #8]
 800aa0a:	9300      	str	r3, [sp, #0]
 800aa0c:	2201      	movs	r2, #1
 800aa0e:	4648      	mov	r0, r9
 800aa10:	f001 f8f2 	bl	800bbf8 <__lshift>
 800aa14:	4621      	mov	r1, r4
 800aa16:	9002      	str	r0, [sp, #8]
 800aa18:	f001 f95a 	bl	800bcd0 <__mcmp>
 800aa1c:	2800      	cmp	r0, #0
 800aa1e:	9b00      	ldr	r3, [sp, #0]
 800aa20:	dc02      	bgt.n	800aa28 <_dtoa_r+0xa78>
 800aa22:	d1e0      	bne.n	800a9e6 <_dtoa_r+0xa36>
 800aa24:	07da      	lsls	r2, r3, #31
 800aa26:	d5de      	bpl.n	800a9e6 <_dtoa_r+0xa36>
 800aa28:	2b39      	cmp	r3, #57	@ 0x39
 800aa2a:	d1da      	bne.n	800a9e2 <_dtoa_r+0xa32>
 800aa2c:	2339      	movs	r3, #57	@ 0x39
 800aa2e:	f88b 3000 	strb.w	r3, [fp]
 800aa32:	4633      	mov	r3, r6
 800aa34:	461e      	mov	r6, r3
 800aa36:	3b01      	subs	r3, #1
 800aa38:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800aa3c:	2a39      	cmp	r2, #57	@ 0x39
 800aa3e:	d04e      	beq.n	800aade <_dtoa_r+0xb2e>
 800aa40:	3201      	adds	r2, #1
 800aa42:	701a      	strb	r2, [r3, #0]
 800aa44:	e501      	b.n	800a44a <_dtoa_r+0x49a>
 800aa46:	2a00      	cmp	r2, #0
 800aa48:	dd03      	ble.n	800aa52 <_dtoa_r+0xaa2>
 800aa4a:	2b39      	cmp	r3, #57	@ 0x39
 800aa4c:	d0ee      	beq.n	800aa2c <_dtoa_r+0xa7c>
 800aa4e:	3301      	adds	r3, #1
 800aa50:	e7c9      	b.n	800a9e6 <_dtoa_r+0xa36>
 800aa52:	9a00      	ldr	r2, [sp, #0]
 800aa54:	9908      	ldr	r1, [sp, #32]
 800aa56:	f802 3c01 	strb.w	r3, [r2, #-1]
 800aa5a:	428a      	cmp	r2, r1
 800aa5c:	d028      	beq.n	800aab0 <_dtoa_r+0xb00>
 800aa5e:	9902      	ldr	r1, [sp, #8]
 800aa60:	2300      	movs	r3, #0
 800aa62:	220a      	movs	r2, #10
 800aa64:	4648      	mov	r0, r9
 800aa66:	f000 fed9 	bl	800b81c <__multadd>
 800aa6a:	42af      	cmp	r7, r5
 800aa6c:	9002      	str	r0, [sp, #8]
 800aa6e:	f04f 0300 	mov.w	r3, #0
 800aa72:	f04f 020a 	mov.w	r2, #10
 800aa76:	4639      	mov	r1, r7
 800aa78:	4648      	mov	r0, r9
 800aa7a:	d107      	bne.n	800aa8c <_dtoa_r+0xadc>
 800aa7c:	f000 fece 	bl	800b81c <__multadd>
 800aa80:	4607      	mov	r7, r0
 800aa82:	4605      	mov	r5, r0
 800aa84:	9b00      	ldr	r3, [sp, #0]
 800aa86:	3301      	adds	r3, #1
 800aa88:	9300      	str	r3, [sp, #0]
 800aa8a:	e777      	b.n	800a97c <_dtoa_r+0x9cc>
 800aa8c:	f000 fec6 	bl	800b81c <__multadd>
 800aa90:	4629      	mov	r1, r5
 800aa92:	4607      	mov	r7, r0
 800aa94:	2300      	movs	r3, #0
 800aa96:	220a      	movs	r2, #10
 800aa98:	4648      	mov	r0, r9
 800aa9a:	f000 febf 	bl	800b81c <__multadd>
 800aa9e:	4605      	mov	r5, r0
 800aaa0:	e7f0      	b.n	800aa84 <_dtoa_r+0xad4>
 800aaa2:	f1bb 0f00 	cmp.w	fp, #0
 800aaa6:	bfcc      	ite	gt
 800aaa8:	465e      	movgt	r6, fp
 800aaaa:	2601      	movle	r6, #1
 800aaac:	4456      	add	r6, sl
 800aaae:	2700      	movs	r7, #0
 800aab0:	9902      	ldr	r1, [sp, #8]
 800aab2:	9300      	str	r3, [sp, #0]
 800aab4:	2201      	movs	r2, #1
 800aab6:	4648      	mov	r0, r9
 800aab8:	f001 f89e 	bl	800bbf8 <__lshift>
 800aabc:	4621      	mov	r1, r4
 800aabe:	9002      	str	r0, [sp, #8]
 800aac0:	f001 f906 	bl	800bcd0 <__mcmp>
 800aac4:	2800      	cmp	r0, #0
 800aac6:	dcb4      	bgt.n	800aa32 <_dtoa_r+0xa82>
 800aac8:	d102      	bne.n	800aad0 <_dtoa_r+0xb20>
 800aaca:	9b00      	ldr	r3, [sp, #0]
 800aacc:	07db      	lsls	r3, r3, #31
 800aace:	d4b0      	bmi.n	800aa32 <_dtoa_r+0xa82>
 800aad0:	4633      	mov	r3, r6
 800aad2:	461e      	mov	r6, r3
 800aad4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aad8:	2a30      	cmp	r2, #48	@ 0x30
 800aada:	d0fa      	beq.n	800aad2 <_dtoa_r+0xb22>
 800aadc:	e4b5      	b.n	800a44a <_dtoa_r+0x49a>
 800aade:	459a      	cmp	sl, r3
 800aae0:	d1a8      	bne.n	800aa34 <_dtoa_r+0xa84>
 800aae2:	2331      	movs	r3, #49	@ 0x31
 800aae4:	f108 0801 	add.w	r8, r8, #1
 800aae8:	f88a 3000 	strb.w	r3, [sl]
 800aaec:	e4ad      	b.n	800a44a <_dtoa_r+0x49a>
 800aaee:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800aaf0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800ab4c <_dtoa_r+0xb9c>
 800aaf4:	b11b      	cbz	r3, 800aafe <_dtoa_r+0xb4e>
 800aaf6:	f10a 0308 	add.w	r3, sl, #8
 800aafa:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800aafc:	6013      	str	r3, [r2, #0]
 800aafe:	4650      	mov	r0, sl
 800ab00:	b017      	add	sp, #92	@ 0x5c
 800ab02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab06:	9b07      	ldr	r3, [sp, #28]
 800ab08:	2b01      	cmp	r3, #1
 800ab0a:	f77f ae2e 	ble.w	800a76a <_dtoa_r+0x7ba>
 800ab0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ab10:	9308      	str	r3, [sp, #32]
 800ab12:	2001      	movs	r0, #1
 800ab14:	e64d      	b.n	800a7b2 <_dtoa_r+0x802>
 800ab16:	f1bb 0f00 	cmp.w	fp, #0
 800ab1a:	f77f aed9 	ble.w	800a8d0 <_dtoa_r+0x920>
 800ab1e:	4656      	mov	r6, sl
 800ab20:	9802      	ldr	r0, [sp, #8]
 800ab22:	4621      	mov	r1, r4
 800ab24:	f7ff f9ba 	bl	8009e9c <quorem>
 800ab28:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800ab2c:	f806 3b01 	strb.w	r3, [r6], #1
 800ab30:	eba6 020a 	sub.w	r2, r6, sl
 800ab34:	4593      	cmp	fp, r2
 800ab36:	ddb4      	ble.n	800aaa2 <_dtoa_r+0xaf2>
 800ab38:	9902      	ldr	r1, [sp, #8]
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	220a      	movs	r2, #10
 800ab3e:	4648      	mov	r0, r9
 800ab40:	f000 fe6c 	bl	800b81c <__multadd>
 800ab44:	9002      	str	r0, [sp, #8]
 800ab46:	e7eb      	b.n	800ab20 <_dtoa_r+0xb70>
 800ab48:	0800ce07 	.word	0x0800ce07
 800ab4c:	0800cd8b 	.word	0x0800cd8b

0800ab50 <rshift>:
 800ab50:	6903      	ldr	r3, [r0, #16]
 800ab52:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ab56:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ab5a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ab5e:	f100 0414 	add.w	r4, r0, #20
 800ab62:	dd45      	ble.n	800abf0 <rshift+0xa0>
 800ab64:	f011 011f 	ands.w	r1, r1, #31
 800ab68:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ab6c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ab70:	d10c      	bne.n	800ab8c <rshift+0x3c>
 800ab72:	f100 0710 	add.w	r7, r0, #16
 800ab76:	4629      	mov	r1, r5
 800ab78:	42b1      	cmp	r1, r6
 800ab7a:	d334      	bcc.n	800abe6 <rshift+0x96>
 800ab7c:	1a9b      	subs	r3, r3, r2
 800ab7e:	009b      	lsls	r3, r3, #2
 800ab80:	1eea      	subs	r2, r5, #3
 800ab82:	4296      	cmp	r6, r2
 800ab84:	bf38      	it	cc
 800ab86:	2300      	movcc	r3, #0
 800ab88:	4423      	add	r3, r4
 800ab8a:	e015      	b.n	800abb8 <rshift+0x68>
 800ab8c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ab90:	f1c1 0820 	rsb	r8, r1, #32
 800ab94:	40cf      	lsrs	r7, r1
 800ab96:	f105 0e04 	add.w	lr, r5, #4
 800ab9a:	46a1      	mov	r9, r4
 800ab9c:	4576      	cmp	r6, lr
 800ab9e:	46f4      	mov	ip, lr
 800aba0:	d815      	bhi.n	800abce <rshift+0x7e>
 800aba2:	1a9a      	subs	r2, r3, r2
 800aba4:	0092      	lsls	r2, r2, #2
 800aba6:	3a04      	subs	r2, #4
 800aba8:	3501      	adds	r5, #1
 800abaa:	42ae      	cmp	r6, r5
 800abac:	bf38      	it	cc
 800abae:	2200      	movcc	r2, #0
 800abb0:	18a3      	adds	r3, r4, r2
 800abb2:	50a7      	str	r7, [r4, r2]
 800abb4:	b107      	cbz	r7, 800abb8 <rshift+0x68>
 800abb6:	3304      	adds	r3, #4
 800abb8:	1b1a      	subs	r2, r3, r4
 800abba:	42a3      	cmp	r3, r4
 800abbc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800abc0:	bf08      	it	eq
 800abc2:	2300      	moveq	r3, #0
 800abc4:	6102      	str	r2, [r0, #16]
 800abc6:	bf08      	it	eq
 800abc8:	6143      	streq	r3, [r0, #20]
 800abca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800abce:	f8dc c000 	ldr.w	ip, [ip]
 800abd2:	fa0c fc08 	lsl.w	ip, ip, r8
 800abd6:	ea4c 0707 	orr.w	r7, ip, r7
 800abda:	f849 7b04 	str.w	r7, [r9], #4
 800abde:	f85e 7b04 	ldr.w	r7, [lr], #4
 800abe2:	40cf      	lsrs	r7, r1
 800abe4:	e7da      	b.n	800ab9c <rshift+0x4c>
 800abe6:	f851 cb04 	ldr.w	ip, [r1], #4
 800abea:	f847 cf04 	str.w	ip, [r7, #4]!
 800abee:	e7c3      	b.n	800ab78 <rshift+0x28>
 800abf0:	4623      	mov	r3, r4
 800abf2:	e7e1      	b.n	800abb8 <rshift+0x68>

0800abf4 <__hexdig_fun>:
 800abf4:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800abf8:	2b09      	cmp	r3, #9
 800abfa:	d802      	bhi.n	800ac02 <__hexdig_fun+0xe>
 800abfc:	3820      	subs	r0, #32
 800abfe:	b2c0      	uxtb	r0, r0
 800ac00:	4770      	bx	lr
 800ac02:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ac06:	2b05      	cmp	r3, #5
 800ac08:	d801      	bhi.n	800ac0e <__hexdig_fun+0x1a>
 800ac0a:	3847      	subs	r0, #71	@ 0x47
 800ac0c:	e7f7      	b.n	800abfe <__hexdig_fun+0xa>
 800ac0e:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ac12:	2b05      	cmp	r3, #5
 800ac14:	d801      	bhi.n	800ac1a <__hexdig_fun+0x26>
 800ac16:	3827      	subs	r0, #39	@ 0x27
 800ac18:	e7f1      	b.n	800abfe <__hexdig_fun+0xa>
 800ac1a:	2000      	movs	r0, #0
 800ac1c:	4770      	bx	lr
	...

0800ac20 <__gethex>:
 800ac20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac24:	b085      	sub	sp, #20
 800ac26:	468a      	mov	sl, r1
 800ac28:	9302      	str	r3, [sp, #8]
 800ac2a:	680b      	ldr	r3, [r1, #0]
 800ac2c:	9001      	str	r0, [sp, #4]
 800ac2e:	4690      	mov	r8, r2
 800ac30:	1c9c      	adds	r4, r3, #2
 800ac32:	46a1      	mov	r9, r4
 800ac34:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ac38:	2830      	cmp	r0, #48	@ 0x30
 800ac3a:	d0fa      	beq.n	800ac32 <__gethex+0x12>
 800ac3c:	eba9 0303 	sub.w	r3, r9, r3
 800ac40:	f1a3 0b02 	sub.w	fp, r3, #2
 800ac44:	f7ff ffd6 	bl	800abf4 <__hexdig_fun>
 800ac48:	4605      	mov	r5, r0
 800ac4a:	2800      	cmp	r0, #0
 800ac4c:	d168      	bne.n	800ad20 <__gethex+0x100>
 800ac4e:	49a0      	ldr	r1, [pc, #640]	@ (800aed0 <__gethex+0x2b0>)
 800ac50:	2201      	movs	r2, #1
 800ac52:	4648      	mov	r0, r9
 800ac54:	f7ff f8c0 	bl	8009dd8 <strncmp>
 800ac58:	4607      	mov	r7, r0
 800ac5a:	2800      	cmp	r0, #0
 800ac5c:	d167      	bne.n	800ad2e <__gethex+0x10e>
 800ac5e:	f899 0001 	ldrb.w	r0, [r9, #1]
 800ac62:	4626      	mov	r6, r4
 800ac64:	f7ff ffc6 	bl	800abf4 <__hexdig_fun>
 800ac68:	2800      	cmp	r0, #0
 800ac6a:	d062      	beq.n	800ad32 <__gethex+0x112>
 800ac6c:	4623      	mov	r3, r4
 800ac6e:	7818      	ldrb	r0, [r3, #0]
 800ac70:	2830      	cmp	r0, #48	@ 0x30
 800ac72:	4699      	mov	r9, r3
 800ac74:	f103 0301 	add.w	r3, r3, #1
 800ac78:	d0f9      	beq.n	800ac6e <__gethex+0x4e>
 800ac7a:	f7ff ffbb 	bl	800abf4 <__hexdig_fun>
 800ac7e:	fab0 f580 	clz	r5, r0
 800ac82:	096d      	lsrs	r5, r5, #5
 800ac84:	f04f 0b01 	mov.w	fp, #1
 800ac88:	464a      	mov	r2, r9
 800ac8a:	4616      	mov	r6, r2
 800ac8c:	3201      	adds	r2, #1
 800ac8e:	7830      	ldrb	r0, [r6, #0]
 800ac90:	f7ff ffb0 	bl	800abf4 <__hexdig_fun>
 800ac94:	2800      	cmp	r0, #0
 800ac96:	d1f8      	bne.n	800ac8a <__gethex+0x6a>
 800ac98:	498d      	ldr	r1, [pc, #564]	@ (800aed0 <__gethex+0x2b0>)
 800ac9a:	2201      	movs	r2, #1
 800ac9c:	4630      	mov	r0, r6
 800ac9e:	f7ff f89b 	bl	8009dd8 <strncmp>
 800aca2:	2800      	cmp	r0, #0
 800aca4:	d13f      	bne.n	800ad26 <__gethex+0x106>
 800aca6:	b944      	cbnz	r4, 800acba <__gethex+0x9a>
 800aca8:	1c74      	adds	r4, r6, #1
 800acaa:	4622      	mov	r2, r4
 800acac:	4616      	mov	r6, r2
 800acae:	3201      	adds	r2, #1
 800acb0:	7830      	ldrb	r0, [r6, #0]
 800acb2:	f7ff ff9f 	bl	800abf4 <__hexdig_fun>
 800acb6:	2800      	cmp	r0, #0
 800acb8:	d1f8      	bne.n	800acac <__gethex+0x8c>
 800acba:	1ba4      	subs	r4, r4, r6
 800acbc:	00a7      	lsls	r7, r4, #2
 800acbe:	7833      	ldrb	r3, [r6, #0]
 800acc0:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800acc4:	2b50      	cmp	r3, #80	@ 0x50
 800acc6:	d13e      	bne.n	800ad46 <__gethex+0x126>
 800acc8:	7873      	ldrb	r3, [r6, #1]
 800acca:	2b2b      	cmp	r3, #43	@ 0x2b
 800accc:	d033      	beq.n	800ad36 <__gethex+0x116>
 800acce:	2b2d      	cmp	r3, #45	@ 0x2d
 800acd0:	d034      	beq.n	800ad3c <__gethex+0x11c>
 800acd2:	1c71      	adds	r1, r6, #1
 800acd4:	2400      	movs	r4, #0
 800acd6:	7808      	ldrb	r0, [r1, #0]
 800acd8:	f7ff ff8c 	bl	800abf4 <__hexdig_fun>
 800acdc:	1e43      	subs	r3, r0, #1
 800acde:	b2db      	uxtb	r3, r3
 800ace0:	2b18      	cmp	r3, #24
 800ace2:	d830      	bhi.n	800ad46 <__gethex+0x126>
 800ace4:	f1a0 0210 	sub.w	r2, r0, #16
 800ace8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800acec:	f7ff ff82 	bl	800abf4 <__hexdig_fun>
 800acf0:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800acf4:	fa5f fc8c 	uxtb.w	ip, ip
 800acf8:	f1bc 0f18 	cmp.w	ip, #24
 800acfc:	f04f 030a 	mov.w	r3, #10
 800ad00:	d91e      	bls.n	800ad40 <__gethex+0x120>
 800ad02:	b104      	cbz	r4, 800ad06 <__gethex+0xe6>
 800ad04:	4252      	negs	r2, r2
 800ad06:	4417      	add	r7, r2
 800ad08:	f8ca 1000 	str.w	r1, [sl]
 800ad0c:	b1ed      	cbz	r5, 800ad4a <__gethex+0x12a>
 800ad0e:	f1bb 0f00 	cmp.w	fp, #0
 800ad12:	bf0c      	ite	eq
 800ad14:	2506      	moveq	r5, #6
 800ad16:	2500      	movne	r5, #0
 800ad18:	4628      	mov	r0, r5
 800ad1a:	b005      	add	sp, #20
 800ad1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad20:	2500      	movs	r5, #0
 800ad22:	462c      	mov	r4, r5
 800ad24:	e7b0      	b.n	800ac88 <__gethex+0x68>
 800ad26:	2c00      	cmp	r4, #0
 800ad28:	d1c7      	bne.n	800acba <__gethex+0x9a>
 800ad2a:	4627      	mov	r7, r4
 800ad2c:	e7c7      	b.n	800acbe <__gethex+0x9e>
 800ad2e:	464e      	mov	r6, r9
 800ad30:	462f      	mov	r7, r5
 800ad32:	2501      	movs	r5, #1
 800ad34:	e7c3      	b.n	800acbe <__gethex+0x9e>
 800ad36:	2400      	movs	r4, #0
 800ad38:	1cb1      	adds	r1, r6, #2
 800ad3a:	e7cc      	b.n	800acd6 <__gethex+0xb6>
 800ad3c:	2401      	movs	r4, #1
 800ad3e:	e7fb      	b.n	800ad38 <__gethex+0x118>
 800ad40:	fb03 0002 	mla	r0, r3, r2, r0
 800ad44:	e7ce      	b.n	800ace4 <__gethex+0xc4>
 800ad46:	4631      	mov	r1, r6
 800ad48:	e7de      	b.n	800ad08 <__gethex+0xe8>
 800ad4a:	eba6 0309 	sub.w	r3, r6, r9
 800ad4e:	3b01      	subs	r3, #1
 800ad50:	4629      	mov	r1, r5
 800ad52:	2b07      	cmp	r3, #7
 800ad54:	dc0a      	bgt.n	800ad6c <__gethex+0x14c>
 800ad56:	9801      	ldr	r0, [sp, #4]
 800ad58:	f000 fcfe 	bl	800b758 <_Balloc>
 800ad5c:	4604      	mov	r4, r0
 800ad5e:	b940      	cbnz	r0, 800ad72 <__gethex+0x152>
 800ad60:	4b5c      	ldr	r3, [pc, #368]	@ (800aed4 <__gethex+0x2b4>)
 800ad62:	4602      	mov	r2, r0
 800ad64:	21e4      	movs	r1, #228	@ 0xe4
 800ad66:	485c      	ldr	r0, [pc, #368]	@ (800aed8 <__gethex+0x2b8>)
 800ad68:	f001 fa8e 	bl	800c288 <__assert_func>
 800ad6c:	3101      	adds	r1, #1
 800ad6e:	105b      	asrs	r3, r3, #1
 800ad70:	e7ef      	b.n	800ad52 <__gethex+0x132>
 800ad72:	f100 0a14 	add.w	sl, r0, #20
 800ad76:	2300      	movs	r3, #0
 800ad78:	4655      	mov	r5, sl
 800ad7a:	469b      	mov	fp, r3
 800ad7c:	45b1      	cmp	r9, r6
 800ad7e:	d337      	bcc.n	800adf0 <__gethex+0x1d0>
 800ad80:	f845 bb04 	str.w	fp, [r5], #4
 800ad84:	eba5 050a 	sub.w	r5, r5, sl
 800ad88:	10ad      	asrs	r5, r5, #2
 800ad8a:	6125      	str	r5, [r4, #16]
 800ad8c:	4658      	mov	r0, fp
 800ad8e:	f000 fdd5 	bl	800b93c <__hi0bits>
 800ad92:	016d      	lsls	r5, r5, #5
 800ad94:	f8d8 6000 	ldr.w	r6, [r8]
 800ad98:	1a2d      	subs	r5, r5, r0
 800ad9a:	42b5      	cmp	r5, r6
 800ad9c:	dd54      	ble.n	800ae48 <__gethex+0x228>
 800ad9e:	1bad      	subs	r5, r5, r6
 800ada0:	4629      	mov	r1, r5
 800ada2:	4620      	mov	r0, r4
 800ada4:	f001 f961 	bl	800c06a <__any_on>
 800ada8:	4681      	mov	r9, r0
 800adaa:	b178      	cbz	r0, 800adcc <__gethex+0x1ac>
 800adac:	1e6b      	subs	r3, r5, #1
 800adae:	1159      	asrs	r1, r3, #5
 800adb0:	f003 021f 	and.w	r2, r3, #31
 800adb4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800adb8:	f04f 0901 	mov.w	r9, #1
 800adbc:	fa09 f202 	lsl.w	r2, r9, r2
 800adc0:	420a      	tst	r2, r1
 800adc2:	d003      	beq.n	800adcc <__gethex+0x1ac>
 800adc4:	454b      	cmp	r3, r9
 800adc6:	dc36      	bgt.n	800ae36 <__gethex+0x216>
 800adc8:	f04f 0902 	mov.w	r9, #2
 800adcc:	4629      	mov	r1, r5
 800adce:	4620      	mov	r0, r4
 800add0:	f7ff febe 	bl	800ab50 <rshift>
 800add4:	442f      	add	r7, r5
 800add6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800adda:	42bb      	cmp	r3, r7
 800addc:	da42      	bge.n	800ae64 <__gethex+0x244>
 800adde:	9801      	ldr	r0, [sp, #4]
 800ade0:	4621      	mov	r1, r4
 800ade2:	f000 fcf9 	bl	800b7d8 <_Bfree>
 800ade6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ade8:	2300      	movs	r3, #0
 800adea:	6013      	str	r3, [r2, #0]
 800adec:	25a3      	movs	r5, #163	@ 0xa3
 800adee:	e793      	b.n	800ad18 <__gethex+0xf8>
 800adf0:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800adf4:	2a2e      	cmp	r2, #46	@ 0x2e
 800adf6:	d012      	beq.n	800ae1e <__gethex+0x1fe>
 800adf8:	2b20      	cmp	r3, #32
 800adfa:	d104      	bne.n	800ae06 <__gethex+0x1e6>
 800adfc:	f845 bb04 	str.w	fp, [r5], #4
 800ae00:	f04f 0b00 	mov.w	fp, #0
 800ae04:	465b      	mov	r3, fp
 800ae06:	7830      	ldrb	r0, [r6, #0]
 800ae08:	9303      	str	r3, [sp, #12]
 800ae0a:	f7ff fef3 	bl	800abf4 <__hexdig_fun>
 800ae0e:	9b03      	ldr	r3, [sp, #12]
 800ae10:	f000 000f 	and.w	r0, r0, #15
 800ae14:	4098      	lsls	r0, r3
 800ae16:	ea4b 0b00 	orr.w	fp, fp, r0
 800ae1a:	3304      	adds	r3, #4
 800ae1c:	e7ae      	b.n	800ad7c <__gethex+0x15c>
 800ae1e:	45b1      	cmp	r9, r6
 800ae20:	d8ea      	bhi.n	800adf8 <__gethex+0x1d8>
 800ae22:	492b      	ldr	r1, [pc, #172]	@ (800aed0 <__gethex+0x2b0>)
 800ae24:	9303      	str	r3, [sp, #12]
 800ae26:	2201      	movs	r2, #1
 800ae28:	4630      	mov	r0, r6
 800ae2a:	f7fe ffd5 	bl	8009dd8 <strncmp>
 800ae2e:	9b03      	ldr	r3, [sp, #12]
 800ae30:	2800      	cmp	r0, #0
 800ae32:	d1e1      	bne.n	800adf8 <__gethex+0x1d8>
 800ae34:	e7a2      	b.n	800ad7c <__gethex+0x15c>
 800ae36:	1ea9      	subs	r1, r5, #2
 800ae38:	4620      	mov	r0, r4
 800ae3a:	f001 f916 	bl	800c06a <__any_on>
 800ae3e:	2800      	cmp	r0, #0
 800ae40:	d0c2      	beq.n	800adc8 <__gethex+0x1a8>
 800ae42:	f04f 0903 	mov.w	r9, #3
 800ae46:	e7c1      	b.n	800adcc <__gethex+0x1ac>
 800ae48:	da09      	bge.n	800ae5e <__gethex+0x23e>
 800ae4a:	1b75      	subs	r5, r6, r5
 800ae4c:	4621      	mov	r1, r4
 800ae4e:	9801      	ldr	r0, [sp, #4]
 800ae50:	462a      	mov	r2, r5
 800ae52:	f000 fed1 	bl	800bbf8 <__lshift>
 800ae56:	1b7f      	subs	r7, r7, r5
 800ae58:	4604      	mov	r4, r0
 800ae5a:	f100 0a14 	add.w	sl, r0, #20
 800ae5e:	f04f 0900 	mov.w	r9, #0
 800ae62:	e7b8      	b.n	800add6 <__gethex+0x1b6>
 800ae64:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ae68:	42bd      	cmp	r5, r7
 800ae6a:	dd6f      	ble.n	800af4c <__gethex+0x32c>
 800ae6c:	1bed      	subs	r5, r5, r7
 800ae6e:	42ae      	cmp	r6, r5
 800ae70:	dc34      	bgt.n	800aedc <__gethex+0x2bc>
 800ae72:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ae76:	2b02      	cmp	r3, #2
 800ae78:	d022      	beq.n	800aec0 <__gethex+0x2a0>
 800ae7a:	2b03      	cmp	r3, #3
 800ae7c:	d024      	beq.n	800aec8 <__gethex+0x2a8>
 800ae7e:	2b01      	cmp	r3, #1
 800ae80:	d115      	bne.n	800aeae <__gethex+0x28e>
 800ae82:	42ae      	cmp	r6, r5
 800ae84:	d113      	bne.n	800aeae <__gethex+0x28e>
 800ae86:	2e01      	cmp	r6, #1
 800ae88:	d10b      	bne.n	800aea2 <__gethex+0x282>
 800ae8a:	9a02      	ldr	r2, [sp, #8]
 800ae8c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ae90:	6013      	str	r3, [r2, #0]
 800ae92:	2301      	movs	r3, #1
 800ae94:	6123      	str	r3, [r4, #16]
 800ae96:	f8ca 3000 	str.w	r3, [sl]
 800ae9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ae9c:	2562      	movs	r5, #98	@ 0x62
 800ae9e:	601c      	str	r4, [r3, #0]
 800aea0:	e73a      	b.n	800ad18 <__gethex+0xf8>
 800aea2:	1e71      	subs	r1, r6, #1
 800aea4:	4620      	mov	r0, r4
 800aea6:	f001 f8e0 	bl	800c06a <__any_on>
 800aeaa:	2800      	cmp	r0, #0
 800aeac:	d1ed      	bne.n	800ae8a <__gethex+0x26a>
 800aeae:	9801      	ldr	r0, [sp, #4]
 800aeb0:	4621      	mov	r1, r4
 800aeb2:	f000 fc91 	bl	800b7d8 <_Bfree>
 800aeb6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aeb8:	2300      	movs	r3, #0
 800aeba:	6013      	str	r3, [r2, #0]
 800aebc:	2550      	movs	r5, #80	@ 0x50
 800aebe:	e72b      	b.n	800ad18 <__gethex+0xf8>
 800aec0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d1f3      	bne.n	800aeae <__gethex+0x28e>
 800aec6:	e7e0      	b.n	800ae8a <__gethex+0x26a>
 800aec8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d1dd      	bne.n	800ae8a <__gethex+0x26a>
 800aece:	e7ee      	b.n	800aeae <__gethex+0x28e>
 800aed0:	0800cd81 	.word	0x0800cd81
 800aed4:	0800ce07 	.word	0x0800ce07
 800aed8:	0800ce18 	.word	0x0800ce18
 800aedc:	1e6f      	subs	r7, r5, #1
 800aede:	f1b9 0f00 	cmp.w	r9, #0
 800aee2:	d130      	bne.n	800af46 <__gethex+0x326>
 800aee4:	b127      	cbz	r7, 800aef0 <__gethex+0x2d0>
 800aee6:	4639      	mov	r1, r7
 800aee8:	4620      	mov	r0, r4
 800aeea:	f001 f8be 	bl	800c06a <__any_on>
 800aeee:	4681      	mov	r9, r0
 800aef0:	117a      	asrs	r2, r7, #5
 800aef2:	2301      	movs	r3, #1
 800aef4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800aef8:	f007 071f 	and.w	r7, r7, #31
 800aefc:	40bb      	lsls	r3, r7
 800aefe:	4213      	tst	r3, r2
 800af00:	4629      	mov	r1, r5
 800af02:	4620      	mov	r0, r4
 800af04:	bf18      	it	ne
 800af06:	f049 0902 	orrne.w	r9, r9, #2
 800af0a:	f7ff fe21 	bl	800ab50 <rshift>
 800af0e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800af12:	1b76      	subs	r6, r6, r5
 800af14:	2502      	movs	r5, #2
 800af16:	f1b9 0f00 	cmp.w	r9, #0
 800af1a:	d047      	beq.n	800afac <__gethex+0x38c>
 800af1c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800af20:	2b02      	cmp	r3, #2
 800af22:	d015      	beq.n	800af50 <__gethex+0x330>
 800af24:	2b03      	cmp	r3, #3
 800af26:	d017      	beq.n	800af58 <__gethex+0x338>
 800af28:	2b01      	cmp	r3, #1
 800af2a:	d109      	bne.n	800af40 <__gethex+0x320>
 800af2c:	f019 0f02 	tst.w	r9, #2
 800af30:	d006      	beq.n	800af40 <__gethex+0x320>
 800af32:	f8da 3000 	ldr.w	r3, [sl]
 800af36:	ea49 0903 	orr.w	r9, r9, r3
 800af3a:	f019 0f01 	tst.w	r9, #1
 800af3e:	d10e      	bne.n	800af5e <__gethex+0x33e>
 800af40:	f045 0510 	orr.w	r5, r5, #16
 800af44:	e032      	b.n	800afac <__gethex+0x38c>
 800af46:	f04f 0901 	mov.w	r9, #1
 800af4a:	e7d1      	b.n	800aef0 <__gethex+0x2d0>
 800af4c:	2501      	movs	r5, #1
 800af4e:	e7e2      	b.n	800af16 <__gethex+0x2f6>
 800af50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af52:	f1c3 0301 	rsb	r3, r3, #1
 800af56:	930f      	str	r3, [sp, #60]	@ 0x3c
 800af58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d0f0      	beq.n	800af40 <__gethex+0x320>
 800af5e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800af62:	f104 0314 	add.w	r3, r4, #20
 800af66:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800af6a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800af6e:	f04f 0c00 	mov.w	ip, #0
 800af72:	4618      	mov	r0, r3
 800af74:	f853 2b04 	ldr.w	r2, [r3], #4
 800af78:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800af7c:	d01b      	beq.n	800afb6 <__gethex+0x396>
 800af7e:	3201      	adds	r2, #1
 800af80:	6002      	str	r2, [r0, #0]
 800af82:	2d02      	cmp	r5, #2
 800af84:	f104 0314 	add.w	r3, r4, #20
 800af88:	d13c      	bne.n	800b004 <__gethex+0x3e4>
 800af8a:	f8d8 2000 	ldr.w	r2, [r8]
 800af8e:	3a01      	subs	r2, #1
 800af90:	42b2      	cmp	r2, r6
 800af92:	d109      	bne.n	800afa8 <__gethex+0x388>
 800af94:	1171      	asrs	r1, r6, #5
 800af96:	2201      	movs	r2, #1
 800af98:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800af9c:	f006 061f 	and.w	r6, r6, #31
 800afa0:	fa02 f606 	lsl.w	r6, r2, r6
 800afa4:	421e      	tst	r6, r3
 800afa6:	d13a      	bne.n	800b01e <__gethex+0x3fe>
 800afa8:	f045 0520 	orr.w	r5, r5, #32
 800afac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800afae:	601c      	str	r4, [r3, #0]
 800afb0:	9b02      	ldr	r3, [sp, #8]
 800afb2:	601f      	str	r7, [r3, #0]
 800afb4:	e6b0      	b.n	800ad18 <__gethex+0xf8>
 800afb6:	4299      	cmp	r1, r3
 800afb8:	f843 cc04 	str.w	ip, [r3, #-4]
 800afbc:	d8d9      	bhi.n	800af72 <__gethex+0x352>
 800afbe:	68a3      	ldr	r3, [r4, #8]
 800afc0:	459b      	cmp	fp, r3
 800afc2:	db17      	blt.n	800aff4 <__gethex+0x3d4>
 800afc4:	6861      	ldr	r1, [r4, #4]
 800afc6:	9801      	ldr	r0, [sp, #4]
 800afc8:	3101      	adds	r1, #1
 800afca:	f000 fbc5 	bl	800b758 <_Balloc>
 800afce:	4681      	mov	r9, r0
 800afd0:	b918      	cbnz	r0, 800afda <__gethex+0x3ba>
 800afd2:	4b1a      	ldr	r3, [pc, #104]	@ (800b03c <__gethex+0x41c>)
 800afd4:	4602      	mov	r2, r0
 800afd6:	2184      	movs	r1, #132	@ 0x84
 800afd8:	e6c5      	b.n	800ad66 <__gethex+0x146>
 800afda:	6922      	ldr	r2, [r4, #16]
 800afdc:	3202      	adds	r2, #2
 800afde:	f104 010c 	add.w	r1, r4, #12
 800afe2:	0092      	lsls	r2, r2, #2
 800afe4:	300c      	adds	r0, #12
 800afe6:	f7fe ff3b 	bl	8009e60 <memcpy>
 800afea:	4621      	mov	r1, r4
 800afec:	9801      	ldr	r0, [sp, #4]
 800afee:	f000 fbf3 	bl	800b7d8 <_Bfree>
 800aff2:	464c      	mov	r4, r9
 800aff4:	6923      	ldr	r3, [r4, #16]
 800aff6:	1c5a      	adds	r2, r3, #1
 800aff8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800affc:	6122      	str	r2, [r4, #16]
 800affe:	2201      	movs	r2, #1
 800b000:	615a      	str	r2, [r3, #20]
 800b002:	e7be      	b.n	800af82 <__gethex+0x362>
 800b004:	6922      	ldr	r2, [r4, #16]
 800b006:	455a      	cmp	r2, fp
 800b008:	dd0b      	ble.n	800b022 <__gethex+0x402>
 800b00a:	2101      	movs	r1, #1
 800b00c:	4620      	mov	r0, r4
 800b00e:	f7ff fd9f 	bl	800ab50 <rshift>
 800b012:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b016:	3701      	adds	r7, #1
 800b018:	42bb      	cmp	r3, r7
 800b01a:	f6ff aee0 	blt.w	800adde <__gethex+0x1be>
 800b01e:	2501      	movs	r5, #1
 800b020:	e7c2      	b.n	800afa8 <__gethex+0x388>
 800b022:	f016 061f 	ands.w	r6, r6, #31
 800b026:	d0fa      	beq.n	800b01e <__gethex+0x3fe>
 800b028:	4453      	add	r3, sl
 800b02a:	f1c6 0620 	rsb	r6, r6, #32
 800b02e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b032:	f000 fc83 	bl	800b93c <__hi0bits>
 800b036:	42b0      	cmp	r0, r6
 800b038:	dbe7      	blt.n	800b00a <__gethex+0x3ea>
 800b03a:	e7f0      	b.n	800b01e <__gethex+0x3fe>
 800b03c:	0800ce07 	.word	0x0800ce07

0800b040 <L_shift>:
 800b040:	f1c2 0208 	rsb	r2, r2, #8
 800b044:	0092      	lsls	r2, r2, #2
 800b046:	b570      	push	{r4, r5, r6, lr}
 800b048:	f1c2 0620 	rsb	r6, r2, #32
 800b04c:	6843      	ldr	r3, [r0, #4]
 800b04e:	6804      	ldr	r4, [r0, #0]
 800b050:	fa03 f506 	lsl.w	r5, r3, r6
 800b054:	432c      	orrs	r4, r5
 800b056:	40d3      	lsrs	r3, r2
 800b058:	6004      	str	r4, [r0, #0]
 800b05a:	f840 3f04 	str.w	r3, [r0, #4]!
 800b05e:	4288      	cmp	r0, r1
 800b060:	d3f4      	bcc.n	800b04c <L_shift+0xc>
 800b062:	bd70      	pop	{r4, r5, r6, pc}

0800b064 <__match>:
 800b064:	b530      	push	{r4, r5, lr}
 800b066:	6803      	ldr	r3, [r0, #0]
 800b068:	3301      	adds	r3, #1
 800b06a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b06e:	b914      	cbnz	r4, 800b076 <__match+0x12>
 800b070:	6003      	str	r3, [r0, #0]
 800b072:	2001      	movs	r0, #1
 800b074:	bd30      	pop	{r4, r5, pc}
 800b076:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b07a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b07e:	2d19      	cmp	r5, #25
 800b080:	bf98      	it	ls
 800b082:	3220      	addls	r2, #32
 800b084:	42a2      	cmp	r2, r4
 800b086:	d0f0      	beq.n	800b06a <__match+0x6>
 800b088:	2000      	movs	r0, #0
 800b08a:	e7f3      	b.n	800b074 <__match+0x10>

0800b08c <__hexnan>:
 800b08c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b090:	680b      	ldr	r3, [r1, #0]
 800b092:	6801      	ldr	r1, [r0, #0]
 800b094:	115e      	asrs	r6, r3, #5
 800b096:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b09a:	f013 031f 	ands.w	r3, r3, #31
 800b09e:	b087      	sub	sp, #28
 800b0a0:	bf18      	it	ne
 800b0a2:	3604      	addne	r6, #4
 800b0a4:	2500      	movs	r5, #0
 800b0a6:	1f37      	subs	r7, r6, #4
 800b0a8:	4682      	mov	sl, r0
 800b0aa:	4690      	mov	r8, r2
 800b0ac:	9301      	str	r3, [sp, #4]
 800b0ae:	f846 5c04 	str.w	r5, [r6, #-4]
 800b0b2:	46b9      	mov	r9, r7
 800b0b4:	463c      	mov	r4, r7
 800b0b6:	9502      	str	r5, [sp, #8]
 800b0b8:	46ab      	mov	fp, r5
 800b0ba:	784a      	ldrb	r2, [r1, #1]
 800b0bc:	1c4b      	adds	r3, r1, #1
 800b0be:	9303      	str	r3, [sp, #12]
 800b0c0:	b342      	cbz	r2, 800b114 <__hexnan+0x88>
 800b0c2:	4610      	mov	r0, r2
 800b0c4:	9105      	str	r1, [sp, #20]
 800b0c6:	9204      	str	r2, [sp, #16]
 800b0c8:	f7ff fd94 	bl	800abf4 <__hexdig_fun>
 800b0cc:	2800      	cmp	r0, #0
 800b0ce:	d151      	bne.n	800b174 <__hexnan+0xe8>
 800b0d0:	9a04      	ldr	r2, [sp, #16]
 800b0d2:	9905      	ldr	r1, [sp, #20]
 800b0d4:	2a20      	cmp	r2, #32
 800b0d6:	d818      	bhi.n	800b10a <__hexnan+0x7e>
 800b0d8:	9b02      	ldr	r3, [sp, #8]
 800b0da:	459b      	cmp	fp, r3
 800b0dc:	dd13      	ble.n	800b106 <__hexnan+0x7a>
 800b0de:	454c      	cmp	r4, r9
 800b0e0:	d206      	bcs.n	800b0f0 <__hexnan+0x64>
 800b0e2:	2d07      	cmp	r5, #7
 800b0e4:	dc04      	bgt.n	800b0f0 <__hexnan+0x64>
 800b0e6:	462a      	mov	r2, r5
 800b0e8:	4649      	mov	r1, r9
 800b0ea:	4620      	mov	r0, r4
 800b0ec:	f7ff ffa8 	bl	800b040 <L_shift>
 800b0f0:	4544      	cmp	r4, r8
 800b0f2:	d952      	bls.n	800b19a <__hexnan+0x10e>
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	f1a4 0904 	sub.w	r9, r4, #4
 800b0fa:	f844 3c04 	str.w	r3, [r4, #-4]
 800b0fe:	f8cd b008 	str.w	fp, [sp, #8]
 800b102:	464c      	mov	r4, r9
 800b104:	461d      	mov	r5, r3
 800b106:	9903      	ldr	r1, [sp, #12]
 800b108:	e7d7      	b.n	800b0ba <__hexnan+0x2e>
 800b10a:	2a29      	cmp	r2, #41	@ 0x29
 800b10c:	d157      	bne.n	800b1be <__hexnan+0x132>
 800b10e:	3102      	adds	r1, #2
 800b110:	f8ca 1000 	str.w	r1, [sl]
 800b114:	f1bb 0f00 	cmp.w	fp, #0
 800b118:	d051      	beq.n	800b1be <__hexnan+0x132>
 800b11a:	454c      	cmp	r4, r9
 800b11c:	d206      	bcs.n	800b12c <__hexnan+0xa0>
 800b11e:	2d07      	cmp	r5, #7
 800b120:	dc04      	bgt.n	800b12c <__hexnan+0xa0>
 800b122:	462a      	mov	r2, r5
 800b124:	4649      	mov	r1, r9
 800b126:	4620      	mov	r0, r4
 800b128:	f7ff ff8a 	bl	800b040 <L_shift>
 800b12c:	4544      	cmp	r4, r8
 800b12e:	d936      	bls.n	800b19e <__hexnan+0x112>
 800b130:	f1a8 0204 	sub.w	r2, r8, #4
 800b134:	4623      	mov	r3, r4
 800b136:	f853 1b04 	ldr.w	r1, [r3], #4
 800b13a:	f842 1f04 	str.w	r1, [r2, #4]!
 800b13e:	429f      	cmp	r7, r3
 800b140:	d2f9      	bcs.n	800b136 <__hexnan+0xaa>
 800b142:	1b3b      	subs	r3, r7, r4
 800b144:	f023 0303 	bic.w	r3, r3, #3
 800b148:	3304      	adds	r3, #4
 800b14a:	3401      	adds	r4, #1
 800b14c:	3e03      	subs	r6, #3
 800b14e:	42b4      	cmp	r4, r6
 800b150:	bf88      	it	hi
 800b152:	2304      	movhi	r3, #4
 800b154:	4443      	add	r3, r8
 800b156:	2200      	movs	r2, #0
 800b158:	f843 2b04 	str.w	r2, [r3], #4
 800b15c:	429f      	cmp	r7, r3
 800b15e:	d2fb      	bcs.n	800b158 <__hexnan+0xcc>
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	b91b      	cbnz	r3, 800b16c <__hexnan+0xe0>
 800b164:	4547      	cmp	r7, r8
 800b166:	d128      	bne.n	800b1ba <__hexnan+0x12e>
 800b168:	2301      	movs	r3, #1
 800b16a:	603b      	str	r3, [r7, #0]
 800b16c:	2005      	movs	r0, #5
 800b16e:	b007      	add	sp, #28
 800b170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b174:	3501      	adds	r5, #1
 800b176:	2d08      	cmp	r5, #8
 800b178:	f10b 0b01 	add.w	fp, fp, #1
 800b17c:	dd06      	ble.n	800b18c <__hexnan+0x100>
 800b17e:	4544      	cmp	r4, r8
 800b180:	d9c1      	bls.n	800b106 <__hexnan+0x7a>
 800b182:	2300      	movs	r3, #0
 800b184:	f844 3c04 	str.w	r3, [r4, #-4]
 800b188:	2501      	movs	r5, #1
 800b18a:	3c04      	subs	r4, #4
 800b18c:	6822      	ldr	r2, [r4, #0]
 800b18e:	f000 000f 	and.w	r0, r0, #15
 800b192:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b196:	6020      	str	r0, [r4, #0]
 800b198:	e7b5      	b.n	800b106 <__hexnan+0x7a>
 800b19a:	2508      	movs	r5, #8
 800b19c:	e7b3      	b.n	800b106 <__hexnan+0x7a>
 800b19e:	9b01      	ldr	r3, [sp, #4]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d0dd      	beq.n	800b160 <__hexnan+0xd4>
 800b1a4:	f1c3 0320 	rsb	r3, r3, #32
 800b1a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b1ac:	40da      	lsrs	r2, r3
 800b1ae:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b1b2:	4013      	ands	r3, r2
 800b1b4:	f846 3c04 	str.w	r3, [r6, #-4]
 800b1b8:	e7d2      	b.n	800b160 <__hexnan+0xd4>
 800b1ba:	3f04      	subs	r7, #4
 800b1bc:	e7d0      	b.n	800b160 <__hexnan+0xd4>
 800b1be:	2004      	movs	r0, #4
 800b1c0:	e7d5      	b.n	800b16e <__hexnan+0xe2>

0800b1c2 <__ssputs_r>:
 800b1c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1c6:	688e      	ldr	r6, [r1, #8]
 800b1c8:	461f      	mov	r7, r3
 800b1ca:	42be      	cmp	r6, r7
 800b1cc:	680b      	ldr	r3, [r1, #0]
 800b1ce:	4682      	mov	sl, r0
 800b1d0:	460c      	mov	r4, r1
 800b1d2:	4690      	mov	r8, r2
 800b1d4:	d82d      	bhi.n	800b232 <__ssputs_r+0x70>
 800b1d6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b1da:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b1de:	d026      	beq.n	800b22e <__ssputs_r+0x6c>
 800b1e0:	6965      	ldr	r5, [r4, #20]
 800b1e2:	6909      	ldr	r1, [r1, #16]
 800b1e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b1e8:	eba3 0901 	sub.w	r9, r3, r1
 800b1ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b1f0:	1c7b      	adds	r3, r7, #1
 800b1f2:	444b      	add	r3, r9
 800b1f4:	106d      	asrs	r5, r5, #1
 800b1f6:	429d      	cmp	r5, r3
 800b1f8:	bf38      	it	cc
 800b1fa:	461d      	movcc	r5, r3
 800b1fc:	0553      	lsls	r3, r2, #21
 800b1fe:	d527      	bpl.n	800b250 <__ssputs_r+0x8e>
 800b200:	4629      	mov	r1, r5
 800b202:	f000 f95f 	bl	800b4c4 <_malloc_r>
 800b206:	4606      	mov	r6, r0
 800b208:	b360      	cbz	r0, 800b264 <__ssputs_r+0xa2>
 800b20a:	6921      	ldr	r1, [r4, #16]
 800b20c:	464a      	mov	r2, r9
 800b20e:	f7fe fe27 	bl	8009e60 <memcpy>
 800b212:	89a3      	ldrh	r3, [r4, #12]
 800b214:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b218:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b21c:	81a3      	strh	r3, [r4, #12]
 800b21e:	6126      	str	r6, [r4, #16]
 800b220:	6165      	str	r5, [r4, #20]
 800b222:	444e      	add	r6, r9
 800b224:	eba5 0509 	sub.w	r5, r5, r9
 800b228:	6026      	str	r6, [r4, #0]
 800b22a:	60a5      	str	r5, [r4, #8]
 800b22c:	463e      	mov	r6, r7
 800b22e:	42be      	cmp	r6, r7
 800b230:	d900      	bls.n	800b234 <__ssputs_r+0x72>
 800b232:	463e      	mov	r6, r7
 800b234:	6820      	ldr	r0, [r4, #0]
 800b236:	4632      	mov	r2, r6
 800b238:	4641      	mov	r1, r8
 800b23a:	f000 ffb5 	bl	800c1a8 <memmove>
 800b23e:	68a3      	ldr	r3, [r4, #8]
 800b240:	1b9b      	subs	r3, r3, r6
 800b242:	60a3      	str	r3, [r4, #8]
 800b244:	6823      	ldr	r3, [r4, #0]
 800b246:	4433      	add	r3, r6
 800b248:	6023      	str	r3, [r4, #0]
 800b24a:	2000      	movs	r0, #0
 800b24c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b250:	462a      	mov	r2, r5
 800b252:	f000 ff6e 	bl	800c132 <_realloc_r>
 800b256:	4606      	mov	r6, r0
 800b258:	2800      	cmp	r0, #0
 800b25a:	d1e0      	bne.n	800b21e <__ssputs_r+0x5c>
 800b25c:	6921      	ldr	r1, [r4, #16]
 800b25e:	4650      	mov	r0, sl
 800b260:	f001 f844 	bl	800c2ec <_free_r>
 800b264:	230c      	movs	r3, #12
 800b266:	f8ca 3000 	str.w	r3, [sl]
 800b26a:	89a3      	ldrh	r3, [r4, #12]
 800b26c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b270:	81a3      	strh	r3, [r4, #12]
 800b272:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b276:	e7e9      	b.n	800b24c <__ssputs_r+0x8a>

0800b278 <_svfiprintf_r>:
 800b278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b27c:	4698      	mov	r8, r3
 800b27e:	898b      	ldrh	r3, [r1, #12]
 800b280:	061b      	lsls	r3, r3, #24
 800b282:	b09d      	sub	sp, #116	@ 0x74
 800b284:	4607      	mov	r7, r0
 800b286:	460d      	mov	r5, r1
 800b288:	4614      	mov	r4, r2
 800b28a:	d510      	bpl.n	800b2ae <_svfiprintf_r+0x36>
 800b28c:	690b      	ldr	r3, [r1, #16]
 800b28e:	b973      	cbnz	r3, 800b2ae <_svfiprintf_r+0x36>
 800b290:	2140      	movs	r1, #64	@ 0x40
 800b292:	f000 f917 	bl	800b4c4 <_malloc_r>
 800b296:	6028      	str	r0, [r5, #0]
 800b298:	6128      	str	r0, [r5, #16]
 800b29a:	b930      	cbnz	r0, 800b2aa <_svfiprintf_r+0x32>
 800b29c:	230c      	movs	r3, #12
 800b29e:	603b      	str	r3, [r7, #0]
 800b2a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b2a4:	b01d      	add	sp, #116	@ 0x74
 800b2a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2aa:	2340      	movs	r3, #64	@ 0x40
 800b2ac:	616b      	str	r3, [r5, #20]
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	9309      	str	r3, [sp, #36]	@ 0x24
 800b2b2:	2320      	movs	r3, #32
 800b2b4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b2b8:	f8cd 800c 	str.w	r8, [sp, #12]
 800b2bc:	2330      	movs	r3, #48	@ 0x30
 800b2be:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b45c <_svfiprintf_r+0x1e4>
 800b2c2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b2c6:	f04f 0901 	mov.w	r9, #1
 800b2ca:	4623      	mov	r3, r4
 800b2cc:	469a      	mov	sl, r3
 800b2ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b2d2:	b10a      	cbz	r2, 800b2d8 <_svfiprintf_r+0x60>
 800b2d4:	2a25      	cmp	r2, #37	@ 0x25
 800b2d6:	d1f9      	bne.n	800b2cc <_svfiprintf_r+0x54>
 800b2d8:	ebba 0b04 	subs.w	fp, sl, r4
 800b2dc:	d00b      	beq.n	800b2f6 <_svfiprintf_r+0x7e>
 800b2de:	465b      	mov	r3, fp
 800b2e0:	4622      	mov	r2, r4
 800b2e2:	4629      	mov	r1, r5
 800b2e4:	4638      	mov	r0, r7
 800b2e6:	f7ff ff6c 	bl	800b1c2 <__ssputs_r>
 800b2ea:	3001      	adds	r0, #1
 800b2ec:	f000 80a7 	beq.w	800b43e <_svfiprintf_r+0x1c6>
 800b2f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b2f2:	445a      	add	r2, fp
 800b2f4:	9209      	str	r2, [sp, #36]	@ 0x24
 800b2f6:	f89a 3000 	ldrb.w	r3, [sl]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	f000 809f 	beq.w	800b43e <_svfiprintf_r+0x1c6>
 800b300:	2300      	movs	r3, #0
 800b302:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b306:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b30a:	f10a 0a01 	add.w	sl, sl, #1
 800b30e:	9304      	str	r3, [sp, #16]
 800b310:	9307      	str	r3, [sp, #28]
 800b312:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b316:	931a      	str	r3, [sp, #104]	@ 0x68
 800b318:	4654      	mov	r4, sl
 800b31a:	2205      	movs	r2, #5
 800b31c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b320:	484e      	ldr	r0, [pc, #312]	@ (800b45c <_svfiprintf_r+0x1e4>)
 800b322:	f7f4 ff55 	bl	80001d0 <memchr>
 800b326:	9a04      	ldr	r2, [sp, #16]
 800b328:	b9d8      	cbnz	r0, 800b362 <_svfiprintf_r+0xea>
 800b32a:	06d0      	lsls	r0, r2, #27
 800b32c:	bf44      	itt	mi
 800b32e:	2320      	movmi	r3, #32
 800b330:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b334:	0711      	lsls	r1, r2, #28
 800b336:	bf44      	itt	mi
 800b338:	232b      	movmi	r3, #43	@ 0x2b
 800b33a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b33e:	f89a 3000 	ldrb.w	r3, [sl]
 800b342:	2b2a      	cmp	r3, #42	@ 0x2a
 800b344:	d015      	beq.n	800b372 <_svfiprintf_r+0xfa>
 800b346:	9a07      	ldr	r2, [sp, #28]
 800b348:	4654      	mov	r4, sl
 800b34a:	2000      	movs	r0, #0
 800b34c:	f04f 0c0a 	mov.w	ip, #10
 800b350:	4621      	mov	r1, r4
 800b352:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b356:	3b30      	subs	r3, #48	@ 0x30
 800b358:	2b09      	cmp	r3, #9
 800b35a:	d94b      	bls.n	800b3f4 <_svfiprintf_r+0x17c>
 800b35c:	b1b0      	cbz	r0, 800b38c <_svfiprintf_r+0x114>
 800b35e:	9207      	str	r2, [sp, #28]
 800b360:	e014      	b.n	800b38c <_svfiprintf_r+0x114>
 800b362:	eba0 0308 	sub.w	r3, r0, r8
 800b366:	fa09 f303 	lsl.w	r3, r9, r3
 800b36a:	4313      	orrs	r3, r2
 800b36c:	9304      	str	r3, [sp, #16]
 800b36e:	46a2      	mov	sl, r4
 800b370:	e7d2      	b.n	800b318 <_svfiprintf_r+0xa0>
 800b372:	9b03      	ldr	r3, [sp, #12]
 800b374:	1d19      	adds	r1, r3, #4
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	9103      	str	r1, [sp, #12]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	bfbb      	ittet	lt
 800b37e:	425b      	neglt	r3, r3
 800b380:	f042 0202 	orrlt.w	r2, r2, #2
 800b384:	9307      	strge	r3, [sp, #28]
 800b386:	9307      	strlt	r3, [sp, #28]
 800b388:	bfb8      	it	lt
 800b38a:	9204      	strlt	r2, [sp, #16]
 800b38c:	7823      	ldrb	r3, [r4, #0]
 800b38e:	2b2e      	cmp	r3, #46	@ 0x2e
 800b390:	d10a      	bne.n	800b3a8 <_svfiprintf_r+0x130>
 800b392:	7863      	ldrb	r3, [r4, #1]
 800b394:	2b2a      	cmp	r3, #42	@ 0x2a
 800b396:	d132      	bne.n	800b3fe <_svfiprintf_r+0x186>
 800b398:	9b03      	ldr	r3, [sp, #12]
 800b39a:	1d1a      	adds	r2, r3, #4
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	9203      	str	r2, [sp, #12]
 800b3a0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b3a4:	3402      	adds	r4, #2
 800b3a6:	9305      	str	r3, [sp, #20]
 800b3a8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b46c <_svfiprintf_r+0x1f4>
 800b3ac:	7821      	ldrb	r1, [r4, #0]
 800b3ae:	2203      	movs	r2, #3
 800b3b0:	4650      	mov	r0, sl
 800b3b2:	f7f4 ff0d 	bl	80001d0 <memchr>
 800b3b6:	b138      	cbz	r0, 800b3c8 <_svfiprintf_r+0x150>
 800b3b8:	9b04      	ldr	r3, [sp, #16]
 800b3ba:	eba0 000a 	sub.w	r0, r0, sl
 800b3be:	2240      	movs	r2, #64	@ 0x40
 800b3c0:	4082      	lsls	r2, r0
 800b3c2:	4313      	orrs	r3, r2
 800b3c4:	3401      	adds	r4, #1
 800b3c6:	9304      	str	r3, [sp, #16]
 800b3c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3cc:	4824      	ldr	r0, [pc, #144]	@ (800b460 <_svfiprintf_r+0x1e8>)
 800b3ce:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b3d2:	2206      	movs	r2, #6
 800b3d4:	f7f4 fefc 	bl	80001d0 <memchr>
 800b3d8:	2800      	cmp	r0, #0
 800b3da:	d036      	beq.n	800b44a <_svfiprintf_r+0x1d2>
 800b3dc:	4b21      	ldr	r3, [pc, #132]	@ (800b464 <_svfiprintf_r+0x1ec>)
 800b3de:	bb1b      	cbnz	r3, 800b428 <_svfiprintf_r+0x1b0>
 800b3e0:	9b03      	ldr	r3, [sp, #12]
 800b3e2:	3307      	adds	r3, #7
 800b3e4:	f023 0307 	bic.w	r3, r3, #7
 800b3e8:	3308      	adds	r3, #8
 800b3ea:	9303      	str	r3, [sp, #12]
 800b3ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3ee:	4433      	add	r3, r6
 800b3f0:	9309      	str	r3, [sp, #36]	@ 0x24
 800b3f2:	e76a      	b.n	800b2ca <_svfiprintf_r+0x52>
 800b3f4:	fb0c 3202 	mla	r2, ip, r2, r3
 800b3f8:	460c      	mov	r4, r1
 800b3fa:	2001      	movs	r0, #1
 800b3fc:	e7a8      	b.n	800b350 <_svfiprintf_r+0xd8>
 800b3fe:	2300      	movs	r3, #0
 800b400:	3401      	adds	r4, #1
 800b402:	9305      	str	r3, [sp, #20]
 800b404:	4619      	mov	r1, r3
 800b406:	f04f 0c0a 	mov.w	ip, #10
 800b40a:	4620      	mov	r0, r4
 800b40c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b410:	3a30      	subs	r2, #48	@ 0x30
 800b412:	2a09      	cmp	r2, #9
 800b414:	d903      	bls.n	800b41e <_svfiprintf_r+0x1a6>
 800b416:	2b00      	cmp	r3, #0
 800b418:	d0c6      	beq.n	800b3a8 <_svfiprintf_r+0x130>
 800b41a:	9105      	str	r1, [sp, #20]
 800b41c:	e7c4      	b.n	800b3a8 <_svfiprintf_r+0x130>
 800b41e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b422:	4604      	mov	r4, r0
 800b424:	2301      	movs	r3, #1
 800b426:	e7f0      	b.n	800b40a <_svfiprintf_r+0x192>
 800b428:	ab03      	add	r3, sp, #12
 800b42a:	9300      	str	r3, [sp, #0]
 800b42c:	462a      	mov	r2, r5
 800b42e:	4b0e      	ldr	r3, [pc, #56]	@ (800b468 <_svfiprintf_r+0x1f0>)
 800b430:	a904      	add	r1, sp, #16
 800b432:	4638      	mov	r0, r7
 800b434:	f7fc ff9a 	bl	800836c <_printf_float>
 800b438:	1c42      	adds	r2, r0, #1
 800b43a:	4606      	mov	r6, r0
 800b43c:	d1d6      	bne.n	800b3ec <_svfiprintf_r+0x174>
 800b43e:	89ab      	ldrh	r3, [r5, #12]
 800b440:	065b      	lsls	r3, r3, #25
 800b442:	f53f af2d 	bmi.w	800b2a0 <_svfiprintf_r+0x28>
 800b446:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b448:	e72c      	b.n	800b2a4 <_svfiprintf_r+0x2c>
 800b44a:	ab03      	add	r3, sp, #12
 800b44c:	9300      	str	r3, [sp, #0]
 800b44e:	462a      	mov	r2, r5
 800b450:	4b05      	ldr	r3, [pc, #20]	@ (800b468 <_svfiprintf_r+0x1f0>)
 800b452:	a904      	add	r1, sp, #16
 800b454:	4638      	mov	r0, r7
 800b456:	f7fd fa21 	bl	800889c <_printf_i>
 800b45a:	e7ed      	b.n	800b438 <_svfiprintf_r+0x1c0>
 800b45c:	0800ce78 	.word	0x0800ce78
 800b460:	0800ce82 	.word	0x0800ce82
 800b464:	0800836d 	.word	0x0800836d
 800b468:	0800b1c3 	.word	0x0800b1c3
 800b46c:	0800ce7e 	.word	0x0800ce7e

0800b470 <malloc>:
 800b470:	4b02      	ldr	r3, [pc, #8]	@ (800b47c <malloc+0xc>)
 800b472:	4601      	mov	r1, r0
 800b474:	6818      	ldr	r0, [r3, #0]
 800b476:	f000 b825 	b.w	800b4c4 <_malloc_r>
 800b47a:	bf00      	nop
 800b47c:	20000198 	.word	0x20000198

0800b480 <sbrk_aligned>:
 800b480:	b570      	push	{r4, r5, r6, lr}
 800b482:	4e0f      	ldr	r6, [pc, #60]	@ (800b4c0 <sbrk_aligned+0x40>)
 800b484:	460c      	mov	r4, r1
 800b486:	6831      	ldr	r1, [r6, #0]
 800b488:	4605      	mov	r5, r0
 800b48a:	b911      	cbnz	r1, 800b492 <sbrk_aligned+0x12>
 800b48c:	f000 feca 	bl	800c224 <_sbrk_r>
 800b490:	6030      	str	r0, [r6, #0]
 800b492:	4621      	mov	r1, r4
 800b494:	4628      	mov	r0, r5
 800b496:	f000 fec5 	bl	800c224 <_sbrk_r>
 800b49a:	1c43      	adds	r3, r0, #1
 800b49c:	d103      	bne.n	800b4a6 <sbrk_aligned+0x26>
 800b49e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800b4a2:	4620      	mov	r0, r4
 800b4a4:	bd70      	pop	{r4, r5, r6, pc}
 800b4a6:	1cc4      	adds	r4, r0, #3
 800b4a8:	f024 0403 	bic.w	r4, r4, #3
 800b4ac:	42a0      	cmp	r0, r4
 800b4ae:	d0f8      	beq.n	800b4a2 <sbrk_aligned+0x22>
 800b4b0:	1a21      	subs	r1, r4, r0
 800b4b2:	4628      	mov	r0, r5
 800b4b4:	f000 feb6 	bl	800c224 <_sbrk_r>
 800b4b8:	3001      	adds	r0, #1
 800b4ba:	d1f2      	bne.n	800b4a2 <sbrk_aligned+0x22>
 800b4bc:	e7ef      	b.n	800b49e <sbrk_aligned+0x1e>
 800b4be:	bf00      	nop
 800b4c0:	200006f0 	.word	0x200006f0

0800b4c4 <_malloc_r>:
 800b4c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4c8:	1ccd      	adds	r5, r1, #3
 800b4ca:	f025 0503 	bic.w	r5, r5, #3
 800b4ce:	3508      	adds	r5, #8
 800b4d0:	2d0c      	cmp	r5, #12
 800b4d2:	bf38      	it	cc
 800b4d4:	250c      	movcc	r5, #12
 800b4d6:	2d00      	cmp	r5, #0
 800b4d8:	4606      	mov	r6, r0
 800b4da:	db01      	blt.n	800b4e0 <_malloc_r+0x1c>
 800b4dc:	42a9      	cmp	r1, r5
 800b4de:	d904      	bls.n	800b4ea <_malloc_r+0x26>
 800b4e0:	230c      	movs	r3, #12
 800b4e2:	6033      	str	r3, [r6, #0]
 800b4e4:	2000      	movs	r0, #0
 800b4e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b5c0 <_malloc_r+0xfc>
 800b4ee:	f000 f927 	bl	800b740 <__malloc_lock>
 800b4f2:	f8d8 3000 	ldr.w	r3, [r8]
 800b4f6:	461c      	mov	r4, r3
 800b4f8:	bb44      	cbnz	r4, 800b54c <_malloc_r+0x88>
 800b4fa:	4629      	mov	r1, r5
 800b4fc:	4630      	mov	r0, r6
 800b4fe:	f7ff ffbf 	bl	800b480 <sbrk_aligned>
 800b502:	1c43      	adds	r3, r0, #1
 800b504:	4604      	mov	r4, r0
 800b506:	d158      	bne.n	800b5ba <_malloc_r+0xf6>
 800b508:	f8d8 4000 	ldr.w	r4, [r8]
 800b50c:	4627      	mov	r7, r4
 800b50e:	2f00      	cmp	r7, #0
 800b510:	d143      	bne.n	800b59a <_malloc_r+0xd6>
 800b512:	2c00      	cmp	r4, #0
 800b514:	d04b      	beq.n	800b5ae <_malloc_r+0xea>
 800b516:	6823      	ldr	r3, [r4, #0]
 800b518:	4639      	mov	r1, r7
 800b51a:	4630      	mov	r0, r6
 800b51c:	eb04 0903 	add.w	r9, r4, r3
 800b520:	f000 fe80 	bl	800c224 <_sbrk_r>
 800b524:	4581      	cmp	r9, r0
 800b526:	d142      	bne.n	800b5ae <_malloc_r+0xea>
 800b528:	6821      	ldr	r1, [r4, #0]
 800b52a:	1a6d      	subs	r5, r5, r1
 800b52c:	4629      	mov	r1, r5
 800b52e:	4630      	mov	r0, r6
 800b530:	f7ff ffa6 	bl	800b480 <sbrk_aligned>
 800b534:	3001      	adds	r0, #1
 800b536:	d03a      	beq.n	800b5ae <_malloc_r+0xea>
 800b538:	6823      	ldr	r3, [r4, #0]
 800b53a:	442b      	add	r3, r5
 800b53c:	6023      	str	r3, [r4, #0]
 800b53e:	f8d8 3000 	ldr.w	r3, [r8]
 800b542:	685a      	ldr	r2, [r3, #4]
 800b544:	bb62      	cbnz	r2, 800b5a0 <_malloc_r+0xdc>
 800b546:	f8c8 7000 	str.w	r7, [r8]
 800b54a:	e00f      	b.n	800b56c <_malloc_r+0xa8>
 800b54c:	6822      	ldr	r2, [r4, #0]
 800b54e:	1b52      	subs	r2, r2, r5
 800b550:	d420      	bmi.n	800b594 <_malloc_r+0xd0>
 800b552:	2a0b      	cmp	r2, #11
 800b554:	d917      	bls.n	800b586 <_malloc_r+0xc2>
 800b556:	1961      	adds	r1, r4, r5
 800b558:	42a3      	cmp	r3, r4
 800b55a:	6025      	str	r5, [r4, #0]
 800b55c:	bf18      	it	ne
 800b55e:	6059      	strne	r1, [r3, #4]
 800b560:	6863      	ldr	r3, [r4, #4]
 800b562:	bf08      	it	eq
 800b564:	f8c8 1000 	streq.w	r1, [r8]
 800b568:	5162      	str	r2, [r4, r5]
 800b56a:	604b      	str	r3, [r1, #4]
 800b56c:	4630      	mov	r0, r6
 800b56e:	f000 f8ed 	bl	800b74c <__malloc_unlock>
 800b572:	f104 000b 	add.w	r0, r4, #11
 800b576:	1d23      	adds	r3, r4, #4
 800b578:	f020 0007 	bic.w	r0, r0, #7
 800b57c:	1ac2      	subs	r2, r0, r3
 800b57e:	bf1c      	itt	ne
 800b580:	1a1b      	subne	r3, r3, r0
 800b582:	50a3      	strne	r3, [r4, r2]
 800b584:	e7af      	b.n	800b4e6 <_malloc_r+0x22>
 800b586:	6862      	ldr	r2, [r4, #4]
 800b588:	42a3      	cmp	r3, r4
 800b58a:	bf0c      	ite	eq
 800b58c:	f8c8 2000 	streq.w	r2, [r8]
 800b590:	605a      	strne	r2, [r3, #4]
 800b592:	e7eb      	b.n	800b56c <_malloc_r+0xa8>
 800b594:	4623      	mov	r3, r4
 800b596:	6864      	ldr	r4, [r4, #4]
 800b598:	e7ae      	b.n	800b4f8 <_malloc_r+0x34>
 800b59a:	463c      	mov	r4, r7
 800b59c:	687f      	ldr	r7, [r7, #4]
 800b59e:	e7b6      	b.n	800b50e <_malloc_r+0x4a>
 800b5a0:	461a      	mov	r2, r3
 800b5a2:	685b      	ldr	r3, [r3, #4]
 800b5a4:	42a3      	cmp	r3, r4
 800b5a6:	d1fb      	bne.n	800b5a0 <_malloc_r+0xdc>
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	6053      	str	r3, [r2, #4]
 800b5ac:	e7de      	b.n	800b56c <_malloc_r+0xa8>
 800b5ae:	230c      	movs	r3, #12
 800b5b0:	6033      	str	r3, [r6, #0]
 800b5b2:	4630      	mov	r0, r6
 800b5b4:	f000 f8ca 	bl	800b74c <__malloc_unlock>
 800b5b8:	e794      	b.n	800b4e4 <_malloc_r+0x20>
 800b5ba:	6005      	str	r5, [r0, #0]
 800b5bc:	e7d6      	b.n	800b56c <_malloc_r+0xa8>
 800b5be:	bf00      	nop
 800b5c0:	200006f4 	.word	0x200006f4

0800b5c4 <__ascii_mbtowc>:
 800b5c4:	b082      	sub	sp, #8
 800b5c6:	b901      	cbnz	r1, 800b5ca <__ascii_mbtowc+0x6>
 800b5c8:	a901      	add	r1, sp, #4
 800b5ca:	b142      	cbz	r2, 800b5de <__ascii_mbtowc+0x1a>
 800b5cc:	b14b      	cbz	r3, 800b5e2 <__ascii_mbtowc+0x1e>
 800b5ce:	7813      	ldrb	r3, [r2, #0]
 800b5d0:	600b      	str	r3, [r1, #0]
 800b5d2:	7812      	ldrb	r2, [r2, #0]
 800b5d4:	1e10      	subs	r0, r2, #0
 800b5d6:	bf18      	it	ne
 800b5d8:	2001      	movne	r0, #1
 800b5da:	b002      	add	sp, #8
 800b5dc:	4770      	bx	lr
 800b5de:	4610      	mov	r0, r2
 800b5e0:	e7fb      	b.n	800b5da <__ascii_mbtowc+0x16>
 800b5e2:	f06f 0001 	mvn.w	r0, #1
 800b5e6:	e7f8      	b.n	800b5da <__ascii_mbtowc+0x16>

0800b5e8 <__sflush_r>:
 800b5e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b5ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5f0:	0716      	lsls	r6, r2, #28
 800b5f2:	4605      	mov	r5, r0
 800b5f4:	460c      	mov	r4, r1
 800b5f6:	d454      	bmi.n	800b6a2 <__sflush_r+0xba>
 800b5f8:	684b      	ldr	r3, [r1, #4]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	dc02      	bgt.n	800b604 <__sflush_r+0x1c>
 800b5fe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b600:	2b00      	cmp	r3, #0
 800b602:	dd48      	ble.n	800b696 <__sflush_r+0xae>
 800b604:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b606:	2e00      	cmp	r6, #0
 800b608:	d045      	beq.n	800b696 <__sflush_r+0xae>
 800b60a:	2300      	movs	r3, #0
 800b60c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b610:	682f      	ldr	r7, [r5, #0]
 800b612:	6a21      	ldr	r1, [r4, #32]
 800b614:	602b      	str	r3, [r5, #0]
 800b616:	d030      	beq.n	800b67a <__sflush_r+0x92>
 800b618:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b61a:	89a3      	ldrh	r3, [r4, #12]
 800b61c:	0759      	lsls	r1, r3, #29
 800b61e:	d505      	bpl.n	800b62c <__sflush_r+0x44>
 800b620:	6863      	ldr	r3, [r4, #4]
 800b622:	1ad2      	subs	r2, r2, r3
 800b624:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b626:	b10b      	cbz	r3, 800b62c <__sflush_r+0x44>
 800b628:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b62a:	1ad2      	subs	r2, r2, r3
 800b62c:	2300      	movs	r3, #0
 800b62e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b630:	6a21      	ldr	r1, [r4, #32]
 800b632:	4628      	mov	r0, r5
 800b634:	47b0      	blx	r6
 800b636:	1c43      	adds	r3, r0, #1
 800b638:	89a3      	ldrh	r3, [r4, #12]
 800b63a:	d106      	bne.n	800b64a <__sflush_r+0x62>
 800b63c:	6829      	ldr	r1, [r5, #0]
 800b63e:	291d      	cmp	r1, #29
 800b640:	d82b      	bhi.n	800b69a <__sflush_r+0xb2>
 800b642:	4a2a      	ldr	r2, [pc, #168]	@ (800b6ec <__sflush_r+0x104>)
 800b644:	40ca      	lsrs	r2, r1
 800b646:	07d6      	lsls	r6, r2, #31
 800b648:	d527      	bpl.n	800b69a <__sflush_r+0xb2>
 800b64a:	2200      	movs	r2, #0
 800b64c:	6062      	str	r2, [r4, #4]
 800b64e:	04d9      	lsls	r1, r3, #19
 800b650:	6922      	ldr	r2, [r4, #16]
 800b652:	6022      	str	r2, [r4, #0]
 800b654:	d504      	bpl.n	800b660 <__sflush_r+0x78>
 800b656:	1c42      	adds	r2, r0, #1
 800b658:	d101      	bne.n	800b65e <__sflush_r+0x76>
 800b65a:	682b      	ldr	r3, [r5, #0]
 800b65c:	b903      	cbnz	r3, 800b660 <__sflush_r+0x78>
 800b65e:	6560      	str	r0, [r4, #84]	@ 0x54
 800b660:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b662:	602f      	str	r7, [r5, #0]
 800b664:	b1b9      	cbz	r1, 800b696 <__sflush_r+0xae>
 800b666:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b66a:	4299      	cmp	r1, r3
 800b66c:	d002      	beq.n	800b674 <__sflush_r+0x8c>
 800b66e:	4628      	mov	r0, r5
 800b670:	f000 fe3c 	bl	800c2ec <_free_r>
 800b674:	2300      	movs	r3, #0
 800b676:	6363      	str	r3, [r4, #52]	@ 0x34
 800b678:	e00d      	b.n	800b696 <__sflush_r+0xae>
 800b67a:	2301      	movs	r3, #1
 800b67c:	4628      	mov	r0, r5
 800b67e:	47b0      	blx	r6
 800b680:	4602      	mov	r2, r0
 800b682:	1c50      	adds	r0, r2, #1
 800b684:	d1c9      	bne.n	800b61a <__sflush_r+0x32>
 800b686:	682b      	ldr	r3, [r5, #0]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d0c6      	beq.n	800b61a <__sflush_r+0x32>
 800b68c:	2b1d      	cmp	r3, #29
 800b68e:	d001      	beq.n	800b694 <__sflush_r+0xac>
 800b690:	2b16      	cmp	r3, #22
 800b692:	d11e      	bne.n	800b6d2 <__sflush_r+0xea>
 800b694:	602f      	str	r7, [r5, #0]
 800b696:	2000      	movs	r0, #0
 800b698:	e022      	b.n	800b6e0 <__sflush_r+0xf8>
 800b69a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b69e:	b21b      	sxth	r3, r3
 800b6a0:	e01b      	b.n	800b6da <__sflush_r+0xf2>
 800b6a2:	690f      	ldr	r7, [r1, #16]
 800b6a4:	2f00      	cmp	r7, #0
 800b6a6:	d0f6      	beq.n	800b696 <__sflush_r+0xae>
 800b6a8:	0793      	lsls	r3, r2, #30
 800b6aa:	680e      	ldr	r6, [r1, #0]
 800b6ac:	bf08      	it	eq
 800b6ae:	694b      	ldreq	r3, [r1, #20]
 800b6b0:	600f      	str	r7, [r1, #0]
 800b6b2:	bf18      	it	ne
 800b6b4:	2300      	movne	r3, #0
 800b6b6:	eba6 0807 	sub.w	r8, r6, r7
 800b6ba:	608b      	str	r3, [r1, #8]
 800b6bc:	f1b8 0f00 	cmp.w	r8, #0
 800b6c0:	dde9      	ble.n	800b696 <__sflush_r+0xae>
 800b6c2:	6a21      	ldr	r1, [r4, #32]
 800b6c4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b6c6:	4643      	mov	r3, r8
 800b6c8:	463a      	mov	r2, r7
 800b6ca:	4628      	mov	r0, r5
 800b6cc:	47b0      	blx	r6
 800b6ce:	2800      	cmp	r0, #0
 800b6d0:	dc08      	bgt.n	800b6e4 <__sflush_r+0xfc>
 800b6d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b6da:	81a3      	strh	r3, [r4, #12]
 800b6dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b6e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6e4:	4407      	add	r7, r0
 800b6e6:	eba8 0800 	sub.w	r8, r8, r0
 800b6ea:	e7e7      	b.n	800b6bc <__sflush_r+0xd4>
 800b6ec:	20400001 	.word	0x20400001

0800b6f0 <_fflush_r>:
 800b6f0:	b538      	push	{r3, r4, r5, lr}
 800b6f2:	690b      	ldr	r3, [r1, #16]
 800b6f4:	4605      	mov	r5, r0
 800b6f6:	460c      	mov	r4, r1
 800b6f8:	b913      	cbnz	r3, 800b700 <_fflush_r+0x10>
 800b6fa:	2500      	movs	r5, #0
 800b6fc:	4628      	mov	r0, r5
 800b6fe:	bd38      	pop	{r3, r4, r5, pc}
 800b700:	b118      	cbz	r0, 800b70a <_fflush_r+0x1a>
 800b702:	6a03      	ldr	r3, [r0, #32]
 800b704:	b90b      	cbnz	r3, 800b70a <_fflush_r+0x1a>
 800b706:	f7fd fca3 	bl	8009050 <__sinit>
 800b70a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d0f3      	beq.n	800b6fa <_fflush_r+0xa>
 800b712:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b714:	07d0      	lsls	r0, r2, #31
 800b716:	d404      	bmi.n	800b722 <_fflush_r+0x32>
 800b718:	0599      	lsls	r1, r3, #22
 800b71a:	d402      	bmi.n	800b722 <_fflush_r+0x32>
 800b71c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b71e:	f7fe fb98 	bl	8009e52 <__retarget_lock_acquire_recursive>
 800b722:	4628      	mov	r0, r5
 800b724:	4621      	mov	r1, r4
 800b726:	f7ff ff5f 	bl	800b5e8 <__sflush_r>
 800b72a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b72c:	07da      	lsls	r2, r3, #31
 800b72e:	4605      	mov	r5, r0
 800b730:	d4e4      	bmi.n	800b6fc <_fflush_r+0xc>
 800b732:	89a3      	ldrh	r3, [r4, #12]
 800b734:	059b      	lsls	r3, r3, #22
 800b736:	d4e1      	bmi.n	800b6fc <_fflush_r+0xc>
 800b738:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b73a:	f7fe fb8b 	bl	8009e54 <__retarget_lock_release_recursive>
 800b73e:	e7dd      	b.n	800b6fc <_fflush_r+0xc>

0800b740 <__malloc_lock>:
 800b740:	4801      	ldr	r0, [pc, #4]	@ (800b748 <__malloc_lock+0x8>)
 800b742:	f7fe bb86 	b.w	8009e52 <__retarget_lock_acquire_recursive>
 800b746:	bf00      	nop
 800b748:	200006ec 	.word	0x200006ec

0800b74c <__malloc_unlock>:
 800b74c:	4801      	ldr	r0, [pc, #4]	@ (800b754 <__malloc_unlock+0x8>)
 800b74e:	f7fe bb81 	b.w	8009e54 <__retarget_lock_release_recursive>
 800b752:	bf00      	nop
 800b754:	200006ec 	.word	0x200006ec

0800b758 <_Balloc>:
 800b758:	b570      	push	{r4, r5, r6, lr}
 800b75a:	69c6      	ldr	r6, [r0, #28]
 800b75c:	4604      	mov	r4, r0
 800b75e:	460d      	mov	r5, r1
 800b760:	b976      	cbnz	r6, 800b780 <_Balloc+0x28>
 800b762:	2010      	movs	r0, #16
 800b764:	f7ff fe84 	bl	800b470 <malloc>
 800b768:	4602      	mov	r2, r0
 800b76a:	61e0      	str	r0, [r4, #28]
 800b76c:	b920      	cbnz	r0, 800b778 <_Balloc+0x20>
 800b76e:	4b18      	ldr	r3, [pc, #96]	@ (800b7d0 <_Balloc+0x78>)
 800b770:	4818      	ldr	r0, [pc, #96]	@ (800b7d4 <_Balloc+0x7c>)
 800b772:	216b      	movs	r1, #107	@ 0x6b
 800b774:	f000 fd88 	bl	800c288 <__assert_func>
 800b778:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b77c:	6006      	str	r6, [r0, #0]
 800b77e:	60c6      	str	r6, [r0, #12]
 800b780:	69e6      	ldr	r6, [r4, #28]
 800b782:	68f3      	ldr	r3, [r6, #12]
 800b784:	b183      	cbz	r3, 800b7a8 <_Balloc+0x50>
 800b786:	69e3      	ldr	r3, [r4, #28]
 800b788:	68db      	ldr	r3, [r3, #12]
 800b78a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b78e:	b9b8      	cbnz	r0, 800b7c0 <_Balloc+0x68>
 800b790:	2101      	movs	r1, #1
 800b792:	fa01 f605 	lsl.w	r6, r1, r5
 800b796:	1d72      	adds	r2, r6, #5
 800b798:	0092      	lsls	r2, r2, #2
 800b79a:	4620      	mov	r0, r4
 800b79c:	f000 fd92 	bl	800c2c4 <_calloc_r>
 800b7a0:	b160      	cbz	r0, 800b7bc <_Balloc+0x64>
 800b7a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b7a6:	e00e      	b.n	800b7c6 <_Balloc+0x6e>
 800b7a8:	2221      	movs	r2, #33	@ 0x21
 800b7aa:	2104      	movs	r1, #4
 800b7ac:	4620      	mov	r0, r4
 800b7ae:	f000 fd89 	bl	800c2c4 <_calloc_r>
 800b7b2:	69e3      	ldr	r3, [r4, #28]
 800b7b4:	60f0      	str	r0, [r6, #12]
 800b7b6:	68db      	ldr	r3, [r3, #12]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d1e4      	bne.n	800b786 <_Balloc+0x2e>
 800b7bc:	2000      	movs	r0, #0
 800b7be:	bd70      	pop	{r4, r5, r6, pc}
 800b7c0:	6802      	ldr	r2, [r0, #0]
 800b7c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b7cc:	e7f7      	b.n	800b7be <_Balloc+0x66>
 800b7ce:	bf00      	nop
 800b7d0:	0800cd98 	.word	0x0800cd98
 800b7d4:	0800ce89 	.word	0x0800ce89

0800b7d8 <_Bfree>:
 800b7d8:	b570      	push	{r4, r5, r6, lr}
 800b7da:	69c6      	ldr	r6, [r0, #28]
 800b7dc:	4605      	mov	r5, r0
 800b7de:	460c      	mov	r4, r1
 800b7e0:	b976      	cbnz	r6, 800b800 <_Bfree+0x28>
 800b7e2:	2010      	movs	r0, #16
 800b7e4:	f7ff fe44 	bl	800b470 <malloc>
 800b7e8:	4602      	mov	r2, r0
 800b7ea:	61e8      	str	r0, [r5, #28]
 800b7ec:	b920      	cbnz	r0, 800b7f8 <_Bfree+0x20>
 800b7ee:	4b09      	ldr	r3, [pc, #36]	@ (800b814 <_Bfree+0x3c>)
 800b7f0:	4809      	ldr	r0, [pc, #36]	@ (800b818 <_Bfree+0x40>)
 800b7f2:	218f      	movs	r1, #143	@ 0x8f
 800b7f4:	f000 fd48 	bl	800c288 <__assert_func>
 800b7f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b7fc:	6006      	str	r6, [r0, #0]
 800b7fe:	60c6      	str	r6, [r0, #12]
 800b800:	b13c      	cbz	r4, 800b812 <_Bfree+0x3a>
 800b802:	69eb      	ldr	r3, [r5, #28]
 800b804:	6862      	ldr	r2, [r4, #4]
 800b806:	68db      	ldr	r3, [r3, #12]
 800b808:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b80c:	6021      	str	r1, [r4, #0]
 800b80e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b812:	bd70      	pop	{r4, r5, r6, pc}
 800b814:	0800cd98 	.word	0x0800cd98
 800b818:	0800ce89 	.word	0x0800ce89

0800b81c <__multadd>:
 800b81c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b820:	690d      	ldr	r5, [r1, #16]
 800b822:	4607      	mov	r7, r0
 800b824:	460c      	mov	r4, r1
 800b826:	461e      	mov	r6, r3
 800b828:	f101 0c14 	add.w	ip, r1, #20
 800b82c:	2000      	movs	r0, #0
 800b82e:	f8dc 3000 	ldr.w	r3, [ip]
 800b832:	b299      	uxth	r1, r3
 800b834:	fb02 6101 	mla	r1, r2, r1, r6
 800b838:	0c1e      	lsrs	r6, r3, #16
 800b83a:	0c0b      	lsrs	r3, r1, #16
 800b83c:	fb02 3306 	mla	r3, r2, r6, r3
 800b840:	b289      	uxth	r1, r1
 800b842:	3001      	adds	r0, #1
 800b844:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b848:	4285      	cmp	r5, r0
 800b84a:	f84c 1b04 	str.w	r1, [ip], #4
 800b84e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b852:	dcec      	bgt.n	800b82e <__multadd+0x12>
 800b854:	b30e      	cbz	r6, 800b89a <__multadd+0x7e>
 800b856:	68a3      	ldr	r3, [r4, #8]
 800b858:	42ab      	cmp	r3, r5
 800b85a:	dc19      	bgt.n	800b890 <__multadd+0x74>
 800b85c:	6861      	ldr	r1, [r4, #4]
 800b85e:	4638      	mov	r0, r7
 800b860:	3101      	adds	r1, #1
 800b862:	f7ff ff79 	bl	800b758 <_Balloc>
 800b866:	4680      	mov	r8, r0
 800b868:	b928      	cbnz	r0, 800b876 <__multadd+0x5a>
 800b86a:	4602      	mov	r2, r0
 800b86c:	4b0c      	ldr	r3, [pc, #48]	@ (800b8a0 <__multadd+0x84>)
 800b86e:	480d      	ldr	r0, [pc, #52]	@ (800b8a4 <__multadd+0x88>)
 800b870:	21ba      	movs	r1, #186	@ 0xba
 800b872:	f000 fd09 	bl	800c288 <__assert_func>
 800b876:	6922      	ldr	r2, [r4, #16]
 800b878:	3202      	adds	r2, #2
 800b87a:	f104 010c 	add.w	r1, r4, #12
 800b87e:	0092      	lsls	r2, r2, #2
 800b880:	300c      	adds	r0, #12
 800b882:	f7fe faed 	bl	8009e60 <memcpy>
 800b886:	4621      	mov	r1, r4
 800b888:	4638      	mov	r0, r7
 800b88a:	f7ff ffa5 	bl	800b7d8 <_Bfree>
 800b88e:	4644      	mov	r4, r8
 800b890:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b894:	3501      	adds	r5, #1
 800b896:	615e      	str	r6, [r3, #20]
 800b898:	6125      	str	r5, [r4, #16]
 800b89a:	4620      	mov	r0, r4
 800b89c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8a0:	0800ce07 	.word	0x0800ce07
 800b8a4:	0800ce89 	.word	0x0800ce89

0800b8a8 <__s2b>:
 800b8a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8ac:	460c      	mov	r4, r1
 800b8ae:	4615      	mov	r5, r2
 800b8b0:	461f      	mov	r7, r3
 800b8b2:	2209      	movs	r2, #9
 800b8b4:	3308      	adds	r3, #8
 800b8b6:	4606      	mov	r6, r0
 800b8b8:	fb93 f3f2 	sdiv	r3, r3, r2
 800b8bc:	2100      	movs	r1, #0
 800b8be:	2201      	movs	r2, #1
 800b8c0:	429a      	cmp	r2, r3
 800b8c2:	db09      	blt.n	800b8d8 <__s2b+0x30>
 800b8c4:	4630      	mov	r0, r6
 800b8c6:	f7ff ff47 	bl	800b758 <_Balloc>
 800b8ca:	b940      	cbnz	r0, 800b8de <__s2b+0x36>
 800b8cc:	4602      	mov	r2, r0
 800b8ce:	4b19      	ldr	r3, [pc, #100]	@ (800b934 <__s2b+0x8c>)
 800b8d0:	4819      	ldr	r0, [pc, #100]	@ (800b938 <__s2b+0x90>)
 800b8d2:	21d3      	movs	r1, #211	@ 0xd3
 800b8d4:	f000 fcd8 	bl	800c288 <__assert_func>
 800b8d8:	0052      	lsls	r2, r2, #1
 800b8da:	3101      	adds	r1, #1
 800b8dc:	e7f0      	b.n	800b8c0 <__s2b+0x18>
 800b8de:	9b08      	ldr	r3, [sp, #32]
 800b8e0:	6143      	str	r3, [r0, #20]
 800b8e2:	2d09      	cmp	r5, #9
 800b8e4:	f04f 0301 	mov.w	r3, #1
 800b8e8:	6103      	str	r3, [r0, #16]
 800b8ea:	dd16      	ble.n	800b91a <__s2b+0x72>
 800b8ec:	f104 0909 	add.w	r9, r4, #9
 800b8f0:	46c8      	mov	r8, r9
 800b8f2:	442c      	add	r4, r5
 800b8f4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b8f8:	4601      	mov	r1, r0
 800b8fa:	3b30      	subs	r3, #48	@ 0x30
 800b8fc:	220a      	movs	r2, #10
 800b8fe:	4630      	mov	r0, r6
 800b900:	f7ff ff8c 	bl	800b81c <__multadd>
 800b904:	45a0      	cmp	r8, r4
 800b906:	d1f5      	bne.n	800b8f4 <__s2b+0x4c>
 800b908:	f1a5 0408 	sub.w	r4, r5, #8
 800b90c:	444c      	add	r4, r9
 800b90e:	1b2d      	subs	r5, r5, r4
 800b910:	1963      	adds	r3, r4, r5
 800b912:	42bb      	cmp	r3, r7
 800b914:	db04      	blt.n	800b920 <__s2b+0x78>
 800b916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b91a:	340a      	adds	r4, #10
 800b91c:	2509      	movs	r5, #9
 800b91e:	e7f6      	b.n	800b90e <__s2b+0x66>
 800b920:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b924:	4601      	mov	r1, r0
 800b926:	3b30      	subs	r3, #48	@ 0x30
 800b928:	220a      	movs	r2, #10
 800b92a:	4630      	mov	r0, r6
 800b92c:	f7ff ff76 	bl	800b81c <__multadd>
 800b930:	e7ee      	b.n	800b910 <__s2b+0x68>
 800b932:	bf00      	nop
 800b934:	0800ce07 	.word	0x0800ce07
 800b938:	0800ce89 	.word	0x0800ce89

0800b93c <__hi0bits>:
 800b93c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b940:	4603      	mov	r3, r0
 800b942:	bf36      	itet	cc
 800b944:	0403      	lslcc	r3, r0, #16
 800b946:	2000      	movcs	r0, #0
 800b948:	2010      	movcc	r0, #16
 800b94a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b94e:	bf3c      	itt	cc
 800b950:	021b      	lslcc	r3, r3, #8
 800b952:	3008      	addcc	r0, #8
 800b954:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b958:	bf3c      	itt	cc
 800b95a:	011b      	lslcc	r3, r3, #4
 800b95c:	3004      	addcc	r0, #4
 800b95e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b962:	bf3c      	itt	cc
 800b964:	009b      	lslcc	r3, r3, #2
 800b966:	3002      	addcc	r0, #2
 800b968:	2b00      	cmp	r3, #0
 800b96a:	db05      	blt.n	800b978 <__hi0bits+0x3c>
 800b96c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b970:	f100 0001 	add.w	r0, r0, #1
 800b974:	bf08      	it	eq
 800b976:	2020      	moveq	r0, #32
 800b978:	4770      	bx	lr

0800b97a <__lo0bits>:
 800b97a:	6803      	ldr	r3, [r0, #0]
 800b97c:	4602      	mov	r2, r0
 800b97e:	f013 0007 	ands.w	r0, r3, #7
 800b982:	d00b      	beq.n	800b99c <__lo0bits+0x22>
 800b984:	07d9      	lsls	r1, r3, #31
 800b986:	d421      	bmi.n	800b9cc <__lo0bits+0x52>
 800b988:	0798      	lsls	r0, r3, #30
 800b98a:	bf49      	itett	mi
 800b98c:	085b      	lsrmi	r3, r3, #1
 800b98e:	089b      	lsrpl	r3, r3, #2
 800b990:	2001      	movmi	r0, #1
 800b992:	6013      	strmi	r3, [r2, #0]
 800b994:	bf5c      	itt	pl
 800b996:	6013      	strpl	r3, [r2, #0]
 800b998:	2002      	movpl	r0, #2
 800b99a:	4770      	bx	lr
 800b99c:	b299      	uxth	r1, r3
 800b99e:	b909      	cbnz	r1, 800b9a4 <__lo0bits+0x2a>
 800b9a0:	0c1b      	lsrs	r3, r3, #16
 800b9a2:	2010      	movs	r0, #16
 800b9a4:	b2d9      	uxtb	r1, r3
 800b9a6:	b909      	cbnz	r1, 800b9ac <__lo0bits+0x32>
 800b9a8:	3008      	adds	r0, #8
 800b9aa:	0a1b      	lsrs	r3, r3, #8
 800b9ac:	0719      	lsls	r1, r3, #28
 800b9ae:	bf04      	itt	eq
 800b9b0:	091b      	lsreq	r3, r3, #4
 800b9b2:	3004      	addeq	r0, #4
 800b9b4:	0799      	lsls	r1, r3, #30
 800b9b6:	bf04      	itt	eq
 800b9b8:	089b      	lsreq	r3, r3, #2
 800b9ba:	3002      	addeq	r0, #2
 800b9bc:	07d9      	lsls	r1, r3, #31
 800b9be:	d403      	bmi.n	800b9c8 <__lo0bits+0x4e>
 800b9c0:	085b      	lsrs	r3, r3, #1
 800b9c2:	f100 0001 	add.w	r0, r0, #1
 800b9c6:	d003      	beq.n	800b9d0 <__lo0bits+0x56>
 800b9c8:	6013      	str	r3, [r2, #0]
 800b9ca:	4770      	bx	lr
 800b9cc:	2000      	movs	r0, #0
 800b9ce:	4770      	bx	lr
 800b9d0:	2020      	movs	r0, #32
 800b9d2:	4770      	bx	lr

0800b9d4 <__i2b>:
 800b9d4:	b510      	push	{r4, lr}
 800b9d6:	460c      	mov	r4, r1
 800b9d8:	2101      	movs	r1, #1
 800b9da:	f7ff febd 	bl	800b758 <_Balloc>
 800b9de:	4602      	mov	r2, r0
 800b9e0:	b928      	cbnz	r0, 800b9ee <__i2b+0x1a>
 800b9e2:	4b05      	ldr	r3, [pc, #20]	@ (800b9f8 <__i2b+0x24>)
 800b9e4:	4805      	ldr	r0, [pc, #20]	@ (800b9fc <__i2b+0x28>)
 800b9e6:	f240 1145 	movw	r1, #325	@ 0x145
 800b9ea:	f000 fc4d 	bl	800c288 <__assert_func>
 800b9ee:	2301      	movs	r3, #1
 800b9f0:	6144      	str	r4, [r0, #20]
 800b9f2:	6103      	str	r3, [r0, #16]
 800b9f4:	bd10      	pop	{r4, pc}
 800b9f6:	bf00      	nop
 800b9f8:	0800ce07 	.word	0x0800ce07
 800b9fc:	0800ce89 	.word	0x0800ce89

0800ba00 <__multiply>:
 800ba00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba04:	4617      	mov	r7, r2
 800ba06:	690a      	ldr	r2, [r1, #16]
 800ba08:	693b      	ldr	r3, [r7, #16]
 800ba0a:	429a      	cmp	r2, r3
 800ba0c:	bfa8      	it	ge
 800ba0e:	463b      	movge	r3, r7
 800ba10:	4689      	mov	r9, r1
 800ba12:	bfa4      	itt	ge
 800ba14:	460f      	movge	r7, r1
 800ba16:	4699      	movge	r9, r3
 800ba18:	693d      	ldr	r5, [r7, #16]
 800ba1a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ba1e:	68bb      	ldr	r3, [r7, #8]
 800ba20:	6879      	ldr	r1, [r7, #4]
 800ba22:	eb05 060a 	add.w	r6, r5, sl
 800ba26:	42b3      	cmp	r3, r6
 800ba28:	b085      	sub	sp, #20
 800ba2a:	bfb8      	it	lt
 800ba2c:	3101      	addlt	r1, #1
 800ba2e:	f7ff fe93 	bl	800b758 <_Balloc>
 800ba32:	b930      	cbnz	r0, 800ba42 <__multiply+0x42>
 800ba34:	4602      	mov	r2, r0
 800ba36:	4b41      	ldr	r3, [pc, #260]	@ (800bb3c <__multiply+0x13c>)
 800ba38:	4841      	ldr	r0, [pc, #260]	@ (800bb40 <__multiply+0x140>)
 800ba3a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ba3e:	f000 fc23 	bl	800c288 <__assert_func>
 800ba42:	f100 0414 	add.w	r4, r0, #20
 800ba46:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800ba4a:	4623      	mov	r3, r4
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	4573      	cmp	r3, lr
 800ba50:	d320      	bcc.n	800ba94 <__multiply+0x94>
 800ba52:	f107 0814 	add.w	r8, r7, #20
 800ba56:	f109 0114 	add.w	r1, r9, #20
 800ba5a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800ba5e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800ba62:	9302      	str	r3, [sp, #8]
 800ba64:	1beb      	subs	r3, r5, r7
 800ba66:	3b15      	subs	r3, #21
 800ba68:	f023 0303 	bic.w	r3, r3, #3
 800ba6c:	3304      	adds	r3, #4
 800ba6e:	3715      	adds	r7, #21
 800ba70:	42bd      	cmp	r5, r7
 800ba72:	bf38      	it	cc
 800ba74:	2304      	movcc	r3, #4
 800ba76:	9301      	str	r3, [sp, #4]
 800ba78:	9b02      	ldr	r3, [sp, #8]
 800ba7a:	9103      	str	r1, [sp, #12]
 800ba7c:	428b      	cmp	r3, r1
 800ba7e:	d80c      	bhi.n	800ba9a <__multiply+0x9a>
 800ba80:	2e00      	cmp	r6, #0
 800ba82:	dd03      	ble.n	800ba8c <__multiply+0x8c>
 800ba84:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d055      	beq.n	800bb38 <__multiply+0x138>
 800ba8c:	6106      	str	r6, [r0, #16]
 800ba8e:	b005      	add	sp, #20
 800ba90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba94:	f843 2b04 	str.w	r2, [r3], #4
 800ba98:	e7d9      	b.n	800ba4e <__multiply+0x4e>
 800ba9a:	f8b1 a000 	ldrh.w	sl, [r1]
 800ba9e:	f1ba 0f00 	cmp.w	sl, #0
 800baa2:	d01f      	beq.n	800bae4 <__multiply+0xe4>
 800baa4:	46c4      	mov	ip, r8
 800baa6:	46a1      	mov	r9, r4
 800baa8:	2700      	movs	r7, #0
 800baaa:	f85c 2b04 	ldr.w	r2, [ip], #4
 800baae:	f8d9 3000 	ldr.w	r3, [r9]
 800bab2:	fa1f fb82 	uxth.w	fp, r2
 800bab6:	b29b      	uxth	r3, r3
 800bab8:	fb0a 330b 	mla	r3, sl, fp, r3
 800babc:	443b      	add	r3, r7
 800babe:	f8d9 7000 	ldr.w	r7, [r9]
 800bac2:	0c12      	lsrs	r2, r2, #16
 800bac4:	0c3f      	lsrs	r7, r7, #16
 800bac6:	fb0a 7202 	mla	r2, sl, r2, r7
 800baca:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800bace:	b29b      	uxth	r3, r3
 800bad0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bad4:	4565      	cmp	r5, ip
 800bad6:	f849 3b04 	str.w	r3, [r9], #4
 800bada:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800bade:	d8e4      	bhi.n	800baaa <__multiply+0xaa>
 800bae0:	9b01      	ldr	r3, [sp, #4]
 800bae2:	50e7      	str	r7, [r4, r3]
 800bae4:	9b03      	ldr	r3, [sp, #12]
 800bae6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800baea:	3104      	adds	r1, #4
 800baec:	f1b9 0f00 	cmp.w	r9, #0
 800baf0:	d020      	beq.n	800bb34 <__multiply+0x134>
 800baf2:	6823      	ldr	r3, [r4, #0]
 800baf4:	4647      	mov	r7, r8
 800baf6:	46a4      	mov	ip, r4
 800baf8:	f04f 0a00 	mov.w	sl, #0
 800bafc:	f8b7 b000 	ldrh.w	fp, [r7]
 800bb00:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800bb04:	fb09 220b 	mla	r2, r9, fp, r2
 800bb08:	4452      	add	r2, sl
 800bb0a:	b29b      	uxth	r3, r3
 800bb0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bb10:	f84c 3b04 	str.w	r3, [ip], #4
 800bb14:	f857 3b04 	ldr.w	r3, [r7], #4
 800bb18:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bb1c:	f8bc 3000 	ldrh.w	r3, [ip]
 800bb20:	fb09 330a 	mla	r3, r9, sl, r3
 800bb24:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800bb28:	42bd      	cmp	r5, r7
 800bb2a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bb2e:	d8e5      	bhi.n	800bafc <__multiply+0xfc>
 800bb30:	9a01      	ldr	r2, [sp, #4]
 800bb32:	50a3      	str	r3, [r4, r2]
 800bb34:	3404      	adds	r4, #4
 800bb36:	e79f      	b.n	800ba78 <__multiply+0x78>
 800bb38:	3e01      	subs	r6, #1
 800bb3a:	e7a1      	b.n	800ba80 <__multiply+0x80>
 800bb3c:	0800ce07 	.word	0x0800ce07
 800bb40:	0800ce89 	.word	0x0800ce89

0800bb44 <__pow5mult>:
 800bb44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb48:	4615      	mov	r5, r2
 800bb4a:	f012 0203 	ands.w	r2, r2, #3
 800bb4e:	4607      	mov	r7, r0
 800bb50:	460e      	mov	r6, r1
 800bb52:	d007      	beq.n	800bb64 <__pow5mult+0x20>
 800bb54:	4c25      	ldr	r4, [pc, #148]	@ (800bbec <__pow5mult+0xa8>)
 800bb56:	3a01      	subs	r2, #1
 800bb58:	2300      	movs	r3, #0
 800bb5a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bb5e:	f7ff fe5d 	bl	800b81c <__multadd>
 800bb62:	4606      	mov	r6, r0
 800bb64:	10ad      	asrs	r5, r5, #2
 800bb66:	d03d      	beq.n	800bbe4 <__pow5mult+0xa0>
 800bb68:	69fc      	ldr	r4, [r7, #28]
 800bb6a:	b97c      	cbnz	r4, 800bb8c <__pow5mult+0x48>
 800bb6c:	2010      	movs	r0, #16
 800bb6e:	f7ff fc7f 	bl	800b470 <malloc>
 800bb72:	4602      	mov	r2, r0
 800bb74:	61f8      	str	r0, [r7, #28]
 800bb76:	b928      	cbnz	r0, 800bb84 <__pow5mult+0x40>
 800bb78:	4b1d      	ldr	r3, [pc, #116]	@ (800bbf0 <__pow5mult+0xac>)
 800bb7a:	481e      	ldr	r0, [pc, #120]	@ (800bbf4 <__pow5mult+0xb0>)
 800bb7c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bb80:	f000 fb82 	bl	800c288 <__assert_func>
 800bb84:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bb88:	6004      	str	r4, [r0, #0]
 800bb8a:	60c4      	str	r4, [r0, #12]
 800bb8c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bb90:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bb94:	b94c      	cbnz	r4, 800bbaa <__pow5mult+0x66>
 800bb96:	f240 2171 	movw	r1, #625	@ 0x271
 800bb9a:	4638      	mov	r0, r7
 800bb9c:	f7ff ff1a 	bl	800b9d4 <__i2b>
 800bba0:	2300      	movs	r3, #0
 800bba2:	f8c8 0008 	str.w	r0, [r8, #8]
 800bba6:	4604      	mov	r4, r0
 800bba8:	6003      	str	r3, [r0, #0]
 800bbaa:	f04f 0900 	mov.w	r9, #0
 800bbae:	07eb      	lsls	r3, r5, #31
 800bbb0:	d50a      	bpl.n	800bbc8 <__pow5mult+0x84>
 800bbb2:	4631      	mov	r1, r6
 800bbb4:	4622      	mov	r2, r4
 800bbb6:	4638      	mov	r0, r7
 800bbb8:	f7ff ff22 	bl	800ba00 <__multiply>
 800bbbc:	4631      	mov	r1, r6
 800bbbe:	4680      	mov	r8, r0
 800bbc0:	4638      	mov	r0, r7
 800bbc2:	f7ff fe09 	bl	800b7d8 <_Bfree>
 800bbc6:	4646      	mov	r6, r8
 800bbc8:	106d      	asrs	r5, r5, #1
 800bbca:	d00b      	beq.n	800bbe4 <__pow5mult+0xa0>
 800bbcc:	6820      	ldr	r0, [r4, #0]
 800bbce:	b938      	cbnz	r0, 800bbe0 <__pow5mult+0x9c>
 800bbd0:	4622      	mov	r2, r4
 800bbd2:	4621      	mov	r1, r4
 800bbd4:	4638      	mov	r0, r7
 800bbd6:	f7ff ff13 	bl	800ba00 <__multiply>
 800bbda:	6020      	str	r0, [r4, #0]
 800bbdc:	f8c0 9000 	str.w	r9, [r0]
 800bbe0:	4604      	mov	r4, r0
 800bbe2:	e7e4      	b.n	800bbae <__pow5mult+0x6a>
 800bbe4:	4630      	mov	r0, r6
 800bbe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbea:	bf00      	nop
 800bbec:	0800d074 	.word	0x0800d074
 800bbf0:	0800cd98 	.word	0x0800cd98
 800bbf4:	0800ce89 	.word	0x0800ce89

0800bbf8 <__lshift>:
 800bbf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbfc:	460c      	mov	r4, r1
 800bbfe:	6849      	ldr	r1, [r1, #4]
 800bc00:	6923      	ldr	r3, [r4, #16]
 800bc02:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bc06:	68a3      	ldr	r3, [r4, #8]
 800bc08:	4607      	mov	r7, r0
 800bc0a:	4691      	mov	r9, r2
 800bc0c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bc10:	f108 0601 	add.w	r6, r8, #1
 800bc14:	42b3      	cmp	r3, r6
 800bc16:	db0b      	blt.n	800bc30 <__lshift+0x38>
 800bc18:	4638      	mov	r0, r7
 800bc1a:	f7ff fd9d 	bl	800b758 <_Balloc>
 800bc1e:	4605      	mov	r5, r0
 800bc20:	b948      	cbnz	r0, 800bc36 <__lshift+0x3e>
 800bc22:	4602      	mov	r2, r0
 800bc24:	4b28      	ldr	r3, [pc, #160]	@ (800bcc8 <__lshift+0xd0>)
 800bc26:	4829      	ldr	r0, [pc, #164]	@ (800bccc <__lshift+0xd4>)
 800bc28:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bc2c:	f000 fb2c 	bl	800c288 <__assert_func>
 800bc30:	3101      	adds	r1, #1
 800bc32:	005b      	lsls	r3, r3, #1
 800bc34:	e7ee      	b.n	800bc14 <__lshift+0x1c>
 800bc36:	2300      	movs	r3, #0
 800bc38:	f100 0114 	add.w	r1, r0, #20
 800bc3c:	f100 0210 	add.w	r2, r0, #16
 800bc40:	4618      	mov	r0, r3
 800bc42:	4553      	cmp	r3, sl
 800bc44:	db33      	blt.n	800bcae <__lshift+0xb6>
 800bc46:	6920      	ldr	r0, [r4, #16]
 800bc48:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bc4c:	f104 0314 	add.w	r3, r4, #20
 800bc50:	f019 091f 	ands.w	r9, r9, #31
 800bc54:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bc58:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bc5c:	d02b      	beq.n	800bcb6 <__lshift+0xbe>
 800bc5e:	f1c9 0e20 	rsb	lr, r9, #32
 800bc62:	468a      	mov	sl, r1
 800bc64:	2200      	movs	r2, #0
 800bc66:	6818      	ldr	r0, [r3, #0]
 800bc68:	fa00 f009 	lsl.w	r0, r0, r9
 800bc6c:	4310      	orrs	r0, r2
 800bc6e:	f84a 0b04 	str.w	r0, [sl], #4
 800bc72:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc76:	459c      	cmp	ip, r3
 800bc78:	fa22 f20e 	lsr.w	r2, r2, lr
 800bc7c:	d8f3      	bhi.n	800bc66 <__lshift+0x6e>
 800bc7e:	ebac 0304 	sub.w	r3, ip, r4
 800bc82:	3b15      	subs	r3, #21
 800bc84:	f023 0303 	bic.w	r3, r3, #3
 800bc88:	3304      	adds	r3, #4
 800bc8a:	f104 0015 	add.w	r0, r4, #21
 800bc8e:	4560      	cmp	r0, ip
 800bc90:	bf88      	it	hi
 800bc92:	2304      	movhi	r3, #4
 800bc94:	50ca      	str	r2, [r1, r3]
 800bc96:	b10a      	cbz	r2, 800bc9c <__lshift+0xa4>
 800bc98:	f108 0602 	add.w	r6, r8, #2
 800bc9c:	3e01      	subs	r6, #1
 800bc9e:	4638      	mov	r0, r7
 800bca0:	612e      	str	r6, [r5, #16]
 800bca2:	4621      	mov	r1, r4
 800bca4:	f7ff fd98 	bl	800b7d8 <_Bfree>
 800bca8:	4628      	mov	r0, r5
 800bcaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcae:	f842 0f04 	str.w	r0, [r2, #4]!
 800bcb2:	3301      	adds	r3, #1
 800bcb4:	e7c5      	b.n	800bc42 <__lshift+0x4a>
 800bcb6:	3904      	subs	r1, #4
 800bcb8:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcbc:	f841 2f04 	str.w	r2, [r1, #4]!
 800bcc0:	459c      	cmp	ip, r3
 800bcc2:	d8f9      	bhi.n	800bcb8 <__lshift+0xc0>
 800bcc4:	e7ea      	b.n	800bc9c <__lshift+0xa4>
 800bcc6:	bf00      	nop
 800bcc8:	0800ce07 	.word	0x0800ce07
 800bccc:	0800ce89 	.word	0x0800ce89

0800bcd0 <__mcmp>:
 800bcd0:	690a      	ldr	r2, [r1, #16]
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	6900      	ldr	r0, [r0, #16]
 800bcd6:	1a80      	subs	r0, r0, r2
 800bcd8:	b530      	push	{r4, r5, lr}
 800bcda:	d10e      	bne.n	800bcfa <__mcmp+0x2a>
 800bcdc:	3314      	adds	r3, #20
 800bcde:	3114      	adds	r1, #20
 800bce0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bce4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bce8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bcec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bcf0:	4295      	cmp	r5, r2
 800bcf2:	d003      	beq.n	800bcfc <__mcmp+0x2c>
 800bcf4:	d205      	bcs.n	800bd02 <__mcmp+0x32>
 800bcf6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bcfa:	bd30      	pop	{r4, r5, pc}
 800bcfc:	42a3      	cmp	r3, r4
 800bcfe:	d3f3      	bcc.n	800bce8 <__mcmp+0x18>
 800bd00:	e7fb      	b.n	800bcfa <__mcmp+0x2a>
 800bd02:	2001      	movs	r0, #1
 800bd04:	e7f9      	b.n	800bcfa <__mcmp+0x2a>
	...

0800bd08 <__mdiff>:
 800bd08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd0c:	4689      	mov	r9, r1
 800bd0e:	4606      	mov	r6, r0
 800bd10:	4611      	mov	r1, r2
 800bd12:	4648      	mov	r0, r9
 800bd14:	4614      	mov	r4, r2
 800bd16:	f7ff ffdb 	bl	800bcd0 <__mcmp>
 800bd1a:	1e05      	subs	r5, r0, #0
 800bd1c:	d112      	bne.n	800bd44 <__mdiff+0x3c>
 800bd1e:	4629      	mov	r1, r5
 800bd20:	4630      	mov	r0, r6
 800bd22:	f7ff fd19 	bl	800b758 <_Balloc>
 800bd26:	4602      	mov	r2, r0
 800bd28:	b928      	cbnz	r0, 800bd36 <__mdiff+0x2e>
 800bd2a:	4b3f      	ldr	r3, [pc, #252]	@ (800be28 <__mdiff+0x120>)
 800bd2c:	f240 2137 	movw	r1, #567	@ 0x237
 800bd30:	483e      	ldr	r0, [pc, #248]	@ (800be2c <__mdiff+0x124>)
 800bd32:	f000 faa9 	bl	800c288 <__assert_func>
 800bd36:	2301      	movs	r3, #1
 800bd38:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bd3c:	4610      	mov	r0, r2
 800bd3e:	b003      	add	sp, #12
 800bd40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd44:	bfbc      	itt	lt
 800bd46:	464b      	movlt	r3, r9
 800bd48:	46a1      	movlt	r9, r4
 800bd4a:	4630      	mov	r0, r6
 800bd4c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bd50:	bfba      	itte	lt
 800bd52:	461c      	movlt	r4, r3
 800bd54:	2501      	movlt	r5, #1
 800bd56:	2500      	movge	r5, #0
 800bd58:	f7ff fcfe 	bl	800b758 <_Balloc>
 800bd5c:	4602      	mov	r2, r0
 800bd5e:	b918      	cbnz	r0, 800bd68 <__mdiff+0x60>
 800bd60:	4b31      	ldr	r3, [pc, #196]	@ (800be28 <__mdiff+0x120>)
 800bd62:	f240 2145 	movw	r1, #581	@ 0x245
 800bd66:	e7e3      	b.n	800bd30 <__mdiff+0x28>
 800bd68:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bd6c:	6926      	ldr	r6, [r4, #16]
 800bd6e:	60c5      	str	r5, [r0, #12]
 800bd70:	f109 0310 	add.w	r3, r9, #16
 800bd74:	f109 0514 	add.w	r5, r9, #20
 800bd78:	f104 0e14 	add.w	lr, r4, #20
 800bd7c:	f100 0b14 	add.w	fp, r0, #20
 800bd80:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bd84:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bd88:	9301      	str	r3, [sp, #4]
 800bd8a:	46d9      	mov	r9, fp
 800bd8c:	f04f 0c00 	mov.w	ip, #0
 800bd90:	9b01      	ldr	r3, [sp, #4]
 800bd92:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bd96:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bd9a:	9301      	str	r3, [sp, #4]
 800bd9c:	fa1f f38a 	uxth.w	r3, sl
 800bda0:	4619      	mov	r1, r3
 800bda2:	b283      	uxth	r3, r0
 800bda4:	1acb      	subs	r3, r1, r3
 800bda6:	0c00      	lsrs	r0, r0, #16
 800bda8:	4463      	add	r3, ip
 800bdaa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bdae:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bdb2:	b29b      	uxth	r3, r3
 800bdb4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bdb8:	4576      	cmp	r6, lr
 800bdba:	f849 3b04 	str.w	r3, [r9], #4
 800bdbe:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bdc2:	d8e5      	bhi.n	800bd90 <__mdiff+0x88>
 800bdc4:	1b33      	subs	r3, r6, r4
 800bdc6:	3b15      	subs	r3, #21
 800bdc8:	f023 0303 	bic.w	r3, r3, #3
 800bdcc:	3415      	adds	r4, #21
 800bdce:	3304      	adds	r3, #4
 800bdd0:	42a6      	cmp	r6, r4
 800bdd2:	bf38      	it	cc
 800bdd4:	2304      	movcc	r3, #4
 800bdd6:	441d      	add	r5, r3
 800bdd8:	445b      	add	r3, fp
 800bdda:	461e      	mov	r6, r3
 800bddc:	462c      	mov	r4, r5
 800bdde:	4544      	cmp	r4, r8
 800bde0:	d30e      	bcc.n	800be00 <__mdiff+0xf8>
 800bde2:	f108 0103 	add.w	r1, r8, #3
 800bde6:	1b49      	subs	r1, r1, r5
 800bde8:	f021 0103 	bic.w	r1, r1, #3
 800bdec:	3d03      	subs	r5, #3
 800bdee:	45a8      	cmp	r8, r5
 800bdf0:	bf38      	it	cc
 800bdf2:	2100      	movcc	r1, #0
 800bdf4:	440b      	add	r3, r1
 800bdf6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bdfa:	b191      	cbz	r1, 800be22 <__mdiff+0x11a>
 800bdfc:	6117      	str	r7, [r2, #16]
 800bdfe:	e79d      	b.n	800bd3c <__mdiff+0x34>
 800be00:	f854 1b04 	ldr.w	r1, [r4], #4
 800be04:	46e6      	mov	lr, ip
 800be06:	0c08      	lsrs	r0, r1, #16
 800be08:	fa1c fc81 	uxtah	ip, ip, r1
 800be0c:	4471      	add	r1, lr
 800be0e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800be12:	b289      	uxth	r1, r1
 800be14:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800be18:	f846 1b04 	str.w	r1, [r6], #4
 800be1c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800be20:	e7dd      	b.n	800bdde <__mdiff+0xd6>
 800be22:	3f01      	subs	r7, #1
 800be24:	e7e7      	b.n	800bdf6 <__mdiff+0xee>
 800be26:	bf00      	nop
 800be28:	0800ce07 	.word	0x0800ce07
 800be2c:	0800ce89 	.word	0x0800ce89

0800be30 <__ulp>:
 800be30:	b082      	sub	sp, #8
 800be32:	ed8d 0b00 	vstr	d0, [sp]
 800be36:	9a01      	ldr	r2, [sp, #4]
 800be38:	4b0f      	ldr	r3, [pc, #60]	@ (800be78 <__ulp+0x48>)
 800be3a:	4013      	ands	r3, r2
 800be3c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800be40:	2b00      	cmp	r3, #0
 800be42:	dc08      	bgt.n	800be56 <__ulp+0x26>
 800be44:	425b      	negs	r3, r3
 800be46:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800be4a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800be4e:	da04      	bge.n	800be5a <__ulp+0x2a>
 800be50:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800be54:	4113      	asrs	r3, r2
 800be56:	2200      	movs	r2, #0
 800be58:	e008      	b.n	800be6c <__ulp+0x3c>
 800be5a:	f1a2 0314 	sub.w	r3, r2, #20
 800be5e:	2b1e      	cmp	r3, #30
 800be60:	bfda      	itte	le
 800be62:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800be66:	40da      	lsrle	r2, r3
 800be68:	2201      	movgt	r2, #1
 800be6a:	2300      	movs	r3, #0
 800be6c:	4619      	mov	r1, r3
 800be6e:	4610      	mov	r0, r2
 800be70:	ec41 0b10 	vmov	d0, r0, r1
 800be74:	b002      	add	sp, #8
 800be76:	4770      	bx	lr
 800be78:	7ff00000 	.word	0x7ff00000

0800be7c <__b2d>:
 800be7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be80:	6906      	ldr	r6, [r0, #16]
 800be82:	f100 0814 	add.w	r8, r0, #20
 800be86:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800be8a:	1f37      	subs	r7, r6, #4
 800be8c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800be90:	4610      	mov	r0, r2
 800be92:	f7ff fd53 	bl	800b93c <__hi0bits>
 800be96:	f1c0 0320 	rsb	r3, r0, #32
 800be9a:	280a      	cmp	r0, #10
 800be9c:	600b      	str	r3, [r1, #0]
 800be9e:	491b      	ldr	r1, [pc, #108]	@ (800bf0c <__b2d+0x90>)
 800bea0:	dc15      	bgt.n	800bece <__b2d+0x52>
 800bea2:	f1c0 0c0b 	rsb	ip, r0, #11
 800bea6:	fa22 f30c 	lsr.w	r3, r2, ip
 800beaa:	45b8      	cmp	r8, r7
 800beac:	ea43 0501 	orr.w	r5, r3, r1
 800beb0:	bf34      	ite	cc
 800beb2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800beb6:	2300      	movcs	r3, #0
 800beb8:	3015      	adds	r0, #21
 800beba:	fa02 f000 	lsl.w	r0, r2, r0
 800bebe:	fa23 f30c 	lsr.w	r3, r3, ip
 800bec2:	4303      	orrs	r3, r0
 800bec4:	461c      	mov	r4, r3
 800bec6:	ec45 4b10 	vmov	d0, r4, r5
 800beca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bece:	45b8      	cmp	r8, r7
 800bed0:	bf3a      	itte	cc
 800bed2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bed6:	f1a6 0708 	subcc.w	r7, r6, #8
 800beda:	2300      	movcs	r3, #0
 800bedc:	380b      	subs	r0, #11
 800bede:	d012      	beq.n	800bf06 <__b2d+0x8a>
 800bee0:	f1c0 0120 	rsb	r1, r0, #32
 800bee4:	fa23 f401 	lsr.w	r4, r3, r1
 800bee8:	4082      	lsls	r2, r0
 800beea:	4322      	orrs	r2, r4
 800beec:	4547      	cmp	r7, r8
 800beee:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800bef2:	bf8c      	ite	hi
 800bef4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800bef8:	2200      	movls	r2, #0
 800befa:	4083      	lsls	r3, r0
 800befc:	40ca      	lsrs	r2, r1
 800befe:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800bf02:	4313      	orrs	r3, r2
 800bf04:	e7de      	b.n	800bec4 <__b2d+0x48>
 800bf06:	ea42 0501 	orr.w	r5, r2, r1
 800bf0a:	e7db      	b.n	800bec4 <__b2d+0x48>
 800bf0c:	3ff00000 	.word	0x3ff00000

0800bf10 <__d2b>:
 800bf10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bf14:	460f      	mov	r7, r1
 800bf16:	2101      	movs	r1, #1
 800bf18:	ec59 8b10 	vmov	r8, r9, d0
 800bf1c:	4616      	mov	r6, r2
 800bf1e:	f7ff fc1b 	bl	800b758 <_Balloc>
 800bf22:	4604      	mov	r4, r0
 800bf24:	b930      	cbnz	r0, 800bf34 <__d2b+0x24>
 800bf26:	4602      	mov	r2, r0
 800bf28:	4b23      	ldr	r3, [pc, #140]	@ (800bfb8 <__d2b+0xa8>)
 800bf2a:	4824      	ldr	r0, [pc, #144]	@ (800bfbc <__d2b+0xac>)
 800bf2c:	f240 310f 	movw	r1, #783	@ 0x30f
 800bf30:	f000 f9aa 	bl	800c288 <__assert_func>
 800bf34:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bf38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bf3c:	b10d      	cbz	r5, 800bf42 <__d2b+0x32>
 800bf3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bf42:	9301      	str	r3, [sp, #4]
 800bf44:	f1b8 0300 	subs.w	r3, r8, #0
 800bf48:	d023      	beq.n	800bf92 <__d2b+0x82>
 800bf4a:	4668      	mov	r0, sp
 800bf4c:	9300      	str	r3, [sp, #0]
 800bf4e:	f7ff fd14 	bl	800b97a <__lo0bits>
 800bf52:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bf56:	b1d0      	cbz	r0, 800bf8e <__d2b+0x7e>
 800bf58:	f1c0 0320 	rsb	r3, r0, #32
 800bf5c:	fa02 f303 	lsl.w	r3, r2, r3
 800bf60:	430b      	orrs	r3, r1
 800bf62:	40c2      	lsrs	r2, r0
 800bf64:	6163      	str	r3, [r4, #20]
 800bf66:	9201      	str	r2, [sp, #4]
 800bf68:	9b01      	ldr	r3, [sp, #4]
 800bf6a:	61a3      	str	r3, [r4, #24]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	bf0c      	ite	eq
 800bf70:	2201      	moveq	r2, #1
 800bf72:	2202      	movne	r2, #2
 800bf74:	6122      	str	r2, [r4, #16]
 800bf76:	b1a5      	cbz	r5, 800bfa2 <__d2b+0x92>
 800bf78:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bf7c:	4405      	add	r5, r0
 800bf7e:	603d      	str	r5, [r7, #0]
 800bf80:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bf84:	6030      	str	r0, [r6, #0]
 800bf86:	4620      	mov	r0, r4
 800bf88:	b003      	add	sp, #12
 800bf8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf8e:	6161      	str	r1, [r4, #20]
 800bf90:	e7ea      	b.n	800bf68 <__d2b+0x58>
 800bf92:	a801      	add	r0, sp, #4
 800bf94:	f7ff fcf1 	bl	800b97a <__lo0bits>
 800bf98:	9b01      	ldr	r3, [sp, #4]
 800bf9a:	6163      	str	r3, [r4, #20]
 800bf9c:	3020      	adds	r0, #32
 800bf9e:	2201      	movs	r2, #1
 800bfa0:	e7e8      	b.n	800bf74 <__d2b+0x64>
 800bfa2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bfa6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bfaa:	6038      	str	r0, [r7, #0]
 800bfac:	6918      	ldr	r0, [r3, #16]
 800bfae:	f7ff fcc5 	bl	800b93c <__hi0bits>
 800bfb2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bfb6:	e7e5      	b.n	800bf84 <__d2b+0x74>
 800bfb8:	0800ce07 	.word	0x0800ce07
 800bfbc:	0800ce89 	.word	0x0800ce89

0800bfc0 <__ratio>:
 800bfc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfc4:	b085      	sub	sp, #20
 800bfc6:	e9cd 1000 	strd	r1, r0, [sp]
 800bfca:	a902      	add	r1, sp, #8
 800bfcc:	f7ff ff56 	bl	800be7c <__b2d>
 800bfd0:	9800      	ldr	r0, [sp, #0]
 800bfd2:	a903      	add	r1, sp, #12
 800bfd4:	ec55 4b10 	vmov	r4, r5, d0
 800bfd8:	f7ff ff50 	bl	800be7c <__b2d>
 800bfdc:	9b01      	ldr	r3, [sp, #4]
 800bfde:	6919      	ldr	r1, [r3, #16]
 800bfe0:	9b00      	ldr	r3, [sp, #0]
 800bfe2:	691b      	ldr	r3, [r3, #16]
 800bfe4:	1ac9      	subs	r1, r1, r3
 800bfe6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800bfea:	1a9b      	subs	r3, r3, r2
 800bfec:	ec5b ab10 	vmov	sl, fp, d0
 800bff0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	bfce      	itee	gt
 800bff8:	462a      	movgt	r2, r5
 800bffa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bffe:	465a      	movle	r2, fp
 800c000:	462f      	mov	r7, r5
 800c002:	46d9      	mov	r9, fp
 800c004:	bfcc      	ite	gt
 800c006:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c00a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c00e:	464b      	mov	r3, r9
 800c010:	4652      	mov	r2, sl
 800c012:	4620      	mov	r0, r4
 800c014:	4639      	mov	r1, r7
 800c016:	f7f4 fc19 	bl	800084c <__aeabi_ddiv>
 800c01a:	ec41 0b10 	vmov	d0, r0, r1
 800c01e:	b005      	add	sp, #20
 800c020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c024 <__copybits>:
 800c024:	3901      	subs	r1, #1
 800c026:	b570      	push	{r4, r5, r6, lr}
 800c028:	1149      	asrs	r1, r1, #5
 800c02a:	6914      	ldr	r4, [r2, #16]
 800c02c:	3101      	adds	r1, #1
 800c02e:	f102 0314 	add.w	r3, r2, #20
 800c032:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c036:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c03a:	1f05      	subs	r5, r0, #4
 800c03c:	42a3      	cmp	r3, r4
 800c03e:	d30c      	bcc.n	800c05a <__copybits+0x36>
 800c040:	1aa3      	subs	r3, r4, r2
 800c042:	3b11      	subs	r3, #17
 800c044:	f023 0303 	bic.w	r3, r3, #3
 800c048:	3211      	adds	r2, #17
 800c04a:	42a2      	cmp	r2, r4
 800c04c:	bf88      	it	hi
 800c04e:	2300      	movhi	r3, #0
 800c050:	4418      	add	r0, r3
 800c052:	2300      	movs	r3, #0
 800c054:	4288      	cmp	r0, r1
 800c056:	d305      	bcc.n	800c064 <__copybits+0x40>
 800c058:	bd70      	pop	{r4, r5, r6, pc}
 800c05a:	f853 6b04 	ldr.w	r6, [r3], #4
 800c05e:	f845 6f04 	str.w	r6, [r5, #4]!
 800c062:	e7eb      	b.n	800c03c <__copybits+0x18>
 800c064:	f840 3b04 	str.w	r3, [r0], #4
 800c068:	e7f4      	b.n	800c054 <__copybits+0x30>

0800c06a <__any_on>:
 800c06a:	f100 0214 	add.w	r2, r0, #20
 800c06e:	6900      	ldr	r0, [r0, #16]
 800c070:	114b      	asrs	r3, r1, #5
 800c072:	4298      	cmp	r0, r3
 800c074:	b510      	push	{r4, lr}
 800c076:	db11      	blt.n	800c09c <__any_on+0x32>
 800c078:	dd0a      	ble.n	800c090 <__any_on+0x26>
 800c07a:	f011 011f 	ands.w	r1, r1, #31
 800c07e:	d007      	beq.n	800c090 <__any_on+0x26>
 800c080:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c084:	fa24 f001 	lsr.w	r0, r4, r1
 800c088:	fa00 f101 	lsl.w	r1, r0, r1
 800c08c:	428c      	cmp	r4, r1
 800c08e:	d10b      	bne.n	800c0a8 <__any_on+0x3e>
 800c090:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c094:	4293      	cmp	r3, r2
 800c096:	d803      	bhi.n	800c0a0 <__any_on+0x36>
 800c098:	2000      	movs	r0, #0
 800c09a:	bd10      	pop	{r4, pc}
 800c09c:	4603      	mov	r3, r0
 800c09e:	e7f7      	b.n	800c090 <__any_on+0x26>
 800c0a0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c0a4:	2900      	cmp	r1, #0
 800c0a6:	d0f5      	beq.n	800c094 <__any_on+0x2a>
 800c0a8:	2001      	movs	r0, #1
 800c0aa:	e7f6      	b.n	800c09a <__any_on+0x30>

0800c0ac <__sread>:
 800c0ac:	b510      	push	{r4, lr}
 800c0ae:	460c      	mov	r4, r1
 800c0b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0b4:	f000 f8a4 	bl	800c200 <_read_r>
 800c0b8:	2800      	cmp	r0, #0
 800c0ba:	bfab      	itete	ge
 800c0bc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c0be:	89a3      	ldrhlt	r3, [r4, #12]
 800c0c0:	181b      	addge	r3, r3, r0
 800c0c2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c0c6:	bfac      	ite	ge
 800c0c8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c0ca:	81a3      	strhlt	r3, [r4, #12]
 800c0cc:	bd10      	pop	{r4, pc}

0800c0ce <__swrite>:
 800c0ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0d2:	461f      	mov	r7, r3
 800c0d4:	898b      	ldrh	r3, [r1, #12]
 800c0d6:	05db      	lsls	r3, r3, #23
 800c0d8:	4605      	mov	r5, r0
 800c0da:	460c      	mov	r4, r1
 800c0dc:	4616      	mov	r6, r2
 800c0de:	d505      	bpl.n	800c0ec <__swrite+0x1e>
 800c0e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0e4:	2302      	movs	r3, #2
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	f000 f878 	bl	800c1dc <_lseek_r>
 800c0ec:	89a3      	ldrh	r3, [r4, #12]
 800c0ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c0f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c0f6:	81a3      	strh	r3, [r4, #12]
 800c0f8:	4632      	mov	r2, r6
 800c0fa:	463b      	mov	r3, r7
 800c0fc:	4628      	mov	r0, r5
 800c0fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c102:	f000 b89f 	b.w	800c244 <_write_r>

0800c106 <__sseek>:
 800c106:	b510      	push	{r4, lr}
 800c108:	460c      	mov	r4, r1
 800c10a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c10e:	f000 f865 	bl	800c1dc <_lseek_r>
 800c112:	1c43      	adds	r3, r0, #1
 800c114:	89a3      	ldrh	r3, [r4, #12]
 800c116:	bf15      	itete	ne
 800c118:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c11a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c11e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c122:	81a3      	strheq	r3, [r4, #12]
 800c124:	bf18      	it	ne
 800c126:	81a3      	strhne	r3, [r4, #12]
 800c128:	bd10      	pop	{r4, pc}

0800c12a <__sclose>:
 800c12a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c12e:	f000 b89b 	b.w	800c268 <_close_r>

0800c132 <_realloc_r>:
 800c132:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c136:	4607      	mov	r7, r0
 800c138:	4614      	mov	r4, r2
 800c13a:	460d      	mov	r5, r1
 800c13c:	b921      	cbnz	r1, 800c148 <_realloc_r+0x16>
 800c13e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c142:	4611      	mov	r1, r2
 800c144:	f7ff b9be 	b.w	800b4c4 <_malloc_r>
 800c148:	b92a      	cbnz	r2, 800c156 <_realloc_r+0x24>
 800c14a:	f000 f8cf 	bl	800c2ec <_free_r>
 800c14e:	4625      	mov	r5, r4
 800c150:	4628      	mov	r0, r5
 800c152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c156:	f000 f913 	bl	800c380 <_malloc_usable_size_r>
 800c15a:	4284      	cmp	r4, r0
 800c15c:	4606      	mov	r6, r0
 800c15e:	d802      	bhi.n	800c166 <_realloc_r+0x34>
 800c160:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c164:	d8f4      	bhi.n	800c150 <_realloc_r+0x1e>
 800c166:	4621      	mov	r1, r4
 800c168:	4638      	mov	r0, r7
 800c16a:	f7ff f9ab 	bl	800b4c4 <_malloc_r>
 800c16e:	4680      	mov	r8, r0
 800c170:	b908      	cbnz	r0, 800c176 <_realloc_r+0x44>
 800c172:	4645      	mov	r5, r8
 800c174:	e7ec      	b.n	800c150 <_realloc_r+0x1e>
 800c176:	42b4      	cmp	r4, r6
 800c178:	4622      	mov	r2, r4
 800c17a:	4629      	mov	r1, r5
 800c17c:	bf28      	it	cs
 800c17e:	4632      	movcs	r2, r6
 800c180:	f7fd fe6e 	bl	8009e60 <memcpy>
 800c184:	4629      	mov	r1, r5
 800c186:	4638      	mov	r0, r7
 800c188:	f000 f8b0 	bl	800c2ec <_free_r>
 800c18c:	e7f1      	b.n	800c172 <_realloc_r+0x40>

0800c18e <__ascii_wctomb>:
 800c18e:	4603      	mov	r3, r0
 800c190:	4608      	mov	r0, r1
 800c192:	b141      	cbz	r1, 800c1a6 <__ascii_wctomb+0x18>
 800c194:	2aff      	cmp	r2, #255	@ 0xff
 800c196:	d904      	bls.n	800c1a2 <__ascii_wctomb+0x14>
 800c198:	228a      	movs	r2, #138	@ 0x8a
 800c19a:	601a      	str	r2, [r3, #0]
 800c19c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c1a0:	4770      	bx	lr
 800c1a2:	700a      	strb	r2, [r1, #0]
 800c1a4:	2001      	movs	r0, #1
 800c1a6:	4770      	bx	lr

0800c1a8 <memmove>:
 800c1a8:	4288      	cmp	r0, r1
 800c1aa:	b510      	push	{r4, lr}
 800c1ac:	eb01 0402 	add.w	r4, r1, r2
 800c1b0:	d902      	bls.n	800c1b8 <memmove+0x10>
 800c1b2:	4284      	cmp	r4, r0
 800c1b4:	4623      	mov	r3, r4
 800c1b6:	d807      	bhi.n	800c1c8 <memmove+0x20>
 800c1b8:	1e43      	subs	r3, r0, #1
 800c1ba:	42a1      	cmp	r1, r4
 800c1bc:	d008      	beq.n	800c1d0 <memmove+0x28>
 800c1be:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c1c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c1c6:	e7f8      	b.n	800c1ba <memmove+0x12>
 800c1c8:	4402      	add	r2, r0
 800c1ca:	4601      	mov	r1, r0
 800c1cc:	428a      	cmp	r2, r1
 800c1ce:	d100      	bne.n	800c1d2 <memmove+0x2a>
 800c1d0:	bd10      	pop	{r4, pc}
 800c1d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c1d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c1da:	e7f7      	b.n	800c1cc <memmove+0x24>

0800c1dc <_lseek_r>:
 800c1dc:	b538      	push	{r3, r4, r5, lr}
 800c1de:	4d07      	ldr	r5, [pc, #28]	@ (800c1fc <_lseek_r+0x20>)
 800c1e0:	4604      	mov	r4, r0
 800c1e2:	4608      	mov	r0, r1
 800c1e4:	4611      	mov	r1, r2
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	602a      	str	r2, [r5, #0]
 800c1ea:	461a      	mov	r2, r3
 800c1ec:	f7f6 ff15 	bl	800301a <_lseek>
 800c1f0:	1c43      	adds	r3, r0, #1
 800c1f2:	d102      	bne.n	800c1fa <_lseek_r+0x1e>
 800c1f4:	682b      	ldr	r3, [r5, #0]
 800c1f6:	b103      	cbz	r3, 800c1fa <_lseek_r+0x1e>
 800c1f8:	6023      	str	r3, [r4, #0]
 800c1fa:	bd38      	pop	{r3, r4, r5, pc}
 800c1fc:	200006f8 	.word	0x200006f8

0800c200 <_read_r>:
 800c200:	b538      	push	{r3, r4, r5, lr}
 800c202:	4d07      	ldr	r5, [pc, #28]	@ (800c220 <_read_r+0x20>)
 800c204:	4604      	mov	r4, r0
 800c206:	4608      	mov	r0, r1
 800c208:	4611      	mov	r1, r2
 800c20a:	2200      	movs	r2, #0
 800c20c:	602a      	str	r2, [r5, #0]
 800c20e:	461a      	mov	r2, r3
 800c210:	f7f6 febf 	bl	8002f92 <_read>
 800c214:	1c43      	adds	r3, r0, #1
 800c216:	d102      	bne.n	800c21e <_read_r+0x1e>
 800c218:	682b      	ldr	r3, [r5, #0]
 800c21a:	b103      	cbz	r3, 800c21e <_read_r+0x1e>
 800c21c:	6023      	str	r3, [r4, #0]
 800c21e:	bd38      	pop	{r3, r4, r5, pc}
 800c220:	200006f8 	.word	0x200006f8

0800c224 <_sbrk_r>:
 800c224:	b538      	push	{r3, r4, r5, lr}
 800c226:	4d06      	ldr	r5, [pc, #24]	@ (800c240 <_sbrk_r+0x1c>)
 800c228:	2300      	movs	r3, #0
 800c22a:	4604      	mov	r4, r0
 800c22c:	4608      	mov	r0, r1
 800c22e:	602b      	str	r3, [r5, #0]
 800c230:	f7f6 ff00 	bl	8003034 <_sbrk>
 800c234:	1c43      	adds	r3, r0, #1
 800c236:	d102      	bne.n	800c23e <_sbrk_r+0x1a>
 800c238:	682b      	ldr	r3, [r5, #0]
 800c23a:	b103      	cbz	r3, 800c23e <_sbrk_r+0x1a>
 800c23c:	6023      	str	r3, [r4, #0]
 800c23e:	bd38      	pop	{r3, r4, r5, pc}
 800c240:	200006f8 	.word	0x200006f8

0800c244 <_write_r>:
 800c244:	b538      	push	{r3, r4, r5, lr}
 800c246:	4d07      	ldr	r5, [pc, #28]	@ (800c264 <_write_r+0x20>)
 800c248:	4604      	mov	r4, r0
 800c24a:	4608      	mov	r0, r1
 800c24c:	4611      	mov	r1, r2
 800c24e:	2200      	movs	r2, #0
 800c250:	602a      	str	r2, [r5, #0]
 800c252:	461a      	mov	r2, r3
 800c254:	f7f6 fb16 	bl	8002884 <_write>
 800c258:	1c43      	adds	r3, r0, #1
 800c25a:	d102      	bne.n	800c262 <_write_r+0x1e>
 800c25c:	682b      	ldr	r3, [r5, #0]
 800c25e:	b103      	cbz	r3, 800c262 <_write_r+0x1e>
 800c260:	6023      	str	r3, [r4, #0]
 800c262:	bd38      	pop	{r3, r4, r5, pc}
 800c264:	200006f8 	.word	0x200006f8

0800c268 <_close_r>:
 800c268:	b538      	push	{r3, r4, r5, lr}
 800c26a:	4d06      	ldr	r5, [pc, #24]	@ (800c284 <_close_r+0x1c>)
 800c26c:	2300      	movs	r3, #0
 800c26e:	4604      	mov	r4, r0
 800c270:	4608      	mov	r0, r1
 800c272:	602b      	str	r3, [r5, #0]
 800c274:	f7f6 feaa 	bl	8002fcc <_close>
 800c278:	1c43      	adds	r3, r0, #1
 800c27a:	d102      	bne.n	800c282 <_close_r+0x1a>
 800c27c:	682b      	ldr	r3, [r5, #0]
 800c27e:	b103      	cbz	r3, 800c282 <_close_r+0x1a>
 800c280:	6023      	str	r3, [r4, #0]
 800c282:	bd38      	pop	{r3, r4, r5, pc}
 800c284:	200006f8 	.word	0x200006f8

0800c288 <__assert_func>:
 800c288:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c28a:	4614      	mov	r4, r2
 800c28c:	461a      	mov	r2, r3
 800c28e:	4b09      	ldr	r3, [pc, #36]	@ (800c2b4 <__assert_func+0x2c>)
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	4605      	mov	r5, r0
 800c294:	68d8      	ldr	r0, [r3, #12]
 800c296:	b14c      	cbz	r4, 800c2ac <__assert_func+0x24>
 800c298:	4b07      	ldr	r3, [pc, #28]	@ (800c2b8 <__assert_func+0x30>)
 800c29a:	9100      	str	r1, [sp, #0]
 800c29c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c2a0:	4906      	ldr	r1, [pc, #24]	@ (800c2bc <__assert_func+0x34>)
 800c2a2:	462b      	mov	r3, r5
 800c2a4:	f000 f874 	bl	800c390 <fiprintf>
 800c2a8:	f000 f884 	bl	800c3b4 <abort>
 800c2ac:	4b04      	ldr	r3, [pc, #16]	@ (800c2c0 <__assert_func+0x38>)
 800c2ae:	461c      	mov	r4, r3
 800c2b0:	e7f3      	b.n	800c29a <__assert_func+0x12>
 800c2b2:	bf00      	nop
 800c2b4:	20000198 	.word	0x20000198
 800c2b8:	0800cee2 	.word	0x0800cee2
 800c2bc:	0800ceef 	.word	0x0800ceef
 800c2c0:	0800cf1d 	.word	0x0800cf1d

0800c2c4 <_calloc_r>:
 800c2c4:	b570      	push	{r4, r5, r6, lr}
 800c2c6:	fba1 5402 	umull	r5, r4, r1, r2
 800c2ca:	b934      	cbnz	r4, 800c2da <_calloc_r+0x16>
 800c2cc:	4629      	mov	r1, r5
 800c2ce:	f7ff f8f9 	bl	800b4c4 <_malloc_r>
 800c2d2:	4606      	mov	r6, r0
 800c2d4:	b928      	cbnz	r0, 800c2e2 <_calloc_r+0x1e>
 800c2d6:	4630      	mov	r0, r6
 800c2d8:	bd70      	pop	{r4, r5, r6, pc}
 800c2da:	220c      	movs	r2, #12
 800c2dc:	6002      	str	r2, [r0, #0]
 800c2de:	2600      	movs	r6, #0
 800c2e0:	e7f9      	b.n	800c2d6 <_calloc_r+0x12>
 800c2e2:	462a      	mov	r2, r5
 800c2e4:	4621      	mov	r1, r4
 800c2e6:	f7fd fd6f 	bl	8009dc8 <memset>
 800c2ea:	e7f4      	b.n	800c2d6 <_calloc_r+0x12>

0800c2ec <_free_r>:
 800c2ec:	b538      	push	{r3, r4, r5, lr}
 800c2ee:	4605      	mov	r5, r0
 800c2f0:	2900      	cmp	r1, #0
 800c2f2:	d041      	beq.n	800c378 <_free_r+0x8c>
 800c2f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2f8:	1f0c      	subs	r4, r1, #4
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	bfb8      	it	lt
 800c2fe:	18e4      	addlt	r4, r4, r3
 800c300:	f7ff fa1e 	bl	800b740 <__malloc_lock>
 800c304:	4a1d      	ldr	r2, [pc, #116]	@ (800c37c <_free_r+0x90>)
 800c306:	6813      	ldr	r3, [r2, #0]
 800c308:	b933      	cbnz	r3, 800c318 <_free_r+0x2c>
 800c30a:	6063      	str	r3, [r4, #4]
 800c30c:	6014      	str	r4, [r2, #0]
 800c30e:	4628      	mov	r0, r5
 800c310:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c314:	f7ff ba1a 	b.w	800b74c <__malloc_unlock>
 800c318:	42a3      	cmp	r3, r4
 800c31a:	d908      	bls.n	800c32e <_free_r+0x42>
 800c31c:	6820      	ldr	r0, [r4, #0]
 800c31e:	1821      	adds	r1, r4, r0
 800c320:	428b      	cmp	r3, r1
 800c322:	bf01      	itttt	eq
 800c324:	6819      	ldreq	r1, [r3, #0]
 800c326:	685b      	ldreq	r3, [r3, #4]
 800c328:	1809      	addeq	r1, r1, r0
 800c32a:	6021      	streq	r1, [r4, #0]
 800c32c:	e7ed      	b.n	800c30a <_free_r+0x1e>
 800c32e:	461a      	mov	r2, r3
 800c330:	685b      	ldr	r3, [r3, #4]
 800c332:	b10b      	cbz	r3, 800c338 <_free_r+0x4c>
 800c334:	42a3      	cmp	r3, r4
 800c336:	d9fa      	bls.n	800c32e <_free_r+0x42>
 800c338:	6811      	ldr	r1, [r2, #0]
 800c33a:	1850      	adds	r0, r2, r1
 800c33c:	42a0      	cmp	r0, r4
 800c33e:	d10b      	bne.n	800c358 <_free_r+0x6c>
 800c340:	6820      	ldr	r0, [r4, #0]
 800c342:	4401      	add	r1, r0
 800c344:	1850      	adds	r0, r2, r1
 800c346:	4283      	cmp	r3, r0
 800c348:	6011      	str	r1, [r2, #0]
 800c34a:	d1e0      	bne.n	800c30e <_free_r+0x22>
 800c34c:	6818      	ldr	r0, [r3, #0]
 800c34e:	685b      	ldr	r3, [r3, #4]
 800c350:	6053      	str	r3, [r2, #4]
 800c352:	4408      	add	r0, r1
 800c354:	6010      	str	r0, [r2, #0]
 800c356:	e7da      	b.n	800c30e <_free_r+0x22>
 800c358:	d902      	bls.n	800c360 <_free_r+0x74>
 800c35a:	230c      	movs	r3, #12
 800c35c:	602b      	str	r3, [r5, #0]
 800c35e:	e7d6      	b.n	800c30e <_free_r+0x22>
 800c360:	6820      	ldr	r0, [r4, #0]
 800c362:	1821      	adds	r1, r4, r0
 800c364:	428b      	cmp	r3, r1
 800c366:	bf04      	itt	eq
 800c368:	6819      	ldreq	r1, [r3, #0]
 800c36a:	685b      	ldreq	r3, [r3, #4]
 800c36c:	6063      	str	r3, [r4, #4]
 800c36e:	bf04      	itt	eq
 800c370:	1809      	addeq	r1, r1, r0
 800c372:	6021      	streq	r1, [r4, #0]
 800c374:	6054      	str	r4, [r2, #4]
 800c376:	e7ca      	b.n	800c30e <_free_r+0x22>
 800c378:	bd38      	pop	{r3, r4, r5, pc}
 800c37a:	bf00      	nop
 800c37c:	200006f4 	.word	0x200006f4

0800c380 <_malloc_usable_size_r>:
 800c380:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c384:	1f18      	subs	r0, r3, #4
 800c386:	2b00      	cmp	r3, #0
 800c388:	bfbc      	itt	lt
 800c38a:	580b      	ldrlt	r3, [r1, r0]
 800c38c:	18c0      	addlt	r0, r0, r3
 800c38e:	4770      	bx	lr

0800c390 <fiprintf>:
 800c390:	b40e      	push	{r1, r2, r3}
 800c392:	b503      	push	{r0, r1, lr}
 800c394:	4601      	mov	r1, r0
 800c396:	ab03      	add	r3, sp, #12
 800c398:	4805      	ldr	r0, [pc, #20]	@ (800c3b0 <fiprintf+0x20>)
 800c39a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c39e:	6800      	ldr	r0, [r0, #0]
 800c3a0:	9301      	str	r3, [sp, #4]
 800c3a2:	f000 f837 	bl	800c414 <_vfiprintf_r>
 800c3a6:	b002      	add	sp, #8
 800c3a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c3ac:	b003      	add	sp, #12
 800c3ae:	4770      	bx	lr
 800c3b0:	20000198 	.word	0x20000198

0800c3b4 <abort>:
 800c3b4:	b508      	push	{r3, lr}
 800c3b6:	2006      	movs	r0, #6
 800c3b8:	f000 fa62 	bl	800c880 <raise>
 800c3bc:	2001      	movs	r0, #1
 800c3be:	f7f6 fddd 	bl	8002f7c <_exit>

0800c3c2 <__sfputc_r>:
 800c3c2:	6893      	ldr	r3, [r2, #8]
 800c3c4:	3b01      	subs	r3, #1
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	b410      	push	{r4}
 800c3ca:	6093      	str	r3, [r2, #8]
 800c3cc:	da08      	bge.n	800c3e0 <__sfputc_r+0x1e>
 800c3ce:	6994      	ldr	r4, [r2, #24]
 800c3d0:	42a3      	cmp	r3, r4
 800c3d2:	db01      	blt.n	800c3d8 <__sfputc_r+0x16>
 800c3d4:	290a      	cmp	r1, #10
 800c3d6:	d103      	bne.n	800c3e0 <__sfputc_r+0x1e>
 800c3d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c3dc:	f000 b932 	b.w	800c644 <__swbuf_r>
 800c3e0:	6813      	ldr	r3, [r2, #0]
 800c3e2:	1c58      	adds	r0, r3, #1
 800c3e4:	6010      	str	r0, [r2, #0]
 800c3e6:	7019      	strb	r1, [r3, #0]
 800c3e8:	4608      	mov	r0, r1
 800c3ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c3ee:	4770      	bx	lr

0800c3f0 <__sfputs_r>:
 800c3f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3f2:	4606      	mov	r6, r0
 800c3f4:	460f      	mov	r7, r1
 800c3f6:	4614      	mov	r4, r2
 800c3f8:	18d5      	adds	r5, r2, r3
 800c3fa:	42ac      	cmp	r4, r5
 800c3fc:	d101      	bne.n	800c402 <__sfputs_r+0x12>
 800c3fe:	2000      	movs	r0, #0
 800c400:	e007      	b.n	800c412 <__sfputs_r+0x22>
 800c402:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c406:	463a      	mov	r2, r7
 800c408:	4630      	mov	r0, r6
 800c40a:	f7ff ffda 	bl	800c3c2 <__sfputc_r>
 800c40e:	1c43      	adds	r3, r0, #1
 800c410:	d1f3      	bne.n	800c3fa <__sfputs_r+0xa>
 800c412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c414 <_vfiprintf_r>:
 800c414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c418:	460d      	mov	r5, r1
 800c41a:	b09d      	sub	sp, #116	@ 0x74
 800c41c:	4614      	mov	r4, r2
 800c41e:	4698      	mov	r8, r3
 800c420:	4606      	mov	r6, r0
 800c422:	b118      	cbz	r0, 800c42c <_vfiprintf_r+0x18>
 800c424:	6a03      	ldr	r3, [r0, #32]
 800c426:	b90b      	cbnz	r3, 800c42c <_vfiprintf_r+0x18>
 800c428:	f7fc fe12 	bl	8009050 <__sinit>
 800c42c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c42e:	07d9      	lsls	r1, r3, #31
 800c430:	d405      	bmi.n	800c43e <_vfiprintf_r+0x2a>
 800c432:	89ab      	ldrh	r3, [r5, #12]
 800c434:	059a      	lsls	r2, r3, #22
 800c436:	d402      	bmi.n	800c43e <_vfiprintf_r+0x2a>
 800c438:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c43a:	f7fd fd0a 	bl	8009e52 <__retarget_lock_acquire_recursive>
 800c43e:	89ab      	ldrh	r3, [r5, #12]
 800c440:	071b      	lsls	r3, r3, #28
 800c442:	d501      	bpl.n	800c448 <_vfiprintf_r+0x34>
 800c444:	692b      	ldr	r3, [r5, #16]
 800c446:	b99b      	cbnz	r3, 800c470 <_vfiprintf_r+0x5c>
 800c448:	4629      	mov	r1, r5
 800c44a:	4630      	mov	r0, r6
 800c44c:	f000 f938 	bl	800c6c0 <__swsetup_r>
 800c450:	b170      	cbz	r0, 800c470 <_vfiprintf_r+0x5c>
 800c452:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c454:	07dc      	lsls	r4, r3, #31
 800c456:	d504      	bpl.n	800c462 <_vfiprintf_r+0x4e>
 800c458:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c45c:	b01d      	add	sp, #116	@ 0x74
 800c45e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c462:	89ab      	ldrh	r3, [r5, #12]
 800c464:	0598      	lsls	r0, r3, #22
 800c466:	d4f7      	bmi.n	800c458 <_vfiprintf_r+0x44>
 800c468:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c46a:	f7fd fcf3 	bl	8009e54 <__retarget_lock_release_recursive>
 800c46e:	e7f3      	b.n	800c458 <_vfiprintf_r+0x44>
 800c470:	2300      	movs	r3, #0
 800c472:	9309      	str	r3, [sp, #36]	@ 0x24
 800c474:	2320      	movs	r3, #32
 800c476:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c47a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c47e:	2330      	movs	r3, #48	@ 0x30
 800c480:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c630 <_vfiprintf_r+0x21c>
 800c484:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c488:	f04f 0901 	mov.w	r9, #1
 800c48c:	4623      	mov	r3, r4
 800c48e:	469a      	mov	sl, r3
 800c490:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c494:	b10a      	cbz	r2, 800c49a <_vfiprintf_r+0x86>
 800c496:	2a25      	cmp	r2, #37	@ 0x25
 800c498:	d1f9      	bne.n	800c48e <_vfiprintf_r+0x7a>
 800c49a:	ebba 0b04 	subs.w	fp, sl, r4
 800c49e:	d00b      	beq.n	800c4b8 <_vfiprintf_r+0xa4>
 800c4a0:	465b      	mov	r3, fp
 800c4a2:	4622      	mov	r2, r4
 800c4a4:	4629      	mov	r1, r5
 800c4a6:	4630      	mov	r0, r6
 800c4a8:	f7ff ffa2 	bl	800c3f0 <__sfputs_r>
 800c4ac:	3001      	adds	r0, #1
 800c4ae:	f000 80a7 	beq.w	800c600 <_vfiprintf_r+0x1ec>
 800c4b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c4b4:	445a      	add	r2, fp
 800c4b6:	9209      	str	r2, [sp, #36]	@ 0x24
 800c4b8:	f89a 3000 	ldrb.w	r3, [sl]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	f000 809f 	beq.w	800c600 <_vfiprintf_r+0x1ec>
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c4c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c4cc:	f10a 0a01 	add.w	sl, sl, #1
 800c4d0:	9304      	str	r3, [sp, #16]
 800c4d2:	9307      	str	r3, [sp, #28]
 800c4d4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c4d8:	931a      	str	r3, [sp, #104]	@ 0x68
 800c4da:	4654      	mov	r4, sl
 800c4dc:	2205      	movs	r2, #5
 800c4de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4e2:	4853      	ldr	r0, [pc, #332]	@ (800c630 <_vfiprintf_r+0x21c>)
 800c4e4:	f7f3 fe74 	bl	80001d0 <memchr>
 800c4e8:	9a04      	ldr	r2, [sp, #16]
 800c4ea:	b9d8      	cbnz	r0, 800c524 <_vfiprintf_r+0x110>
 800c4ec:	06d1      	lsls	r1, r2, #27
 800c4ee:	bf44      	itt	mi
 800c4f0:	2320      	movmi	r3, #32
 800c4f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c4f6:	0713      	lsls	r3, r2, #28
 800c4f8:	bf44      	itt	mi
 800c4fa:	232b      	movmi	r3, #43	@ 0x2b
 800c4fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c500:	f89a 3000 	ldrb.w	r3, [sl]
 800c504:	2b2a      	cmp	r3, #42	@ 0x2a
 800c506:	d015      	beq.n	800c534 <_vfiprintf_r+0x120>
 800c508:	9a07      	ldr	r2, [sp, #28]
 800c50a:	4654      	mov	r4, sl
 800c50c:	2000      	movs	r0, #0
 800c50e:	f04f 0c0a 	mov.w	ip, #10
 800c512:	4621      	mov	r1, r4
 800c514:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c518:	3b30      	subs	r3, #48	@ 0x30
 800c51a:	2b09      	cmp	r3, #9
 800c51c:	d94b      	bls.n	800c5b6 <_vfiprintf_r+0x1a2>
 800c51e:	b1b0      	cbz	r0, 800c54e <_vfiprintf_r+0x13a>
 800c520:	9207      	str	r2, [sp, #28]
 800c522:	e014      	b.n	800c54e <_vfiprintf_r+0x13a>
 800c524:	eba0 0308 	sub.w	r3, r0, r8
 800c528:	fa09 f303 	lsl.w	r3, r9, r3
 800c52c:	4313      	orrs	r3, r2
 800c52e:	9304      	str	r3, [sp, #16]
 800c530:	46a2      	mov	sl, r4
 800c532:	e7d2      	b.n	800c4da <_vfiprintf_r+0xc6>
 800c534:	9b03      	ldr	r3, [sp, #12]
 800c536:	1d19      	adds	r1, r3, #4
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	9103      	str	r1, [sp, #12]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	bfbb      	ittet	lt
 800c540:	425b      	neglt	r3, r3
 800c542:	f042 0202 	orrlt.w	r2, r2, #2
 800c546:	9307      	strge	r3, [sp, #28]
 800c548:	9307      	strlt	r3, [sp, #28]
 800c54a:	bfb8      	it	lt
 800c54c:	9204      	strlt	r2, [sp, #16]
 800c54e:	7823      	ldrb	r3, [r4, #0]
 800c550:	2b2e      	cmp	r3, #46	@ 0x2e
 800c552:	d10a      	bne.n	800c56a <_vfiprintf_r+0x156>
 800c554:	7863      	ldrb	r3, [r4, #1]
 800c556:	2b2a      	cmp	r3, #42	@ 0x2a
 800c558:	d132      	bne.n	800c5c0 <_vfiprintf_r+0x1ac>
 800c55a:	9b03      	ldr	r3, [sp, #12]
 800c55c:	1d1a      	adds	r2, r3, #4
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	9203      	str	r2, [sp, #12]
 800c562:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c566:	3402      	adds	r4, #2
 800c568:	9305      	str	r3, [sp, #20]
 800c56a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c640 <_vfiprintf_r+0x22c>
 800c56e:	7821      	ldrb	r1, [r4, #0]
 800c570:	2203      	movs	r2, #3
 800c572:	4650      	mov	r0, sl
 800c574:	f7f3 fe2c 	bl	80001d0 <memchr>
 800c578:	b138      	cbz	r0, 800c58a <_vfiprintf_r+0x176>
 800c57a:	9b04      	ldr	r3, [sp, #16]
 800c57c:	eba0 000a 	sub.w	r0, r0, sl
 800c580:	2240      	movs	r2, #64	@ 0x40
 800c582:	4082      	lsls	r2, r0
 800c584:	4313      	orrs	r3, r2
 800c586:	3401      	adds	r4, #1
 800c588:	9304      	str	r3, [sp, #16]
 800c58a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c58e:	4829      	ldr	r0, [pc, #164]	@ (800c634 <_vfiprintf_r+0x220>)
 800c590:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c594:	2206      	movs	r2, #6
 800c596:	f7f3 fe1b 	bl	80001d0 <memchr>
 800c59a:	2800      	cmp	r0, #0
 800c59c:	d03f      	beq.n	800c61e <_vfiprintf_r+0x20a>
 800c59e:	4b26      	ldr	r3, [pc, #152]	@ (800c638 <_vfiprintf_r+0x224>)
 800c5a0:	bb1b      	cbnz	r3, 800c5ea <_vfiprintf_r+0x1d6>
 800c5a2:	9b03      	ldr	r3, [sp, #12]
 800c5a4:	3307      	adds	r3, #7
 800c5a6:	f023 0307 	bic.w	r3, r3, #7
 800c5aa:	3308      	adds	r3, #8
 800c5ac:	9303      	str	r3, [sp, #12]
 800c5ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5b0:	443b      	add	r3, r7
 800c5b2:	9309      	str	r3, [sp, #36]	@ 0x24
 800c5b4:	e76a      	b.n	800c48c <_vfiprintf_r+0x78>
 800c5b6:	fb0c 3202 	mla	r2, ip, r2, r3
 800c5ba:	460c      	mov	r4, r1
 800c5bc:	2001      	movs	r0, #1
 800c5be:	e7a8      	b.n	800c512 <_vfiprintf_r+0xfe>
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	3401      	adds	r4, #1
 800c5c4:	9305      	str	r3, [sp, #20]
 800c5c6:	4619      	mov	r1, r3
 800c5c8:	f04f 0c0a 	mov.w	ip, #10
 800c5cc:	4620      	mov	r0, r4
 800c5ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c5d2:	3a30      	subs	r2, #48	@ 0x30
 800c5d4:	2a09      	cmp	r2, #9
 800c5d6:	d903      	bls.n	800c5e0 <_vfiprintf_r+0x1cc>
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d0c6      	beq.n	800c56a <_vfiprintf_r+0x156>
 800c5dc:	9105      	str	r1, [sp, #20]
 800c5de:	e7c4      	b.n	800c56a <_vfiprintf_r+0x156>
 800c5e0:	fb0c 2101 	mla	r1, ip, r1, r2
 800c5e4:	4604      	mov	r4, r0
 800c5e6:	2301      	movs	r3, #1
 800c5e8:	e7f0      	b.n	800c5cc <_vfiprintf_r+0x1b8>
 800c5ea:	ab03      	add	r3, sp, #12
 800c5ec:	9300      	str	r3, [sp, #0]
 800c5ee:	462a      	mov	r2, r5
 800c5f0:	4b12      	ldr	r3, [pc, #72]	@ (800c63c <_vfiprintf_r+0x228>)
 800c5f2:	a904      	add	r1, sp, #16
 800c5f4:	4630      	mov	r0, r6
 800c5f6:	f7fb feb9 	bl	800836c <_printf_float>
 800c5fa:	4607      	mov	r7, r0
 800c5fc:	1c78      	adds	r0, r7, #1
 800c5fe:	d1d6      	bne.n	800c5ae <_vfiprintf_r+0x19a>
 800c600:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c602:	07d9      	lsls	r1, r3, #31
 800c604:	d405      	bmi.n	800c612 <_vfiprintf_r+0x1fe>
 800c606:	89ab      	ldrh	r3, [r5, #12]
 800c608:	059a      	lsls	r2, r3, #22
 800c60a:	d402      	bmi.n	800c612 <_vfiprintf_r+0x1fe>
 800c60c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c60e:	f7fd fc21 	bl	8009e54 <__retarget_lock_release_recursive>
 800c612:	89ab      	ldrh	r3, [r5, #12]
 800c614:	065b      	lsls	r3, r3, #25
 800c616:	f53f af1f 	bmi.w	800c458 <_vfiprintf_r+0x44>
 800c61a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c61c:	e71e      	b.n	800c45c <_vfiprintf_r+0x48>
 800c61e:	ab03      	add	r3, sp, #12
 800c620:	9300      	str	r3, [sp, #0]
 800c622:	462a      	mov	r2, r5
 800c624:	4b05      	ldr	r3, [pc, #20]	@ (800c63c <_vfiprintf_r+0x228>)
 800c626:	a904      	add	r1, sp, #16
 800c628:	4630      	mov	r0, r6
 800c62a:	f7fc f937 	bl	800889c <_printf_i>
 800c62e:	e7e4      	b.n	800c5fa <_vfiprintf_r+0x1e6>
 800c630:	0800ce78 	.word	0x0800ce78
 800c634:	0800ce82 	.word	0x0800ce82
 800c638:	0800836d 	.word	0x0800836d
 800c63c:	0800c3f1 	.word	0x0800c3f1
 800c640:	0800ce7e 	.word	0x0800ce7e

0800c644 <__swbuf_r>:
 800c644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c646:	460e      	mov	r6, r1
 800c648:	4614      	mov	r4, r2
 800c64a:	4605      	mov	r5, r0
 800c64c:	b118      	cbz	r0, 800c656 <__swbuf_r+0x12>
 800c64e:	6a03      	ldr	r3, [r0, #32]
 800c650:	b90b      	cbnz	r3, 800c656 <__swbuf_r+0x12>
 800c652:	f7fc fcfd 	bl	8009050 <__sinit>
 800c656:	69a3      	ldr	r3, [r4, #24]
 800c658:	60a3      	str	r3, [r4, #8]
 800c65a:	89a3      	ldrh	r3, [r4, #12]
 800c65c:	071a      	lsls	r2, r3, #28
 800c65e:	d501      	bpl.n	800c664 <__swbuf_r+0x20>
 800c660:	6923      	ldr	r3, [r4, #16]
 800c662:	b943      	cbnz	r3, 800c676 <__swbuf_r+0x32>
 800c664:	4621      	mov	r1, r4
 800c666:	4628      	mov	r0, r5
 800c668:	f000 f82a 	bl	800c6c0 <__swsetup_r>
 800c66c:	b118      	cbz	r0, 800c676 <__swbuf_r+0x32>
 800c66e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800c672:	4638      	mov	r0, r7
 800c674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c676:	6823      	ldr	r3, [r4, #0]
 800c678:	6922      	ldr	r2, [r4, #16]
 800c67a:	1a98      	subs	r0, r3, r2
 800c67c:	6963      	ldr	r3, [r4, #20]
 800c67e:	b2f6      	uxtb	r6, r6
 800c680:	4283      	cmp	r3, r0
 800c682:	4637      	mov	r7, r6
 800c684:	dc05      	bgt.n	800c692 <__swbuf_r+0x4e>
 800c686:	4621      	mov	r1, r4
 800c688:	4628      	mov	r0, r5
 800c68a:	f7ff f831 	bl	800b6f0 <_fflush_r>
 800c68e:	2800      	cmp	r0, #0
 800c690:	d1ed      	bne.n	800c66e <__swbuf_r+0x2a>
 800c692:	68a3      	ldr	r3, [r4, #8]
 800c694:	3b01      	subs	r3, #1
 800c696:	60a3      	str	r3, [r4, #8]
 800c698:	6823      	ldr	r3, [r4, #0]
 800c69a:	1c5a      	adds	r2, r3, #1
 800c69c:	6022      	str	r2, [r4, #0]
 800c69e:	701e      	strb	r6, [r3, #0]
 800c6a0:	6962      	ldr	r2, [r4, #20]
 800c6a2:	1c43      	adds	r3, r0, #1
 800c6a4:	429a      	cmp	r2, r3
 800c6a6:	d004      	beq.n	800c6b2 <__swbuf_r+0x6e>
 800c6a8:	89a3      	ldrh	r3, [r4, #12]
 800c6aa:	07db      	lsls	r3, r3, #31
 800c6ac:	d5e1      	bpl.n	800c672 <__swbuf_r+0x2e>
 800c6ae:	2e0a      	cmp	r6, #10
 800c6b0:	d1df      	bne.n	800c672 <__swbuf_r+0x2e>
 800c6b2:	4621      	mov	r1, r4
 800c6b4:	4628      	mov	r0, r5
 800c6b6:	f7ff f81b 	bl	800b6f0 <_fflush_r>
 800c6ba:	2800      	cmp	r0, #0
 800c6bc:	d0d9      	beq.n	800c672 <__swbuf_r+0x2e>
 800c6be:	e7d6      	b.n	800c66e <__swbuf_r+0x2a>

0800c6c0 <__swsetup_r>:
 800c6c0:	b538      	push	{r3, r4, r5, lr}
 800c6c2:	4b29      	ldr	r3, [pc, #164]	@ (800c768 <__swsetup_r+0xa8>)
 800c6c4:	4605      	mov	r5, r0
 800c6c6:	6818      	ldr	r0, [r3, #0]
 800c6c8:	460c      	mov	r4, r1
 800c6ca:	b118      	cbz	r0, 800c6d4 <__swsetup_r+0x14>
 800c6cc:	6a03      	ldr	r3, [r0, #32]
 800c6ce:	b90b      	cbnz	r3, 800c6d4 <__swsetup_r+0x14>
 800c6d0:	f7fc fcbe 	bl	8009050 <__sinit>
 800c6d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c6d8:	0719      	lsls	r1, r3, #28
 800c6da:	d422      	bmi.n	800c722 <__swsetup_r+0x62>
 800c6dc:	06da      	lsls	r2, r3, #27
 800c6de:	d407      	bmi.n	800c6f0 <__swsetup_r+0x30>
 800c6e0:	2209      	movs	r2, #9
 800c6e2:	602a      	str	r2, [r5, #0]
 800c6e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c6e8:	81a3      	strh	r3, [r4, #12]
 800c6ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c6ee:	e033      	b.n	800c758 <__swsetup_r+0x98>
 800c6f0:	0758      	lsls	r0, r3, #29
 800c6f2:	d512      	bpl.n	800c71a <__swsetup_r+0x5a>
 800c6f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c6f6:	b141      	cbz	r1, 800c70a <__swsetup_r+0x4a>
 800c6f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c6fc:	4299      	cmp	r1, r3
 800c6fe:	d002      	beq.n	800c706 <__swsetup_r+0x46>
 800c700:	4628      	mov	r0, r5
 800c702:	f7ff fdf3 	bl	800c2ec <_free_r>
 800c706:	2300      	movs	r3, #0
 800c708:	6363      	str	r3, [r4, #52]	@ 0x34
 800c70a:	89a3      	ldrh	r3, [r4, #12]
 800c70c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c710:	81a3      	strh	r3, [r4, #12]
 800c712:	2300      	movs	r3, #0
 800c714:	6063      	str	r3, [r4, #4]
 800c716:	6923      	ldr	r3, [r4, #16]
 800c718:	6023      	str	r3, [r4, #0]
 800c71a:	89a3      	ldrh	r3, [r4, #12]
 800c71c:	f043 0308 	orr.w	r3, r3, #8
 800c720:	81a3      	strh	r3, [r4, #12]
 800c722:	6923      	ldr	r3, [r4, #16]
 800c724:	b94b      	cbnz	r3, 800c73a <__swsetup_r+0x7a>
 800c726:	89a3      	ldrh	r3, [r4, #12]
 800c728:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c72c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c730:	d003      	beq.n	800c73a <__swsetup_r+0x7a>
 800c732:	4621      	mov	r1, r4
 800c734:	4628      	mov	r0, r5
 800c736:	f000 f83f 	bl	800c7b8 <__smakebuf_r>
 800c73a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c73e:	f013 0201 	ands.w	r2, r3, #1
 800c742:	d00a      	beq.n	800c75a <__swsetup_r+0x9a>
 800c744:	2200      	movs	r2, #0
 800c746:	60a2      	str	r2, [r4, #8]
 800c748:	6962      	ldr	r2, [r4, #20]
 800c74a:	4252      	negs	r2, r2
 800c74c:	61a2      	str	r2, [r4, #24]
 800c74e:	6922      	ldr	r2, [r4, #16]
 800c750:	b942      	cbnz	r2, 800c764 <__swsetup_r+0xa4>
 800c752:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c756:	d1c5      	bne.n	800c6e4 <__swsetup_r+0x24>
 800c758:	bd38      	pop	{r3, r4, r5, pc}
 800c75a:	0799      	lsls	r1, r3, #30
 800c75c:	bf58      	it	pl
 800c75e:	6962      	ldrpl	r2, [r4, #20]
 800c760:	60a2      	str	r2, [r4, #8]
 800c762:	e7f4      	b.n	800c74e <__swsetup_r+0x8e>
 800c764:	2000      	movs	r0, #0
 800c766:	e7f7      	b.n	800c758 <__swsetup_r+0x98>
 800c768:	20000198 	.word	0x20000198

0800c76c <__swhatbuf_r>:
 800c76c:	b570      	push	{r4, r5, r6, lr}
 800c76e:	460c      	mov	r4, r1
 800c770:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c774:	2900      	cmp	r1, #0
 800c776:	b096      	sub	sp, #88	@ 0x58
 800c778:	4615      	mov	r5, r2
 800c77a:	461e      	mov	r6, r3
 800c77c:	da0d      	bge.n	800c79a <__swhatbuf_r+0x2e>
 800c77e:	89a3      	ldrh	r3, [r4, #12]
 800c780:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c784:	f04f 0100 	mov.w	r1, #0
 800c788:	bf14      	ite	ne
 800c78a:	2340      	movne	r3, #64	@ 0x40
 800c78c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c790:	2000      	movs	r0, #0
 800c792:	6031      	str	r1, [r6, #0]
 800c794:	602b      	str	r3, [r5, #0]
 800c796:	b016      	add	sp, #88	@ 0x58
 800c798:	bd70      	pop	{r4, r5, r6, pc}
 800c79a:	466a      	mov	r2, sp
 800c79c:	f000 f89c 	bl	800c8d8 <_fstat_r>
 800c7a0:	2800      	cmp	r0, #0
 800c7a2:	dbec      	blt.n	800c77e <__swhatbuf_r+0x12>
 800c7a4:	9901      	ldr	r1, [sp, #4]
 800c7a6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c7aa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c7ae:	4259      	negs	r1, r3
 800c7b0:	4159      	adcs	r1, r3
 800c7b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c7b6:	e7eb      	b.n	800c790 <__swhatbuf_r+0x24>

0800c7b8 <__smakebuf_r>:
 800c7b8:	898b      	ldrh	r3, [r1, #12]
 800c7ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c7bc:	079d      	lsls	r5, r3, #30
 800c7be:	4606      	mov	r6, r0
 800c7c0:	460c      	mov	r4, r1
 800c7c2:	d507      	bpl.n	800c7d4 <__smakebuf_r+0x1c>
 800c7c4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c7c8:	6023      	str	r3, [r4, #0]
 800c7ca:	6123      	str	r3, [r4, #16]
 800c7cc:	2301      	movs	r3, #1
 800c7ce:	6163      	str	r3, [r4, #20]
 800c7d0:	b003      	add	sp, #12
 800c7d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c7d4:	ab01      	add	r3, sp, #4
 800c7d6:	466a      	mov	r2, sp
 800c7d8:	f7ff ffc8 	bl	800c76c <__swhatbuf_r>
 800c7dc:	9f00      	ldr	r7, [sp, #0]
 800c7de:	4605      	mov	r5, r0
 800c7e0:	4639      	mov	r1, r7
 800c7e2:	4630      	mov	r0, r6
 800c7e4:	f7fe fe6e 	bl	800b4c4 <_malloc_r>
 800c7e8:	b948      	cbnz	r0, 800c7fe <__smakebuf_r+0x46>
 800c7ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7ee:	059a      	lsls	r2, r3, #22
 800c7f0:	d4ee      	bmi.n	800c7d0 <__smakebuf_r+0x18>
 800c7f2:	f023 0303 	bic.w	r3, r3, #3
 800c7f6:	f043 0302 	orr.w	r3, r3, #2
 800c7fa:	81a3      	strh	r3, [r4, #12]
 800c7fc:	e7e2      	b.n	800c7c4 <__smakebuf_r+0xc>
 800c7fe:	89a3      	ldrh	r3, [r4, #12]
 800c800:	6020      	str	r0, [r4, #0]
 800c802:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c806:	81a3      	strh	r3, [r4, #12]
 800c808:	9b01      	ldr	r3, [sp, #4]
 800c80a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c80e:	b15b      	cbz	r3, 800c828 <__smakebuf_r+0x70>
 800c810:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c814:	4630      	mov	r0, r6
 800c816:	f000 f83b 	bl	800c890 <_isatty_r>
 800c81a:	b128      	cbz	r0, 800c828 <__smakebuf_r+0x70>
 800c81c:	89a3      	ldrh	r3, [r4, #12]
 800c81e:	f023 0303 	bic.w	r3, r3, #3
 800c822:	f043 0301 	orr.w	r3, r3, #1
 800c826:	81a3      	strh	r3, [r4, #12]
 800c828:	89a3      	ldrh	r3, [r4, #12]
 800c82a:	431d      	orrs	r5, r3
 800c82c:	81a5      	strh	r5, [r4, #12]
 800c82e:	e7cf      	b.n	800c7d0 <__smakebuf_r+0x18>

0800c830 <_raise_r>:
 800c830:	291f      	cmp	r1, #31
 800c832:	b538      	push	{r3, r4, r5, lr}
 800c834:	4605      	mov	r5, r0
 800c836:	460c      	mov	r4, r1
 800c838:	d904      	bls.n	800c844 <_raise_r+0x14>
 800c83a:	2316      	movs	r3, #22
 800c83c:	6003      	str	r3, [r0, #0]
 800c83e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c842:	bd38      	pop	{r3, r4, r5, pc}
 800c844:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c846:	b112      	cbz	r2, 800c84e <_raise_r+0x1e>
 800c848:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c84c:	b94b      	cbnz	r3, 800c862 <_raise_r+0x32>
 800c84e:	4628      	mov	r0, r5
 800c850:	f000 f840 	bl	800c8d4 <_getpid_r>
 800c854:	4622      	mov	r2, r4
 800c856:	4601      	mov	r1, r0
 800c858:	4628      	mov	r0, r5
 800c85a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c85e:	f000 b827 	b.w	800c8b0 <_kill_r>
 800c862:	2b01      	cmp	r3, #1
 800c864:	d00a      	beq.n	800c87c <_raise_r+0x4c>
 800c866:	1c59      	adds	r1, r3, #1
 800c868:	d103      	bne.n	800c872 <_raise_r+0x42>
 800c86a:	2316      	movs	r3, #22
 800c86c:	6003      	str	r3, [r0, #0]
 800c86e:	2001      	movs	r0, #1
 800c870:	e7e7      	b.n	800c842 <_raise_r+0x12>
 800c872:	2100      	movs	r1, #0
 800c874:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c878:	4620      	mov	r0, r4
 800c87a:	4798      	blx	r3
 800c87c:	2000      	movs	r0, #0
 800c87e:	e7e0      	b.n	800c842 <_raise_r+0x12>

0800c880 <raise>:
 800c880:	4b02      	ldr	r3, [pc, #8]	@ (800c88c <raise+0xc>)
 800c882:	4601      	mov	r1, r0
 800c884:	6818      	ldr	r0, [r3, #0]
 800c886:	f7ff bfd3 	b.w	800c830 <_raise_r>
 800c88a:	bf00      	nop
 800c88c:	20000198 	.word	0x20000198

0800c890 <_isatty_r>:
 800c890:	b538      	push	{r3, r4, r5, lr}
 800c892:	4d06      	ldr	r5, [pc, #24]	@ (800c8ac <_isatty_r+0x1c>)
 800c894:	2300      	movs	r3, #0
 800c896:	4604      	mov	r4, r0
 800c898:	4608      	mov	r0, r1
 800c89a:	602b      	str	r3, [r5, #0]
 800c89c:	f7f6 fbb2 	bl	8003004 <_isatty>
 800c8a0:	1c43      	adds	r3, r0, #1
 800c8a2:	d102      	bne.n	800c8aa <_isatty_r+0x1a>
 800c8a4:	682b      	ldr	r3, [r5, #0]
 800c8a6:	b103      	cbz	r3, 800c8aa <_isatty_r+0x1a>
 800c8a8:	6023      	str	r3, [r4, #0]
 800c8aa:	bd38      	pop	{r3, r4, r5, pc}
 800c8ac:	200006f8 	.word	0x200006f8

0800c8b0 <_kill_r>:
 800c8b0:	b538      	push	{r3, r4, r5, lr}
 800c8b2:	4d07      	ldr	r5, [pc, #28]	@ (800c8d0 <_kill_r+0x20>)
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	4604      	mov	r4, r0
 800c8b8:	4608      	mov	r0, r1
 800c8ba:	4611      	mov	r1, r2
 800c8bc:	602b      	str	r3, [r5, #0]
 800c8be:	f7f6 fb4d 	bl	8002f5c <_kill>
 800c8c2:	1c43      	adds	r3, r0, #1
 800c8c4:	d102      	bne.n	800c8cc <_kill_r+0x1c>
 800c8c6:	682b      	ldr	r3, [r5, #0]
 800c8c8:	b103      	cbz	r3, 800c8cc <_kill_r+0x1c>
 800c8ca:	6023      	str	r3, [r4, #0]
 800c8cc:	bd38      	pop	{r3, r4, r5, pc}
 800c8ce:	bf00      	nop
 800c8d0:	200006f8 	.word	0x200006f8

0800c8d4 <_getpid_r>:
 800c8d4:	f7f6 bb3a 	b.w	8002f4c <_getpid>

0800c8d8 <_fstat_r>:
 800c8d8:	b538      	push	{r3, r4, r5, lr}
 800c8da:	4d07      	ldr	r5, [pc, #28]	@ (800c8f8 <_fstat_r+0x20>)
 800c8dc:	2300      	movs	r3, #0
 800c8de:	4604      	mov	r4, r0
 800c8e0:	4608      	mov	r0, r1
 800c8e2:	4611      	mov	r1, r2
 800c8e4:	602b      	str	r3, [r5, #0]
 800c8e6:	f7f6 fb7d 	bl	8002fe4 <_fstat>
 800c8ea:	1c43      	adds	r3, r0, #1
 800c8ec:	d102      	bne.n	800c8f4 <_fstat_r+0x1c>
 800c8ee:	682b      	ldr	r3, [r5, #0]
 800c8f0:	b103      	cbz	r3, 800c8f4 <_fstat_r+0x1c>
 800c8f2:	6023      	str	r3, [r4, #0]
 800c8f4:	bd38      	pop	{r3, r4, r5, pc}
 800c8f6:	bf00      	nop
 800c8f8:	200006f8 	.word	0x200006f8

0800c8fc <atan2f>:
 800c8fc:	f000 b81e 	b.w	800c93c <__ieee754_atan2f>

0800c900 <sqrtf>:
 800c900:	b508      	push	{r3, lr}
 800c902:	ed2d 8b02 	vpush	{d8}
 800c906:	eeb0 8a40 	vmov.f32	s16, s0
 800c90a:	f000 f8b7 	bl	800ca7c <__ieee754_sqrtf>
 800c90e:	eeb4 8a48 	vcmp.f32	s16, s16
 800c912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c916:	d60c      	bvs.n	800c932 <sqrtf+0x32>
 800c918:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800c938 <sqrtf+0x38>
 800c91c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c924:	d505      	bpl.n	800c932 <sqrtf+0x32>
 800c926:	f7fd fa69 	bl	8009dfc <__errno>
 800c92a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800c92e:	2321      	movs	r3, #33	@ 0x21
 800c930:	6003      	str	r3, [r0, #0]
 800c932:	ecbd 8b02 	vpop	{d8}
 800c936:	bd08      	pop	{r3, pc}
 800c938:	00000000 	.word	0x00000000

0800c93c <__ieee754_atan2f>:
 800c93c:	ee10 2a90 	vmov	r2, s1
 800c940:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800c944:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800c948:	b510      	push	{r4, lr}
 800c94a:	eef0 7a40 	vmov.f32	s15, s0
 800c94e:	d806      	bhi.n	800c95e <__ieee754_atan2f+0x22>
 800c950:	ee10 0a10 	vmov	r0, s0
 800c954:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800c958:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c95c:	d904      	bls.n	800c968 <__ieee754_atan2f+0x2c>
 800c95e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800c962:	eeb0 0a67 	vmov.f32	s0, s15
 800c966:	bd10      	pop	{r4, pc}
 800c968:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800c96c:	d103      	bne.n	800c976 <__ieee754_atan2f+0x3a>
 800c96e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c972:	f000 b8dd 	b.w	800cb30 <atanf>
 800c976:	1794      	asrs	r4, r2, #30
 800c978:	f004 0402 	and.w	r4, r4, #2
 800c97c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800c980:	b943      	cbnz	r3, 800c994 <__ieee754_atan2f+0x58>
 800c982:	2c02      	cmp	r4, #2
 800c984:	d05e      	beq.n	800ca44 <__ieee754_atan2f+0x108>
 800c986:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800ca58 <__ieee754_atan2f+0x11c>
 800c98a:	2c03      	cmp	r4, #3
 800c98c:	bf08      	it	eq
 800c98e:	eef0 7a47 	vmoveq.f32	s15, s14
 800c992:	e7e6      	b.n	800c962 <__ieee754_atan2f+0x26>
 800c994:	b941      	cbnz	r1, 800c9a8 <__ieee754_atan2f+0x6c>
 800c996:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800ca5c <__ieee754_atan2f+0x120>
 800c99a:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800ca60 <__ieee754_atan2f+0x124>
 800c99e:	2800      	cmp	r0, #0
 800c9a0:	bfa8      	it	ge
 800c9a2:	eef0 7a47 	vmovge.f32	s15, s14
 800c9a6:	e7dc      	b.n	800c962 <__ieee754_atan2f+0x26>
 800c9a8:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800c9ac:	d110      	bne.n	800c9d0 <__ieee754_atan2f+0x94>
 800c9ae:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c9b2:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 800c9b6:	d107      	bne.n	800c9c8 <__ieee754_atan2f+0x8c>
 800c9b8:	2c02      	cmp	r4, #2
 800c9ba:	d846      	bhi.n	800ca4a <__ieee754_atan2f+0x10e>
 800c9bc:	4b29      	ldr	r3, [pc, #164]	@ (800ca64 <__ieee754_atan2f+0x128>)
 800c9be:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c9c2:	edd3 7a00 	vldr	s15, [r3]
 800c9c6:	e7cc      	b.n	800c962 <__ieee754_atan2f+0x26>
 800c9c8:	2c02      	cmp	r4, #2
 800c9ca:	d841      	bhi.n	800ca50 <__ieee754_atan2f+0x114>
 800c9cc:	4b26      	ldr	r3, [pc, #152]	@ (800ca68 <__ieee754_atan2f+0x12c>)
 800c9ce:	e7f6      	b.n	800c9be <__ieee754_atan2f+0x82>
 800c9d0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c9d4:	d0df      	beq.n	800c996 <__ieee754_atan2f+0x5a>
 800c9d6:	1a5b      	subs	r3, r3, r1
 800c9d8:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800c9dc:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800c9e0:	da1a      	bge.n	800ca18 <__ieee754_atan2f+0xdc>
 800c9e2:	2a00      	cmp	r2, #0
 800c9e4:	da01      	bge.n	800c9ea <__ieee754_atan2f+0xae>
 800c9e6:	313c      	adds	r1, #60	@ 0x3c
 800c9e8:	db19      	blt.n	800ca1e <__ieee754_atan2f+0xe2>
 800c9ea:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800c9ee:	f000 f973 	bl	800ccd8 <fabsf>
 800c9f2:	f000 f89d 	bl	800cb30 <atanf>
 800c9f6:	eef0 7a40 	vmov.f32	s15, s0
 800c9fa:	2c01      	cmp	r4, #1
 800c9fc:	d012      	beq.n	800ca24 <__ieee754_atan2f+0xe8>
 800c9fe:	2c02      	cmp	r4, #2
 800ca00:	d017      	beq.n	800ca32 <__ieee754_atan2f+0xf6>
 800ca02:	2c00      	cmp	r4, #0
 800ca04:	d0ad      	beq.n	800c962 <__ieee754_atan2f+0x26>
 800ca06:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800ca6c <__ieee754_atan2f+0x130>
 800ca0a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ca0e:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800ca70 <__ieee754_atan2f+0x134>
 800ca12:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ca16:	e7a4      	b.n	800c962 <__ieee754_atan2f+0x26>
 800ca18:	eddf 7a11 	vldr	s15, [pc, #68]	@ 800ca60 <__ieee754_atan2f+0x124>
 800ca1c:	e7ed      	b.n	800c9fa <__ieee754_atan2f+0xbe>
 800ca1e:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800ca74 <__ieee754_atan2f+0x138>
 800ca22:	e7ea      	b.n	800c9fa <__ieee754_atan2f+0xbe>
 800ca24:	ee17 3a90 	vmov	r3, s15
 800ca28:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800ca2c:	ee07 3a90 	vmov	s15, r3
 800ca30:	e797      	b.n	800c962 <__ieee754_atan2f+0x26>
 800ca32:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800ca6c <__ieee754_atan2f+0x130>
 800ca36:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ca3a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800ca70 <__ieee754_atan2f+0x134>
 800ca3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ca42:	e78e      	b.n	800c962 <__ieee754_atan2f+0x26>
 800ca44:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800ca70 <__ieee754_atan2f+0x134>
 800ca48:	e78b      	b.n	800c962 <__ieee754_atan2f+0x26>
 800ca4a:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800ca78 <__ieee754_atan2f+0x13c>
 800ca4e:	e788      	b.n	800c962 <__ieee754_atan2f+0x26>
 800ca50:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800ca74 <__ieee754_atan2f+0x138>
 800ca54:	e785      	b.n	800c962 <__ieee754_atan2f+0x26>
 800ca56:	bf00      	nop
 800ca58:	c0490fdb 	.word	0xc0490fdb
 800ca5c:	bfc90fdb 	.word	0xbfc90fdb
 800ca60:	3fc90fdb 	.word	0x3fc90fdb
 800ca64:	0800d17c 	.word	0x0800d17c
 800ca68:	0800d170 	.word	0x0800d170
 800ca6c:	33bbbd2e 	.word	0x33bbbd2e
 800ca70:	40490fdb 	.word	0x40490fdb
 800ca74:	00000000 	.word	0x00000000
 800ca78:	3f490fdb 	.word	0x3f490fdb

0800ca7c <__ieee754_sqrtf>:
 800ca7c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800ca80:	4770      	bx	lr

0800ca82 <fmaxf>:
 800ca82:	b508      	push	{r3, lr}
 800ca84:	ed2d 8b02 	vpush	{d8}
 800ca88:	eeb0 8a40 	vmov.f32	s16, s0
 800ca8c:	eef0 8a60 	vmov.f32	s17, s1
 800ca90:	f000 f832 	bl	800caf8 <__fpclassifyf>
 800ca94:	b930      	cbnz	r0, 800caa4 <fmaxf+0x22>
 800ca96:	eeb0 8a68 	vmov.f32	s16, s17
 800ca9a:	eeb0 0a48 	vmov.f32	s0, s16
 800ca9e:	ecbd 8b02 	vpop	{d8}
 800caa2:	bd08      	pop	{r3, pc}
 800caa4:	eeb0 0a68 	vmov.f32	s0, s17
 800caa8:	f000 f826 	bl	800caf8 <__fpclassifyf>
 800caac:	2800      	cmp	r0, #0
 800caae:	d0f4      	beq.n	800ca9a <fmaxf+0x18>
 800cab0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800cab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cab8:	dded      	ble.n	800ca96 <fmaxf+0x14>
 800caba:	e7ee      	b.n	800ca9a <fmaxf+0x18>

0800cabc <fminf>:
 800cabc:	b508      	push	{r3, lr}
 800cabe:	ed2d 8b02 	vpush	{d8}
 800cac2:	eeb0 8a40 	vmov.f32	s16, s0
 800cac6:	eef0 8a60 	vmov.f32	s17, s1
 800caca:	f000 f815 	bl	800caf8 <__fpclassifyf>
 800cace:	b930      	cbnz	r0, 800cade <fminf+0x22>
 800cad0:	eeb0 8a68 	vmov.f32	s16, s17
 800cad4:	eeb0 0a48 	vmov.f32	s0, s16
 800cad8:	ecbd 8b02 	vpop	{d8}
 800cadc:	bd08      	pop	{r3, pc}
 800cade:	eeb0 0a68 	vmov.f32	s0, s17
 800cae2:	f000 f809 	bl	800caf8 <__fpclassifyf>
 800cae6:	2800      	cmp	r0, #0
 800cae8:	d0f4      	beq.n	800cad4 <fminf+0x18>
 800caea:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800caee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800caf2:	d5ed      	bpl.n	800cad0 <fminf+0x14>
 800caf4:	e7ee      	b.n	800cad4 <fminf+0x18>
	...

0800caf8 <__fpclassifyf>:
 800caf8:	ee10 3a10 	vmov	r3, s0
 800cafc:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800cb00:	d00d      	beq.n	800cb1e <__fpclassifyf+0x26>
 800cb02:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800cb06:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800cb0a:	d30a      	bcc.n	800cb22 <__fpclassifyf+0x2a>
 800cb0c:	4b07      	ldr	r3, [pc, #28]	@ (800cb2c <__fpclassifyf+0x34>)
 800cb0e:	1e42      	subs	r2, r0, #1
 800cb10:	429a      	cmp	r2, r3
 800cb12:	d908      	bls.n	800cb26 <__fpclassifyf+0x2e>
 800cb14:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800cb18:	4258      	negs	r0, r3
 800cb1a:	4158      	adcs	r0, r3
 800cb1c:	4770      	bx	lr
 800cb1e:	2002      	movs	r0, #2
 800cb20:	4770      	bx	lr
 800cb22:	2004      	movs	r0, #4
 800cb24:	4770      	bx	lr
 800cb26:	2003      	movs	r0, #3
 800cb28:	4770      	bx	lr
 800cb2a:	bf00      	nop
 800cb2c:	007ffffe 	.word	0x007ffffe

0800cb30 <atanf>:
 800cb30:	b538      	push	{r3, r4, r5, lr}
 800cb32:	ee10 5a10 	vmov	r5, s0
 800cb36:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800cb3a:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800cb3e:	eef0 7a40 	vmov.f32	s15, s0
 800cb42:	d310      	bcc.n	800cb66 <atanf+0x36>
 800cb44:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800cb48:	d904      	bls.n	800cb54 <atanf+0x24>
 800cb4a:	ee70 7a00 	vadd.f32	s15, s0, s0
 800cb4e:	eeb0 0a67 	vmov.f32	s0, s15
 800cb52:	bd38      	pop	{r3, r4, r5, pc}
 800cb54:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800cc8c <atanf+0x15c>
 800cb58:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800cc90 <atanf+0x160>
 800cb5c:	2d00      	cmp	r5, #0
 800cb5e:	bfc8      	it	gt
 800cb60:	eef0 7a47 	vmovgt.f32	s15, s14
 800cb64:	e7f3      	b.n	800cb4e <atanf+0x1e>
 800cb66:	4b4b      	ldr	r3, [pc, #300]	@ (800cc94 <atanf+0x164>)
 800cb68:	429c      	cmp	r4, r3
 800cb6a:	d810      	bhi.n	800cb8e <atanf+0x5e>
 800cb6c:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800cb70:	d20a      	bcs.n	800cb88 <atanf+0x58>
 800cb72:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800cc98 <atanf+0x168>
 800cb76:	ee30 7a07 	vadd.f32	s14, s0, s14
 800cb7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cb7e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800cb82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb86:	dce2      	bgt.n	800cb4e <atanf+0x1e>
 800cb88:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cb8c:	e013      	b.n	800cbb6 <atanf+0x86>
 800cb8e:	f000 f8a3 	bl	800ccd8 <fabsf>
 800cb92:	4b42      	ldr	r3, [pc, #264]	@ (800cc9c <atanf+0x16c>)
 800cb94:	429c      	cmp	r4, r3
 800cb96:	d84f      	bhi.n	800cc38 <atanf+0x108>
 800cb98:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800cb9c:	429c      	cmp	r4, r3
 800cb9e:	d841      	bhi.n	800cc24 <atanf+0xf4>
 800cba0:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800cba4:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800cba8:	eea0 7a27 	vfma.f32	s14, s0, s15
 800cbac:	2300      	movs	r3, #0
 800cbae:	ee30 0a27 	vadd.f32	s0, s0, s15
 800cbb2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800cbb6:	1c5a      	adds	r2, r3, #1
 800cbb8:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800cbbc:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800cca0 <atanf+0x170>
 800cbc0:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800cca4 <atanf+0x174>
 800cbc4:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800cca8 <atanf+0x178>
 800cbc8:	ee66 6a06 	vmul.f32	s13, s12, s12
 800cbcc:	eee6 5a87 	vfma.f32	s11, s13, s14
 800cbd0:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800ccac <atanf+0x17c>
 800cbd4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800cbd8:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800ccb0 <atanf+0x180>
 800cbdc:	eee7 5a26 	vfma.f32	s11, s14, s13
 800cbe0:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800ccb4 <atanf+0x184>
 800cbe4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800cbe8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800ccb8 <atanf+0x188>
 800cbec:	eee7 5a26 	vfma.f32	s11, s14, s13
 800cbf0:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800ccbc <atanf+0x18c>
 800cbf4:	eea6 5a87 	vfma.f32	s10, s13, s14
 800cbf8:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800ccc0 <atanf+0x190>
 800cbfc:	eea5 7a26 	vfma.f32	s14, s10, s13
 800cc00:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800ccc4 <atanf+0x194>
 800cc04:	eea7 5a26 	vfma.f32	s10, s14, s13
 800cc08:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800ccc8 <atanf+0x198>
 800cc0c:	eea5 7a26 	vfma.f32	s14, s10, s13
 800cc10:	ee27 7a26 	vmul.f32	s14, s14, s13
 800cc14:	eea5 7a86 	vfma.f32	s14, s11, s12
 800cc18:	ee27 7a87 	vmul.f32	s14, s15, s14
 800cc1c:	d121      	bne.n	800cc62 <atanf+0x132>
 800cc1e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cc22:	e794      	b.n	800cb4e <atanf+0x1e>
 800cc24:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800cc28:	ee30 7a67 	vsub.f32	s14, s0, s15
 800cc2c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800cc30:	2301      	movs	r3, #1
 800cc32:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800cc36:	e7be      	b.n	800cbb6 <atanf+0x86>
 800cc38:	4b24      	ldr	r3, [pc, #144]	@ (800cccc <atanf+0x19c>)
 800cc3a:	429c      	cmp	r4, r3
 800cc3c:	d80b      	bhi.n	800cc56 <atanf+0x126>
 800cc3e:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800cc42:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cc46:	eea0 7a27 	vfma.f32	s14, s0, s15
 800cc4a:	2302      	movs	r3, #2
 800cc4c:	ee70 6a67 	vsub.f32	s13, s0, s15
 800cc50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cc54:	e7af      	b.n	800cbb6 <atanf+0x86>
 800cc56:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800cc5a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800cc5e:	2303      	movs	r3, #3
 800cc60:	e7a9      	b.n	800cbb6 <atanf+0x86>
 800cc62:	4a1b      	ldr	r2, [pc, #108]	@ (800ccd0 <atanf+0x1a0>)
 800cc64:	491b      	ldr	r1, [pc, #108]	@ (800ccd4 <atanf+0x1a4>)
 800cc66:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800cc6a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800cc6e:	edd3 6a00 	vldr	s13, [r3]
 800cc72:	ee37 7a66 	vsub.f32	s14, s14, s13
 800cc76:	2d00      	cmp	r5, #0
 800cc78:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cc7c:	edd2 7a00 	vldr	s15, [r2]
 800cc80:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cc84:	bfb8      	it	lt
 800cc86:	eef1 7a67 	vneglt.f32	s15, s15
 800cc8a:	e760      	b.n	800cb4e <atanf+0x1e>
 800cc8c:	bfc90fdb 	.word	0xbfc90fdb
 800cc90:	3fc90fdb 	.word	0x3fc90fdb
 800cc94:	3edfffff 	.word	0x3edfffff
 800cc98:	7149f2ca 	.word	0x7149f2ca
 800cc9c:	3f97ffff 	.word	0x3f97ffff
 800cca0:	3c8569d7 	.word	0x3c8569d7
 800cca4:	3d4bda59 	.word	0x3d4bda59
 800cca8:	bd6ef16b 	.word	0xbd6ef16b
 800ccac:	3d886b35 	.word	0x3d886b35
 800ccb0:	3dba2e6e 	.word	0x3dba2e6e
 800ccb4:	3e124925 	.word	0x3e124925
 800ccb8:	3eaaaaab 	.word	0x3eaaaaab
 800ccbc:	bd15a221 	.word	0xbd15a221
 800ccc0:	bd9d8795 	.word	0xbd9d8795
 800ccc4:	bde38e38 	.word	0xbde38e38
 800ccc8:	be4ccccd 	.word	0xbe4ccccd
 800cccc:	401bffff 	.word	0x401bffff
 800ccd0:	0800d198 	.word	0x0800d198
 800ccd4:	0800d188 	.word	0x0800d188

0800ccd8 <fabsf>:
 800ccd8:	ee10 3a10 	vmov	r3, s0
 800ccdc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cce0:	ee00 3a10 	vmov	s0, r3
 800cce4:	4770      	bx	lr
	...

0800cce8 <_init>:
 800cce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccea:	bf00      	nop
 800ccec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ccee:	bc08      	pop	{r3}
 800ccf0:	469e      	mov	lr, r3
 800ccf2:	4770      	bx	lr

0800ccf4 <_fini>:
 800ccf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccf6:	bf00      	nop
 800ccf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ccfa:	bc08      	pop	{r3}
 800ccfc:	469e      	mov	lr, r3
 800ccfe:	4770      	bx	lr
