
Drone_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb24  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f8  0800bcb8  0800bcb8  0000ccb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c1b0  0800c1b0  0000e1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c1b0  0800c1b0  0000d1b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c1b8  0800c1b8  0000e1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c1b8  0800c1b8  0000d1b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c1bc  0800c1bc  0000d1bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800c1c0  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a4  200001d8  0800c398  0000e1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000077c  0800c398  0000e77c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000143f1  00000000  00000000  0000e208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002895  00000000  00000000  000225f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d0  00000000  00000000  00024e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ec4  00000000  00000000  00026160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000285aa  00000000  00000000  00027024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015d7a  00000000  00000000  0004f5ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7e40  00000000  00000000  00065348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015d188  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065f8  00000000  00000000  0015d1cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  001637c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bc9c 	.word	0x0800bc9c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800bc9c 	.word	0x0800bc9c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <PID_Init>:
#include "PID.h"

void PID_Init(PID *pid, float kp, float ki, float kd, float dt) {
 8001020:	b480      	push	{r7}
 8001022:	b087      	sub	sp, #28
 8001024:	af00      	add	r7, sp, #0
 8001026:	6178      	str	r0, [r7, #20]
 8001028:	ed87 0a04 	vstr	s0, [r7, #16]
 800102c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001030:	ed87 1a02 	vstr	s2, [r7, #8]
 8001034:	edc7 1a01 	vstr	s3, [r7, #4]
    pid->kp = kp;
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	601a      	str	r2, [r3, #0]
    pid->ki = ki;
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	68fa      	ldr	r2, [r7, #12]
 8001042:	605a      	str	r2, [r3, #4]
    pid->kd = kd;
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	68ba      	ldr	r2, [r7, #8]
 8001048:	609a      	str	r2, [r3, #8]
    pid->dt = dt;
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	60da      	str	r2, [r3, #12]
    pid->integral = 0.0f;
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	f04f 0200 	mov.w	r2, #0
 8001056:	611a      	str	r2, [r3, #16]
    pid->previous_error = 0.0f;
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	f04f 0200 	mov.w	r2, #0
 800105e:	615a      	str	r2, [r3, #20]
    pid->anti_windup = 100.0f; // Initialize anti-windup term
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	4a04      	ldr	r2, [pc, #16]	@ (8001074 <PID_Init+0x54>)
 8001064:	619a      	str	r2, [r3, #24]
}
 8001066:	bf00      	nop
 8001068:	371c      	adds	r7, #28
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	42c80000 	.word	0x42c80000

08001078 <PID_Compute>:

float PID_Compute(PID *pid, float setpoint, float measured_value) {
 8001078:	b480      	push	{r7}
 800107a:	b089      	sub	sp, #36	@ 0x24
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	ed87 0a02 	vstr	s0, [r7, #8]
 8001084:	edc7 0a01 	vstr	s1, [r7, #4]
    // Calculate error
    float error = setpoint - measured_value;
 8001088:	ed97 7a02 	vldr	s14, [r7, #8]
 800108c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001090:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001094:	edc7 7a07 	vstr	s15, [r7, #28]

    // Proportional term
    float proportional = pid->kp * error;
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	edd3 7a00 	vldr	s15, [r3]
 800109e:	ed97 7a07 	vldr	s14, [r7, #28]
 80010a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010a6:	edc7 7a06 	vstr	s15, [r7, #24]

    // Integral term
    pid->integral += pid->ki * error * pid->dt;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	ed93 7a04 	vldr	s14, [r3, #16]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	edd3 6a01 	vldr	s13, [r3, #4]
 80010b6:	edd7 7a07 	vldr	s15, [r7, #28]
 80010ba:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	edd3 7a03 	vldr	s15, [r3, #12]
 80010c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	edc3 7a04 	vstr	s15, [r3, #16]

    // Anti-windup
    if (pid->integral > pid->anti_windup) {
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	ed93 7a04 	vldr	s14, [r3, #16]
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	edd3 7a06 	vldr	s15, [r3, #24]
 80010de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010e6:	dd04      	ble.n	80010f2 <PID_Compute+0x7a>
        pid->integral = pid->anti_windup;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	699a      	ldr	r2, [r3, #24]
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	611a      	str	r2, [r3, #16]
 80010f0:	e014      	b.n	800111c <PID_Compute+0xa4>
    } else if (pid->integral < -pid->anti_windup) {
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	ed93 7a04 	vldr	s14, [r3, #16]
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	edd3 7a06 	vldr	s15, [r3, #24]
 80010fe:	eef1 7a67 	vneg.f32	s15, s15
 8001102:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800110a:	d507      	bpl.n	800111c <PID_Compute+0xa4>
        pid->integral = -pid->anti_windup;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001112:	eef1 7a67 	vneg.f32	s15, s15
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	edc3 7a04 	vstr	s15, [r3, #16]
    }

    // Derivative term
    float derivative = pid->kd * (error - pid->previous_error) / pid->dt;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	edd3 7a05 	vldr	s15, [r3, #20]
 8001128:	edd7 6a07 	vldr	s13, [r7, #28]
 800112c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001130:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	ed93 7a03 	vldr	s14, [r3, #12]
 800113a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800113e:	edc7 7a05 	vstr	s15, [r7, #20]

    // Update previous error
    pid->previous_error = error;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	69fa      	ldr	r2, [r7, #28]
 8001146:	615a      	str	r2, [r3, #20]

    // Compute output
    return proportional + pid->integral + derivative;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	ed93 7a04 	vldr	s14, [r3, #16]
 800114e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001152:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001156:	edd7 7a05 	vldr	s15, [r7, #20]
 800115a:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800115e:	eeb0 0a67 	vmov.f32	s0, s15
 8001162:	3724      	adds	r7, #36	@ 0x24
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <Accelerometer_Init>:
 * and ensures it is ready for operation.
 *
 * @note This function should be called before attempting to read data from the accelerometer.
 */
void Accelerometer_Init(I2C_HandleTypeDef *hi2c)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b088      	sub	sp, #32
 8001170:	af04      	add	r7, sp, #16
 8001172:	6078      	str	r0, [r7, #4]
    uint8_t data = 0;
 8001174:	2300      	movs	r3, #0
 8001176:	73fb      	strb	r3, [r7, #15]
    uint8_t check;
    // Read WHO_AM_I register (0x75) to check if the device is connected
    HAL_I2C_Mem_Read(hi2c, MPU6050_ADDR, 0x75, 1, &check, 1, 1000);
 8001178:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800117c:	9302      	str	r3, [sp, #8]
 800117e:	2301      	movs	r3, #1
 8001180:	9301      	str	r3, [sp, #4]
 8001182:	f107 030e 	add.w	r3, r7, #14
 8001186:	9300      	str	r3, [sp, #0]
 8001188:	2301      	movs	r3, #1
 800118a:	2275      	movs	r2, #117	@ 0x75
 800118c:	21d0      	movs	r1, #208	@ 0xd0
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f002 fa5e 	bl	8003650 <HAL_I2C_Mem_Read>
    if (check != 0x68) {
 8001194:	7bbb      	ldrb	r3, [r7, #14]
 8001196:	2b68      	cmp	r3, #104	@ 0x68
 8001198:	d13e      	bne.n	8001218 <Accelerometer_Init+0xac>
        // Device not found, handle error
        return;
    }
    // PWR_MGMT_1 Register (0x6B) : wake-up
    HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, 0x6B, 1, &data, 1, 1000);
 800119a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800119e:	9302      	str	r3, [sp, #8]
 80011a0:	2301      	movs	r3, #1
 80011a2:	9301      	str	r3, [sp, #4]
 80011a4:	f107 030f 	add.w	r3, r7, #15
 80011a8:	9300      	str	r3, [sp, #0]
 80011aa:	2301      	movs	r3, #1
 80011ac:	226b      	movs	r2, #107	@ 0x6b
 80011ae:	21d0      	movs	r1, #208	@ 0xd0
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f002 f939 	bl	8003428 <HAL_I2C_Mem_Write>
    // Set DATA RATE of 1kHz by writing SMPLRT_DIV register
    data = 0x07; // 1000 Hz / (1 + 7) = 125 Hz
 80011b6:	2307      	movs	r3, #7
 80011b8:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, 0x19, 1, &data, 1, 1000);
 80011ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011be:	9302      	str	r3, [sp, #8]
 80011c0:	2301      	movs	r3, #1
 80011c2:	9301      	str	r3, [sp, #4]
 80011c4:	f107 030f 	add.w	r3, r7, #15
 80011c8:	9300      	str	r3, [sp, #0]
 80011ca:	2301      	movs	r3, #1
 80011cc:	2219      	movs	r2, #25
 80011ce:	21d0      	movs	r1, #208	@ 0xd0
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f002 f929 	bl	8003428 <HAL_I2C_Mem_Write>
    // Set accelerometer configuration in ACCEL_CONFIG Register (0x1C)
    data = 0x00; // ±2g full scale
 80011d6:	2300      	movs	r3, #0
 80011d8:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, 0x1C, 1, &data, 1, 1000);
 80011da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011de:	9302      	str	r3, [sp, #8]
 80011e0:	2301      	movs	r3, #1
 80011e2:	9301      	str	r3, [sp, #4]
 80011e4:	f107 030f 	add.w	r3, r7, #15
 80011e8:	9300      	str	r3, [sp, #0]
 80011ea:	2301      	movs	r3, #1
 80011ec:	221c      	movs	r2, #28
 80011ee:	21d0      	movs	r1, #208	@ 0xd0
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f002 f919 	bl	8003428 <HAL_I2C_Mem_Write>
    // set Gyroscopic configuration in GYRO_CONFIG Register (0x1B)
    data = 0x00; // ±250°/s full scale
 80011f6:	2300      	movs	r3, #0
 80011f8:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, 0x1B, 1, &data, 1, 1000);
 80011fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011fe:	9302      	str	r3, [sp, #8]
 8001200:	2301      	movs	r3, #1
 8001202:	9301      	str	r3, [sp, #4]
 8001204:	f107 030f 	add.w	r3, r7, #15
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	2301      	movs	r3, #1
 800120c:	221b      	movs	r2, #27
 800120e:	21d0      	movs	r1, #208	@ 0xd0
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f002 f909 	bl	8003428 <HAL_I2C_Mem_Write>
 8001216:	e000      	b.n	800121a <Accelerometer_Init+0xae>
        return;
 8001218:	bf00      	nop
}
 800121a:	3710      	adds	r7, #16
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <Accelerometer_Read>:
 * acceleration information.
 *
 * @return int Returns 0 on success, or a negative error code on failure.
 */
void Accelerometer_Read(I2C_HandleTypeDef *hi2c, AccelData *accel_data, GyroData *gyro_data)
{    
 8001220:	b580      	push	{r7, lr}
 8001222:	b08a      	sub	sp, #40	@ 0x28
 8001224:	af04      	add	r7, sp, #16
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from ACCEL_XOUT_H (0x3B) Register
    HAL_I2C_Mem_Read(hi2c, MPU6050_ADDR, 0x3B, 1, Rec_Data, 6, 1000);
 800122c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001230:	9302      	str	r3, [sp, #8]
 8001232:	2306      	movs	r3, #6
 8001234:	9301      	str	r3, [sp, #4]
 8001236:	f107 0310 	add.w	r3, r7, #16
 800123a:	9300      	str	r3, [sp, #0]
 800123c:	2301      	movs	r3, #1
 800123e:	223b      	movs	r2, #59	@ 0x3b
 8001240:	21d0      	movs	r1, #208	@ 0xd0
 8001242:	68f8      	ldr	r0, [r7, #12]
 8001244:	f002 fa04 	bl	8003650 <HAL_I2C_Mem_Read>
    // Convert the data to 16-bit signed integers
    accel_data->x = (int16_t)((Rec_Data[0] << 8) | Rec_Data[1]);
 8001248:	7c3b      	ldrb	r3, [r7, #16]
 800124a:	b21b      	sxth	r3, r3
 800124c:	021b      	lsls	r3, r3, #8
 800124e:	b21a      	sxth	r2, r3
 8001250:	7c7b      	ldrb	r3, [r7, #17]
 8001252:	b21b      	sxth	r3, r3
 8001254:	4313      	orrs	r3, r2
 8001256:	b21b      	sxth	r3, r3
 8001258:	ee07 3a90 	vmov	s15, r3
 800125c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	edc3 7a00 	vstr	s15, [r3]
    accel_data->y = (int16_t)((Rec_Data[2] << 8) | Rec_Data[3]);
 8001266:	7cbb      	ldrb	r3, [r7, #18]
 8001268:	b21b      	sxth	r3, r3
 800126a:	021b      	lsls	r3, r3, #8
 800126c:	b21a      	sxth	r2, r3
 800126e:	7cfb      	ldrb	r3, [r7, #19]
 8001270:	b21b      	sxth	r3, r3
 8001272:	4313      	orrs	r3, r2
 8001274:	b21b      	sxth	r3, r3
 8001276:	ee07 3a90 	vmov	s15, r3
 800127a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	edc3 7a01 	vstr	s15, [r3, #4]
    accel_data->z = (int16_t)((Rec_Data[4] << 8) | Rec_Data[5]);
 8001284:	7d3b      	ldrb	r3, [r7, #20]
 8001286:	b21b      	sxth	r3, r3
 8001288:	021b      	lsls	r3, r3, #8
 800128a:	b21a      	sxth	r2, r3
 800128c:	7d7b      	ldrb	r3, [r7, #21]
 800128e:	b21b      	sxth	r3, r3
 8001290:	4313      	orrs	r3, r2
 8001292:	b21b      	sxth	r3, r3
 8001294:	ee07 3a90 	vmov	s15, r3
 8001298:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	edc3 7a02 	vstr	s15, [r3, #8]
    // Convert raw value to g-force
    accel_data->x = (float)accel_data->x / 16384.0f; // For ±2g full scale
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	ed93 7a00 	vldr	s14, [r3]
 80012a8:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8001398 <Accelerometer_Read+0x178>
 80012ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	edc3 7a00 	vstr	s15, [r3]
    accel_data->y = (float)accel_data->y / 16384.0f; 
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	ed93 7a01 	vldr	s14, [r3, #4]
 80012bc:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8001398 <Accelerometer_Read+0x178>
 80012c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	edc3 7a01 	vstr	s15, [r3, #4]
    accel_data->z = (float)accel_data->z / 16384.0f;
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	ed93 7a02 	vldr	s14, [r3, #8]
 80012d0:	eddf 6a31 	vldr	s13, [pc, #196]	@ 8001398 <Accelerometer_Read+0x178>
 80012d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	edc3 7a02 	vstr	s15, [r3, #8]

    // Read 6 BYTES of data starting from GYRO_XOUT_H (0x43) Register
    HAL_I2C_Mem_Read(hi2c, MPU6050_ADDR, 0x43, 1, Rec_Data, 6, 1000);
 80012de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012e2:	9302      	str	r3, [sp, #8]
 80012e4:	2306      	movs	r3, #6
 80012e6:	9301      	str	r3, [sp, #4]
 80012e8:	f107 0310 	add.w	r3, r7, #16
 80012ec:	9300      	str	r3, [sp, #0]
 80012ee:	2301      	movs	r3, #1
 80012f0:	2243      	movs	r2, #67	@ 0x43
 80012f2:	21d0      	movs	r1, #208	@ 0xd0
 80012f4:	68f8      	ldr	r0, [r7, #12]
 80012f6:	f002 f9ab 	bl	8003650 <HAL_I2C_Mem_Read>
    // Convert the data to 16-bit signed integers
    gyro_data->x = (int16_t)((Rec_Data[0] << 8) | Rec_Data[1]);
 80012fa:	7c3b      	ldrb	r3, [r7, #16]
 80012fc:	b21b      	sxth	r3, r3
 80012fe:	021b      	lsls	r3, r3, #8
 8001300:	b21a      	sxth	r2, r3
 8001302:	7c7b      	ldrb	r3, [r7, #17]
 8001304:	b21b      	sxth	r3, r3
 8001306:	4313      	orrs	r3, r2
 8001308:	b21b      	sxth	r3, r3
 800130a:	ee07 3a90 	vmov	s15, r3
 800130e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	edc3 7a00 	vstr	s15, [r3]
    gyro_data->y = (int16_t)((Rec_Data[2] << 8) | Rec_Data[3]);
 8001318:	7cbb      	ldrb	r3, [r7, #18]
 800131a:	b21b      	sxth	r3, r3
 800131c:	021b      	lsls	r3, r3, #8
 800131e:	b21a      	sxth	r2, r3
 8001320:	7cfb      	ldrb	r3, [r7, #19]
 8001322:	b21b      	sxth	r3, r3
 8001324:	4313      	orrs	r3, r2
 8001326:	b21b      	sxth	r3, r3
 8001328:	ee07 3a90 	vmov	s15, r3
 800132c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	edc3 7a01 	vstr	s15, [r3, #4]
    gyro_data->z = (int16_t)((Rec_Data[4] << 8) | Rec_Data[5]);
 8001336:	7d3b      	ldrb	r3, [r7, #20]
 8001338:	b21b      	sxth	r3, r3
 800133a:	021b      	lsls	r3, r3, #8
 800133c:	b21a      	sxth	r2, r3
 800133e:	7d7b      	ldrb	r3, [r7, #21]
 8001340:	b21b      	sxth	r3, r3
 8001342:	4313      	orrs	r3, r2
 8001344:	b21b      	sxth	r3, r3
 8001346:	ee07 3a90 	vmov	s15, r3
 800134a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	edc3 7a02 	vstr	s15, [r3, #8]
    // Convert raw value to degrees per second
    gyro_data->x = (float)gyro_data->x / 131.0f; // For ±250°/s full scale
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	ed93 7a00 	vldr	s14, [r3]
 800135a:	eddf 6a10 	vldr	s13, [pc, #64]	@ 800139c <Accelerometer_Read+0x17c>
 800135e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	edc3 7a00 	vstr	s15, [r3]
    gyro_data->y = (float)gyro_data->y / 131.0f;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	ed93 7a01 	vldr	s14, [r3, #4]
 800136e:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 800139c <Accelerometer_Read+0x17c>
 8001372:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	edc3 7a01 	vstr	s15, [r3, #4]
    gyro_data->z = (float)gyro_data->z / 131.0f; 
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001382:	eddf 6a06 	vldr	s13, [pc, #24]	@ 800139c <Accelerometer_Read+0x17c>
 8001386:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001390:	bf00      	nop
 8001392:	3718      	adds	r7, #24
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	46800000 	.word	0x46800000
 800139c:	43030000 	.word	0x43030000

080013a0 <angles_from_accel>:
 *
 * @param accel_data Structure containing accelerometer data (x, y, z).
 * @param pitch Pointer to store the calculated pitch angle (in degrees).
 * @param roll Pointer to store the calculated roll angle (in degrees).
 */
void angles_from_accel(AccelData accel_data, float *pitch, float *roll) {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	ed2d 8b02 	vpush	{d8}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	eef0 6a40 	vmov.f32	s13, s0
 80013ae:	eeb0 7a60 	vmov.f32	s14, s1
 80013b2:	eef0 7a41 	vmov.f32	s15, s2
 80013b6:	60b8      	str	r0, [r7, #8]
 80013b8:	6079      	str	r1, [r7, #4]
 80013ba:	edc7 6a03 	vstr	s13, [r7, #12]
 80013be:	ed87 7a04 	vstr	s14, [r7, #16]
 80013c2:	edc7 7a05 	vstr	s15, [r7, #20]
    *pitch = atan2f(accel_data.y, sqrtf(accel_data.x * accel_data.x + accel_data.z * accel_data.z)) * (180.0f / M_PI);
 80013c6:	ed97 8a04 	vldr	s16, [r7, #16]
 80013ca:	ed97 7a03 	vldr	s14, [r7, #12]
 80013ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80013d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013d6:	edd7 6a05 	vldr	s13, [r7, #20]
 80013da:	edd7 7a05 	vldr	s15, [r7, #20]
 80013de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013e6:	eeb0 0a67 	vmov.f32	s0, s15
 80013ea:	f00a fab9 	bl	800b960 <sqrtf>
 80013ee:	eef0 7a40 	vmov.f32	s15, s0
 80013f2:	eef0 0a67 	vmov.f32	s1, s15
 80013f6:	eeb0 0a48 	vmov.f32	s0, s16
 80013fa:	f00a faaf 	bl	800b95c <atan2f>
 80013fe:	ee10 3a10 	vmov	r3, s0
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff f8a0 	bl	8000548 <__aeabi_f2d>
 8001408:	a323      	add	r3, pc, #140	@ (adr r3, 8001498 <angles_from_accel+0xf8>)
 800140a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800140e:	f7ff f8f3 	bl	80005f8 <__aeabi_dmul>
 8001412:	4602      	mov	r2, r0
 8001414:	460b      	mov	r3, r1
 8001416:	4610      	mov	r0, r2
 8001418:	4619      	mov	r1, r3
 800141a:	f7ff fbe5 	bl	8000be8 <__aeabi_d2f>
 800141e:	4602      	mov	r2, r0
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	601a      	str	r2, [r3, #0]
    *roll = atan2f(-accel_data.x, sqrtf(accel_data.y * accel_data.y + accel_data.z * accel_data.z)) * (180.0f / M_PI);
 8001424:	edd7 7a03 	vldr	s15, [r7, #12]
 8001428:	eeb1 8a67 	vneg.f32	s16, s15
 800142c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001430:	edd7 7a04 	vldr	s15, [r7, #16]
 8001434:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001438:	edd7 6a05 	vldr	s13, [r7, #20]
 800143c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001440:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001444:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001448:	eeb0 0a67 	vmov.f32	s0, s15
 800144c:	f00a fa88 	bl	800b960 <sqrtf>
 8001450:	eef0 7a40 	vmov.f32	s15, s0
 8001454:	eef0 0a67 	vmov.f32	s1, s15
 8001458:	eeb0 0a48 	vmov.f32	s0, s16
 800145c:	f00a fa7e 	bl	800b95c <atan2f>
 8001460:	ee10 3a10 	vmov	r3, s0
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff f86f 	bl	8000548 <__aeabi_f2d>
 800146a:	a30b      	add	r3, pc, #44	@ (adr r3, 8001498 <angles_from_accel+0xf8>)
 800146c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001470:	f7ff f8c2 	bl	80005f8 <__aeabi_dmul>
 8001474:	4602      	mov	r2, r0
 8001476:	460b      	mov	r3, r1
 8001478:	4610      	mov	r0, r2
 800147a:	4619      	mov	r1, r3
 800147c:	f7ff fbb4 	bl	8000be8 <__aeabi_d2f>
 8001480:	4602      	mov	r2, r0
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	601a      	str	r2, [r3, #0]
}
 8001486:	bf00      	nop
 8001488:	3718      	adds	r7, #24
 800148a:	46bd      	mov	sp, r7
 800148c:	ecbd 8b02 	vpop	{d8}
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	f3af 8000 	nop.w
 8001498:	1a63c1f8 	.word	0x1a63c1f8
 800149c:	404ca5dc 	.word	0x404ca5dc

080014a0 <angles_rate_from_gyro>:
 *
 * @param gyro_data Structure containing gyroscope data (x, y, z).
 * @param pitch_rate Pointer to store the calculated pitch rate (in degrees per second).
 * @param roll_rate Pointer to store the calculated roll rate (in degrees per second).
 */
void angles_rate_from_gyro(GyroData gyro_data, float *pitch_rate, float *roll_rate) {
 80014a0:	b480      	push	{r7}
 80014a2:	b087      	sub	sp, #28
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	eef0 6a40 	vmov.f32	s13, s0
 80014aa:	eeb0 7a60 	vmov.f32	s14, s1
 80014ae:	eef0 7a41 	vmov.f32	s15, s2
 80014b2:	60b8      	str	r0, [r7, #8]
 80014b4:	6079      	str	r1, [r7, #4]
 80014b6:	edc7 6a03 	vstr	s13, [r7, #12]
 80014ba:	ed87 7a04 	vstr	s14, [r7, #16]
 80014be:	edc7 7a05 	vstr	s15, [r7, #20]
    *pitch_rate = gyro_data.y; // Gyro Y-axis for pitch rate
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	601a      	str	r2, [r3, #0]
    *roll_rate = gyro_data.x;  // Gyro X-axis for roll rate
 80014c8:	68fa      	ldr	r2, [r7, #12]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	601a      	str	r2, [r3, #0]
}
 80014ce:	bf00      	nop
 80014d0:	371c      	adds	r7, #28
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr

080014da <yaw_from_gyro>:

void yaw_from_gyro(GyroData gyro_data, float *yaw, float dt) {
 80014da:	b480      	push	{r7}
 80014dc:	b087      	sub	sp, #28
 80014de:	af00      	add	r7, sp, #0
 80014e0:	eef0 6a40 	vmov.f32	s13, s0
 80014e4:	eeb0 7a60 	vmov.f32	s14, s1
 80014e8:	eef0 7a41 	vmov.f32	s15, s2
 80014ec:	60b8      	str	r0, [r7, #8]
 80014ee:	edc7 1a01 	vstr	s3, [r7, #4]
 80014f2:	edc7 6a03 	vstr	s13, [r7, #12]
 80014f6:	ed87 7a04 	vstr	s14, [r7, #16]
 80014fa:	edc7 7a05 	vstr	s15, [r7, #20]
    // Integrate the gyroscope Z-axis data to get yaw angle
    *yaw += gyro_data.z * dt; // Gyro Z-axis for yaw rate
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	ed93 7a00 	vldr	s14, [r3]
 8001504:	edd7 6a05 	vldr	s13, [r7, #20]
 8001508:	edd7 7a01 	vldr	s15, [r7, #4]
 800150c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001510:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	edc3 7a00 	vstr	s15, [r3]
}
 800151a:	bf00      	nop
 800151c:	371c      	adds	r7, #28
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
	...

08001528 <Kalman_Init>:
 * @param init_covariance Initial estimate of the error covariance.
 * @param process_noise Process noise covariance (Q).
 * @param measurement_noise Measurement noise covariance (R).
 */
void Kalman_Init(Kalman_t *kalman_x, Kalman_t *kalman_y)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
    // Initialize Kalman filter parameters for X, Y, and Z axes
    kalman_x->angle = 0.0f;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f04f 0200 	mov.w	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
    kalman_x->bias = 0.0f;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f04f 0200 	mov.w	r2, #0
 8001540:	605a      	str	r2, [r3, #4]
    kalman_x->rate = 0.0f;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	f04f 0200 	mov.w	r2, #0
 8001548:	609a      	str	r2, [r3, #8]
    kalman_x->P[0][0] = 1.0f; // P[0][0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001550:	60da      	str	r2, [r3, #12]
    kalman_x->P[0][1] = 0.0f; // P[0][1]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f04f 0200 	mov.w	r2, #0
 8001558:	611a      	str	r2, [r3, #16]
    kalman_x->P[1][0] = 0.0f; // P[1][0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f04f 0200 	mov.w	r2, #0
 8001560:	615a      	str	r2, [r3, #20]
    kalman_x->P[1][1] = 1.0f; // P[1][1]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001568:	619a      	str	r2, [r3, #24]
    kalman_x->Q_angle = 0.001f; // Process noise covariance for angle
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a19      	ldr	r2, [pc, #100]	@ (80015d4 <Kalman_Init+0xac>)
 800156e:	61da      	str	r2, [r3, #28]
    kalman_x->Q_bias = 0.003f; // Process noise covariance for bias
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	4a19      	ldr	r2, [pc, #100]	@ (80015d8 <Kalman_Init+0xb0>)
 8001574:	621a      	str	r2, [r3, #32]
    kalman_x->R_measure = 0.03f; // Measurement noise covariance
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a18      	ldr	r2, [pc, #96]	@ (80015dc <Kalman_Init+0xb4>)
 800157a:	625a      	str	r2, [r3, #36]	@ 0x24

    kalman_y->angle = 0.0f;
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	f04f 0200 	mov.w	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
    kalman_y->bias = 0.0f;
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	f04f 0200 	mov.w	r2, #0
 800158a:	605a      	str	r2, [r3, #4]
    kalman_y->rate = 0.0f;
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	f04f 0200 	mov.w	r2, #0
 8001592:	609a      	str	r2, [r3, #8]
    kalman_y->P[0][0] = 1.0f;
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800159a:	60da      	str	r2, [r3, #12]
    kalman_y->P[0][1] = 0.0f;
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	f04f 0200 	mov.w	r2, #0
 80015a2:	611a      	str	r2, [r3, #16]
    kalman_y->P[1][0] = 0.0f;
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	f04f 0200 	mov.w	r2, #0
 80015aa:	615a      	str	r2, [r3, #20]
    kalman_y->P[1][1] = 1.0f;
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80015b2:	619a      	str	r2, [r3, #24]
    kalman_y->Q_angle = 0.001f;
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	4a07      	ldr	r2, [pc, #28]	@ (80015d4 <Kalman_Init+0xac>)
 80015b8:	61da      	str	r2, [r3, #28]
    kalman_y->Q_bias = 0.003f;
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	4a06      	ldr	r2, [pc, #24]	@ (80015d8 <Kalman_Init+0xb0>)
 80015be:	621a      	str	r2, [r3, #32]
    kalman_y->R_measure = 0.03f;
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	4a06      	ldr	r2, [pc, #24]	@ (80015dc <Kalman_Init+0xb4>)
 80015c4:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80015c6:	bf00      	nop
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	3a83126f 	.word	0x3a83126f
 80015d8:	3b449ba6 	.word	0x3b449ba6
 80015dc:	3cf5c28f 	.word	0x3cf5c28f

080015e0 <Kalman_GetAngle>:
 * @param kalman Pointer to the Kalman filter structure for the axis.
 * @param acc_angle Angle measured from the accelerometer (in degrees).
 * @param gyro_rate Angular rate measured from the gyroscope (in degrees per second).
 * @param dt Time interval since the last update (in seconds).
 */
void Kalman_GetAngle(Kalman_t *kalman, float acc_angle, float gyro_rate, float dt) {
 80015e0:	b480      	push	{r7}
 80015e2:	b08b      	sub	sp, #44	@ 0x2c
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	ed87 0a02 	vstr	s0, [r7, #8]
 80015ec:	edc7 0a01 	vstr	s1, [r7, #4]
 80015f0:	ed87 1a00 	vstr	s2, [r7]
    // 1. Prediction
    kalman->rate = gyro_rate - kalman->bias;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	edd3 7a01 	vldr	s15, [r3, #4]
 80015fa:	ed97 7a01 	vldr	s14, [r7, #4]
 80015fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	edc3 7a02 	vstr	s15, [r3, #8]
    kalman->angle += dt * kalman->rate;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	ed93 7a00 	vldr	s14, [r3]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	edd3 6a02 	vldr	s13, [r3, #8]
 8001614:	edd7 7a00 	vldr	s15, [r7]
 8001618:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800161c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	edc3 7a00 	vstr	s15, [r3]

    // state covariance update
    kalman->P[0][0] += dt * (dt*kalman->P[1][1] - kalman->P[0][1] - kalman->P[1][0] + kalman->Q_angle);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	ed93 7a03 	vldr	s14, [r3, #12]
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	edd3 6a06 	vldr	s13, [r3, #24]
 8001632:	edd7 7a00 	vldr	s15, [r7]
 8001636:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001640:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	edd3 7a05 	vldr	s15, [r3, #20]
 800164a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	edd3 7a07 	vldr	s15, [r3, #28]
 8001654:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001658:	edd7 7a00 	vldr	s15, [r7]
 800165c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001660:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	edc3 7a03 	vstr	s15, [r3, #12]
    kalman->P[0][1] -= dt * kalman->P[1][1];
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	ed93 7a04 	vldr	s14, [r3, #16]
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	edd3 6a06 	vldr	s13, [r3, #24]
 8001676:	edd7 7a00 	vldr	s15, [r7]
 800167a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800167e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	edc3 7a04 	vstr	s15, [r3, #16]
    kalman->P[1][0] -= dt * kalman->P[1][1];
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	ed93 7a05 	vldr	s14, [r3, #20]
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	edd3 6a06 	vldr	s13, [r3, #24]
 8001694:	edd7 7a00 	vldr	s15, [r7]
 8001698:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800169c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	edc3 7a05 	vstr	s15, [r3, #20]
    kalman->P[1][1] += kalman->Q_bias * dt;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	ed93 7a06 	vldr	s14, [r3, #24]
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	edd3 6a08 	vldr	s13, [r3, #32]
 80016b2:	edd7 7a00 	vldr	s15, [r7]
 80016b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	edc3 7a06 	vstr	s15, [r3, #24]

    // 2. update
    float y = acc_angle - kalman->angle; // innovation
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	edd3 7a00 	vldr	s15, [r3]
 80016ca:	ed97 7a02 	vldr	s14, [r7, #8]
 80016ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016d2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float S = kalman->P[0][0] + kalman->R_measure; // incertitude innovation
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	ed93 7a03 	vldr	s14, [r3, #12]
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80016e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016e6:	edc7 7a08 	vstr	s15, [r7, #32]
    float K0 = kalman->P[0][0] / S;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	edd3 6a03 	vldr	s13, [r3, #12]
 80016f0:	ed97 7a08 	vldr	s14, [r7, #32]
 80016f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016f8:	edc7 7a07 	vstr	s15, [r7, #28]
    float K1 = kalman->P[1][0] / S;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	edd3 6a05 	vldr	s13, [r3, #20]
 8001702:	ed97 7a08 	vldr	s14, [r7, #32]
 8001706:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800170a:	edc7 7a06 	vstr	s15, [r7, #24]

    // state update
    kalman->angle += K0 * y;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	ed93 7a00 	vldr	s14, [r3]
 8001714:	edd7 6a07 	vldr	s13, [r7, #28]
 8001718:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800171c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001720:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	edc3 7a00 	vstr	s15, [r3]
    kalman->bias  += K1 * y;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001730:	edd7 6a06 	vldr	s13, [r7, #24]
 8001734:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001738:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800173c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	edc3 7a01 	vstr	s15, [r3, #4]

    // state covariance update
    float P00_temp = kalman->P[0][0];
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	617b      	str	r3, [r7, #20]
    float P01_temp = kalman->P[0][1];
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	691b      	ldr	r3, [r3, #16]
 8001750:	613b      	str	r3, [r7, #16]

    kalman->P[0][0] -= K0 * P00_temp;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	ed93 7a03 	vldr	s14, [r3, #12]
 8001758:	edd7 6a07 	vldr	s13, [r7, #28]
 800175c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001760:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001764:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	edc3 7a03 	vstr	s15, [r3, #12]
    kalman->P[0][1] -= K0 * P01_temp;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	ed93 7a04 	vldr	s14, [r3, #16]
 8001774:	edd7 6a07 	vldr	s13, [r7, #28]
 8001778:	edd7 7a04 	vldr	s15, [r7, #16]
 800177c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001780:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	edc3 7a04 	vstr	s15, [r3, #16]
    kalman->P[1][0] -= K1 * P00_temp;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	ed93 7a05 	vldr	s14, [r3, #20]
 8001790:	edd7 6a06 	vldr	s13, [r7, #24]
 8001794:	edd7 7a05 	vldr	s15, [r7, #20]
 8001798:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800179c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	edc3 7a05 	vstr	s15, [r3, #20]
    kalman->P[1][1] -= K1 * P01_temp;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	ed93 7a06 	vldr	s14, [r3, #24]
 80017ac:	edd7 6a06 	vldr	s13, [r7, #24]
 80017b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80017b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	edc3 7a06 	vstr	s15, [r3, #24]
}
 80017c2:	bf00      	nop
 80017c4:	372c      	adds	r7, #44	@ 0x2c
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80017ce:	b480      	push	{r7}
 80017d0:	b083      	sub	sp, #12
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80017d6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80017da:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d013      	beq.n	800180e <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80017e6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80017ea:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80017ee:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d00b      	beq.n	800180e <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80017f6:	e000      	b.n	80017fa <ITM_SendChar+0x2c>
    {
      __NOP();
 80017f8:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80017fa:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d0f9      	beq.n	80017f8 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001804:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	b2d2      	uxtb	r2, r2
 800180c:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800180e:	687b      	ldr	r3, [r7, #4]
}
 8001810:	4618      	mov	r0, r3
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001820:	f001 f9f2 	bl	8002c08 <HAL_Init>

  /* USER CODE BEGIN Init */
  Accelerometer_Init(&hi2c1); // Initialize the accelerometer
 8001824:	48af      	ldr	r0, [pc, #700]	@ (8001ae4 <main+0x2c8>)
 8001826:	f7ff fca1 	bl	800116c <Accelerometer_Init>
  Kalman_Init(&kalman_pitch, &kalman_roll); // Initialize Kalman filters for x, y, z axes
 800182a:	49af      	ldr	r1, [pc, #700]	@ (8001ae8 <main+0x2cc>)
 800182c:	48af      	ldr	r0, [pc, #700]	@ (8001aec <main+0x2d0>)
 800182e:	f7ff fe7b 	bl	8001528 <Kalman_Init>

  // Initialize PID controllers for pitch and roll
  PID_Init(&pid_pitch, 1.0f, 0.1f, 0.01f, dt); // Initialize PID for pitch
 8001832:	4baf      	ldr	r3, [pc, #700]	@ (8001af0 <main+0x2d4>)
 8001834:	edd3 7a00 	vldr	s15, [r3]
 8001838:	eef0 1a67 	vmov.f32	s3, s15
 800183c:	ed9f 1aad 	vldr	s2, [pc, #692]	@ 8001af4 <main+0x2d8>
 8001840:	eddf 0aad 	vldr	s1, [pc, #692]	@ 8001af8 <main+0x2dc>
 8001844:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001848:	48ac      	ldr	r0, [pc, #688]	@ (8001afc <main+0x2e0>)
 800184a:	f7ff fbe9 	bl	8001020 <PID_Init>
  PID_Init(&pid_roll, 1.0f, 0.1f, 0.01f, dt); // Initialize PID for roll
 800184e:	4ba8      	ldr	r3, [pc, #672]	@ (8001af0 <main+0x2d4>)
 8001850:	edd3 7a00 	vldr	s15, [r3]
 8001854:	eef0 1a67 	vmov.f32	s3, s15
 8001858:	ed9f 1aa6 	vldr	s2, [pc, #664]	@ 8001af4 <main+0x2d8>
 800185c:	eddf 0aa6 	vldr	s1, [pc, #664]	@ 8001af8 <main+0x2dc>
 8001860:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001864:	48a6      	ldr	r0, [pc, #664]	@ (8001b00 <main+0x2e4>)
 8001866:	f7ff fbdb 	bl	8001020 <PID_Init>
  PID_Init(&pid_thrust, 1.0f, 0.1f, 0.01f, dt); // Initialize PID for thrust
 800186a:	4ba1      	ldr	r3, [pc, #644]	@ (8001af0 <main+0x2d4>)
 800186c:	edd3 7a00 	vldr	s15, [r3]
 8001870:	eef0 1a67 	vmov.f32	s3, s15
 8001874:	ed9f 1a9f 	vldr	s2, [pc, #636]	@ 8001af4 <main+0x2d8>
 8001878:	eddf 0a9f 	vldr	s1, [pc, #636]	@ 8001af8 <main+0x2dc>
 800187c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001880:	48a0      	ldr	r0, [pc, #640]	@ (8001b04 <main+0x2e8>)
 8001882:	f7ff fbcd 	bl	8001020 <PID_Init>
  PID_Init(&pid_yaw, 1.0f, 0.1f, 0.01f, dt); // Initialize PID for yaw (if needed)
 8001886:	4b9a      	ldr	r3, [pc, #616]	@ (8001af0 <main+0x2d4>)
 8001888:	edd3 7a00 	vldr	s15, [r3]
 800188c:	eef0 1a67 	vmov.f32	s3, s15
 8001890:	ed9f 1a98 	vldr	s2, [pc, #608]	@ 8001af4 <main+0x2d8>
 8001894:	eddf 0a98 	vldr	s1, [pc, #608]	@ 8001af8 <main+0x2dc>
 8001898:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800189c:	489a      	ldr	r0, [pc, #616]	@ (8001b08 <main+0x2ec>)
 800189e:	f7ff fbbf 	bl	8001020 <PID_Init>

  timestamp = 0;
 80018a2:	4b9a      	ldr	r3, [pc, #616]	@ (8001b0c <main+0x2f0>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018a8:	f000 f954 	bl	8001b54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018ac:	f000 fcac 	bl	8002208 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80018b0:	f000 fc7a 	bl	80021a8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80018b4:	f000 f9e0 	bl	8001c78 <MX_TIM2_Init>
  MX_I2C1_Init();
 80018b8:	f000 f99e 	bl	8001bf8 <MX_I2C1_Init>
  MX_TIM3_Init();
 80018bc:	f000 fa82 	bl	8001dc4 <MX_TIM3_Init>
  MX_TIM4_Init();
 80018c0:	f000 fb26 	bl	8001f10 <MX_TIM4_Init>
  MX_TIM5_Init();
 80018c4:	f000 fbca 	bl	800205c <MX_TIM5_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    LD2_GPIO_Port->ODR ^= LD2_Pin; // Toggle the LED
 80018c8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80018d2:	f083 0320 	eor.w	r3, r3, #32
 80018d6:	6153      	str	r3, [r2, #20]
    Accelerometer_Read(&hi2c1, &accel_data, &gyro_data); // Read accelerometer and gyro data
 80018d8:	4a8d      	ldr	r2, [pc, #564]	@ (8001b10 <main+0x2f4>)
 80018da:	498e      	ldr	r1, [pc, #568]	@ (8001b14 <main+0x2f8>)
 80018dc:	4881      	ldr	r0, [pc, #516]	@ (8001ae4 <main+0x2c8>)
 80018de:	f7ff fc9f 	bl	8001220 <Accelerometer_Read>
    
    angles_from_accel(accel_data, &pitch_calc, &roll_calc); // Calculate pitch and roll from accelerometer data
 80018e2:	4b8c      	ldr	r3, [pc, #560]	@ (8001b14 <main+0x2f8>)
 80018e4:	edd3 6a00 	vldr	s13, [r3]
 80018e8:	ed93 7a01 	vldr	s14, [r3, #4]
 80018ec:	edd3 7a02 	vldr	s15, [r3, #8]
 80018f0:	4989      	ldr	r1, [pc, #548]	@ (8001b18 <main+0x2fc>)
 80018f2:	488a      	ldr	r0, [pc, #552]	@ (8001b1c <main+0x300>)
 80018f4:	eeb0 0a66 	vmov.f32	s0, s13
 80018f8:	eef0 0a47 	vmov.f32	s1, s14
 80018fc:	eeb0 1a67 	vmov.f32	s2, s15
 8001900:	f7ff fd4e 	bl	80013a0 <angles_from_accel>
    angles_rate_from_gyro(gyro_data, &pitch_rate_calc, &roll_rate_calc); // Calculate pitch and roll rates from gyro data
 8001904:	4b82      	ldr	r3, [pc, #520]	@ (8001b10 <main+0x2f4>)
 8001906:	edd3 6a00 	vldr	s13, [r3]
 800190a:	ed93 7a01 	vldr	s14, [r3, #4]
 800190e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001912:	4983      	ldr	r1, [pc, #524]	@ (8001b20 <main+0x304>)
 8001914:	4883      	ldr	r0, [pc, #524]	@ (8001b24 <main+0x308>)
 8001916:	eeb0 0a66 	vmov.f32	s0, s13
 800191a:	eef0 0a47 	vmov.f32	s1, s14
 800191e:	eeb0 1a67 	vmov.f32	s2, s15
 8001922:	f7ff fdbd 	bl	80014a0 <angles_rate_from_gyro>
    // Apply Kalman filter to the angles
    Kalman_GetAngle(&kalman_pitch, pitch_calc, pitch_rate_calc, dt);
 8001926:	4b7d      	ldr	r3, [pc, #500]	@ (8001b1c <main+0x300>)
 8001928:	edd3 7a00 	vldr	s15, [r3]
 800192c:	4b7d      	ldr	r3, [pc, #500]	@ (8001b24 <main+0x308>)
 800192e:	ed93 7a00 	vldr	s14, [r3]
 8001932:	4b6f      	ldr	r3, [pc, #444]	@ (8001af0 <main+0x2d4>)
 8001934:	edd3 6a00 	vldr	s13, [r3]
 8001938:	eeb0 1a66 	vmov.f32	s2, s13
 800193c:	eef0 0a47 	vmov.f32	s1, s14
 8001940:	eeb0 0a67 	vmov.f32	s0, s15
 8001944:	4869      	ldr	r0, [pc, #420]	@ (8001aec <main+0x2d0>)
 8001946:	f7ff fe4b 	bl	80015e0 <Kalman_GetAngle>
    Kalman_GetAngle(&kalman_roll, roll_calc, roll_rate_calc, dt);
 800194a:	4b73      	ldr	r3, [pc, #460]	@ (8001b18 <main+0x2fc>)
 800194c:	edd3 7a00 	vldr	s15, [r3]
 8001950:	4b73      	ldr	r3, [pc, #460]	@ (8001b20 <main+0x304>)
 8001952:	ed93 7a00 	vldr	s14, [r3]
 8001956:	4b66      	ldr	r3, [pc, #408]	@ (8001af0 <main+0x2d4>)
 8001958:	edd3 6a00 	vldr	s13, [r3]
 800195c:	eeb0 1a66 	vmov.f32	s2, s13
 8001960:	eef0 0a47 	vmov.f32	s1, s14
 8001964:	eeb0 0a67 	vmov.f32	s0, s15
 8001968:	485f      	ldr	r0, [pc, #380]	@ (8001ae8 <main+0x2cc>)
 800196a:	f7ff fe39 	bl	80015e0 <Kalman_GetAngle>
    yaw_from_gyro(gyro_data, &yaw_angle, dt); // Calculate yaw angle from gyro data
 800196e:	4b60      	ldr	r3, [pc, #384]	@ (8001af0 <main+0x2d4>)
 8001970:	ed93 6a00 	vldr	s12, [r3]
 8001974:	4b66      	ldr	r3, [pc, #408]	@ (8001b10 <main+0x2f4>)
 8001976:	edd3 6a00 	vldr	s13, [r3]
 800197a:	ed93 7a01 	vldr	s14, [r3, #4]
 800197e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001982:	eef0 1a46 	vmov.f32	s3, s12
 8001986:	4868      	ldr	r0, [pc, #416]	@ (8001b28 <main+0x30c>)
 8001988:	eeb0 0a66 	vmov.f32	s0, s13
 800198c:	eef0 0a47 	vmov.f32	s1, s14
 8001990:	eeb0 1a67 	vmov.f32	s2, s15
 8001994:	f7ff fda1 	bl	80014da <yaw_from_gyro>

    // Calculate PID control for thrust, pitch, roll and yaw
    u_thrust = PID_Compute(&pid_thrust, accel_data.z, 0.0f);
 8001998:	4b5e      	ldr	r3, [pc, #376]	@ (8001b14 <main+0x2f8>)
 800199a:	edd3 7a02 	vldr	s15, [r3, #8]
 800199e:	eddf 0a63 	vldr	s1, [pc, #396]	@ 8001b2c <main+0x310>
 80019a2:	eeb0 0a67 	vmov.f32	s0, s15
 80019a6:	4857      	ldr	r0, [pc, #348]	@ (8001b04 <main+0x2e8>)
 80019a8:	f7ff fb66 	bl	8001078 <PID_Compute>
 80019ac:	eef0 7a40 	vmov.f32	s15, s0
 80019b0:	4b5f      	ldr	r3, [pc, #380]	@ (8001b30 <main+0x314>)
 80019b2:	edc3 7a00 	vstr	s15, [r3]
    u_pitch = PID_Compute(&pid_pitch, kalman_pitch.angle, 0.0f); // Target angle is 0 for level flight
 80019b6:	4b4d      	ldr	r3, [pc, #308]	@ (8001aec <main+0x2d0>)
 80019b8:	edd3 7a00 	vldr	s15, [r3]
 80019bc:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 8001b2c <main+0x310>
 80019c0:	eeb0 0a67 	vmov.f32	s0, s15
 80019c4:	484d      	ldr	r0, [pc, #308]	@ (8001afc <main+0x2e0>)
 80019c6:	f7ff fb57 	bl	8001078 <PID_Compute>
 80019ca:	eef0 7a40 	vmov.f32	s15, s0
 80019ce:	4b59      	ldr	r3, [pc, #356]	@ (8001b34 <main+0x318>)
 80019d0:	edc3 7a00 	vstr	s15, [r3]
    u_roll = PID_Compute(&pid_roll, kalman_roll.angle, 0.0f); // Target angle is 0 for level flight
 80019d4:	4b44      	ldr	r3, [pc, #272]	@ (8001ae8 <main+0x2cc>)
 80019d6:	edd3 7a00 	vldr	s15, [r3]
 80019da:	eddf 0a54 	vldr	s1, [pc, #336]	@ 8001b2c <main+0x310>
 80019de:	eeb0 0a67 	vmov.f32	s0, s15
 80019e2:	4847      	ldr	r0, [pc, #284]	@ (8001b00 <main+0x2e4>)
 80019e4:	f7ff fb48 	bl	8001078 <PID_Compute>
 80019e8:	eef0 7a40 	vmov.f32	s15, s0
 80019ec:	4b52      	ldr	r3, [pc, #328]	@ (8001b38 <main+0x31c>)
 80019ee:	edc3 7a00 	vstr	s15, [r3]
    u_yaw = PID_Compute(&pid_yaw, yaw_angle, 0.0f); // Assuming yaw control is not implemented, set target to 0
 80019f2:	4b4d      	ldr	r3, [pc, #308]	@ (8001b28 <main+0x30c>)
 80019f4:	edd3 7a00 	vldr	s15, [r3]
 80019f8:	eddf 0a4c 	vldr	s1, [pc, #304]	@ 8001b2c <main+0x310>
 80019fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001a00:	4841      	ldr	r0, [pc, #260]	@ (8001b08 <main+0x2ec>)
 8001a02:	f7ff fb39 	bl	8001078 <PID_Compute>
 8001a06:	eef0 7a40 	vmov.f32	s15, s0
 8001a0a:	4b4c      	ldr	r3, [pc, #304]	@ (8001b3c <main+0x320>)
 8001a0c:	edc3 7a00 	vstr	s15, [r3]
      [M1]     [M2]
           |
           v
          Front
    */
    M1 = u_thrust - u_pitch - u_roll - u_yaw; // Motor 1 control signal CW
 8001a10:	4b47      	ldr	r3, [pc, #284]	@ (8001b30 <main+0x314>)
 8001a12:	ed93 7a00 	vldr	s14, [r3]
 8001a16:	4b47      	ldr	r3, [pc, #284]	@ (8001b34 <main+0x318>)
 8001a18:	edd3 7a00 	vldr	s15, [r3]
 8001a1c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a20:	4b45      	ldr	r3, [pc, #276]	@ (8001b38 <main+0x31c>)
 8001a22:	edd3 7a00 	vldr	s15, [r3]
 8001a26:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a2a:	4b44      	ldr	r3, [pc, #272]	@ (8001b3c <main+0x320>)
 8001a2c:	edd3 7a00 	vldr	s15, [r3]
 8001a30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a34:	4b42      	ldr	r3, [pc, #264]	@ (8001b40 <main+0x324>)
 8001a36:	edc3 7a00 	vstr	s15, [r3]
    M2 = u_thrust - u_pitch + u_roll + u_yaw; // Motor 2 control signal CCW
 8001a3a:	4b3d      	ldr	r3, [pc, #244]	@ (8001b30 <main+0x314>)
 8001a3c:	ed93 7a00 	vldr	s14, [r3]
 8001a40:	4b3c      	ldr	r3, [pc, #240]	@ (8001b34 <main+0x318>)
 8001a42:	edd3 7a00 	vldr	s15, [r3]
 8001a46:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a4a:	4b3b      	ldr	r3, [pc, #236]	@ (8001b38 <main+0x31c>)
 8001a4c:	edd3 7a00 	vldr	s15, [r3]
 8001a50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a54:	4b39      	ldr	r3, [pc, #228]	@ (8001b3c <main+0x320>)
 8001a56:	edd3 7a00 	vldr	s15, [r3]
 8001a5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a5e:	4b39      	ldr	r3, [pc, #228]	@ (8001b44 <main+0x328>)
 8001a60:	edc3 7a00 	vstr	s15, [r3]
    M3 = u_thrust + u_pitch - u_roll + u_yaw; // Motor 3 control signal CCW
 8001a64:	4b32      	ldr	r3, [pc, #200]	@ (8001b30 <main+0x314>)
 8001a66:	ed93 7a00 	vldr	s14, [r3]
 8001a6a:	4b32      	ldr	r3, [pc, #200]	@ (8001b34 <main+0x318>)
 8001a6c:	edd3 7a00 	vldr	s15, [r3]
 8001a70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a74:	4b30      	ldr	r3, [pc, #192]	@ (8001b38 <main+0x31c>)
 8001a76:	edd3 7a00 	vldr	s15, [r3]
 8001a7a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a7e:	4b2f      	ldr	r3, [pc, #188]	@ (8001b3c <main+0x320>)
 8001a80:	edd3 7a00 	vldr	s15, [r3]
 8001a84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a88:	4b2f      	ldr	r3, [pc, #188]	@ (8001b48 <main+0x32c>)
 8001a8a:	edc3 7a00 	vstr	s15, [r3]
    M4 = u_thrust + u_pitch + u_roll - u_yaw; // Motor 4 control signal CW
 8001a8e:	4b28      	ldr	r3, [pc, #160]	@ (8001b30 <main+0x314>)
 8001a90:	ed93 7a00 	vldr	s14, [r3]
 8001a94:	4b27      	ldr	r3, [pc, #156]	@ (8001b34 <main+0x318>)
 8001a96:	edd3 7a00 	vldr	s15, [r3]
 8001a9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a9e:	4b26      	ldr	r3, [pc, #152]	@ (8001b38 <main+0x31c>)
 8001aa0:	edd3 7a00 	vldr	s15, [r3]
 8001aa4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001aa8:	4b24      	ldr	r3, [pc, #144]	@ (8001b3c <main+0x320>)
 8001aaa:	edd3 7a00 	vldr	s15, [r3]
 8001aae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ab2:	4b26      	ldr	r3, [pc, #152]	@ (8001b4c <main+0x330>)
 8001ab4:	edc3 7a00 	vstr	s15, [r3]

    log_data_uart(); // Log data to UART
 8001ab8:	f000 fc28 	bl	800230c <log_data_uart>
    timestamp++; 
 8001abc:	4b13      	ldr	r3, [pc, #76]	@ (8001b0c <main+0x2f0>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	4a12      	ldr	r2, [pc, #72]	@ (8001b0c <main+0x2f0>)
 8001ac4:	6013      	str	r3, [r2, #0]

    HAL_Delay(dt * 1000); // Delay for the time step
 8001ac6:	4b0a      	ldr	r3, [pc, #40]	@ (8001af0 <main+0x2d4>)
 8001ac8:	edd3 7a00 	vldr	s15, [r3]
 8001acc:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8001b50 <main+0x334>
 8001ad0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ad4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ad8:	ee17 0a90 	vmov	r0, s15
 8001adc:	f001 f910 	bl	8002d00 <HAL_Delay>
    LD2_GPIO_Port->ODR ^= LD2_Pin; // Toggle the LED
 8001ae0:	bf00      	nop
 8001ae2:	e6f1      	b.n	80018c8 <main+0xac>
 8001ae4:	200001f4 	.word	0x200001f4
 8001ae8:	20000440 	.word	0x20000440
 8001aec:	20000418 	.word	0x20000418
 8001af0:	20000000 	.word	0x20000000
 8001af4:	3c23d70a 	.word	0x3c23d70a
 8001af8:	3dcccccd 	.word	0x3dcccccd
 8001afc:	20000498 	.word	0x20000498
 8001b00:	200004b4 	.word	0x200004b4
 8001b04:	2000047c 	.word	0x2000047c
 8001b08:	200004d0 	.word	0x200004d0
 8001b0c:	2000060c 	.word	0x2000060c
 8001b10:	2000040c 	.word	0x2000040c
 8001b14:	20000400 	.word	0x20000400
 8001b18:	2000046c 	.word	0x2000046c
 8001b1c:	20000468 	.word	0x20000468
 8001b20:	20000474 	.word	0x20000474
 8001b24:	20000470 	.word	0x20000470
 8001b28:	20000478 	.word	0x20000478
 8001b2c:	00000000 	.word	0x00000000
 8001b30:	200004fc 	.word	0x200004fc
 8001b34:	20000500 	.word	0x20000500
 8001b38:	20000504 	.word	0x20000504
 8001b3c:	20000508 	.word	0x20000508
 8001b40:	200004ec 	.word	0x200004ec
 8001b44:	200004f0 	.word	0x200004f0
 8001b48:	200004f4 	.word	0x200004f4
 8001b4c:	200004f8 	.word	0x200004f8
 8001b50:	447a0000 	.word	0x447a0000

08001b54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b096      	sub	sp, #88	@ 0x58
 8001b58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b5a:	f107 0314 	add.w	r3, r7, #20
 8001b5e:	2244      	movs	r2, #68	@ 0x44
 8001b60:	2100      	movs	r1, #0
 8001b62:	4618      	mov	r0, r3
 8001b64:	f007 f960 	bl	8008e28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b68:	463b      	mov	r3, r7
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	605a      	str	r2, [r3, #4]
 8001b70:	609a      	str	r2, [r3, #8]
 8001b72:	60da      	str	r2, [r3, #12]
 8001b74:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001b76:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001b7a:	f002 f9eb 	bl	8003f54 <HAL_PWREx_ControlVoltageScaling>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001b84:	f000 fd28 	bl	80025d8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b88:	2302      	movs	r3, #2
 8001b8a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b8c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b90:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b92:	2310      	movs	r3, #16
 8001b94:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b96:	2302      	movs	r3, #2
 8001b98:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001ba2:	230a      	movs	r3, #10
 8001ba4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001ba6:	2307      	movs	r3, #7
 8001ba8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001baa:	2302      	movs	r3, #2
 8001bac:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001bae:	2302      	movs	r3, #2
 8001bb0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bb2:	f107 0314 	add.w	r3, r7, #20
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f002 fa22 	bl	8004000 <HAL_RCC_OscConfig>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001bc2:	f000 fd09 	bl	80025d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bc6:	230f      	movs	r3, #15
 8001bc8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001bda:	463b      	mov	r3, r7
 8001bdc:	2104      	movs	r1, #4
 8001bde:	4618      	mov	r0, r3
 8001be0:	f002 fdea 	bl	80047b8 <HAL_RCC_ClockConfig>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001bea:	f000 fcf5 	bl	80025d8 <Error_Handler>
  }
}
 8001bee:	bf00      	nop
 8001bf0:	3758      	adds	r7, #88	@ 0x58
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
	...

08001bf8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001bfc:	4b1b      	ldr	r3, [pc, #108]	@ (8001c6c <MX_I2C1_Init+0x74>)
 8001bfe:	4a1c      	ldr	r2, [pc, #112]	@ (8001c70 <MX_I2C1_Init+0x78>)
 8001c00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 8001c02:	4b1a      	ldr	r3, [pc, #104]	@ (8001c6c <MX_I2C1_Init+0x74>)
 8001c04:	4a1b      	ldr	r2, [pc, #108]	@ (8001c74 <MX_I2C1_Init+0x7c>)
 8001c06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001c08:	4b18      	ldr	r3, [pc, #96]	@ (8001c6c <MX_I2C1_Init+0x74>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c0e:	4b17      	ldr	r3, [pc, #92]	@ (8001c6c <MX_I2C1_Init+0x74>)
 8001c10:	2201      	movs	r2, #1
 8001c12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c14:	4b15      	ldr	r3, [pc, #84]	@ (8001c6c <MX_I2C1_Init+0x74>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001c1a:	4b14      	ldr	r3, [pc, #80]	@ (8001c6c <MX_I2C1_Init+0x74>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c20:	4b12      	ldr	r3, [pc, #72]	@ (8001c6c <MX_I2C1_Init+0x74>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c26:	4b11      	ldr	r3, [pc, #68]	@ (8001c6c <MX_I2C1_Init+0x74>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c2c:	4b0f      	ldr	r3, [pc, #60]	@ (8001c6c <MX_I2C1_Init+0x74>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c32:	480e      	ldr	r0, [pc, #56]	@ (8001c6c <MX_I2C1_Init+0x74>)
 8001c34:	f001 fb5c 	bl	80032f0 <HAL_I2C_Init>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001c3e:	f000 fccb 	bl	80025d8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c42:	2100      	movs	r1, #0
 8001c44:	4809      	ldr	r0, [pc, #36]	@ (8001c6c <MX_I2C1_Init+0x74>)
 8001c46:	f002 f8df 	bl	8003e08 <HAL_I2CEx_ConfigAnalogFilter>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001c50:	f000 fcc2 	bl	80025d8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001c54:	2100      	movs	r1, #0
 8001c56:	4805      	ldr	r0, [pc, #20]	@ (8001c6c <MX_I2C1_Init+0x74>)
 8001c58:	f002 f921 	bl	8003e9e <HAL_I2CEx_ConfigDigitalFilter>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001c62:	f000 fcb9 	bl	80025d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c66:	bf00      	nop
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	200001f4 	.word	0x200001f4
 8001c70:	40005400 	.word	0x40005400
 8001c74:	10d19ce4 	.word	0x10d19ce4

08001c78 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b090      	sub	sp, #64	@ 0x40
 8001c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c7e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001c82:	2200      	movs	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	605a      	str	r2, [r3, #4]
 8001c88:	609a      	str	r2, [r3, #8]
 8001c8a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001c8c:	f107 031c 	add.w	r3, r7, #28
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	605a      	str	r2, [r3, #4]
 8001c96:	609a      	str	r2, [r3, #8]
 8001c98:	60da      	str	r2, [r3, #12]
 8001c9a:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001c9c:	f107 030c 	add.w	r3, r7, #12
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	605a      	str	r2, [r3, #4]
 8001ca6:	609a      	str	r2, [r3, #8]
 8001ca8:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001caa:	463b      	mov	r3, r7
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	605a      	str	r2, [r3, #4]
 8001cb2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001cb4:	4b42      	ldr	r3, [pc, #264]	@ (8001dc0 <MX_TIM2_Init+0x148>)
 8001cb6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001cba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001cbc:	4b40      	ldr	r3, [pc, #256]	@ (8001dc0 <MX_TIM2_Init+0x148>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cc2:	4b3f      	ldr	r3, [pc, #252]	@ (8001dc0 <MX_TIM2_Init+0x148>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001cc8:	4b3d      	ldr	r3, [pc, #244]	@ (8001dc0 <MX_TIM2_Init+0x148>)
 8001cca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001cce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cd0:	4b3b      	ldr	r3, [pc, #236]	@ (8001dc0 <MX_TIM2_Init+0x148>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cd6:	4b3a      	ldr	r3, [pc, #232]	@ (8001dc0 <MX_TIM2_Init+0x148>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001cdc:	4838      	ldr	r0, [pc, #224]	@ (8001dc0 <MX_TIM2_Init+0x148>)
 8001cde:	f003 fc4b 	bl	8005578 <HAL_TIM_Base_Init>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001ce8:	f000 fc76 	bl	80025d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cf0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001cf2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4831      	ldr	r0, [pc, #196]	@ (8001dc0 <MX_TIM2_Init+0x148>)
 8001cfa:	f003 ffe2 	bl	8005cc2 <HAL_TIM_ConfigClockSource>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001d04:	f000 fc68 	bl	80025d8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001d08:	482d      	ldr	r0, [pc, #180]	@ (8001dc0 <MX_TIM2_Init+0x148>)
 8001d0a:	f003 fc8c 	bl	8005626 <HAL_TIM_IC_Init>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001d14:	f000 fc60 	bl	80025d8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001d18:	2304      	movs	r3, #4
 8001d1a:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001d1c:	2350      	movs	r3, #80	@ 0x50
 8001d1e:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001d20:	2300      	movs	r3, #0
 8001d22:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001d24:	2300      	movs	r3, #0
 8001d26:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001d2c:	f107 031c 	add.w	r3, r7, #28
 8001d30:	4619      	mov	r1, r3
 8001d32:	4823      	ldr	r0, [pc, #140]	@ (8001dc0 <MX_TIM2_Init+0x148>)
 8001d34:	f004 f88e 	bl	8005e54 <HAL_TIM_SlaveConfigSynchro>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8001d3e:	f000 fc4b 	bl	80025d8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001d42:	2300      	movs	r3, #0
 8001d44:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001d46:	2301      	movs	r3, #1
 8001d48:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001d52:	f107 030c 	add.w	r3, r7, #12
 8001d56:	2200      	movs	r2, #0
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4819      	ldr	r0, [pc, #100]	@ (8001dc0 <MX_TIM2_Init+0x148>)
 8001d5c:	f003 ff15 	bl	8005b8a <HAL_TIM_IC_ConfigChannel>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8001d66:	f000 fc37 	bl	80025d8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001d6e:	2302      	movs	r3, #2
 8001d70:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001d72:	f107 030c 	add.w	r3, r7, #12
 8001d76:	2204      	movs	r2, #4
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4811      	ldr	r0, [pc, #68]	@ (8001dc0 <MX_TIM2_Init+0x148>)
 8001d7c:	f003 ff05 	bl	8005b8a <HAL_TIM_IC_ConfigChannel>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <MX_TIM2_Init+0x112>
  {
    Error_Handler();
 8001d86:	f000 fc27 	bl	80025d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d92:	463b      	mov	r3, r7
 8001d94:	4619      	mov	r1, r3
 8001d96:	480a      	ldr	r0, [pc, #40]	@ (8001dc0 <MX_TIM2_Init+0x148>)
 8001d98:	f004 fc28 	bl	80065ec <HAL_TIMEx_MasterConfigSynchronization>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <MX_TIM2_Init+0x12e>
  {
    Error_Handler();
 8001da2:	f000 fc19 	bl	80025d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1); // Start input capture on channel 1
 8001da6:	2100      	movs	r1, #0
 8001da8:	4805      	ldr	r0, [pc, #20]	@ (8001dc0 <MX_TIM2_Init+0x148>)
 8001daa:	f003 fc9d 	bl	80056e8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2); // Start input capture on channel 2
 8001dae:	2104      	movs	r1, #4
 8001db0:	4803      	ldr	r0, [pc, #12]	@ (8001dc0 <MX_TIM2_Init+0x148>)
 8001db2:	f003 fc99 	bl	80056e8 <HAL_TIM_IC_Start_IT>
  /* USER CODE END TIM2_Init 2 */

}
 8001db6:	bf00      	nop
 8001db8:	3740      	adds	r7, #64	@ 0x40
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	20000248 	.word	0x20000248

08001dc4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b090      	sub	sp, #64	@ 0x40
 8001dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dca:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001dce:	2200      	movs	r2, #0
 8001dd0:	601a      	str	r2, [r3, #0]
 8001dd2:	605a      	str	r2, [r3, #4]
 8001dd4:	609a      	str	r2, [r3, #8]
 8001dd6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001dd8:	f107 031c 	add.w	r3, r7, #28
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	605a      	str	r2, [r3, #4]
 8001de2:	609a      	str	r2, [r3, #8]
 8001de4:	60da      	str	r2, [r3, #12]
 8001de6:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001de8:	f107 030c 	add.w	r3, r7, #12
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	609a      	str	r2, [r3, #8]
 8001df4:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001df6:	463b      	mov	r3, r7
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	605a      	str	r2, [r3, #4]
 8001dfe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e00:	4b41      	ldr	r3, [pc, #260]	@ (8001f08 <MX_TIM3_Init+0x144>)
 8001e02:	4a42      	ldr	r2, [pc, #264]	@ (8001f0c <MX_TIM3_Init+0x148>)
 8001e04:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 8001e06:	4b40      	ldr	r3, [pc, #256]	@ (8001f08 <MX_TIM3_Init+0x144>)
 8001e08:	2207      	movs	r2, #7
 8001e0a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e0c:	4b3e      	ldr	r3, [pc, #248]	@ (8001f08 <MX_TIM3_Init+0x144>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001e12:	4b3d      	ldr	r3, [pc, #244]	@ (8001f08 <MX_TIM3_Init+0x144>)
 8001e14:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e18:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e1a:	4b3b      	ldr	r3, [pc, #236]	@ (8001f08 <MX_TIM3_Init+0x144>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e20:	4b39      	ldr	r3, [pc, #228]	@ (8001f08 <MX_TIM3_Init+0x144>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001e26:	4838      	ldr	r0, [pc, #224]	@ (8001f08 <MX_TIM3_Init+0x144>)
 8001e28:	f003 fba6 	bl	8005578 <HAL_TIM_Base_Init>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001e32:	f000 fbd1 	bl	80025d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e3a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001e3c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001e40:	4619      	mov	r1, r3
 8001e42:	4831      	ldr	r0, [pc, #196]	@ (8001f08 <MX_TIM3_Init+0x144>)
 8001e44:	f003 ff3d 	bl	8005cc2 <HAL_TIM_ConfigClockSource>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001e4e:	f000 fbc3 	bl	80025d8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001e52:	482d      	ldr	r0, [pc, #180]	@ (8001f08 <MX_TIM3_Init+0x144>)
 8001e54:	f003 fbe7 	bl	8005626 <HAL_TIM_IC_Init>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001e5e:	f000 fbbb 	bl	80025d8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001e62:	2304      	movs	r3, #4
 8001e64:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001e66:	2350      	movs	r3, #80	@ 0x50
 8001e68:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001e72:	2300      	movs	r3, #0
 8001e74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001e76:	f107 031c 	add.w	r3, r7, #28
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4822      	ldr	r0, [pc, #136]	@ (8001f08 <MX_TIM3_Init+0x144>)
 8001e7e:	f003 ffe9 	bl	8005e54 <HAL_TIM_SlaveConfigSynchro>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8001e88:	f000 fba6 	bl	80025d8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001e90:	2301      	movs	r3, #1
 8001e92:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001e94:	2300      	movs	r3, #0
 8001e96:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001e9c:	f107 030c 	add.w	r3, r7, #12
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4818      	ldr	r0, [pc, #96]	@ (8001f08 <MX_TIM3_Init+0x144>)
 8001ea6:	f003 fe70 	bl	8005b8a <HAL_TIM_IC_ConfigChannel>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8001eb0:	f000 fb92 	bl	80025d8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001eb8:	2302      	movs	r3, #2
 8001eba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001ebc:	f107 030c 	add.w	r3, r7, #12
 8001ec0:	2204      	movs	r2, #4
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	4810      	ldr	r0, [pc, #64]	@ (8001f08 <MX_TIM3_Init+0x144>)
 8001ec6:	f003 fe60 	bl	8005b8a <HAL_TIM_IC_ConfigChannel>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <MX_TIM3_Init+0x110>
  {
    Error_Handler();
 8001ed0:	f000 fb82 	bl	80025d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001edc:	463b      	mov	r3, r7
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4809      	ldr	r0, [pc, #36]	@ (8001f08 <MX_TIM3_Init+0x144>)
 8001ee2:	f004 fb83 	bl	80065ec <HAL_TIMEx_MasterConfigSynchronization>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <MX_TIM3_Init+0x12c>
  {
    Error_Handler();
 8001eec:	f000 fb74 	bl	80025d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1); // Start input capture on channel 1
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	4805      	ldr	r0, [pc, #20]	@ (8001f08 <MX_TIM3_Init+0x144>)
 8001ef4:	f003 fbf8 	bl	80056e8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2); // Start input capture on channel 2
 8001ef8:	2104      	movs	r1, #4
 8001efa:	4803      	ldr	r0, [pc, #12]	@ (8001f08 <MX_TIM3_Init+0x144>)
 8001efc:	f003 fbf4 	bl	80056e8 <HAL_TIM_IC_Start_IT>
  /* USER CODE END TIM3_Init 2 */

}
 8001f00:	bf00      	nop
 8001f02:	3740      	adds	r7, #64	@ 0x40
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	20000294 	.word	0x20000294
 8001f0c:	40000400 	.word	0x40000400

08001f10 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b090      	sub	sp, #64	@ 0x40
 8001f14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f16:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	601a      	str	r2, [r3, #0]
 8001f1e:	605a      	str	r2, [r3, #4]
 8001f20:	609a      	str	r2, [r3, #8]
 8001f22:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001f24:	f107 031c 	add.w	r3, r7, #28
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	605a      	str	r2, [r3, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
 8001f30:	60da      	str	r2, [r3, #12]
 8001f32:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001f34:	f107 030c 	add.w	r3, r7, #12
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	605a      	str	r2, [r3, #4]
 8001f3e:	609a      	str	r2, [r3, #8]
 8001f40:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f42:	463b      	mov	r3, r7
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	605a      	str	r2, [r3, #4]
 8001f4a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001f4c:	4b41      	ldr	r3, [pc, #260]	@ (8002054 <MX_TIM4_Init+0x144>)
 8001f4e:	4a42      	ldr	r2, [pc, #264]	@ (8002058 <MX_TIM4_Init+0x148>)
 8001f50:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7;
 8001f52:	4b40      	ldr	r3, [pc, #256]	@ (8002054 <MX_TIM4_Init+0x144>)
 8001f54:	2207      	movs	r2, #7
 8001f56:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f58:	4b3e      	ldr	r3, [pc, #248]	@ (8002054 <MX_TIM4_Init+0x144>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001f5e:	4b3d      	ldr	r3, [pc, #244]	@ (8002054 <MX_TIM4_Init+0x144>)
 8001f60:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f64:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f66:	4b3b      	ldr	r3, [pc, #236]	@ (8002054 <MX_TIM4_Init+0x144>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f6c:	4b39      	ldr	r3, [pc, #228]	@ (8002054 <MX_TIM4_Init+0x144>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001f72:	4838      	ldr	r0, [pc, #224]	@ (8002054 <MX_TIM4_Init+0x144>)
 8001f74:	f003 fb00 	bl	8005578 <HAL_TIM_Base_Init>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8001f7e:	f000 fb2b 	bl	80025d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f82:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f86:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001f88:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	4831      	ldr	r0, [pc, #196]	@ (8002054 <MX_TIM4_Init+0x144>)
 8001f90:	f003 fe97 	bl	8005cc2 <HAL_TIM_ConfigClockSource>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8001f9a:	f000 fb1d 	bl	80025d8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001f9e:	482d      	ldr	r0, [pc, #180]	@ (8002054 <MX_TIM4_Init+0x144>)
 8001fa0:	f003 fb41 	bl	8005626 <HAL_TIM_IC_Init>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001faa:	f000 fb15 	bl	80025d8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001fae:	2304      	movs	r3, #4
 8001fb0:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001fb2:	2350      	movs	r3, #80	@ 0x50
 8001fb4:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8001fc2:	f107 031c 	add.w	r3, r7, #28
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4822      	ldr	r0, [pc, #136]	@ (8002054 <MX_TIM4_Init+0x144>)
 8001fca:	f003 ff43 	bl	8005e54 <HAL_TIM_SlaveConfigSynchro>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8001fd4:	f000 fb00 	bl	80025d8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001fe8:	f107 030c 	add.w	r3, r7, #12
 8001fec:	2200      	movs	r2, #0
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4818      	ldr	r0, [pc, #96]	@ (8002054 <MX_TIM4_Init+0x144>)
 8001ff2:	f003 fdca 	bl	8005b8a <HAL_TIM_IC_ConfigChannel>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <MX_TIM4_Init+0xf0>
  {
    Error_Handler();
 8001ffc:	f000 faec 	bl	80025d8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002000:	2302      	movs	r3, #2
 8002002:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002004:	2302      	movs	r3, #2
 8002006:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002008:	f107 030c 	add.w	r3, r7, #12
 800200c:	2204      	movs	r2, #4
 800200e:	4619      	mov	r1, r3
 8002010:	4810      	ldr	r0, [pc, #64]	@ (8002054 <MX_TIM4_Init+0x144>)
 8002012:	f003 fdba 	bl	8005b8a <HAL_TIM_IC_ConfigChannel>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <MX_TIM4_Init+0x110>
  {
    Error_Handler();
 800201c:	f000 fadc 	bl	80025d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002020:	2300      	movs	r3, #0
 8002022:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002024:	2300      	movs	r3, #0
 8002026:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002028:	463b      	mov	r3, r7
 800202a:	4619      	mov	r1, r3
 800202c:	4809      	ldr	r0, [pc, #36]	@ (8002054 <MX_TIM4_Init+0x144>)
 800202e:	f004 fadd 	bl	80065ec <HAL_TIMEx_MasterConfigSynchronization>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <MX_TIM4_Init+0x12c>
  {
    Error_Handler();
 8002038:	f000 face 	bl	80025d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1); // Start input capture on channel 1
 800203c:	2100      	movs	r1, #0
 800203e:	4805      	ldr	r0, [pc, #20]	@ (8002054 <MX_TIM4_Init+0x144>)
 8002040:	f003 fb52 	bl	80056e8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2); // Start input capture on channel 2
 8002044:	2104      	movs	r1, #4
 8002046:	4803      	ldr	r0, [pc, #12]	@ (8002054 <MX_TIM4_Init+0x144>)
 8002048:	f003 fb4e 	bl	80056e8 <HAL_TIM_IC_Start_IT>
  /* USER CODE END TIM4_Init 2 */

}
 800204c:	bf00      	nop
 800204e:	3740      	adds	r7, #64	@ 0x40
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	200002e0 	.word	0x200002e0
 8002058:	40000800 	.word	0x40000800

0800205c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b090      	sub	sp, #64	@ 0x40
 8002060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002062:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002066:	2200      	movs	r2, #0
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	605a      	str	r2, [r3, #4]
 800206c:	609a      	str	r2, [r3, #8]
 800206e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002070:	f107 031c 	add.w	r3, r7, #28
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	605a      	str	r2, [r3, #4]
 800207a:	609a      	str	r2, [r3, #8]
 800207c:	60da      	str	r2, [r3, #12]
 800207e:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002080:	f107 030c 	add.w	r3, r7, #12
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	605a      	str	r2, [r3, #4]
 800208a:	609a      	str	r2, [r3, #8]
 800208c:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800208e:	463b      	mov	r3, r7
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	605a      	str	r2, [r3, #4]
 8002096:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002098:	4b41      	ldr	r3, [pc, #260]	@ (80021a0 <MX_TIM5_Init+0x144>)
 800209a:	4a42      	ldr	r2, [pc, #264]	@ (80021a4 <MX_TIM5_Init+0x148>)
 800209c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800209e:	4b40      	ldr	r3, [pc, #256]	@ (80021a0 <MX_TIM5_Init+0x144>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020a4:	4b3e      	ldr	r3, [pc, #248]	@ (80021a0 <MX_TIM5_Init+0x144>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80020aa:	4b3d      	ldr	r3, [pc, #244]	@ (80021a0 <MX_TIM5_Init+0x144>)
 80020ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80020b0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020b2:	4b3b      	ldr	r3, [pc, #236]	@ (80021a0 <MX_TIM5_Init+0x144>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020b8:	4b39      	ldr	r3, [pc, #228]	@ (80021a0 <MX_TIM5_Init+0x144>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80020be:	4838      	ldr	r0, [pc, #224]	@ (80021a0 <MX_TIM5_Init+0x144>)
 80020c0:	f003 fa5a 	bl	8005578 <HAL_TIM_Base_Init>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 80020ca:	f000 fa85 	bl	80025d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020d2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80020d4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80020d8:	4619      	mov	r1, r3
 80020da:	4831      	ldr	r0, [pc, #196]	@ (80021a0 <MX_TIM5_Init+0x144>)
 80020dc:	f003 fdf1 	bl	8005cc2 <HAL_TIM_ConfigClockSource>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 80020e6:	f000 fa77 	bl	80025d8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 80020ea:	482d      	ldr	r0, [pc, #180]	@ (80021a0 <MX_TIM5_Init+0x144>)
 80020ec:	f003 fa9b 	bl	8005626 <HAL_TIM_IC_Init>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 80020f6:	f000 fa6f 	bl	80025d8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80020fa:	2304      	movs	r3, #4
 80020fc:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80020fe:	2350      	movs	r3, #80	@ 0x50
 8002100:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002102:	2300      	movs	r3, #0
 8002104:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8002106:	2300      	movs	r3, #0
 8002108:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 800210a:	2300      	movs	r3, #0
 800210c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 800210e:	f107 031c 	add.w	r3, r7, #28
 8002112:	4619      	mov	r1, r3
 8002114:	4822      	ldr	r0, [pc, #136]	@ (80021a0 <MX_TIM5_Init+0x144>)
 8002116:	f003 fe9d 	bl	8005e54 <HAL_TIM_SlaveConfigSynchro>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 8002120:	f000 fa5a 	bl	80025d8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002124:	2300      	movs	r3, #0
 8002126:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002128:	2301      	movs	r3, #1
 800212a:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800212c:	2300      	movs	r3, #0
 800212e:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8002130:	2300      	movs	r3, #0
 8002132:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002134:	f107 030c 	add.w	r3, r7, #12
 8002138:	2200      	movs	r2, #0
 800213a:	4619      	mov	r1, r3
 800213c:	4818      	ldr	r0, [pc, #96]	@ (80021a0 <MX_TIM5_Init+0x144>)
 800213e:	f003 fd24 	bl	8005b8a <HAL_TIM_IC_ConfigChannel>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d001      	beq.n	800214c <MX_TIM5_Init+0xf0>
  {
    Error_Handler();
 8002148:	f000 fa46 	bl	80025d8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800214c:	2302      	movs	r3, #2
 800214e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002150:	2302      	movs	r3, #2
 8002152:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002154:	f107 030c 	add.w	r3, r7, #12
 8002158:	2204      	movs	r2, #4
 800215a:	4619      	mov	r1, r3
 800215c:	4810      	ldr	r0, [pc, #64]	@ (80021a0 <MX_TIM5_Init+0x144>)
 800215e:	f003 fd14 	bl	8005b8a <HAL_TIM_IC_ConfigChannel>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <MX_TIM5_Init+0x110>
  {
    Error_Handler();
 8002168:	f000 fa36 	bl	80025d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800216c:	2300      	movs	r3, #0
 800216e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002170:	2300      	movs	r3, #0
 8002172:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002174:	463b      	mov	r3, r7
 8002176:	4619      	mov	r1, r3
 8002178:	4809      	ldr	r0, [pc, #36]	@ (80021a0 <MX_TIM5_Init+0x144>)
 800217a:	f004 fa37 	bl	80065ec <HAL_TIMEx_MasterConfigSynchronization>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <MX_TIM5_Init+0x12c>
  {
    Error_Handler();
 8002184:	f000 fa28 	bl	80025d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1); // Start input capture on channel 1
 8002188:	2100      	movs	r1, #0
 800218a:	4805      	ldr	r0, [pc, #20]	@ (80021a0 <MX_TIM5_Init+0x144>)
 800218c:	f003 faac 	bl	80056e8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_2); // Start input capture on channel 2
 8002190:	2104      	movs	r1, #4
 8002192:	4803      	ldr	r0, [pc, #12]	@ (80021a0 <MX_TIM5_Init+0x144>)
 8002194:	f003 faa8 	bl	80056e8 <HAL_TIM_IC_Start_IT>
  /* USER CODE END TIM5_Init 2 */

}
 8002198:	bf00      	nop
 800219a:	3740      	adds	r7, #64	@ 0x40
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	2000032c 	.word	0x2000032c
 80021a4:	40000c00 	.word	0x40000c00

080021a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021ac:	4b14      	ldr	r3, [pc, #80]	@ (8002200 <MX_USART2_UART_Init+0x58>)
 80021ae:	4a15      	ldr	r2, [pc, #84]	@ (8002204 <MX_USART2_UART_Init+0x5c>)
 80021b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80021b2:	4b13      	ldr	r3, [pc, #76]	@ (8002200 <MX_USART2_UART_Init+0x58>)
 80021b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80021b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021ba:	4b11      	ldr	r3, [pc, #68]	@ (8002200 <MX_USART2_UART_Init+0x58>)
 80021bc:	2200      	movs	r2, #0
 80021be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002200 <MX_USART2_UART_Init+0x58>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002200 <MX_USART2_UART_Init+0x58>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002200 <MX_USART2_UART_Init+0x58>)
 80021ce:	220c      	movs	r2, #12
 80021d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002200 <MX_USART2_UART_Init+0x58>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021d8:	4b09      	ldr	r3, [pc, #36]	@ (8002200 <MX_USART2_UART_Init+0x58>)
 80021da:	2200      	movs	r2, #0
 80021dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021de:	4b08      	ldr	r3, [pc, #32]	@ (8002200 <MX_USART2_UART_Init+0x58>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021e4:	4b06      	ldr	r3, [pc, #24]	@ (8002200 <MX_USART2_UART_Init+0x58>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80021ea:	4805      	ldr	r0, [pc, #20]	@ (8002200 <MX_USART2_UART_Init+0x58>)
 80021ec:	f004 faa4 	bl	8006738 <HAL_UART_Init>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80021f6:	f000 f9ef 	bl	80025d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80021fa:	bf00      	nop
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	20000378 	.word	0x20000378
 8002204:	40004400 	.word	0x40004400

08002208 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b08a      	sub	sp, #40	@ 0x28
 800220c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800220e:	f107 0314 	add.w	r3, r7, #20
 8002212:	2200      	movs	r2, #0
 8002214:	601a      	str	r2, [r3, #0]
 8002216:	605a      	str	r2, [r3, #4]
 8002218:	609a      	str	r2, [r3, #8]
 800221a:	60da      	str	r2, [r3, #12]
 800221c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800221e:	4b2b      	ldr	r3, [pc, #172]	@ (80022cc <MX_GPIO_Init+0xc4>)
 8002220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002222:	4a2a      	ldr	r2, [pc, #168]	@ (80022cc <MX_GPIO_Init+0xc4>)
 8002224:	f043 0304 	orr.w	r3, r3, #4
 8002228:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800222a:	4b28      	ldr	r3, [pc, #160]	@ (80022cc <MX_GPIO_Init+0xc4>)
 800222c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800222e:	f003 0304 	and.w	r3, r3, #4
 8002232:	613b      	str	r3, [r7, #16]
 8002234:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002236:	4b25      	ldr	r3, [pc, #148]	@ (80022cc <MX_GPIO_Init+0xc4>)
 8002238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800223a:	4a24      	ldr	r2, [pc, #144]	@ (80022cc <MX_GPIO_Init+0xc4>)
 800223c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002240:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002242:	4b22      	ldr	r3, [pc, #136]	@ (80022cc <MX_GPIO_Init+0xc4>)
 8002244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002246:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800224e:	4b1f      	ldr	r3, [pc, #124]	@ (80022cc <MX_GPIO_Init+0xc4>)
 8002250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002252:	4a1e      	ldr	r2, [pc, #120]	@ (80022cc <MX_GPIO_Init+0xc4>)
 8002254:	f043 0301 	orr.w	r3, r3, #1
 8002258:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800225a:	4b1c      	ldr	r3, [pc, #112]	@ (80022cc <MX_GPIO_Init+0xc4>)
 800225c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	60bb      	str	r3, [r7, #8]
 8002264:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002266:	4b19      	ldr	r3, [pc, #100]	@ (80022cc <MX_GPIO_Init+0xc4>)
 8002268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800226a:	4a18      	ldr	r2, [pc, #96]	@ (80022cc <MX_GPIO_Init+0xc4>)
 800226c:	f043 0302 	orr.w	r3, r3, #2
 8002270:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002272:	4b16      	ldr	r3, [pc, #88]	@ (80022cc <MX_GPIO_Init+0xc4>)
 8002274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	607b      	str	r3, [r7, #4]
 800227c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800227e:	2200      	movs	r2, #0
 8002280:	2120      	movs	r1, #32
 8002282:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002286:	f001 f81b 	bl	80032c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800228a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800228e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002290:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002294:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002296:	2300      	movs	r3, #0
 8002298:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800229a:	f107 0314 	add.w	r3, r7, #20
 800229e:	4619      	mov	r1, r3
 80022a0:	480b      	ldr	r0, [pc, #44]	@ (80022d0 <MX_GPIO_Init+0xc8>)
 80022a2:	f000 fe63 	bl	8002f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80022a6:	2320      	movs	r3, #32
 80022a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022aa:	2301      	movs	r3, #1
 80022ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ae:	2300      	movs	r3, #0
 80022b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b2:	2300      	movs	r3, #0
 80022b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80022b6:	f107 0314 	add.w	r3, r7, #20
 80022ba:	4619      	mov	r1, r3
 80022bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022c0:	f000 fe54 	bl	8002f6c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80022c4:	bf00      	nop
 80022c6:	3728      	adds	r7, #40	@ 0x28
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40021000 	.word	0x40021000
 80022d0:	48000800 	.word	0x48000800

080022d4 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022e0:	2300      	movs	r3, #0
 80022e2:	617b      	str	r3, [r7, #20]
 80022e4:	e009      	b.n	80022fa <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	1c5a      	adds	r2, r3, #1
 80022ea:	60ba      	str	r2, [r7, #8]
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff fa6d 	bl	80017ce <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	3301      	adds	r3, #1
 80022f8:	617b      	str	r3, [r7, #20]
 80022fa:	697a      	ldr	r2, [r7, #20]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	429a      	cmp	r2, r3
 8002300:	dbf1      	blt.n	80022e6 <_write+0x12>
  }
  return len;
 8002302:	687b      	ldr	r3, [r7, #4]
}
 8002304:	4618      	mov	r0, r3
 8002306:	3718      	adds	r7, #24
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <log_data_uart>:

void log_data_uart() {
 800230c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002310:	b0b1      	sub	sp, #196	@ 0xc4
 8002312:	af1c      	add	r7, sp, #112	@ 0x70
    sprintf(tx_buffer, "%lu,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f\n",
 8002314:	4b54      	ldr	r3, [pc, #336]	@ (8002468 <log_data_uart+0x15c>)
 8002316:	681e      	ldr	r6, [r3, #0]
 8002318:	4b54      	ldr	r3, [pc, #336]	@ (800246c <log_data_uart+0x160>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4618      	mov	r0, r3
 800231e:	f7fe f913 	bl	8000548 <__aeabi_f2d>
 8002322:	e9c7 0112 	strd	r0, r1, [r7, #72]	@ 0x48
 8002326:	4b52      	ldr	r3, [pc, #328]	@ (8002470 <log_data_uart+0x164>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4618      	mov	r0, r3
 800232c:	f7fe f90c 	bl	8000548 <__aeabi_f2d>
 8002330:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
 8002334:	4b4f      	ldr	r3, [pc, #316]	@ (8002474 <log_data_uart+0x168>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4618      	mov	r0, r3
 800233a:	f7fe f905 	bl	8000548 <__aeabi_f2d>
 800233e:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
 8002342:	4b4d      	ldr	r3, [pc, #308]	@ (8002478 <log_data_uart+0x16c>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4618      	mov	r0, r3
 8002348:	f7fe f8fe 	bl	8000548 <__aeabi_f2d>
 800234c:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
 8002350:	4b4a      	ldr	r3, [pc, #296]	@ (800247c <log_data_uart+0x170>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4618      	mov	r0, r3
 8002356:	f7fe f8f7 	bl	8000548 <__aeabi_f2d>
 800235a:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
 800235e:	4b48      	ldr	r3, [pc, #288]	@ (8002480 <log_data_uart+0x174>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4618      	mov	r0, r3
 8002364:	f7fe f8f0 	bl	8000548 <__aeabi_f2d>
 8002368:	e9c7 0108 	strd	r0, r1, [r7, #32]
 800236c:	4b45      	ldr	r3, [pc, #276]	@ (8002484 <log_data_uart+0x178>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4618      	mov	r0, r3
 8002372:	f7fe f8e9 	bl	8000548 <__aeabi_f2d>
 8002376:	e9c7 0106 	strd	r0, r1, [r7, #24]
 800237a:	4b43      	ldr	r3, [pc, #268]	@ (8002488 <log_data_uart+0x17c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4618      	mov	r0, r3
 8002380:	f7fe f8e2 	bl	8000548 <__aeabi_f2d>
 8002384:	e9c7 0104 	strd	r0, r1, [r7, #16]
        timestamp, M1, M2, M3, M4, u_pitch, u_roll, u_yaw, u_thrust, accel_data.x, accel_data.y, accel_data.z, gyro_data.x, gyro_data.y, gyro_data.z);
 8002388:	4b40      	ldr	r3, [pc, #256]	@ (800248c <log_data_uart+0x180>)
 800238a:	681b      	ldr	r3, [r3, #0]
    sprintf(tx_buffer, "%lu,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f\n",
 800238c:	4618      	mov	r0, r3
 800238e:	f7fe f8db 	bl	8000548 <__aeabi_f2d>
 8002392:	e9c7 0102 	strd	r0, r1, [r7, #8]
        timestamp, M1, M2, M3, M4, u_pitch, u_roll, u_yaw, u_thrust, accel_data.x, accel_data.y, accel_data.z, gyro_data.x, gyro_data.y, gyro_data.z);
 8002396:	4b3d      	ldr	r3, [pc, #244]	@ (800248c <log_data_uart+0x180>)
 8002398:	685b      	ldr	r3, [r3, #4]
    sprintf(tx_buffer, "%lu,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f\n",
 800239a:	4618      	mov	r0, r3
 800239c:	f7fe f8d4 	bl	8000548 <__aeabi_f2d>
 80023a0:	e9c7 0100 	strd	r0, r1, [r7]
        timestamp, M1, M2, M3, M4, u_pitch, u_roll, u_yaw, u_thrust, accel_data.x, accel_data.y, accel_data.z, gyro_data.x, gyro_data.y, gyro_data.z);
 80023a4:	4b39      	ldr	r3, [pc, #228]	@ (800248c <log_data_uart+0x180>)
 80023a6:	689b      	ldr	r3, [r3, #8]
    sprintf(tx_buffer, "%lu,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f\n",
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7fe f8cd 	bl	8000548 <__aeabi_f2d>
 80023ae:	4682      	mov	sl, r0
 80023b0:	468b      	mov	fp, r1
        timestamp, M1, M2, M3, M4, u_pitch, u_roll, u_yaw, u_thrust, accel_data.x, accel_data.y, accel_data.z, gyro_data.x, gyro_data.y, gyro_data.z);
 80023b2:	4b37      	ldr	r3, [pc, #220]	@ (8002490 <log_data_uart+0x184>)
 80023b4:	681b      	ldr	r3, [r3, #0]
    sprintf(tx_buffer, "%lu,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f\n",
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7fe f8c6 	bl	8000548 <__aeabi_f2d>
 80023bc:	4680      	mov	r8, r0
 80023be:	4689      	mov	r9, r1
        timestamp, M1, M2, M3, M4, u_pitch, u_roll, u_yaw, u_thrust, accel_data.x, accel_data.y, accel_data.z, gyro_data.x, gyro_data.y, gyro_data.z);
 80023c0:	4b33      	ldr	r3, [pc, #204]	@ (8002490 <log_data_uart+0x184>)
 80023c2:	685b      	ldr	r3, [r3, #4]
    sprintf(tx_buffer, "%lu,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f\n",
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7fe f8bf 	bl	8000548 <__aeabi_f2d>
 80023ca:	4604      	mov	r4, r0
 80023cc:	460d      	mov	r5, r1
        timestamp, M1, M2, M3, M4, u_pitch, u_roll, u_yaw, u_thrust, accel_data.x, accel_data.y, accel_data.z, gyro_data.x, gyro_data.y, gyro_data.z);
 80023ce:	4b30      	ldr	r3, [pc, #192]	@ (8002490 <log_data_uart+0x184>)
 80023d0:	689b      	ldr	r3, [r3, #8]
    sprintf(tx_buffer, "%lu,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f\n",
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7fe f8b8 	bl	8000548 <__aeabi_f2d>
 80023d8:	4602      	mov	r2, r0
 80023da:	460b      	mov	r3, r1
 80023dc:	e9cd 231a 	strd	r2, r3, [sp, #104]	@ 0x68
 80023e0:	e9cd 4518 	strd	r4, r5, [sp, #96]	@ 0x60
 80023e4:	e9cd 8916 	strd	r8, r9, [sp, #88]	@ 0x58
 80023e8:	e9cd ab14 	strd	sl, fp, [sp, #80]	@ 0x50
 80023ec:	ed97 7b00 	vldr	d7, [r7]
 80023f0:	ed8d 7b12 	vstr	d7, [sp, #72]	@ 0x48
 80023f4:	ed97 7b02 	vldr	d7, [r7, #8]
 80023f8:	ed8d 7b10 	vstr	d7, [sp, #64]	@ 0x40
 80023fc:	ed97 7b04 	vldr	d7, [r7, #16]
 8002400:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8002404:	ed97 7b06 	vldr	d7, [r7, #24]
 8002408:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800240c:	ed97 7b08 	vldr	d7, [r7, #32]
 8002410:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8002414:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8002418:	ed8d 7b08 	vstr	d7, [sp, #32]
 800241c:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8002420:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002424:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8002428:	ed8d 7b04 	vstr	d7, [sp, #16]
 800242c:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 8002430:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002434:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 8002438:	ed8d 7b00 	vstr	d7, [sp]
 800243c:	4632      	mov	r2, r6
 800243e:	4915      	ldr	r1, [pc, #84]	@ (8002494 <log_data_uart+0x188>)
 8002440:	4815      	ldr	r0, [pc, #84]	@ (8002498 <log_data_uart+0x18c>)
 8002442:	f005 fd87 	bl	8007f54 <siprintf>

    HAL_UART_Transmit(&huart2, (uint8_t*)tx_buffer, strlen(tx_buffer), HAL_MAX_DELAY);
 8002446:	4814      	ldr	r0, [pc, #80]	@ (8002498 <log_data_uart+0x18c>)
 8002448:	f7fd ff12 	bl	8000270 <strlen>
 800244c:	4603      	mov	r3, r0
 800244e:	b29a      	uxth	r2, r3
 8002450:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002454:	4910      	ldr	r1, [pc, #64]	@ (8002498 <log_data_uart+0x18c>)
 8002456:	4811      	ldr	r0, [pc, #68]	@ (800249c <log_data_uart+0x190>)
 8002458:	f004 f9bc 	bl	80067d4 <HAL_UART_Transmit>
}
 800245c:	bf00      	nop
 800245e:	3754      	adds	r7, #84	@ 0x54
 8002460:	46bd      	mov	sp, r7
 8002462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002466:	bf00      	nop
 8002468:	2000060c 	.word	0x2000060c
 800246c:	200004ec 	.word	0x200004ec
 8002470:	200004f0 	.word	0x200004f0
 8002474:	200004f4 	.word	0x200004f4
 8002478:	200004f8 	.word	0x200004f8
 800247c:	20000500 	.word	0x20000500
 8002480:	20000504 	.word	0x20000504
 8002484:	20000508 	.word	0x20000508
 8002488:	200004fc 	.word	0x200004fc
 800248c:	20000400 	.word	0x20000400
 8002490:	2000040c 	.word	0x2000040c
 8002494:	0800bcb8 	.word	0x0800bcb8
 8002498:	2000050c 	.word	0x2000050c
 800249c:	20000378 	.word	0x20000378

080024a0 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80024a0:	b590      	push	{r4, r7, lr}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
    if(htim ->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	7f1b      	ldrb	r3, [r3, #28]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d17a      	bne.n	80025a6 <HAL_TIM_IC_CaptureCallback+0x106>
    {
      if(htim == &htim2)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	4a3f      	ldr	r2, [pc, #252]	@ (80025b0 <HAL_TIM_IC_CaptureCallback+0x110>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d115      	bne.n	80024e4 <HAL_TIM_IC_CaptureCallback+0x44>
      {
        roll_input = 10000 * HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2) / HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1) - 750;
 80024b8:	2104      	movs	r1, #4
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f003 fd0c 	bl	8005ed8 <HAL_TIM_ReadCapturedValue>
 80024c0:	4603      	mov	r3, r0
 80024c2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80024c6:	fb02 f403 	mul.w	r4, r2, r3
 80024ca:	2100      	movs	r1, #0
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f003 fd03 	bl	8005ed8 <HAL_TIM_ReadCapturedValue>
 80024d2:	4603      	mov	r3, r0
 80024d4:	fbb4 f3f3 	udiv	r3, r4, r3
 80024d8:	f2a3 23ee 	subw	r3, r3, #750	@ 0x2ee
 80024dc:	461a      	mov	r2, r3
 80024de:	4b35      	ldr	r3, [pc, #212]	@ (80025b4 <HAL_TIM_IC_CaptureCallback+0x114>)
 80024e0:	601a      	str	r2, [r3, #0]
      else if(htim->Instance == htim5.Instance)
      {
        yaw_input = 10000 * HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2) / HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1) - 750;
      }
     }
}
 80024e2:	e060      	b.n	80025a6 <HAL_TIM_IC_CaptureCallback+0x106>
      else if(htim->Instance == htim3.Instance)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	4b33      	ldr	r3, [pc, #204]	@ (80025b8 <HAL_TIM_IC_CaptureCallback+0x118>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d123      	bne.n	8002538 <HAL_TIM_IC_CaptureCallback+0x98>
        period = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80024f0:	2100      	movs	r1, #0
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f003 fcf0 	bl	8005ed8 <HAL_TIM_ReadCapturedValue>
 80024f8:	4603      	mov	r3, r0
 80024fa:	4a30      	ldr	r2, [pc, #192]	@ (80025bc <HAL_TIM_IC_CaptureCallback+0x11c>)
 80024fc:	6013      	str	r3, [r2, #0]
        pulse = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80024fe:	2104      	movs	r1, #4
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f003 fce9 	bl	8005ed8 <HAL_TIM_ReadCapturedValue>
 8002506:	4603      	mov	r3, r0
 8002508:	4a2d      	ldr	r2, [pc, #180]	@ (80025c0 <HAL_TIM_IC_CaptureCallback+0x120>)
 800250a:	6013      	str	r3, [r2, #0]
        pitch_input = 1000 * HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2) / HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1) - 1759 - 2000;
 800250c:	2104      	movs	r1, #4
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f003 fce2 	bl	8005ed8 <HAL_TIM_ReadCapturedValue>
 8002514:	4603      	mov	r3, r0
 8002516:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800251a:	fb02 f403 	mul.w	r4, r2, r3
 800251e:	2100      	movs	r1, #0
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f003 fcd9 	bl	8005ed8 <HAL_TIM_ReadCapturedValue>
 8002526:	4603      	mov	r3, r0
 8002528:	fbb4 f3f3 	udiv	r3, r4, r3
 800252c:	f6a3 63af 	subw	r3, r3, #3759	@ 0xeaf
 8002530:	461a      	mov	r2, r3
 8002532:	4b24      	ldr	r3, [pc, #144]	@ (80025c4 <HAL_TIM_IC_CaptureCallback+0x124>)
 8002534:	601a      	str	r2, [r3, #0]
}
 8002536:	e036      	b.n	80025a6 <HAL_TIM_IC_CaptureCallback+0x106>
      else if(htim->Instance == htim4.Instance)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	4b22      	ldr	r3, [pc, #136]	@ (80025c8 <HAL_TIM_IC_CaptureCallback+0x128>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	429a      	cmp	r2, r3
 8002542:	d115      	bne.n	8002570 <HAL_TIM_IC_CaptureCallback+0xd0>
        thrust_input = 1000 * HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2) / HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1) - 475 - 2000;
 8002544:	2104      	movs	r1, #4
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f003 fcc6 	bl	8005ed8 <HAL_TIM_ReadCapturedValue>
 800254c:	4603      	mov	r3, r0
 800254e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002552:	fb02 f403 	mul.w	r4, r2, r3
 8002556:	2100      	movs	r1, #0
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f003 fcbd 	bl	8005ed8 <HAL_TIM_ReadCapturedValue>
 800255e:	4603      	mov	r3, r0
 8002560:	fbb4 f3f3 	udiv	r3, r4, r3
 8002564:	f6a3 13ab 	subw	r3, r3, #2475	@ 0x9ab
 8002568:	461a      	mov	r2, r3
 800256a:	4b18      	ldr	r3, [pc, #96]	@ (80025cc <HAL_TIM_IC_CaptureCallback+0x12c>)
 800256c:	601a      	str	r2, [r3, #0]
}
 800256e:	e01a      	b.n	80025a6 <HAL_TIM_IC_CaptureCallback+0x106>
      else if(htim->Instance == htim5.Instance)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	4b16      	ldr	r3, [pc, #88]	@ (80025d0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	429a      	cmp	r2, r3
 800257a:	d114      	bne.n	80025a6 <HAL_TIM_IC_CaptureCallback+0x106>
        yaw_input = 10000 * HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2) / HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1) - 750;
 800257c:	2104      	movs	r1, #4
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f003 fcaa 	bl	8005ed8 <HAL_TIM_ReadCapturedValue>
 8002584:	4603      	mov	r3, r0
 8002586:	f242 7210 	movw	r2, #10000	@ 0x2710
 800258a:	fb02 f403 	mul.w	r4, r2, r3
 800258e:	2100      	movs	r1, #0
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f003 fca1 	bl	8005ed8 <HAL_TIM_ReadCapturedValue>
 8002596:	4603      	mov	r3, r0
 8002598:	fbb4 f3f3 	udiv	r3, r4, r3
 800259c:	f2a3 23ee 	subw	r3, r3, #750	@ 0x2ee
 80025a0:	461a      	mov	r2, r3
 80025a2:	4b0c      	ldr	r3, [pc, #48]	@ (80025d4 <HAL_TIM_IC_CaptureCallback+0x134>)
 80025a4:	601a      	str	r2, [r3, #0]
}
 80025a6:	bf00      	nop
 80025a8:	370c      	adds	r7, #12
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd90      	pop	{r4, r7, pc}
 80025ae:	bf00      	nop
 80025b0:	20000248 	.word	0x20000248
 80025b4:	20000610 	.word	0x20000610
 80025b8:	20000294 	.word	0x20000294
 80025bc:	20000620 	.word	0x20000620
 80025c0:	20000624 	.word	0x20000624
 80025c4:	20000614 	.word	0x20000614
 80025c8:	200002e0 	.word	0x200002e0
 80025cc:	20000618 	.word	0x20000618
 80025d0:	2000032c 	.word	0x2000032c
 80025d4:	2000061c 	.word	0x2000061c

080025d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025dc:	b672      	cpsid	i
}
 80025de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025e0:	bf00      	nop
 80025e2:	e7fd      	b.n	80025e0 <Error_Handler+0x8>

080025e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ea:	4b0f      	ldr	r3, [pc, #60]	@ (8002628 <HAL_MspInit+0x44>)
 80025ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025ee:	4a0e      	ldr	r2, [pc, #56]	@ (8002628 <HAL_MspInit+0x44>)
 80025f0:	f043 0301 	orr.w	r3, r3, #1
 80025f4:	6613      	str	r3, [r2, #96]	@ 0x60
 80025f6:	4b0c      	ldr	r3, [pc, #48]	@ (8002628 <HAL_MspInit+0x44>)
 80025f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	607b      	str	r3, [r7, #4]
 8002600:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002602:	4b09      	ldr	r3, [pc, #36]	@ (8002628 <HAL_MspInit+0x44>)
 8002604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002606:	4a08      	ldr	r2, [pc, #32]	@ (8002628 <HAL_MspInit+0x44>)
 8002608:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800260c:	6593      	str	r3, [r2, #88]	@ 0x58
 800260e:	4b06      	ldr	r3, [pc, #24]	@ (8002628 <HAL_MspInit+0x44>)
 8002610:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002612:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002616:	603b      	str	r3, [r7, #0]
 8002618:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800261a:	bf00      	nop
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	40021000 	.word	0x40021000

0800262c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b0ac      	sub	sp, #176	@ 0xb0
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002634:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	605a      	str	r2, [r3, #4]
 800263e:	609a      	str	r2, [r3, #8]
 8002640:	60da      	str	r2, [r3, #12]
 8002642:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002644:	f107 0314 	add.w	r3, r7, #20
 8002648:	2288      	movs	r2, #136	@ 0x88
 800264a:	2100      	movs	r1, #0
 800264c:	4618      	mov	r0, r3
 800264e:	f006 fbeb 	bl	8008e28 <memset>
  if(hi2c->Instance==I2C1)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a21      	ldr	r2, [pc, #132]	@ (80026dc <HAL_I2C_MspInit+0xb0>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d13b      	bne.n	80026d4 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800265c:	2340      	movs	r3, #64	@ 0x40
 800265e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002660:	2300      	movs	r3, #0
 8002662:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002664:	f107 0314 	add.w	r3, r7, #20
 8002668:	4618      	mov	r0, r3
 800266a:	f002 fac9 	bl	8004c00 <HAL_RCCEx_PeriphCLKConfig>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002674:	f7ff ffb0 	bl	80025d8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002678:	4b19      	ldr	r3, [pc, #100]	@ (80026e0 <HAL_I2C_MspInit+0xb4>)
 800267a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800267c:	4a18      	ldr	r2, [pc, #96]	@ (80026e0 <HAL_I2C_MspInit+0xb4>)
 800267e:	f043 0302 	orr.w	r3, r3, #2
 8002682:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002684:	4b16      	ldr	r3, [pc, #88]	@ (80026e0 <HAL_I2C_MspInit+0xb4>)
 8002686:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	613b      	str	r3, [r7, #16]
 800268e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002690:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002694:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002698:	2312      	movs	r3, #18
 800269a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269e:	2300      	movs	r3, #0
 80026a0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026a4:	2303      	movs	r3, #3
 80026a6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80026aa:	2304      	movs	r3, #4
 80026ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026b0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80026b4:	4619      	mov	r1, r3
 80026b6:	480b      	ldr	r0, [pc, #44]	@ (80026e4 <HAL_I2C_MspInit+0xb8>)
 80026b8:	f000 fc58 	bl	8002f6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80026bc:	4b08      	ldr	r3, [pc, #32]	@ (80026e0 <HAL_I2C_MspInit+0xb4>)
 80026be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026c0:	4a07      	ldr	r2, [pc, #28]	@ (80026e0 <HAL_I2C_MspInit+0xb4>)
 80026c2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80026c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80026c8:	4b05      	ldr	r3, [pc, #20]	@ (80026e0 <HAL_I2C_MspInit+0xb4>)
 80026ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026d0:	60fb      	str	r3, [r7, #12]
 80026d2:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80026d4:	bf00      	nop
 80026d6:	37b0      	adds	r7, #176	@ 0xb0
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	40005400 	.word	0x40005400
 80026e0:	40021000 	.word	0x40021000
 80026e4:	48000400 	.word	0x48000400

080026e8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b090      	sub	sp, #64	@ 0x40
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026f0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80026f4:	2200      	movs	r2, #0
 80026f6:	601a      	str	r2, [r3, #0]
 80026f8:	605a      	str	r2, [r3, #4]
 80026fa:	609a      	str	r2, [r3, #8]
 80026fc:	60da      	str	r2, [r3, #12]
 80026fe:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002708:	d132      	bne.n	8002770 <HAL_TIM_Base_MspInit+0x88>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800270a:	4b6d      	ldr	r3, [pc, #436]	@ (80028c0 <HAL_TIM_Base_MspInit+0x1d8>)
 800270c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800270e:	4a6c      	ldr	r2, [pc, #432]	@ (80028c0 <HAL_TIM_Base_MspInit+0x1d8>)
 8002710:	f043 0301 	orr.w	r3, r3, #1
 8002714:	6593      	str	r3, [r2, #88]	@ 0x58
 8002716:	4b6a      	ldr	r3, [pc, #424]	@ (80028c0 <HAL_TIM_Base_MspInit+0x1d8>)
 8002718:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002720:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002722:	4b67      	ldr	r3, [pc, #412]	@ (80028c0 <HAL_TIM_Base_MspInit+0x1d8>)
 8002724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002726:	4a66      	ldr	r2, [pc, #408]	@ (80028c0 <HAL_TIM_Base_MspInit+0x1d8>)
 8002728:	f043 0301 	orr.w	r3, r3, #1
 800272c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800272e:	4b64      	ldr	r3, [pc, #400]	@ (80028c0 <HAL_TIM_Base_MspInit+0x1d8>)
 8002730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	627b      	str	r3, [r7, #36]	@ 0x24
 8002738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = ROLL_INPUT_PWM_Pin;
 800273a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800273e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002740:	2302      	movs	r3, #2
 8002742:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002744:	2300      	movs	r3, #0
 8002746:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002748:	2300      	movs	r3, #0
 800274a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800274c:	2301      	movs	r3, #1
 800274e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(ROLL_INPUT_PWM_GPIO_Port, &GPIO_InitStruct);
 8002750:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002754:	4619      	mov	r1, r3
 8002756:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800275a:	f000 fc07 	bl	8002f6c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800275e:	2200      	movs	r2, #0
 8002760:	2100      	movs	r1, #0
 8002762:	201c      	movs	r0, #28
 8002764:	f000 fbcb 	bl	8002efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002768:	201c      	movs	r0, #28
 800276a:	f000 fbe4 	bl	8002f36 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM5_MspInit 1 */

    /* USER CODE END TIM5_MspInit 1 */
  }

}
 800276e:	e0a2      	b.n	80028b6 <HAL_TIM_Base_MspInit+0x1ce>
  else if(htim_base->Instance==TIM3)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a53      	ldr	r2, [pc, #332]	@ (80028c4 <HAL_TIM_Base_MspInit+0x1dc>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d131      	bne.n	80027de <HAL_TIM_Base_MspInit+0xf6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800277a:	4b51      	ldr	r3, [pc, #324]	@ (80028c0 <HAL_TIM_Base_MspInit+0x1d8>)
 800277c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800277e:	4a50      	ldr	r2, [pc, #320]	@ (80028c0 <HAL_TIM_Base_MspInit+0x1d8>)
 8002780:	f043 0302 	orr.w	r3, r3, #2
 8002784:	6593      	str	r3, [r2, #88]	@ 0x58
 8002786:	4b4e      	ldr	r3, [pc, #312]	@ (80028c0 <HAL_TIM_Base_MspInit+0x1d8>)
 8002788:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	623b      	str	r3, [r7, #32]
 8002790:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002792:	4b4b      	ldr	r3, [pc, #300]	@ (80028c0 <HAL_TIM_Base_MspInit+0x1d8>)
 8002794:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002796:	4a4a      	ldr	r2, [pc, #296]	@ (80028c0 <HAL_TIM_Base_MspInit+0x1d8>)
 8002798:	f043 0301 	orr.w	r3, r3, #1
 800279c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800279e:	4b48      	ldr	r3, [pc, #288]	@ (80028c0 <HAL_TIM_Base_MspInit+0x1d8>)
 80027a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	61fb      	str	r3, [r7, #28]
 80027a8:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = PITCH_INPUT_PWM_Pin;
 80027aa:	2340      	movs	r3, #64	@ 0x40
 80027ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ae:	2302      	movs	r3, #2
 80027b0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b2:	2300      	movs	r3, #0
 80027b4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b6:	2300      	movs	r3, #0
 80027b8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80027ba:	2302      	movs	r3, #2
 80027bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(PITCH_INPUT_PWM_GPIO_Port, &GPIO_InitStruct);
 80027be:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80027c2:	4619      	mov	r1, r3
 80027c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027c8:	f000 fbd0 	bl	8002f6c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80027cc:	2200      	movs	r2, #0
 80027ce:	2100      	movs	r1, #0
 80027d0:	201d      	movs	r0, #29
 80027d2:	f000 fb94 	bl	8002efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80027d6:	201d      	movs	r0, #29
 80027d8:	f000 fbad 	bl	8002f36 <HAL_NVIC_EnableIRQ>
}
 80027dc:	e06b      	b.n	80028b6 <HAL_TIM_Base_MspInit+0x1ce>
  else if(htim_base->Instance==TIM4)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a39      	ldr	r2, [pc, #228]	@ (80028c8 <HAL_TIM_Base_MspInit+0x1e0>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d130      	bne.n	800284a <HAL_TIM_Base_MspInit+0x162>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80027e8:	4b35      	ldr	r3, [pc, #212]	@ (80028c0 <HAL_TIM_Base_MspInit+0x1d8>)
 80027ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ec:	4a34      	ldr	r2, [pc, #208]	@ (80028c0 <HAL_TIM_Base_MspInit+0x1d8>)
 80027ee:	f043 0304 	orr.w	r3, r3, #4
 80027f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80027f4:	4b32      	ldr	r3, [pc, #200]	@ (80028c0 <HAL_TIM_Base_MspInit+0x1d8>)
 80027f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027f8:	f003 0304 	and.w	r3, r3, #4
 80027fc:	61bb      	str	r3, [r7, #24]
 80027fe:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002800:	4b2f      	ldr	r3, [pc, #188]	@ (80028c0 <HAL_TIM_Base_MspInit+0x1d8>)
 8002802:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002804:	4a2e      	ldr	r2, [pc, #184]	@ (80028c0 <HAL_TIM_Base_MspInit+0x1d8>)
 8002806:	f043 0302 	orr.w	r3, r3, #2
 800280a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800280c:	4b2c      	ldr	r3, [pc, #176]	@ (80028c0 <HAL_TIM_Base_MspInit+0x1d8>)
 800280e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002810:	f003 0302 	and.w	r3, r3, #2
 8002814:	617b      	str	r3, [r7, #20]
 8002816:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TRHUST_INPUT_PWM_Pin;
 8002818:	2340      	movs	r3, #64	@ 0x40
 800281a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800281c:	2302      	movs	r3, #2
 800281e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002820:	2300      	movs	r3, #0
 8002822:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002824:	2300      	movs	r3, #0
 8002826:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002828:	2302      	movs	r3, #2
 800282a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(TRHUST_INPUT_PWM_GPIO_Port, &GPIO_InitStruct);
 800282c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002830:	4619      	mov	r1, r3
 8002832:	4826      	ldr	r0, [pc, #152]	@ (80028cc <HAL_TIM_Base_MspInit+0x1e4>)
 8002834:	f000 fb9a 	bl	8002f6c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002838:	2200      	movs	r2, #0
 800283a:	2100      	movs	r1, #0
 800283c:	201e      	movs	r0, #30
 800283e:	f000 fb5e 	bl	8002efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002842:	201e      	movs	r0, #30
 8002844:	f000 fb77 	bl	8002f36 <HAL_NVIC_EnableIRQ>
}
 8002848:	e035      	b.n	80028b6 <HAL_TIM_Base_MspInit+0x1ce>
  else if(htim_base->Instance==TIM5)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a20      	ldr	r2, [pc, #128]	@ (80028d0 <HAL_TIM_Base_MspInit+0x1e8>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d130      	bne.n	80028b6 <HAL_TIM_Base_MspInit+0x1ce>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002854:	4b1a      	ldr	r3, [pc, #104]	@ (80028c0 <HAL_TIM_Base_MspInit+0x1d8>)
 8002856:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002858:	4a19      	ldr	r2, [pc, #100]	@ (80028c0 <HAL_TIM_Base_MspInit+0x1d8>)
 800285a:	f043 0308 	orr.w	r3, r3, #8
 800285e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002860:	4b17      	ldr	r3, [pc, #92]	@ (80028c0 <HAL_TIM_Base_MspInit+0x1d8>)
 8002862:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002864:	f003 0308 	and.w	r3, r3, #8
 8002868:	613b      	str	r3, [r7, #16]
 800286a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800286c:	4b14      	ldr	r3, [pc, #80]	@ (80028c0 <HAL_TIM_Base_MspInit+0x1d8>)
 800286e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002870:	4a13      	ldr	r2, [pc, #76]	@ (80028c0 <HAL_TIM_Base_MspInit+0x1d8>)
 8002872:	f043 0301 	orr.w	r3, r3, #1
 8002876:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002878:	4b11      	ldr	r3, [pc, #68]	@ (80028c0 <HAL_TIM_Base_MspInit+0x1d8>)
 800287a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800287c:	f003 0301 	and.w	r3, r3, #1
 8002880:	60fb      	str	r3, [r7, #12]
 8002882:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = YAW_INPUT_PWM_Pin;
 8002884:	2301      	movs	r3, #1
 8002886:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002888:	2302      	movs	r3, #2
 800288a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288c:	2300      	movs	r3, #0
 800288e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002890:	2300      	movs	r3, #0
 8002892:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002894:	2302      	movs	r3, #2
 8002896:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(YAW_INPUT_PWM_GPIO_Port, &GPIO_InitStruct);
 8002898:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800289c:	4619      	mov	r1, r3
 800289e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028a2:	f000 fb63 	bl	8002f6c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80028a6:	2200      	movs	r2, #0
 80028a8:	2100      	movs	r1, #0
 80028aa:	2032      	movs	r0, #50	@ 0x32
 80028ac:	f000 fb27 	bl	8002efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80028b0:	2032      	movs	r0, #50	@ 0x32
 80028b2:	f000 fb40 	bl	8002f36 <HAL_NVIC_EnableIRQ>
}
 80028b6:	bf00      	nop
 80028b8:	3740      	adds	r7, #64	@ 0x40
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	40021000 	.word	0x40021000
 80028c4:	40000400 	.word	0x40000400
 80028c8:	40000800 	.word	0x40000800
 80028cc:	48000400 	.word	0x48000400
 80028d0:	40000c00 	.word	0x40000c00

080028d4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b0ac      	sub	sp, #176	@ 0xb0
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028dc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80028e0:	2200      	movs	r2, #0
 80028e2:	601a      	str	r2, [r3, #0]
 80028e4:	605a      	str	r2, [r3, #4]
 80028e6:	609a      	str	r2, [r3, #8]
 80028e8:	60da      	str	r2, [r3, #12]
 80028ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80028ec:	f107 0314 	add.w	r3, r7, #20
 80028f0:	2288      	movs	r2, #136	@ 0x88
 80028f2:	2100      	movs	r1, #0
 80028f4:	4618      	mov	r0, r3
 80028f6:	f006 fa97 	bl	8008e28 <memset>
  if(huart->Instance==USART2)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a21      	ldr	r2, [pc, #132]	@ (8002984 <HAL_UART_MspInit+0xb0>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d13b      	bne.n	800297c <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002904:	2302      	movs	r3, #2
 8002906:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002908:	2300      	movs	r3, #0
 800290a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800290c:	f107 0314 	add.w	r3, r7, #20
 8002910:	4618      	mov	r0, r3
 8002912:	f002 f975 	bl	8004c00 <HAL_RCCEx_PeriphCLKConfig>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d001      	beq.n	8002920 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800291c:	f7ff fe5c 	bl	80025d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002920:	4b19      	ldr	r3, [pc, #100]	@ (8002988 <HAL_UART_MspInit+0xb4>)
 8002922:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002924:	4a18      	ldr	r2, [pc, #96]	@ (8002988 <HAL_UART_MspInit+0xb4>)
 8002926:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800292a:	6593      	str	r3, [r2, #88]	@ 0x58
 800292c:	4b16      	ldr	r3, [pc, #88]	@ (8002988 <HAL_UART_MspInit+0xb4>)
 800292e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002930:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002934:	613b      	str	r3, [r7, #16]
 8002936:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002938:	4b13      	ldr	r3, [pc, #76]	@ (8002988 <HAL_UART_MspInit+0xb4>)
 800293a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800293c:	4a12      	ldr	r2, [pc, #72]	@ (8002988 <HAL_UART_MspInit+0xb4>)
 800293e:	f043 0301 	orr.w	r3, r3, #1
 8002942:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002944:	4b10      	ldr	r3, [pc, #64]	@ (8002988 <HAL_UART_MspInit+0xb4>)
 8002946:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002948:	f003 0301 	and.w	r3, r3, #1
 800294c:	60fb      	str	r3, [r7, #12]
 800294e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002950:	230c      	movs	r3, #12
 8002952:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002956:	2302      	movs	r3, #2
 8002958:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295c:	2300      	movs	r3, #0
 800295e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002962:	2303      	movs	r3, #3
 8002964:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002968:	2307      	movs	r3, #7
 800296a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800296e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002972:	4619      	mov	r1, r3
 8002974:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002978:	f000 faf8 	bl	8002f6c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800297c:	bf00      	nop
 800297e:	37b0      	adds	r7, #176	@ 0xb0
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	40004400 	.word	0x40004400
 8002988:	40021000 	.word	0x40021000

0800298c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002990:	bf00      	nop
 8002992:	e7fd      	b.n	8002990 <NMI_Handler+0x4>

08002994 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002998:	bf00      	nop
 800299a:	e7fd      	b.n	8002998 <HardFault_Handler+0x4>

0800299c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029a0:	bf00      	nop
 80029a2:	e7fd      	b.n	80029a0 <MemManage_Handler+0x4>

080029a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029a8:	bf00      	nop
 80029aa:	e7fd      	b.n	80029a8 <BusFault_Handler+0x4>

080029ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029b0:	bf00      	nop
 80029b2:	e7fd      	b.n	80029b0 <UsageFault_Handler+0x4>

080029b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029b8:	bf00      	nop
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr

080029c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029c2:	b480      	push	{r7}
 80029c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029c6:	bf00      	nop
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029d4:	bf00      	nop
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr

080029de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029e2:	f000 f96d 	bl	8002cc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029e6:	bf00      	nop
 80029e8:	bd80      	pop	{r7, pc}
	...

080029ec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80029f0:	4802      	ldr	r0, [pc, #8]	@ (80029fc <TIM2_IRQHandler+0x10>)
 80029f2:	f002 ffc3 	bl	800597c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80029f6:	bf00      	nop
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	20000248 	.word	0x20000248

08002a00 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002a04:	4802      	ldr	r0, [pc, #8]	@ (8002a10 <TIM3_IRQHandler+0x10>)
 8002a06:	f002 ffb9 	bl	800597c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002a0a:	bf00      	nop
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	20000294 	.word	0x20000294

08002a14 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002a18:	4802      	ldr	r0, [pc, #8]	@ (8002a24 <TIM4_IRQHandler+0x10>)
 8002a1a:	f002 ffaf 	bl	800597c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002a1e:	bf00      	nop
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	200002e0 	.word	0x200002e0

08002a28 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002a2c:	4802      	ldr	r0, [pc, #8]	@ (8002a38 <TIM5_IRQHandler+0x10>)
 8002a2e:	f002 ffa5 	bl	800597c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002a32:	bf00      	nop
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	2000032c 	.word	0x2000032c

08002a3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  return 1;
 8002a40:	2301      	movs	r3, #1
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <_kill>:

int _kill(int pid, int sig)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002a56:	f006 fa01 	bl	8008e5c <__errno>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2216      	movs	r2, #22
 8002a5e:	601a      	str	r2, [r3, #0]
  return -1;
 8002a60:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3708      	adds	r7, #8
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <_exit>:

void _exit (int status)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a74:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f7ff ffe7 	bl	8002a4c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a7e:	bf00      	nop
 8002a80:	e7fd      	b.n	8002a7e <_exit+0x12>

08002a82 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b086      	sub	sp, #24
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	60f8      	str	r0, [r7, #12]
 8002a8a:	60b9      	str	r1, [r7, #8]
 8002a8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a8e:	2300      	movs	r3, #0
 8002a90:	617b      	str	r3, [r7, #20]
 8002a92:	e00a      	b.n	8002aaa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a94:	f3af 8000 	nop.w
 8002a98:	4601      	mov	r1, r0
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	1c5a      	adds	r2, r3, #1
 8002a9e:	60ba      	str	r2, [r7, #8]
 8002aa0:	b2ca      	uxtb	r2, r1
 8002aa2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	617b      	str	r3, [r7, #20]
 8002aaa:	697a      	ldr	r2, [r7, #20]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	dbf0      	blt.n	8002a94 <_read+0x12>
  }

  return len;
 8002ab2:	687b      	ldr	r3, [r7, #4]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3718      	adds	r7, #24
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <_close>:
  }
  return len;
}

int _close(int file)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002ac4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ae4:	605a      	str	r2, [r3, #4]
  return 0;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr

08002af4 <_isatty>:

int _isatty(int file)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002afc:	2301      	movs	r3, #1
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr

08002b0a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	b085      	sub	sp, #20
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	60f8      	str	r0, [r7, #12]
 8002b12:	60b9      	str	r1, [r7, #8]
 8002b14:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3714      	adds	r7, #20
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b2c:	4a14      	ldr	r2, [pc, #80]	@ (8002b80 <_sbrk+0x5c>)
 8002b2e:	4b15      	ldr	r3, [pc, #84]	@ (8002b84 <_sbrk+0x60>)
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b38:	4b13      	ldr	r3, [pc, #76]	@ (8002b88 <_sbrk+0x64>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d102      	bne.n	8002b46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b40:	4b11      	ldr	r3, [pc, #68]	@ (8002b88 <_sbrk+0x64>)
 8002b42:	4a12      	ldr	r2, [pc, #72]	@ (8002b8c <_sbrk+0x68>)
 8002b44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b46:	4b10      	ldr	r3, [pc, #64]	@ (8002b88 <_sbrk+0x64>)
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	693a      	ldr	r2, [r7, #16]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d207      	bcs.n	8002b64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b54:	f006 f982 	bl	8008e5c <__errno>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	220c      	movs	r2, #12
 8002b5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002b62:	e009      	b.n	8002b78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b64:	4b08      	ldr	r3, [pc, #32]	@ (8002b88 <_sbrk+0x64>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b6a:	4b07      	ldr	r3, [pc, #28]	@ (8002b88 <_sbrk+0x64>)
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4413      	add	r3, r2
 8002b72:	4a05      	ldr	r2, [pc, #20]	@ (8002b88 <_sbrk+0x64>)
 8002b74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b76:	68fb      	ldr	r3, [r7, #12]
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3718      	adds	r7, #24
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	20018000 	.word	0x20018000
 8002b84:	00000400 	.word	0x00000400
 8002b88:	20000628 	.word	0x20000628
 8002b8c:	20000780 	.word	0x20000780

08002b90 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002b94:	4b06      	ldr	r3, [pc, #24]	@ (8002bb0 <SystemInit+0x20>)
 8002b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b9a:	4a05      	ldr	r2, [pc, #20]	@ (8002bb0 <SystemInit+0x20>)
 8002b9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ba0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002ba4:	bf00      	nop
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	e000ed00 	.word	0xe000ed00

08002bb4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002bb4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002bec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002bb8:	f7ff ffea 	bl	8002b90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002bbc:	480c      	ldr	r0, [pc, #48]	@ (8002bf0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002bbe:	490d      	ldr	r1, [pc, #52]	@ (8002bf4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002bc0:	4a0d      	ldr	r2, [pc, #52]	@ (8002bf8 <LoopForever+0xe>)
  movs r3, #0
 8002bc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bc4:	e002      	b.n	8002bcc <LoopCopyDataInit>

08002bc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bca:	3304      	adds	r3, #4

08002bcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bd0:	d3f9      	bcc.n	8002bc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bd2:	4a0a      	ldr	r2, [pc, #40]	@ (8002bfc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002bd4:	4c0a      	ldr	r4, [pc, #40]	@ (8002c00 <LoopForever+0x16>)
  movs r3, #0
 8002bd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bd8:	e001      	b.n	8002bde <LoopFillZerobss>

08002bda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bdc:	3204      	adds	r2, #4

08002bde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002be0:	d3fb      	bcc.n	8002bda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002be2:	f006 f941 	bl	8008e68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002be6:	f7fe fe19 	bl	800181c <main>

08002bea <LoopForever>:

LoopForever:
    b LoopForever
 8002bea:	e7fe      	b.n	8002bea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002bec:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002bf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bf4:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002bf8:	0800c1c0 	.word	0x0800c1c0
  ldr r2, =_sbss
 8002bfc:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002c00:	2000077c 	.word	0x2000077c

08002c04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002c04:	e7fe      	b.n	8002c04 <ADC1_2_IRQHandler>
	...

08002c08 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c12:	4b0c      	ldr	r3, [pc, #48]	@ (8002c44 <HAL_Init+0x3c>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a0b      	ldr	r2, [pc, #44]	@ (8002c44 <HAL_Init+0x3c>)
 8002c18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c1c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c1e:	2003      	movs	r0, #3
 8002c20:	f000 f962 	bl	8002ee8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c24:	2000      	movs	r0, #0
 8002c26:	f000 f80f 	bl	8002c48 <HAL_InitTick>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d002      	beq.n	8002c36 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	71fb      	strb	r3, [r7, #7]
 8002c34:	e001      	b.n	8002c3a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002c36:	f7ff fcd5 	bl	80025e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002c3a:	79fb      	ldrb	r3, [r7, #7]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3708      	adds	r7, #8
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	40022000 	.word	0x40022000

08002c48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002c50:	2300      	movs	r3, #0
 8002c52:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002c54:	4b17      	ldr	r3, [pc, #92]	@ (8002cb4 <HAL_InitTick+0x6c>)
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d023      	beq.n	8002ca4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002c5c:	4b16      	ldr	r3, [pc, #88]	@ (8002cb8 <HAL_InitTick+0x70>)
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	4b14      	ldr	r3, [pc, #80]	@ (8002cb4 <HAL_InitTick+0x6c>)
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	4619      	mov	r1, r3
 8002c66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c72:	4618      	mov	r0, r3
 8002c74:	f000 f96d 	bl	8002f52 <HAL_SYSTICK_Config>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d10f      	bne.n	8002c9e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2b0f      	cmp	r3, #15
 8002c82:	d809      	bhi.n	8002c98 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c84:	2200      	movs	r2, #0
 8002c86:	6879      	ldr	r1, [r7, #4]
 8002c88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002c8c:	f000 f937 	bl	8002efe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002c90:	4a0a      	ldr	r2, [pc, #40]	@ (8002cbc <HAL_InitTick+0x74>)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6013      	str	r3, [r2, #0]
 8002c96:	e007      	b.n	8002ca8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	73fb      	strb	r3, [r7, #15]
 8002c9c:	e004      	b.n	8002ca8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	73fb      	strb	r3, [r7, #15]
 8002ca2:	e001      	b.n	8002ca8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	2000000c 	.word	0x2000000c
 8002cb8:	20000004 	.word	0x20000004
 8002cbc:	20000008 	.word	0x20000008

08002cc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002cc4:	4b06      	ldr	r3, [pc, #24]	@ (8002ce0 <HAL_IncTick+0x20>)
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	461a      	mov	r2, r3
 8002cca:	4b06      	ldr	r3, [pc, #24]	@ (8002ce4 <HAL_IncTick+0x24>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4413      	add	r3, r2
 8002cd0:	4a04      	ldr	r2, [pc, #16]	@ (8002ce4 <HAL_IncTick+0x24>)
 8002cd2:	6013      	str	r3, [r2, #0]
}
 8002cd4:	bf00      	nop
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	2000000c 	.word	0x2000000c
 8002ce4:	2000062c 	.word	0x2000062c

08002ce8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
  return uwTick;
 8002cec:	4b03      	ldr	r3, [pc, #12]	@ (8002cfc <HAL_GetTick+0x14>)
 8002cee:	681b      	ldr	r3, [r3, #0]
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	2000062c 	.word	0x2000062c

08002d00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d08:	f7ff ffee 	bl	8002ce8 <HAL_GetTick>
 8002d0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002d18:	d005      	beq.n	8002d26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002d1a:	4b0a      	ldr	r3, [pc, #40]	@ (8002d44 <HAL_Delay+0x44>)
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	461a      	mov	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	4413      	add	r3, r2
 8002d24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d26:	bf00      	nop
 8002d28:	f7ff ffde 	bl	8002ce8 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	68fa      	ldr	r2, [r7, #12]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d8f7      	bhi.n	8002d28 <HAL_Delay+0x28>
  {
  }
}
 8002d38:	bf00      	nop
 8002d3a:	bf00      	nop
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	2000000c 	.word	0x2000000c

08002d48 <__NVIC_SetPriorityGrouping>:
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b085      	sub	sp, #20
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f003 0307 	and.w	r3, r3, #7
 8002d56:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d58:	4b0c      	ldr	r3, [pc, #48]	@ (8002d8c <__NVIC_SetPriorityGrouping+0x44>)
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d5e:	68ba      	ldr	r2, [r7, #8]
 8002d60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d64:	4013      	ands	r3, r2
 8002d66:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d7a:	4a04      	ldr	r2, [pc, #16]	@ (8002d8c <__NVIC_SetPriorityGrouping+0x44>)
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	60d3      	str	r3, [r2, #12]
}
 8002d80:	bf00      	nop
 8002d82:	3714      	adds	r7, #20
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr
 8002d8c:	e000ed00 	.word	0xe000ed00

08002d90 <__NVIC_GetPriorityGrouping>:
{
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d94:	4b04      	ldr	r3, [pc, #16]	@ (8002da8 <__NVIC_GetPriorityGrouping+0x18>)
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	0a1b      	lsrs	r3, r3, #8
 8002d9a:	f003 0307 	and.w	r3, r3, #7
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	e000ed00 	.word	0xe000ed00

08002dac <__NVIC_EnableIRQ>:
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	4603      	mov	r3, r0
 8002db4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	db0b      	blt.n	8002dd6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dbe:	79fb      	ldrb	r3, [r7, #7]
 8002dc0:	f003 021f 	and.w	r2, r3, #31
 8002dc4:	4907      	ldr	r1, [pc, #28]	@ (8002de4 <__NVIC_EnableIRQ+0x38>)
 8002dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dca:	095b      	lsrs	r3, r3, #5
 8002dcc:	2001      	movs	r0, #1
 8002dce:	fa00 f202 	lsl.w	r2, r0, r2
 8002dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002dd6:	bf00      	nop
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	e000e100 	.word	0xe000e100

08002de8 <__NVIC_SetPriority>:
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	4603      	mov	r3, r0
 8002df0:	6039      	str	r1, [r7, #0]
 8002df2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	db0a      	blt.n	8002e12 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	b2da      	uxtb	r2, r3
 8002e00:	490c      	ldr	r1, [pc, #48]	@ (8002e34 <__NVIC_SetPriority+0x4c>)
 8002e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e06:	0112      	lsls	r2, r2, #4
 8002e08:	b2d2      	uxtb	r2, r2
 8002e0a:	440b      	add	r3, r1
 8002e0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002e10:	e00a      	b.n	8002e28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	b2da      	uxtb	r2, r3
 8002e16:	4908      	ldr	r1, [pc, #32]	@ (8002e38 <__NVIC_SetPriority+0x50>)
 8002e18:	79fb      	ldrb	r3, [r7, #7]
 8002e1a:	f003 030f 	and.w	r3, r3, #15
 8002e1e:	3b04      	subs	r3, #4
 8002e20:	0112      	lsls	r2, r2, #4
 8002e22:	b2d2      	uxtb	r2, r2
 8002e24:	440b      	add	r3, r1
 8002e26:	761a      	strb	r2, [r3, #24]
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr
 8002e34:	e000e100 	.word	0xe000e100
 8002e38:	e000ed00 	.word	0xe000ed00

08002e3c <NVIC_EncodePriority>:
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b089      	sub	sp, #36	@ 0x24
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f003 0307 	and.w	r3, r3, #7
 8002e4e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	f1c3 0307 	rsb	r3, r3, #7
 8002e56:	2b04      	cmp	r3, #4
 8002e58:	bf28      	it	cs
 8002e5a:	2304      	movcs	r3, #4
 8002e5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	3304      	adds	r3, #4
 8002e62:	2b06      	cmp	r3, #6
 8002e64:	d902      	bls.n	8002e6c <NVIC_EncodePriority+0x30>
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	3b03      	subs	r3, #3
 8002e6a:	e000      	b.n	8002e6e <NVIC_EncodePriority+0x32>
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e70:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7a:	43da      	mvns	r2, r3
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	401a      	ands	r2, r3
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e84:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e8e:	43d9      	mvns	r1, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e94:	4313      	orrs	r3, r2
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3724      	adds	r7, #36	@ 0x24
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
	...

08002ea4 <SysTick_Config>:
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002eb4:	d301      	bcc.n	8002eba <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e00f      	b.n	8002eda <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002eba:	4a0a      	ldr	r2, [pc, #40]	@ (8002ee4 <SysTick_Config+0x40>)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ec2:	210f      	movs	r1, #15
 8002ec4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002ec8:	f7ff ff8e 	bl	8002de8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ecc:	4b05      	ldr	r3, [pc, #20]	@ (8002ee4 <SysTick_Config+0x40>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ed2:	4b04      	ldr	r3, [pc, #16]	@ (8002ee4 <SysTick_Config+0x40>)
 8002ed4:	2207      	movs	r2, #7
 8002ed6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3708      	adds	r7, #8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	e000e010 	.word	0xe000e010

08002ee8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f7ff ff29 	bl	8002d48 <__NVIC_SetPriorityGrouping>
}
 8002ef6:	bf00      	nop
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b086      	sub	sp, #24
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	4603      	mov	r3, r0
 8002f06:	60b9      	str	r1, [r7, #8]
 8002f08:	607a      	str	r2, [r7, #4]
 8002f0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f10:	f7ff ff3e 	bl	8002d90 <__NVIC_GetPriorityGrouping>
 8002f14:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	68b9      	ldr	r1, [r7, #8]
 8002f1a:	6978      	ldr	r0, [r7, #20]
 8002f1c:	f7ff ff8e 	bl	8002e3c <NVIC_EncodePriority>
 8002f20:	4602      	mov	r2, r0
 8002f22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f26:	4611      	mov	r1, r2
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7ff ff5d 	bl	8002de8 <__NVIC_SetPriority>
}
 8002f2e:	bf00      	nop
 8002f30:	3718      	adds	r7, #24
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b082      	sub	sp, #8
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7ff ff31 	bl	8002dac <__NVIC_EnableIRQ>
}
 8002f4a:	bf00      	nop
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b082      	sub	sp, #8
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f7ff ffa2 	bl	8002ea4 <SysTick_Config>
 8002f60:	4603      	mov	r3, r0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
	...

08002f6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b087      	sub	sp, #28
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f76:	2300      	movs	r3, #0
 8002f78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f7a:	e17f      	b.n	800327c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	2101      	movs	r1, #1
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	fa01 f303 	lsl.w	r3, r1, r3
 8002f88:	4013      	ands	r3, r2
 8002f8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	f000 8171 	beq.w	8003276 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f003 0303 	and.w	r3, r3, #3
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d005      	beq.n	8002fac <HAL_GPIO_Init+0x40>
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f003 0303 	and.w	r3, r3, #3
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d130      	bne.n	800300e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	2203      	movs	r2, #3
 8002fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	68da      	ldr	r2, [r3, #12]
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fea:	43db      	mvns	r3, r3
 8002fec:	693a      	ldr	r2, [r7, #16]
 8002fee:	4013      	ands	r3, r2
 8002ff0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	091b      	lsrs	r3, r3, #4
 8002ff8:	f003 0201 	and.w	r2, r3, #1
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8003002:	693a      	ldr	r2, [r7, #16]
 8003004:	4313      	orrs	r3, r2
 8003006:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	693a      	ldr	r2, [r7, #16]
 800300c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f003 0303 	and.w	r3, r3, #3
 8003016:	2b03      	cmp	r3, #3
 8003018:	d118      	bne.n	800304c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800301e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003020:	2201      	movs	r2, #1
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	fa02 f303 	lsl.w	r3, r2, r3
 8003028:	43db      	mvns	r3, r3
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	4013      	ands	r3, r2
 800302e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	08db      	lsrs	r3, r3, #3
 8003036:	f003 0201 	and.w	r2, r3, #1
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	fa02 f303 	lsl.w	r3, r2, r3
 8003040:	693a      	ldr	r2, [r7, #16]
 8003042:	4313      	orrs	r3, r2
 8003044:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f003 0303 	and.w	r3, r3, #3
 8003054:	2b03      	cmp	r3, #3
 8003056:	d017      	beq.n	8003088 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	2203      	movs	r2, #3
 8003064:	fa02 f303 	lsl.w	r3, r2, r3
 8003068:	43db      	mvns	r3, r3
 800306a:	693a      	ldr	r2, [r7, #16]
 800306c:	4013      	ands	r3, r2
 800306e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	689a      	ldr	r2, [r3, #8]
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	fa02 f303 	lsl.w	r3, r2, r3
 800307c:	693a      	ldr	r2, [r7, #16]
 800307e:	4313      	orrs	r3, r2
 8003080:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	693a      	ldr	r2, [r7, #16]
 8003086:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f003 0303 	and.w	r3, r3, #3
 8003090:	2b02      	cmp	r3, #2
 8003092:	d123      	bne.n	80030dc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	08da      	lsrs	r2, r3, #3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	3208      	adds	r2, #8
 800309c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	f003 0307 	and.w	r3, r3, #7
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	220f      	movs	r2, #15
 80030ac:	fa02 f303 	lsl.w	r3, r2, r3
 80030b0:	43db      	mvns	r3, r3
 80030b2:	693a      	ldr	r2, [r7, #16]
 80030b4:	4013      	ands	r3, r2
 80030b6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	691a      	ldr	r2, [r3, #16]
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	f003 0307 	and.w	r3, r3, #7
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	fa02 f303 	lsl.w	r3, r2, r3
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	08da      	lsrs	r2, r3, #3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	3208      	adds	r2, #8
 80030d6:	6939      	ldr	r1, [r7, #16]
 80030d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	005b      	lsls	r3, r3, #1
 80030e6:	2203      	movs	r2, #3
 80030e8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ec:	43db      	mvns	r3, r3
 80030ee:	693a      	ldr	r2, [r7, #16]
 80030f0:	4013      	ands	r3, r2
 80030f2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f003 0203 	and.w	r2, r3, #3
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	005b      	lsls	r3, r3, #1
 8003100:	fa02 f303 	lsl.w	r3, r2, r3
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	4313      	orrs	r3, r2
 8003108:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	693a      	ldr	r2, [r7, #16]
 800310e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003118:	2b00      	cmp	r3, #0
 800311a:	f000 80ac 	beq.w	8003276 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800311e:	4b5f      	ldr	r3, [pc, #380]	@ (800329c <HAL_GPIO_Init+0x330>)
 8003120:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003122:	4a5e      	ldr	r2, [pc, #376]	@ (800329c <HAL_GPIO_Init+0x330>)
 8003124:	f043 0301 	orr.w	r3, r3, #1
 8003128:	6613      	str	r3, [r2, #96]	@ 0x60
 800312a:	4b5c      	ldr	r3, [pc, #368]	@ (800329c <HAL_GPIO_Init+0x330>)
 800312c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	60bb      	str	r3, [r7, #8]
 8003134:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003136:	4a5a      	ldr	r2, [pc, #360]	@ (80032a0 <HAL_GPIO_Init+0x334>)
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	089b      	lsrs	r3, r3, #2
 800313c:	3302      	adds	r3, #2
 800313e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003142:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	f003 0303 	and.w	r3, r3, #3
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	220f      	movs	r2, #15
 800314e:	fa02 f303 	lsl.w	r3, r2, r3
 8003152:	43db      	mvns	r3, r3
 8003154:	693a      	ldr	r2, [r7, #16]
 8003156:	4013      	ands	r3, r2
 8003158:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003160:	d025      	beq.n	80031ae <HAL_GPIO_Init+0x242>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a4f      	ldr	r2, [pc, #316]	@ (80032a4 <HAL_GPIO_Init+0x338>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d01f      	beq.n	80031aa <HAL_GPIO_Init+0x23e>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a4e      	ldr	r2, [pc, #312]	@ (80032a8 <HAL_GPIO_Init+0x33c>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d019      	beq.n	80031a6 <HAL_GPIO_Init+0x23a>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a4d      	ldr	r2, [pc, #308]	@ (80032ac <HAL_GPIO_Init+0x340>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d013      	beq.n	80031a2 <HAL_GPIO_Init+0x236>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a4c      	ldr	r2, [pc, #304]	@ (80032b0 <HAL_GPIO_Init+0x344>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d00d      	beq.n	800319e <HAL_GPIO_Init+0x232>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a4b      	ldr	r2, [pc, #300]	@ (80032b4 <HAL_GPIO_Init+0x348>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d007      	beq.n	800319a <HAL_GPIO_Init+0x22e>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a4a      	ldr	r2, [pc, #296]	@ (80032b8 <HAL_GPIO_Init+0x34c>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d101      	bne.n	8003196 <HAL_GPIO_Init+0x22a>
 8003192:	2306      	movs	r3, #6
 8003194:	e00c      	b.n	80031b0 <HAL_GPIO_Init+0x244>
 8003196:	2307      	movs	r3, #7
 8003198:	e00a      	b.n	80031b0 <HAL_GPIO_Init+0x244>
 800319a:	2305      	movs	r3, #5
 800319c:	e008      	b.n	80031b0 <HAL_GPIO_Init+0x244>
 800319e:	2304      	movs	r3, #4
 80031a0:	e006      	b.n	80031b0 <HAL_GPIO_Init+0x244>
 80031a2:	2303      	movs	r3, #3
 80031a4:	e004      	b.n	80031b0 <HAL_GPIO_Init+0x244>
 80031a6:	2302      	movs	r3, #2
 80031a8:	e002      	b.n	80031b0 <HAL_GPIO_Init+0x244>
 80031aa:	2301      	movs	r3, #1
 80031ac:	e000      	b.n	80031b0 <HAL_GPIO_Init+0x244>
 80031ae:	2300      	movs	r3, #0
 80031b0:	697a      	ldr	r2, [r7, #20]
 80031b2:	f002 0203 	and.w	r2, r2, #3
 80031b6:	0092      	lsls	r2, r2, #2
 80031b8:	4093      	lsls	r3, r2
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	4313      	orrs	r3, r2
 80031be:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80031c0:	4937      	ldr	r1, [pc, #220]	@ (80032a0 <HAL_GPIO_Init+0x334>)
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	089b      	lsrs	r3, r3, #2
 80031c6:	3302      	adds	r3, #2
 80031c8:	693a      	ldr	r2, [r7, #16]
 80031ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80031ce:	4b3b      	ldr	r3, [pc, #236]	@ (80032bc <HAL_GPIO_Init+0x350>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	43db      	mvns	r3, r3
 80031d8:	693a      	ldr	r2, [r7, #16]
 80031da:	4013      	ands	r3, r2
 80031dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d003      	beq.n	80031f2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80031f2:	4a32      	ldr	r2, [pc, #200]	@ (80032bc <HAL_GPIO_Init+0x350>)
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80031f8:	4b30      	ldr	r3, [pc, #192]	@ (80032bc <HAL_GPIO_Init+0x350>)
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	43db      	mvns	r3, r3
 8003202:	693a      	ldr	r2, [r7, #16]
 8003204:	4013      	ands	r3, r2
 8003206:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d003      	beq.n	800321c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003214:	693a      	ldr	r2, [r7, #16]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	4313      	orrs	r3, r2
 800321a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800321c:	4a27      	ldr	r2, [pc, #156]	@ (80032bc <HAL_GPIO_Init+0x350>)
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003222:	4b26      	ldr	r3, [pc, #152]	@ (80032bc <HAL_GPIO_Init+0x350>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	43db      	mvns	r3, r3
 800322c:	693a      	ldr	r2, [r7, #16]
 800322e:	4013      	ands	r3, r2
 8003230:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d003      	beq.n	8003246 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	4313      	orrs	r3, r2
 8003244:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003246:	4a1d      	ldr	r2, [pc, #116]	@ (80032bc <HAL_GPIO_Init+0x350>)
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800324c:	4b1b      	ldr	r3, [pc, #108]	@ (80032bc <HAL_GPIO_Init+0x350>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	43db      	mvns	r3, r3
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	4013      	ands	r3, r2
 800325a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d003      	beq.n	8003270 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003268:	693a      	ldr	r2, [r7, #16]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	4313      	orrs	r3, r2
 800326e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003270:	4a12      	ldr	r2, [pc, #72]	@ (80032bc <HAL_GPIO_Init+0x350>)
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	3301      	adds	r3, #1
 800327a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	fa22 f303 	lsr.w	r3, r2, r3
 8003286:	2b00      	cmp	r3, #0
 8003288:	f47f ae78 	bne.w	8002f7c <HAL_GPIO_Init+0x10>
  }
}
 800328c:	bf00      	nop
 800328e:	bf00      	nop
 8003290:	371c      	adds	r7, #28
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	40021000 	.word	0x40021000
 80032a0:	40010000 	.word	0x40010000
 80032a4:	48000400 	.word	0x48000400
 80032a8:	48000800 	.word	0x48000800
 80032ac:	48000c00 	.word	0x48000c00
 80032b0:	48001000 	.word	0x48001000
 80032b4:	48001400 	.word	0x48001400
 80032b8:	48001800 	.word	0x48001800
 80032bc:	40010400 	.word	0x40010400

080032c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	460b      	mov	r3, r1
 80032ca:	807b      	strh	r3, [r7, #2]
 80032cc:	4613      	mov	r3, r2
 80032ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032d0:	787b      	ldrb	r3, [r7, #1]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d003      	beq.n	80032de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80032d6:	887a      	ldrh	r2, [r7, #2]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80032dc:	e002      	b.n	80032e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80032de:	887a      	ldrh	r2, [r7, #2]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80032e4:	bf00      	nop
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d101      	bne.n	8003302 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e08d      	b.n	800341e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003308:	b2db      	uxtb	r3, r3
 800330a:	2b00      	cmp	r3, #0
 800330c:	d106      	bne.n	800331c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f7ff f988 	bl	800262c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2224      	movs	r2, #36	@ 0x24
 8003320:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f022 0201 	bic.w	r2, r2, #1
 8003332:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685a      	ldr	r2, [r3, #4]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003340:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	689a      	ldr	r2, [r3, #8]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003350:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	2b01      	cmp	r3, #1
 8003358:	d107      	bne.n	800336a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	689a      	ldr	r2, [r3, #8]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003366:	609a      	str	r2, [r3, #8]
 8003368:	e006      	b.n	8003378 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	689a      	ldr	r2, [r3, #8]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003376:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	2b02      	cmp	r3, #2
 800337e:	d108      	bne.n	8003392 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685a      	ldr	r2, [r3, #4]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800338e:	605a      	str	r2, [r3, #4]
 8003390:	e007      	b.n	80033a2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	685a      	ldr	r2, [r3, #4]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033a0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	6812      	ldr	r2, [r2, #0]
 80033ac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80033b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80033b4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68da      	ldr	r2, [r3, #12]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80033c4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	691a      	ldr	r2, [r3, #16]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	430a      	orrs	r2, r1
 80033de:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	69d9      	ldr	r1, [r3, #28]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a1a      	ldr	r2, [r3, #32]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	430a      	orrs	r2, r1
 80033ee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f042 0201 	orr.w	r2, r2, #1
 80033fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2220      	movs	r2, #32
 800340a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3708      	adds	r7, #8
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
	...

08003428 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b088      	sub	sp, #32
 800342c:	af02      	add	r7, sp, #8
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	4608      	mov	r0, r1
 8003432:	4611      	mov	r1, r2
 8003434:	461a      	mov	r2, r3
 8003436:	4603      	mov	r3, r0
 8003438:	817b      	strh	r3, [r7, #10]
 800343a:	460b      	mov	r3, r1
 800343c:	813b      	strh	r3, [r7, #8]
 800343e:	4613      	mov	r3, r2
 8003440:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b20      	cmp	r3, #32
 800344c:	f040 80f9 	bne.w	8003642 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003450:	6a3b      	ldr	r3, [r7, #32]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d002      	beq.n	800345c <HAL_I2C_Mem_Write+0x34>
 8003456:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003458:	2b00      	cmp	r3, #0
 800345a:	d105      	bne.n	8003468 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003462:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e0ed      	b.n	8003644 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800346e:	2b01      	cmp	r3, #1
 8003470:	d101      	bne.n	8003476 <HAL_I2C_Mem_Write+0x4e>
 8003472:	2302      	movs	r3, #2
 8003474:	e0e6      	b.n	8003644 <HAL_I2C_Mem_Write+0x21c>
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2201      	movs	r2, #1
 800347a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800347e:	f7ff fc33 	bl	8002ce8 <HAL_GetTick>
 8003482:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	9300      	str	r3, [sp, #0]
 8003488:	2319      	movs	r3, #25
 800348a:	2201      	movs	r2, #1
 800348c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003490:	68f8      	ldr	r0, [r7, #12]
 8003492:	f000 fac3 	bl	8003a1c <I2C_WaitOnFlagUntilTimeout>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d001      	beq.n	80034a0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e0d1      	b.n	8003644 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2221      	movs	r2, #33	@ 0x21
 80034a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2240      	movs	r2, #64	@ 0x40
 80034ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6a3a      	ldr	r2, [r7, #32]
 80034ba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80034c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80034c8:	88f8      	ldrh	r0, [r7, #6]
 80034ca:	893a      	ldrh	r2, [r7, #8]
 80034cc:	8979      	ldrh	r1, [r7, #10]
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	9301      	str	r3, [sp, #4]
 80034d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034d4:	9300      	str	r3, [sp, #0]
 80034d6:	4603      	mov	r3, r0
 80034d8:	68f8      	ldr	r0, [r7, #12]
 80034da:	f000 f9d3 	bl	8003884 <I2C_RequestMemoryWrite>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d005      	beq.n	80034f0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e0a9      	b.n	8003644 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	2bff      	cmp	r3, #255	@ 0xff
 80034f8:	d90e      	bls.n	8003518 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	22ff      	movs	r2, #255	@ 0xff
 80034fe:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003504:	b2da      	uxtb	r2, r3
 8003506:	8979      	ldrh	r1, [r7, #10]
 8003508:	2300      	movs	r3, #0
 800350a:	9300      	str	r3, [sp, #0]
 800350c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003510:	68f8      	ldr	r0, [r7, #12]
 8003512:	f000 fc47 	bl	8003da4 <I2C_TransferConfig>
 8003516:	e00f      	b.n	8003538 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800351c:	b29a      	uxth	r2, r3
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003526:	b2da      	uxtb	r2, r3
 8003528:	8979      	ldrh	r1, [r7, #10]
 800352a:	2300      	movs	r3, #0
 800352c:	9300      	str	r3, [sp, #0]
 800352e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	f000 fc36 	bl	8003da4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003538:	697a      	ldr	r2, [r7, #20]
 800353a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800353c:	68f8      	ldr	r0, [r7, #12]
 800353e:	f000 fac6 	bl	8003ace <I2C_WaitOnTXISFlagUntilTimeout>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d001      	beq.n	800354c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e07b      	b.n	8003644 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003550:	781a      	ldrb	r2, [r3, #0]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800355c:	1c5a      	adds	r2, r3, #1
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003566:	b29b      	uxth	r3, r3
 8003568:	3b01      	subs	r3, #1
 800356a:	b29a      	uxth	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003574:	3b01      	subs	r3, #1
 8003576:	b29a      	uxth	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003580:	b29b      	uxth	r3, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d034      	beq.n	80035f0 <HAL_I2C_Mem_Write+0x1c8>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800358a:	2b00      	cmp	r3, #0
 800358c:	d130      	bne.n	80035f0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	9300      	str	r3, [sp, #0]
 8003592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003594:	2200      	movs	r2, #0
 8003596:	2180      	movs	r1, #128	@ 0x80
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	f000 fa3f 	bl	8003a1c <I2C_WaitOnFlagUntilTimeout>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d001      	beq.n	80035a8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e04d      	b.n	8003644 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	2bff      	cmp	r3, #255	@ 0xff
 80035b0:	d90e      	bls.n	80035d0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	22ff      	movs	r2, #255	@ 0xff
 80035b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035bc:	b2da      	uxtb	r2, r3
 80035be:	8979      	ldrh	r1, [r7, #10]
 80035c0:	2300      	movs	r3, #0
 80035c2:	9300      	str	r3, [sp, #0]
 80035c4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80035c8:	68f8      	ldr	r0, [r7, #12]
 80035ca:	f000 fbeb 	bl	8003da4 <I2C_TransferConfig>
 80035ce:	e00f      	b.n	80035f0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035d4:	b29a      	uxth	r2, r3
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035de:	b2da      	uxtb	r2, r3
 80035e0:	8979      	ldrh	r1, [r7, #10]
 80035e2:	2300      	movs	r3, #0
 80035e4:	9300      	str	r3, [sp, #0]
 80035e6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80035ea:	68f8      	ldr	r0, [r7, #12]
 80035ec:	f000 fbda 	bl	8003da4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d19e      	bne.n	8003538 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80035fe:	68f8      	ldr	r0, [r7, #12]
 8003600:	f000 faac 	bl	8003b5c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d001      	beq.n	800360e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e01a      	b.n	8003644 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2220      	movs	r2, #32
 8003614:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	6859      	ldr	r1, [r3, #4]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	4b0a      	ldr	r3, [pc, #40]	@ (800364c <HAL_I2C_Mem_Write+0x224>)
 8003622:	400b      	ands	r3, r1
 8003624:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2220      	movs	r2, #32
 800362a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800363e:	2300      	movs	r3, #0
 8003640:	e000      	b.n	8003644 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003642:	2302      	movs	r3, #2
  }
}
 8003644:	4618      	mov	r0, r3
 8003646:	3718      	adds	r7, #24
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	fe00e800 	.word	0xfe00e800

08003650 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b088      	sub	sp, #32
 8003654:	af02      	add	r7, sp, #8
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	4608      	mov	r0, r1
 800365a:	4611      	mov	r1, r2
 800365c:	461a      	mov	r2, r3
 800365e:	4603      	mov	r3, r0
 8003660:	817b      	strh	r3, [r7, #10]
 8003662:	460b      	mov	r3, r1
 8003664:	813b      	strh	r3, [r7, #8]
 8003666:	4613      	mov	r3, r2
 8003668:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b20      	cmp	r3, #32
 8003674:	f040 80fd 	bne.w	8003872 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003678:	6a3b      	ldr	r3, [r7, #32]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d002      	beq.n	8003684 <HAL_I2C_Mem_Read+0x34>
 800367e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003680:	2b00      	cmp	r3, #0
 8003682:	d105      	bne.n	8003690 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800368a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e0f1      	b.n	8003874 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003696:	2b01      	cmp	r3, #1
 8003698:	d101      	bne.n	800369e <HAL_I2C_Mem_Read+0x4e>
 800369a:	2302      	movs	r3, #2
 800369c:	e0ea      	b.n	8003874 <HAL_I2C_Mem_Read+0x224>
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80036a6:	f7ff fb1f 	bl	8002ce8 <HAL_GetTick>
 80036aa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	9300      	str	r3, [sp, #0]
 80036b0:	2319      	movs	r3, #25
 80036b2:	2201      	movs	r2, #1
 80036b4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80036b8:	68f8      	ldr	r0, [r7, #12]
 80036ba:	f000 f9af 	bl	8003a1c <I2C_WaitOnFlagUntilTimeout>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d001      	beq.n	80036c8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e0d5      	b.n	8003874 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2222      	movs	r2, #34	@ 0x22
 80036cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2240      	movs	r2, #64	@ 0x40
 80036d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6a3a      	ldr	r2, [r7, #32]
 80036e2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80036e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80036f0:	88f8      	ldrh	r0, [r7, #6]
 80036f2:	893a      	ldrh	r2, [r7, #8]
 80036f4:	8979      	ldrh	r1, [r7, #10]
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	9301      	str	r3, [sp, #4]
 80036fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036fc:	9300      	str	r3, [sp, #0]
 80036fe:	4603      	mov	r3, r0
 8003700:	68f8      	ldr	r0, [r7, #12]
 8003702:	f000 f913 	bl	800392c <I2C_RequestMemoryRead>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d005      	beq.n	8003718 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e0ad      	b.n	8003874 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800371c:	b29b      	uxth	r3, r3
 800371e:	2bff      	cmp	r3, #255	@ 0xff
 8003720:	d90e      	bls.n	8003740 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2201      	movs	r2, #1
 8003726:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800372c:	b2da      	uxtb	r2, r3
 800372e:	8979      	ldrh	r1, [r7, #10]
 8003730:	4b52      	ldr	r3, [pc, #328]	@ (800387c <HAL_I2C_Mem_Read+0x22c>)
 8003732:	9300      	str	r3, [sp, #0]
 8003734:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	f000 fb33 	bl	8003da4 <I2C_TransferConfig>
 800373e:	e00f      	b.n	8003760 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003744:	b29a      	uxth	r2, r3
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800374e:	b2da      	uxtb	r2, r3
 8003750:	8979      	ldrh	r1, [r7, #10]
 8003752:	4b4a      	ldr	r3, [pc, #296]	@ (800387c <HAL_I2C_Mem_Read+0x22c>)
 8003754:	9300      	str	r3, [sp, #0]
 8003756:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800375a:	68f8      	ldr	r0, [r7, #12]
 800375c:	f000 fb22 	bl	8003da4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	9300      	str	r3, [sp, #0]
 8003764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003766:	2200      	movs	r2, #0
 8003768:	2104      	movs	r1, #4
 800376a:	68f8      	ldr	r0, [r7, #12]
 800376c:	f000 f956 	bl	8003a1c <I2C_WaitOnFlagUntilTimeout>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d001      	beq.n	800377a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e07c      	b.n	8003874 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003784:	b2d2      	uxtb	r2, r2
 8003786:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800378c:	1c5a      	adds	r2, r3, #1
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003796:	3b01      	subs	r3, #1
 8003798:	b29a      	uxth	r2, r3
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	3b01      	subs	r3, #1
 80037a6:	b29a      	uxth	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d034      	beq.n	8003820 <HAL_I2C_Mem_Read+0x1d0>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d130      	bne.n	8003820 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	9300      	str	r3, [sp, #0]
 80037c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037c4:	2200      	movs	r2, #0
 80037c6:	2180      	movs	r1, #128	@ 0x80
 80037c8:	68f8      	ldr	r0, [r7, #12]
 80037ca:	f000 f927 	bl	8003a1c <I2C_WaitOnFlagUntilTimeout>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d001      	beq.n	80037d8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e04d      	b.n	8003874 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037dc:	b29b      	uxth	r3, r3
 80037de:	2bff      	cmp	r3, #255	@ 0xff
 80037e0:	d90e      	bls.n	8003800 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2201      	movs	r2, #1
 80037e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037ec:	b2da      	uxtb	r2, r3
 80037ee:	8979      	ldrh	r1, [r7, #10]
 80037f0:	2300      	movs	r3, #0
 80037f2:	9300      	str	r3, [sp, #0]
 80037f4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80037f8:	68f8      	ldr	r0, [r7, #12]
 80037fa:	f000 fad3 	bl	8003da4 <I2C_TransferConfig>
 80037fe:	e00f      	b.n	8003820 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003804:	b29a      	uxth	r2, r3
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800380e:	b2da      	uxtb	r2, r3
 8003810:	8979      	ldrh	r1, [r7, #10]
 8003812:	2300      	movs	r3, #0
 8003814:	9300      	str	r3, [sp, #0]
 8003816:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800381a:	68f8      	ldr	r0, [r7, #12]
 800381c:	f000 fac2 	bl	8003da4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003824:	b29b      	uxth	r3, r3
 8003826:	2b00      	cmp	r3, #0
 8003828:	d19a      	bne.n	8003760 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800382a:	697a      	ldr	r2, [r7, #20]
 800382c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	f000 f994 	bl	8003b5c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d001      	beq.n	800383e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e01a      	b.n	8003874 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2220      	movs	r2, #32
 8003844:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	6859      	ldr	r1, [r3, #4]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	4b0b      	ldr	r3, [pc, #44]	@ (8003880 <HAL_I2C_Mem_Read+0x230>)
 8003852:	400b      	ands	r3, r1
 8003854:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2220      	movs	r2, #32
 800385a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800386e:	2300      	movs	r3, #0
 8003870:	e000      	b.n	8003874 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003872:	2302      	movs	r3, #2
  }
}
 8003874:	4618      	mov	r0, r3
 8003876:	3718      	adds	r7, #24
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	80002400 	.word	0x80002400
 8003880:	fe00e800 	.word	0xfe00e800

08003884 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b086      	sub	sp, #24
 8003888:	af02      	add	r7, sp, #8
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	4608      	mov	r0, r1
 800388e:	4611      	mov	r1, r2
 8003890:	461a      	mov	r2, r3
 8003892:	4603      	mov	r3, r0
 8003894:	817b      	strh	r3, [r7, #10]
 8003896:	460b      	mov	r3, r1
 8003898:	813b      	strh	r3, [r7, #8]
 800389a:	4613      	mov	r3, r2
 800389c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800389e:	88fb      	ldrh	r3, [r7, #6]
 80038a0:	b2da      	uxtb	r2, r3
 80038a2:	8979      	ldrh	r1, [r7, #10]
 80038a4:	4b20      	ldr	r3, [pc, #128]	@ (8003928 <I2C_RequestMemoryWrite+0xa4>)
 80038a6:	9300      	str	r3, [sp, #0]
 80038a8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80038ac:	68f8      	ldr	r0, [r7, #12]
 80038ae:	f000 fa79 	bl	8003da4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038b2:	69fa      	ldr	r2, [r7, #28]
 80038b4:	69b9      	ldr	r1, [r7, #24]
 80038b6:	68f8      	ldr	r0, [r7, #12]
 80038b8:	f000 f909 	bl	8003ace <I2C_WaitOnTXISFlagUntilTimeout>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e02c      	b.n	8003920 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80038c6:	88fb      	ldrh	r3, [r7, #6]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d105      	bne.n	80038d8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80038cc:	893b      	ldrh	r3, [r7, #8]
 80038ce:	b2da      	uxtb	r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	629a      	str	r2, [r3, #40]	@ 0x28
 80038d6:	e015      	b.n	8003904 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80038d8:	893b      	ldrh	r3, [r7, #8]
 80038da:	0a1b      	lsrs	r3, r3, #8
 80038dc:	b29b      	uxth	r3, r3
 80038de:	b2da      	uxtb	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038e6:	69fa      	ldr	r2, [r7, #28]
 80038e8:	69b9      	ldr	r1, [r7, #24]
 80038ea:	68f8      	ldr	r0, [r7, #12]
 80038ec:	f000 f8ef 	bl	8003ace <I2C_WaitOnTXISFlagUntilTimeout>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e012      	b.n	8003920 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80038fa:	893b      	ldrh	r3, [r7, #8]
 80038fc:	b2da      	uxtb	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	9300      	str	r3, [sp, #0]
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	2200      	movs	r2, #0
 800390c:	2180      	movs	r1, #128	@ 0x80
 800390e:	68f8      	ldr	r0, [r7, #12]
 8003910:	f000 f884 	bl	8003a1c <I2C_WaitOnFlagUntilTimeout>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d001      	beq.n	800391e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e000      	b.n	8003920 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800391e:	2300      	movs	r3, #0
}
 8003920:	4618      	mov	r0, r3
 8003922:	3710      	adds	r7, #16
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	80002000 	.word	0x80002000

0800392c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b086      	sub	sp, #24
 8003930:	af02      	add	r7, sp, #8
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	4608      	mov	r0, r1
 8003936:	4611      	mov	r1, r2
 8003938:	461a      	mov	r2, r3
 800393a:	4603      	mov	r3, r0
 800393c:	817b      	strh	r3, [r7, #10]
 800393e:	460b      	mov	r3, r1
 8003940:	813b      	strh	r3, [r7, #8]
 8003942:	4613      	mov	r3, r2
 8003944:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003946:	88fb      	ldrh	r3, [r7, #6]
 8003948:	b2da      	uxtb	r2, r3
 800394a:	8979      	ldrh	r1, [r7, #10]
 800394c:	4b20      	ldr	r3, [pc, #128]	@ (80039d0 <I2C_RequestMemoryRead+0xa4>)
 800394e:	9300      	str	r3, [sp, #0]
 8003950:	2300      	movs	r3, #0
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	f000 fa26 	bl	8003da4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003958:	69fa      	ldr	r2, [r7, #28]
 800395a:	69b9      	ldr	r1, [r7, #24]
 800395c:	68f8      	ldr	r0, [r7, #12]
 800395e:	f000 f8b6 	bl	8003ace <I2C_WaitOnTXISFlagUntilTimeout>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d001      	beq.n	800396c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e02c      	b.n	80039c6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800396c:	88fb      	ldrh	r3, [r7, #6]
 800396e:	2b01      	cmp	r3, #1
 8003970:	d105      	bne.n	800397e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003972:	893b      	ldrh	r3, [r7, #8]
 8003974:	b2da      	uxtb	r2, r3
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	629a      	str	r2, [r3, #40]	@ 0x28
 800397c:	e015      	b.n	80039aa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800397e:	893b      	ldrh	r3, [r7, #8]
 8003980:	0a1b      	lsrs	r3, r3, #8
 8003982:	b29b      	uxth	r3, r3
 8003984:	b2da      	uxtb	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800398c:	69fa      	ldr	r2, [r7, #28]
 800398e:	69b9      	ldr	r1, [r7, #24]
 8003990:	68f8      	ldr	r0, [r7, #12]
 8003992:	f000 f89c 	bl	8003ace <I2C_WaitOnTXISFlagUntilTimeout>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d001      	beq.n	80039a0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e012      	b.n	80039c6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80039a0:	893b      	ldrh	r3, [r7, #8]
 80039a2:	b2da      	uxtb	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	9300      	str	r3, [sp, #0]
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	2200      	movs	r2, #0
 80039b2:	2140      	movs	r1, #64	@ 0x40
 80039b4:	68f8      	ldr	r0, [r7, #12]
 80039b6:	f000 f831 	bl	8003a1c <I2C_WaitOnFlagUntilTimeout>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d001      	beq.n	80039c4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e000      	b.n	80039c6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3710      	adds	r7, #16
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	80002000 	.word	0x80002000

080039d4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d103      	bne.n	80039f2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2200      	movs	r2, #0
 80039f0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	f003 0301 	and.w	r3, r3, #1
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d007      	beq.n	8003a10 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	699a      	ldr	r2, [r3, #24]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f042 0201 	orr.w	r2, r2, #1
 8003a0e:	619a      	str	r2, [r3, #24]
  }
}
 8003a10:	bf00      	nop
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	603b      	str	r3, [r7, #0]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a2c:	e03b      	b.n	8003aa6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a2e:	69ba      	ldr	r2, [r7, #24]
 8003a30:	6839      	ldr	r1, [r7, #0]
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	f000 f8d6 	bl	8003be4 <I2C_IsErrorOccurred>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d001      	beq.n	8003a42 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e041      	b.n	8003ac6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a48:	d02d      	beq.n	8003aa6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a4a:	f7ff f94d 	bl	8002ce8 <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	683a      	ldr	r2, [r7, #0]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d302      	bcc.n	8003a60 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d122      	bne.n	8003aa6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	699a      	ldr	r2, [r3, #24]
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	4013      	ands	r3, r2
 8003a6a:	68ba      	ldr	r2, [r7, #8]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	bf0c      	ite	eq
 8003a70:	2301      	moveq	r3, #1
 8003a72:	2300      	movne	r3, #0
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	461a      	mov	r2, r3
 8003a78:	79fb      	ldrb	r3, [r7, #7]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d113      	bne.n	8003aa6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a82:	f043 0220 	orr.w	r2, r3, #32
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2220      	movs	r2, #32
 8003a8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e00f      	b.n	8003ac6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	699a      	ldr	r2, [r3, #24]
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	4013      	ands	r3, r2
 8003ab0:	68ba      	ldr	r2, [r7, #8]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	bf0c      	ite	eq
 8003ab6:	2301      	moveq	r3, #1
 8003ab8:	2300      	movne	r3, #0
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	461a      	mov	r2, r3
 8003abe:	79fb      	ldrb	r3, [r7, #7]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d0b4      	beq.n	8003a2e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003ace:	b580      	push	{r7, lr}
 8003ad0:	b084      	sub	sp, #16
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	60f8      	str	r0, [r7, #12]
 8003ad6:	60b9      	str	r1, [r7, #8]
 8003ad8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ada:	e033      	b.n	8003b44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	68b9      	ldr	r1, [r7, #8]
 8003ae0:	68f8      	ldr	r0, [r7, #12]
 8003ae2:	f000 f87f 	bl	8003be4 <I2C_IsErrorOccurred>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d001      	beq.n	8003af0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e031      	b.n	8003b54 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003af6:	d025      	beq.n	8003b44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003af8:	f7ff f8f6 	bl	8002ce8 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	68ba      	ldr	r2, [r7, #8]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d302      	bcc.n	8003b0e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d11a      	bne.n	8003b44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	699b      	ldr	r3, [r3, #24]
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d013      	beq.n	8003b44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b20:	f043 0220 	orr.w	r2, r3, #32
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2220      	movs	r2, #32
 8003b2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e007      	b.n	8003b54 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d1c4      	bne.n	8003adc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3710      	adds	r7, #16
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b68:	e02f      	b.n	8003bca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	68b9      	ldr	r1, [r7, #8]
 8003b6e:	68f8      	ldr	r0, [r7, #12]
 8003b70:	f000 f838 	bl	8003be4 <I2C_IsErrorOccurred>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d001      	beq.n	8003b7e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e02d      	b.n	8003bda <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b7e:	f7ff f8b3 	bl	8002ce8 <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	68ba      	ldr	r2, [r7, #8]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d302      	bcc.n	8003b94 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d11a      	bne.n	8003bca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	f003 0320 	and.w	r3, r3, #32
 8003b9e:	2b20      	cmp	r3, #32
 8003ba0:	d013      	beq.n	8003bca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ba6:	f043 0220 	orr.w	r2, r3, #32
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2220      	movs	r2, #32
 8003bb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e007      	b.n	8003bda <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	f003 0320 	and.w	r3, r3, #32
 8003bd4:	2b20      	cmp	r3, #32
 8003bd6:	d1c8      	bne.n	8003b6a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
	...

08003be4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b08a      	sub	sp, #40	@ 0x28
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	f003 0310 	and.w	r3, r3, #16
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d068      	beq.n	8003ce2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2210      	movs	r2, #16
 8003c16:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003c18:	e049      	b.n	8003cae <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c20:	d045      	beq.n	8003cae <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003c22:	f7ff f861 	bl	8002ce8 <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	68ba      	ldr	r2, [r7, #8]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d302      	bcc.n	8003c38 <I2C_IsErrorOccurred+0x54>
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d13a      	bne.n	8003cae <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c42:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c4a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c5a:	d121      	bne.n	8003ca0 <I2C_IsErrorOccurred+0xbc>
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c62:	d01d      	beq.n	8003ca0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003c64:	7cfb      	ldrb	r3, [r7, #19]
 8003c66:	2b20      	cmp	r3, #32
 8003c68:	d01a      	beq.n	8003ca0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	685a      	ldr	r2, [r3, #4]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c78:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003c7a:	f7ff f835 	bl	8002ce8 <HAL_GetTick>
 8003c7e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c80:	e00e      	b.n	8003ca0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003c82:	f7ff f831 	bl	8002ce8 <HAL_GetTick>
 8003c86:	4602      	mov	r2, r0
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	2b19      	cmp	r3, #25
 8003c8e:	d907      	bls.n	8003ca0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003c90:	6a3b      	ldr	r3, [r7, #32]
 8003c92:	f043 0320 	orr.w	r3, r3, #32
 8003c96:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003c9e:	e006      	b.n	8003cae <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	f003 0320 	and.w	r3, r3, #32
 8003caa:	2b20      	cmp	r3, #32
 8003cac:	d1e9      	bne.n	8003c82 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	f003 0320 	and.w	r3, r3, #32
 8003cb8:	2b20      	cmp	r3, #32
 8003cba:	d003      	beq.n	8003cc4 <I2C_IsErrorOccurred+0xe0>
 8003cbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d0aa      	beq.n	8003c1a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003cc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d103      	bne.n	8003cd4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2220      	movs	r2, #32
 8003cd2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003cd4:	6a3b      	ldr	r3, [r7, #32]
 8003cd6:	f043 0304 	orr.w	r3, r3, #4
 8003cda:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00b      	beq.n	8003d0c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003cf4:	6a3b      	ldr	r3, [r7, #32]
 8003cf6:	f043 0301 	orr.w	r3, r3, #1
 8003cfa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003d04:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00b      	beq.n	8003d2e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003d16:	6a3b      	ldr	r3, [r7, #32]
 8003d18:	f043 0308 	orr.w	r3, r3, #8
 8003d1c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003d26:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d00b      	beq.n	8003d50 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003d38:	6a3b      	ldr	r3, [r7, #32]
 8003d3a:	f043 0302 	orr.w	r3, r3, #2
 8003d3e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d48:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003d50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d01c      	beq.n	8003d92 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003d58:	68f8      	ldr	r0, [r7, #12]
 8003d5a:	f7ff fe3b 	bl	80039d4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	6859      	ldr	r1, [r3, #4]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	4b0d      	ldr	r3, [pc, #52]	@ (8003da0 <I2C_IsErrorOccurred+0x1bc>)
 8003d6a:	400b      	ands	r3, r1
 8003d6c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d72:	6a3b      	ldr	r3, [r7, #32]
 8003d74:	431a      	orrs	r2, r3
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2220      	movs	r2, #32
 8003d7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003d92:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3728      	adds	r7, #40	@ 0x28
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	fe00e800 	.word	0xfe00e800

08003da4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b087      	sub	sp, #28
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	607b      	str	r3, [r7, #4]
 8003dae:	460b      	mov	r3, r1
 8003db0:	817b      	strh	r3, [r7, #10]
 8003db2:	4613      	mov	r3, r2
 8003db4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003db6:	897b      	ldrh	r3, [r7, #10]
 8003db8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003dbc:	7a7b      	ldrb	r3, [r7, #9]
 8003dbe:	041b      	lsls	r3, r3, #16
 8003dc0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003dc4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003dca:	6a3b      	ldr	r3, [r7, #32]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003dd2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	685a      	ldr	r2, [r3, #4]
 8003dda:	6a3b      	ldr	r3, [r7, #32]
 8003ddc:	0d5b      	lsrs	r3, r3, #21
 8003dde:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003de2:	4b08      	ldr	r3, [pc, #32]	@ (8003e04 <I2C_TransferConfig+0x60>)
 8003de4:	430b      	orrs	r3, r1
 8003de6:	43db      	mvns	r3, r3
 8003de8:	ea02 0103 	and.w	r1, r2, r3
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	697a      	ldr	r2, [r7, #20]
 8003df2:	430a      	orrs	r2, r1
 8003df4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003df6:	bf00      	nop
 8003df8:	371c      	adds	r7, #28
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	03ff63ff 	.word	0x03ff63ff

08003e08 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b20      	cmp	r3, #32
 8003e1c:	d138      	bne.n	8003e90 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d101      	bne.n	8003e2c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003e28:	2302      	movs	r3, #2
 8003e2a:	e032      	b.n	8003e92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2224      	movs	r2, #36	@ 0x24
 8003e38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f022 0201 	bic.w	r2, r2, #1
 8003e4a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003e5a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	6819      	ldr	r1, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	683a      	ldr	r2, [r7, #0]
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f042 0201 	orr.w	r2, r2, #1
 8003e7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2220      	movs	r2, #32
 8003e80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	e000      	b.n	8003e92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003e90:	2302      	movs	r3, #2
  }
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	370c      	adds	r7, #12
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr

08003e9e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003e9e:	b480      	push	{r7}
 8003ea0:	b085      	sub	sp, #20
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
 8003ea6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	2b20      	cmp	r3, #32
 8003eb2:	d139      	bne.n	8003f28 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d101      	bne.n	8003ec2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003ebe:	2302      	movs	r3, #2
 8003ec0:	e033      	b.n	8003f2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2224      	movs	r2, #36	@ 0x24
 8003ece:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f022 0201 	bic.w	r2, r2, #1
 8003ee0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003ef0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	021b      	lsls	r3, r3, #8
 8003ef6:	68fa      	ldr	r2, [r7, #12]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f042 0201 	orr.w	r2, r2, #1
 8003f12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2220      	movs	r2, #32
 8003f18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003f24:	2300      	movs	r3, #0
 8003f26:	e000      	b.n	8003f2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003f28:	2302      	movs	r3, #2
  }
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3714      	adds	r7, #20
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr
	...

08003f38 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003f3c:	4b04      	ldr	r3, [pc, #16]	@ (8003f50 <HAL_PWREx_GetVoltageRange+0x18>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop
 8003f50:	40007000 	.word	0x40007000

08003f54 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b085      	sub	sp, #20
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f62:	d130      	bne.n	8003fc6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f64:	4b23      	ldr	r3, [pc, #140]	@ (8003ff4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003f6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f70:	d038      	beq.n	8003fe4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f72:	4b20      	ldr	r3, [pc, #128]	@ (8003ff4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003f7a:	4a1e      	ldr	r2, [pc, #120]	@ (8003ff4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f7c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003f80:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003f82:	4b1d      	ldr	r3, [pc, #116]	@ (8003ff8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2232      	movs	r2, #50	@ 0x32
 8003f88:	fb02 f303 	mul.w	r3, r2, r3
 8003f8c:	4a1b      	ldr	r2, [pc, #108]	@ (8003ffc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f92:	0c9b      	lsrs	r3, r3, #18
 8003f94:	3301      	adds	r3, #1
 8003f96:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f98:	e002      	b.n	8003fa0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fa0:	4b14      	ldr	r3, [pc, #80]	@ (8003ff4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fa2:	695b      	ldr	r3, [r3, #20]
 8003fa4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fa8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fac:	d102      	bne.n	8003fb4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d1f2      	bne.n	8003f9a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003fb4:	4b0f      	ldr	r3, [pc, #60]	@ (8003ff4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fb6:	695b      	ldr	r3, [r3, #20]
 8003fb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fc0:	d110      	bne.n	8003fe4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e00f      	b.n	8003fe6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8003ff4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003fce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fd2:	d007      	beq.n	8003fe4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003fd4:	4b07      	ldr	r3, [pc, #28]	@ (8003ff4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003fdc:	4a05      	ldr	r2, [pc, #20]	@ (8003ff4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fde:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003fe2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3714      	adds	r7, #20
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	40007000 	.word	0x40007000
 8003ff8:	20000004 	.word	0x20000004
 8003ffc:	431bde83 	.word	0x431bde83

08004000 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b088      	sub	sp, #32
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d101      	bne.n	8004012 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e3ca      	b.n	80047a8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004012:	4b97      	ldr	r3, [pc, #604]	@ (8004270 <HAL_RCC_OscConfig+0x270>)
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f003 030c 	and.w	r3, r3, #12
 800401a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800401c:	4b94      	ldr	r3, [pc, #592]	@ (8004270 <HAL_RCC_OscConfig+0x270>)
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	f003 0303 	and.w	r3, r3, #3
 8004024:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0310 	and.w	r3, r3, #16
 800402e:	2b00      	cmp	r3, #0
 8004030:	f000 80e4 	beq.w	80041fc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d007      	beq.n	800404a <HAL_RCC_OscConfig+0x4a>
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	2b0c      	cmp	r3, #12
 800403e:	f040 808b 	bne.w	8004158 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	2b01      	cmp	r3, #1
 8004046:	f040 8087 	bne.w	8004158 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800404a:	4b89      	ldr	r3, [pc, #548]	@ (8004270 <HAL_RCC_OscConfig+0x270>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0302 	and.w	r3, r3, #2
 8004052:	2b00      	cmp	r3, #0
 8004054:	d005      	beq.n	8004062 <HAL_RCC_OscConfig+0x62>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	699b      	ldr	r3, [r3, #24]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d101      	bne.n	8004062 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e3a2      	b.n	80047a8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a1a      	ldr	r2, [r3, #32]
 8004066:	4b82      	ldr	r3, [pc, #520]	@ (8004270 <HAL_RCC_OscConfig+0x270>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0308 	and.w	r3, r3, #8
 800406e:	2b00      	cmp	r3, #0
 8004070:	d004      	beq.n	800407c <HAL_RCC_OscConfig+0x7c>
 8004072:	4b7f      	ldr	r3, [pc, #508]	@ (8004270 <HAL_RCC_OscConfig+0x270>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800407a:	e005      	b.n	8004088 <HAL_RCC_OscConfig+0x88>
 800407c:	4b7c      	ldr	r3, [pc, #496]	@ (8004270 <HAL_RCC_OscConfig+0x270>)
 800407e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004082:	091b      	lsrs	r3, r3, #4
 8004084:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004088:	4293      	cmp	r3, r2
 800408a:	d223      	bcs.n	80040d4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a1b      	ldr	r3, [r3, #32]
 8004090:	4618      	mov	r0, r3
 8004092:	f000 fd55 	bl	8004b40 <RCC_SetFlashLatencyFromMSIRange>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d001      	beq.n	80040a0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e383      	b.n	80047a8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040a0:	4b73      	ldr	r3, [pc, #460]	@ (8004270 <HAL_RCC_OscConfig+0x270>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a72      	ldr	r2, [pc, #456]	@ (8004270 <HAL_RCC_OscConfig+0x270>)
 80040a6:	f043 0308 	orr.w	r3, r3, #8
 80040aa:	6013      	str	r3, [r2, #0]
 80040ac:	4b70      	ldr	r3, [pc, #448]	@ (8004270 <HAL_RCC_OscConfig+0x270>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a1b      	ldr	r3, [r3, #32]
 80040b8:	496d      	ldr	r1, [pc, #436]	@ (8004270 <HAL_RCC_OscConfig+0x270>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040be:	4b6c      	ldr	r3, [pc, #432]	@ (8004270 <HAL_RCC_OscConfig+0x270>)
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	69db      	ldr	r3, [r3, #28]
 80040ca:	021b      	lsls	r3, r3, #8
 80040cc:	4968      	ldr	r1, [pc, #416]	@ (8004270 <HAL_RCC_OscConfig+0x270>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	604b      	str	r3, [r1, #4]
 80040d2:	e025      	b.n	8004120 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040d4:	4b66      	ldr	r3, [pc, #408]	@ (8004270 <HAL_RCC_OscConfig+0x270>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a65      	ldr	r2, [pc, #404]	@ (8004270 <HAL_RCC_OscConfig+0x270>)
 80040da:	f043 0308 	orr.w	r3, r3, #8
 80040de:	6013      	str	r3, [r2, #0]
 80040e0:	4b63      	ldr	r3, [pc, #396]	@ (8004270 <HAL_RCC_OscConfig+0x270>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6a1b      	ldr	r3, [r3, #32]
 80040ec:	4960      	ldr	r1, [pc, #384]	@ (8004270 <HAL_RCC_OscConfig+0x270>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040f2:	4b5f      	ldr	r3, [pc, #380]	@ (8004270 <HAL_RCC_OscConfig+0x270>)
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	69db      	ldr	r3, [r3, #28]
 80040fe:	021b      	lsls	r3, r3, #8
 8004100:	495b      	ldr	r1, [pc, #364]	@ (8004270 <HAL_RCC_OscConfig+0x270>)
 8004102:	4313      	orrs	r3, r2
 8004104:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d109      	bne.n	8004120 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a1b      	ldr	r3, [r3, #32]
 8004110:	4618      	mov	r0, r3
 8004112:	f000 fd15 	bl	8004b40 <RCC_SetFlashLatencyFromMSIRange>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d001      	beq.n	8004120 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e343      	b.n	80047a8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004120:	f000 fc4a 	bl	80049b8 <HAL_RCC_GetSysClockFreq>
 8004124:	4602      	mov	r2, r0
 8004126:	4b52      	ldr	r3, [pc, #328]	@ (8004270 <HAL_RCC_OscConfig+0x270>)
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	091b      	lsrs	r3, r3, #4
 800412c:	f003 030f 	and.w	r3, r3, #15
 8004130:	4950      	ldr	r1, [pc, #320]	@ (8004274 <HAL_RCC_OscConfig+0x274>)
 8004132:	5ccb      	ldrb	r3, [r1, r3]
 8004134:	f003 031f 	and.w	r3, r3, #31
 8004138:	fa22 f303 	lsr.w	r3, r2, r3
 800413c:	4a4e      	ldr	r2, [pc, #312]	@ (8004278 <HAL_RCC_OscConfig+0x278>)
 800413e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004140:	4b4e      	ldr	r3, [pc, #312]	@ (800427c <HAL_RCC_OscConfig+0x27c>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4618      	mov	r0, r3
 8004146:	f7fe fd7f 	bl	8002c48 <HAL_InitTick>
 800414a:	4603      	mov	r3, r0
 800414c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800414e:	7bfb      	ldrb	r3, [r7, #15]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d052      	beq.n	80041fa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004154:	7bfb      	ldrb	r3, [r7, #15]
 8004156:	e327      	b.n	80047a8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	699b      	ldr	r3, [r3, #24]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d032      	beq.n	80041c6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004160:	4b43      	ldr	r3, [pc, #268]	@ (8004270 <HAL_RCC_OscConfig+0x270>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a42      	ldr	r2, [pc, #264]	@ (8004270 <HAL_RCC_OscConfig+0x270>)
 8004166:	f043 0301 	orr.w	r3, r3, #1
 800416a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800416c:	f7fe fdbc 	bl	8002ce8 <HAL_GetTick>
 8004170:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004172:	e008      	b.n	8004186 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004174:	f7fe fdb8 	bl	8002ce8 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	2b02      	cmp	r3, #2
 8004180:	d901      	bls.n	8004186 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e310      	b.n	80047a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004186:	4b3a      	ldr	r3, [pc, #232]	@ (8004270 <HAL_RCC_OscConfig+0x270>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0302 	and.w	r3, r3, #2
 800418e:	2b00      	cmp	r3, #0
 8004190:	d0f0      	beq.n	8004174 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004192:	4b37      	ldr	r3, [pc, #220]	@ (8004270 <HAL_RCC_OscConfig+0x270>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a36      	ldr	r2, [pc, #216]	@ (8004270 <HAL_RCC_OscConfig+0x270>)
 8004198:	f043 0308 	orr.w	r3, r3, #8
 800419c:	6013      	str	r3, [r2, #0]
 800419e:	4b34      	ldr	r3, [pc, #208]	@ (8004270 <HAL_RCC_OscConfig+0x270>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a1b      	ldr	r3, [r3, #32]
 80041aa:	4931      	ldr	r1, [pc, #196]	@ (8004270 <HAL_RCC_OscConfig+0x270>)
 80041ac:	4313      	orrs	r3, r2
 80041ae:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041b0:	4b2f      	ldr	r3, [pc, #188]	@ (8004270 <HAL_RCC_OscConfig+0x270>)
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	69db      	ldr	r3, [r3, #28]
 80041bc:	021b      	lsls	r3, r3, #8
 80041be:	492c      	ldr	r1, [pc, #176]	@ (8004270 <HAL_RCC_OscConfig+0x270>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	604b      	str	r3, [r1, #4]
 80041c4:	e01a      	b.n	80041fc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80041c6:	4b2a      	ldr	r3, [pc, #168]	@ (8004270 <HAL_RCC_OscConfig+0x270>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a29      	ldr	r2, [pc, #164]	@ (8004270 <HAL_RCC_OscConfig+0x270>)
 80041cc:	f023 0301 	bic.w	r3, r3, #1
 80041d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80041d2:	f7fe fd89 	bl	8002ce8 <HAL_GetTick>
 80041d6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80041d8:	e008      	b.n	80041ec <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80041da:	f7fe fd85 	bl	8002ce8 <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d901      	bls.n	80041ec <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e2dd      	b.n	80047a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80041ec:	4b20      	ldr	r3, [pc, #128]	@ (8004270 <HAL_RCC_OscConfig+0x270>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0302 	and.w	r3, r3, #2
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d1f0      	bne.n	80041da <HAL_RCC_OscConfig+0x1da>
 80041f8:	e000      	b.n	80041fc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80041fa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0301 	and.w	r3, r3, #1
 8004204:	2b00      	cmp	r3, #0
 8004206:	d074      	beq.n	80042f2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	2b08      	cmp	r3, #8
 800420c:	d005      	beq.n	800421a <HAL_RCC_OscConfig+0x21a>
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	2b0c      	cmp	r3, #12
 8004212:	d10e      	bne.n	8004232 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	2b03      	cmp	r3, #3
 8004218:	d10b      	bne.n	8004232 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800421a:	4b15      	ldr	r3, [pc, #84]	@ (8004270 <HAL_RCC_OscConfig+0x270>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d064      	beq.n	80042f0 <HAL_RCC_OscConfig+0x2f0>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d160      	bne.n	80042f0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e2ba      	b.n	80047a8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800423a:	d106      	bne.n	800424a <HAL_RCC_OscConfig+0x24a>
 800423c:	4b0c      	ldr	r3, [pc, #48]	@ (8004270 <HAL_RCC_OscConfig+0x270>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a0b      	ldr	r2, [pc, #44]	@ (8004270 <HAL_RCC_OscConfig+0x270>)
 8004242:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004246:	6013      	str	r3, [r2, #0]
 8004248:	e026      	b.n	8004298 <HAL_RCC_OscConfig+0x298>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004252:	d115      	bne.n	8004280 <HAL_RCC_OscConfig+0x280>
 8004254:	4b06      	ldr	r3, [pc, #24]	@ (8004270 <HAL_RCC_OscConfig+0x270>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a05      	ldr	r2, [pc, #20]	@ (8004270 <HAL_RCC_OscConfig+0x270>)
 800425a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800425e:	6013      	str	r3, [r2, #0]
 8004260:	4b03      	ldr	r3, [pc, #12]	@ (8004270 <HAL_RCC_OscConfig+0x270>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a02      	ldr	r2, [pc, #8]	@ (8004270 <HAL_RCC_OscConfig+0x270>)
 8004266:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800426a:	6013      	str	r3, [r2, #0]
 800426c:	e014      	b.n	8004298 <HAL_RCC_OscConfig+0x298>
 800426e:	bf00      	nop
 8004270:	40021000 	.word	0x40021000
 8004274:	0800bd04 	.word	0x0800bd04
 8004278:	20000004 	.word	0x20000004
 800427c:	20000008 	.word	0x20000008
 8004280:	4ba0      	ldr	r3, [pc, #640]	@ (8004504 <HAL_RCC_OscConfig+0x504>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a9f      	ldr	r2, [pc, #636]	@ (8004504 <HAL_RCC_OscConfig+0x504>)
 8004286:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800428a:	6013      	str	r3, [r2, #0]
 800428c:	4b9d      	ldr	r3, [pc, #628]	@ (8004504 <HAL_RCC_OscConfig+0x504>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a9c      	ldr	r2, [pc, #624]	@ (8004504 <HAL_RCC_OscConfig+0x504>)
 8004292:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004296:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d013      	beq.n	80042c8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a0:	f7fe fd22 	bl	8002ce8 <HAL_GetTick>
 80042a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042a6:	e008      	b.n	80042ba <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042a8:	f7fe fd1e 	bl	8002ce8 <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	2b64      	cmp	r3, #100	@ 0x64
 80042b4:	d901      	bls.n	80042ba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e276      	b.n	80047a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042ba:	4b92      	ldr	r3, [pc, #584]	@ (8004504 <HAL_RCC_OscConfig+0x504>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d0f0      	beq.n	80042a8 <HAL_RCC_OscConfig+0x2a8>
 80042c6:	e014      	b.n	80042f2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c8:	f7fe fd0e 	bl	8002ce8 <HAL_GetTick>
 80042cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042ce:	e008      	b.n	80042e2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042d0:	f7fe fd0a 	bl	8002ce8 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	2b64      	cmp	r3, #100	@ 0x64
 80042dc:	d901      	bls.n	80042e2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e262      	b.n	80047a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042e2:	4b88      	ldr	r3, [pc, #544]	@ (8004504 <HAL_RCC_OscConfig+0x504>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d1f0      	bne.n	80042d0 <HAL_RCC_OscConfig+0x2d0>
 80042ee:	e000      	b.n	80042f2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0302 	and.w	r3, r3, #2
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d060      	beq.n	80043c0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	2b04      	cmp	r3, #4
 8004302:	d005      	beq.n	8004310 <HAL_RCC_OscConfig+0x310>
 8004304:	69bb      	ldr	r3, [r7, #24]
 8004306:	2b0c      	cmp	r3, #12
 8004308:	d119      	bne.n	800433e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	2b02      	cmp	r3, #2
 800430e:	d116      	bne.n	800433e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004310:	4b7c      	ldr	r3, [pc, #496]	@ (8004504 <HAL_RCC_OscConfig+0x504>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004318:	2b00      	cmp	r3, #0
 800431a:	d005      	beq.n	8004328 <HAL_RCC_OscConfig+0x328>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d101      	bne.n	8004328 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e23f      	b.n	80047a8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004328:	4b76      	ldr	r3, [pc, #472]	@ (8004504 <HAL_RCC_OscConfig+0x504>)
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	691b      	ldr	r3, [r3, #16]
 8004334:	061b      	lsls	r3, r3, #24
 8004336:	4973      	ldr	r1, [pc, #460]	@ (8004504 <HAL_RCC_OscConfig+0x504>)
 8004338:	4313      	orrs	r3, r2
 800433a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800433c:	e040      	b.n	80043c0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d023      	beq.n	800438e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004346:	4b6f      	ldr	r3, [pc, #444]	@ (8004504 <HAL_RCC_OscConfig+0x504>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a6e      	ldr	r2, [pc, #440]	@ (8004504 <HAL_RCC_OscConfig+0x504>)
 800434c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004350:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004352:	f7fe fcc9 	bl	8002ce8 <HAL_GetTick>
 8004356:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004358:	e008      	b.n	800436c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800435a:	f7fe fcc5 	bl	8002ce8 <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	2b02      	cmp	r3, #2
 8004366:	d901      	bls.n	800436c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e21d      	b.n	80047a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800436c:	4b65      	ldr	r3, [pc, #404]	@ (8004504 <HAL_RCC_OscConfig+0x504>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004374:	2b00      	cmp	r3, #0
 8004376:	d0f0      	beq.n	800435a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004378:	4b62      	ldr	r3, [pc, #392]	@ (8004504 <HAL_RCC_OscConfig+0x504>)
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	691b      	ldr	r3, [r3, #16]
 8004384:	061b      	lsls	r3, r3, #24
 8004386:	495f      	ldr	r1, [pc, #380]	@ (8004504 <HAL_RCC_OscConfig+0x504>)
 8004388:	4313      	orrs	r3, r2
 800438a:	604b      	str	r3, [r1, #4]
 800438c:	e018      	b.n	80043c0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800438e:	4b5d      	ldr	r3, [pc, #372]	@ (8004504 <HAL_RCC_OscConfig+0x504>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a5c      	ldr	r2, [pc, #368]	@ (8004504 <HAL_RCC_OscConfig+0x504>)
 8004394:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004398:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800439a:	f7fe fca5 	bl	8002ce8 <HAL_GetTick>
 800439e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043a0:	e008      	b.n	80043b4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043a2:	f7fe fca1 	bl	8002ce8 <HAL_GetTick>
 80043a6:	4602      	mov	r2, r0
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d901      	bls.n	80043b4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e1f9      	b.n	80047a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043b4:	4b53      	ldr	r3, [pc, #332]	@ (8004504 <HAL_RCC_OscConfig+0x504>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d1f0      	bne.n	80043a2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0308 	and.w	r3, r3, #8
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d03c      	beq.n	8004446 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	695b      	ldr	r3, [r3, #20]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d01c      	beq.n	800440e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043d4:	4b4b      	ldr	r3, [pc, #300]	@ (8004504 <HAL_RCC_OscConfig+0x504>)
 80043d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043da:	4a4a      	ldr	r2, [pc, #296]	@ (8004504 <HAL_RCC_OscConfig+0x504>)
 80043dc:	f043 0301 	orr.w	r3, r3, #1
 80043e0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043e4:	f7fe fc80 	bl	8002ce8 <HAL_GetTick>
 80043e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043ea:	e008      	b.n	80043fe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043ec:	f7fe fc7c 	bl	8002ce8 <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d901      	bls.n	80043fe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e1d4      	b.n	80047a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043fe:	4b41      	ldr	r3, [pc, #260]	@ (8004504 <HAL_RCC_OscConfig+0x504>)
 8004400:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004404:	f003 0302 	and.w	r3, r3, #2
 8004408:	2b00      	cmp	r3, #0
 800440a:	d0ef      	beq.n	80043ec <HAL_RCC_OscConfig+0x3ec>
 800440c:	e01b      	b.n	8004446 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800440e:	4b3d      	ldr	r3, [pc, #244]	@ (8004504 <HAL_RCC_OscConfig+0x504>)
 8004410:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004414:	4a3b      	ldr	r2, [pc, #236]	@ (8004504 <HAL_RCC_OscConfig+0x504>)
 8004416:	f023 0301 	bic.w	r3, r3, #1
 800441a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800441e:	f7fe fc63 	bl	8002ce8 <HAL_GetTick>
 8004422:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004424:	e008      	b.n	8004438 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004426:	f7fe fc5f 	bl	8002ce8 <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	2b02      	cmp	r3, #2
 8004432:	d901      	bls.n	8004438 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004434:	2303      	movs	r3, #3
 8004436:	e1b7      	b.n	80047a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004438:	4b32      	ldr	r3, [pc, #200]	@ (8004504 <HAL_RCC_OscConfig+0x504>)
 800443a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800443e:	f003 0302 	and.w	r3, r3, #2
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1ef      	bne.n	8004426 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0304 	and.w	r3, r3, #4
 800444e:	2b00      	cmp	r3, #0
 8004450:	f000 80a6 	beq.w	80045a0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004454:	2300      	movs	r3, #0
 8004456:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004458:	4b2a      	ldr	r3, [pc, #168]	@ (8004504 <HAL_RCC_OscConfig+0x504>)
 800445a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800445c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d10d      	bne.n	8004480 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004464:	4b27      	ldr	r3, [pc, #156]	@ (8004504 <HAL_RCC_OscConfig+0x504>)
 8004466:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004468:	4a26      	ldr	r2, [pc, #152]	@ (8004504 <HAL_RCC_OscConfig+0x504>)
 800446a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800446e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004470:	4b24      	ldr	r3, [pc, #144]	@ (8004504 <HAL_RCC_OscConfig+0x504>)
 8004472:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004474:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004478:	60bb      	str	r3, [r7, #8]
 800447a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800447c:	2301      	movs	r3, #1
 800447e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004480:	4b21      	ldr	r3, [pc, #132]	@ (8004508 <HAL_RCC_OscConfig+0x508>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004488:	2b00      	cmp	r3, #0
 800448a:	d118      	bne.n	80044be <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800448c:	4b1e      	ldr	r3, [pc, #120]	@ (8004508 <HAL_RCC_OscConfig+0x508>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a1d      	ldr	r2, [pc, #116]	@ (8004508 <HAL_RCC_OscConfig+0x508>)
 8004492:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004496:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004498:	f7fe fc26 	bl	8002ce8 <HAL_GetTick>
 800449c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800449e:	e008      	b.n	80044b2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044a0:	f7fe fc22 	bl	8002ce8 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d901      	bls.n	80044b2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e17a      	b.n	80047a8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044b2:	4b15      	ldr	r3, [pc, #84]	@ (8004508 <HAL_RCC_OscConfig+0x508>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d0f0      	beq.n	80044a0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d108      	bne.n	80044d8 <HAL_RCC_OscConfig+0x4d8>
 80044c6:	4b0f      	ldr	r3, [pc, #60]	@ (8004504 <HAL_RCC_OscConfig+0x504>)
 80044c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044cc:	4a0d      	ldr	r2, [pc, #52]	@ (8004504 <HAL_RCC_OscConfig+0x504>)
 80044ce:	f043 0301 	orr.w	r3, r3, #1
 80044d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80044d6:	e029      	b.n	800452c <HAL_RCC_OscConfig+0x52c>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	2b05      	cmp	r3, #5
 80044de:	d115      	bne.n	800450c <HAL_RCC_OscConfig+0x50c>
 80044e0:	4b08      	ldr	r3, [pc, #32]	@ (8004504 <HAL_RCC_OscConfig+0x504>)
 80044e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044e6:	4a07      	ldr	r2, [pc, #28]	@ (8004504 <HAL_RCC_OscConfig+0x504>)
 80044e8:	f043 0304 	orr.w	r3, r3, #4
 80044ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80044f0:	4b04      	ldr	r3, [pc, #16]	@ (8004504 <HAL_RCC_OscConfig+0x504>)
 80044f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044f6:	4a03      	ldr	r2, [pc, #12]	@ (8004504 <HAL_RCC_OscConfig+0x504>)
 80044f8:	f043 0301 	orr.w	r3, r3, #1
 80044fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004500:	e014      	b.n	800452c <HAL_RCC_OscConfig+0x52c>
 8004502:	bf00      	nop
 8004504:	40021000 	.word	0x40021000
 8004508:	40007000 	.word	0x40007000
 800450c:	4b9c      	ldr	r3, [pc, #624]	@ (8004780 <HAL_RCC_OscConfig+0x780>)
 800450e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004512:	4a9b      	ldr	r2, [pc, #620]	@ (8004780 <HAL_RCC_OscConfig+0x780>)
 8004514:	f023 0301 	bic.w	r3, r3, #1
 8004518:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800451c:	4b98      	ldr	r3, [pc, #608]	@ (8004780 <HAL_RCC_OscConfig+0x780>)
 800451e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004522:	4a97      	ldr	r2, [pc, #604]	@ (8004780 <HAL_RCC_OscConfig+0x780>)
 8004524:	f023 0304 	bic.w	r3, r3, #4
 8004528:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d016      	beq.n	8004562 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004534:	f7fe fbd8 	bl	8002ce8 <HAL_GetTick>
 8004538:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800453a:	e00a      	b.n	8004552 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800453c:	f7fe fbd4 	bl	8002ce8 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	f241 3288 	movw	r2, #5000	@ 0x1388
 800454a:	4293      	cmp	r3, r2
 800454c:	d901      	bls.n	8004552 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e12a      	b.n	80047a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004552:	4b8b      	ldr	r3, [pc, #556]	@ (8004780 <HAL_RCC_OscConfig+0x780>)
 8004554:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004558:	f003 0302 	and.w	r3, r3, #2
 800455c:	2b00      	cmp	r3, #0
 800455e:	d0ed      	beq.n	800453c <HAL_RCC_OscConfig+0x53c>
 8004560:	e015      	b.n	800458e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004562:	f7fe fbc1 	bl	8002ce8 <HAL_GetTick>
 8004566:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004568:	e00a      	b.n	8004580 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800456a:	f7fe fbbd 	bl	8002ce8 <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004578:	4293      	cmp	r3, r2
 800457a:	d901      	bls.n	8004580 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e113      	b.n	80047a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004580:	4b7f      	ldr	r3, [pc, #508]	@ (8004780 <HAL_RCC_OscConfig+0x780>)
 8004582:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004586:	f003 0302 	and.w	r3, r3, #2
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1ed      	bne.n	800456a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800458e:	7ffb      	ldrb	r3, [r7, #31]
 8004590:	2b01      	cmp	r3, #1
 8004592:	d105      	bne.n	80045a0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004594:	4b7a      	ldr	r3, [pc, #488]	@ (8004780 <HAL_RCC_OscConfig+0x780>)
 8004596:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004598:	4a79      	ldr	r2, [pc, #484]	@ (8004780 <HAL_RCC_OscConfig+0x780>)
 800459a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800459e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f000 80fe 	beq.w	80047a6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	f040 80d0 	bne.w	8004754 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80045b4:	4b72      	ldr	r3, [pc, #456]	@ (8004780 <HAL_RCC_OscConfig+0x780>)
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	f003 0203 	and.w	r2, r3, #3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d130      	bne.n	800462a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045d2:	3b01      	subs	r3, #1
 80045d4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d127      	bne.n	800462a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045e4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d11f      	bne.n	800462a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80045f4:	2a07      	cmp	r2, #7
 80045f6:	bf14      	ite	ne
 80045f8:	2201      	movne	r2, #1
 80045fa:	2200      	moveq	r2, #0
 80045fc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045fe:	4293      	cmp	r3, r2
 8004600:	d113      	bne.n	800462a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800460c:	085b      	lsrs	r3, r3, #1
 800460e:	3b01      	subs	r3, #1
 8004610:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004612:	429a      	cmp	r2, r3
 8004614:	d109      	bne.n	800462a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004620:	085b      	lsrs	r3, r3, #1
 8004622:	3b01      	subs	r3, #1
 8004624:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004626:	429a      	cmp	r2, r3
 8004628:	d06e      	beq.n	8004708 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	2b0c      	cmp	r3, #12
 800462e:	d069      	beq.n	8004704 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004630:	4b53      	ldr	r3, [pc, #332]	@ (8004780 <HAL_RCC_OscConfig+0x780>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d105      	bne.n	8004648 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800463c:	4b50      	ldr	r3, [pc, #320]	@ (8004780 <HAL_RCC_OscConfig+0x780>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d001      	beq.n	800464c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e0ad      	b.n	80047a8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800464c:	4b4c      	ldr	r3, [pc, #304]	@ (8004780 <HAL_RCC_OscConfig+0x780>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a4b      	ldr	r2, [pc, #300]	@ (8004780 <HAL_RCC_OscConfig+0x780>)
 8004652:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004656:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004658:	f7fe fb46 	bl	8002ce8 <HAL_GetTick>
 800465c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800465e:	e008      	b.n	8004672 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004660:	f7fe fb42 	bl	8002ce8 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	2b02      	cmp	r3, #2
 800466c:	d901      	bls.n	8004672 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e09a      	b.n	80047a8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004672:	4b43      	ldr	r3, [pc, #268]	@ (8004780 <HAL_RCC_OscConfig+0x780>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d1f0      	bne.n	8004660 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800467e:	4b40      	ldr	r3, [pc, #256]	@ (8004780 <HAL_RCC_OscConfig+0x780>)
 8004680:	68da      	ldr	r2, [r3, #12]
 8004682:	4b40      	ldr	r3, [pc, #256]	@ (8004784 <HAL_RCC_OscConfig+0x784>)
 8004684:	4013      	ands	r3, r2
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800468e:	3a01      	subs	r2, #1
 8004690:	0112      	lsls	r2, r2, #4
 8004692:	4311      	orrs	r1, r2
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004698:	0212      	lsls	r2, r2, #8
 800469a:	4311      	orrs	r1, r2
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80046a0:	0852      	lsrs	r2, r2, #1
 80046a2:	3a01      	subs	r2, #1
 80046a4:	0552      	lsls	r2, r2, #21
 80046a6:	4311      	orrs	r1, r2
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80046ac:	0852      	lsrs	r2, r2, #1
 80046ae:	3a01      	subs	r2, #1
 80046b0:	0652      	lsls	r2, r2, #25
 80046b2:	4311      	orrs	r1, r2
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80046b8:	0912      	lsrs	r2, r2, #4
 80046ba:	0452      	lsls	r2, r2, #17
 80046bc:	430a      	orrs	r2, r1
 80046be:	4930      	ldr	r1, [pc, #192]	@ (8004780 <HAL_RCC_OscConfig+0x780>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80046c4:	4b2e      	ldr	r3, [pc, #184]	@ (8004780 <HAL_RCC_OscConfig+0x780>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a2d      	ldr	r2, [pc, #180]	@ (8004780 <HAL_RCC_OscConfig+0x780>)
 80046ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80046ce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80046d0:	4b2b      	ldr	r3, [pc, #172]	@ (8004780 <HAL_RCC_OscConfig+0x780>)
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	4a2a      	ldr	r2, [pc, #168]	@ (8004780 <HAL_RCC_OscConfig+0x780>)
 80046d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80046da:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80046dc:	f7fe fb04 	bl	8002ce8 <HAL_GetTick>
 80046e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046e2:	e008      	b.n	80046f6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046e4:	f7fe fb00 	bl	8002ce8 <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d901      	bls.n	80046f6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e058      	b.n	80047a8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046f6:	4b22      	ldr	r3, [pc, #136]	@ (8004780 <HAL_RCC_OscConfig+0x780>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d0f0      	beq.n	80046e4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004702:	e050      	b.n	80047a6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e04f      	b.n	80047a8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004708:	4b1d      	ldr	r3, [pc, #116]	@ (8004780 <HAL_RCC_OscConfig+0x780>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004710:	2b00      	cmp	r3, #0
 8004712:	d148      	bne.n	80047a6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004714:	4b1a      	ldr	r3, [pc, #104]	@ (8004780 <HAL_RCC_OscConfig+0x780>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a19      	ldr	r2, [pc, #100]	@ (8004780 <HAL_RCC_OscConfig+0x780>)
 800471a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800471e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004720:	4b17      	ldr	r3, [pc, #92]	@ (8004780 <HAL_RCC_OscConfig+0x780>)
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	4a16      	ldr	r2, [pc, #88]	@ (8004780 <HAL_RCC_OscConfig+0x780>)
 8004726:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800472a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800472c:	f7fe fadc 	bl	8002ce8 <HAL_GetTick>
 8004730:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004732:	e008      	b.n	8004746 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004734:	f7fe fad8 	bl	8002ce8 <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	2b02      	cmp	r3, #2
 8004740:	d901      	bls.n	8004746 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e030      	b.n	80047a8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004746:	4b0e      	ldr	r3, [pc, #56]	@ (8004780 <HAL_RCC_OscConfig+0x780>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d0f0      	beq.n	8004734 <HAL_RCC_OscConfig+0x734>
 8004752:	e028      	b.n	80047a6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	2b0c      	cmp	r3, #12
 8004758:	d023      	beq.n	80047a2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800475a:	4b09      	ldr	r3, [pc, #36]	@ (8004780 <HAL_RCC_OscConfig+0x780>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a08      	ldr	r2, [pc, #32]	@ (8004780 <HAL_RCC_OscConfig+0x780>)
 8004760:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004764:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004766:	f7fe fabf 	bl	8002ce8 <HAL_GetTick>
 800476a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800476c:	e00c      	b.n	8004788 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800476e:	f7fe fabb 	bl	8002ce8 <HAL_GetTick>
 8004772:	4602      	mov	r2, r0
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	2b02      	cmp	r3, #2
 800477a:	d905      	bls.n	8004788 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800477c:	2303      	movs	r3, #3
 800477e:	e013      	b.n	80047a8 <HAL_RCC_OscConfig+0x7a8>
 8004780:	40021000 	.word	0x40021000
 8004784:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004788:	4b09      	ldr	r3, [pc, #36]	@ (80047b0 <HAL_RCC_OscConfig+0x7b0>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004790:	2b00      	cmp	r3, #0
 8004792:	d1ec      	bne.n	800476e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004794:	4b06      	ldr	r3, [pc, #24]	@ (80047b0 <HAL_RCC_OscConfig+0x7b0>)
 8004796:	68da      	ldr	r2, [r3, #12]
 8004798:	4905      	ldr	r1, [pc, #20]	@ (80047b0 <HAL_RCC_OscConfig+0x7b0>)
 800479a:	4b06      	ldr	r3, [pc, #24]	@ (80047b4 <HAL_RCC_OscConfig+0x7b4>)
 800479c:	4013      	ands	r3, r2
 800479e:	60cb      	str	r3, [r1, #12]
 80047a0:	e001      	b.n	80047a6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e000      	b.n	80047a8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3720      	adds	r7, #32
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	40021000 	.word	0x40021000
 80047b4:	feeefffc 	.word	0xfeeefffc

080047b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d101      	bne.n	80047cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e0e7      	b.n	800499c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047cc:	4b75      	ldr	r3, [pc, #468]	@ (80049a4 <HAL_RCC_ClockConfig+0x1ec>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0307 	and.w	r3, r3, #7
 80047d4:	683a      	ldr	r2, [r7, #0]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d910      	bls.n	80047fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047da:	4b72      	ldr	r3, [pc, #456]	@ (80049a4 <HAL_RCC_ClockConfig+0x1ec>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f023 0207 	bic.w	r2, r3, #7
 80047e2:	4970      	ldr	r1, [pc, #448]	@ (80049a4 <HAL_RCC_ClockConfig+0x1ec>)
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ea:	4b6e      	ldr	r3, [pc, #440]	@ (80049a4 <HAL_RCC_ClockConfig+0x1ec>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0307 	and.w	r3, r3, #7
 80047f2:	683a      	ldr	r2, [r7, #0]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d001      	beq.n	80047fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e0cf      	b.n	800499c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0302 	and.w	r3, r3, #2
 8004804:	2b00      	cmp	r3, #0
 8004806:	d010      	beq.n	800482a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689a      	ldr	r2, [r3, #8]
 800480c:	4b66      	ldr	r3, [pc, #408]	@ (80049a8 <HAL_RCC_ClockConfig+0x1f0>)
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004814:	429a      	cmp	r2, r3
 8004816:	d908      	bls.n	800482a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004818:	4b63      	ldr	r3, [pc, #396]	@ (80049a8 <HAL_RCC_ClockConfig+0x1f0>)
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	4960      	ldr	r1, [pc, #384]	@ (80049a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004826:	4313      	orrs	r3, r2
 8004828:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0301 	and.w	r3, r3, #1
 8004832:	2b00      	cmp	r3, #0
 8004834:	d04c      	beq.n	80048d0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	2b03      	cmp	r3, #3
 800483c:	d107      	bne.n	800484e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800483e:	4b5a      	ldr	r3, [pc, #360]	@ (80049a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d121      	bne.n	800488e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e0a6      	b.n	800499c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	2b02      	cmp	r3, #2
 8004854:	d107      	bne.n	8004866 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004856:	4b54      	ldr	r3, [pc, #336]	@ (80049a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d115      	bne.n	800488e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e09a      	b.n	800499c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d107      	bne.n	800487e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800486e:	4b4e      	ldr	r3, [pc, #312]	@ (80049a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0302 	and.w	r3, r3, #2
 8004876:	2b00      	cmp	r3, #0
 8004878:	d109      	bne.n	800488e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e08e      	b.n	800499c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800487e:	4b4a      	ldr	r3, [pc, #296]	@ (80049a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004886:	2b00      	cmp	r3, #0
 8004888:	d101      	bne.n	800488e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e086      	b.n	800499c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800488e:	4b46      	ldr	r3, [pc, #280]	@ (80049a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f023 0203 	bic.w	r2, r3, #3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	4943      	ldr	r1, [pc, #268]	@ (80049a8 <HAL_RCC_ClockConfig+0x1f0>)
 800489c:	4313      	orrs	r3, r2
 800489e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048a0:	f7fe fa22 	bl	8002ce8 <HAL_GetTick>
 80048a4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048a6:	e00a      	b.n	80048be <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048a8:	f7fe fa1e 	bl	8002ce8 <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d901      	bls.n	80048be <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e06e      	b.n	800499c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048be:	4b3a      	ldr	r3, [pc, #232]	@ (80049a8 <HAL_RCC_ClockConfig+0x1f0>)
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	f003 020c 	and.w	r2, r3, #12
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d1eb      	bne.n	80048a8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0302 	and.w	r3, r3, #2
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d010      	beq.n	80048fe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	689a      	ldr	r2, [r3, #8]
 80048e0:	4b31      	ldr	r3, [pc, #196]	@ (80049a8 <HAL_RCC_ClockConfig+0x1f0>)
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d208      	bcs.n	80048fe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048ec:	4b2e      	ldr	r3, [pc, #184]	@ (80049a8 <HAL_RCC_ClockConfig+0x1f0>)
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	492b      	ldr	r1, [pc, #172]	@ (80049a8 <HAL_RCC_ClockConfig+0x1f0>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048fe:	4b29      	ldr	r3, [pc, #164]	@ (80049a4 <HAL_RCC_ClockConfig+0x1ec>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0307 	and.w	r3, r3, #7
 8004906:	683a      	ldr	r2, [r7, #0]
 8004908:	429a      	cmp	r2, r3
 800490a:	d210      	bcs.n	800492e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800490c:	4b25      	ldr	r3, [pc, #148]	@ (80049a4 <HAL_RCC_ClockConfig+0x1ec>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f023 0207 	bic.w	r2, r3, #7
 8004914:	4923      	ldr	r1, [pc, #140]	@ (80049a4 <HAL_RCC_ClockConfig+0x1ec>)
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	4313      	orrs	r3, r2
 800491a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800491c:	4b21      	ldr	r3, [pc, #132]	@ (80049a4 <HAL_RCC_ClockConfig+0x1ec>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0307 	and.w	r3, r3, #7
 8004924:	683a      	ldr	r2, [r7, #0]
 8004926:	429a      	cmp	r2, r3
 8004928:	d001      	beq.n	800492e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e036      	b.n	800499c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0304 	and.w	r3, r3, #4
 8004936:	2b00      	cmp	r3, #0
 8004938:	d008      	beq.n	800494c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800493a:	4b1b      	ldr	r3, [pc, #108]	@ (80049a8 <HAL_RCC_ClockConfig+0x1f0>)
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	4918      	ldr	r1, [pc, #96]	@ (80049a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004948:	4313      	orrs	r3, r2
 800494a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0308 	and.w	r3, r3, #8
 8004954:	2b00      	cmp	r3, #0
 8004956:	d009      	beq.n	800496c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004958:	4b13      	ldr	r3, [pc, #76]	@ (80049a8 <HAL_RCC_ClockConfig+0x1f0>)
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	691b      	ldr	r3, [r3, #16]
 8004964:	00db      	lsls	r3, r3, #3
 8004966:	4910      	ldr	r1, [pc, #64]	@ (80049a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004968:	4313      	orrs	r3, r2
 800496a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800496c:	f000 f824 	bl	80049b8 <HAL_RCC_GetSysClockFreq>
 8004970:	4602      	mov	r2, r0
 8004972:	4b0d      	ldr	r3, [pc, #52]	@ (80049a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	091b      	lsrs	r3, r3, #4
 8004978:	f003 030f 	and.w	r3, r3, #15
 800497c:	490b      	ldr	r1, [pc, #44]	@ (80049ac <HAL_RCC_ClockConfig+0x1f4>)
 800497e:	5ccb      	ldrb	r3, [r1, r3]
 8004980:	f003 031f 	and.w	r3, r3, #31
 8004984:	fa22 f303 	lsr.w	r3, r2, r3
 8004988:	4a09      	ldr	r2, [pc, #36]	@ (80049b0 <HAL_RCC_ClockConfig+0x1f8>)
 800498a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800498c:	4b09      	ldr	r3, [pc, #36]	@ (80049b4 <HAL_RCC_ClockConfig+0x1fc>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4618      	mov	r0, r3
 8004992:	f7fe f959 	bl	8002c48 <HAL_InitTick>
 8004996:	4603      	mov	r3, r0
 8004998:	72fb      	strb	r3, [r7, #11]

  return status;
 800499a:	7afb      	ldrb	r3, [r7, #11]
}
 800499c:	4618      	mov	r0, r3
 800499e:	3710      	adds	r7, #16
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	40022000 	.word	0x40022000
 80049a8:	40021000 	.word	0x40021000
 80049ac:	0800bd04 	.word	0x0800bd04
 80049b0:	20000004 	.word	0x20000004
 80049b4:	20000008 	.word	0x20000008

080049b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b089      	sub	sp, #36	@ 0x24
 80049bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80049be:	2300      	movs	r3, #0
 80049c0:	61fb      	str	r3, [r7, #28]
 80049c2:	2300      	movs	r3, #0
 80049c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049c6:	4b3e      	ldr	r3, [pc, #248]	@ (8004ac0 <HAL_RCC_GetSysClockFreq+0x108>)
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	f003 030c 	and.w	r3, r3, #12
 80049ce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049d0:	4b3b      	ldr	r3, [pc, #236]	@ (8004ac0 <HAL_RCC_GetSysClockFreq+0x108>)
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	f003 0303 	and.w	r3, r3, #3
 80049d8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d005      	beq.n	80049ec <HAL_RCC_GetSysClockFreq+0x34>
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	2b0c      	cmp	r3, #12
 80049e4:	d121      	bne.n	8004a2a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d11e      	bne.n	8004a2a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80049ec:	4b34      	ldr	r3, [pc, #208]	@ (8004ac0 <HAL_RCC_GetSysClockFreq+0x108>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0308 	and.w	r3, r3, #8
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d107      	bne.n	8004a08 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80049f8:	4b31      	ldr	r3, [pc, #196]	@ (8004ac0 <HAL_RCC_GetSysClockFreq+0x108>)
 80049fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049fe:	0a1b      	lsrs	r3, r3, #8
 8004a00:	f003 030f 	and.w	r3, r3, #15
 8004a04:	61fb      	str	r3, [r7, #28]
 8004a06:	e005      	b.n	8004a14 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004a08:	4b2d      	ldr	r3, [pc, #180]	@ (8004ac0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	091b      	lsrs	r3, r3, #4
 8004a0e:	f003 030f 	and.w	r3, r3, #15
 8004a12:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004a14:	4a2b      	ldr	r2, [pc, #172]	@ (8004ac4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a1c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d10d      	bne.n	8004a40 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a28:	e00a      	b.n	8004a40 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	2b04      	cmp	r3, #4
 8004a2e:	d102      	bne.n	8004a36 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a30:	4b25      	ldr	r3, [pc, #148]	@ (8004ac8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004a32:	61bb      	str	r3, [r7, #24]
 8004a34:	e004      	b.n	8004a40 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	2b08      	cmp	r3, #8
 8004a3a:	d101      	bne.n	8004a40 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a3c:	4b23      	ldr	r3, [pc, #140]	@ (8004acc <HAL_RCC_GetSysClockFreq+0x114>)
 8004a3e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	2b0c      	cmp	r3, #12
 8004a44:	d134      	bne.n	8004ab0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a46:	4b1e      	ldr	r3, [pc, #120]	@ (8004ac0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	f003 0303 	and.w	r3, r3, #3
 8004a4e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d003      	beq.n	8004a5e <HAL_RCC_GetSysClockFreq+0xa6>
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	2b03      	cmp	r3, #3
 8004a5a:	d003      	beq.n	8004a64 <HAL_RCC_GetSysClockFreq+0xac>
 8004a5c:	e005      	b.n	8004a6a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004a5e:	4b1a      	ldr	r3, [pc, #104]	@ (8004ac8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004a60:	617b      	str	r3, [r7, #20]
      break;
 8004a62:	e005      	b.n	8004a70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004a64:	4b19      	ldr	r3, [pc, #100]	@ (8004acc <HAL_RCC_GetSysClockFreq+0x114>)
 8004a66:	617b      	str	r3, [r7, #20]
      break;
 8004a68:	e002      	b.n	8004a70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	617b      	str	r3, [r7, #20]
      break;
 8004a6e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a70:	4b13      	ldr	r3, [pc, #76]	@ (8004ac0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	091b      	lsrs	r3, r3, #4
 8004a76:	f003 0307 	and.w	r3, r3, #7
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004a7e:	4b10      	ldr	r3, [pc, #64]	@ (8004ac0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	0a1b      	lsrs	r3, r3, #8
 8004a84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a88:	697a      	ldr	r2, [r7, #20]
 8004a8a:	fb03 f202 	mul.w	r2, r3, r2
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a94:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a96:	4b0a      	ldr	r3, [pc, #40]	@ (8004ac0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	0e5b      	lsrs	r3, r3, #25
 8004a9c:	f003 0303 	and.w	r3, r3, #3
 8004aa0:	3301      	adds	r3, #1
 8004aa2:	005b      	lsls	r3, r3, #1
 8004aa4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004aa6:	697a      	ldr	r2, [r7, #20]
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004ab0:	69bb      	ldr	r3, [r7, #24]
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3724      	adds	r7, #36	@ 0x24
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr
 8004abe:	bf00      	nop
 8004ac0:	40021000 	.word	0x40021000
 8004ac4:	0800bd1c 	.word	0x0800bd1c
 8004ac8:	00f42400 	.word	0x00f42400
 8004acc:	007a1200 	.word	0x007a1200

08004ad0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ad4:	4b03      	ldr	r3, [pc, #12]	@ (8004ae4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr
 8004ae2:	bf00      	nop
 8004ae4:	20000004 	.word	0x20000004

08004ae8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004aec:	f7ff fff0 	bl	8004ad0 <HAL_RCC_GetHCLKFreq>
 8004af0:	4602      	mov	r2, r0
 8004af2:	4b06      	ldr	r3, [pc, #24]	@ (8004b0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	0a1b      	lsrs	r3, r3, #8
 8004af8:	f003 0307 	and.w	r3, r3, #7
 8004afc:	4904      	ldr	r1, [pc, #16]	@ (8004b10 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004afe:	5ccb      	ldrb	r3, [r1, r3]
 8004b00:	f003 031f 	and.w	r3, r3, #31
 8004b04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	40021000 	.word	0x40021000
 8004b10:	0800bd14 	.word	0x0800bd14

08004b14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004b18:	f7ff ffda 	bl	8004ad0 <HAL_RCC_GetHCLKFreq>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	4b06      	ldr	r3, [pc, #24]	@ (8004b38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	0adb      	lsrs	r3, r3, #11
 8004b24:	f003 0307 	and.w	r3, r3, #7
 8004b28:	4904      	ldr	r1, [pc, #16]	@ (8004b3c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004b2a:	5ccb      	ldrb	r3, [r1, r3]
 8004b2c:	f003 031f 	and.w	r3, r3, #31
 8004b30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	40021000 	.word	0x40021000
 8004b3c:	0800bd14 	.word	0x0800bd14

08004b40 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b086      	sub	sp, #24
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004b48:	2300      	movs	r3, #0
 8004b4a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004b4c:	4b2a      	ldr	r3, [pc, #168]	@ (8004bf8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d003      	beq.n	8004b60 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004b58:	f7ff f9ee 	bl	8003f38 <HAL_PWREx_GetVoltageRange>
 8004b5c:	6178      	str	r0, [r7, #20]
 8004b5e:	e014      	b.n	8004b8a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b60:	4b25      	ldr	r3, [pc, #148]	@ (8004bf8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b64:	4a24      	ldr	r2, [pc, #144]	@ (8004bf8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b6a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b6c:	4b22      	ldr	r3, [pc, #136]	@ (8004bf8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b74:	60fb      	str	r3, [r7, #12]
 8004b76:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004b78:	f7ff f9de 	bl	8003f38 <HAL_PWREx_GetVoltageRange>
 8004b7c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004b7e:	4b1e      	ldr	r3, [pc, #120]	@ (8004bf8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b82:	4a1d      	ldr	r2, [pc, #116]	@ (8004bf8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b84:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b88:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b90:	d10b      	bne.n	8004baa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2b80      	cmp	r3, #128	@ 0x80
 8004b96:	d919      	bls.n	8004bcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2ba0      	cmp	r3, #160	@ 0xa0
 8004b9c:	d902      	bls.n	8004ba4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004b9e:	2302      	movs	r3, #2
 8004ba0:	613b      	str	r3, [r7, #16]
 8004ba2:	e013      	b.n	8004bcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	613b      	str	r3, [r7, #16]
 8004ba8:	e010      	b.n	8004bcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2b80      	cmp	r3, #128	@ 0x80
 8004bae:	d902      	bls.n	8004bb6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	613b      	str	r3, [r7, #16]
 8004bb4:	e00a      	b.n	8004bcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2b80      	cmp	r3, #128	@ 0x80
 8004bba:	d102      	bne.n	8004bc2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004bbc:	2302      	movs	r3, #2
 8004bbe:	613b      	str	r3, [r7, #16]
 8004bc0:	e004      	b.n	8004bcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2b70      	cmp	r3, #112	@ 0x70
 8004bc6:	d101      	bne.n	8004bcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004bc8:	2301      	movs	r3, #1
 8004bca:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8004bfc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f023 0207 	bic.w	r2, r3, #7
 8004bd4:	4909      	ldr	r1, [pc, #36]	@ (8004bfc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004bdc:	4b07      	ldr	r3, [pc, #28]	@ (8004bfc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0307 	and.w	r3, r3, #7
 8004be4:	693a      	ldr	r2, [r7, #16]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d001      	beq.n	8004bee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e000      	b.n	8004bf0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3718      	adds	r7, #24
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	40021000 	.word	0x40021000
 8004bfc:	40022000 	.word	0x40022000

08004c00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b086      	sub	sp, #24
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c08:	2300      	movs	r3, #0
 8004c0a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d041      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c20:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004c24:	d02a      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004c26:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004c2a:	d824      	bhi.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004c2c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004c30:	d008      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004c32:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004c36:	d81e      	bhi.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d00a      	beq.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004c3c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c40:	d010      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004c42:	e018      	b.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004c44:	4b86      	ldr	r3, [pc, #536]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	4a85      	ldr	r2, [pc, #532]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c4e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c50:	e015      	b.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	3304      	adds	r3, #4
 8004c56:	2100      	movs	r1, #0
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f000 fabb 	bl	80051d4 <RCCEx_PLLSAI1_Config>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c62:	e00c      	b.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	3320      	adds	r3, #32
 8004c68:	2100      	movs	r1, #0
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f000 fba6 	bl	80053bc <RCCEx_PLLSAI2_Config>
 8004c70:	4603      	mov	r3, r0
 8004c72:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c74:	e003      	b.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	74fb      	strb	r3, [r7, #19]
      break;
 8004c7a:	e000      	b.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004c7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c7e:	7cfb      	ldrb	r3, [r7, #19]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d10b      	bne.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c84:	4b76      	ldr	r3, [pc, #472]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c8a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c92:	4973      	ldr	r1, [pc, #460]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c94:	4313      	orrs	r3, r2
 8004c96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004c9a:	e001      	b.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c9c:	7cfb      	ldrb	r3, [r7, #19]
 8004c9e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d041      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004cb0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004cb4:	d02a      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004cb6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004cba:	d824      	bhi.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004cbc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004cc0:	d008      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004cc2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004cc6:	d81e      	bhi.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d00a      	beq.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004ccc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004cd0:	d010      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004cd2:	e018      	b.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004cd4:	4b62      	ldr	r3, [pc, #392]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	4a61      	ldr	r2, [pc, #388]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cde:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004ce0:	e015      	b.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	3304      	adds	r3, #4
 8004ce6:	2100      	movs	r1, #0
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f000 fa73 	bl	80051d4 <RCCEx_PLLSAI1_Config>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004cf2:	e00c      	b.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	3320      	adds	r3, #32
 8004cf8:	2100      	movs	r1, #0
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f000 fb5e 	bl	80053bc <RCCEx_PLLSAI2_Config>
 8004d00:	4603      	mov	r3, r0
 8004d02:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004d04:	e003      	b.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	74fb      	strb	r3, [r7, #19]
      break;
 8004d0a:	e000      	b.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004d0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d0e:	7cfb      	ldrb	r3, [r7, #19]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d10b      	bne.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004d14:	4b52      	ldr	r3, [pc, #328]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d1a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d22:	494f      	ldr	r1, [pc, #316]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d24:	4313      	orrs	r3, r2
 8004d26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004d2a:	e001      	b.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d2c:	7cfb      	ldrb	r3, [r7, #19]
 8004d2e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	f000 80a0 	beq.w	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004d42:	4b47      	ldr	r3, [pc, #284]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d101      	bne.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e000      	b.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004d52:	2300      	movs	r3, #0
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d00d      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d58:	4b41      	ldr	r3, [pc, #260]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d5c:	4a40      	ldr	r2, [pc, #256]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d62:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d64:	4b3e      	ldr	r3, [pc, #248]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d6c:	60bb      	str	r3, [r7, #8]
 8004d6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d70:	2301      	movs	r3, #1
 8004d72:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d74:	4b3b      	ldr	r3, [pc, #236]	@ (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a3a      	ldr	r2, [pc, #232]	@ (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004d7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d7e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d80:	f7fd ffb2 	bl	8002ce8 <HAL_GetTick>
 8004d84:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004d86:	e009      	b.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d88:	f7fd ffae 	bl	8002ce8 <HAL_GetTick>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	2b02      	cmp	r3, #2
 8004d94:	d902      	bls.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	74fb      	strb	r3, [r7, #19]
        break;
 8004d9a:	e005      	b.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004d9c:	4b31      	ldr	r3, [pc, #196]	@ (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d0ef      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004da8:	7cfb      	ldrb	r3, [r7, #19]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d15c      	bne.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004dae:	4b2c      	ldr	r3, [pc, #176]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004db4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004db8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d01f      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004dc6:	697a      	ldr	r2, [r7, #20]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d019      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004dcc:	4b24      	ldr	r3, [pc, #144]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dd6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004dd8:	4b21      	ldr	r3, [pc, #132]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dde:	4a20      	ldr	r2, [pc, #128]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004de0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004de4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004de8:	4b1d      	ldr	r3, [pc, #116]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dee:	4a1c      	ldr	r2, [pc, #112]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004df0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004df4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004df8:	4a19      	ldr	r2, [pc, #100]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	f003 0301 	and.w	r3, r3, #1
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d016      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e0a:	f7fd ff6d 	bl	8002ce8 <HAL_GetTick>
 8004e0e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e10:	e00b      	b.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e12:	f7fd ff69 	bl	8002ce8 <HAL_GetTick>
 8004e16:	4602      	mov	r2, r0
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d902      	bls.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	74fb      	strb	r3, [r7, #19]
            break;
 8004e28:	e006      	b.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e30:	f003 0302 	and.w	r3, r3, #2
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d0ec      	beq.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004e38:	7cfb      	ldrb	r3, [r7, #19]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d10c      	bne.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e3e:	4b08      	ldr	r3, [pc, #32]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e44:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e4e:	4904      	ldr	r1, [pc, #16]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e50:	4313      	orrs	r3, r2
 8004e52:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004e56:	e009      	b.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004e58:	7cfb      	ldrb	r3, [r7, #19]
 8004e5a:	74bb      	strb	r3, [r7, #18]
 8004e5c:	e006      	b.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004e5e:	bf00      	nop
 8004e60:	40021000 	.word	0x40021000
 8004e64:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e68:	7cfb      	ldrb	r3, [r7, #19]
 8004e6a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e6c:	7c7b      	ldrb	r3, [r7, #17]
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d105      	bne.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e72:	4b9e      	ldr	r3, [pc, #632]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e76:	4a9d      	ldr	r2, [pc, #628]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e7c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0301 	and.w	r3, r3, #1
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d00a      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e8a:	4b98      	ldr	r3, [pc, #608]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e90:	f023 0203 	bic.w	r2, r3, #3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e98:	4994      	ldr	r1, [pc, #592]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0302 	and.w	r3, r3, #2
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d00a      	beq.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004eac:	4b8f      	ldr	r3, [pc, #572]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eb2:	f023 020c 	bic.w	r2, r3, #12
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eba:	498c      	ldr	r1, [pc, #560]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 0304 	and.w	r3, r3, #4
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d00a      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ece:	4b87      	ldr	r3, [pc, #540]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ed4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004edc:	4983      	ldr	r1, [pc, #524]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0308 	and.w	r3, r3, #8
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d00a      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ef0:	4b7e      	ldr	r3, [pc, #504]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ef6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004efe:	497b      	ldr	r1, [pc, #492]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f00:	4313      	orrs	r3, r2
 8004f02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 0310 	and.w	r3, r3, #16
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d00a      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004f12:	4b76      	ldr	r3, [pc, #472]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f18:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f20:	4972      	ldr	r1, [pc, #456]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f22:	4313      	orrs	r3, r2
 8004f24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0320 	and.w	r3, r3, #32
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d00a      	beq.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004f34:	4b6d      	ldr	r3, [pc, #436]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f3a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f42:	496a      	ldr	r1, [pc, #424]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f44:	4313      	orrs	r3, r2
 8004f46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d00a      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f56:	4b65      	ldr	r3, [pc, #404]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f5c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f64:	4961      	ldr	r1, [pc, #388]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f66:	4313      	orrs	r3, r2
 8004f68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d00a      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004f78:	4b5c      	ldr	r3, [pc, #368]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f7e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f86:	4959      	ldr	r1, [pc, #356]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00a      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f9a:	4b54      	ldr	r3, [pc, #336]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fa0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fa8:	4950      	ldr	r1, [pc, #320]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d00a      	beq.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004fbc:	4b4b      	ldr	r3, [pc, #300]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fc2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fca:	4948      	ldr	r1, [pc, #288]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00a      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004fde:	4b43      	ldr	r3, [pc, #268]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fe4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fec:	493f      	ldr	r1, [pc, #252]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d028      	beq.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005000:	4b3a      	ldr	r3, [pc, #232]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005002:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005006:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800500e:	4937      	ldr	r1, [pc, #220]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005010:	4313      	orrs	r3, r2
 8005012:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800501a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800501e:	d106      	bne.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005020:	4b32      	ldr	r3, [pc, #200]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	4a31      	ldr	r2, [pc, #196]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005026:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800502a:	60d3      	str	r3, [r2, #12]
 800502c:	e011      	b.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005032:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005036:	d10c      	bne.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	3304      	adds	r3, #4
 800503c:	2101      	movs	r1, #1
 800503e:	4618      	mov	r0, r3
 8005040:	f000 f8c8 	bl	80051d4 <RCCEx_PLLSAI1_Config>
 8005044:	4603      	mov	r3, r0
 8005046:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005048:	7cfb      	ldrb	r3, [r7, #19]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d001      	beq.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800504e:	7cfb      	ldrb	r3, [r7, #19]
 8005050:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800505a:	2b00      	cmp	r3, #0
 800505c:	d028      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800505e:	4b23      	ldr	r3, [pc, #140]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005060:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005064:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800506c:	491f      	ldr	r1, [pc, #124]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800506e:	4313      	orrs	r3, r2
 8005070:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005078:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800507c:	d106      	bne.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800507e:	4b1b      	ldr	r3, [pc, #108]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	4a1a      	ldr	r2, [pc, #104]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005084:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005088:	60d3      	str	r3, [r2, #12]
 800508a:	e011      	b.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005090:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005094:	d10c      	bne.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	3304      	adds	r3, #4
 800509a:	2101      	movs	r1, #1
 800509c:	4618      	mov	r0, r3
 800509e:	f000 f899 	bl	80051d4 <RCCEx_PLLSAI1_Config>
 80050a2:	4603      	mov	r3, r0
 80050a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80050a6:	7cfb      	ldrb	r3, [r7, #19]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d001      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80050ac:	7cfb      	ldrb	r3, [r7, #19]
 80050ae:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d02b      	beq.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80050bc:	4b0b      	ldr	r3, [pc, #44]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050c2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050ca:	4908      	ldr	r1, [pc, #32]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050cc:	4313      	orrs	r3, r2
 80050ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80050da:	d109      	bne.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050dc:	4b03      	ldr	r3, [pc, #12]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	4a02      	ldr	r2, [pc, #8]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80050e6:	60d3      	str	r3, [r2, #12]
 80050e8:	e014      	b.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80050ea:	bf00      	nop
 80050ec:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050f4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80050f8:	d10c      	bne.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	3304      	adds	r3, #4
 80050fe:	2101      	movs	r1, #1
 8005100:	4618      	mov	r0, r3
 8005102:	f000 f867 	bl	80051d4 <RCCEx_PLLSAI1_Config>
 8005106:	4603      	mov	r3, r0
 8005108:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800510a:	7cfb      	ldrb	r3, [r7, #19]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d001      	beq.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005110:	7cfb      	ldrb	r3, [r7, #19]
 8005112:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800511c:	2b00      	cmp	r3, #0
 800511e:	d02f      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005120:	4b2b      	ldr	r3, [pc, #172]	@ (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005122:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005126:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800512e:	4928      	ldr	r1, [pc, #160]	@ (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005130:	4313      	orrs	r3, r2
 8005132:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800513a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800513e:	d10d      	bne.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	3304      	adds	r3, #4
 8005144:	2102      	movs	r1, #2
 8005146:	4618      	mov	r0, r3
 8005148:	f000 f844 	bl	80051d4 <RCCEx_PLLSAI1_Config>
 800514c:	4603      	mov	r3, r0
 800514e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005150:	7cfb      	ldrb	r3, [r7, #19]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d014      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005156:	7cfb      	ldrb	r3, [r7, #19]
 8005158:	74bb      	strb	r3, [r7, #18]
 800515a:	e011      	b.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005160:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005164:	d10c      	bne.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	3320      	adds	r3, #32
 800516a:	2102      	movs	r1, #2
 800516c:	4618      	mov	r0, r3
 800516e:	f000 f925 	bl	80053bc <RCCEx_PLLSAI2_Config>
 8005172:	4603      	mov	r3, r0
 8005174:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005176:	7cfb      	ldrb	r3, [r7, #19]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d001      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800517c:	7cfb      	ldrb	r3, [r7, #19]
 800517e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005188:	2b00      	cmp	r3, #0
 800518a:	d00a      	beq.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800518c:	4b10      	ldr	r3, [pc, #64]	@ (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800518e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005192:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800519a:	490d      	ldr	r1, [pc, #52]	@ (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800519c:	4313      	orrs	r3, r2
 800519e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00b      	beq.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80051ae:	4b08      	ldr	r3, [pc, #32]	@ (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80051b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051b4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051be:	4904      	ldr	r1, [pc, #16]	@ (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80051c0:	4313      	orrs	r3, r2
 80051c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80051c6:	7cbb      	ldrb	r3, [r7, #18]
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3718      	adds	r7, #24
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	40021000 	.word	0x40021000

080051d4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80051de:	2300      	movs	r3, #0
 80051e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80051e2:	4b75      	ldr	r3, [pc, #468]	@ (80053b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	f003 0303 	and.w	r3, r3, #3
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d018      	beq.n	8005220 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80051ee:	4b72      	ldr	r3, [pc, #456]	@ (80053b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	f003 0203 	and.w	r2, r3, #3
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d10d      	bne.n	800521a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
       ||
 8005202:	2b00      	cmp	r3, #0
 8005204:	d009      	beq.n	800521a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005206:	4b6c      	ldr	r3, [pc, #432]	@ (80053b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	091b      	lsrs	r3, r3, #4
 800520c:	f003 0307 	and.w	r3, r3, #7
 8005210:	1c5a      	adds	r2, r3, #1
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
       ||
 8005216:	429a      	cmp	r2, r3
 8005218:	d047      	beq.n	80052aa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	73fb      	strb	r3, [r7, #15]
 800521e:	e044      	b.n	80052aa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	2b03      	cmp	r3, #3
 8005226:	d018      	beq.n	800525a <RCCEx_PLLSAI1_Config+0x86>
 8005228:	2b03      	cmp	r3, #3
 800522a:	d825      	bhi.n	8005278 <RCCEx_PLLSAI1_Config+0xa4>
 800522c:	2b01      	cmp	r3, #1
 800522e:	d002      	beq.n	8005236 <RCCEx_PLLSAI1_Config+0x62>
 8005230:	2b02      	cmp	r3, #2
 8005232:	d009      	beq.n	8005248 <RCCEx_PLLSAI1_Config+0x74>
 8005234:	e020      	b.n	8005278 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005236:	4b60      	ldr	r3, [pc, #384]	@ (80053b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 0302 	and.w	r3, r3, #2
 800523e:	2b00      	cmp	r3, #0
 8005240:	d11d      	bne.n	800527e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005246:	e01a      	b.n	800527e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005248:	4b5b      	ldr	r3, [pc, #364]	@ (80053b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005250:	2b00      	cmp	r3, #0
 8005252:	d116      	bne.n	8005282 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005258:	e013      	b.n	8005282 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800525a:	4b57      	ldr	r3, [pc, #348]	@ (80053b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d10f      	bne.n	8005286 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005266:	4b54      	ldr	r3, [pc, #336]	@ (80053b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d109      	bne.n	8005286 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005276:	e006      	b.n	8005286 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	73fb      	strb	r3, [r7, #15]
      break;
 800527c:	e004      	b.n	8005288 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800527e:	bf00      	nop
 8005280:	e002      	b.n	8005288 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005282:	bf00      	nop
 8005284:	e000      	b.n	8005288 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005286:	bf00      	nop
    }

    if(status == HAL_OK)
 8005288:	7bfb      	ldrb	r3, [r7, #15]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d10d      	bne.n	80052aa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800528e:	4b4a      	ldr	r3, [pc, #296]	@ (80053b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6819      	ldr	r1, [r3, #0]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	3b01      	subs	r3, #1
 80052a0:	011b      	lsls	r3, r3, #4
 80052a2:	430b      	orrs	r3, r1
 80052a4:	4944      	ldr	r1, [pc, #272]	@ (80053b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052a6:	4313      	orrs	r3, r2
 80052a8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80052aa:	7bfb      	ldrb	r3, [r7, #15]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d17d      	bne.n	80053ac <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80052b0:	4b41      	ldr	r3, [pc, #260]	@ (80053b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a40      	ldr	r2, [pc, #256]	@ (80053b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052b6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80052ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052bc:	f7fd fd14 	bl	8002ce8 <HAL_GetTick>
 80052c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80052c2:	e009      	b.n	80052d8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80052c4:	f7fd fd10 	bl	8002ce8 <HAL_GetTick>
 80052c8:	4602      	mov	r2, r0
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	2b02      	cmp	r3, #2
 80052d0:	d902      	bls.n	80052d8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	73fb      	strb	r3, [r7, #15]
        break;
 80052d6:	e005      	b.n	80052e4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80052d8:	4b37      	ldr	r3, [pc, #220]	@ (80053b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d1ef      	bne.n	80052c4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80052e4:	7bfb      	ldrb	r3, [r7, #15]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d160      	bne.n	80053ac <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d111      	bne.n	8005314 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80052f0:	4b31      	ldr	r3, [pc, #196]	@ (80053b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80052f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	6892      	ldr	r2, [r2, #8]
 8005300:	0211      	lsls	r1, r2, #8
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	68d2      	ldr	r2, [r2, #12]
 8005306:	0912      	lsrs	r2, r2, #4
 8005308:	0452      	lsls	r2, r2, #17
 800530a:	430a      	orrs	r2, r1
 800530c:	492a      	ldr	r1, [pc, #168]	@ (80053b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800530e:	4313      	orrs	r3, r2
 8005310:	610b      	str	r3, [r1, #16]
 8005312:	e027      	b.n	8005364 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	2b01      	cmp	r3, #1
 8005318:	d112      	bne.n	8005340 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800531a:	4b27      	ldr	r3, [pc, #156]	@ (80053b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005322:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	6892      	ldr	r2, [r2, #8]
 800532a:	0211      	lsls	r1, r2, #8
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	6912      	ldr	r2, [r2, #16]
 8005330:	0852      	lsrs	r2, r2, #1
 8005332:	3a01      	subs	r2, #1
 8005334:	0552      	lsls	r2, r2, #21
 8005336:	430a      	orrs	r2, r1
 8005338:	491f      	ldr	r1, [pc, #124]	@ (80053b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800533a:	4313      	orrs	r3, r2
 800533c:	610b      	str	r3, [r1, #16]
 800533e:	e011      	b.n	8005364 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005340:	4b1d      	ldr	r3, [pc, #116]	@ (80053b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005342:	691b      	ldr	r3, [r3, #16]
 8005344:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005348:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	6892      	ldr	r2, [r2, #8]
 8005350:	0211      	lsls	r1, r2, #8
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	6952      	ldr	r2, [r2, #20]
 8005356:	0852      	lsrs	r2, r2, #1
 8005358:	3a01      	subs	r2, #1
 800535a:	0652      	lsls	r2, r2, #25
 800535c:	430a      	orrs	r2, r1
 800535e:	4916      	ldr	r1, [pc, #88]	@ (80053b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005360:	4313      	orrs	r3, r2
 8005362:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005364:	4b14      	ldr	r3, [pc, #80]	@ (80053b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a13      	ldr	r2, [pc, #76]	@ (80053b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800536a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800536e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005370:	f7fd fcba 	bl	8002ce8 <HAL_GetTick>
 8005374:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005376:	e009      	b.n	800538c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005378:	f7fd fcb6 	bl	8002ce8 <HAL_GetTick>
 800537c:	4602      	mov	r2, r0
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	2b02      	cmp	r3, #2
 8005384:	d902      	bls.n	800538c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005386:	2303      	movs	r3, #3
 8005388:	73fb      	strb	r3, [r7, #15]
          break;
 800538a:	e005      	b.n	8005398 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800538c:	4b0a      	ldr	r3, [pc, #40]	@ (80053b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005394:	2b00      	cmp	r3, #0
 8005396:	d0ef      	beq.n	8005378 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005398:	7bfb      	ldrb	r3, [r7, #15]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d106      	bne.n	80053ac <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800539e:	4b06      	ldr	r3, [pc, #24]	@ (80053b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053a0:	691a      	ldr	r2, [r3, #16]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	699b      	ldr	r3, [r3, #24]
 80053a6:	4904      	ldr	r1, [pc, #16]	@ (80053b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053a8:	4313      	orrs	r3, r2
 80053aa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80053ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3710      	adds	r7, #16
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	40021000 	.word	0x40021000

080053bc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b084      	sub	sp, #16
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80053c6:	2300      	movs	r3, #0
 80053c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80053ca:	4b6a      	ldr	r3, [pc, #424]	@ (8005574 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	f003 0303 	and.w	r3, r3, #3
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d018      	beq.n	8005408 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80053d6:	4b67      	ldr	r3, [pc, #412]	@ (8005574 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	f003 0203 	and.w	r2, r3, #3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d10d      	bne.n	8005402 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
       ||
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d009      	beq.n	8005402 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80053ee:	4b61      	ldr	r3, [pc, #388]	@ (8005574 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	091b      	lsrs	r3, r3, #4
 80053f4:	f003 0307 	and.w	r3, r3, #7
 80053f8:	1c5a      	adds	r2, r3, #1
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	685b      	ldr	r3, [r3, #4]
       ||
 80053fe:	429a      	cmp	r2, r3
 8005400:	d047      	beq.n	8005492 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	73fb      	strb	r3, [r7, #15]
 8005406:	e044      	b.n	8005492 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2b03      	cmp	r3, #3
 800540e:	d018      	beq.n	8005442 <RCCEx_PLLSAI2_Config+0x86>
 8005410:	2b03      	cmp	r3, #3
 8005412:	d825      	bhi.n	8005460 <RCCEx_PLLSAI2_Config+0xa4>
 8005414:	2b01      	cmp	r3, #1
 8005416:	d002      	beq.n	800541e <RCCEx_PLLSAI2_Config+0x62>
 8005418:	2b02      	cmp	r3, #2
 800541a:	d009      	beq.n	8005430 <RCCEx_PLLSAI2_Config+0x74>
 800541c:	e020      	b.n	8005460 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800541e:	4b55      	ldr	r3, [pc, #340]	@ (8005574 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 0302 	and.w	r3, r3, #2
 8005426:	2b00      	cmp	r3, #0
 8005428:	d11d      	bne.n	8005466 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800542e:	e01a      	b.n	8005466 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005430:	4b50      	ldr	r3, [pc, #320]	@ (8005574 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005438:	2b00      	cmp	r3, #0
 800543a:	d116      	bne.n	800546a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005440:	e013      	b.n	800546a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005442:	4b4c      	ldr	r3, [pc, #304]	@ (8005574 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800544a:	2b00      	cmp	r3, #0
 800544c:	d10f      	bne.n	800546e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800544e:	4b49      	ldr	r3, [pc, #292]	@ (8005574 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005456:	2b00      	cmp	r3, #0
 8005458:	d109      	bne.n	800546e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800545e:	e006      	b.n	800546e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	73fb      	strb	r3, [r7, #15]
      break;
 8005464:	e004      	b.n	8005470 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005466:	bf00      	nop
 8005468:	e002      	b.n	8005470 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800546a:	bf00      	nop
 800546c:	e000      	b.n	8005470 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800546e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005470:	7bfb      	ldrb	r3, [r7, #15]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d10d      	bne.n	8005492 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005476:	4b3f      	ldr	r3, [pc, #252]	@ (8005574 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6819      	ldr	r1, [r3, #0]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	3b01      	subs	r3, #1
 8005488:	011b      	lsls	r3, r3, #4
 800548a:	430b      	orrs	r3, r1
 800548c:	4939      	ldr	r1, [pc, #228]	@ (8005574 <RCCEx_PLLSAI2_Config+0x1b8>)
 800548e:	4313      	orrs	r3, r2
 8005490:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005492:	7bfb      	ldrb	r3, [r7, #15]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d167      	bne.n	8005568 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005498:	4b36      	ldr	r3, [pc, #216]	@ (8005574 <RCCEx_PLLSAI2_Config+0x1b8>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a35      	ldr	r2, [pc, #212]	@ (8005574 <RCCEx_PLLSAI2_Config+0x1b8>)
 800549e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80054a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054a4:	f7fd fc20 	bl	8002ce8 <HAL_GetTick>
 80054a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80054aa:	e009      	b.n	80054c0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80054ac:	f7fd fc1c 	bl	8002ce8 <HAL_GetTick>
 80054b0:	4602      	mov	r2, r0
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	d902      	bls.n	80054c0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80054ba:	2303      	movs	r3, #3
 80054bc:	73fb      	strb	r3, [r7, #15]
        break;
 80054be:	e005      	b.n	80054cc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80054c0:	4b2c      	ldr	r3, [pc, #176]	@ (8005574 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d1ef      	bne.n	80054ac <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80054cc:	7bfb      	ldrb	r3, [r7, #15]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d14a      	bne.n	8005568 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d111      	bne.n	80054fc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80054d8:	4b26      	ldr	r3, [pc, #152]	@ (8005574 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054da:	695b      	ldr	r3, [r3, #20]
 80054dc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80054e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	6892      	ldr	r2, [r2, #8]
 80054e8:	0211      	lsls	r1, r2, #8
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	68d2      	ldr	r2, [r2, #12]
 80054ee:	0912      	lsrs	r2, r2, #4
 80054f0:	0452      	lsls	r2, r2, #17
 80054f2:	430a      	orrs	r2, r1
 80054f4:	491f      	ldr	r1, [pc, #124]	@ (8005574 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	614b      	str	r3, [r1, #20]
 80054fa:	e011      	b.n	8005520 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80054fc:	4b1d      	ldr	r3, [pc, #116]	@ (8005574 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054fe:	695b      	ldr	r3, [r3, #20]
 8005500:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005504:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	6892      	ldr	r2, [r2, #8]
 800550c:	0211      	lsls	r1, r2, #8
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	6912      	ldr	r2, [r2, #16]
 8005512:	0852      	lsrs	r2, r2, #1
 8005514:	3a01      	subs	r2, #1
 8005516:	0652      	lsls	r2, r2, #25
 8005518:	430a      	orrs	r2, r1
 800551a:	4916      	ldr	r1, [pc, #88]	@ (8005574 <RCCEx_PLLSAI2_Config+0x1b8>)
 800551c:	4313      	orrs	r3, r2
 800551e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005520:	4b14      	ldr	r3, [pc, #80]	@ (8005574 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a13      	ldr	r2, [pc, #76]	@ (8005574 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005526:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800552a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800552c:	f7fd fbdc 	bl	8002ce8 <HAL_GetTick>
 8005530:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005532:	e009      	b.n	8005548 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005534:	f7fd fbd8 	bl	8002ce8 <HAL_GetTick>
 8005538:	4602      	mov	r2, r0
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	2b02      	cmp	r3, #2
 8005540:	d902      	bls.n	8005548 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005542:	2303      	movs	r3, #3
 8005544:	73fb      	strb	r3, [r7, #15]
          break;
 8005546:	e005      	b.n	8005554 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005548:	4b0a      	ldr	r3, [pc, #40]	@ (8005574 <RCCEx_PLLSAI2_Config+0x1b8>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005550:	2b00      	cmp	r3, #0
 8005552:	d0ef      	beq.n	8005534 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005554:	7bfb      	ldrb	r3, [r7, #15]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d106      	bne.n	8005568 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800555a:	4b06      	ldr	r3, [pc, #24]	@ (8005574 <RCCEx_PLLSAI2_Config+0x1b8>)
 800555c:	695a      	ldr	r2, [r3, #20]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	695b      	ldr	r3, [r3, #20]
 8005562:	4904      	ldr	r1, [pc, #16]	@ (8005574 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005564:	4313      	orrs	r3, r2
 8005566:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005568:	7bfb      	ldrb	r3, [r7, #15]
}
 800556a:	4618      	mov	r0, r3
 800556c:	3710      	adds	r7, #16
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	40021000 	.word	0x40021000

08005578 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d101      	bne.n	800558a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e049      	b.n	800561e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005590:	b2db      	uxtb	r3, r3
 8005592:	2b00      	cmp	r3, #0
 8005594:	d106      	bne.n	80055a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f7fd f8a2 	bl	80026e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2202      	movs	r2, #2
 80055a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	3304      	adds	r3, #4
 80055b4:	4619      	mov	r1, r3
 80055b6:	4610      	mov	r0, r2
 80055b8:	f000 fcfa 	bl	8005fb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3708      	adds	r7, #8
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}

08005626 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005626:	b580      	push	{r7, lr}
 8005628:	b082      	sub	sp, #8
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d101      	bne.n	8005638 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	e049      	b.n	80056cc <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800563e:	b2db      	uxtb	r3, r3
 8005640:	2b00      	cmp	r3, #0
 8005642:	d106      	bne.n	8005652 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f000 f841 	bl	80056d4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2202      	movs	r2, #2
 8005656:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	3304      	adds	r3, #4
 8005662:	4619      	mov	r1, r3
 8005664:	4610      	mov	r0, r2
 8005666:	f000 fca3 	bl	8005fb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2201      	movs	r2, #1
 800566e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2201      	movs	r2, #1
 8005676:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2201      	movs	r2, #1
 800567e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2201      	movs	r2, #1
 8005686:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2201      	movs	r2, #1
 800568e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2201      	movs	r2, #1
 8005696:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2201      	movs	r2, #1
 800569e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2201      	movs	r2, #1
 80056a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2201      	movs	r2, #1
 80056ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2201      	movs	r2, #1
 80056b6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2201      	movs	r2, #1
 80056be:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2201      	movs	r2, #1
 80056c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80056ca:	2300      	movs	r3, #0
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3708      	adds	r7, #8
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}

080056d4 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80056dc:	bf00      	nop
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056f2:	2300      	movs	r3, #0
 80056f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d104      	bne.n	8005706 <HAL_TIM_IC_Start_IT+0x1e>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005702:	b2db      	uxtb	r3, r3
 8005704:	e023      	b.n	800574e <HAL_TIM_IC_Start_IT+0x66>
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	2b04      	cmp	r3, #4
 800570a:	d104      	bne.n	8005716 <HAL_TIM_IC_Start_IT+0x2e>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005712:	b2db      	uxtb	r3, r3
 8005714:	e01b      	b.n	800574e <HAL_TIM_IC_Start_IT+0x66>
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	2b08      	cmp	r3, #8
 800571a:	d104      	bne.n	8005726 <HAL_TIM_IC_Start_IT+0x3e>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005722:	b2db      	uxtb	r3, r3
 8005724:	e013      	b.n	800574e <HAL_TIM_IC_Start_IT+0x66>
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	2b0c      	cmp	r3, #12
 800572a:	d104      	bne.n	8005736 <HAL_TIM_IC_Start_IT+0x4e>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005732:	b2db      	uxtb	r3, r3
 8005734:	e00b      	b.n	800574e <HAL_TIM_IC_Start_IT+0x66>
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	2b10      	cmp	r3, #16
 800573a:	d104      	bne.n	8005746 <HAL_TIM_IC_Start_IT+0x5e>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005742:	b2db      	uxtb	r3, r3
 8005744:	e003      	b.n	800574e <HAL_TIM_IC_Start_IT+0x66>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800574c:	b2db      	uxtb	r3, r3
 800574e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d104      	bne.n	8005760 <HAL_TIM_IC_Start_IT+0x78>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800575c:	b2db      	uxtb	r3, r3
 800575e:	e013      	b.n	8005788 <HAL_TIM_IC_Start_IT+0xa0>
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	2b04      	cmp	r3, #4
 8005764:	d104      	bne.n	8005770 <HAL_TIM_IC_Start_IT+0x88>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800576c:	b2db      	uxtb	r3, r3
 800576e:	e00b      	b.n	8005788 <HAL_TIM_IC_Start_IT+0xa0>
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	2b08      	cmp	r3, #8
 8005774:	d104      	bne.n	8005780 <HAL_TIM_IC_Start_IT+0x98>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800577c:	b2db      	uxtb	r3, r3
 800577e:	e003      	b.n	8005788 <HAL_TIM_IC_Start_IT+0xa0>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8005786:	b2db      	uxtb	r3, r3
 8005788:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800578a:	7bbb      	ldrb	r3, [r7, #14]
 800578c:	2b01      	cmp	r3, #1
 800578e:	d102      	bne.n	8005796 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005790:	7b7b      	ldrb	r3, [r7, #13]
 8005792:	2b01      	cmp	r3, #1
 8005794:	d001      	beq.n	800579a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e0dd      	b.n	8005956 <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d104      	bne.n	80057aa <HAL_TIM_IC_Start_IT+0xc2>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2202      	movs	r2, #2
 80057a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80057a8:	e023      	b.n	80057f2 <HAL_TIM_IC_Start_IT+0x10a>
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	2b04      	cmp	r3, #4
 80057ae:	d104      	bne.n	80057ba <HAL_TIM_IC_Start_IT+0xd2>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2202      	movs	r2, #2
 80057b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80057b8:	e01b      	b.n	80057f2 <HAL_TIM_IC_Start_IT+0x10a>
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	2b08      	cmp	r3, #8
 80057be:	d104      	bne.n	80057ca <HAL_TIM_IC_Start_IT+0xe2>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2202      	movs	r2, #2
 80057c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80057c8:	e013      	b.n	80057f2 <HAL_TIM_IC_Start_IT+0x10a>
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	2b0c      	cmp	r3, #12
 80057ce:	d104      	bne.n	80057da <HAL_TIM_IC_Start_IT+0xf2>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2202      	movs	r2, #2
 80057d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80057d8:	e00b      	b.n	80057f2 <HAL_TIM_IC_Start_IT+0x10a>
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	2b10      	cmp	r3, #16
 80057de:	d104      	bne.n	80057ea <HAL_TIM_IC_Start_IT+0x102>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2202      	movs	r2, #2
 80057e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80057e8:	e003      	b.n	80057f2 <HAL_TIM_IC_Start_IT+0x10a>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2202      	movs	r2, #2
 80057ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d104      	bne.n	8005802 <HAL_TIM_IC_Start_IT+0x11a>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2202      	movs	r2, #2
 80057fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005800:	e013      	b.n	800582a <HAL_TIM_IC_Start_IT+0x142>
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	2b04      	cmp	r3, #4
 8005806:	d104      	bne.n	8005812 <HAL_TIM_IC_Start_IT+0x12a>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2202      	movs	r2, #2
 800580c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005810:	e00b      	b.n	800582a <HAL_TIM_IC_Start_IT+0x142>
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	2b08      	cmp	r3, #8
 8005816:	d104      	bne.n	8005822 <HAL_TIM_IC_Start_IT+0x13a>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2202      	movs	r2, #2
 800581c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005820:	e003      	b.n	800582a <HAL_TIM_IC_Start_IT+0x142>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2202      	movs	r2, #2
 8005826:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	2b0c      	cmp	r3, #12
 800582e:	d841      	bhi.n	80058b4 <HAL_TIM_IC_Start_IT+0x1cc>
 8005830:	a201      	add	r2, pc, #4	@ (adr r2, 8005838 <HAL_TIM_IC_Start_IT+0x150>)
 8005832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005836:	bf00      	nop
 8005838:	0800586d 	.word	0x0800586d
 800583c:	080058b5 	.word	0x080058b5
 8005840:	080058b5 	.word	0x080058b5
 8005844:	080058b5 	.word	0x080058b5
 8005848:	0800587f 	.word	0x0800587f
 800584c:	080058b5 	.word	0x080058b5
 8005850:	080058b5 	.word	0x080058b5
 8005854:	080058b5 	.word	0x080058b5
 8005858:	08005891 	.word	0x08005891
 800585c:	080058b5 	.word	0x080058b5
 8005860:	080058b5 	.word	0x080058b5
 8005864:	080058b5 	.word	0x080058b5
 8005868:	080058a3 	.word	0x080058a3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	68da      	ldr	r2, [r3, #12]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f042 0202 	orr.w	r2, r2, #2
 800587a:	60da      	str	r2, [r3, #12]
      break;
 800587c:	e01d      	b.n	80058ba <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	68da      	ldr	r2, [r3, #12]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f042 0204 	orr.w	r2, r2, #4
 800588c:	60da      	str	r2, [r3, #12]
      break;
 800588e:	e014      	b.n	80058ba <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	68da      	ldr	r2, [r3, #12]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f042 0208 	orr.w	r2, r2, #8
 800589e:	60da      	str	r2, [r3, #12]
      break;
 80058a0:	e00b      	b.n	80058ba <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	68da      	ldr	r2, [r3, #12]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f042 0210 	orr.w	r2, r2, #16
 80058b0:	60da      	str	r2, [r3, #12]
      break;
 80058b2:	e002      	b.n	80058ba <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	73fb      	strb	r3, [r7, #15]
      break;
 80058b8:	bf00      	nop
  }

  if (status == HAL_OK)
 80058ba:	7bfb      	ldrb	r3, [r7, #15]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d149      	bne.n	8005954 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	2201      	movs	r2, #1
 80058c6:	6839      	ldr	r1, [r7, #0]
 80058c8:	4618      	mov	r0, r3
 80058ca:	f000 fe69 	bl	80065a0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a23      	ldr	r2, [pc, #140]	@ (8005960 <HAL_TIM_IC_Start_IT+0x278>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d01d      	beq.n	8005914 <HAL_TIM_IC_Start_IT+0x22c>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058e0:	d018      	beq.n	8005914 <HAL_TIM_IC_Start_IT+0x22c>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a1f      	ldr	r2, [pc, #124]	@ (8005964 <HAL_TIM_IC_Start_IT+0x27c>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d013      	beq.n	8005914 <HAL_TIM_IC_Start_IT+0x22c>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a1d      	ldr	r2, [pc, #116]	@ (8005968 <HAL_TIM_IC_Start_IT+0x280>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d00e      	beq.n	8005914 <HAL_TIM_IC_Start_IT+0x22c>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a1c      	ldr	r2, [pc, #112]	@ (800596c <HAL_TIM_IC_Start_IT+0x284>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d009      	beq.n	8005914 <HAL_TIM_IC_Start_IT+0x22c>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a1a      	ldr	r2, [pc, #104]	@ (8005970 <HAL_TIM_IC_Start_IT+0x288>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d004      	beq.n	8005914 <HAL_TIM_IC_Start_IT+0x22c>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a19      	ldr	r2, [pc, #100]	@ (8005974 <HAL_TIM_IC_Start_IT+0x28c>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d115      	bne.n	8005940 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	689a      	ldr	r2, [r3, #8]
 800591a:	4b17      	ldr	r3, [pc, #92]	@ (8005978 <HAL_TIM_IC_Start_IT+0x290>)
 800591c:	4013      	ands	r3, r2
 800591e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	2b06      	cmp	r3, #6
 8005924:	d015      	beq.n	8005952 <HAL_TIM_IC_Start_IT+0x26a>
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800592c:	d011      	beq.n	8005952 <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f042 0201 	orr.w	r2, r2, #1
 800593c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800593e:	e008      	b.n	8005952 <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f042 0201 	orr.w	r2, r2, #1
 800594e:	601a      	str	r2, [r3, #0]
 8005950:	e000      	b.n	8005954 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005952:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8005954:	7bfb      	ldrb	r3, [r7, #15]
}
 8005956:	4618      	mov	r0, r3
 8005958:	3710      	adds	r7, #16
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
 800595e:	bf00      	nop
 8005960:	40012c00 	.word	0x40012c00
 8005964:	40000400 	.word	0x40000400
 8005968:	40000800 	.word	0x40000800
 800596c:	40000c00 	.word	0x40000c00
 8005970:	40013400 	.word	0x40013400
 8005974:	40014000 	.word	0x40014000
 8005978:	00010007 	.word	0x00010007

0800597c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	691b      	ldr	r3, [r3, #16]
 8005992:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	f003 0302 	and.w	r3, r3, #2
 800599a:	2b00      	cmp	r3, #0
 800599c:	d020      	beq.n	80059e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	f003 0302 	and.w	r3, r3, #2
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d01b      	beq.n	80059e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f06f 0202 	mvn.w	r2, #2
 80059b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2201      	movs	r2, #1
 80059b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	699b      	ldr	r3, [r3, #24]
 80059be:	f003 0303 	and.w	r3, r3, #3
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d003      	beq.n	80059ce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f7fc fd6a 	bl	80024a0 <HAL_TIM_IC_CaptureCallback>
 80059cc:	e005      	b.n	80059da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 fad0 	bl	8005f74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f000 fad7 	bl	8005f88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	f003 0304 	and.w	r3, r3, #4
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d020      	beq.n	8005a2c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f003 0304 	and.w	r3, r3, #4
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d01b      	beq.n	8005a2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f06f 0204 	mvn.w	r2, #4
 80059fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2202      	movs	r2, #2
 8005a02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	699b      	ldr	r3, [r3, #24]
 8005a0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d003      	beq.n	8005a1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f7fc fd44 	bl	80024a0 <HAL_TIM_IC_CaptureCallback>
 8005a18:	e005      	b.n	8005a26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 faaa 	bl	8005f74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f000 fab1 	bl	8005f88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	f003 0308 	and.w	r3, r3, #8
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d020      	beq.n	8005a78 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f003 0308 	and.w	r3, r3, #8
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d01b      	beq.n	8005a78 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f06f 0208 	mvn.w	r2, #8
 8005a48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2204      	movs	r2, #4
 8005a4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	69db      	ldr	r3, [r3, #28]
 8005a56:	f003 0303 	and.w	r3, r3, #3
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d003      	beq.n	8005a66 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f7fc fd1e 	bl	80024a0 <HAL_TIM_IC_CaptureCallback>
 8005a64:	e005      	b.n	8005a72 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 fa84 	bl	8005f74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f000 fa8b 	bl	8005f88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	f003 0310 	and.w	r3, r3, #16
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d020      	beq.n	8005ac4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f003 0310 	and.w	r3, r3, #16
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d01b      	beq.n	8005ac4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f06f 0210 	mvn.w	r2, #16
 8005a94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2208      	movs	r2, #8
 8005a9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	69db      	ldr	r3, [r3, #28]
 8005aa2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d003      	beq.n	8005ab2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f7fc fcf8 	bl	80024a0 <HAL_TIM_IC_CaptureCallback>
 8005ab0:	e005      	b.n	8005abe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 fa5e 	bl	8005f74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f000 fa65 	bl	8005f88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	f003 0301 	and.w	r3, r3, #1
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d00c      	beq.n	8005ae8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f003 0301 	and.w	r3, r3, #1
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d007      	beq.n	8005ae8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f06f 0201 	mvn.w	r2, #1
 8005ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 fa3c 	bl	8005f60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d104      	bne.n	8005afc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d00c      	beq.n	8005b16 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d007      	beq.n	8005b16 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005b0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f000 fdfd 	bl	8006710 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d00c      	beq.n	8005b3a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d007      	beq.n	8005b3a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005b32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 fdf5 	bl	8006724 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d00c      	beq.n	8005b5e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d007      	beq.n	8005b5e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005b56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f000 fa1f 	bl	8005f9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	f003 0320 	and.w	r3, r3, #32
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d00c      	beq.n	8005b82 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f003 0320 	and.w	r3, r3, #32
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d007      	beq.n	8005b82 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f06f 0220 	mvn.w	r2, #32
 8005b7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 fdbd 	bl	80066fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b82:	bf00      	nop
 8005b84:	3710      	adds	r7, #16
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}

08005b8a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005b8a:	b580      	push	{r7, lr}
 8005b8c:	b086      	sub	sp, #24
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	60f8      	str	r0, [r7, #12]
 8005b92:	60b9      	str	r1, [r7, #8]
 8005b94:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b96:	2300      	movs	r3, #0
 8005b98:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d101      	bne.n	8005ba8 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005ba4:	2302      	movs	r3, #2
 8005ba6:	e088      	b.n	8005cba <HAL_TIM_IC_ConfigChannel+0x130>
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d11b      	bne.n	8005bee <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005bc6:	f000 fb2d 	bl	8006224 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	699a      	ldr	r2, [r3, #24]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f022 020c 	bic.w	r2, r2, #12
 8005bd8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	6999      	ldr	r1, [r3, #24]
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	689a      	ldr	r2, [r3, #8]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	430a      	orrs	r2, r1
 8005bea:	619a      	str	r2, [r3, #24]
 8005bec:	e060      	b.n	8005cb0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2b04      	cmp	r3, #4
 8005bf2:	d11c      	bne.n	8005c2e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005c04:	f000 fbab 	bl	800635e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	699a      	ldr	r2, [r3, #24]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005c16:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	6999      	ldr	r1, [r3, #24]
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	021a      	lsls	r2, r3, #8
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	430a      	orrs	r2, r1
 8005c2a:	619a      	str	r2, [r3, #24]
 8005c2c:	e040      	b.n	8005cb0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2b08      	cmp	r3, #8
 8005c32:	d11b      	bne.n	8005c6c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005c44:	f000 fbf8 	bl	8006438 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	69da      	ldr	r2, [r3, #28]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f022 020c 	bic.w	r2, r2, #12
 8005c56:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	69d9      	ldr	r1, [r3, #28]
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	689a      	ldr	r2, [r3, #8]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	430a      	orrs	r2, r1
 8005c68:	61da      	str	r2, [r3, #28]
 8005c6a:	e021      	b.n	8005cb0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2b0c      	cmp	r3, #12
 8005c70:	d11c      	bne.n	8005cac <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005c82:	f000 fc15 	bl	80064b0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	69da      	ldr	r2, [r3, #28]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005c94:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	69d9      	ldr	r1, [r3, #28]
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	021a      	lsls	r2, r3, #8
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	430a      	orrs	r2, r1
 8005ca8:	61da      	str	r2, [r3, #28]
 8005caa:	e001      	b.n	8005cb0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005cb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3718      	adds	r7, #24
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}

08005cc2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005cc2:	b580      	push	{r7, lr}
 8005cc4:	b084      	sub	sp, #16
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	6078      	str	r0, [r7, #4]
 8005cca:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d101      	bne.n	8005cde <HAL_TIM_ConfigClockSource+0x1c>
 8005cda:	2302      	movs	r3, #2
 8005cdc:	e0b6      	b.n	8005e4c <HAL_TIM_ConfigClockSource+0x18a>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2202      	movs	r2, #2
 8005cea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005cfc:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005d00:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d08:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	68ba      	ldr	r2, [r7, #8]
 8005d10:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d1a:	d03e      	beq.n	8005d9a <HAL_TIM_ConfigClockSource+0xd8>
 8005d1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d20:	f200 8087 	bhi.w	8005e32 <HAL_TIM_ConfigClockSource+0x170>
 8005d24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d28:	f000 8086 	beq.w	8005e38 <HAL_TIM_ConfigClockSource+0x176>
 8005d2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d30:	d87f      	bhi.n	8005e32 <HAL_TIM_ConfigClockSource+0x170>
 8005d32:	2b70      	cmp	r3, #112	@ 0x70
 8005d34:	d01a      	beq.n	8005d6c <HAL_TIM_ConfigClockSource+0xaa>
 8005d36:	2b70      	cmp	r3, #112	@ 0x70
 8005d38:	d87b      	bhi.n	8005e32 <HAL_TIM_ConfigClockSource+0x170>
 8005d3a:	2b60      	cmp	r3, #96	@ 0x60
 8005d3c:	d050      	beq.n	8005de0 <HAL_TIM_ConfigClockSource+0x11e>
 8005d3e:	2b60      	cmp	r3, #96	@ 0x60
 8005d40:	d877      	bhi.n	8005e32 <HAL_TIM_ConfigClockSource+0x170>
 8005d42:	2b50      	cmp	r3, #80	@ 0x50
 8005d44:	d03c      	beq.n	8005dc0 <HAL_TIM_ConfigClockSource+0xfe>
 8005d46:	2b50      	cmp	r3, #80	@ 0x50
 8005d48:	d873      	bhi.n	8005e32 <HAL_TIM_ConfigClockSource+0x170>
 8005d4a:	2b40      	cmp	r3, #64	@ 0x40
 8005d4c:	d058      	beq.n	8005e00 <HAL_TIM_ConfigClockSource+0x13e>
 8005d4e:	2b40      	cmp	r3, #64	@ 0x40
 8005d50:	d86f      	bhi.n	8005e32 <HAL_TIM_ConfigClockSource+0x170>
 8005d52:	2b30      	cmp	r3, #48	@ 0x30
 8005d54:	d064      	beq.n	8005e20 <HAL_TIM_ConfigClockSource+0x15e>
 8005d56:	2b30      	cmp	r3, #48	@ 0x30
 8005d58:	d86b      	bhi.n	8005e32 <HAL_TIM_ConfigClockSource+0x170>
 8005d5a:	2b20      	cmp	r3, #32
 8005d5c:	d060      	beq.n	8005e20 <HAL_TIM_ConfigClockSource+0x15e>
 8005d5e:	2b20      	cmp	r3, #32
 8005d60:	d867      	bhi.n	8005e32 <HAL_TIM_ConfigClockSource+0x170>
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d05c      	beq.n	8005e20 <HAL_TIM_ConfigClockSource+0x15e>
 8005d66:	2b10      	cmp	r3, #16
 8005d68:	d05a      	beq.n	8005e20 <HAL_TIM_ConfigClockSource+0x15e>
 8005d6a:	e062      	b.n	8005e32 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d7c:	f000 fbf0 	bl	8006560 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005d8e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	68ba      	ldr	r2, [r7, #8]
 8005d96:	609a      	str	r2, [r3, #8]
      break;
 8005d98:	e04f      	b.n	8005e3a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005daa:	f000 fbd9 	bl	8006560 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	689a      	ldr	r2, [r3, #8]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005dbc:	609a      	str	r2, [r3, #8]
      break;
 8005dbe:	e03c      	b.n	8005e3a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dcc:	461a      	mov	r2, r3
 8005dce:	f000 fa97 	bl	8006300 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	2150      	movs	r1, #80	@ 0x50
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f000 fba6 	bl	800652a <TIM_ITRx_SetConfig>
      break;
 8005dde:	e02c      	b.n	8005e3a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005dec:	461a      	mov	r2, r3
 8005dee:	f000 faf3 	bl	80063d8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	2160      	movs	r1, #96	@ 0x60
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f000 fb96 	bl	800652a <TIM_ITRx_SetConfig>
      break;
 8005dfe:	e01c      	b.n	8005e3a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	f000 fa77 	bl	8006300 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2140      	movs	r1, #64	@ 0x40
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f000 fb86 	bl	800652a <TIM_ITRx_SetConfig>
      break;
 8005e1e:	e00c      	b.n	8005e3a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4619      	mov	r1, r3
 8005e2a:	4610      	mov	r0, r2
 8005e2c:	f000 fb7d 	bl	800652a <TIM_ITRx_SetConfig>
      break;
 8005e30:	e003      	b.n	8005e3a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	73fb      	strb	r3, [r7, #15]
      break;
 8005e36:	e000      	b.n	8005e3a <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005e38:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3710      	adds	r7, #16
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b082      	sub	sp, #8
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d101      	bne.n	8005e6c <HAL_TIM_SlaveConfigSynchro+0x18>
 8005e68:	2302      	movs	r3, #2
 8005e6a:	e031      	b.n	8005ed0 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2202      	movs	r2, #2
 8005e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005e7c:	6839      	ldr	r1, [r7, #0]
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 f93c 	bl	80060fc <TIM_SlaveTimer_SetConfig>
 8005e84:	4603      	mov	r3, r0
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d009      	beq.n	8005e9e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e018      	b.n	8005ed0 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	68da      	ldr	r2, [r3, #12]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005eac:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	68da      	ldr	r2, [r3, #12]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005ebc:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005ece:	2300      	movs	r3, #0
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3708      	adds	r7, #8
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}

08005ed8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b085      	sub	sp, #20
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	2b0c      	cmp	r3, #12
 8005eea:	d831      	bhi.n	8005f50 <HAL_TIM_ReadCapturedValue+0x78>
 8005eec:	a201      	add	r2, pc, #4	@ (adr r2, 8005ef4 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef2:	bf00      	nop
 8005ef4:	08005f29 	.word	0x08005f29
 8005ef8:	08005f51 	.word	0x08005f51
 8005efc:	08005f51 	.word	0x08005f51
 8005f00:	08005f51 	.word	0x08005f51
 8005f04:	08005f33 	.word	0x08005f33
 8005f08:	08005f51 	.word	0x08005f51
 8005f0c:	08005f51 	.word	0x08005f51
 8005f10:	08005f51 	.word	0x08005f51
 8005f14:	08005f3d 	.word	0x08005f3d
 8005f18:	08005f51 	.word	0x08005f51
 8005f1c:	08005f51 	.word	0x08005f51
 8005f20:	08005f51 	.word	0x08005f51
 8005f24:	08005f47 	.word	0x08005f47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f2e:	60fb      	str	r3, [r7, #12]

      break;
 8005f30:	e00f      	b.n	8005f52 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f38:	60fb      	str	r3, [r7, #12]

      break;
 8005f3a:	e00a      	b.n	8005f52 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f42:	60fb      	str	r3, [r7, #12]

      break;
 8005f44:	e005      	b.n	8005f52 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f4c:	60fb      	str	r3, [r7, #12]

      break;
 8005f4e:	e000      	b.n	8005f52 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005f50:	bf00      	nop
  }

  return tmpreg;
 8005f52:	68fb      	ldr	r3, [r7, #12]
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3714      	adds	r7, #20
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b083      	sub	sp, #12
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005f68:	bf00      	nop
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f7c:	bf00      	nop
 8005f7e:	370c      	adds	r7, #12
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f90:	bf00      	nop
 8005f92:	370c      	adds	r7, #12
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005fa4:	bf00      	nop
 8005fa6:	370c      	adds	r7, #12
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b085      	sub	sp, #20
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4a46      	ldr	r2, [pc, #280]	@ (80060dc <TIM_Base_SetConfig+0x12c>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d013      	beq.n	8005ff0 <TIM_Base_SetConfig+0x40>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fce:	d00f      	beq.n	8005ff0 <TIM_Base_SetConfig+0x40>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a43      	ldr	r2, [pc, #268]	@ (80060e0 <TIM_Base_SetConfig+0x130>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d00b      	beq.n	8005ff0 <TIM_Base_SetConfig+0x40>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4a42      	ldr	r2, [pc, #264]	@ (80060e4 <TIM_Base_SetConfig+0x134>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d007      	beq.n	8005ff0 <TIM_Base_SetConfig+0x40>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4a41      	ldr	r2, [pc, #260]	@ (80060e8 <TIM_Base_SetConfig+0x138>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d003      	beq.n	8005ff0 <TIM_Base_SetConfig+0x40>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4a40      	ldr	r2, [pc, #256]	@ (80060ec <TIM_Base_SetConfig+0x13c>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d108      	bne.n	8006002 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ff6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	68fa      	ldr	r2, [r7, #12]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4a35      	ldr	r2, [pc, #212]	@ (80060dc <TIM_Base_SetConfig+0x12c>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d01f      	beq.n	800604a <TIM_Base_SetConfig+0x9a>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006010:	d01b      	beq.n	800604a <TIM_Base_SetConfig+0x9a>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4a32      	ldr	r2, [pc, #200]	@ (80060e0 <TIM_Base_SetConfig+0x130>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d017      	beq.n	800604a <TIM_Base_SetConfig+0x9a>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a31      	ldr	r2, [pc, #196]	@ (80060e4 <TIM_Base_SetConfig+0x134>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d013      	beq.n	800604a <TIM_Base_SetConfig+0x9a>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a30      	ldr	r2, [pc, #192]	@ (80060e8 <TIM_Base_SetConfig+0x138>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d00f      	beq.n	800604a <TIM_Base_SetConfig+0x9a>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a2f      	ldr	r2, [pc, #188]	@ (80060ec <TIM_Base_SetConfig+0x13c>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d00b      	beq.n	800604a <TIM_Base_SetConfig+0x9a>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a2e      	ldr	r2, [pc, #184]	@ (80060f0 <TIM_Base_SetConfig+0x140>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d007      	beq.n	800604a <TIM_Base_SetConfig+0x9a>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a2d      	ldr	r2, [pc, #180]	@ (80060f4 <TIM_Base_SetConfig+0x144>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d003      	beq.n	800604a <TIM_Base_SetConfig+0x9a>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a2c      	ldr	r2, [pc, #176]	@ (80060f8 <TIM_Base_SetConfig+0x148>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d108      	bne.n	800605c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006050:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	4313      	orrs	r3, r2
 800605a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	695b      	ldr	r3, [r3, #20]
 8006066:	4313      	orrs	r3, r2
 8006068:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	68fa      	ldr	r2, [r7, #12]
 800606e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	689a      	ldr	r2, [r3, #8]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4a16      	ldr	r2, [pc, #88]	@ (80060dc <TIM_Base_SetConfig+0x12c>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d00f      	beq.n	80060a8 <TIM_Base_SetConfig+0xf8>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4a18      	ldr	r2, [pc, #96]	@ (80060ec <TIM_Base_SetConfig+0x13c>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d00b      	beq.n	80060a8 <TIM_Base_SetConfig+0xf8>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	4a17      	ldr	r2, [pc, #92]	@ (80060f0 <TIM_Base_SetConfig+0x140>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d007      	beq.n	80060a8 <TIM_Base_SetConfig+0xf8>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	4a16      	ldr	r2, [pc, #88]	@ (80060f4 <TIM_Base_SetConfig+0x144>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d003      	beq.n	80060a8 <TIM_Base_SetConfig+0xf8>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	4a15      	ldr	r2, [pc, #84]	@ (80060f8 <TIM_Base_SetConfig+0x148>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d103      	bne.n	80060b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	691a      	ldr	r2, [r3, #16]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2201      	movs	r2, #1
 80060b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	f003 0301 	and.w	r3, r3, #1
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d105      	bne.n	80060ce <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	f023 0201 	bic.w	r2, r3, #1
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	611a      	str	r2, [r3, #16]
  }
}
 80060ce:	bf00      	nop
 80060d0:	3714      	adds	r7, #20
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop
 80060dc:	40012c00 	.word	0x40012c00
 80060e0:	40000400 	.word	0x40000400
 80060e4:	40000800 	.word	0x40000800
 80060e8:	40000c00 	.word	0x40000c00
 80060ec:	40013400 	.word	0x40013400
 80060f0:	40014000 	.word	0x40014000
 80060f4:	40014400 	.word	0x40014400
 80060f8:	40014800 	.word	0x40014800

080060fc <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b086      	sub	sp, #24
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006106:	2300      	movs	r3, #0
 8006108:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006118:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	693a      	ldr	r2, [r7, #16]
 8006120:	4313      	orrs	r3, r2
 8006122:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800612a:	f023 0307 	bic.w	r3, r3, #7
 800612e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	693a      	ldr	r2, [r7, #16]
 8006136:	4313      	orrs	r3, r2
 8006138:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	693a      	ldr	r2, [r7, #16]
 8006140:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	2b70      	cmp	r3, #112	@ 0x70
 8006148:	d01a      	beq.n	8006180 <TIM_SlaveTimer_SetConfig+0x84>
 800614a:	2b70      	cmp	r3, #112	@ 0x70
 800614c:	d860      	bhi.n	8006210 <TIM_SlaveTimer_SetConfig+0x114>
 800614e:	2b60      	cmp	r3, #96	@ 0x60
 8006150:	d054      	beq.n	80061fc <TIM_SlaveTimer_SetConfig+0x100>
 8006152:	2b60      	cmp	r3, #96	@ 0x60
 8006154:	d85c      	bhi.n	8006210 <TIM_SlaveTimer_SetConfig+0x114>
 8006156:	2b50      	cmp	r3, #80	@ 0x50
 8006158:	d046      	beq.n	80061e8 <TIM_SlaveTimer_SetConfig+0xec>
 800615a:	2b50      	cmp	r3, #80	@ 0x50
 800615c:	d858      	bhi.n	8006210 <TIM_SlaveTimer_SetConfig+0x114>
 800615e:	2b40      	cmp	r3, #64	@ 0x40
 8006160:	d019      	beq.n	8006196 <TIM_SlaveTimer_SetConfig+0x9a>
 8006162:	2b40      	cmp	r3, #64	@ 0x40
 8006164:	d854      	bhi.n	8006210 <TIM_SlaveTimer_SetConfig+0x114>
 8006166:	2b30      	cmp	r3, #48	@ 0x30
 8006168:	d055      	beq.n	8006216 <TIM_SlaveTimer_SetConfig+0x11a>
 800616a:	2b30      	cmp	r3, #48	@ 0x30
 800616c:	d850      	bhi.n	8006210 <TIM_SlaveTimer_SetConfig+0x114>
 800616e:	2b20      	cmp	r3, #32
 8006170:	d051      	beq.n	8006216 <TIM_SlaveTimer_SetConfig+0x11a>
 8006172:	2b20      	cmp	r3, #32
 8006174:	d84c      	bhi.n	8006210 <TIM_SlaveTimer_SetConfig+0x114>
 8006176:	2b00      	cmp	r3, #0
 8006178:	d04d      	beq.n	8006216 <TIM_SlaveTimer_SetConfig+0x11a>
 800617a:	2b10      	cmp	r3, #16
 800617c:	d04b      	beq.n	8006216 <TIM_SlaveTimer_SetConfig+0x11a>
 800617e:	e047      	b.n	8006210 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8006190:	f000 f9e6 	bl	8006560 <TIM_ETR_SetConfig>
      break;
 8006194:	e040      	b.n	8006218 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	2b05      	cmp	r3, #5
 800619c:	d101      	bne.n	80061a2 <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	e03b      	b.n	800621a <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	6a1b      	ldr	r3, [r3, #32]
 80061a8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	6a1a      	ldr	r2, [r3, #32]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f022 0201 	bic.w	r2, r2, #1
 80061b8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	699b      	ldr	r3, [r3, #24]
 80061c0:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80061c8:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	011b      	lsls	r3, r3, #4
 80061d0:	68ba      	ldr	r2, [r7, #8]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	68ba      	ldr	r2, [r7, #8]
 80061dc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	68fa      	ldr	r2, [r7, #12]
 80061e4:	621a      	str	r2, [r3, #32]
      break;
 80061e6:	e017      	b.n	8006218 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061f4:	461a      	mov	r2, r3
 80061f6:	f000 f883 	bl	8006300 <TIM_TI1_ConfigInputStage>
      break;
 80061fa:	e00d      	b.n	8006218 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006208:	461a      	mov	r2, r3
 800620a:	f000 f8e5 	bl	80063d8 <TIM_TI2_ConfigInputStage>
      break;
 800620e:	e003      	b.n	8006218 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	75fb      	strb	r3, [r7, #23]
      break;
 8006214:	e000      	b.n	8006218 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 8006216:	bf00      	nop
  }

  return status;
 8006218:	7dfb      	ldrb	r3, [r7, #23]
}
 800621a:	4618      	mov	r0, r3
 800621c:	3718      	adds	r7, #24
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
	...

08006224 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006224:	b480      	push	{r7}
 8006226:	b087      	sub	sp, #28
 8006228:	af00      	add	r7, sp, #0
 800622a:	60f8      	str	r0, [r7, #12]
 800622c:	60b9      	str	r1, [r7, #8]
 800622e:	607a      	str	r2, [r7, #4]
 8006230:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	6a1b      	ldr	r3, [r3, #32]
 8006236:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6a1b      	ldr	r3, [r3, #32]
 800623c:	f023 0201 	bic.w	r2, r3, #1
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	699b      	ldr	r3, [r3, #24]
 8006248:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	4a26      	ldr	r2, [pc, #152]	@ (80062e8 <TIM_TI1_SetConfig+0xc4>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d017      	beq.n	8006282 <TIM_TI1_SetConfig+0x5e>
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006258:	d013      	beq.n	8006282 <TIM_TI1_SetConfig+0x5e>
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	4a23      	ldr	r2, [pc, #140]	@ (80062ec <TIM_TI1_SetConfig+0xc8>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d00f      	beq.n	8006282 <TIM_TI1_SetConfig+0x5e>
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	4a22      	ldr	r2, [pc, #136]	@ (80062f0 <TIM_TI1_SetConfig+0xcc>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d00b      	beq.n	8006282 <TIM_TI1_SetConfig+0x5e>
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	4a21      	ldr	r2, [pc, #132]	@ (80062f4 <TIM_TI1_SetConfig+0xd0>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d007      	beq.n	8006282 <TIM_TI1_SetConfig+0x5e>
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	4a20      	ldr	r2, [pc, #128]	@ (80062f8 <TIM_TI1_SetConfig+0xd4>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d003      	beq.n	8006282 <TIM_TI1_SetConfig+0x5e>
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	4a1f      	ldr	r2, [pc, #124]	@ (80062fc <TIM_TI1_SetConfig+0xd8>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d101      	bne.n	8006286 <TIM_TI1_SetConfig+0x62>
 8006282:	2301      	movs	r3, #1
 8006284:	e000      	b.n	8006288 <TIM_TI1_SetConfig+0x64>
 8006286:	2300      	movs	r3, #0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d008      	beq.n	800629e <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	f023 0303 	bic.w	r3, r3, #3
 8006292:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006294:	697a      	ldr	r2, [r7, #20]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4313      	orrs	r3, r2
 800629a:	617b      	str	r3, [r7, #20]
 800629c:	e003      	b.n	80062a6 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	f043 0301 	orr.w	r3, r3, #1
 80062a4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80062ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	011b      	lsls	r3, r3, #4
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	697a      	ldr	r2, [r7, #20]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	f023 030a 	bic.w	r3, r3, #10
 80062c0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	f003 030a 	and.w	r3, r3, #10
 80062c8:	693a      	ldr	r2, [r7, #16]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	697a      	ldr	r2, [r7, #20]
 80062d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	693a      	ldr	r2, [r7, #16]
 80062d8:	621a      	str	r2, [r3, #32]
}
 80062da:	bf00      	nop
 80062dc:	371c      	adds	r7, #28
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr
 80062e6:	bf00      	nop
 80062e8:	40012c00 	.word	0x40012c00
 80062ec:	40000400 	.word	0x40000400
 80062f0:	40000800 	.word	0x40000800
 80062f4:	40000c00 	.word	0x40000c00
 80062f8:	40013400 	.word	0x40013400
 80062fc:	40014000 	.word	0x40014000

08006300 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006300:	b480      	push	{r7}
 8006302:	b087      	sub	sp, #28
 8006304:	af00      	add	r7, sp, #0
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	60b9      	str	r1, [r7, #8]
 800630a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	6a1b      	ldr	r3, [r3, #32]
 8006310:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6a1b      	ldr	r3, [r3, #32]
 8006316:	f023 0201 	bic.w	r2, r3, #1
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	699b      	ldr	r3, [r3, #24]
 8006322:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800632a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	011b      	lsls	r3, r3, #4
 8006330:	693a      	ldr	r2, [r7, #16]
 8006332:	4313      	orrs	r3, r2
 8006334:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	f023 030a 	bic.w	r3, r3, #10
 800633c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800633e:	697a      	ldr	r2, [r7, #20]
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	4313      	orrs	r3, r2
 8006344:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	693a      	ldr	r2, [r7, #16]
 800634a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	697a      	ldr	r2, [r7, #20]
 8006350:	621a      	str	r2, [r3, #32]
}
 8006352:	bf00      	nop
 8006354:	371c      	adds	r7, #28
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr

0800635e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800635e:	b480      	push	{r7}
 8006360:	b087      	sub	sp, #28
 8006362:	af00      	add	r7, sp, #0
 8006364:	60f8      	str	r0, [r7, #12]
 8006366:	60b9      	str	r1, [r7, #8]
 8006368:	607a      	str	r2, [r7, #4]
 800636a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	6a1b      	ldr	r3, [r3, #32]
 8006370:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	6a1b      	ldr	r3, [r3, #32]
 8006376:	f023 0210 	bic.w	r2, r3, #16
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	699b      	ldr	r3, [r3, #24]
 8006382:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800638a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	021b      	lsls	r3, r3, #8
 8006390:	693a      	ldr	r2, [r7, #16]
 8006392:	4313      	orrs	r3, r2
 8006394:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800639c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	031b      	lsls	r3, r3, #12
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	693a      	ldr	r2, [r7, #16]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80063b0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	011b      	lsls	r3, r3, #4
 80063b6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80063ba:	697a      	ldr	r2, [r7, #20]
 80063bc:	4313      	orrs	r3, r2
 80063be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	693a      	ldr	r2, [r7, #16]
 80063c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	697a      	ldr	r2, [r7, #20]
 80063ca:	621a      	str	r2, [r3, #32]
}
 80063cc:	bf00      	nop
 80063ce:	371c      	adds	r7, #28
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063d8:	b480      	push	{r7}
 80063da:	b087      	sub	sp, #28
 80063dc:	af00      	add	r7, sp, #0
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6a1b      	ldr	r3, [r3, #32]
 80063e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6a1b      	ldr	r3, [r3, #32]
 80063ee:	f023 0210 	bic.w	r2, r3, #16
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	699b      	ldr	r3, [r3, #24]
 80063fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006402:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	031b      	lsls	r3, r3, #12
 8006408:	693a      	ldr	r2, [r7, #16]
 800640a:	4313      	orrs	r3, r2
 800640c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006414:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	011b      	lsls	r3, r3, #4
 800641a:	697a      	ldr	r2, [r7, #20]
 800641c:	4313      	orrs	r3, r2
 800641e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	693a      	ldr	r2, [r7, #16]
 8006424:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	697a      	ldr	r2, [r7, #20]
 800642a:	621a      	str	r2, [r3, #32]
}
 800642c:	bf00      	nop
 800642e:	371c      	adds	r7, #28
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006438:	b480      	push	{r7}
 800643a:	b087      	sub	sp, #28
 800643c:	af00      	add	r7, sp, #0
 800643e:	60f8      	str	r0, [r7, #12]
 8006440:	60b9      	str	r1, [r7, #8]
 8006442:	607a      	str	r2, [r7, #4]
 8006444:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	6a1b      	ldr	r3, [r3, #32]
 800644a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6a1b      	ldr	r3, [r3, #32]
 8006450:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	69db      	ldr	r3, [r3, #28]
 800645c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	f023 0303 	bic.w	r3, r3, #3
 8006464:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006466:	693a      	ldr	r2, [r7, #16]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	4313      	orrs	r3, r2
 800646c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006474:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	011b      	lsls	r3, r3, #4
 800647a:	b2db      	uxtb	r3, r3
 800647c:	693a      	ldr	r2, [r7, #16]
 800647e:	4313      	orrs	r3, r2
 8006480:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8006488:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	021b      	lsls	r3, r3, #8
 800648e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8006492:	697a      	ldr	r2, [r7, #20]
 8006494:	4313      	orrs	r3, r2
 8006496:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	693a      	ldr	r2, [r7, #16]
 800649c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	697a      	ldr	r2, [r7, #20]
 80064a2:	621a      	str	r2, [r3, #32]
}
 80064a4:	bf00      	nop
 80064a6:	371c      	adds	r7, #28
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr

080064b0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b087      	sub	sp, #28
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	60b9      	str	r1, [r7, #8]
 80064ba:	607a      	str	r2, [r7, #4]
 80064bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	6a1b      	ldr	r3, [r3, #32]
 80064c2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	6a1b      	ldr	r3, [r3, #32]
 80064c8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	69db      	ldr	r3, [r3, #28]
 80064d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064dc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	021b      	lsls	r3, r3, #8
 80064e2:	693a      	ldr	r2, [r7, #16]
 80064e4:	4313      	orrs	r3, r2
 80064e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80064ee:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	031b      	lsls	r3, r3, #12
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	693a      	ldr	r2, [r7, #16]
 80064f8:	4313      	orrs	r3, r2
 80064fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8006502:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	031b      	lsls	r3, r3, #12
 8006508:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800650c:	697a      	ldr	r2, [r7, #20]
 800650e:	4313      	orrs	r3, r2
 8006510:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	693a      	ldr	r2, [r7, #16]
 8006516:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	697a      	ldr	r2, [r7, #20]
 800651c:	621a      	str	r2, [r3, #32]
}
 800651e:	bf00      	nop
 8006520:	371c      	adds	r7, #28
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr

0800652a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800652a:	b480      	push	{r7}
 800652c:	b085      	sub	sp, #20
 800652e:	af00      	add	r7, sp, #0
 8006530:	6078      	str	r0, [r7, #4]
 8006532:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006540:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006542:	683a      	ldr	r2, [r7, #0]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	4313      	orrs	r3, r2
 8006548:	f043 0307 	orr.w	r3, r3, #7
 800654c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	68fa      	ldr	r2, [r7, #12]
 8006552:	609a      	str	r2, [r3, #8]
}
 8006554:	bf00      	nop
 8006556:	3714      	adds	r7, #20
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006560:	b480      	push	{r7}
 8006562:	b087      	sub	sp, #28
 8006564:	af00      	add	r7, sp, #0
 8006566:	60f8      	str	r0, [r7, #12]
 8006568:	60b9      	str	r1, [r7, #8]
 800656a:	607a      	str	r2, [r7, #4]
 800656c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800657a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	021a      	lsls	r2, r3, #8
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	431a      	orrs	r2, r3
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	4313      	orrs	r3, r2
 8006588:	697a      	ldr	r2, [r7, #20]
 800658a:	4313      	orrs	r3, r2
 800658c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	697a      	ldr	r2, [r7, #20]
 8006592:	609a      	str	r2, [r3, #8]
}
 8006594:	bf00      	nop
 8006596:	371c      	adds	r7, #28
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b087      	sub	sp, #28
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	60f8      	str	r0, [r7, #12]
 80065a8:	60b9      	str	r1, [r7, #8]
 80065aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	f003 031f 	and.w	r3, r3, #31
 80065b2:	2201      	movs	r2, #1
 80065b4:	fa02 f303 	lsl.w	r3, r2, r3
 80065b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	6a1a      	ldr	r2, [r3, #32]
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	43db      	mvns	r3, r3
 80065c2:	401a      	ands	r2, r3
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	6a1a      	ldr	r2, [r3, #32]
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	f003 031f 	and.w	r3, r3, #31
 80065d2:	6879      	ldr	r1, [r7, #4]
 80065d4:	fa01 f303 	lsl.w	r3, r1, r3
 80065d8:	431a      	orrs	r2, r3
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	621a      	str	r2, [r3, #32]
}
 80065de:	bf00      	nop
 80065e0:	371c      	adds	r7, #28
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr
	...

080065ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b085      	sub	sp, #20
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d101      	bne.n	8006604 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006600:	2302      	movs	r3, #2
 8006602:	e068      	b.n	80066d6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2201      	movs	r2, #1
 8006608:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2202      	movs	r2, #2
 8006610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a2e      	ldr	r2, [pc, #184]	@ (80066e4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d004      	beq.n	8006638 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a2d      	ldr	r2, [pc, #180]	@ (80066e8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d108      	bne.n	800664a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800663e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	68fa      	ldr	r2, [r7, #12]
 8006646:	4313      	orrs	r3, r2
 8006648:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006650:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	68fa      	ldr	r2, [r7, #12]
 8006658:	4313      	orrs	r3, r2
 800665a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	68fa      	ldr	r2, [r7, #12]
 8006662:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a1e      	ldr	r2, [pc, #120]	@ (80066e4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d01d      	beq.n	80066aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006676:	d018      	beq.n	80066aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a1b      	ldr	r2, [pc, #108]	@ (80066ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d013      	beq.n	80066aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a1a      	ldr	r2, [pc, #104]	@ (80066f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d00e      	beq.n	80066aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a18      	ldr	r2, [pc, #96]	@ (80066f4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d009      	beq.n	80066aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a13      	ldr	r2, [pc, #76]	@ (80066e8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d004      	beq.n	80066aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a14      	ldr	r2, [pc, #80]	@ (80066f8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d10c      	bne.n	80066c4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	68ba      	ldr	r2, [r7, #8]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	68ba      	ldr	r2, [r7, #8]
 80066c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2201      	movs	r2, #1
 80066c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80066d4:	2300      	movs	r3, #0
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3714      	adds	r7, #20
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr
 80066e2:	bf00      	nop
 80066e4:	40012c00 	.word	0x40012c00
 80066e8:	40013400 	.word	0x40013400
 80066ec:	40000400 	.word	0x40000400
 80066f0:	40000800 	.word	0x40000800
 80066f4:	40000c00 	.word	0x40000c00
 80066f8:	40014000 	.word	0x40014000

080066fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b083      	sub	sp, #12
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006704:	bf00      	nop
 8006706:	370c      	adds	r7, #12
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr

08006710 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006710:	b480      	push	{r7}
 8006712:	b083      	sub	sp, #12
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006718:	bf00      	nop
 800671a:	370c      	adds	r7, #12
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800672c:	bf00      	nop
 800672e:	370c      	adds	r7, #12
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr

08006738 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b082      	sub	sp, #8
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d101      	bne.n	800674a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	e040      	b.n	80067cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800674e:	2b00      	cmp	r3, #0
 8006750:	d106      	bne.n	8006760 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f7fc f8ba 	bl	80028d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2224      	movs	r2, #36	@ 0x24
 8006764:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f022 0201 	bic.w	r2, r2, #1
 8006774:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800677a:	2b00      	cmp	r3, #0
 800677c:	d002      	beq.n	8006784 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 fb6a 	bl	8006e58 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 f8af 	bl	80068e8 <UART_SetConfig>
 800678a:	4603      	mov	r3, r0
 800678c:	2b01      	cmp	r3, #1
 800678e:	d101      	bne.n	8006794 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006790:	2301      	movs	r3, #1
 8006792:	e01b      	b.n	80067cc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	685a      	ldr	r2, [r3, #4]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80067a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	689a      	ldr	r2, [r3, #8]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80067b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f042 0201 	orr.w	r2, r2, #1
 80067c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f000 fbe9 	bl	8006f9c <UART_CheckIdleState>
 80067ca:	4603      	mov	r3, r0
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3708      	adds	r7, #8
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b08a      	sub	sp, #40	@ 0x28
 80067d8:	af02      	add	r7, sp, #8
 80067da:	60f8      	str	r0, [r7, #12]
 80067dc:	60b9      	str	r1, [r7, #8]
 80067de:	603b      	str	r3, [r7, #0]
 80067e0:	4613      	mov	r3, r2
 80067e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80067e8:	2b20      	cmp	r3, #32
 80067ea:	d177      	bne.n	80068dc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d002      	beq.n	80067f8 <HAL_UART_Transmit+0x24>
 80067f2:	88fb      	ldrh	r3, [r7, #6]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d101      	bne.n	80067fc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	e070      	b.n	80068de <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2200      	movs	r2, #0
 8006800:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2221      	movs	r2, #33	@ 0x21
 8006808:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800680a:	f7fc fa6d 	bl	8002ce8 <HAL_GetTick>
 800680e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	88fa      	ldrh	r2, [r7, #6]
 8006814:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	88fa      	ldrh	r2, [r7, #6]
 800681c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006828:	d108      	bne.n	800683c <HAL_UART_Transmit+0x68>
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	691b      	ldr	r3, [r3, #16]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d104      	bne.n	800683c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006832:	2300      	movs	r3, #0
 8006834:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	61bb      	str	r3, [r7, #24]
 800683a:	e003      	b.n	8006844 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006840:	2300      	movs	r3, #0
 8006842:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006844:	e02f      	b.n	80068a6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	9300      	str	r3, [sp, #0]
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	2200      	movs	r2, #0
 800684e:	2180      	movs	r1, #128	@ 0x80
 8006850:	68f8      	ldr	r0, [r7, #12]
 8006852:	f000 fc4b 	bl	80070ec <UART_WaitOnFlagUntilTimeout>
 8006856:	4603      	mov	r3, r0
 8006858:	2b00      	cmp	r3, #0
 800685a:	d004      	beq.n	8006866 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2220      	movs	r2, #32
 8006860:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006862:	2303      	movs	r3, #3
 8006864:	e03b      	b.n	80068de <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006866:	69fb      	ldr	r3, [r7, #28]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d10b      	bne.n	8006884 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800686c:	69bb      	ldr	r3, [r7, #24]
 800686e:	881a      	ldrh	r2, [r3, #0]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006878:	b292      	uxth	r2, r2
 800687a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800687c:	69bb      	ldr	r3, [r7, #24]
 800687e:	3302      	adds	r3, #2
 8006880:	61bb      	str	r3, [r7, #24]
 8006882:	e007      	b.n	8006894 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006884:	69fb      	ldr	r3, [r7, #28]
 8006886:	781a      	ldrb	r2, [r3, #0]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800688e:	69fb      	ldr	r3, [r7, #28]
 8006890:	3301      	adds	r3, #1
 8006892:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800689a:	b29b      	uxth	r3, r3
 800689c:	3b01      	subs	r3, #1
 800689e:	b29a      	uxth	r2, r3
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d1c9      	bne.n	8006846 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	9300      	str	r3, [sp, #0]
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	2200      	movs	r2, #0
 80068ba:	2140      	movs	r1, #64	@ 0x40
 80068bc:	68f8      	ldr	r0, [r7, #12]
 80068be:	f000 fc15 	bl	80070ec <UART_WaitOnFlagUntilTimeout>
 80068c2:	4603      	mov	r3, r0
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d004      	beq.n	80068d2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2220      	movs	r2, #32
 80068cc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80068ce:	2303      	movs	r3, #3
 80068d0:	e005      	b.n	80068de <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2220      	movs	r2, #32
 80068d6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80068d8:	2300      	movs	r3, #0
 80068da:	e000      	b.n	80068de <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80068dc:	2302      	movs	r3, #2
  }
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3720      	adds	r7, #32
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
	...

080068e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068ec:	b08a      	sub	sp, #40	@ 0x28
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80068f2:	2300      	movs	r3, #0
 80068f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	689a      	ldr	r2, [r3, #8]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	691b      	ldr	r3, [r3, #16]
 8006900:	431a      	orrs	r2, r3
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	695b      	ldr	r3, [r3, #20]
 8006906:	431a      	orrs	r2, r3
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	69db      	ldr	r3, [r3, #28]
 800690c:	4313      	orrs	r3, r2
 800690e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	4ba4      	ldr	r3, [pc, #656]	@ (8006ba8 <UART_SetConfig+0x2c0>)
 8006918:	4013      	ands	r3, r2
 800691a:	68fa      	ldr	r2, [r7, #12]
 800691c:	6812      	ldr	r2, [r2, #0]
 800691e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006920:	430b      	orrs	r3, r1
 8006922:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	68da      	ldr	r2, [r3, #12]
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	430a      	orrs	r2, r1
 8006938:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	699b      	ldr	r3, [r3, #24]
 800693e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a99      	ldr	r2, [pc, #612]	@ (8006bac <UART_SetConfig+0x2c4>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d004      	beq.n	8006954 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	6a1b      	ldr	r3, [r3, #32]
 800694e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006950:	4313      	orrs	r3, r2
 8006952:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006964:	430a      	orrs	r2, r1
 8006966:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a90      	ldr	r2, [pc, #576]	@ (8006bb0 <UART_SetConfig+0x2c8>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d126      	bne.n	80069c0 <UART_SetConfig+0xd8>
 8006972:	4b90      	ldr	r3, [pc, #576]	@ (8006bb4 <UART_SetConfig+0x2cc>)
 8006974:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006978:	f003 0303 	and.w	r3, r3, #3
 800697c:	2b03      	cmp	r3, #3
 800697e:	d81b      	bhi.n	80069b8 <UART_SetConfig+0xd0>
 8006980:	a201      	add	r2, pc, #4	@ (adr r2, 8006988 <UART_SetConfig+0xa0>)
 8006982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006986:	bf00      	nop
 8006988:	08006999 	.word	0x08006999
 800698c:	080069a9 	.word	0x080069a9
 8006990:	080069a1 	.word	0x080069a1
 8006994:	080069b1 	.word	0x080069b1
 8006998:	2301      	movs	r3, #1
 800699a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800699e:	e116      	b.n	8006bce <UART_SetConfig+0x2e6>
 80069a0:	2302      	movs	r3, #2
 80069a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069a6:	e112      	b.n	8006bce <UART_SetConfig+0x2e6>
 80069a8:	2304      	movs	r3, #4
 80069aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069ae:	e10e      	b.n	8006bce <UART_SetConfig+0x2e6>
 80069b0:	2308      	movs	r3, #8
 80069b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069b6:	e10a      	b.n	8006bce <UART_SetConfig+0x2e6>
 80069b8:	2310      	movs	r3, #16
 80069ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069be:	e106      	b.n	8006bce <UART_SetConfig+0x2e6>
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a7c      	ldr	r2, [pc, #496]	@ (8006bb8 <UART_SetConfig+0x2d0>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d138      	bne.n	8006a3c <UART_SetConfig+0x154>
 80069ca:	4b7a      	ldr	r3, [pc, #488]	@ (8006bb4 <UART_SetConfig+0x2cc>)
 80069cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069d0:	f003 030c 	and.w	r3, r3, #12
 80069d4:	2b0c      	cmp	r3, #12
 80069d6:	d82d      	bhi.n	8006a34 <UART_SetConfig+0x14c>
 80069d8:	a201      	add	r2, pc, #4	@ (adr r2, 80069e0 <UART_SetConfig+0xf8>)
 80069da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069de:	bf00      	nop
 80069e0:	08006a15 	.word	0x08006a15
 80069e4:	08006a35 	.word	0x08006a35
 80069e8:	08006a35 	.word	0x08006a35
 80069ec:	08006a35 	.word	0x08006a35
 80069f0:	08006a25 	.word	0x08006a25
 80069f4:	08006a35 	.word	0x08006a35
 80069f8:	08006a35 	.word	0x08006a35
 80069fc:	08006a35 	.word	0x08006a35
 8006a00:	08006a1d 	.word	0x08006a1d
 8006a04:	08006a35 	.word	0x08006a35
 8006a08:	08006a35 	.word	0x08006a35
 8006a0c:	08006a35 	.word	0x08006a35
 8006a10:	08006a2d 	.word	0x08006a2d
 8006a14:	2300      	movs	r3, #0
 8006a16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a1a:	e0d8      	b.n	8006bce <UART_SetConfig+0x2e6>
 8006a1c:	2302      	movs	r3, #2
 8006a1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a22:	e0d4      	b.n	8006bce <UART_SetConfig+0x2e6>
 8006a24:	2304      	movs	r3, #4
 8006a26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a2a:	e0d0      	b.n	8006bce <UART_SetConfig+0x2e6>
 8006a2c:	2308      	movs	r3, #8
 8006a2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a32:	e0cc      	b.n	8006bce <UART_SetConfig+0x2e6>
 8006a34:	2310      	movs	r3, #16
 8006a36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a3a:	e0c8      	b.n	8006bce <UART_SetConfig+0x2e6>
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a5e      	ldr	r2, [pc, #376]	@ (8006bbc <UART_SetConfig+0x2d4>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d125      	bne.n	8006a92 <UART_SetConfig+0x1aa>
 8006a46:	4b5b      	ldr	r3, [pc, #364]	@ (8006bb4 <UART_SetConfig+0x2cc>)
 8006a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a4c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006a50:	2b30      	cmp	r3, #48	@ 0x30
 8006a52:	d016      	beq.n	8006a82 <UART_SetConfig+0x19a>
 8006a54:	2b30      	cmp	r3, #48	@ 0x30
 8006a56:	d818      	bhi.n	8006a8a <UART_SetConfig+0x1a2>
 8006a58:	2b20      	cmp	r3, #32
 8006a5a:	d00a      	beq.n	8006a72 <UART_SetConfig+0x18a>
 8006a5c:	2b20      	cmp	r3, #32
 8006a5e:	d814      	bhi.n	8006a8a <UART_SetConfig+0x1a2>
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d002      	beq.n	8006a6a <UART_SetConfig+0x182>
 8006a64:	2b10      	cmp	r3, #16
 8006a66:	d008      	beq.n	8006a7a <UART_SetConfig+0x192>
 8006a68:	e00f      	b.n	8006a8a <UART_SetConfig+0x1a2>
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a70:	e0ad      	b.n	8006bce <UART_SetConfig+0x2e6>
 8006a72:	2302      	movs	r3, #2
 8006a74:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a78:	e0a9      	b.n	8006bce <UART_SetConfig+0x2e6>
 8006a7a:	2304      	movs	r3, #4
 8006a7c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a80:	e0a5      	b.n	8006bce <UART_SetConfig+0x2e6>
 8006a82:	2308      	movs	r3, #8
 8006a84:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a88:	e0a1      	b.n	8006bce <UART_SetConfig+0x2e6>
 8006a8a:	2310      	movs	r3, #16
 8006a8c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a90:	e09d      	b.n	8006bce <UART_SetConfig+0x2e6>
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a4a      	ldr	r2, [pc, #296]	@ (8006bc0 <UART_SetConfig+0x2d8>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d125      	bne.n	8006ae8 <UART_SetConfig+0x200>
 8006a9c:	4b45      	ldr	r3, [pc, #276]	@ (8006bb4 <UART_SetConfig+0x2cc>)
 8006a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006aa2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006aa6:	2bc0      	cmp	r3, #192	@ 0xc0
 8006aa8:	d016      	beq.n	8006ad8 <UART_SetConfig+0x1f0>
 8006aaa:	2bc0      	cmp	r3, #192	@ 0xc0
 8006aac:	d818      	bhi.n	8006ae0 <UART_SetConfig+0x1f8>
 8006aae:	2b80      	cmp	r3, #128	@ 0x80
 8006ab0:	d00a      	beq.n	8006ac8 <UART_SetConfig+0x1e0>
 8006ab2:	2b80      	cmp	r3, #128	@ 0x80
 8006ab4:	d814      	bhi.n	8006ae0 <UART_SetConfig+0x1f8>
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d002      	beq.n	8006ac0 <UART_SetConfig+0x1d8>
 8006aba:	2b40      	cmp	r3, #64	@ 0x40
 8006abc:	d008      	beq.n	8006ad0 <UART_SetConfig+0x1e8>
 8006abe:	e00f      	b.n	8006ae0 <UART_SetConfig+0x1f8>
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ac6:	e082      	b.n	8006bce <UART_SetConfig+0x2e6>
 8006ac8:	2302      	movs	r3, #2
 8006aca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ace:	e07e      	b.n	8006bce <UART_SetConfig+0x2e6>
 8006ad0:	2304      	movs	r3, #4
 8006ad2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ad6:	e07a      	b.n	8006bce <UART_SetConfig+0x2e6>
 8006ad8:	2308      	movs	r3, #8
 8006ada:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ade:	e076      	b.n	8006bce <UART_SetConfig+0x2e6>
 8006ae0:	2310      	movs	r3, #16
 8006ae2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ae6:	e072      	b.n	8006bce <UART_SetConfig+0x2e6>
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a35      	ldr	r2, [pc, #212]	@ (8006bc4 <UART_SetConfig+0x2dc>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d12a      	bne.n	8006b48 <UART_SetConfig+0x260>
 8006af2:	4b30      	ldr	r3, [pc, #192]	@ (8006bb4 <UART_SetConfig+0x2cc>)
 8006af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006af8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006afc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b00:	d01a      	beq.n	8006b38 <UART_SetConfig+0x250>
 8006b02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b06:	d81b      	bhi.n	8006b40 <UART_SetConfig+0x258>
 8006b08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b0c:	d00c      	beq.n	8006b28 <UART_SetConfig+0x240>
 8006b0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b12:	d815      	bhi.n	8006b40 <UART_SetConfig+0x258>
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d003      	beq.n	8006b20 <UART_SetConfig+0x238>
 8006b18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b1c:	d008      	beq.n	8006b30 <UART_SetConfig+0x248>
 8006b1e:	e00f      	b.n	8006b40 <UART_SetConfig+0x258>
 8006b20:	2300      	movs	r3, #0
 8006b22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b26:	e052      	b.n	8006bce <UART_SetConfig+0x2e6>
 8006b28:	2302      	movs	r3, #2
 8006b2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b2e:	e04e      	b.n	8006bce <UART_SetConfig+0x2e6>
 8006b30:	2304      	movs	r3, #4
 8006b32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b36:	e04a      	b.n	8006bce <UART_SetConfig+0x2e6>
 8006b38:	2308      	movs	r3, #8
 8006b3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b3e:	e046      	b.n	8006bce <UART_SetConfig+0x2e6>
 8006b40:	2310      	movs	r3, #16
 8006b42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b46:	e042      	b.n	8006bce <UART_SetConfig+0x2e6>
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a17      	ldr	r2, [pc, #92]	@ (8006bac <UART_SetConfig+0x2c4>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d13a      	bne.n	8006bc8 <UART_SetConfig+0x2e0>
 8006b52:	4b18      	ldr	r3, [pc, #96]	@ (8006bb4 <UART_SetConfig+0x2cc>)
 8006b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b58:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006b5c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006b60:	d01a      	beq.n	8006b98 <UART_SetConfig+0x2b0>
 8006b62:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006b66:	d81b      	bhi.n	8006ba0 <UART_SetConfig+0x2b8>
 8006b68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b6c:	d00c      	beq.n	8006b88 <UART_SetConfig+0x2a0>
 8006b6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b72:	d815      	bhi.n	8006ba0 <UART_SetConfig+0x2b8>
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d003      	beq.n	8006b80 <UART_SetConfig+0x298>
 8006b78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b7c:	d008      	beq.n	8006b90 <UART_SetConfig+0x2a8>
 8006b7e:	e00f      	b.n	8006ba0 <UART_SetConfig+0x2b8>
 8006b80:	2300      	movs	r3, #0
 8006b82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b86:	e022      	b.n	8006bce <UART_SetConfig+0x2e6>
 8006b88:	2302      	movs	r3, #2
 8006b8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b8e:	e01e      	b.n	8006bce <UART_SetConfig+0x2e6>
 8006b90:	2304      	movs	r3, #4
 8006b92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b96:	e01a      	b.n	8006bce <UART_SetConfig+0x2e6>
 8006b98:	2308      	movs	r3, #8
 8006b9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b9e:	e016      	b.n	8006bce <UART_SetConfig+0x2e6>
 8006ba0:	2310      	movs	r3, #16
 8006ba2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ba6:	e012      	b.n	8006bce <UART_SetConfig+0x2e6>
 8006ba8:	efff69f3 	.word	0xefff69f3
 8006bac:	40008000 	.word	0x40008000
 8006bb0:	40013800 	.word	0x40013800
 8006bb4:	40021000 	.word	0x40021000
 8006bb8:	40004400 	.word	0x40004400
 8006bbc:	40004800 	.word	0x40004800
 8006bc0:	40004c00 	.word	0x40004c00
 8006bc4:	40005000 	.word	0x40005000
 8006bc8:	2310      	movs	r3, #16
 8006bca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a9f      	ldr	r2, [pc, #636]	@ (8006e50 <UART_SetConfig+0x568>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d17a      	bne.n	8006cce <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006bd8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006bdc:	2b08      	cmp	r3, #8
 8006bde:	d824      	bhi.n	8006c2a <UART_SetConfig+0x342>
 8006be0:	a201      	add	r2, pc, #4	@ (adr r2, 8006be8 <UART_SetConfig+0x300>)
 8006be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be6:	bf00      	nop
 8006be8:	08006c0d 	.word	0x08006c0d
 8006bec:	08006c2b 	.word	0x08006c2b
 8006bf0:	08006c15 	.word	0x08006c15
 8006bf4:	08006c2b 	.word	0x08006c2b
 8006bf8:	08006c1b 	.word	0x08006c1b
 8006bfc:	08006c2b 	.word	0x08006c2b
 8006c00:	08006c2b 	.word	0x08006c2b
 8006c04:	08006c2b 	.word	0x08006c2b
 8006c08:	08006c23 	.word	0x08006c23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c0c:	f7fd ff6c 	bl	8004ae8 <HAL_RCC_GetPCLK1Freq>
 8006c10:	61f8      	str	r0, [r7, #28]
        break;
 8006c12:	e010      	b.n	8006c36 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c14:	4b8f      	ldr	r3, [pc, #572]	@ (8006e54 <UART_SetConfig+0x56c>)
 8006c16:	61fb      	str	r3, [r7, #28]
        break;
 8006c18:	e00d      	b.n	8006c36 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c1a:	f7fd fecd 	bl	80049b8 <HAL_RCC_GetSysClockFreq>
 8006c1e:	61f8      	str	r0, [r7, #28]
        break;
 8006c20:	e009      	b.n	8006c36 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c26:	61fb      	str	r3, [r7, #28]
        break;
 8006c28:	e005      	b.n	8006c36 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006c34:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006c36:	69fb      	ldr	r3, [r7, #28]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	f000 80fb 	beq.w	8006e34 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	685a      	ldr	r2, [r3, #4]
 8006c42:	4613      	mov	r3, r2
 8006c44:	005b      	lsls	r3, r3, #1
 8006c46:	4413      	add	r3, r2
 8006c48:	69fa      	ldr	r2, [r7, #28]
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d305      	bcc.n	8006c5a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006c54:	69fa      	ldr	r2, [r7, #28]
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d903      	bls.n	8006c62 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006c60:	e0e8      	b.n	8006e34 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006c62:	69fb      	ldr	r3, [r7, #28]
 8006c64:	2200      	movs	r2, #0
 8006c66:	461c      	mov	r4, r3
 8006c68:	4615      	mov	r5, r2
 8006c6a:	f04f 0200 	mov.w	r2, #0
 8006c6e:	f04f 0300 	mov.w	r3, #0
 8006c72:	022b      	lsls	r3, r5, #8
 8006c74:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006c78:	0222      	lsls	r2, r4, #8
 8006c7a:	68f9      	ldr	r1, [r7, #12]
 8006c7c:	6849      	ldr	r1, [r1, #4]
 8006c7e:	0849      	lsrs	r1, r1, #1
 8006c80:	2000      	movs	r0, #0
 8006c82:	4688      	mov	r8, r1
 8006c84:	4681      	mov	r9, r0
 8006c86:	eb12 0a08 	adds.w	sl, r2, r8
 8006c8a:	eb43 0b09 	adc.w	fp, r3, r9
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	2200      	movs	r2, #0
 8006c94:	603b      	str	r3, [r7, #0]
 8006c96:	607a      	str	r2, [r7, #4]
 8006c98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c9c:	4650      	mov	r0, sl
 8006c9e:	4659      	mov	r1, fp
 8006ca0:	f7f9 fff2 	bl	8000c88 <__aeabi_uldivmod>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	460b      	mov	r3, r1
 8006ca8:	4613      	mov	r3, r2
 8006caa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006cac:	69bb      	ldr	r3, [r7, #24]
 8006cae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006cb2:	d308      	bcc.n	8006cc6 <UART_SetConfig+0x3de>
 8006cb4:	69bb      	ldr	r3, [r7, #24]
 8006cb6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006cba:	d204      	bcs.n	8006cc6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	69ba      	ldr	r2, [r7, #24]
 8006cc2:	60da      	str	r2, [r3, #12]
 8006cc4:	e0b6      	b.n	8006e34 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006ccc:	e0b2      	b.n	8006e34 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	69db      	ldr	r3, [r3, #28]
 8006cd2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006cd6:	d15e      	bne.n	8006d96 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006cd8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006cdc:	2b08      	cmp	r3, #8
 8006cde:	d828      	bhi.n	8006d32 <UART_SetConfig+0x44a>
 8006ce0:	a201      	add	r2, pc, #4	@ (adr r2, 8006ce8 <UART_SetConfig+0x400>)
 8006ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ce6:	bf00      	nop
 8006ce8:	08006d0d 	.word	0x08006d0d
 8006cec:	08006d15 	.word	0x08006d15
 8006cf0:	08006d1d 	.word	0x08006d1d
 8006cf4:	08006d33 	.word	0x08006d33
 8006cf8:	08006d23 	.word	0x08006d23
 8006cfc:	08006d33 	.word	0x08006d33
 8006d00:	08006d33 	.word	0x08006d33
 8006d04:	08006d33 	.word	0x08006d33
 8006d08:	08006d2b 	.word	0x08006d2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d0c:	f7fd feec 	bl	8004ae8 <HAL_RCC_GetPCLK1Freq>
 8006d10:	61f8      	str	r0, [r7, #28]
        break;
 8006d12:	e014      	b.n	8006d3e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d14:	f7fd fefe 	bl	8004b14 <HAL_RCC_GetPCLK2Freq>
 8006d18:	61f8      	str	r0, [r7, #28]
        break;
 8006d1a:	e010      	b.n	8006d3e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d1c:	4b4d      	ldr	r3, [pc, #308]	@ (8006e54 <UART_SetConfig+0x56c>)
 8006d1e:	61fb      	str	r3, [r7, #28]
        break;
 8006d20:	e00d      	b.n	8006d3e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d22:	f7fd fe49 	bl	80049b8 <HAL_RCC_GetSysClockFreq>
 8006d26:	61f8      	str	r0, [r7, #28]
        break;
 8006d28:	e009      	b.n	8006d3e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d2e:	61fb      	str	r3, [r7, #28]
        break;
 8006d30:	e005      	b.n	8006d3e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006d32:	2300      	movs	r3, #0
 8006d34:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006d36:	2301      	movs	r3, #1
 8006d38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006d3c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006d3e:	69fb      	ldr	r3, [r7, #28]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d077      	beq.n	8006e34 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006d44:	69fb      	ldr	r3, [r7, #28]
 8006d46:	005a      	lsls	r2, r3, #1
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	085b      	lsrs	r3, r3, #1
 8006d4e:	441a      	add	r2, r3
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d58:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d5a:	69bb      	ldr	r3, [r7, #24]
 8006d5c:	2b0f      	cmp	r3, #15
 8006d5e:	d916      	bls.n	8006d8e <UART_SetConfig+0x4a6>
 8006d60:	69bb      	ldr	r3, [r7, #24]
 8006d62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d66:	d212      	bcs.n	8006d8e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d68:	69bb      	ldr	r3, [r7, #24]
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	f023 030f 	bic.w	r3, r3, #15
 8006d70:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d72:	69bb      	ldr	r3, [r7, #24]
 8006d74:	085b      	lsrs	r3, r3, #1
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	f003 0307 	and.w	r3, r3, #7
 8006d7c:	b29a      	uxth	r2, r3
 8006d7e:	8afb      	ldrh	r3, [r7, #22]
 8006d80:	4313      	orrs	r3, r2
 8006d82:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	8afa      	ldrh	r2, [r7, #22]
 8006d8a:	60da      	str	r2, [r3, #12]
 8006d8c:	e052      	b.n	8006e34 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006d94:	e04e      	b.n	8006e34 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d96:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006d9a:	2b08      	cmp	r3, #8
 8006d9c:	d827      	bhi.n	8006dee <UART_SetConfig+0x506>
 8006d9e:	a201      	add	r2, pc, #4	@ (adr r2, 8006da4 <UART_SetConfig+0x4bc>)
 8006da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da4:	08006dc9 	.word	0x08006dc9
 8006da8:	08006dd1 	.word	0x08006dd1
 8006dac:	08006dd9 	.word	0x08006dd9
 8006db0:	08006def 	.word	0x08006def
 8006db4:	08006ddf 	.word	0x08006ddf
 8006db8:	08006def 	.word	0x08006def
 8006dbc:	08006def 	.word	0x08006def
 8006dc0:	08006def 	.word	0x08006def
 8006dc4:	08006de7 	.word	0x08006de7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006dc8:	f7fd fe8e 	bl	8004ae8 <HAL_RCC_GetPCLK1Freq>
 8006dcc:	61f8      	str	r0, [r7, #28]
        break;
 8006dce:	e014      	b.n	8006dfa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006dd0:	f7fd fea0 	bl	8004b14 <HAL_RCC_GetPCLK2Freq>
 8006dd4:	61f8      	str	r0, [r7, #28]
        break;
 8006dd6:	e010      	b.n	8006dfa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006dd8:	4b1e      	ldr	r3, [pc, #120]	@ (8006e54 <UART_SetConfig+0x56c>)
 8006dda:	61fb      	str	r3, [r7, #28]
        break;
 8006ddc:	e00d      	b.n	8006dfa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006dde:	f7fd fdeb 	bl	80049b8 <HAL_RCC_GetSysClockFreq>
 8006de2:	61f8      	str	r0, [r7, #28]
        break;
 8006de4:	e009      	b.n	8006dfa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006de6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006dea:	61fb      	str	r3, [r7, #28]
        break;
 8006dec:	e005      	b.n	8006dfa <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006dee:	2300      	movs	r3, #0
 8006df0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006df2:	2301      	movs	r3, #1
 8006df4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006df8:	bf00      	nop
    }

    if (pclk != 0U)
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d019      	beq.n	8006e34 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	085a      	lsrs	r2, r3, #1
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	441a      	add	r2, r3
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e12:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e14:	69bb      	ldr	r3, [r7, #24]
 8006e16:	2b0f      	cmp	r3, #15
 8006e18:	d909      	bls.n	8006e2e <UART_SetConfig+0x546>
 8006e1a:	69bb      	ldr	r3, [r7, #24]
 8006e1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e20:	d205      	bcs.n	8006e2e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006e22:	69bb      	ldr	r3, [r7, #24]
 8006e24:	b29a      	uxth	r2, r3
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	60da      	str	r2, [r3, #12]
 8006e2c:	e002      	b.n	8006e34 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2200      	movs	r2, #0
 8006e38:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006e40:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3728      	adds	r7, #40	@ 0x28
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e4e:	bf00      	nop
 8006e50:	40008000 	.word	0x40008000
 8006e54:	00f42400 	.word	0x00f42400

08006e58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b083      	sub	sp, #12
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e64:	f003 0308 	and.w	r3, r3, #8
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d00a      	beq.n	8006e82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	430a      	orrs	r2, r1
 8006e80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e86:	f003 0301 	and.w	r3, r3, #1
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d00a      	beq.n	8006ea4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	430a      	orrs	r2, r1
 8006ea2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ea8:	f003 0302 	and.w	r3, r3, #2
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d00a      	beq.n	8006ec6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	430a      	orrs	r2, r1
 8006ec4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eca:	f003 0304 	and.w	r3, r3, #4
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d00a      	beq.n	8006ee8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	430a      	orrs	r2, r1
 8006ee6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eec:	f003 0310 	and.w	r3, r3, #16
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d00a      	beq.n	8006f0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	430a      	orrs	r2, r1
 8006f08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f0e:	f003 0320 	and.w	r3, r3, #32
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d00a      	beq.n	8006f2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	430a      	orrs	r2, r1
 8006f2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d01a      	beq.n	8006f6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	430a      	orrs	r2, r1
 8006f4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f56:	d10a      	bne.n	8006f6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	430a      	orrs	r2, r1
 8006f6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d00a      	beq.n	8006f90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	430a      	orrs	r2, r1
 8006f8e:	605a      	str	r2, [r3, #4]
  }
}
 8006f90:	bf00      	nop
 8006f92:	370c      	adds	r7, #12
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr

08006f9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b098      	sub	sp, #96	@ 0x60
 8006fa0:	af02      	add	r7, sp, #8
 8006fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006fac:	f7fb fe9c 	bl	8002ce8 <HAL_GetTick>
 8006fb0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f003 0308 	and.w	r3, r3, #8
 8006fbc:	2b08      	cmp	r3, #8
 8006fbe:	d12e      	bne.n	800701e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fc0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006fc4:	9300      	str	r3, [sp, #0]
 8006fc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 f88c 	bl	80070ec <UART_WaitOnFlagUntilTimeout>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d021      	beq.n	800701e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fe2:	e853 3f00 	ldrex	r3, [r3]
 8006fe6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006fe8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006fee:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ff8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ffa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ffc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006ffe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007000:	e841 2300 	strex	r3, r2, [r1]
 8007004:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007006:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007008:	2b00      	cmp	r3, #0
 800700a:	d1e6      	bne.n	8006fda <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2220      	movs	r2, #32
 8007010:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2200      	movs	r2, #0
 8007016:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800701a:	2303      	movs	r3, #3
 800701c:	e062      	b.n	80070e4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f003 0304 	and.w	r3, r3, #4
 8007028:	2b04      	cmp	r3, #4
 800702a:	d149      	bne.n	80070c0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800702c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007030:	9300      	str	r3, [sp, #0]
 8007032:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007034:	2200      	movs	r2, #0
 8007036:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 f856 	bl	80070ec <UART_WaitOnFlagUntilTimeout>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d03c      	beq.n	80070c0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800704c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800704e:	e853 3f00 	ldrex	r3, [r3]
 8007052:	623b      	str	r3, [r7, #32]
   return(result);
 8007054:	6a3b      	ldr	r3, [r7, #32]
 8007056:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800705a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	461a      	mov	r2, r3
 8007062:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007064:	633b      	str	r3, [r7, #48]	@ 0x30
 8007066:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007068:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800706a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800706c:	e841 2300 	strex	r3, r2, [r1]
 8007070:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007074:	2b00      	cmp	r3, #0
 8007076:	d1e6      	bne.n	8007046 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	3308      	adds	r3, #8
 800707e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	e853 3f00 	ldrex	r3, [r3]
 8007086:	60fb      	str	r3, [r7, #12]
   return(result);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f023 0301 	bic.w	r3, r3, #1
 800708e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	3308      	adds	r3, #8
 8007096:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007098:	61fa      	str	r2, [r7, #28]
 800709a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800709c:	69b9      	ldr	r1, [r7, #24]
 800709e:	69fa      	ldr	r2, [r7, #28]
 80070a0:	e841 2300 	strex	r3, r2, [r1]
 80070a4:	617b      	str	r3, [r7, #20]
   return(result);
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d1e5      	bne.n	8007078 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2220      	movs	r2, #32
 80070b0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2200      	movs	r2, #0
 80070b8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070bc:	2303      	movs	r3, #3
 80070be:	e011      	b.n	80070e4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2220      	movs	r2, #32
 80070c4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2220      	movs	r2, #32
 80070ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80070e2:	2300      	movs	r3, #0
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3758      	adds	r7, #88	@ 0x58
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}

080070ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b084      	sub	sp, #16
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	60f8      	str	r0, [r7, #12]
 80070f4:	60b9      	str	r1, [r7, #8]
 80070f6:	603b      	str	r3, [r7, #0]
 80070f8:	4613      	mov	r3, r2
 80070fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070fc:	e04f      	b.n	800719e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070fe:	69bb      	ldr	r3, [r7, #24]
 8007100:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007104:	d04b      	beq.n	800719e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007106:	f7fb fdef 	bl	8002ce8 <HAL_GetTick>
 800710a:	4602      	mov	r2, r0
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	1ad3      	subs	r3, r2, r3
 8007110:	69ba      	ldr	r2, [r7, #24]
 8007112:	429a      	cmp	r2, r3
 8007114:	d302      	bcc.n	800711c <UART_WaitOnFlagUntilTimeout+0x30>
 8007116:	69bb      	ldr	r3, [r7, #24]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d101      	bne.n	8007120 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800711c:	2303      	movs	r3, #3
 800711e:	e04e      	b.n	80071be <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f003 0304 	and.w	r3, r3, #4
 800712a:	2b00      	cmp	r3, #0
 800712c:	d037      	beq.n	800719e <UART_WaitOnFlagUntilTimeout+0xb2>
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	2b80      	cmp	r3, #128	@ 0x80
 8007132:	d034      	beq.n	800719e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	2b40      	cmp	r3, #64	@ 0x40
 8007138:	d031      	beq.n	800719e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	69db      	ldr	r3, [r3, #28]
 8007140:	f003 0308 	and.w	r3, r3, #8
 8007144:	2b08      	cmp	r3, #8
 8007146:	d110      	bne.n	800716a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	2208      	movs	r2, #8
 800714e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007150:	68f8      	ldr	r0, [r7, #12]
 8007152:	f000 f838 	bl	80071c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2208      	movs	r2, #8
 800715a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2200      	movs	r2, #0
 8007162:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007166:	2301      	movs	r3, #1
 8007168:	e029      	b.n	80071be <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	69db      	ldr	r3, [r3, #28]
 8007170:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007174:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007178:	d111      	bne.n	800719e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007182:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007184:	68f8      	ldr	r0, [r7, #12]
 8007186:	f000 f81e 	bl	80071c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2220      	movs	r2, #32
 800718e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2200      	movs	r2, #0
 8007196:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800719a:	2303      	movs	r3, #3
 800719c:	e00f      	b.n	80071be <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	69da      	ldr	r2, [r3, #28]
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	4013      	ands	r3, r2
 80071a8:	68ba      	ldr	r2, [r7, #8]
 80071aa:	429a      	cmp	r2, r3
 80071ac:	bf0c      	ite	eq
 80071ae:	2301      	moveq	r3, #1
 80071b0:	2300      	movne	r3, #0
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	461a      	mov	r2, r3
 80071b6:	79fb      	ldrb	r3, [r7, #7]
 80071b8:	429a      	cmp	r2, r3
 80071ba:	d0a0      	beq.n	80070fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80071bc:	2300      	movs	r3, #0
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3710      	adds	r7, #16
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}

080071c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80071c6:	b480      	push	{r7}
 80071c8:	b095      	sub	sp, #84	@ 0x54
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071d6:	e853 3f00 	ldrex	r3, [r3]
 80071da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80071dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80071e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	461a      	mov	r2, r3
 80071ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80071ee:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80071f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80071f4:	e841 2300 	strex	r3, r2, [r1]
 80071f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80071fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d1e6      	bne.n	80071ce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	3308      	adds	r3, #8
 8007206:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007208:	6a3b      	ldr	r3, [r7, #32]
 800720a:	e853 3f00 	ldrex	r3, [r3]
 800720e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007210:	69fb      	ldr	r3, [r7, #28]
 8007212:	f023 0301 	bic.w	r3, r3, #1
 8007216:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	3308      	adds	r3, #8
 800721e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007220:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007222:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007224:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007226:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007228:	e841 2300 	strex	r3, r2, [r1]
 800722c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800722e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007230:	2b00      	cmp	r3, #0
 8007232:	d1e5      	bne.n	8007200 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007238:	2b01      	cmp	r3, #1
 800723a:	d118      	bne.n	800726e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	e853 3f00 	ldrex	r3, [r3]
 8007248:	60bb      	str	r3, [r7, #8]
   return(result);
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	f023 0310 	bic.w	r3, r3, #16
 8007250:	647b      	str	r3, [r7, #68]	@ 0x44
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	461a      	mov	r2, r3
 8007258:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800725a:	61bb      	str	r3, [r7, #24]
 800725c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800725e:	6979      	ldr	r1, [r7, #20]
 8007260:	69ba      	ldr	r2, [r7, #24]
 8007262:	e841 2300 	strex	r3, r2, [r1]
 8007266:	613b      	str	r3, [r7, #16]
   return(result);
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d1e6      	bne.n	800723c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2220      	movs	r2, #32
 8007272:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2200      	movs	r2, #0
 800727a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2200      	movs	r2, #0
 8007280:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007282:	bf00      	nop
 8007284:	3754      	adds	r7, #84	@ 0x54
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr

0800728e <__cvt>:
 800728e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007292:	ec57 6b10 	vmov	r6, r7, d0
 8007296:	2f00      	cmp	r7, #0
 8007298:	460c      	mov	r4, r1
 800729a:	4619      	mov	r1, r3
 800729c:	463b      	mov	r3, r7
 800729e:	bfbb      	ittet	lt
 80072a0:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80072a4:	461f      	movlt	r7, r3
 80072a6:	2300      	movge	r3, #0
 80072a8:	232d      	movlt	r3, #45	@ 0x2d
 80072aa:	700b      	strb	r3, [r1, #0]
 80072ac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80072ae:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80072b2:	4691      	mov	r9, r2
 80072b4:	f023 0820 	bic.w	r8, r3, #32
 80072b8:	bfbc      	itt	lt
 80072ba:	4632      	movlt	r2, r6
 80072bc:	4616      	movlt	r6, r2
 80072be:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80072c2:	d005      	beq.n	80072d0 <__cvt+0x42>
 80072c4:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80072c8:	d100      	bne.n	80072cc <__cvt+0x3e>
 80072ca:	3401      	adds	r4, #1
 80072cc:	2102      	movs	r1, #2
 80072ce:	e000      	b.n	80072d2 <__cvt+0x44>
 80072d0:	2103      	movs	r1, #3
 80072d2:	ab03      	add	r3, sp, #12
 80072d4:	9301      	str	r3, [sp, #4]
 80072d6:	ab02      	add	r3, sp, #8
 80072d8:	9300      	str	r3, [sp, #0]
 80072da:	ec47 6b10 	vmov	d0, r6, r7
 80072de:	4653      	mov	r3, sl
 80072e0:	4622      	mov	r2, r4
 80072e2:	f001 fe95 	bl	8009010 <_dtoa_r>
 80072e6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80072ea:	4605      	mov	r5, r0
 80072ec:	d119      	bne.n	8007322 <__cvt+0x94>
 80072ee:	f019 0f01 	tst.w	r9, #1
 80072f2:	d00e      	beq.n	8007312 <__cvt+0x84>
 80072f4:	eb00 0904 	add.w	r9, r0, r4
 80072f8:	2200      	movs	r2, #0
 80072fa:	2300      	movs	r3, #0
 80072fc:	4630      	mov	r0, r6
 80072fe:	4639      	mov	r1, r7
 8007300:	f7f9 fbe2 	bl	8000ac8 <__aeabi_dcmpeq>
 8007304:	b108      	cbz	r0, 800730a <__cvt+0x7c>
 8007306:	f8cd 900c 	str.w	r9, [sp, #12]
 800730a:	2230      	movs	r2, #48	@ 0x30
 800730c:	9b03      	ldr	r3, [sp, #12]
 800730e:	454b      	cmp	r3, r9
 8007310:	d31e      	bcc.n	8007350 <__cvt+0xc2>
 8007312:	9b03      	ldr	r3, [sp, #12]
 8007314:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007316:	1b5b      	subs	r3, r3, r5
 8007318:	4628      	mov	r0, r5
 800731a:	6013      	str	r3, [r2, #0]
 800731c:	b004      	add	sp, #16
 800731e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007322:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007326:	eb00 0904 	add.w	r9, r0, r4
 800732a:	d1e5      	bne.n	80072f8 <__cvt+0x6a>
 800732c:	7803      	ldrb	r3, [r0, #0]
 800732e:	2b30      	cmp	r3, #48	@ 0x30
 8007330:	d10a      	bne.n	8007348 <__cvt+0xba>
 8007332:	2200      	movs	r2, #0
 8007334:	2300      	movs	r3, #0
 8007336:	4630      	mov	r0, r6
 8007338:	4639      	mov	r1, r7
 800733a:	f7f9 fbc5 	bl	8000ac8 <__aeabi_dcmpeq>
 800733e:	b918      	cbnz	r0, 8007348 <__cvt+0xba>
 8007340:	f1c4 0401 	rsb	r4, r4, #1
 8007344:	f8ca 4000 	str.w	r4, [sl]
 8007348:	f8da 3000 	ldr.w	r3, [sl]
 800734c:	4499      	add	r9, r3
 800734e:	e7d3      	b.n	80072f8 <__cvt+0x6a>
 8007350:	1c59      	adds	r1, r3, #1
 8007352:	9103      	str	r1, [sp, #12]
 8007354:	701a      	strb	r2, [r3, #0]
 8007356:	e7d9      	b.n	800730c <__cvt+0x7e>

08007358 <__exponent>:
 8007358:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800735a:	2900      	cmp	r1, #0
 800735c:	bfba      	itte	lt
 800735e:	4249      	neglt	r1, r1
 8007360:	232d      	movlt	r3, #45	@ 0x2d
 8007362:	232b      	movge	r3, #43	@ 0x2b
 8007364:	2909      	cmp	r1, #9
 8007366:	7002      	strb	r2, [r0, #0]
 8007368:	7043      	strb	r3, [r0, #1]
 800736a:	dd29      	ble.n	80073c0 <__exponent+0x68>
 800736c:	f10d 0307 	add.w	r3, sp, #7
 8007370:	461d      	mov	r5, r3
 8007372:	270a      	movs	r7, #10
 8007374:	461a      	mov	r2, r3
 8007376:	fbb1 f6f7 	udiv	r6, r1, r7
 800737a:	fb07 1416 	mls	r4, r7, r6, r1
 800737e:	3430      	adds	r4, #48	@ 0x30
 8007380:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007384:	460c      	mov	r4, r1
 8007386:	2c63      	cmp	r4, #99	@ 0x63
 8007388:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800738c:	4631      	mov	r1, r6
 800738e:	dcf1      	bgt.n	8007374 <__exponent+0x1c>
 8007390:	3130      	adds	r1, #48	@ 0x30
 8007392:	1e94      	subs	r4, r2, #2
 8007394:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007398:	1c41      	adds	r1, r0, #1
 800739a:	4623      	mov	r3, r4
 800739c:	42ab      	cmp	r3, r5
 800739e:	d30a      	bcc.n	80073b6 <__exponent+0x5e>
 80073a0:	f10d 0309 	add.w	r3, sp, #9
 80073a4:	1a9b      	subs	r3, r3, r2
 80073a6:	42ac      	cmp	r4, r5
 80073a8:	bf88      	it	hi
 80073aa:	2300      	movhi	r3, #0
 80073ac:	3302      	adds	r3, #2
 80073ae:	4403      	add	r3, r0
 80073b0:	1a18      	subs	r0, r3, r0
 80073b2:	b003      	add	sp, #12
 80073b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073b6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80073ba:	f801 6f01 	strb.w	r6, [r1, #1]!
 80073be:	e7ed      	b.n	800739c <__exponent+0x44>
 80073c0:	2330      	movs	r3, #48	@ 0x30
 80073c2:	3130      	adds	r1, #48	@ 0x30
 80073c4:	7083      	strb	r3, [r0, #2]
 80073c6:	70c1      	strb	r1, [r0, #3]
 80073c8:	1d03      	adds	r3, r0, #4
 80073ca:	e7f1      	b.n	80073b0 <__exponent+0x58>

080073cc <_printf_float>:
 80073cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073d0:	b08d      	sub	sp, #52	@ 0x34
 80073d2:	460c      	mov	r4, r1
 80073d4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80073d8:	4616      	mov	r6, r2
 80073da:	461f      	mov	r7, r3
 80073dc:	4605      	mov	r5, r0
 80073de:	f001 fd6b 	bl	8008eb8 <_localeconv_r>
 80073e2:	6803      	ldr	r3, [r0, #0]
 80073e4:	9304      	str	r3, [sp, #16]
 80073e6:	4618      	mov	r0, r3
 80073e8:	f7f8 ff42 	bl	8000270 <strlen>
 80073ec:	2300      	movs	r3, #0
 80073ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80073f0:	f8d8 3000 	ldr.w	r3, [r8]
 80073f4:	9005      	str	r0, [sp, #20]
 80073f6:	3307      	adds	r3, #7
 80073f8:	f023 0307 	bic.w	r3, r3, #7
 80073fc:	f103 0208 	add.w	r2, r3, #8
 8007400:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007404:	f8d4 b000 	ldr.w	fp, [r4]
 8007408:	f8c8 2000 	str.w	r2, [r8]
 800740c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007410:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007414:	9307      	str	r3, [sp, #28]
 8007416:	f8cd 8018 	str.w	r8, [sp, #24]
 800741a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800741e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007422:	4b9c      	ldr	r3, [pc, #624]	@ (8007694 <_printf_float+0x2c8>)
 8007424:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007428:	f7f9 fb80 	bl	8000b2c <__aeabi_dcmpun>
 800742c:	bb70      	cbnz	r0, 800748c <_printf_float+0xc0>
 800742e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007432:	4b98      	ldr	r3, [pc, #608]	@ (8007694 <_printf_float+0x2c8>)
 8007434:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007438:	f7f9 fb5a 	bl	8000af0 <__aeabi_dcmple>
 800743c:	bb30      	cbnz	r0, 800748c <_printf_float+0xc0>
 800743e:	2200      	movs	r2, #0
 8007440:	2300      	movs	r3, #0
 8007442:	4640      	mov	r0, r8
 8007444:	4649      	mov	r1, r9
 8007446:	f7f9 fb49 	bl	8000adc <__aeabi_dcmplt>
 800744a:	b110      	cbz	r0, 8007452 <_printf_float+0x86>
 800744c:	232d      	movs	r3, #45	@ 0x2d
 800744e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007452:	4a91      	ldr	r2, [pc, #580]	@ (8007698 <_printf_float+0x2cc>)
 8007454:	4b91      	ldr	r3, [pc, #580]	@ (800769c <_printf_float+0x2d0>)
 8007456:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800745a:	bf8c      	ite	hi
 800745c:	4690      	movhi	r8, r2
 800745e:	4698      	movls	r8, r3
 8007460:	2303      	movs	r3, #3
 8007462:	6123      	str	r3, [r4, #16]
 8007464:	f02b 0304 	bic.w	r3, fp, #4
 8007468:	6023      	str	r3, [r4, #0]
 800746a:	f04f 0900 	mov.w	r9, #0
 800746e:	9700      	str	r7, [sp, #0]
 8007470:	4633      	mov	r3, r6
 8007472:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007474:	4621      	mov	r1, r4
 8007476:	4628      	mov	r0, r5
 8007478:	f000 f9d2 	bl	8007820 <_printf_common>
 800747c:	3001      	adds	r0, #1
 800747e:	f040 808d 	bne.w	800759c <_printf_float+0x1d0>
 8007482:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007486:	b00d      	add	sp, #52	@ 0x34
 8007488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800748c:	4642      	mov	r2, r8
 800748e:	464b      	mov	r3, r9
 8007490:	4640      	mov	r0, r8
 8007492:	4649      	mov	r1, r9
 8007494:	f7f9 fb4a 	bl	8000b2c <__aeabi_dcmpun>
 8007498:	b140      	cbz	r0, 80074ac <_printf_float+0xe0>
 800749a:	464b      	mov	r3, r9
 800749c:	2b00      	cmp	r3, #0
 800749e:	bfbc      	itt	lt
 80074a0:	232d      	movlt	r3, #45	@ 0x2d
 80074a2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80074a6:	4a7e      	ldr	r2, [pc, #504]	@ (80076a0 <_printf_float+0x2d4>)
 80074a8:	4b7e      	ldr	r3, [pc, #504]	@ (80076a4 <_printf_float+0x2d8>)
 80074aa:	e7d4      	b.n	8007456 <_printf_float+0x8a>
 80074ac:	6863      	ldr	r3, [r4, #4]
 80074ae:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80074b2:	9206      	str	r2, [sp, #24]
 80074b4:	1c5a      	adds	r2, r3, #1
 80074b6:	d13b      	bne.n	8007530 <_printf_float+0x164>
 80074b8:	2306      	movs	r3, #6
 80074ba:	6063      	str	r3, [r4, #4]
 80074bc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80074c0:	2300      	movs	r3, #0
 80074c2:	6022      	str	r2, [r4, #0]
 80074c4:	9303      	str	r3, [sp, #12]
 80074c6:	ab0a      	add	r3, sp, #40	@ 0x28
 80074c8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80074cc:	ab09      	add	r3, sp, #36	@ 0x24
 80074ce:	9300      	str	r3, [sp, #0]
 80074d0:	6861      	ldr	r1, [r4, #4]
 80074d2:	ec49 8b10 	vmov	d0, r8, r9
 80074d6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80074da:	4628      	mov	r0, r5
 80074dc:	f7ff fed7 	bl	800728e <__cvt>
 80074e0:	9b06      	ldr	r3, [sp, #24]
 80074e2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80074e4:	2b47      	cmp	r3, #71	@ 0x47
 80074e6:	4680      	mov	r8, r0
 80074e8:	d129      	bne.n	800753e <_printf_float+0x172>
 80074ea:	1cc8      	adds	r0, r1, #3
 80074ec:	db02      	blt.n	80074f4 <_printf_float+0x128>
 80074ee:	6863      	ldr	r3, [r4, #4]
 80074f0:	4299      	cmp	r1, r3
 80074f2:	dd41      	ble.n	8007578 <_printf_float+0x1ac>
 80074f4:	f1aa 0a02 	sub.w	sl, sl, #2
 80074f8:	fa5f fa8a 	uxtb.w	sl, sl
 80074fc:	3901      	subs	r1, #1
 80074fe:	4652      	mov	r2, sl
 8007500:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007504:	9109      	str	r1, [sp, #36]	@ 0x24
 8007506:	f7ff ff27 	bl	8007358 <__exponent>
 800750a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800750c:	1813      	adds	r3, r2, r0
 800750e:	2a01      	cmp	r2, #1
 8007510:	4681      	mov	r9, r0
 8007512:	6123      	str	r3, [r4, #16]
 8007514:	dc02      	bgt.n	800751c <_printf_float+0x150>
 8007516:	6822      	ldr	r2, [r4, #0]
 8007518:	07d2      	lsls	r2, r2, #31
 800751a:	d501      	bpl.n	8007520 <_printf_float+0x154>
 800751c:	3301      	adds	r3, #1
 800751e:	6123      	str	r3, [r4, #16]
 8007520:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007524:	2b00      	cmp	r3, #0
 8007526:	d0a2      	beq.n	800746e <_printf_float+0xa2>
 8007528:	232d      	movs	r3, #45	@ 0x2d
 800752a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800752e:	e79e      	b.n	800746e <_printf_float+0xa2>
 8007530:	9a06      	ldr	r2, [sp, #24]
 8007532:	2a47      	cmp	r2, #71	@ 0x47
 8007534:	d1c2      	bne.n	80074bc <_printf_float+0xf0>
 8007536:	2b00      	cmp	r3, #0
 8007538:	d1c0      	bne.n	80074bc <_printf_float+0xf0>
 800753a:	2301      	movs	r3, #1
 800753c:	e7bd      	b.n	80074ba <_printf_float+0xee>
 800753e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007542:	d9db      	bls.n	80074fc <_printf_float+0x130>
 8007544:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007548:	d118      	bne.n	800757c <_printf_float+0x1b0>
 800754a:	2900      	cmp	r1, #0
 800754c:	6863      	ldr	r3, [r4, #4]
 800754e:	dd0b      	ble.n	8007568 <_printf_float+0x19c>
 8007550:	6121      	str	r1, [r4, #16]
 8007552:	b913      	cbnz	r3, 800755a <_printf_float+0x18e>
 8007554:	6822      	ldr	r2, [r4, #0]
 8007556:	07d0      	lsls	r0, r2, #31
 8007558:	d502      	bpl.n	8007560 <_printf_float+0x194>
 800755a:	3301      	adds	r3, #1
 800755c:	440b      	add	r3, r1
 800755e:	6123      	str	r3, [r4, #16]
 8007560:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007562:	f04f 0900 	mov.w	r9, #0
 8007566:	e7db      	b.n	8007520 <_printf_float+0x154>
 8007568:	b913      	cbnz	r3, 8007570 <_printf_float+0x1a4>
 800756a:	6822      	ldr	r2, [r4, #0]
 800756c:	07d2      	lsls	r2, r2, #31
 800756e:	d501      	bpl.n	8007574 <_printf_float+0x1a8>
 8007570:	3302      	adds	r3, #2
 8007572:	e7f4      	b.n	800755e <_printf_float+0x192>
 8007574:	2301      	movs	r3, #1
 8007576:	e7f2      	b.n	800755e <_printf_float+0x192>
 8007578:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800757c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800757e:	4299      	cmp	r1, r3
 8007580:	db05      	blt.n	800758e <_printf_float+0x1c2>
 8007582:	6823      	ldr	r3, [r4, #0]
 8007584:	6121      	str	r1, [r4, #16]
 8007586:	07d8      	lsls	r0, r3, #31
 8007588:	d5ea      	bpl.n	8007560 <_printf_float+0x194>
 800758a:	1c4b      	adds	r3, r1, #1
 800758c:	e7e7      	b.n	800755e <_printf_float+0x192>
 800758e:	2900      	cmp	r1, #0
 8007590:	bfd4      	ite	le
 8007592:	f1c1 0202 	rsble	r2, r1, #2
 8007596:	2201      	movgt	r2, #1
 8007598:	4413      	add	r3, r2
 800759a:	e7e0      	b.n	800755e <_printf_float+0x192>
 800759c:	6823      	ldr	r3, [r4, #0]
 800759e:	055a      	lsls	r2, r3, #21
 80075a0:	d407      	bmi.n	80075b2 <_printf_float+0x1e6>
 80075a2:	6923      	ldr	r3, [r4, #16]
 80075a4:	4642      	mov	r2, r8
 80075a6:	4631      	mov	r1, r6
 80075a8:	4628      	mov	r0, r5
 80075aa:	47b8      	blx	r7
 80075ac:	3001      	adds	r0, #1
 80075ae:	d12b      	bne.n	8007608 <_printf_float+0x23c>
 80075b0:	e767      	b.n	8007482 <_printf_float+0xb6>
 80075b2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80075b6:	f240 80dd 	bls.w	8007774 <_printf_float+0x3a8>
 80075ba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80075be:	2200      	movs	r2, #0
 80075c0:	2300      	movs	r3, #0
 80075c2:	f7f9 fa81 	bl	8000ac8 <__aeabi_dcmpeq>
 80075c6:	2800      	cmp	r0, #0
 80075c8:	d033      	beq.n	8007632 <_printf_float+0x266>
 80075ca:	4a37      	ldr	r2, [pc, #220]	@ (80076a8 <_printf_float+0x2dc>)
 80075cc:	2301      	movs	r3, #1
 80075ce:	4631      	mov	r1, r6
 80075d0:	4628      	mov	r0, r5
 80075d2:	47b8      	blx	r7
 80075d4:	3001      	adds	r0, #1
 80075d6:	f43f af54 	beq.w	8007482 <_printf_float+0xb6>
 80075da:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80075de:	4543      	cmp	r3, r8
 80075e0:	db02      	blt.n	80075e8 <_printf_float+0x21c>
 80075e2:	6823      	ldr	r3, [r4, #0]
 80075e4:	07d8      	lsls	r0, r3, #31
 80075e6:	d50f      	bpl.n	8007608 <_printf_float+0x23c>
 80075e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075ec:	4631      	mov	r1, r6
 80075ee:	4628      	mov	r0, r5
 80075f0:	47b8      	blx	r7
 80075f2:	3001      	adds	r0, #1
 80075f4:	f43f af45 	beq.w	8007482 <_printf_float+0xb6>
 80075f8:	f04f 0900 	mov.w	r9, #0
 80075fc:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8007600:	f104 0a1a 	add.w	sl, r4, #26
 8007604:	45c8      	cmp	r8, r9
 8007606:	dc09      	bgt.n	800761c <_printf_float+0x250>
 8007608:	6823      	ldr	r3, [r4, #0]
 800760a:	079b      	lsls	r3, r3, #30
 800760c:	f100 8103 	bmi.w	8007816 <_printf_float+0x44a>
 8007610:	68e0      	ldr	r0, [r4, #12]
 8007612:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007614:	4298      	cmp	r0, r3
 8007616:	bfb8      	it	lt
 8007618:	4618      	movlt	r0, r3
 800761a:	e734      	b.n	8007486 <_printf_float+0xba>
 800761c:	2301      	movs	r3, #1
 800761e:	4652      	mov	r2, sl
 8007620:	4631      	mov	r1, r6
 8007622:	4628      	mov	r0, r5
 8007624:	47b8      	blx	r7
 8007626:	3001      	adds	r0, #1
 8007628:	f43f af2b 	beq.w	8007482 <_printf_float+0xb6>
 800762c:	f109 0901 	add.w	r9, r9, #1
 8007630:	e7e8      	b.n	8007604 <_printf_float+0x238>
 8007632:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007634:	2b00      	cmp	r3, #0
 8007636:	dc39      	bgt.n	80076ac <_printf_float+0x2e0>
 8007638:	4a1b      	ldr	r2, [pc, #108]	@ (80076a8 <_printf_float+0x2dc>)
 800763a:	2301      	movs	r3, #1
 800763c:	4631      	mov	r1, r6
 800763e:	4628      	mov	r0, r5
 8007640:	47b8      	blx	r7
 8007642:	3001      	adds	r0, #1
 8007644:	f43f af1d 	beq.w	8007482 <_printf_float+0xb6>
 8007648:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800764c:	ea59 0303 	orrs.w	r3, r9, r3
 8007650:	d102      	bne.n	8007658 <_printf_float+0x28c>
 8007652:	6823      	ldr	r3, [r4, #0]
 8007654:	07d9      	lsls	r1, r3, #31
 8007656:	d5d7      	bpl.n	8007608 <_printf_float+0x23c>
 8007658:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800765c:	4631      	mov	r1, r6
 800765e:	4628      	mov	r0, r5
 8007660:	47b8      	blx	r7
 8007662:	3001      	adds	r0, #1
 8007664:	f43f af0d 	beq.w	8007482 <_printf_float+0xb6>
 8007668:	f04f 0a00 	mov.w	sl, #0
 800766c:	f104 0b1a 	add.w	fp, r4, #26
 8007670:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007672:	425b      	negs	r3, r3
 8007674:	4553      	cmp	r3, sl
 8007676:	dc01      	bgt.n	800767c <_printf_float+0x2b0>
 8007678:	464b      	mov	r3, r9
 800767a:	e793      	b.n	80075a4 <_printf_float+0x1d8>
 800767c:	2301      	movs	r3, #1
 800767e:	465a      	mov	r2, fp
 8007680:	4631      	mov	r1, r6
 8007682:	4628      	mov	r0, r5
 8007684:	47b8      	blx	r7
 8007686:	3001      	adds	r0, #1
 8007688:	f43f aefb 	beq.w	8007482 <_printf_float+0xb6>
 800768c:	f10a 0a01 	add.w	sl, sl, #1
 8007690:	e7ee      	b.n	8007670 <_printf_float+0x2a4>
 8007692:	bf00      	nop
 8007694:	7fefffff 	.word	0x7fefffff
 8007698:	0800bd50 	.word	0x0800bd50
 800769c:	0800bd4c 	.word	0x0800bd4c
 80076a0:	0800bd58 	.word	0x0800bd58
 80076a4:	0800bd54 	.word	0x0800bd54
 80076a8:	0800bd5c 	.word	0x0800bd5c
 80076ac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80076ae:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80076b2:	4553      	cmp	r3, sl
 80076b4:	bfa8      	it	ge
 80076b6:	4653      	movge	r3, sl
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	4699      	mov	r9, r3
 80076bc:	dc36      	bgt.n	800772c <_printf_float+0x360>
 80076be:	f04f 0b00 	mov.w	fp, #0
 80076c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80076c6:	f104 021a 	add.w	r2, r4, #26
 80076ca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80076cc:	9306      	str	r3, [sp, #24]
 80076ce:	eba3 0309 	sub.w	r3, r3, r9
 80076d2:	455b      	cmp	r3, fp
 80076d4:	dc31      	bgt.n	800773a <_printf_float+0x36e>
 80076d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076d8:	459a      	cmp	sl, r3
 80076da:	dc3a      	bgt.n	8007752 <_printf_float+0x386>
 80076dc:	6823      	ldr	r3, [r4, #0]
 80076de:	07da      	lsls	r2, r3, #31
 80076e0:	d437      	bmi.n	8007752 <_printf_float+0x386>
 80076e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076e4:	ebaa 0903 	sub.w	r9, sl, r3
 80076e8:	9b06      	ldr	r3, [sp, #24]
 80076ea:	ebaa 0303 	sub.w	r3, sl, r3
 80076ee:	4599      	cmp	r9, r3
 80076f0:	bfa8      	it	ge
 80076f2:	4699      	movge	r9, r3
 80076f4:	f1b9 0f00 	cmp.w	r9, #0
 80076f8:	dc33      	bgt.n	8007762 <_printf_float+0x396>
 80076fa:	f04f 0800 	mov.w	r8, #0
 80076fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007702:	f104 0b1a 	add.w	fp, r4, #26
 8007706:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007708:	ebaa 0303 	sub.w	r3, sl, r3
 800770c:	eba3 0309 	sub.w	r3, r3, r9
 8007710:	4543      	cmp	r3, r8
 8007712:	f77f af79 	ble.w	8007608 <_printf_float+0x23c>
 8007716:	2301      	movs	r3, #1
 8007718:	465a      	mov	r2, fp
 800771a:	4631      	mov	r1, r6
 800771c:	4628      	mov	r0, r5
 800771e:	47b8      	blx	r7
 8007720:	3001      	adds	r0, #1
 8007722:	f43f aeae 	beq.w	8007482 <_printf_float+0xb6>
 8007726:	f108 0801 	add.w	r8, r8, #1
 800772a:	e7ec      	b.n	8007706 <_printf_float+0x33a>
 800772c:	4642      	mov	r2, r8
 800772e:	4631      	mov	r1, r6
 8007730:	4628      	mov	r0, r5
 8007732:	47b8      	blx	r7
 8007734:	3001      	adds	r0, #1
 8007736:	d1c2      	bne.n	80076be <_printf_float+0x2f2>
 8007738:	e6a3      	b.n	8007482 <_printf_float+0xb6>
 800773a:	2301      	movs	r3, #1
 800773c:	4631      	mov	r1, r6
 800773e:	4628      	mov	r0, r5
 8007740:	9206      	str	r2, [sp, #24]
 8007742:	47b8      	blx	r7
 8007744:	3001      	adds	r0, #1
 8007746:	f43f ae9c 	beq.w	8007482 <_printf_float+0xb6>
 800774a:	9a06      	ldr	r2, [sp, #24]
 800774c:	f10b 0b01 	add.w	fp, fp, #1
 8007750:	e7bb      	b.n	80076ca <_printf_float+0x2fe>
 8007752:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007756:	4631      	mov	r1, r6
 8007758:	4628      	mov	r0, r5
 800775a:	47b8      	blx	r7
 800775c:	3001      	adds	r0, #1
 800775e:	d1c0      	bne.n	80076e2 <_printf_float+0x316>
 8007760:	e68f      	b.n	8007482 <_printf_float+0xb6>
 8007762:	9a06      	ldr	r2, [sp, #24]
 8007764:	464b      	mov	r3, r9
 8007766:	4442      	add	r2, r8
 8007768:	4631      	mov	r1, r6
 800776a:	4628      	mov	r0, r5
 800776c:	47b8      	blx	r7
 800776e:	3001      	adds	r0, #1
 8007770:	d1c3      	bne.n	80076fa <_printf_float+0x32e>
 8007772:	e686      	b.n	8007482 <_printf_float+0xb6>
 8007774:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007778:	f1ba 0f01 	cmp.w	sl, #1
 800777c:	dc01      	bgt.n	8007782 <_printf_float+0x3b6>
 800777e:	07db      	lsls	r3, r3, #31
 8007780:	d536      	bpl.n	80077f0 <_printf_float+0x424>
 8007782:	2301      	movs	r3, #1
 8007784:	4642      	mov	r2, r8
 8007786:	4631      	mov	r1, r6
 8007788:	4628      	mov	r0, r5
 800778a:	47b8      	blx	r7
 800778c:	3001      	adds	r0, #1
 800778e:	f43f ae78 	beq.w	8007482 <_printf_float+0xb6>
 8007792:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007796:	4631      	mov	r1, r6
 8007798:	4628      	mov	r0, r5
 800779a:	47b8      	blx	r7
 800779c:	3001      	adds	r0, #1
 800779e:	f43f ae70 	beq.w	8007482 <_printf_float+0xb6>
 80077a2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80077a6:	2200      	movs	r2, #0
 80077a8:	2300      	movs	r3, #0
 80077aa:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80077ae:	f7f9 f98b 	bl	8000ac8 <__aeabi_dcmpeq>
 80077b2:	b9c0      	cbnz	r0, 80077e6 <_printf_float+0x41a>
 80077b4:	4653      	mov	r3, sl
 80077b6:	f108 0201 	add.w	r2, r8, #1
 80077ba:	4631      	mov	r1, r6
 80077bc:	4628      	mov	r0, r5
 80077be:	47b8      	blx	r7
 80077c0:	3001      	adds	r0, #1
 80077c2:	d10c      	bne.n	80077de <_printf_float+0x412>
 80077c4:	e65d      	b.n	8007482 <_printf_float+0xb6>
 80077c6:	2301      	movs	r3, #1
 80077c8:	465a      	mov	r2, fp
 80077ca:	4631      	mov	r1, r6
 80077cc:	4628      	mov	r0, r5
 80077ce:	47b8      	blx	r7
 80077d0:	3001      	adds	r0, #1
 80077d2:	f43f ae56 	beq.w	8007482 <_printf_float+0xb6>
 80077d6:	f108 0801 	add.w	r8, r8, #1
 80077da:	45d0      	cmp	r8, sl
 80077dc:	dbf3      	blt.n	80077c6 <_printf_float+0x3fa>
 80077de:	464b      	mov	r3, r9
 80077e0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80077e4:	e6df      	b.n	80075a6 <_printf_float+0x1da>
 80077e6:	f04f 0800 	mov.w	r8, #0
 80077ea:	f104 0b1a 	add.w	fp, r4, #26
 80077ee:	e7f4      	b.n	80077da <_printf_float+0x40e>
 80077f0:	2301      	movs	r3, #1
 80077f2:	4642      	mov	r2, r8
 80077f4:	e7e1      	b.n	80077ba <_printf_float+0x3ee>
 80077f6:	2301      	movs	r3, #1
 80077f8:	464a      	mov	r2, r9
 80077fa:	4631      	mov	r1, r6
 80077fc:	4628      	mov	r0, r5
 80077fe:	47b8      	blx	r7
 8007800:	3001      	adds	r0, #1
 8007802:	f43f ae3e 	beq.w	8007482 <_printf_float+0xb6>
 8007806:	f108 0801 	add.w	r8, r8, #1
 800780a:	68e3      	ldr	r3, [r4, #12]
 800780c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800780e:	1a5b      	subs	r3, r3, r1
 8007810:	4543      	cmp	r3, r8
 8007812:	dcf0      	bgt.n	80077f6 <_printf_float+0x42a>
 8007814:	e6fc      	b.n	8007610 <_printf_float+0x244>
 8007816:	f04f 0800 	mov.w	r8, #0
 800781a:	f104 0919 	add.w	r9, r4, #25
 800781e:	e7f4      	b.n	800780a <_printf_float+0x43e>

08007820 <_printf_common>:
 8007820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007824:	4616      	mov	r6, r2
 8007826:	4698      	mov	r8, r3
 8007828:	688a      	ldr	r2, [r1, #8]
 800782a:	690b      	ldr	r3, [r1, #16]
 800782c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007830:	4293      	cmp	r3, r2
 8007832:	bfb8      	it	lt
 8007834:	4613      	movlt	r3, r2
 8007836:	6033      	str	r3, [r6, #0]
 8007838:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800783c:	4607      	mov	r7, r0
 800783e:	460c      	mov	r4, r1
 8007840:	b10a      	cbz	r2, 8007846 <_printf_common+0x26>
 8007842:	3301      	adds	r3, #1
 8007844:	6033      	str	r3, [r6, #0]
 8007846:	6823      	ldr	r3, [r4, #0]
 8007848:	0699      	lsls	r1, r3, #26
 800784a:	bf42      	ittt	mi
 800784c:	6833      	ldrmi	r3, [r6, #0]
 800784e:	3302      	addmi	r3, #2
 8007850:	6033      	strmi	r3, [r6, #0]
 8007852:	6825      	ldr	r5, [r4, #0]
 8007854:	f015 0506 	ands.w	r5, r5, #6
 8007858:	d106      	bne.n	8007868 <_printf_common+0x48>
 800785a:	f104 0a19 	add.w	sl, r4, #25
 800785e:	68e3      	ldr	r3, [r4, #12]
 8007860:	6832      	ldr	r2, [r6, #0]
 8007862:	1a9b      	subs	r3, r3, r2
 8007864:	42ab      	cmp	r3, r5
 8007866:	dc26      	bgt.n	80078b6 <_printf_common+0x96>
 8007868:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800786c:	6822      	ldr	r2, [r4, #0]
 800786e:	3b00      	subs	r3, #0
 8007870:	bf18      	it	ne
 8007872:	2301      	movne	r3, #1
 8007874:	0692      	lsls	r2, r2, #26
 8007876:	d42b      	bmi.n	80078d0 <_printf_common+0xb0>
 8007878:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800787c:	4641      	mov	r1, r8
 800787e:	4638      	mov	r0, r7
 8007880:	47c8      	blx	r9
 8007882:	3001      	adds	r0, #1
 8007884:	d01e      	beq.n	80078c4 <_printf_common+0xa4>
 8007886:	6823      	ldr	r3, [r4, #0]
 8007888:	6922      	ldr	r2, [r4, #16]
 800788a:	f003 0306 	and.w	r3, r3, #6
 800788e:	2b04      	cmp	r3, #4
 8007890:	bf02      	ittt	eq
 8007892:	68e5      	ldreq	r5, [r4, #12]
 8007894:	6833      	ldreq	r3, [r6, #0]
 8007896:	1aed      	subeq	r5, r5, r3
 8007898:	68a3      	ldr	r3, [r4, #8]
 800789a:	bf0c      	ite	eq
 800789c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80078a0:	2500      	movne	r5, #0
 80078a2:	4293      	cmp	r3, r2
 80078a4:	bfc4      	itt	gt
 80078a6:	1a9b      	subgt	r3, r3, r2
 80078a8:	18ed      	addgt	r5, r5, r3
 80078aa:	2600      	movs	r6, #0
 80078ac:	341a      	adds	r4, #26
 80078ae:	42b5      	cmp	r5, r6
 80078b0:	d11a      	bne.n	80078e8 <_printf_common+0xc8>
 80078b2:	2000      	movs	r0, #0
 80078b4:	e008      	b.n	80078c8 <_printf_common+0xa8>
 80078b6:	2301      	movs	r3, #1
 80078b8:	4652      	mov	r2, sl
 80078ba:	4641      	mov	r1, r8
 80078bc:	4638      	mov	r0, r7
 80078be:	47c8      	blx	r9
 80078c0:	3001      	adds	r0, #1
 80078c2:	d103      	bne.n	80078cc <_printf_common+0xac>
 80078c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80078c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078cc:	3501      	adds	r5, #1
 80078ce:	e7c6      	b.n	800785e <_printf_common+0x3e>
 80078d0:	18e1      	adds	r1, r4, r3
 80078d2:	1c5a      	adds	r2, r3, #1
 80078d4:	2030      	movs	r0, #48	@ 0x30
 80078d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80078da:	4422      	add	r2, r4
 80078dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80078e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80078e4:	3302      	adds	r3, #2
 80078e6:	e7c7      	b.n	8007878 <_printf_common+0x58>
 80078e8:	2301      	movs	r3, #1
 80078ea:	4622      	mov	r2, r4
 80078ec:	4641      	mov	r1, r8
 80078ee:	4638      	mov	r0, r7
 80078f0:	47c8      	blx	r9
 80078f2:	3001      	adds	r0, #1
 80078f4:	d0e6      	beq.n	80078c4 <_printf_common+0xa4>
 80078f6:	3601      	adds	r6, #1
 80078f8:	e7d9      	b.n	80078ae <_printf_common+0x8e>
	...

080078fc <_printf_i>:
 80078fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007900:	7e0f      	ldrb	r7, [r1, #24]
 8007902:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007904:	2f78      	cmp	r7, #120	@ 0x78
 8007906:	4691      	mov	r9, r2
 8007908:	4680      	mov	r8, r0
 800790a:	460c      	mov	r4, r1
 800790c:	469a      	mov	sl, r3
 800790e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007912:	d807      	bhi.n	8007924 <_printf_i+0x28>
 8007914:	2f62      	cmp	r7, #98	@ 0x62
 8007916:	d80a      	bhi.n	800792e <_printf_i+0x32>
 8007918:	2f00      	cmp	r7, #0
 800791a:	f000 80d1 	beq.w	8007ac0 <_printf_i+0x1c4>
 800791e:	2f58      	cmp	r7, #88	@ 0x58
 8007920:	f000 80b8 	beq.w	8007a94 <_printf_i+0x198>
 8007924:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007928:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800792c:	e03a      	b.n	80079a4 <_printf_i+0xa8>
 800792e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007932:	2b15      	cmp	r3, #21
 8007934:	d8f6      	bhi.n	8007924 <_printf_i+0x28>
 8007936:	a101      	add	r1, pc, #4	@ (adr r1, 800793c <_printf_i+0x40>)
 8007938:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800793c:	08007995 	.word	0x08007995
 8007940:	080079a9 	.word	0x080079a9
 8007944:	08007925 	.word	0x08007925
 8007948:	08007925 	.word	0x08007925
 800794c:	08007925 	.word	0x08007925
 8007950:	08007925 	.word	0x08007925
 8007954:	080079a9 	.word	0x080079a9
 8007958:	08007925 	.word	0x08007925
 800795c:	08007925 	.word	0x08007925
 8007960:	08007925 	.word	0x08007925
 8007964:	08007925 	.word	0x08007925
 8007968:	08007aa7 	.word	0x08007aa7
 800796c:	080079d3 	.word	0x080079d3
 8007970:	08007a61 	.word	0x08007a61
 8007974:	08007925 	.word	0x08007925
 8007978:	08007925 	.word	0x08007925
 800797c:	08007ac9 	.word	0x08007ac9
 8007980:	08007925 	.word	0x08007925
 8007984:	080079d3 	.word	0x080079d3
 8007988:	08007925 	.word	0x08007925
 800798c:	08007925 	.word	0x08007925
 8007990:	08007a69 	.word	0x08007a69
 8007994:	6833      	ldr	r3, [r6, #0]
 8007996:	1d1a      	adds	r2, r3, #4
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	6032      	str	r2, [r6, #0]
 800799c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80079a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80079a4:	2301      	movs	r3, #1
 80079a6:	e09c      	b.n	8007ae2 <_printf_i+0x1e6>
 80079a8:	6833      	ldr	r3, [r6, #0]
 80079aa:	6820      	ldr	r0, [r4, #0]
 80079ac:	1d19      	adds	r1, r3, #4
 80079ae:	6031      	str	r1, [r6, #0]
 80079b0:	0606      	lsls	r6, r0, #24
 80079b2:	d501      	bpl.n	80079b8 <_printf_i+0xbc>
 80079b4:	681d      	ldr	r5, [r3, #0]
 80079b6:	e003      	b.n	80079c0 <_printf_i+0xc4>
 80079b8:	0645      	lsls	r5, r0, #25
 80079ba:	d5fb      	bpl.n	80079b4 <_printf_i+0xb8>
 80079bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80079c0:	2d00      	cmp	r5, #0
 80079c2:	da03      	bge.n	80079cc <_printf_i+0xd0>
 80079c4:	232d      	movs	r3, #45	@ 0x2d
 80079c6:	426d      	negs	r5, r5
 80079c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80079cc:	4858      	ldr	r0, [pc, #352]	@ (8007b30 <_printf_i+0x234>)
 80079ce:	230a      	movs	r3, #10
 80079d0:	e011      	b.n	80079f6 <_printf_i+0xfa>
 80079d2:	6821      	ldr	r1, [r4, #0]
 80079d4:	6833      	ldr	r3, [r6, #0]
 80079d6:	0608      	lsls	r0, r1, #24
 80079d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80079dc:	d402      	bmi.n	80079e4 <_printf_i+0xe8>
 80079de:	0649      	lsls	r1, r1, #25
 80079e0:	bf48      	it	mi
 80079e2:	b2ad      	uxthmi	r5, r5
 80079e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80079e6:	4852      	ldr	r0, [pc, #328]	@ (8007b30 <_printf_i+0x234>)
 80079e8:	6033      	str	r3, [r6, #0]
 80079ea:	bf14      	ite	ne
 80079ec:	230a      	movne	r3, #10
 80079ee:	2308      	moveq	r3, #8
 80079f0:	2100      	movs	r1, #0
 80079f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80079f6:	6866      	ldr	r6, [r4, #4]
 80079f8:	60a6      	str	r6, [r4, #8]
 80079fa:	2e00      	cmp	r6, #0
 80079fc:	db05      	blt.n	8007a0a <_printf_i+0x10e>
 80079fe:	6821      	ldr	r1, [r4, #0]
 8007a00:	432e      	orrs	r6, r5
 8007a02:	f021 0104 	bic.w	r1, r1, #4
 8007a06:	6021      	str	r1, [r4, #0]
 8007a08:	d04b      	beq.n	8007aa2 <_printf_i+0x1a6>
 8007a0a:	4616      	mov	r6, r2
 8007a0c:	fbb5 f1f3 	udiv	r1, r5, r3
 8007a10:	fb03 5711 	mls	r7, r3, r1, r5
 8007a14:	5dc7      	ldrb	r7, [r0, r7]
 8007a16:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007a1a:	462f      	mov	r7, r5
 8007a1c:	42bb      	cmp	r3, r7
 8007a1e:	460d      	mov	r5, r1
 8007a20:	d9f4      	bls.n	8007a0c <_printf_i+0x110>
 8007a22:	2b08      	cmp	r3, #8
 8007a24:	d10b      	bne.n	8007a3e <_printf_i+0x142>
 8007a26:	6823      	ldr	r3, [r4, #0]
 8007a28:	07df      	lsls	r7, r3, #31
 8007a2a:	d508      	bpl.n	8007a3e <_printf_i+0x142>
 8007a2c:	6923      	ldr	r3, [r4, #16]
 8007a2e:	6861      	ldr	r1, [r4, #4]
 8007a30:	4299      	cmp	r1, r3
 8007a32:	bfde      	ittt	le
 8007a34:	2330      	movle	r3, #48	@ 0x30
 8007a36:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007a3a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007a3e:	1b92      	subs	r2, r2, r6
 8007a40:	6122      	str	r2, [r4, #16]
 8007a42:	f8cd a000 	str.w	sl, [sp]
 8007a46:	464b      	mov	r3, r9
 8007a48:	aa03      	add	r2, sp, #12
 8007a4a:	4621      	mov	r1, r4
 8007a4c:	4640      	mov	r0, r8
 8007a4e:	f7ff fee7 	bl	8007820 <_printf_common>
 8007a52:	3001      	adds	r0, #1
 8007a54:	d14a      	bne.n	8007aec <_printf_i+0x1f0>
 8007a56:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007a5a:	b004      	add	sp, #16
 8007a5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a60:	6823      	ldr	r3, [r4, #0]
 8007a62:	f043 0320 	orr.w	r3, r3, #32
 8007a66:	6023      	str	r3, [r4, #0]
 8007a68:	4832      	ldr	r0, [pc, #200]	@ (8007b34 <_printf_i+0x238>)
 8007a6a:	2778      	movs	r7, #120	@ 0x78
 8007a6c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007a70:	6823      	ldr	r3, [r4, #0]
 8007a72:	6831      	ldr	r1, [r6, #0]
 8007a74:	061f      	lsls	r7, r3, #24
 8007a76:	f851 5b04 	ldr.w	r5, [r1], #4
 8007a7a:	d402      	bmi.n	8007a82 <_printf_i+0x186>
 8007a7c:	065f      	lsls	r7, r3, #25
 8007a7e:	bf48      	it	mi
 8007a80:	b2ad      	uxthmi	r5, r5
 8007a82:	6031      	str	r1, [r6, #0]
 8007a84:	07d9      	lsls	r1, r3, #31
 8007a86:	bf44      	itt	mi
 8007a88:	f043 0320 	orrmi.w	r3, r3, #32
 8007a8c:	6023      	strmi	r3, [r4, #0]
 8007a8e:	b11d      	cbz	r5, 8007a98 <_printf_i+0x19c>
 8007a90:	2310      	movs	r3, #16
 8007a92:	e7ad      	b.n	80079f0 <_printf_i+0xf4>
 8007a94:	4826      	ldr	r0, [pc, #152]	@ (8007b30 <_printf_i+0x234>)
 8007a96:	e7e9      	b.n	8007a6c <_printf_i+0x170>
 8007a98:	6823      	ldr	r3, [r4, #0]
 8007a9a:	f023 0320 	bic.w	r3, r3, #32
 8007a9e:	6023      	str	r3, [r4, #0]
 8007aa0:	e7f6      	b.n	8007a90 <_printf_i+0x194>
 8007aa2:	4616      	mov	r6, r2
 8007aa4:	e7bd      	b.n	8007a22 <_printf_i+0x126>
 8007aa6:	6833      	ldr	r3, [r6, #0]
 8007aa8:	6825      	ldr	r5, [r4, #0]
 8007aaa:	6961      	ldr	r1, [r4, #20]
 8007aac:	1d18      	adds	r0, r3, #4
 8007aae:	6030      	str	r0, [r6, #0]
 8007ab0:	062e      	lsls	r6, r5, #24
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	d501      	bpl.n	8007aba <_printf_i+0x1be>
 8007ab6:	6019      	str	r1, [r3, #0]
 8007ab8:	e002      	b.n	8007ac0 <_printf_i+0x1c4>
 8007aba:	0668      	lsls	r0, r5, #25
 8007abc:	d5fb      	bpl.n	8007ab6 <_printf_i+0x1ba>
 8007abe:	8019      	strh	r1, [r3, #0]
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	6123      	str	r3, [r4, #16]
 8007ac4:	4616      	mov	r6, r2
 8007ac6:	e7bc      	b.n	8007a42 <_printf_i+0x146>
 8007ac8:	6833      	ldr	r3, [r6, #0]
 8007aca:	1d1a      	adds	r2, r3, #4
 8007acc:	6032      	str	r2, [r6, #0]
 8007ace:	681e      	ldr	r6, [r3, #0]
 8007ad0:	6862      	ldr	r2, [r4, #4]
 8007ad2:	2100      	movs	r1, #0
 8007ad4:	4630      	mov	r0, r6
 8007ad6:	f7f8 fb7b 	bl	80001d0 <memchr>
 8007ada:	b108      	cbz	r0, 8007ae0 <_printf_i+0x1e4>
 8007adc:	1b80      	subs	r0, r0, r6
 8007ade:	6060      	str	r0, [r4, #4]
 8007ae0:	6863      	ldr	r3, [r4, #4]
 8007ae2:	6123      	str	r3, [r4, #16]
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007aea:	e7aa      	b.n	8007a42 <_printf_i+0x146>
 8007aec:	6923      	ldr	r3, [r4, #16]
 8007aee:	4632      	mov	r2, r6
 8007af0:	4649      	mov	r1, r9
 8007af2:	4640      	mov	r0, r8
 8007af4:	47d0      	blx	sl
 8007af6:	3001      	adds	r0, #1
 8007af8:	d0ad      	beq.n	8007a56 <_printf_i+0x15a>
 8007afa:	6823      	ldr	r3, [r4, #0]
 8007afc:	079b      	lsls	r3, r3, #30
 8007afe:	d413      	bmi.n	8007b28 <_printf_i+0x22c>
 8007b00:	68e0      	ldr	r0, [r4, #12]
 8007b02:	9b03      	ldr	r3, [sp, #12]
 8007b04:	4298      	cmp	r0, r3
 8007b06:	bfb8      	it	lt
 8007b08:	4618      	movlt	r0, r3
 8007b0a:	e7a6      	b.n	8007a5a <_printf_i+0x15e>
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	4632      	mov	r2, r6
 8007b10:	4649      	mov	r1, r9
 8007b12:	4640      	mov	r0, r8
 8007b14:	47d0      	blx	sl
 8007b16:	3001      	adds	r0, #1
 8007b18:	d09d      	beq.n	8007a56 <_printf_i+0x15a>
 8007b1a:	3501      	adds	r5, #1
 8007b1c:	68e3      	ldr	r3, [r4, #12]
 8007b1e:	9903      	ldr	r1, [sp, #12]
 8007b20:	1a5b      	subs	r3, r3, r1
 8007b22:	42ab      	cmp	r3, r5
 8007b24:	dcf2      	bgt.n	8007b0c <_printf_i+0x210>
 8007b26:	e7eb      	b.n	8007b00 <_printf_i+0x204>
 8007b28:	2500      	movs	r5, #0
 8007b2a:	f104 0619 	add.w	r6, r4, #25
 8007b2e:	e7f5      	b.n	8007b1c <_printf_i+0x220>
 8007b30:	0800bd5e 	.word	0x0800bd5e
 8007b34:	0800bd6f 	.word	0x0800bd6f

08007b38 <_scanf_float>:
 8007b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b3c:	b087      	sub	sp, #28
 8007b3e:	4691      	mov	r9, r2
 8007b40:	9303      	str	r3, [sp, #12]
 8007b42:	688b      	ldr	r3, [r1, #8]
 8007b44:	1e5a      	subs	r2, r3, #1
 8007b46:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007b4a:	bf81      	itttt	hi
 8007b4c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007b50:	eb03 0b05 	addhi.w	fp, r3, r5
 8007b54:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007b58:	608b      	strhi	r3, [r1, #8]
 8007b5a:	680b      	ldr	r3, [r1, #0]
 8007b5c:	460a      	mov	r2, r1
 8007b5e:	f04f 0500 	mov.w	r5, #0
 8007b62:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007b66:	f842 3b1c 	str.w	r3, [r2], #28
 8007b6a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007b6e:	4680      	mov	r8, r0
 8007b70:	460c      	mov	r4, r1
 8007b72:	bf98      	it	ls
 8007b74:	f04f 0b00 	movls.w	fp, #0
 8007b78:	9201      	str	r2, [sp, #4]
 8007b7a:	4616      	mov	r6, r2
 8007b7c:	46aa      	mov	sl, r5
 8007b7e:	462f      	mov	r7, r5
 8007b80:	9502      	str	r5, [sp, #8]
 8007b82:	68a2      	ldr	r2, [r4, #8]
 8007b84:	b15a      	cbz	r2, 8007b9e <_scanf_float+0x66>
 8007b86:	f8d9 3000 	ldr.w	r3, [r9]
 8007b8a:	781b      	ldrb	r3, [r3, #0]
 8007b8c:	2b4e      	cmp	r3, #78	@ 0x4e
 8007b8e:	d863      	bhi.n	8007c58 <_scanf_float+0x120>
 8007b90:	2b40      	cmp	r3, #64	@ 0x40
 8007b92:	d83b      	bhi.n	8007c0c <_scanf_float+0xd4>
 8007b94:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007b98:	b2c8      	uxtb	r0, r1
 8007b9a:	280e      	cmp	r0, #14
 8007b9c:	d939      	bls.n	8007c12 <_scanf_float+0xda>
 8007b9e:	b11f      	cbz	r7, 8007ba8 <_scanf_float+0x70>
 8007ba0:	6823      	ldr	r3, [r4, #0]
 8007ba2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ba6:	6023      	str	r3, [r4, #0]
 8007ba8:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8007bac:	f1ba 0f01 	cmp.w	sl, #1
 8007bb0:	f200 8114 	bhi.w	8007ddc <_scanf_float+0x2a4>
 8007bb4:	9b01      	ldr	r3, [sp, #4]
 8007bb6:	429e      	cmp	r6, r3
 8007bb8:	f200 8105 	bhi.w	8007dc6 <_scanf_float+0x28e>
 8007bbc:	2001      	movs	r0, #1
 8007bbe:	b007      	add	sp, #28
 8007bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bc4:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007bc8:	2a0d      	cmp	r2, #13
 8007bca:	d8e8      	bhi.n	8007b9e <_scanf_float+0x66>
 8007bcc:	a101      	add	r1, pc, #4	@ (adr r1, 8007bd4 <_scanf_float+0x9c>)
 8007bce:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007bd2:	bf00      	nop
 8007bd4:	08007d1d 	.word	0x08007d1d
 8007bd8:	08007b9f 	.word	0x08007b9f
 8007bdc:	08007b9f 	.word	0x08007b9f
 8007be0:	08007b9f 	.word	0x08007b9f
 8007be4:	08007d79 	.word	0x08007d79
 8007be8:	08007d53 	.word	0x08007d53
 8007bec:	08007b9f 	.word	0x08007b9f
 8007bf0:	08007b9f 	.word	0x08007b9f
 8007bf4:	08007d2b 	.word	0x08007d2b
 8007bf8:	08007b9f 	.word	0x08007b9f
 8007bfc:	08007b9f 	.word	0x08007b9f
 8007c00:	08007b9f 	.word	0x08007b9f
 8007c04:	08007b9f 	.word	0x08007b9f
 8007c08:	08007ce7 	.word	0x08007ce7
 8007c0c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007c10:	e7da      	b.n	8007bc8 <_scanf_float+0x90>
 8007c12:	290e      	cmp	r1, #14
 8007c14:	d8c3      	bhi.n	8007b9e <_scanf_float+0x66>
 8007c16:	a001      	add	r0, pc, #4	@ (adr r0, 8007c1c <_scanf_float+0xe4>)
 8007c18:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007c1c:	08007cd7 	.word	0x08007cd7
 8007c20:	08007b9f 	.word	0x08007b9f
 8007c24:	08007cd7 	.word	0x08007cd7
 8007c28:	08007d67 	.word	0x08007d67
 8007c2c:	08007b9f 	.word	0x08007b9f
 8007c30:	08007c79 	.word	0x08007c79
 8007c34:	08007cbd 	.word	0x08007cbd
 8007c38:	08007cbd 	.word	0x08007cbd
 8007c3c:	08007cbd 	.word	0x08007cbd
 8007c40:	08007cbd 	.word	0x08007cbd
 8007c44:	08007cbd 	.word	0x08007cbd
 8007c48:	08007cbd 	.word	0x08007cbd
 8007c4c:	08007cbd 	.word	0x08007cbd
 8007c50:	08007cbd 	.word	0x08007cbd
 8007c54:	08007cbd 	.word	0x08007cbd
 8007c58:	2b6e      	cmp	r3, #110	@ 0x6e
 8007c5a:	d809      	bhi.n	8007c70 <_scanf_float+0x138>
 8007c5c:	2b60      	cmp	r3, #96	@ 0x60
 8007c5e:	d8b1      	bhi.n	8007bc4 <_scanf_float+0x8c>
 8007c60:	2b54      	cmp	r3, #84	@ 0x54
 8007c62:	d07b      	beq.n	8007d5c <_scanf_float+0x224>
 8007c64:	2b59      	cmp	r3, #89	@ 0x59
 8007c66:	d19a      	bne.n	8007b9e <_scanf_float+0x66>
 8007c68:	2d07      	cmp	r5, #7
 8007c6a:	d198      	bne.n	8007b9e <_scanf_float+0x66>
 8007c6c:	2508      	movs	r5, #8
 8007c6e:	e02f      	b.n	8007cd0 <_scanf_float+0x198>
 8007c70:	2b74      	cmp	r3, #116	@ 0x74
 8007c72:	d073      	beq.n	8007d5c <_scanf_float+0x224>
 8007c74:	2b79      	cmp	r3, #121	@ 0x79
 8007c76:	e7f6      	b.n	8007c66 <_scanf_float+0x12e>
 8007c78:	6821      	ldr	r1, [r4, #0]
 8007c7a:	05c8      	lsls	r0, r1, #23
 8007c7c:	d51e      	bpl.n	8007cbc <_scanf_float+0x184>
 8007c7e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8007c82:	6021      	str	r1, [r4, #0]
 8007c84:	3701      	adds	r7, #1
 8007c86:	f1bb 0f00 	cmp.w	fp, #0
 8007c8a:	d003      	beq.n	8007c94 <_scanf_float+0x15c>
 8007c8c:	3201      	adds	r2, #1
 8007c8e:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8007c92:	60a2      	str	r2, [r4, #8]
 8007c94:	68a3      	ldr	r3, [r4, #8]
 8007c96:	3b01      	subs	r3, #1
 8007c98:	60a3      	str	r3, [r4, #8]
 8007c9a:	6923      	ldr	r3, [r4, #16]
 8007c9c:	3301      	adds	r3, #1
 8007c9e:	6123      	str	r3, [r4, #16]
 8007ca0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8007ca4:	3b01      	subs	r3, #1
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	f8c9 3004 	str.w	r3, [r9, #4]
 8007cac:	f340 8082 	ble.w	8007db4 <_scanf_float+0x27c>
 8007cb0:	f8d9 3000 	ldr.w	r3, [r9]
 8007cb4:	3301      	adds	r3, #1
 8007cb6:	f8c9 3000 	str.w	r3, [r9]
 8007cba:	e762      	b.n	8007b82 <_scanf_float+0x4a>
 8007cbc:	eb1a 0105 	adds.w	r1, sl, r5
 8007cc0:	f47f af6d 	bne.w	8007b9e <_scanf_float+0x66>
 8007cc4:	6822      	ldr	r2, [r4, #0]
 8007cc6:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007cca:	6022      	str	r2, [r4, #0]
 8007ccc:	460d      	mov	r5, r1
 8007cce:	468a      	mov	sl, r1
 8007cd0:	f806 3b01 	strb.w	r3, [r6], #1
 8007cd4:	e7de      	b.n	8007c94 <_scanf_float+0x15c>
 8007cd6:	6822      	ldr	r2, [r4, #0]
 8007cd8:	0610      	lsls	r0, r2, #24
 8007cda:	f57f af60 	bpl.w	8007b9e <_scanf_float+0x66>
 8007cde:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007ce2:	6022      	str	r2, [r4, #0]
 8007ce4:	e7f4      	b.n	8007cd0 <_scanf_float+0x198>
 8007ce6:	f1ba 0f00 	cmp.w	sl, #0
 8007cea:	d10c      	bne.n	8007d06 <_scanf_float+0x1ce>
 8007cec:	b977      	cbnz	r7, 8007d0c <_scanf_float+0x1d4>
 8007cee:	6822      	ldr	r2, [r4, #0]
 8007cf0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007cf4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007cf8:	d108      	bne.n	8007d0c <_scanf_float+0x1d4>
 8007cfa:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007cfe:	6022      	str	r2, [r4, #0]
 8007d00:	f04f 0a01 	mov.w	sl, #1
 8007d04:	e7e4      	b.n	8007cd0 <_scanf_float+0x198>
 8007d06:	f1ba 0f02 	cmp.w	sl, #2
 8007d0a:	d050      	beq.n	8007dae <_scanf_float+0x276>
 8007d0c:	2d01      	cmp	r5, #1
 8007d0e:	d002      	beq.n	8007d16 <_scanf_float+0x1de>
 8007d10:	2d04      	cmp	r5, #4
 8007d12:	f47f af44 	bne.w	8007b9e <_scanf_float+0x66>
 8007d16:	3501      	adds	r5, #1
 8007d18:	b2ed      	uxtb	r5, r5
 8007d1a:	e7d9      	b.n	8007cd0 <_scanf_float+0x198>
 8007d1c:	f1ba 0f01 	cmp.w	sl, #1
 8007d20:	f47f af3d 	bne.w	8007b9e <_scanf_float+0x66>
 8007d24:	f04f 0a02 	mov.w	sl, #2
 8007d28:	e7d2      	b.n	8007cd0 <_scanf_float+0x198>
 8007d2a:	b975      	cbnz	r5, 8007d4a <_scanf_float+0x212>
 8007d2c:	2f00      	cmp	r7, #0
 8007d2e:	f47f af37 	bne.w	8007ba0 <_scanf_float+0x68>
 8007d32:	6822      	ldr	r2, [r4, #0]
 8007d34:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007d38:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007d3c:	f040 8103 	bne.w	8007f46 <_scanf_float+0x40e>
 8007d40:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007d44:	6022      	str	r2, [r4, #0]
 8007d46:	2501      	movs	r5, #1
 8007d48:	e7c2      	b.n	8007cd0 <_scanf_float+0x198>
 8007d4a:	2d03      	cmp	r5, #3
 8007d4c:	d0e3      	beq.n	8007d16 <_scanf_float+0x1de>
 8007d4e:	2d05      	cmp	r5, #5
 8007d50:	e7df      	b.n	8007d12 <_scanf_float+0x1da>
 8007d52:	2d02      	cmp	r5, #2
 8007d54:	f47f af23 	bne.w	8007b9e <_scanf_float+0x66>
 8007d58:	2503      	movs	r5, #3
 8007d5a:	e7b9      	b.n	8007cd0 <_scanf_float+0x198>
 8007d5c:	2d06      	cmp	r5, #6
 8007d5e:	f47f af1e 	bne.w	8007b9e <_scanf_float+0x66>
 8007d62:	2507      	movs	r5, #7
 8007d64:	e7b4      	b.n	8007cd0 <_scanf_float+0x198>
 8007d66:	6822      	ldr	r2, [r4, #0]
 8007d68:	0591      	lsls	r1, r2, #22
 8007d6a:	f57f af18 	bpl.w	8007b9e <_scanf_float+0x66>
 8007d6e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8007d72:	6022      	str	r2, [r4, #0]
 8007d74:	9702      	str	r7, [sp, #8]
 8007d76:	e7ab      	b.n	8007cd0 <_scanf_float+0x198>
 8007d78:	6822      	ldr	r2, [r4, #0]
 8007d7a:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007d7e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007d82:	d005      	beq.n	8007d90 <_scanf_float+0x258>
 8007d84:	0550      	lsls	r0, r2, #21
 8007d86:	f57f af0a 	bpl.w	8007b9e <_scanf_float+0x66>
 8007d8a:	2f00      	cmp	r7, #0
 8007d8c:	f000 80db 	beq.w	8007f46 <_scanf_float+0x40e>
 8007d90:	0591      	lsls	r1, r2, #22
 8007d92:	bf58      	it	pl
 8007d94:	9902      	ldrpl	r1, [sp, #8]
 8007d96:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007d9a:	bf58      	it	pl
 8007d9c:	1a79      	subpl	r1, r7, r1
 8007d9e:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007da2:	bf58      	it	pl
 8007da4:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007da8:	6022      	str	r2, [r4, #0]
 8007daa:	2700      	movs	r7, #0
 8007dac:	e790      	b.n	8007cd0 <_scanf_float+0x198>
 8007dae:	f04f 0a03 	mov.w	sl, #3
 8007db2:	e78d      	b.n	8007cd0 <_scanf_float+0x198>
 8007db4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007db8:	4649      	mov	r1, r9
 8007dba:	4640      	mov	r0, r8
 8007dbc:	4798      	blx	r3
 8007dbe:	2800      	cmp	r0, #0
 8007dc0:	f43f aedf 	beq.w	8007b82 <_scanf_float+0x4a>
 8007dc4:	e6eb      	b.n	8007b9e <_scanf_float+0x66>
 8007dc6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007dca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007dce:	464a      	mov	r2, r9
 8007dd0:	4640      	mov	r0, r8
 8007dd2:	4798      	blx	r3
 8007dd4:	6923      	ldr	r3, [r4, #16]
 8007dd6:	3b01      	subs	r3, #1
 8007dd8:	6123      	str	r3, [r4, #16]
 8007dda:	e6eb      	b.n	8007bb4 <_scanf_float+0x7c>
 8007ddc:	1e6b      	subs	r3, r5, #1
 8007dde:	2b06      	cmp	r3, #6
 8007de0:	d824      	bhi.n	8007e2c <_scanf_float+0x2f4>
 8007de2:	2d02      	cmp	r5, #2
 8007de4:	d836      	bhi.n	8007e54 <_scanf_float+0x31c>
 8007de6:	9b01      	ldr	r3, [sp, #4]
 8007de8:	429e      	cmp	r6, r3
 8007dea:	f67f aee7 	bls.w	8007bbc <_scanf_float+0x84>
 8007dee:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007df2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007df6:	464a      	mov	r2, r9
 8007df8:	4640      	mov	r0, r8
 8007dfa:	4798      	blx	r3
 8007dfc:	6923      	ldr	r3, [r4, #16]
 8007dfe:	3b01      	subs	r3, #1
 8007e00:	6123      	str	r3, [r4, #16]
 8007e02:	e7f0      	b.n	8007de6 <_scanf_float+0x2ae>
 8007e04:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007e08:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007e0c:	464a      	mov	r2, r9
 8007e0e:	4640      	mov	r0, r8
 8007e10:	4798      	blx	r3
 8007e12:	6923      	ldr	r3, [r4, #16]
 8007e14:	3b01      	subs	r3, #1
 8007e16:	6123      	str	r3, [r4, #16]
 8007e18:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8007e1c:	fa5f fa8a 	uxtb.w	sl, sl
 8007e20:	f1ba 0f02 	cmp.w	sl, #2
 8007e24:	d1ee      	bne.n	8007e04 <_scanf_float+0x2cc>
 8007e26:	3d03      	subs	r5, #3
 8007e28:	b2ed      	uxtb	r5, r5
 8007e2a:	1b76      	subs	r6, r6, r5
 8007e2c:	6823      	ldr	r3, [r4, #0]
 8007e2e:	05da      	lsls	r2, r3, #23
 8007e30:	d530      	bpl.n	8007e94 <_scanf_float+0x35c>
 8007e32:	055b      	lsls	r3, r3, #21
 8007e34:	d511      	bpl.n	8007e5a <_scanf_float+0x322>
 8007e36:	9b01      	ldr	r3, [sp, #4]
 8007e38:	429e      	cmp	r6, r3
 8007e3a:	f67f aebf 	bls.w	8007bbc <_scanf_float+0x84>
 8007e3e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007e42:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007e46:	464a      	mov	r2, r9
 8007e48:	4640      	mov	r0, r8
 8007e4a:	4798      	blx	r3
 8007e4c:	6923      	ldr	r3, [r4, #16]
 8007e4e:	3b01      	subs	r3, #1
 8007e50:	6123      	str	r3, [r4, #16]
 8007e52:	e7f0      	b.n	8007e36 <_scanf_float+0x2fe>
 8007e54:	46aa      	mov	sl, r5
 8007e56:	46b3      	mov	fp, r6
 8007e58:	e7de      	b.n	8007e18 <_scanf_float+0x2e0>
 8007e5a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007e5e:	6923      	ldr	r3, [r4, #16]
 8007e60:	2965      	cmp	r1, #101	@ 0x65
 8007e62:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8007e66:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8007e6a:	6123      	str	r3, [r4, #16]
 8007e6c:	d00c      	beq.n	8007e88 <_scanf_float+0x350>
 8007e6e:	2945      	cmp	r1, #69	@ 0x45
 8007e70:	d00a      	beq.n	8007e88 <_scanf_float+0x350>
 8007e72:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007e76:	464a      	mov	r2, r9
 8007e78:	4640      	mov	r0, r8
 8007e7a:	4798      	blx	r3
 8007e7c:	6923      	ldr	r3, [r4, #16]
 8007e7e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007e82:	3b01      	subs	r3, #1
 8007e84:	1eb5      	subs	r5, r6, #2
 8007e86:	6123      	str	r3, [r4, #16]
 8007e88:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007e8c:	464a      	mov	r2, r9
 8007e8e:	4640      	mov	r0, r8
 8007e90:	4798      	blx	r3
 8007e92:	462e      	mov	r6, r5
 8007e94:	6822      	ldr	r2, [r4, #0]
 8007e96:	f012 0210 	ands.w	r2, r2, #16
 8007e9a:	d001      	beq.n	8007ea0 <_scanf_float+0x368>
 8007e9c:	2000      	movs	r0, #0
 8007e9e:	e68e      	b.n	8007bbe <_scanf_float+0x86>
 8007ea0:	7032      	strb	r2, [r6, #0]
 8007ea2:	6823      	ldr	r3, [r4, #0]
 8007ea4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007ea8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007eac:	d125      	bne.n	8007efa <_scanf_float+0x3c2>
 8007eae:	9b02      	ldr	r3, [sp, #8]
 8007eb0:	429f      	cmp	r7, r3
 8007eb2:	d00a      	beq.n	8007eca <_scanf_float+0x392>
 8007eb4:	1bda      	subs	r2, r3, r7
 8007eb6:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007eba:	429e      	cmp	r6, r3
 8007ebc:	bf28      	it	cs
 8007ebe:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007ec2:	4922      	ldr	r1, [pc, #136]	@ (8007f4c <_scanf_float+0x414>)
 8007ec4:	4630      	mov	r0, r6
 8007ec6:	f000 f845 	bl	8007f54 <siprintf>
 8007eca:	9901      	ldr	r1, [sp, #4]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	4640      	mov	r0, r8
 8007ed0:	f000 ff0a 	bl	8008ce8 <_strtod_r>
 8007ed4:	9b03      	ldr	r3, [sp, #12]
 8007ed6:	6821      	ldr	r1, [r4, #0]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f011 0f02 	tst.w	r1, #2
 8007ede:	ec57 6b10 	vmov	r6, r7, d0
 8007ee2:	f103 0204 	add.w	r2, r3, #4
 8007ee6:	d015      	beq.n	8007f14 <_scanf_float+0x3dc>
 8007ee8:	9903      	ldr	r1, [sp, #12]
 8007eea:	600a      	str	r2, [r1, #0]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	e9c3 6700 	strd	r6, r7, [r3]
 8007ef2:	68e3      	ldr	r3, [r4, #12]
 8007ef4:	3301      	adds	r3, #1
 8007ef6:	60e3      	str	r3, [r4, #12]
 8007ef8:	e7d0      	b.n	8007e9c <_scanf_float+0x364>
 8007efa:	9b04      	ldr	r3, [sp, #16]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d0e4      	beq.n	8007eca <_scanf_float+0x392>
 8007f00:	9905      	ldr	r1, [sp, #20]
 8007f02:	230a      	movs	r3, #10
 8007f04:	3101      	adds	r1, #1
 8007f06:	4640      	mov	r0, r8
 8007f08:	f000 ff6e 	bl	8008de8 <_strtol_r>
 8007f0c:	9b04      	ldr	r3, [sp, #16]
 8007f0e:	9e05      	ldr	r6, [sp, #20]
 8007f10:	1ac2      	subs	r2, r0, r3
 8007f12:	e7d0      	b.n	8007eb6 <_scanf_float+0x37e>
 8007f14:	f011 0f04 	tst.w	r1, #4
 8007f18:	9903      	ldr	r1, [sp, #12]
 8007f1a:	600a      	str	r2, [r1, #0]
 8007f1c:	d1e6      	bne.n	8007eec <_scanf_float+0x3b4>
 8007f1e:	681d      	ldr	r5, [r3, #0]
 8007f20:	4632      	mov	r2, r6
 8007f22:	463b      	mov	r3, r7
 8007f24:	4630      	mov	r0, r6
 8007f26:	4639      	mov	r1, r7
 8007f28:	f7f8 fe00 	bl	8000b2c <__aeabi_dcmpun>
 8007f2c:	b128      	cbz	r0, 8007f3a <_scanf_float+0x402>
 8007f2e:	4808      	ldr	r0, [pc, #32]	@ (8007f50 <_scanf_float+0x418>)
 8007f30:	f000 ffde 	bl	8008ef0 <nanf>
 8007f34:	ed85 0a00 	vstr	s0, [r5]
 8007f38:	e7db      	b.n	8007ef2 <_scanf_float+0x3ba>
 8007f3a:	4630      	mov	r0, r6
 8007f3c:	4639      	mov	r1, r7
 8007f3e:	f7f8 fe53 	bl	8000be8 <__aeabi_d2f>
 8007f42:	6028      	str	r0, [r5, #0]
 8007f44:	e7d5      	b.n	8007ef2 <_scanf_float+0x3ba>
 8007f46:	2700      	movs	r7, #0
 8007f48:	e62e      	b.n	8007ba8 <_scanf_float+0x70>
 8007f4a:	bf00      	nop
 8007f4c:	0800bd80 	.word	0x0800bd80
 8007f50:	0800bf21 	.word	0x0800bf21

08007f54 <siprintf>:
 8007f54:	b40e      	push	{r1, r2, r3}
 8007f56:	b510      	push	{r4, lr}
 8007f58:	b09d      	sub	sp, #116	@ 0x74
 8007f5a:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007f5c:	9002      	str	r0, [sp, #8]
 8007f5e:	9006      	str	r0, [sp, #24]
 8007f60:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007f64:	480a      	ldr	r0, [pc, #40]	@ (8007f90 <siprintf+0x3c>)
 8007f66:	9107      	str	r1, [sp, #28]
 8007f68:	9104      	str	r1, [sp, #16]
 8007f6a:	490a      	ldr	r1, [pc, #40]	@ (8007f94 <siprintf+0x40>)
 8007f6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f70:	9105      	str	r1, [sp, #20]
 8007f72:	2400      	movs	r4, #0
 8007f74:	a902      	add	r1, sp, #8
 8007f76:	6800      	ldr	r0, [r0, #0]
 8007f78:	9301      	str	r3, [sp, #4]
 8007f7a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007f7c:	f002 f9ac 	bl	800a2d8 <_svfiprintf_r>
 8007f80:	9b02      	ldr	r3, [sp, #8]
 8007f82:	701c      	strb	r4, [r3, #0]
 8007f84:	b01d      	add	sp, #116	@ 0x74
 8007f86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f8a:	b003      	add	sp, #12
 8007f8c:	4770      	bx	lr
 8007f8e:	bf00      	nop
 8007f90:	20000188 	.word	0x20000188
 8007f94:	ffff0208 	.word	0xffff0208

08007f98 <std>:
 8007f98:	2300      	movs	r3, #0
 8007f9a:	b510      	push	{r4, lr}
 8007f9c:	4604      	mov	r4, r0
 8007f9e:	e9c0 3300 	strd	r3, r3, [r0]
 8007fa2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007fa6:	6083      	str	r3, [r0, #8]
 8007fa8:	8181      	strh	r1, [r0, #12]
 8007faa:	6643      	str	r3, [r0, #100]	@ 0x64
 8007fac:	81c2      	strh	r2, [r0, #14]
 8007fae:	6183      	str	r3, [r0, #24]
 8007fb0:	4619      	mov	r1, r3
 8007fb2:	2208      	movs	r2, #8
 8007fb4:	305c      	adds	r0, #92	@ 0x5c
 8007fb6:	f000 ff37 	bl	8008e28 <memset>
 8007fba:	4b0d      	ldr	r3, [pc, #52]	@ (8007ff0 <std+0x58>)
 8007fbc:	6263      	str	r3, [r4, #36]	@ 0x24
 8007fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8007ff4 <std+0x5c>)
 8007fc0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8007ff8 <std+0x60>)
 8007fc4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8007ffc <std+0x64>)
 8007fc8:	6323      	str	r3, [r4, #48]	@ 0x30
 8007fca:	4b0d      	ldr	r3, [pc, #52]	@ (8008000 <std+0x68>)
 8007fcc:	6224      	str	r4, [r4, #32]
 8007fce:	429c      	cmp	r4, r3
 8007fd0:	d006      	beq.n	8007fe0 <std+0x48>
 8007fd2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007fd6:	4294      	cmp	r4, r2
 8007fd8:	d002      	beq.n	8007fe0 <std+0x48>
 8007fda:	33d0      	adds	r3, #208	@ 0xd0
 8007fdc:	429c      	cmp	r4, r3
 8007fde:	d105      	bne.n	8007fec <std+0x54>
 8007fe0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007fe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fe8:	f000 bf62 	b.w	8008eb0 <__retarget_lock_init_recursive>
 8007fec:	bd10      	pop	{r4, pc}
 8007fee:	bf00      	nop
 8007ff0:	0800b10d 	.word	0x0800b10d
 8007ff4:	0800b12f 	.word	0x0800b12f
 8007ff8:	0800b167 	.word	0x0800b167
 8007ffc:	0800b18b 	.word	0x0800b18b
 8008000:	20000630 	.word	0x20000630

08008004 <stdio_exit_handler>:
 8008004:	4a02      	ldr	r2, [pc, #8]	@ (8008010 <stdio_exit_handler+0xc>)
 8008006:	4903      	ldr	r1, [pc, #12]	@ (8008014 <stdio_exit_handler+0x10>)
 8008008:	4803      	ldr	r0, [pc, #12]	@ (8008018 <stdio_exit_handler+0x14>)
 800800a:	f000 beef 	b.w	8008dec <_fwalk_sglue>
 800800e:	bf00      	nop
 8008010:	20000010 	.word	0x20000010
 8008014:	0800a751 	.word	0x0800a751
 8008018:	2000018c 	.word	0x2000018c

0800801c <cleanup_stdio>:
 800801c:	6841      	ldr	r1, [r0, #4]
 800801e:	4b0c      	ldr	r3, [pc, #48]	@ (8008050 <cleanup_stdio+0x34>)
 8008020:	4299      	cmp	r1, r3
 8008022:	b510      	push	{r4, lr}
 8008024:	4604      	mov	r4, r0
 8008026:	d001      	beq.n	800802c <cleanup_stdio+0x10>
 8008028:	f002 fb92 	bl	800a750 <_fflush_r>
 800802c:	68a1      	ldr	r1, [r4, #8]
 800802e:	4b09      	ldr	r3, [pc, #36]	@ (8008054 <cleanup_stdio+0x38>)
 8008030:	4299      	cmp	r1, r3
 8008032:	d002      	beq.n	800803a <cleanup_stdio+0x1e>
 8008034:	4620      	mov	r0, r4
 8008036:	f002 fb8b 	bl	800a750 <_fflush_r>
 800803a:	68e1      	ldr	r1, [r4, #12]
 800803c:	4b06      	ldr	r3, [pc, #24]	@ (8008058 <cleanup_stdio+0x3c>)
 800803e:	4299      	cmp	r1, r3
 8008040:	d004      	beq.n	800804c <cleanup_stdio+0x30>
 8008042:	4620      	mov	r0, r4
 8008044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008048:	f002 bb82 	b.w	800a750 <_fflush_r>
 800804c:	bd10      	pop	{r4, pc}
 800804e:	bf00      	nop
 8008050:	20000630 	.word	0x20000630
 8008054:	20000698 	.word	0x20000698
 8008058:	20000700 	.word	0x20000700

0800805c <global_stdio_init.part.0>:
 800805c:	b510      	push	{r4, lr}
 800805e:	4b0b      	ldr	r3, [pc, #44]	@ (800808c <global_stdio_init.part.0+0x30>)
 8008060:	4c0b      	ldr	r4, [pc, #44]	@ (8008090 <global_stdio_init.part.0+0x34>)
 8008062:	4a0c      	ldr	r2, [pc, #48]	@ (8008094 <global_stdio_init.part.0+0x38>)
 8008064:	601a      	str	r2, [r3, #0]
 8008066:	4620      	mov	r0, r4
 8008068:	2200      	movs	r2, #0
 800806a:	2104      	movs	r1, #4
 800806c:	f7ff ff94 	bl	8007f98 <std>
 8008070:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008074:	2201      	movs	r2, #1
 8008076:	2109      	movs	r1, #9
 8008078:	f7ff ff8e 	bl	8007f98 <std>
 800807c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008080:	2202      	movs	r2, #2
 8008082:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008086:	2112      	movs	r1, #18
 8008088:	f7ff bf86 	b.w	8007f98 <std>
 800808c:	20000768 	.word	0x20000768
 8008090:	20000630 	.word	0x20000630
 8008094:	08008005 	.word	0x08008005

08008098 <__sfp_lock_acquire>:
 8008098:	4801      	ldr	r0, [pc, #4]	@ (80080a0 <__sfp_lock_acquire+0x8>)
 800809a:	f000 bf0a 	b.w	8008eb2 <__retarget_lock_acquire_recursive>
 800809e:	bf00      	nop
 80080a0:	2000076d 	.word	0x2000076d

080080a4 <__sfp_lock_release>:
 80080a4:	4801      	ldr	r0, [pc, #4]	@ (80080ac <__sfp_lock_release+0x8>)
 80080a6:	f000 bf05 	b.w	8008eb4 <__retarget_lock_release_recursive>
 80080aa:	bf00      	nop
 80080ac:	2000076d 	.word	0x2000076d

080080b0 <__sinit>:
 80080b0:	b510      	push	{r4, lr}
 80080b2:	4604      	mov	r4, r0
 80080b4:	f7ff fff0 	bl	8008098 <__sfp_lock_acquire>
 80080b8:	6a23      	ldr	r3, [r4, #32]
 80080ba:	b11b      	cbz	r3, 80080c4 <__sinit+0x14>
 80080bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080c0:	f7ff bff0 	b.w	80080a4 <__sfp_lock_release>
 80080c4:	4b04      	ldr	r3, [pc, #16]	@ (80080d8 <__sinit+0x28>)
 80080c6:	6223      	str	r3, [r4, #32]
 80080c8:	4b04      	ldr	r3, [pc, #16]	@ (80080dc <__sinit+0x2c>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d1f5      	bne.n	80080bc <__sinit+0xc>
 80080d0:	f7ff ffc4 	bl	800805c <global_stdio_init.part.0>
 80080d4:	e7f2      	b.n	80080bc <__sinit+0xc>
 80080d6:	bf00      	nop
 80080d8:	0800801d 	.word	0x0800801d
 80080dc:	20000768 	.word	0x20000768

080080e0 <sulp>:
 80080e0:	b570      	push	{r4, r5, r6, lr}
 80080e2:	4604      	mov	r4, r0
 80080e4:	460d      	mov	r5, r1
 80080e6:	ec45 4b10 	vmov	d0, r4, r5
 80080ea:	4616      	mov	r6, r2
 80080ec:	f002 fed0 	bl	800ae90 <__ulp>
 80080f0:	ec51 0b10 	vmov	r0, r1, d0
 80080f4:	b17e      	cbz	r6, 8008116 <sulp+0x36>
 80080f6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80080fa:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80080fe:	2b00      	cmp	r3, #0
 8008100:	dd09      	ble.n	8008116 <sulp+0x36>
 8008102:	051b      	lsls	r3, r3, #20
 8008104:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008108:	2400      	movs	r4, #0
 800810a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800810e:	4622      	mov	r2, r4
 8008110:	462b      	mov	r3, r5
 8008112:	f7f8 fa71 	bl	80005f8 <__aeabi_dmul>
 8008116:	ec41 0b10 	vmov	d0, r0, r1
 800811a:	bd70      	pop	{r4, r5, r6, pc}
 800811c:	0000      	movs	r0, r0
	...

08008120 <_strtod_l>:
 8008120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008124:	b09f      	sub	sp, #124	@ 0x7c
 8008126:	460c      	mov	r4, r1
 8008128:	9217      	str	r2, [sp, #92]	@ 0x5c
 800812a:	2200      	movs	r2, #0
 800812c:	921a      	str	r2, [sp, #104]	@ 0x68
 800812e:	9005      	str	r0, [sp, #20]
 8008130:	f04f 0a00 	mov.w	sl, #0
 8008134:	f04f 0b00 	mov.w	fp, #0
 8008138:	460a      	mov	r2, r1
 800813a:	9219      	str	r2, [sp, #100]	@ 0x64
 800813c:	7811      	ldrb	r1, [r2, #0]
 800813e:	292b      	cmp	r1, #43	@ 0x2b
 8008140:	d04a      	beq.n	80081d8 <_strtod_l+0xb8>
 8008142:	d838      	bhi.n	80081b6 <_strtod_l+0x96>
 8008144:	290d      	cmp	r1, #13
 8008146:	d832      	bhi.n	80081ae <_strtod_l+0x8e>
 8008148:	2908      	cmp	r1, #8
 800814a:	d832      	bhi.n	80081b2 <_strtod_l+0x92>
 800814c:	2900      	cmp	r1, #0
 800814e:	d03b      	beq.n	80081c8 <_strtod_l+0xa8>
 8008150:	2200      	movs	r2, #0
 8008152:	920e      	str	r2, [sp, #56]	@ 0x38
 8008154:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008156:	782a      	ldrb	r2, [r5, #0]
 8008158:	2a30      	cmp	r2, #48	@ 0x30
 800815a:	f040 80b2 	bne.w	80082c2 <_strtod_l+0x1a2>
 800815e:	786a      	ldrb	r2, [r5, #1]
 8008160:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008164:	2a58      	cmp	r2, #88	@ 0x58
 8008166:	d16e      	bne.n	8008246 <_strtod_l+0x126>
 8008168:	9302      	str	r3, [sp, #8]
 800816a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800816c:	9301      	str	r3, [sp, #4]
 800816e:	ab1a      	add	r3, sp, #104	@ 0x68
 8008170:	9300      	str	r3, [sp, #0]
 8008172:	4a8f      	ldr	r2, [pc, #572]	@ (80083b0 <_strtod_l+0x290>)
 8008174:	9805      	ldr	r0, [sp, #20]
 8008176:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008178:	a919      	add	r1, sp, #100	@ 0x64
 800817a:	f001 fd81 	bl	8009c80 <__gethex>
 800817e:	f010 060f 	ands.w	r6, r0, #15
 8008182:	4604      	mov	r4, r0
 8008184:	d005      	beq.n	8008192 <_strtod_l+0x72>
 8008186:	2e06      	cmp	r6, #6
 8008188:	d128      	bne.n	80081dc <_strtod_l+0xbc>
 800818a:	3501      	adds	r5, #1
 800818c:	2300      	movs	r3, #0
 800818e:	9519      	str	r5, [sp, #100]	@ 0x64
 8008190:	930e      	str	r3, [sp, #56]	@ 0x38
 8008192:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008194:	2b00      	cmp	r3, #0
 8008196:	f040 858e 	bne.w	8008cb6 <_strtod_l+0xb96>
 800819a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800819c:	b1cb      	cbz	r3, 80081d2 <_strtod_l+0xb2>
 800819e:	4652      	mov	r2, sl
 80081a0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80081a4:	ec43 2b10 	vmov	d0, r2, r3
 80081a8:	b01f      	add	sp, #124	@ 0x7c
 80081aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081ae:	2920      	cmp	r1, #32
 80081b0:	d1ce      	bne.n	8008150 <_strtod_l+0x30>
 80081b2:	3201      	adds	r2, #1
 80081b4:	e7c1      	b.n	800813a <_strtod_l+0x1a>
 80081b6:	292d      	cmp	r1, #45	@ 0x2d
 80081b8:	d1ca      	bne.n	8008150 <_strtod_l+0x30>
 80081ba:	2101      	movs	r1, #1
 80081bc:	910e      	str	r1, [sp, #56]	@ 0x38
 80081be:	1c51      	adds	r1, r2, #1
 80081c0:	9119      	str	r1, [sp, #100]	@ 0x64
 80081c2:	7852      	ldrb	r2, [r2, #1]
 80081c4:	2a00      	cmp	r2, #0
 80081c6:	d1c5      	bne.n	8008154 <_strtod_l+0x34>
 80081c8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80081ca:	9419      	str	r4, [sp, #100]	@ 0x64
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	f040 8570 	bne.w	8008cb2 <_strtod_l+0xb92>
 80081d2:	4652      	mov	r2, sl
 80081d4:	465b      	mov	r3, fp
 80081d6:	e7e5      	b.n	80081a4 <_strtod_l+0x84>
 80081d8:	2100      	movs	r1, #0
 80081da:	e7ef      	b.n	80081bc <_strtod_l+0x9c>
 80081dc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80081de:	b13a      	cbz	r2, 80081f0 <_strtod_l+0xd0>
 80081e0:	2135      	movs	r1, #53	@ 0x35
 80081e2:	a81c      	add	r0, sp, #112	@ 0x70
 80081e4:	f002 ff4e 	bl	800b084 <__copybits>
 80081e8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80081ea:	9805      	ldr	r0, [sp, #20]
 80081ec:	f002 fb24 	bl	800a838 <_Bfree>
 80081f0:	3e01      	subs	r6, #1
 80081f2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80081f4:	2e04      	cmp	r6, #4
 80081f6:	d806      	bhi.n	8008206 <_strtod_l+0xe6>
 80081f8:	e8df f006 	tbb	[pc, r6]
 80081fc:	201d0314 	.word	0x201d0314
 8008200:	14          	.byte	0x14
 8008201:	00          	.byte	0x00
 8008202:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008206:	05e1      	lsls	r1, r4, #23
 8008208:	bf48      	it	mi
 800820a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800820e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008212:	0d1b      	lsrs	r3, r3, #20
 8008214:	051b      	lsls	r3, r3, #20
 8008216:	2b00      	cmp	r3, #0
 8008218:	d1bb      	bne.n	8008192 <_strtod_l+0x72>
 800821a:	f000 fe1f 	bl	8008e5c <__errno>
 800821e:	2322      	movs	r3, #34	@ 0x22
 8008220:	6003      	str	r3, [r0, #0]
 8008222:	e7b6      	b.n	8008192 <_strtod_l+0x72>
 8008224:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008228:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800822c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008230:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008234:	e7e7      	b.n	8008206 <_strtod_l+0xe6>
 8008236:	f8df b180 	ldr.w	fp, [pc, #384]	@ 80083b8 <_strtod_l+0x298>
 800823a:	e7e4      	b.n	8008206 <_strtod_l+0xe6>
 800823c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008240:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8008244:	e7df      	b.n	8008206 <_strtod_l+0xe6>
 8008246:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008248:	1c5a      	adds	r2, r3, #1
 800824a:	9219      	str	r2, [sp, #100]	@ 0x64
 800824c:	785b      	ldrb	r3, [r3, #1]
 800824e:	2b30      	cmp	r3, #48	@ 0x30
 8008250:	d0f9      	beq.n	8008246 <_strtod_l+0x126>
 8008252:	2b00      	cmp	r3, #0
 8008254:	d09d      	beq.n	8008192 <_strtod_l+0x72>
 8008256:	2301      	movs	r3, #1
 8008258:	2700      	movs	r7, #0
 800825a:	9308      	str	r3, [sp, #32]
 800825c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800825e:	930c      	str	r3, [sp, #48]	@ 0x30
 8008260:	970b      	str	r7, [sp, #44]	@ 0x2c
 8008262:	46b9      	mov	r9, r7
 8008264:	220a      	movs	r2, #10
 8008266:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008268:	7805      	ldrb	r5, [r0, #0]
 800826a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800826e:	b2d9      	uxtb	r1, r3
 8008270:	2909      	cmp	r1, #9
 8008272:	d928      	bls.n	80082c6 <_strtod_l+0x1a6>
 8008274:	494f      	ldr	r1, [pc, #316]	@ (80083b4 <_strtod_l+0x294>)
 8008276:	2201      	movs	r2, #1
 8008278:	f000 fdde 	bl	8008e38 <strncmp>
 800827c:	2800      	cmp	r0, #0
 800827e:	d032      	beq.n	80082e6 <_strtod_l+0x1c6>
 8008280:	2000      	movs	r0, #0
 8008282:	462a      	mov	r2, r5
 8008284:	900a      	str	r0, [sp, #40]	@ 0x28
 8008286:	464d      	mov	r5, r9
 8008288:	4603      	mov	r3, r0
 800828a:	2a65      	cmp	r2, #101	@ 0x65
 800828c:	d001      	beq.n	8008292 <_strtod_l+0x172>
 800828e:	2a45      	cmp	r2, #69	@ 0x45
 8008290:	d114      	bne.n	80082bc <_strtod_l+0x19c>
 8008292:	b91d      	cbnz	r5, 800829c <_strtod_l+0x17c>
 8008294:	9a08      	ldr	r2, [sp, #32]
 8008296:	4302      	orrs	r2, r0
 8008298:	d096      	beq.n	80081c8 <_strtod_l+0xa8>
 800829a:	2500      	movs	r5, #0
 800829c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800829e:	1c62      	adds	r2, r4, #1
 80082a0:	9219      	str	r2, [sp, #100]	@ 0x64
 80082a2:	7862      	ldrb	r2, [r4, #1]
 80082a4:	2a2b      	cmp	r2, #43	@ 0x2b
 80082a6:	d07a      	beq.n	800839e <_strtod_l+0x27e>
 80082a8:	2a2d      	cmp	r2, #45	@ 0x2d
 80082aa:	d07e      	beq.n	80083aa <_strtod_l+0x28a>
 80082ac:	f04f 0c00 	mov.w	ip, #0
 80082b0:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80082b4:	2909      	cmp	r1, #9
 80082b6:	f240 8085 	bls.w	80083c4 <_strtod_l+0x2a4>
 80082ba:	9419      	str	r4, [sp, #100]	@ 0x64
 80082bc:	f04f 0800 	mov.w	r8, #0
 80082c0:	e0a5      	b.n	800840e <_strtod_l+0x2ee>
 80082c2:	2300      	movs	r3, #0
 80082c4:	e7c8      	b.n	8008258 <_strtod_l+0x138>
 80082c6:	f1b9 0f08 	cmp.w	r9, #8
 80082ca:	bfd8      	it	le
 80082cc:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 80082ce:	f100 0001 	add.w	r0, r0, #1
 80082d2:	bfda      	itte	le
 80082d4:	fb02 3301 	mlale	r3, r2, r1, r3
 80082d8:	930b      	strle	r3, [sp, #44]	@ 0x2c
 80082da:	fb02 3707 	mlagt	r7, r2, r7, r3
 80082de:	f109 0901 	add.w	r9, r9, #1
 80082e2:	9019      	str	r0, [sp, #100]	@ 0x64
 80082e4:	e7bf      	b.n	8008266 <_strtod_l+0x146>
 80082e6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80082e8:	1c5a      	adds	r2, r3, #1
 80082ea:	9219      	str	r2, [sp, #100]	@ 0x64
 80082ec:	785a      	ldrb	r2, [r3, #1]
 80082ee:	f1b9 0f00 	cmp.w	r9, #0
 80082f2:	d03b      	beq.n	800836c <_strtod_l+0x24c>
 80082f4:	900a      	str	r0, [sp, #40]	@ 0x28
 80082f6:	464d      	mov	r5, r9
 80082f8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80082fc:	2b09      	cmp	r3, #9
 80082fe:	d912      	bls.n	8008326 <_strtod_l+0x206>
 8008300:	2301      	movs	r3, #1
 8008302:	e7c2      	b.n	800828a <_strtod_l+0x16a>
 8008304:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008306:	1c5a      	adds	r2, r3, #1
 8008308:	9219      	str	r2, [sp, #100]	@ 0x64
 800830a:	785a      	ldrb	r2, [r3, #1]
 800830c:	3001      	adds	r0, #1
 800830e:	2a30      	cmp	r2, #48	@ 0x30
 8008310:	d0f8      	beq.n	8008304 <_strtod_l+0x1e4>
 8008312:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008316:	2b08      	cmp	r3, #8
 8008318:	f200 84d2 	bhi.w	8008cc0 <_strtod_l+0xba0>
 800831c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800831e:	900a      	str	r0, [sp, #40]	@ 0x28
 8008320:	2000      	movs	r0, #0
 8008322:	930c      	str	r3, [sp, #48]	@ 0x30
 8008324:	4605      	mov	r5, r0
 8008326:	3a30      	subs	r2, #48	@ 0x30
 8008328:	f100 0301 	add.w	r3, r0, #1
 800832c:	d018      	beq.n	8008360 <_strtod_l+0x240>
 800832e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008330:	4419      	add	r1, r3
 8008332:	910a      	str	r1, [sp, #40]	@ 0x28
 8008334:	462e      	mov	r6, r5
 8008336:	f04f 0e0a 	mov.w	lr, #10
 800833a:	1c71      	adds	r1, r6, #1
 800833c:	eba1 0c05 	sub.w	ip, r1, r5
 8008340:	4563      	cmp	r3, ip
 8008342:	dc15      	bgt.n	8008370 <_strtod_l+0x250>
 8008344:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8008348:	182b      	adds	r3, r5, r0
 800834a:	2b08      	cmp	r3, #8
 800834c:	f105 0501 	add.w	r5, r5, #1
 8008350:	4405      	add	r5, r0
 8008352:	dc1a      	bgt.n	800838a <_strtod_l+0x26a>
 8008354:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008356:	230a      	movs	r3, #10
 8008358:	fb03 2301 	mla	r3, r3, r1, r2
 800835c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800835e:	2300      	movs	r3, #0
 8008360:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008362:	1c51      	adds	r1, r2, #1
 8008364:	9119      	str	r1, [sp, #100]	@ 0x64
 8008366:	7852      	ldrb	r2, [r2, #1]
 8008368:	4618      	mov	r0, r3
 800836a:	e7c5      	b.n	80082f8 <_strtod_l+0x1d8>
 800836c:	4648      	mov	r0, r9
 800836e:	e7ce      	b.n	800830e <_strtod_l+0x1ee>
 8008370:	2e08      	cmp	r6, #8
 8008372:	dc05      	bgt.n	8008380 <_strtod_l+0x260>
 8008374:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008376:	fb0e f606 	mul.w	r6, lr, r6
 800837a:	960b      	str	r6, [sp, #44]	@ 0x2c
 800837c:	460e      	mov	r6, r1
 800837e:	e7dc      	b.n	800833a <_strtod_l+0x21a>
 8008380:	2910      	cmp	r1, #16
 8008382:	bfd8      	it	le
 8008384:	fb0e f707 	mulle.w	r7, lr, r7
 8008388:	e7f8      	b.n	800837c <_strtod_l+0x25c>
 800838a:	2b0f      	cmp	r3, #15
 800838c:	bfdc      	itt	le
 800838e:	230a      	movle	r3, #10
 8008390:	fb03 2707 	mlale	r7, r3, r7, r2
 8008394:	e7e3      	b.n	800835e <_strtod_l+0x23e>
 8008396:	2300      	movs	r3, #0
 8008398:	930a      	str	r3, [sp, #40]	@ 0x28
 800839a:	2301      	movs	r3, #1
 800839c:	e77a      	b.n	8008294 <_strtod_l+0x174>
 800839e:	f04f 0c00 	mov.w	ip, #0
 80083a2:	1ca2      	adds	r2, r4, #2
 80083a4:	9219      	str	r2, [sp, #100]	@ 0x64
 80083a6:	78a2      	ldrb	r2, [r4, #2]
 80083a8:	e782      	b.n	80082b0 <_strtod_l+0x190>
 80083aa:	f04f 0c01 	mov.w	ip, #1
 80083ae:	e7f8      	b.n	80083a2 <_strtod_l+0x282>
 80083b0:	0800bf38 	.word	0x0800bf38
 80083b4:	0800bd85 	.word	0x0800bd85
 80083b8:	7ff00000 	.word	0x7ff00000
 80083bc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80083be:	1c51      	adds	r1, r2, #1
 80083c0:	9119      	str	r1, [sp, #100]	@ 0x64
 80083c2:	7852      	ldrb	r2, [r2, #1]
 80083c4:	2a30      	cmp	r2, #48	@ 0x30
 80083c6:	d0f9      	beq.n	80083bc <_strtod_l+0x29c>
 80083c8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80083cc:	2908      	cmp	r1, #8
 80083ce:	f63f af75 	bhi.w	80082bc <_strtod_l+0x19c>
 80083d2:	3a30      	subs	r2, #48	@ 0x30
 80083d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80083d6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80083d8:	920f      	str	r2, [sp, #60]	@ 0x3c
 80083da:	f04f 080a 	mov.w	r8, #10
 80083de:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80083e0:	1c56      	adds	r6, r2, #1
 80083e2:	9619      	str	r6, [sp, #100]	@ 0x64
 80083e4:	7852      	ldrb	r2, [r2, #1]
 80083e6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80083ea:	f1be 0f09 	cmp.w	lr, #9
 80083ee:	d939      	bls.n	8008464 <_strtod_l+0x344>
 80083f0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80083f2:	1a76      	subs	r6, r6, r1
 80083f4:	2e08      	cmp	r6, #8
 80083f6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80083fa:	dc03      	bgt.n	8008404 <_strtod_l+0x2e4>
 80083fc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80083fe:	4588      	cmp	r8, r1
 8008400:	bfa8      	it	ge
 8008402:	4688      	movge	r8, r1
 8008404:	f1bc 0f00 	cmp.w	ip, #0
 8008408:	d001      	beq.n	800840e <_strtod_l+0x2ee>
 800840a:	f1c8 0800 	rsb	r8, r8, #0
 800840e:	2d00      	cmp	r5, #0
 8008410:	d14e      	bne.n	80084b0 <_strtod_l+0x390>
 8008412:	9908      	ldr	r1, [sp, #32]
 8008414:	4308      	orrs	r0, r1
 8008416:	f47f aebc 	bne.w	8008192 <_strtod_l+0x72>
 800841a:	2b00      	cmp	r3, #0
 800841c:	f47f aed4 	bne.w	80081c8 <_strtod_l+0xa8>
 8008420:	2a69      	cmp	r2, #105	@ 0x69
 8008422:	d028      	beq.n	8008476 <_strtod_l+0x356>
 8008424:	dc25      	bgt.n	8008472 <_strtod_l+0x352>
 8008426:	2a49      	cmp	r2, #73	@ 0x49
 8008428:	d025      	beq.n	8008476 <_strtod_l+0x356>
 800842a:	2a4e      	cmp	r2, #78	@ 0x4e
 800842c:	f47f aecc 	bne.w	80081c8 <_strtod_l+0xa8>
 8008430:	499a      	ldr	r1, [pc, #616]	@ (800869c <_strtod_l+0x57c>)
 8008432:	a819      	add	r0, sp, #100	@ 0x64
 8008434:	f001 fe46 	bl	800a0c4 <__match>
 8008438:	2800      	cmp	r0, #0
 800843a:	f43f aec5 	beq.w	80081c8 <_strtod_l+0xa8>
 800843e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	2b28      	cmp	r3, #40	@ 0x28
 8008444:	d12e      	bne.n	80084a4 <_strtod_l+0x384>
 8008446:	4996      	ldr	r1, [pc, #600]	@ (80086a0 <_strtod_l+0x580>)
 8008448:	aa1c      	add	r2, sp, #112	@ 0x70
 800844a:	a819      	add	r0, sp, #100	@ 0x64
 800844c:	f001 fe4e 	bl	800a0ec <__hexnan>
 8008450:	2805      	cmp	r0, #5
 8008452:	d127      	bne.n	80084a4 <_strtod_l+0x384>
 8008454:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008456:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800845a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800845e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008462:	e696      	b.n	8008192 <_strtod_l+0x72>
 8008464:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008466:	fb08 2101 	mla	r1, r8, r1, r2
 800846a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800846e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008470:	e7b5      	b.n	80083de <_strtod_l+0x2be>
 8008472:	2a6e      	cmp	r2, #110	@ 0x6e
 8008474:	e7da      	b.n	800842c <_strtod_l+0x30c>
 8008476:	498b      	ldr	r1, [pc, #556]	@ (80086a4 <_strtod_l+0x584>)
 8008478:	a819      	add	r0, sp, #100	@ 0x64
 800847a:	f001 fe23 	bl	800a0c4 <__match>
 800847e:	2800      	cmp	r0, #0
 8008480:	f43f aea2 	beq.w	80081c8 <_strtod_l+0xa8>
 8008484:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008486:	4988      	ldr	r1, [pc, #544]	@ (80086a8 <_strtod_l+0x588>)
 8008488:	3b01      	subs	r3, #1
 800848a:	a819      	add	r0, sp, #100	@ 0x64
 800848c:	9319      	str	r3, [sp, #100]	@ 0x64
 800848e:	f001 fe19 	bl	800a0c4 <__match>
 8008492:	b910      	cbnz	r0, 800849a <_strtod_l+0x37a>
 8008494:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008496:	3301      	adds	r3, #1
 8008498:	9319      	str	r3, [sp, #100]	@ 0x64
 800849a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 80086b8 <_strtod_l+0x598>
 800849e:	f04f 0a00 	mov.w	sl, #0
 80084a2:	e676      	b.n	8008192 <_strtod_l+0x72>
 80084a4:	4881      	ldr	r0, [pc, #516]	@ (80086ac <_strtod_l+0x58c>)
 80084a6:	f000 fd1b 	bl	8008ee0 <nan>
 80084aa:	ec5b ab10 	vmov	sl, fp, d0
 80084ae:	e670      	b.n	8008192 <_strtod_l+0x72>
 80084b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80084b2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80084b4:	eba8 0303 	sub.w	r3, r8, r3
 80084b8:	f1b9 0f00 	cmp.w	r9, #0
 80084bc:	bf08      	it	eq
 80084be:	46a9      	moveq	r9, r5
 80084c0:	2d10      	cmp	r5, #16
 80084c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80084c4:	462c      	mov	r4, r5
 80084c6:	bfa8      	it	ge
 80084c8:	2410      	movge	r4, #16
 80084ca:	f7f8 f81b 	bl	8000504 <__aeabi_ui2d>
 80084ce:	2d09      	cmp	r5, #9
 80084d0:	4682      	mov	sl, r0
 80084d2:	468b      	mov	fp, r1
 80084d4:	dc13      	bgt.n	80084fe <_strtod_l+0x3de>
 80084d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084d8:	2b00      	cmp	r3, #0
 80084da:	f43f ae5a 	beq.w	8008192 <_strtod_l+0x72>
 80084de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084e0:	dd78      	ble.n	80085d4 <_strtod_l+0x4b4>
 80084e2:	2b16      	cmp	r3, #22
 80084e4:	dc5f      	bgt.n	80085a6 <_strtod_l+0x486>
 80084e6:	4972      	ldr	r1, [pc, #456]	@ (80086b0 <_strtod_l+0x590>)
 80084e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80084ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084f0:	4652      	mov	r2, sl
 80084f2:	465b      	mov	r3, fp
 80084f4:	f7f8 f880 	bl	80005f8 <__aeabi_dmul>
 80084f8:	4682      	mov	sl, r0
 80084fa:	468b      	mov	fp, r1
 80084fc:	e649      	b.n	8008192 <_strtod_l+0x72>
 80084fe:	4b6c      	ldr	r3, [pc, #432]	@ (80086b0 <_strtod_l+0x590>)
 8008500:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008504:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008508:	f7f8 f876 	bl	80005f8 <__aeabi_dmul>
 800850c:	4682      	mov	sl, r0
 800850e:	4638      	mov	r0, r7
 8008510:	468b      	mov	fp, r1
 8008512:	f7f7 fff7 	bl	8000504 <__aeabi_ui2d>
 8008516:	4602      	mov	r2, r0
 8008518:	460b      	mov	r3, r1
 800851a:	4650      	mov	r0, sl
 800851c:	4659      	mov	r1, fp
 800851e:	f7f7 feb5 	bl	800028c <__adddf3>
 8008522:	2d0f      	cmp	r5, #15
 8008524:	4682      	mov	sl, r0
 8008526:	468b      	mov	fp, r1
 8008528:	ddd5      	ble.n	80084d6 <_strtod_l+0x3b6>
 800852a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800852c:	1b2c      	subs	r4, r5, r4
 800852e:	441c      	add	r4, r3
 8008530:	2c00      	cmp	r4, #0
 8008532:	f340 8093 	ble.w	800865c <_strtod_l+0x53c>
 8008536:	f014 030f 	ands.w	r3, r4, #15
 800853a:	d00a      	beq.n	8008552 <_strtod_l+0x432>
 800853c:	495c      	ldr	r1, [pc, #368]	@ (80086b0 <_strtod_l+0x590>)
 800853e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008542:	4652      	mov	r2, sl
 8008544:	465b      	mov	r3, fp
 8008546:	e9d1 0100 	ldrd	r0, r1, [r1]
 800854a:	f7f8 f855 	bl	80005f8 <__aeabi_dmul>
 800854e:	4682      	mov	sl, r0
 8008550:	468b      	mov	fp, r1
 8008552:	f034 040f 	bics.w	r4, r4, #15
 8008556:	d073      	beq.n	8008640 <_strtod_l+0x520>
 8008558:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800855c:	dd49      	ble.n	80085f2 <_strtod_l+0x4d2>
 800855e:	2400      	movs	r4, #0
 8008560:	46a0      	mov	r8, r4
 8008562:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008564:	46a1      	mov	r9, r4
 8008566:	9a05      	ldr	r2, [sp, #20]
 8008568:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 80086b8 <_strtod_l+0x598>
 800856c:	2322      	movs	r3, #34	@ 0x22
 800856e:	6013      	str	r3, [r2, #0]
 8008570:	f04f 0a00 	mov.w	sl, #0
 8008574:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008576:	2b00      	cmp	r3, #0
 8008578:	f43f ae0b 	beq.w	8008192 <_strtod_l+0x72>
 800857c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800857e:	9805      	ldr	r0, [sp, #20]
 8008580:	f002 f95a 	bl	800a838 <_Bfree>
 8008584:	9805      	ldr	r0, [sp, #20]
 8008586:	4649      	mov	r1, r9
 8008588:	f002 f956 	bl	800a838 <_Bfree>
 800858c:	9805      	ldr	r0, [sp, #20]
 800858e:	4641      	mov	r1, r8
 8008590:	f002 f952 	bl	800a838 <_Bfree>
 8008594:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008596:	9805      	ldr	r0, [sp, #20]
 8008598:	f002 f94e 	bl	800a838 <_Bfree>
 800859c:	9805      	ldr	r0, [sp, #20]
 800859e:	4621      	mov	r1, r4
 80085a0:	f002 f94a 	bl	800a838 <_Bfree>
 80085a4:	e5f5      	b.n	8008192 <_strtod_l+0x72>
 80085a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80085a8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80085ac:	4293      	cmp	r3, r2
 80085ae:	dbbc      	blt.n	800852a <_strtod_l+0x40a>
 80085b0:	4c3f      	ldr	r4, [pc, #252]	@ (80086b0 <_strtod_l+0x590>)
 80085b2:	f1c5 050f 	rsb	r5, r5, #15
 80085b6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80085ba:	4652      	mov	r2, sl
 80085bc:	465b      	mov	r3, fp
 80085be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085c2:	f7f8 f819 	bl	80005f8 <__aeabi_dmul>
 80085c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085c8:	1b5d      	subs	r5, r3, r5
 80085ca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80085ce:	e9d4 2300 	ldrd	r2, r3, [r4]
 80085d2:	e78f      	b.n	80084f4 <_strtod_l+0x3d4>
 80085d4:	3316      	adds	r3, #22
 80085d6:	dba8      	blt.n	800852a <_strtod_l+0x40a>
 80085d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80085da:	eba3 0808 	sub.w	r8, r3, r8
 80085de:	4b34      	ldr	r3, [pc, #208]	@ (80086b0 <_strtod_l+0x590>)
 80085e0:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80085e4:	e9d8 2300 	ldrd	r2, r3, [r8]
 80085e8:	4650      	mov	r0, sl
 80085ea:	4659      	mov	r1, fp
 80085ec:	f7f8 f92e 	bl	800084c <__aeabi_ddiv>
 80085f0:	e782      	b.n	80084f8 <_strtod_l+0x3d8>
 80085f2:	2300      	movs	r3, #0
 80085f4:	4f2f      	ldr	r7, [pc, #188]	@ (80086b4 <_strtod_l+0x594>)
 80085f6:	1124      	asrs	r4, r4, #4
 80085f8:	4650      	mov	r0, sl
 80085fa:	4659      	mov	r1, fp
 80085fc:	461e      	mov	r6, r3
 80085fe:	2c01      	cmp	r4, #1
 8008600:	dc21      	bgt.n	8008646 <_strtod_l+0x526>
 8008602:	b10b      	cbz	r3, 8008608 <_strtod_l+0x4e8>
 8008604:	4682      	mov	sl, r0
 8008606:	468b      	mov	fp, r1
 8008608:	492a      	ldr	r1, [pc, #168]	@ (80086b4 <_strtod_l+0x594>)
 800860a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800860e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008612:	4652      	mov	r2, sl
 8008614:	465b      	mov	r3, fp
 8008616:	e9d1 0100 	ldrd	r0, r1, [r1]
 800861a:	f7f7 ffed 	bl	80005f8 <__aeabi_dmul>
 800861e:	4b26      	ldr	r3, [pc, #152]	@ (80086b8 <_strtod_l+0x598>)
 8008620:	460a      	mov	r2, r1
 8008622:	400b      	ands	r3, r1
 8008624:	4925      	ldr	r1, [pc, #148]	@ (80086bc <_strtod_l+0x59c>)
 8008626:	428b      	cmp	r3, r1
 8008628:	4682      	mov	sl, r0
 800862a:	d898      	bhi.n	800855e <_strtod_l+0x43e>
 800862c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008630:	428b      	cmp	r3, r1
 8008632:	bf86      	itte	hi
 8008634:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 80086c0 <_strtod_l+0x5a0>
 8008638:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800863c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008640:	2300      	movs	r3, #0
 8008642:	9308      	str	r3, [sp, #32]
 8008644:	e076      	b.n	8008734 <_strtod_l+0x614>
 8008646:	07e2      	lsls	r2, r4, #31
 8008648:	d504      	bpl.n	8008654 <_strtod_l+0x534>
 800864a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800864e:	f7f7 ffd3 	bl	80005f8 <__aeabi_dmul>
 8008652:	2301      	movs	r3, #1
 8008654:	3601      	adds	r6, #1
 8008656:	1064      	asrs	r4, r4, #1
 8008658:	3708      	adds	r7, #8
 800865a:	e7d0      	b.n	80085fe <_strtod_l+0x4de>
 800865c:	d0f0      	beq.n	8008640 <_strtod_l+0x520>
 800865e:	4264      	negs	r4, r4
 8008660:	f014 020f 	ands.w	r2, r4, #15
 8008664:	d00a      	beq.n	800867c <_strtod_l+0x55c>
 8008666:	4b12      	ldr	r3, [pc, #72]	@ (80086b0 <_strtod_l+0x590>)
 8008668:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800866c:	4650      	mov	r0, sl
 800866e:	4659      	mov	r1, fp
 8008670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008674:	f7f8 f8ea 	bl	800084c <__aeabi_ddiv>
 8008678:	4682      	mov	sl, r0
 800867a:	468b      	mov	fp, r1
 800867c:	1124      	asrs	r4, r4, #4
 800867e:	d0df      	beq.n	8008640 <_strtod_l+0x520>
 8008680:	2c1f      	cmp	r4, #31
 8008682:	dd1f      	ble.n	80086c4 <_strtod_l+0x5a4>
 8008684:	2400      	movs	r4, #0
 8008686:	46a0      	mov	r8, r4
 8008688:	940b      	str	r4, [sp, #44]	@ 0x2c
 800868a:	46a1      	mov	r9, r4
 800868c:	9a05      	ldr	r2, [sp, #20]
 800868e:	2322      	movs	r3, #34	@ 0x22
 8008690:	f04f 0a00 	mov.w	sl, #0
 8008694:	f04f 0b00 	mov.w	fp, #0
 8008698:	6013      	str	r3, [r2, #0]
 800869a:	e76b      	b.n	8008574 <_strtod_l+0x454>
 800869c:	0800bd59 	.word	0x0800bd59
 80086a0:	0800bf24 	.word	0x0800bf24
 80086a4:	0800bd51 	.word	0x0800bd51
 80086a8:	0800bd92 	.word	0x0800bd92
 80086ac:	0800bf21 	.word	0x0800bf21
 80086b0:	0800c0b0 	.word	0x0800c0b0
 80086b4:	0800c088 	.word	0x0800c088
 80086b8:	7ff00000 	.word	0x7ff00000
 80086bc:	7ca00000 	.word	0x7ca00000
 80086c0:	7fefffff 	.word	0x7fefffff
 80086c4:	f014 0310 	ands.w	r3, r4, #16
 80086c8:	bf18      	it	ne
 80086ca:	236a      	movne	r3, #106	@ 0x6a
 80086cc:	4ea9      	ldr	r6, [pc, #676]	@ (8008974 <_strtod_l+0x854>)
 80086ce:	9308      	str	r3, [sp, #32]
 80086d0:	4650      	mov	r0, sl
 80086d2:	4659      	mov	r1, fp
 80086d4:	2300      	movs	r3, #0
 80086d6:	07e7      	lsls	r7, r4, #31
 80086d8:	d504      	bpl.n	80086e4 <_strtod_l+0x5c4>
 80086da:	e9d6 2300 	ldrd	r2, r3, [r6]
 80086de:	f7f7 ff8b 	bl	80005f8 <__aeabi_dmul>
 80086e2:	2301      	movs	r3, #1
 80086e4:	1064      	asrs	r4, r4, #1
 80086e6:	f106 0608 	add.w	r6, r6, #8
 80086ea:	d1f4      	bne.n	80086d6 <_strtod_l+0x5b6>
 80086ec:	b10b      	cbz	r3, 80086f2 <_strtod_l+0x5d2>
 80086ee:	4682      	mov	sl, r0
 80086f0:	468b      	mov	fp, r1
 80086f2:	9b08      	ldr	r3, [sp, #32]
 80086f4:	b1b3      	cbz	r3, 8008724 <_strtod_l+0x604>
 80086f6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80086fa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80086fe:	2b00      	cmp	r3, #0
 8008700:	4659      	mov	r1, fp
 8008702:	dd0f      	ble.n	8008724 <_strtod_l+0x604>
 8008704:	2b1f      	cmp	r3, #31
 8008706:	dd56      	ble.n	80087b6 <_strtod_l+0x696>
 8008708:	2b34      	cmp	r3, #52	@ 0x34
 800870a:	bfde      	ittt	le
 800870c:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8008710:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008714:	4093      	lslle	r3, r2
 8008716:	f04f 0a00 	mov.w	sl, #0
 800871a:	bfcc      	ite	gt
 800871c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008720:	ea03 0b01 	andle.w	fp, r3, r1
 8008724:	2200      	movs	r2, #0
 8008726:	2300      	movs	r3, #0
 8008728:	4650      	mov	r0, sl
 800872a:	4659      	mov	r1, fp
 800872c:	f7f8 f9cc 	bl	8000ac8 <__aeabi_dcmpeq>
 8008730:	2800      	cmp	r0, #0
 8008732:	d1a7      	bne.n	8008684 <_strtod_l+0x564>
 8008734:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008736:	9300      	str	r3, [sp, #0]
 8008738:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800873a:	9805      	ldr	r0, [sp, #20]
 800873c:	462b      	mov	r3, r5
 800873e:	464a      	mov	r2, r9
 8008740:	f002 f8e2 	bl	800a908 <__s2b>
 8008744:	900b      	str	r0, [sp, #44]	@ 0x2c
 8008746:	2800      	cmp	r0, #0
 8008748:	f43f af09 	beq.w	800855e <_strtod_l+0x43e>
 800874c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800874e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008750:	2a00      	cmp	r2, #0
 8008752:	eba3 0308 	sub.w	r3, r3, r8
 8008756:	bfa8      	it	ge
 8008758:	2300      	movge	r3, #0
 800875a:	9312      	str	r3, [sp, #72]	@ 0x48
 800875c:	2400      	movs	r4, #0
 800875e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008762:	9316      	str	r3, [sp, #88]	@ 0x58
 8008764:	46a0      	mov	r8, r4
 8008766:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008768:	9805      	ldr	r0, [sp, #20]
 800876a:	6859      	ldr	r1, [r3, #4]
 800876c:	f002 f824 	bl	800a7b8 <_Balloc>
 8008770:	4681      	mov	r9, r0
 8008772:	2800      	cmp	r0, #0
 8008774:	f43f aef7 	beq.w	8008566 <_strtod_l+0x446>
 8008778:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800877a:	691a      	ldr	r2, [r3, #16]
 800877c:	3202      	adds	r2, #2
 800877e:	f103 010c 	add.w	r1, r3, #12
 8008782:	0092      	lsls	r2, r2, #2
 8008784:	300c      	adds	r0, #12
 8008786:	f000 fb9b 	bl	8008ec0 <memcpy>
 800878a:	ec4b ab10 	vmov	d0, sl, fp
 800878e:	9805      	ldr	r0, [sp, #20]
 8008790:	aa1c      	add	r2, sp, #112	@ 0x70
 8008792:	a91b      	add	r1, sp, #108	@ 0x6c
 8008794:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008798:	f002 fbea 	bl	800af70 <__d2b>
 800879c:	901a      	str	r0, [sp, #104]	@ 0x68
 800879e:	2800      	cmp	r0, #0
 80087a0:	f43f aee1 	beq.w	8008566 <_strtod_l+0x446>
 80087a4:	9805      	ldr	r0, [sp, #20]
 80087a6:	2101      	movs	r1, #1
 80087a8:	f002 f944 	bl	800aa34 <__i2b>
 80087ac:	4680      	mov	r8, r0
 80087ae:	b948      	cbnz	r0, 80087c4 <_strtod_l+0x6a4>
 80087b0:	f04f 0800 	mov.w	r8, #0
 80087b4:	e6d7      	b.n	8008566 <_strtod_l+0x446>
 80087b6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80087ba:	fa02 f303 	lsl.w	r3, r2, r3
 80087be:	ea03 0a0a 	and.w	sl, r3, sl
 80087c2:	e7af      	b.n	8008724 <_strtod_l+0x604>
 80087c4:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80087c6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80087c8:	2d00      	cmp	r5, #0
 80087ca:	bfab      	itete	ge
 80087cc:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80087ce:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80087d0:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80087d2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80087d4:	bfac      	ite	ge
 80087d6:	18ef      	addge	r7, r5, r3
 80087d8:	1b5e      	sublt	r6, r3, r5
 80087da:	9b08      	ldr	r3, [sp, #32]
 80087dc:	1aed      	subs	r5, r5, r3
 80087de:	4415      	add	r5, r2
 80087e0:	4b65      	ldr	r3, [pc, #404]	@ (8008978 <_strtod_l+0x858>)
 80087e2:	3d01      	subs	r5, #1
 80087e4:	429d      	cmp	r5, r3
 80087e6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80087ea:	da50      	bge.n	800888e <_strtod_l+0x76e>
 80087ec:	1b5b      	subs	r3, r3, r5
 80087ee:	2b1f      	cmp	r3, #31
 80087f0:	eba2 0203 	sub.w	r2, r2, r3
 80087f4:	f04f 0101 	mov.w	r1, #1
 80087f8:	dc3d      	bgt.n	8008876 <_strtod_l+0x756>
 80087fa:	fa01 f303 	lsl.w	r3, r1, r3
 80087fe:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008800:	2300      	movs	r3, #0
 8008802:	9310      	str	r3, [sp, #64]	@ 0x40
 8008804:	18bd      	adds	r5, r7, r2
 8008806:	9b08      	ldr	r3, [sp, #32]
 8008808:	42af      	cmp	r7, r5
 800880a:	4416      	add	r6, r2
 800880c:	441e      	add	r6, r3
 800880e:	463b      	mov	r3, r7
 8008810:	bfa8      	it	ge
 8008812:	462b      	movge	r3, r5
 8008814:	42b3      	cmp	r3, r6
 8008816:	bfa8      	it	ge
 8008818:	4633      	movge	r3, r6
 800881a:	2b00      	cmp	r3, #0
 800881c:	bfc2      	ittt	gt
 800881e:	1aed      	subgt	r5, r5, r3
 8008820:	1af6      	subgt	r6, r6, r3
 8008822:	1aff      	subgt	r7, r7, r3
 8008824:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008826:	2b00      	cmp	r3, #0
 8008828:	dd16      	ble.n	8008858 <_strtod_l+0x738>
 800882a:	4641      	mov	r1, r8
 800882c:	9805      	ldr	r0, [sp, #20]
 800882e:	461a      	mov	r2, r3
 8008830:	f002 f9b8 	bl	800aba4 <__pow5mult>
 8008834:	4680      	mov	r8, r0
 8008836:	2800      	cmp	r0, #0
 8008838:	d0ba      	beq.n	80087b0 <_strtod_l+0x690>
 800883a:	4601      	mov	r1, r0
 800883c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800883e:	9805      	ldr	r0, [sp, #20]
 8008840:	f002 f90e 	bl	800aa60 <__multiply>
 8008844:	900a      	str	r0, [sp, #40]	@ 0x28
 8008846:	2800      	cmp	r0, #0
 8008848:	f43f ae8d 	beq.w	8008566 <_strtod_l+0x446>
 800884c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800884e:	9805      	ldr	r0, [sp, #20]
 8008850:	f001 fff2 	bl	800a838 <_Bfree>
 8008854:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008856:	931a      	str	r3, [sp, #104]	@ 0x68
 8008858:	2d00      	cmp	r5, #0
 800885a:	dc1d      	bgt.n	8008898 <_strtod_l+0x778>
 800885c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800885e:	2b00      	cmp	r3, #0
 8008860:	dd23      	ble.n	80088aa <_strtod_l+0x78a>
 8008862:	4649      	mov	r1, r9
 8008864:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008866:	9805      	ldr	r0, [sp, #20]
 8008868:	f002 f99c 	bl	800aba4 <__pow5mult>
 800886c:	4681      	mov	r9, r0
 800886e:	b9e0      	cbnz	r0, 80088aa <_strtod_l+0x78a>
 8008870:	f04f 0900 	mov.w	r9, #0
 8008874:	e677      	b.n	8008566 <_strtod_l+0x446>
 8008876:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800887a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800887e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008882:	35e2      	adds	r5, #226	@ 0xe2
 8008884:	fa01 f305 	lsl.w	r3, r1, r5
 8008888:	9310      	str	r3, [sp, #64]	@ 0x40
 800888a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800888c:	e7ba      	b.n	8008804 <_strtod_l+0x6e4>
 800888e:	2300      	movs	r3, #0
 8008890:	9310      	str	r3, [sp, #64]	@ 0x40
 8008892:	2301      	movs	r3, #1
 8008894:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008896:	e7b5      	b.n	8008804 <_strtod_l+0x6e4>
 8008898:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800889a:	9805      	ldr	r0, [sp, #20]
 800889c:	462a      	mov	r2, r5
 800889e:	f002 f9db 	bl	800ac58 <__lshift>
 80088a2:	901a      	str	r0, [sp, #104]	@ 0x68
 80088a4:	2800      	cmp	r0, #0
 80088a6:	d1d9      	bne.n	800885c <_strtod_l+0x73c>
 80088a8:	e65d      	b.n	8008566 <_strtod_l+0x446>
 80088aa:	2e00      	cmp	r6, #0
 80088ac:	dd07      	ble.n	80088be <_strtod_l+0x79e>
 80088ae:	4649      	mov	r1, r9
 80088b0:	9805      	ldr	r0, [sp, #20]
 80088b2:	4632      	mov	r2, r6
 80088b4:	f002 f9d0 	bl	800ac58 <__lshift>
 80088b8:	4681      	mov	r9, r0
 80088ba:	2800      	cmp	r0, #0
 80088bc:	d0d8      	beq.n	8008870 <_strtod_l+0x750>
 80088be:	2f00      	cmp	r7, #0
 80088c0:	dd08      	ble.n	80088d4 <_strtod_l+0x7b4>
 80088c2:	4641      	mov	r1, r8
 80088c4:	9805      	ldr	r0, [sp, #20]
 80088c6:	463a      	mov	r2, r7
 80088c8:	f002 f9c6 	bl	800ac58 <__lshift>
 80088cc:	4680      	mov	r8, r0
 80088ce:	2800      	cmp	r0, #0
 80088d0:	f43f ae49 	beq.w	8008566 <_strtod_l+0x446>
 80088d4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80088d6:	9805      	ldr	r0, [sp, #20]
 80088d8:	464a      	mov	r2, r9
 80088da:	f002 fa45 	bl	800ad68 <__mdiff>
 80088de:	4604      	mov	r4, r0
 80088e0:	2800      	cmp	r0, #0
 80088e2:	f43f ae40 	beq.w	8008566 <_strtod_l+0x446>
 80088e6:	68c3      	ldr	r3, [r0, #12]
 80088e8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80088ea:	2300      	movs	r3, #0
 80088ec:	60c3      	str	r3, [r0, #12]
 80088ee:	4641      	mov	r1, r8
 80088f0:	f002 fa1e 	bl	800ad30 <__mcmp>
 80088f4:	2800      	cmp	r0, #0
 80088f6:	da45      	bge.n	8008984 <_strtod_l+0x864>
 80088f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80088fa:	ea53 030a 	orrs.w	r3, r3, sl
 80088fe:	d16b      	bne.n	80089d8 <_strtod_l+0x8b8>
 8008900:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008904:	2b00      	cmp	r3, #0
 8008906:	d167      	bne.n	80089d8 <_strtod_l+0x8b8>
 8008908:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800890c:	0d1b      	lsrs	r3, r3, #20
 800890e:	051b      	lsls	r3, r3, #20
 8008910:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008914:	d960      	bls.n	80089d8 <_strtod_l+0x8b8>
 8008916:	6963      	ldr	r3, [r4, #20]
 8008918:	b913      	cbnz	r3, 8008920 <_strtod_l+0x800>
 800891a:	6923      	ldr	r3, [r4, #16]
 800891c:	2b01      	cmp	r3, #1
 800891e:	dd5b      	ble.n	80089d8 <_strtod_l+0x8b8>
 8008920:	4621      	mov	r1, r4
 8008922:	2201      	movs	r2, #1
 8008924:	9805      	ldr	r0, [sp, #20]
 8008926:	f002 f997 	bl	800ac58 <__lshift>
 800892a:	4641      	mov	r1, r8
 800892c:	4604      	mov	r4, r0
 800892e:	f002 f9ff 	bl	800ad30 <__mcmp>
 8008932:	2800      	cmp	r0, #0
 8008934:	dd50      	ble.n	80089d8 <_strtod_l+0x8b8>
 8008936:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800893a:	9a08      	ldr	r2, [sp, #32]
 800893c:	0d1b      	lsrs	r3, r3, #20
 800893e:	051b      	lsls	r3, r3, #20
 8008940:	2a00      	cmp	r2, #0
 8008942:	d06a      	beq.n	8008a1a <_strtod_l+0x8fa>
 8008944:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008948:	d867      	bhi.n	8008a1a <_strtod_l+0x8fa>
 800894a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800894e:	f67f ae9d 	bls.w	800868c <_strtod_l+0x56c>
 8008952:	4b0a      	ldr	r3, [pc, #40]	@ (800897c <_strtod_l+0x85c>)
 8008954:	4650      	mov	r0, sl
 8008956:	4659      	mov	r1, fp
 8008958:	2200      	movs	r2, #0
 800895a:	f7f7 fe4d 	bl	80005f8 <__aeabi_dmul>
 800895e:	4b08      	ldr	r3, [pc, #32]	@ (8008980 <_strtod_l+0x860>)
 8008960:	400b      	ands	r3, r1
 8008962:	4682      	mov	sl, r0
 8008964:	468b      	mov	fp, r1
 8008966:	2b00      	cmp	r3, #0
 8008968:	f47f ae08 	bne.w	800857c <_strtod_l+0x45c>
 800896c:	9a05      	ldr	r2, [sp, #20]
 800896e:	2322      	movs	r3, #34	@ 0x22
 8008970:	6013      	str	r3, [r2, #0]
 8008972:	e603      	b.n	800857c <_strtod_l+0x45c>
 8008974:	0800bf50 	.word	0x0800bf50
 8008978:	fffffc02 	.word	0xfffffc02
 800897c:	39500000 	.word	0x39500000
 8008980:	7ff00000 	.word	0x7ff00000
 8008984:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8008988:	d165      	bne.n	8008a56 <_strtod_l+0x936>
 800898a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800898c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008990:	b35a      	cbz	r2, 80089ea <_strtod_l+0x8ca>
 8008992:	4a9f      	ldr	r2, [pc, #636]	@ (8008c10 <_strtod_l+0xaf0>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d12b      	bne.n	80089f0 <_strtod_l+0x8d0>
 8008998:	9b08      	ldr	r3, [sp, #32]
 800899a:	4651      	mov	r1, sl
 800899c:	b303      	cbz	r3, 80089e0 <_strtod_l+0x8c0>
 800899e:	4b9d      	ldr	r3, [pc, #628]	@ (8008c14 <_strtod_l+0xaf4>)
 80089a0:	465a      	mov	r2, fp
 80089a2:	4013      	ands	r3, r2
 80089a4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80089a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80089ac:	d81b      	bhi.n	80089e6 <_strtod_l+0x8c6>
 80089ae:	0d1b      	lsrs	r3, r3, #20
 80089b0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80089b4:	fa02 f303 	lsl.w	r3, r2, r3
 80089b8:	4299      	cmp	r1, r3
 80089ba:	d119      	bne.n	80089f0 <_strtod_l+0x8d0>
 80089bc:	4b96      	ldr	r3, [pc, #600]	@ (8008c18 <_strtod_l+0xaf8>)
 80089be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d102      	bne.n	80089ca <_strtod_l+0x8aa>
 80089c4:	3101      	adds	r1, #1
 80089c6:	f43f adce 	beq.w	8008566 <_strtod_l+0x446>
 80089ca:	4b92      	ldr	r3, [pc, #584]	@ (8008c14 <_strtod_l+0xaf4>)
 80089cc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80089ce:	401a      	ands	r2, r3
 80089d0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80089d4:	f04f 0a00 	mov.w	sl, #0
 80089d8:	9b08      	ldr	r3, [sp, #32]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d1b9      	bne.n	8008952 <_strtod_l+0x832>
 80089de:	e5cd      	b.n	800857c <_strtod_l+0x45c>
 80089e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80089e4:	e7e8      	b.n	80089b8 <_strtod_l+0x898>
 80089e6:	4613      	mov	r3, r2
 80089e8:	e7e6      	b.n	80089b8 <_strtod_l+0x898>
 80089ea:	ea53 030a 	orrs.w	r3, r3, sl
 80089ee:	d0a2      	beq.n	8008936 <_strtod_l+0x816>
 80089f0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80089f2:	b1db      	cbz	r3, 8008a2c <_strtod_l+0x90c>
 80089f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80089f6:	4213      	tst	r3, r2
 80089f8:	d0ee      	beq.n	80089d8 <_strtod_l+0x8b8>
 80089fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80089fc:	9a08      	ldr	r2, [sp, #32]
 80089fe:	4650      	mov	r0, sl
 8008a00:	4659      	mov	r1, fp
 8008a02:	b1bb      	cbz	r3, 8008a34 <_strtod_l+0x914>
 8008a04:	f7ff fb6c 	bl	80080e0 <sulp>
 8008a08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008a0c:	ec53 2b10 	vmov	r2, r3, d0
 8008a10:	f7f7 fc3c 	bl	800028c <__adddf3>
 8008a14:	4682      	mov	sl, r0
 8008a16:	468b      	mov	fp, r1
 8008a18:	e7de      	b.n	80089d8 <_strtod_l+0x8b8>
 8008a1a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008a1e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008a22:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008a26:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8008a2a:	e7d5      	b.n	80089d8 <_strtod_l+0x8b8>
 8008a2c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008a2e:	ea13 0f0a 	tst.w	r3, sl
 8008a32:	e7e1      	b.n	80089f8 <_strtod_l+0x8d8>
 8008a34:	f7ff fb54 	bl	80080e0 <sulp>
 8008a38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008a3c:	ec53 2b10 	vmov	r2, r3, d0
 8008a40:	f7f7 fc22 	bl	8000288 <__aeabi_dsub>
 8008a44:	2200      	movs	r2, #0
 8008a46:	2300      	movs	r3, #0
 8008a48:	4682      	mov	sl, r0
 8008a4a:	468b      	mov	fp, r1
 8008a4c:	f7f8 f83c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a50:	2800      	cmp	r0, #0
 8008a52:	d0c1      	beq.n	80089d8 <_strtod_l+0x8b8>
 8008a54:	e61a      	b.n	800868c <_strtod_l+0x56c>
 8008a56:	4641      	mov	r1, r8
 8008a58:	4620      	mov	r0, r4
 8008a5a:	f002 fae1 	bl	800b020 <__ratio>
 8008a5e:	ec57 6b10 	vmov	r6, r7, d0
 8008a62:	2200      	movs	r2, #0
 8008a64:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008a68:	4630      	mov	r0, r6
 8008a6a:	4639      	mov	r1, r7
 8008a6c:	f7f8 f840 	bl	8000af0 <__aeabi_dcmple>
 8008a70:	2800      	cmp	r0, #0
 8008a72:	d06f      	beq.n	8008b54 <_strtod_l+0xa34>
 8008a74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d17a      	bne.n	8008b70 <_strtod_l+0xa50>
 8008a7a:	f1ba 0f00 	cmp.w	sl, #0
 8008a7e:	d158      	bne.n	8008b32 <_strtod_l+0xa12>
 8008a80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a82:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d15a      	bne.n	8008b40 <_strtod_l+0xa20>
 8008a8a:	4b64      	ldr	r3, [pc, #400]	@ (8008c1c <_strtod_l+0xafc>)
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	4630      	mov	r0, r6
 8008a90:	4639      	mov	r1, r7
 8008a92:	f7f8 f823 	bl	8000adc <__aeabi_dcmplt>
 8008a96:	2800      	cmp	r0, #0
 8008a98:	d159      	bne.n	8008b4e <_strtod_l+0xa2e>
 8008a9a:	4630      	mov	r0, r6
 8008a9c:	4639      	mov	r1, r7
 8008a9e:	4b60      	ldr	r3, [pc, #384]	@ (8008c20 <_strtod_l+0xb00>)
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	f7f7 fda9 	bl	80005f8 <__aeabi_dmul>
 8008aa6:	4606      	mov	r6, r0
 8008aa8:	460f      	mov	r7, r1
 8008aaa:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008aae:	9606      	str	r6, [sp, #24]
 8008ab0:	9307      	str	r3, [sp, #28]
 8008ab2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008ab6:	4d57      	ldr	r5, [pc, #348]	@ (8008c14 <_strtod_l+0xaf4>)
 8008ab8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008abc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008abe:	401d      	ands	r5, r3
 8008ac0:	4b58      	ldr	r3, [pc, #352]	@ (8008c24 <_strtod_l+0xb04>)
 8008ac2:	429d      	cmp	r5, r3
 8008ac4:	f040 80b2 	bne.w	8008c2c <_strtod_l+0xb0c>
 8008ac8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008aca:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008ace:	ec4b ab10 	vmov	d0, sl, fp
 8008ad2:	f002 f9dd 	bl	800ae90 <__ulp>
 8008ad6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008ada:	ec51 0b10 	vmov	r0, r1, d0
 8008ade:	f7f7 fd8b 	bl	80005f8 <__aeabi_dmul>
 8008ae2:	4652      	mov	r2, sl
 8008ae4:	465b      	mov	r3, fp
 8008ae6:	f7f7 fbd1 	bl	800028c <__adddf3>
 8008aea:	460b      	mov	r3, r1
 8008aec:	4949      	ldr	r1, [pc, #292]	@ (8008c14 <_strtod_l+0xaf4>)
 8008aee:	4a4e      	ldr	r2, [pc, #312]	@ (8008c28 <_strtod_l+0xb08>)
 8008af0:	4019      	ands	r1, r3
 8008af2:	4291      	cmp	r1, r2
 8008af4:	4682      	mov	sl, r0
 8008af6:	d942      	bls.n	8008b7e <_strtod_l+0xa5e>
 8008af8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008afa:	4b47      	ldr	r3, [pc, #284]	@ (8008c18 <_strtod_l+0xaf8>)
 8008afc:	429a      	cmp	r2, r3
 8008afe:	d103      	bne.n	8008b08 <_strtod_l+0x9e8>
 8008b00:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008b02:	3301      	adds	r3, #1
 8008b04:	f43f ad2f 	beq.w	8008566 <_strtod_l+0x446>
 8008b08:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008c18 <_strtod_l+0xaf8>
 8008b0c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8008b10:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008b12:	9805      	ldr	r0, [sp, #20]
 8008b14:	f001 fe90 	bl	800a838 <_Bfree>
 8008b18:	9805      	ldr	r0, [sp, #20]
 8008b1a:	4649      	mov	r1, r9
 8008b1c:	f001 fe8c 	bl	800a838 <_Bfree>
 8008b20:	9805      	ldr	r0, [sp, #20]
 8008b22:	4641      	mov	r1, r8
 8008b24:	f001 fe88 	bl	800a838 <_Bfree>
 8008b28:	9805      	ldr	r0, [sp, #20]
 8008b2a:	4621      	mov	r1, r4
 8008b2c:	f001 fe84 	bl	800a838 <_Bfree>
 8008b30:	e619      	b.n	8008766 <_strtod_l+0x646>
 8008b32:	f1ba 0f01 	cmp.w	sl, #1
 8008b36:	d103      	bne.n	8008b40 <_strtod_l+0xa20>
 8008b38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	f43f ada6 	beq.w	800868c <_strtod_l+0x56c>
 8008b40:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008bf0 <_strtod_l+0xad0>
 8008b44:	4f35      	ldr	r7, [pc, #212]	@ (8008c1c <_strtod_l+0xafc>)
 8008b46:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008b4a:	2600      	movs	r6, #0
 8008b4c:	e7b1      	b.n	8008ab2 <_strtod_l+0x992>
 8008b4e:	4f34      	ldr	r7, [pc, #208]	@ (8008c20 <_strtod_l+0xb00>)
 8008b50:	2600      	movs	r6, #0
 8008b52:	e7aa      	b.n	8008aaa <_strtod_l+0x98a>
 8008b54:	4b32      	ldr	r3, [pc, #200]	@ (8008c20 <_strtod_l+0xb00>)
 8008b56:	4630      	mov	r0, r6
 8008b58:	4639      	mov	r1, r7
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	f7f7 fd4c 	bl	80005f8 <__aeabi_dmul>
 8008b60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b62:	4606      	mov	r6, r0
 8008b64:	460f      	mov	r7, r1
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d09f      	beq.n	8008aaa <_strtod_l+0x98a>
 8008b6a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008b6e:	e7a0      	b.n	8008ab2 <_strtod_l+0x992>
 8008b70:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008bf8 <_strtod_l+0xad8>
 8008b74:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008b78:	ec57 6b17 	vmov	r6, r7, d7
 8008b7c:	e799      	b.n	8008ab2 <_strtod_l+0x992>
 8008b7e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008b82:	9b08      	ldr	r3, [sp, #32]
 8008b84:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d1c1      	bne.n	8008b10 <_strtod_l+0x9f0>
 8008b8c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008b90:	0d1b      	lsrs	r3, r3, #20
 8008b92:	051b      	lsls	r3, r3, #20
 8008b94:	429d      	cmp	r5, r3
 8008b96:	d1bb      	bne.n	8008b10 <_strtod_l+0x9f0>
 8008b98:	4630      	mov	r0, r6
 8008b9a:	4639      	mov	r1, r7
 8008b9c:	f7f8 f88c 	bl	8000cb8 <__aeabi_d2lz>
 8008ba0:	f7f7 fcfc 	bl	800059c <__aeabi_l2d>
 8008ba4:	4602      	mov	r2, r0
 8008ba6:	460b      	mov	r3, r1
 8008ba8:	4630      	mov	r0, r6
 8008baa:	4639      	mov	r1, r7
 8008bac:	f7f7 fb6c 	bl	8000288 <__aeabi_dsub>
 8008bb0:	460b      	mov	r3, r1
 8008bb2:	4602      	mov	r2, r0
 8008bb4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008bb8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008bbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008bbe:	ea46 060a 	orr.w	r6, r6, sl
 8008bc2:	431e      	orrs	r6, r3
 8008bc4:	d06f      	beq.n	8008ca6 <_strtod_l+0xb86>
 8008bc6:	a30e      	add	r3, pc, #56	@ (adr r3, 8008c00 <_strtod_l+0xae0>)
 8008bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bcc:	f7f7 ff86 	bl	8000adc <__aeabi_dcmplt>
 8008bd0:	2800      	cmp	r0, #0
 8008bd2:	f47f acd3 	bne.w	800857c <_strtod_l+0x45c>
 8008bd6:	a30c      	add	r3, pc, #48	@ (adr r3, 8008c08 <_strtod_l+0xae8>)
 8008bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bdc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008be0:	f7f7 ff9a 	bl	8000b18 <__aeabi_dcmpgt>
 8008be4:	2800      	cmp	r0, #0
 8008be6:	d093      	beq.n	8008b10 <_strtod_l+0x9f0>
 8008be8:	e4c8      	b.n	800857c <_strtod_l+0x45c>
 8008bea:	bf00      	nop
 8008bec:	f3af 8000 	nop.w
 8008bf0:	00000000 	.word	0x00000000
 8008bf4:	bff00000 	.word	0xbff00000
 8008bf8:	00000000 	.word	0x00000000
 8008bfc:	3ff00000 	.word	0x3ff00000
 8008c00:	94a03595 	.word	0x94a03595
 8008c04:	3fdfffff 	.word	0x3fdfffff
 8008c08:	35afe535 	.word	0x35afe535
 8008c0c:	3fe00000 	.word	0x3fe00000
 8008c10:	000fffff 	.word	0x000fffff
 8008c14:	7ff00000 	.word	0x7ff00000
 8008c18:	7fefffff 	.word	0x7fefffff
 8008c1c:	3ff00000 	.word	0x3ff00000
 8008c20:	3fe00000 	.word	0x3fe00000
 8008c24:	7fe00000 	.word	0x7fe00000
 8008c28:	7c9fffff 	.word	0x7c9fffff
 8008c2c:	9b08      	ldr	r3, [sp, #32]
 8008c2e:	b323      	cbz	r3, 8008c7a <_strtod_l+0xb5a>
 8008c30:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008c34:	d821      	bhi.n	8008c7a <_strtod_l+0xb5a>
 8008c36:	a328      	add	r3, pc, #160	@ (adr r3, 8008cd8 <_strtod_l+0xbb8>)
 8008c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c3c:	4630      	mov	r0, r6
 8008c3e:	4639      	mov	r1, r7
 8008c40:	f7f7 ff56 	bl	8000af0 <__aeabi_dcmple>
 8008c44:	b1a0      	cbz	r0, 8008c70 <_strtod_l+0xb50>
 8008c46:	4639      	mov	r1, r7
 8008c48:	4630      	mov	r0, r6
 8008c4a:	f7f7 ffad 	bl	8000ba8 <__aeabi_d2uiz>
 8008c4e:	2801      	cmp	r0, #1
 8008c50:	bf38      	it	cc
 8008c52:	2001      	movcc	r0, #1
 8008c54:	f7f7 fc56 	bl	8000504 <__aeabi_ui2d>
 8008c58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c5a:	4606      	mov	r6, r0
 8008c5c:	460f      	mov	r7, r1
 8008c5e:	b9fb      	cbnz	r3, 8008ca0 <_strtod_l+0xb80>
 8008c60:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008c64:	9014      	str	r0, [sp, #80]	@ 0x50
 8008c66:	9315      	str	r3, [sp, #84]	@ 0x54
 8008c68:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008c6c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008c70:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008c72:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008c76:	1b5b      	subs	r3, r3, r5
 8008c78:	9311      	str	r3, [sp, #68]	@ 0x44
 8008c7a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008c7e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008c82:	f002 f905 	bl	800ae90 <__ulp>
 8008c86:	4650      	mov	r0, sl
 8008c88:	ec53 2b10 	vmov	r2, r3, d0
 8008c8c:	4659      	mov	r1, fp
 8008c8e:	f7f7 fcb3 	bl	80005f8 <__aeabi_dmul>
 8008c92:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008c96:	f7f7 faf9 	bl	800028c <__adddf3>
 8008c9a:	4682      	mov	sl, r0
 8008c9c:	468b      	mov	fp, r1
 8008c9e:	e770      	b.n	8008b82 <_strtod_l+0xa62>
 8008ca0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008ca4:	e7e0      	b.n	8008c68 <_strtod_l+0xb48>
 8008ca6:	a30e      	add	r3, pc, #56	@ (adr r3, 8008ce0 <_strtod_l+0xbc0>)
 8008ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cac:	f7f7 ff16 	bl	8000adc <__aeabi_dcmplt>
 8008cb0:	e798      	b.n	8008be4 <_strtod_l+0xac4>
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	930e      	str	r3, [sp, #56]	@ 0x38
 8008cb6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008cb8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008cba:	6013      	str	r3, [r2, #0]
 8008cbc:	f7ff ba6d 	b.w	800819a <_strtod_l+0x7a>
 8008cc0:	2a65      	cmp	r2, #101	@ 0x65
 8008cc2:	f43f ab68 	beq.w	8008396 <_strtod_l+0x276>
 8008cc6:	2a45      	cmp	r2, #69	@ 0x45
 8008cc8:	f43f ab65 	beq.w	8008396 <_strtod_l+0x276>
 8008ccc:	2301      	movs	r3, #1
 8008cce:	f7ff bba0 	b.w	8008412 <_strtod_l+0x2f2>
 8008cd2:	bf00      	nop
 8008cd4:	f3af 8000 	nop.w
 8008cd8:	ffc00000 	.word	0xffc00000
 8008cdc:	41dfffff 	.word	0x41dfffff
 8008ce0:	94a03595 	.word	0x94a03595
 8008ce4:	3fcfffff 	.word	0x3fcfffff

08008ce8 <_strtod_r>:
 8008ce8:	4b01      	ldr	r3, [pc, #4]	@ (8008cf0 <_strtod_r+0x8>)
 8008cea:	f7ff ba19 	b.w	8008120 <_strtod_l>
 8008cee:	bf00      	nop
 8008cf0:	2000001c 	.word	0x2000001c

08008cf4 <_strtol_l.isra.0>:
 8008cf4:	2b24      	cmp	r3, #36	@ 0x24
 8008cf6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cfa:	4686      	mov	lr, r0
 8008cfc:	4690      	mov	r8, r2
 8008cfe:	d801      	bhi.n	8008d04 <_strtol_l.isra.0+0x10>
 8008d00:	2b01      	cmp	r3, #1
 8008d02:	d106      	bne.n	8008d12 <_strtol_l.isra.0+0x1e>
 8008d04:	f000 f8aa 	bl	8008e5c <__errno>
 8008d08:	2316      	movs	r3, #22
 8008d0a:	6003      	str	r3, [r0, #0]
 8008d0c:	2000      	movs	r0, #0
 8008d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d12:	4834      	ldr	r0, [pc, #208]	@ (8008de4 <_strtol_l.isra.0+0xf0>)
 8008d14:	460d      	mov	r5, r1
 8008d16:	462a      	mov	r2, r5
 8008d18:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008d1c:	5d06      	ldrb	r6, [r0, r4]
 8008d1e:	f016 0608 	ands.w	r6, r6, #8
 8008d22:	d1f8      	bne.n	8008d16 <_strtol_l.isra.0+0x22>
 8008d24:	2c2d      	cmp	r4, #45	@ 0x2d
 8008d26:	d110      	bne.n	8008d4a <_strtol_l.isra.0+0x56>
 8008d28:	782c      	ldrb	r4, [r5, #0]
 8008d2a:	2601      	movs	r6, #1
 8008d2c:	1c95      	adds	r5, r2, #2
 8008d2e:	f033 0210 	bics.w	r2, r3, #16
 8008d32:	d115      	bne.n	8008d60 <_strtol_l.isra.0+0x6c>
 8008d34:	2c30      	cmp	r4, #48	@ 0x30
 8008d36:	d10d      	bne.n	8008d54 <_strtol_l.isra.0+0x60>
 8008d38:	782a      	ldrb	r2, [r5, #0]
 8008d3a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008d3e:	2a58      	cmp	r2, #88	@ 0x58
 8008d40:	d108      	bne.n	8008d54 <_strtol_l.isra.0+0x60>
 8008d42:	786c      	ldrb	r4, [r5, #1]
 8008d44:	3502      	adds	r5, #2
 8008d46:	2310      	movs	r3, #16
 8008d48:	e00a      	b.n	8008d60 <_strtol_l.isra.0+0x6c>
 8008d4a:	2c2b      	cmp	r4, #43	@ 0x2b
 8008d4c:	bf04      	itt	eq
 8008d4e:	782c      	ldrbeq	r4, [r5, #0]
 8008d50:	1c95      	addeq	r5, r2, #2
 8008d52:	e7ec      	b.n	8008d2e <_strtol_l.isra.0+0x3a>
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d1f6      	bne.n	8008d46 <_strtol_l.isra.0+0x52>
 8008d58:	2c30      	cmp	r4, #48	@ 0x30
 8008d5a:	bf14      	ite	ne
 8008d5c:	230a      	movne	r3, #10
 8008d5e:	2308      	moveq	r3, #8
 8008d60:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008d64:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8008d68:	2200      	movs	r2, #0
 8008d6a:	fbbc f9f3 	udiv	r9, ip, r3
 8008d6e:	4610      	mov	r0, r2
 8008d70:	fb03 ca19 	mls	sl, r3, r9, ip
 8008d74:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008d78:	2f09      	cmp	r7, #9
 8008d7a:	d80f      	bhi.n	8008d9c <_strtol_l.isra.0+0xa8>
 8008d7c:	463c      	mov	r4, r7
 8008d7e:	42a3      	cmp	r3, r4
 8008d80:	dd1b      	ble.n	8008dba <_strtol_l.isra.0+0xc6>
 8008d82:	1c57      	adds	r7, r2, #1
 8008d84:	d007      	beq.n	8008d96 <_strtol_l.isra.0+0xa2>
 8008d86:	4581      	cmp	r9, r0
 8008d88:	d314      	bcc.n	8008db4 <_strtol_l.isra.0+0xc0>
 8008d8a:	d101      	bne.n	8008d90 <_strtol_l.isra.0+0x9c>
 8008d8c:	45a2      	cmp	sl, r4
 8008d8e:	db11      	blt.n	8008db4 <_strtol_l.isra.0+0xc0>
 8008d90:	fb00 4003 	mla	r0, r0, r3, r4
 8008d94:	2201      	movs	r2, #1
 8008d96:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008d9a:	e7eb      	b.n	8008d74 <_strtol_l.isra.0+0x80>
 8008d9c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008da0:	2f19      	cmp	r7, #25
 8008da2:	d801      	bhi.n	8008da8 <_strtol_l.isra.0+0xb4>
 8008da4:	3c37      	subs	r4, #55	@ 0x37
 8008da6:	e7ea      	b.n	8008d7e <_strtol_l.isra.0+0x8a>
 8008da8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008dac:	2f19      	cmp	r7, #25
 8008dae:	d804      	bhi.n	8008dba <_strtol_l.isra.0+0xc6>
 8008db0:	3c57      	subs	r4, #87	@ 0x57
 8008db2:	e7e4      	b.n	8008d7e <_strtol_l.isra.0+0x8a>
 8008db4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008db8:	e7ed      	b.n	8008d96 <_strtol_l.isra.0+0xa2>
 8008dba:	1c53      	adds	r3, r2, #1
 8008dbc:	d108      	bne.n	8008dd0 <_strtol_l.isra.0+0xdc>
 8008dbe:	2322      	movs	r3, #34	@ 0x22
 8008dc0:	f8ce 3000 	str.w	r3, [lr]
 8008dc4:	4660      	mov	r0, ip
 8008dc6:	f1b8 0f00 	cmp.w	r8, #0
 8008dca:	d0a0      	beq.n	8008d0e <_strtol_l.isra.0+0x1a>
 8008dcc:	1e69      	subs	r1, r5, #1
 8008dce:	e006      	b.n	8008dde <_strtol_l.isra.0+0xea>
 8008dd0:	b106      	cbz	r6, 8008dd4 <_strtol_l.isra.0+0xe0>
 8008dd2:	4240      	negs	r0, r0
 8008dd4:	f1b8 0f00 	cmp.w	r8, #0
 8008dd8:	d099      	beq.n	8008d0e <_strtol_l.isra.0+0x1a>
 8008dda:	2a00      	cmp	r2, #0
 8008ddc:	d1f6      	bne.n	8008dcc <_strtol_l.isra.0+0xd8>
 8008dde:	f8c8 1000 	str.w	r1, [r8]
 8008de2:	e794      	b.n	8008d0e <_strtol_l.isra.0+0x1a>
 8008de4:	0800bf79 	.word	0x0800bf79

08008de8 <_strtol_r>:
 8008de8:	f7ff bf84 	b.w	8008cf4 <_strtol_l.isra.0>

08008dec <_fwalk_sglue>:
 8008dec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008df0:	4607      	mov	r7, r0
 8008df2:	4688      	mov	r8, r1
 8008df4:	4614      	mov	r4, r2
 8008df6:	2600      	movs	r6, #0
 8008df8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008dfc:	f1b9 0901 	subs.w	r9, r9, #1
 8008e00:	d505      	bpl.n	8008e0e <_fwalk_sglue+0x22>
 8008e02:	6824      	ldr	r4, [r4, #0]
 8008e04:	2c00      	cmp	r4, #0
 8008e06:	d1f7      	bne.n	8008df8 <_fwalk_sglue+0xc>
 8008e08:	4630      	mov	r0, r6
 8008e0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e0e:	89ab      	ldrh	r3, [r5, #12]
 8008e10:	2b01      	cmp	r3, #1
 8008e12:	d907      	bls.n	8008e24 <_fwalk_sglue+0x38>
 8008e14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e18:	3301      	adds	r3, #1
 8008e1a:	d003      	beq.n	8008e24 <_fwalk_sglue+0x38>
 8008e1c:	4629      	mov	r1, r5
 8008e1e:	4638      	mov	r0, r7
 8008e20:	47c0      	blx	r8
 8008e22:	4306      	orrs	r6, r0
 8008e24:	3568      	adds	r5, #104	@ 0x68
 8008e26:	e7e9      	b.n	8008dfc <_fwalk_sglue+0x10>

08008e28 <memset>:
 8008e28:	4402      	add	r2, r0
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d100      	bne.n	8008e32 <memset+0xa>
 8008e30:	4770      	bx	lr
 8008e32:	f803 1b01 	strb.w	r1, [r3], #1
 8008e36:	e7f9      	b.n	8008e2c <memset+0x4>

08008e38 <strncmp>:
 8008e38:	b510      	push	{r4, lr}
 8008e3a:	b16a      	cbz	r2, 8008e58 <strncmp+0x20>
 8008e3c:	3901      	subs	r1, #1
 8008e3e:	1884      	adds	r4, r0, r2
 8008e40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e44:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008e48:	429a      	cmp	r2, r3
 8008e4a:	d103      	bne.n	8008e54 <strncmp+0x1c>
 8008e4c:	42a0      	cmp	r0, r4
 8008e4e:	d001      	beq.n	8008e54 <strncmp+0x1c>
 8008e50:	2a00      	cmp	r2, #0
 8008e52:	d1f5      	bne.n	8008e40 <strncmp+0x8>
 8008e54:	1ad0      	subs	r0, r2, r3
 8008e56:	bd10      	pop	{r4, pc}
 8008e58:	4610      	mov	r0, r2
 8008e5a:	e7fc      	b.n	8008e56 <strncmp+0x1e>

08008e5c <__errno>:
 8008e5c:	4b01      	ldr	r3, [pc, #4]	@ (8008e64 <__errno+0x8>)
 8008e5e:	6818      	ldr	r0, [r3, #0]
 8008e60:	4770      	bx	lr
 8008e62:	bf00      	nop
 8008e64:	20000188 	.word	0x20000188

08008e68 <__libc_init_array>:
 8008e68:	b570      	push	{r4, r5, r6, lr}
 8008e6a:	4d0d      	ldr	r5, [pc, #52]	@ (8008ea0 <__libc_init_array+0x38>)
 8008e6c:	4c0d      	ldr	r4, [pc, #52]	@ (8008ea4 <__libc_init_array+0x3c>)
 8008e6e:	1b64      	subs	r4, r4, r5
 8008e70:	10a4      	asrs	r4, r4, #2
 8008e72:	2600      	movs	r6, #0
 8008e74:	42a6      	cmp	r6, r4
 8008e76:	d109      	bne.n	8008e8c <__libc_init_array+0x24>
 8008e78:	4d0b      	ldr	r5, [pc, #44]	@ (8008ea8 <__libc_init_array+0x40>)
 8008e7a:	4c0c      	ldr	r4, [pc, #48]	@ (8008eac <__libc_init_array+0x44>)
 8008e7c:	f002 ff0e 	bl	800bc9c <_init>
 8008e80:	1b64      	subs	r4, r4, r5
 8008e82:	10a4      	asrs	r4, r4, #2
 8008e84:	2600      	movs	r6, #0
 8008e86:	42a6      	cmp	r6, r4
 8008e88:	d105      	bne.n	8008e96 <__libc_init_array+0x2e>
 8008e8a:	bd70      	pop	{r4, r5, r6, pc}
 8008e8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e90:	4798      	blx	r3
 8008e92:	3601      	adds	r6, #1
 8008e94:	e7ee      	b.n	8008e74 <__libc_init_array+0xc>
 8008e96:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e9a:	4798      	blx	r3
 8008e9c:	3601      	adds	r6, #1
 8008e9e:	e7f2      	b.n	8008e86 <__libc_init_array+0x1e>
 8008ea0:	0800c1b8 	.word	0x0800c1b8
 8008ea4:	0800c1b8 	.word	0x0800c1b8
 8008ea8:	0800c1b8 	.word	0x0800c1b8
 8008eac:	0800c1bc 	.word	0x0800c1bc

08008eb0 <__retarget_lock_init_recursive>:
 8008eb0:	4770      	bx	lr

08008eb2 <__retarget_lock_acquire_recursive>:
 8008eb2:	4770      	bx	lr

08008eb4 <__retarget_lock_release_recursive>:
 8008eb4:	4770      	bx	lr
	...

08008eb8 <_localeconv_r>:
 8008eb8:	4800      	ldr	r0, [pc, #0]	@ (8008ebc <_localeconv_r+0x4>)
 8008eba:	4770      	bx	lr
 8008ebc:	2000010c 	.word	0x2000010c

08008ec0 <memcpy>:
 8008ec0:	440a      	add	r2, r1
 8008ec2:	4291      	cmp	r1, r2
 8008ec4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008ec8:	d100      	bne.n	8008ecc <memcpy+0xc>
 8008eca:	4770      	bx	lr
 8008ecc:	b510      	push	{r4, lr}
 8008ece:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ed2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ed6:	4291      	cmp	r1, r2
 8008ed8:	d1f9      	bne.n	8008ece <memcpy+0xe>
 8008eda:	bd10      	pop	{r4, pc}
 8008edc:	0000      	movs	r0, r0
	...

08008ee0 <nan>:
 8008ee0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008ee8 <nan+0x8>
 8008ee4:	4770      	bx	lr
 8008ee6:	bf00      	nop
 8008ee8:	00000000 	.word	0x00000000
 8008eec:	7ff80000 	.word	0x7ff80000

08008ef0 <nanf>:
 8008ef0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008ef8 <nanf+0x8>
 8008ef4:	4770      	bx	lr
 8008ef6:	bf00      	nop
 8008ef8:	7fc00000 	.word	0x7fc00000

08008efc <quorem>:
 8008efc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f00:	6903      	ldr	r3, [r0, #16]
 8008f02:	690c      	ldr	r4, [r1, #16]
 8008f04:	42a3      	cmp	r3, r4
 8008f06:	4607      	mov	r7, r0
 8008f08:	db7e      	blt.n	8009008 <quorem+0x10c>
 8008f0a:	3c01      	subs	r4, #1
 8008f0c:	f101 0814 	add.w	r8, r1, #20
 8008f10:	00a3      	lsls	r3, r4, #2
 8008f12:	f100 0514 	add.w	r5, r0, #20
 8008f16:	9300      	str	r3, [sp, #0]
 8008f18:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008f1c:	9301      	str	r3, [sp, #4]
 8008f1e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008f22:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008f26:	3301      	adds	r3, #1
 8008f28:	429a      	cmp	r2, r3
 8008f2a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008f2e:	fbb2 f6f3 	udiv	r6, r2, r3
 8008f32:	d32e      	bcc.n	8008f92 <quorem+0x96>
 8008f34:	f04f 0a00 	mov.w	sl, #0
 8008f38:	46c4      	mov	ip, r8
 8008f3a:	46ae      	mov	lr, r5
 8008f3c:	46d3      	mov	fp, sl
 8008f3e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008f42:	b298      	uxth	r0, r3
 8008f44:	fb06 a000 	mla	r0, r6, r0, sl
 8008f48:	0c02      	lsrs	r2, r0, #16
 8008f4a:	0c1b      	lsrs	r3, r3, #16
 8008f4c:	fb06 2303 	mla	r3, r6, r3, r2
 8008f50:	f8de 2000 	ldr.w	r2, [lr]
 8008f54:	b280      	uxth	r0, r0
 8008f56:	b292      	uxth	r2, r2
 8008f58:	1a12      	subs	r2, r2, r0
 8008f5a:	445a      	add	r2, fp
 8008f5c:	f8de 0000 	ldr.w	r0, [lr]
 8008f60:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008f64:	b29b      	uxth	r3, r3
 8008f66:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008f6a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008f6e:	b292      	uxth	r2, r2
 8008f70:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008f74:	45e1      	cmp	r9, ip
 8008f76:	f84e 2b04 	str.w	r2, [lr], #4
 8008f7a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008f7e:	d2de      	bcs.n	8008f3e <quorem+0x42>
 8008f80:	9b00      	ldr	r3, [sp, #0]
 8008f82:	58eb      	ldr	r3, [r5, r3]
 8008f84:	b92b      	cbnz	r3, 8008f92 <quorem+0x96>
 8008f86:	9b01      	ldr	r3, [sp, #4]
 8008f88:	3b04      	subs	r3, #4
 8008f8a:	429d      	cmp	r5, r3
 8008f8c:	461a      	mov	r2, r3
 8008f8e:	d32f      	bcc.n	8008ff0 <quorem+0xf4>
 8008f90:	613c      	str	r4, [r7, #16]
 8008f92:	4638      	mov	r0, r7
 8008f94:	f001 fecc 	bl	800ad30 <__mcmp>
 8008f98:	2800      	cmp	r0, #0
 8008f9a:	db25      	blt.n	8008fe8 <quorem+0xec>
 8008f9c:	4629      	mov	r1, r5
 8008f9e:	2000      	movs	r0, #0
 8008fa0:	f858 2b04 	ldr.w	r2, [r8], #4
 8008fa4:	f8d1 c000 	ldr.w	ip, [r1]
 8008fa8:	fa1f fe82 	uxth.w	lr, r2
 8008fac:	fa1f f38c 	uxth.w	r3, ip
 8008fb0:	eba3 030e 	sub.w	r3, r3, lr
 8008fb4:	4403      	add	r3, r0
 8008fb6:	0c12      	lsrs	r2, r2, #16
 8008fb8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008fbc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008fc0:	b29b      	uxth	r3, r3
 8008fc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008fc6:	45c1      	cmp	r9, r8
 8008fc8:	f841 3b04 	str.w	r3, [r1], #4
 8008fcc:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008fd0:	d2e6      	bcs.n	8008fa0 <quorem+0xa4>
 8008fd2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008fd6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008fda:	b922      	cbnz	r2, 8008fe6 <quorem+0xea>
 8008fdc:	3b04      	subs	r3, #4
 8008fde:	429d      	cmp	r5, r3
 8008fe0:	461a      	mov	r2, r3
 8008fe2:	d30b      	bcc.n	8008ffc <quorem+0x100>
 8008fe4:	613c      	str	r4, [r7, #16]
 8008fe6:	3601      	adds	r6, #1
 8008fe8:	4630      	mov	r0, r6
 8008fea:	b003      	add	sp, #12
 8008fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ff0:	6812      	ldr	r2, [r2, #0]
 8008ff2:	3b04      	subs	r3, #4
 8008ff4:	2a00      	cmp	r2, #0
 8008ff6:	d1cb      	bne.n	8008f90 <quorem+0x94>
 8008ff8:	3c01      	subs	r4, #1
 8008ffa:	e7c6      	b.n	8008f8a <quorem+0x8e>
 8008ffc:	6812      	ldr	r2, [r2, #0]
 8008ffe:	3b04      	subs	r3, #4
 8009000:	2a00      	cmp	r2, #0
 8009002:	d1ef      	bne.n	8008fe4 <quorem+0xe8>
 8009004:	3c01      	subs	r4, #1
 8009006:	e7ea      	b.n	8008fde <quorem+0xe2>
 8009008:	2000      	movs	r0, #0
 800900a:	e7ee      	b.n	8008fea <quorem+0xee>
 800900c:	0000      	movs	r0, r0
	...

08009010 <_dtoa_r>:
 8009010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009014:	69c7      	ldr	r7, [r0, #28]
 8009016:	b097      	sub	sp, #92	@ 0x5c
 8009018:	ed8d 0b04 	vstr	d0, [sp, #16]
 800901c:	ec55 4b10 	vmov	r4, r5, d0
 8009020:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8009022:	9107      	str	r1, [sp, #28]
 8009024:	4681      	mov	r9, r0
 8009026:	920c      	str	r2, [sp, #48]	@ 0x30
 8009028:	9311      	str	r3, [sp, #68]	@ 0x44
 800902a:	b97f      	cbnz	r7, 800904c <_dtoa_r+0x3c>
 800902c:	2010      	movs	r0, #16
 800902e:	f001 fa4f 	bl	800a4d0 <malloc>
 8009032:	4602      	mov	r2, r0
 8009034:	f8c9 001c 	str.w	r0, [r9, #28]
 8009038:	b920      	cbnz	r0, 8009044 <_dtoa_r+0x34>
 800903a:	4ba9      	ldr	r3, [pc, #676]	@ (80092e0 <_dtoa_r+0x2d0>)
 800903c:	21ef      	movs	r1, #239	@ 0xef
 800903e:	48a9      	ldr	r0, [pc, #676]	@ (80092e4 <_dtoa_r+0x2d4>)
 8009040:	f002 f952 	bl	800b2e8 <__assert_func>
 8009044:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009048:	6007      	str	r7, [r0, #0]
 800904a:	60c7      	str	r7, [r0, #12]
 800904c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009050:	6819      	ldr	r1, [r3, #0]
 8009052:	b159      	cbz	r1, 800906c <_dtoa_r+0x5c>
 8009054:	685a      	ldr	r2, [r3, #4]
 8009056:	604a      	str	r2, [r1, #4]
 8009058:	2301      	movs	r3, #1
 800905a:	4093      	lsls	r3, r2
 800905c:	608b      	str	r3, [r1, #8]
 800905e:	4648      	mov	r0, r9
 8009060:	f001 fbea 	bl	800a838 <_Bfree>
 8009064:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009068:	2200      	movs	r2, #0
 800906a:	601a      	str	r2, [r3, #0]
 800906c:	1e2b      	subs	r3, r5, #0
 800906e:	bfb9      	ittee	lt
 8009070:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009074:	9305      	strlt	r3, [sp, #20]
 8009076:	2300      	movge	r3, #0
 8009078:	6033      	strge	r3, [r6, #0]
 800907a:	9f05      	ldr	r7, [sp, #20]
 800907c:	4b9a      	ldr	r3, [pc, #616]	@ (80092e8 <_dtoa_r+0x2d8>)
 800907e:	bfbc      	itt	lt
 8009080:	2201      	movlt	r2, #1
 8009082:	6032      	strlt	r2, [r6, #0]
 8009084:	43bb      	bics	r3, r7
 8009086:	d112      	bne.n	80090ae <_dtoa_r+0x9e>
 8009088:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800908a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800908e:	6013      	str	r3, [r2, #0]
 8009090:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009094:	4323      	orrs	r3, r4
 8009096:	f000 855a 	beq.w	8009b4e <_dtoa_r+0xb3e>
 800909a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800909c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80092fc <_dtoa_r+0x2ec>
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	f000 855c 	beq.w	8009b5e <_dtoa_r+0xb4e>
 80090a6:	f10a 0303 	add.w	r3, sl, #3
 80090aa:	f000 bd56 	b.w	8009b5a <_dtoa_r+0xb4a>
 80090ae:	ed9d 7b04 	vldr	d7, [sp, #16]
 80090b2:	2200      	movs	r2, #0
 80090b4:	ec51 0b17 	vmov	r0, r1, d7
 80090b8:	2300      	movs	r3, #0
 80090ba:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80090be:	f7f7 fd03 	bl	8000ac8 <__aeabi_dcmpeq>
 80090c2:	4680      	mov	r8, r0
 80090c4:	b158      	cbz	r0, 80090de <_dtoa_r+0xce>
 80090c6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80090c8:	2301      	movs	r3, #1
 80090ca:	6013      	str	r3, [r2, #0]
 80090cc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80090ce:	b113      	cbz	r3, 80090d6 <_dtoa_r+0xc6>
 80090d0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80090d2:	4b86      	ldr	r3, [pc, #536]	@ (80092ec <_dtoa_r+0x2dc>)
 80090d4:	6013      	str	r3, [r2, #0]
 80090d6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8009300 <_dtoa_r+0x2f0>
 80090da:	f000 bd40 	b.w	8009b5e <_dtoa_r+0xb4e>
 80090de:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80090e2:	aa14      	add	r2, sp, #80	@ 0x50
 80090e4:	a915      	add	r1, sp, #84	@ 0x54
 80090e6:	4648      	mov	r0, r9
 80090e8:	f001 ff42 	bl	800af70 <__d2b>
 80090ec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80090f0:	9002      	str	r0, [sp, #8]
 80090f2:	2e00      	cmp	r6, #0
 80090f4:	d078      	beq.n	80091e8 <_dtoa_r+0x1d8>
 80090f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80090f8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80090fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009100:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009104:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009108:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800910c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009110:	4619      	mov	r1, r3
 8009112:	2200      	movs	r2, #0
 8009114:	4b76      	ldr	r3, [pc, #472]	@ (80092f0 <_dtoa_r+0x2e0>)
 8009116:	f7f7 f8b7 	bl	8000288 <__aeabi_dsub>
 800911a:	a36b      	add	r3, pc, #428	@ (adr r3, 80092c8 <_dtoa_r+0x2b8>)
 800911c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009120:	f7f7 fa6a 	bl	80005f8 <__aeabi_dmul>
 8009124:	a36a      	add	r3, pc, #424	@ (adr r3, 80092d0 <_dtoa_r+0x2c0>)
 8009126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800912a:	f7f7 f8af 	bl	800028c <__adddf3>
 800912e:	4604      	mov	r4, r0
 8009130:	4630      	mov	r0, r6
 8009132:	460d      	mov	r5, r1
 8009134:	f7f7 f9f6 	bl	8000524 <__aeabi_i2d>
 8009138:	a367      	add	r3, pc, #412	@ (adr r3, 80092d8 <_dtoa_r+0x2c8>)
 800913a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800913e:	f7f7 fa5b 	bl	80005f8 <__aeabi_dmul>
 8009142:	4602      	mov	r2, r0
 8009144:	460b      	mov	r3, r1
 8009146:	4620      	mov	r0, r4
 8009148:	4629      	mov	r1, r5
 800914a:	f7f7 f89f 	bl	800028c <__adddf3>
 800914e:	4604      	mov	r4, r0
 8009150:	460d      	mov	r5, r1
 8009152:	f7f7 fd01 	bl	8000b58 <__aeabi_d2iz>
 8009156:	2200      	movs	r2, #0
 8009158:	4607      	mov	r7, r0
 800915a:	2300      	movs	r3, #0
 800915c:	4620      	mov	r0, r4
 800915e:	4629      	mov	r1, r5
 8009160:	f7f7 fcbc 	bl	8000adc <__aeabi_dcmplt>
 8009164:	b140      	cbz	r0, 8009178 <_dtoa_r+0x168>
 8009166:	4638      	mov	r0, r7
 8009168:	f7f7 f9dc 	bl	8000524 <__aeabi_i2d>
 800916c:	4622      	mov	r2, r4
 800916e:	462b      	mov	r3, r5
 8009170:	f7f7 fcaa 	bl	8000ac8 <__aeabi_dcmpeq>
 8009174:	b900      	cbnz	r0, 8009178 <_dtoa_r+0x168>
 8009176:	3f01      	subs	r7, #1
 8009178:	2f16      	cmp	r7, #22
 800917a:	d852      	bhi.n	8009222 <_dtoa_r+0x212>
 800917c:	4b5d      	ldr	r3, [pc, #372]	@ (80092f4 <_dtoa_r+0x2e4>)
 800917e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009186:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800918a:	f7f7 fca7 	bl	8000adc <__aeabi_dcmplt>
 800918e:	2800      	cmp	r0, #0
 8009190:	d049      	beq.n	8009226 <_dtoa_r+0x216>
 8009192:	3f01      	subs	r7, #1
 8009194:	2300      	movs	r3, #0
 8009196:	9310      	str	r3, [sp, #64]	@ 0x40
 8009198:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800919a:	1b9b      	subs	r3, r3, r6
 800919c:	1e5a      	subs	r2, r3, #1
 800919e:	bf45      	ittet	mi
 80091a0:	f1c3 0301 	rsbmi	r3, r3, #1
 80091a4:	9300      	strmi	r3, [sp, #0]
 80091a6:	2300      	movpl	r3, #0
 80091a8:	2300      	movmi	r3, #0
 80091aa:	9206      	str	r2, [sp, #24]
 80091ac:	bf54      	ite	pl
 80091ae:	9300      	strpl	r3, [sp, #0]
 80091b0:	9306      	strmi	r3, [sp, #24]
 80091b2:	2f00      	cmp	r7, #0
 80091b4:	db39      	blt.n	800922a <_dtoa_r+0x21a>
 80091b6:	9b06      	ldr	r3, [sp, #24]
 80091b8:	970d      	str	r7, [sp, #52]	@ 0x34
 80091ba:	443b      	add	r3, r7
 80091bc:	9306      	str	r3, [sp, #24]
 80091be:	2300      	movs	r3, #0
 80091c0:	9308      	str	r3, [sp, #32]
 80091c2:	9b07      	ldr	r3, [sp, #28]
 80091c4:	2b09      	cmp	r3, #9
 80091c6:	d863      	bhi.n	8009290 <_dtoa_r+0x280>
 80091c8:	2b05      	cmp	r3, #5
 80091ca:	bfc4      	itt	gt
 80091cc:	3b04      	subgt	r3, #4
 80091ce:	9307      	strgt	r3, [sp, #28]
 80091d0:	9b07      	ldr	r3, [sp, #28]
 80091d2:	f1a3 0302 	sub.w	r3, r3, #2
 80091d6:	bfcc      	ite	gt
 80091d8:	2400      	movgt	r4, #0
 80091da:	2401      	movle	r4, #1
 80091dc:	2b03      	cmp	r3, #3
 80091de:	d863      	bhi.n	80092a8 <_dtoa_r+0x298>
 80091e0:	e8df f003 	tbb	[pc, r3]
 80091e4:	2b375452 	.word	0x2b375452
 80091e8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80091ec:	441e      	add	r6, r3
 80091ee:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80091f2:	2b20      	cmp	r3, #32
 80091f4:	bfc1      	itttt	gt
 80091f6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80091fa:	409f      	lslgt	r7, r3
 80091fc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009200:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009204:	bfd6      	itet	le
 8009206:	f1c3 0320 	rsble	r3, r3, #32
 800920a:	ea47 0003 	orrgt.w	r0, r7, r3
 800920e:	fa04 f003 	lslle.w	r0, r4, r3
 8009212:	f7f7 f977 	bl	8000504 <__aeabi_ui2d>
 8009216:	2201      	movs	r2, #1
 8009218:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800921c:	3e01      	subs	r6, #1
 800921e:	9212      	str	r2, [sp, #72]	@ 0x48
 8009220:	e776      	b.n	8009110 <_dtoa_r+0x100>
 8009222:	2301      	movs	r3, #1
 8009224:	e7b7      	b.n	8009196 <_dtoa_r+0x186>
 8009226:	9010      	str	r0, [sp, #64]	@ 0x40
 8009228:	e7b6      	b.n	8009198 <_dtoa_r+0x188>
 800922a:	9b00      	ldr	r3, [sp, #0]
 800922c:	1bdb      	subs	r3, r3, r7
 800922e:	9300      	str	r3, [sp, #0]
 8009230:	427b      	negs	r3, r7
 8009232:	9308      	str	r3, [sp, #32]
 8009234:	2300      	movs	r3, #0
 8009236:	930d      	str	r3, [sp, #52]	@ 0x34
 8009238:	e7c3      	b.n	80091c2 <_dtoa_r+0x1b2>
 800923a:	2301      	movs	r3, #1
 800923c:	9309      	str	r3, [sp, #36]	@ 0x24
 800923e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009240:	eb07 0b03 	add.w	fp, r7, r3
 8009244:	f10b 0301 	add.w	r3, fp, #1
 8009248:	2b01      	cmp	r3, #1
 800924a:	9303      	str	r3, [sp, #12]
 800924c:	bfb8      	it	lt
 800924e:	2301      	movlt	r3, #1
 8009250:	e006      	b.n	8009260 <_dtoa_r+0x250>
 8009252:	2301      	movs	r3, #1
 8009254:	9309      	str	r3, [sp, #36]	@ 0x24
 8009256:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009258:	2b00      	cmp	r3, #0
 800925a:	dd28      	ble.n	80092ae <_dtoa_r+0x29e>
 800925c:	469b      	mov	fp, r3
 800925e:	9303      	str	r3, [sp, #12]
 8009260:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8009264:	2100      	movs	r1, #0
 8009266:	2204      	movs	r2, #4
 8009268:	f102 0514 	add.w	r5, r2, #20
 800926c:	429d      	cmp	r5, r3
 800926e:	d926      	bls.n	80092be <_dtoa_r+0x2ae>
 8009270:	6041      	str	r1, [r0, #4]
 8009272:	4648      	mov	r0, r9
 8009274:	f001 faa0 	bl	800a7b8 <_Balloc>
 8009278:	4682      	mov	sl, r0
 800927a:	2800      	cmp	r0, #0
 800927c:	d142      	bne.n	8009304 <_dtoa_r+0x2f4>
 800927e:	4b1e      	ldr	r3, [pc, #120]	@ (80092f8 <_dtoa_r+0x2e8>)
 8009280:	4602      	mov	r2, r0
 8009282:	f240 11af 	movw	r1, #431	@ 0x1af
 8009286:	e6da      	b.n	800903e <_dtoa_r+0x2e>
 8009288:	2300      	movs	r3, #0
 800928a:	e7e3      	b.n	8009254 <_dtoa_r+0x244>
 800928c:	2300      	movs	r3, #0
 800928e:	e7d5      	b.n	800923c <_dtoa_r+0x22c>
 8009290:	2401      	movs	r4, #1
 8009292:	2300      	movs	r3, #0
 8009294:	9307      	str	r3, [sp, #28]
 8009296:	9409      	str	r4, [sp, #36]	@ 0x24
 8009298:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800929c:	2200      	movs	r2, #0
 800929e:	f8cd b00c 	str.w	fp, [sp, #12]
 80092a2:	2312      	movs	r3, #18
 80092a4:	920c      	str	r2, [sp, #48]	@ 0x30
 80092a6:	e7db      	b.n	8009260 <_dtoa_r+0x250>
 80092a8:	2301      	movs	r3, #1
 80092aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80092ac:	e7f4      	b.n	8009298 <_dtoa_r+0x288>
 80092ae:	f04f 0b01 	mov.w	fp, #1
 80092b2:	f8cd b00c 	str.w	fp, [sp, #12]
 80092b6:	465b      	mov	r3, fp
 80092b8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80092bc:	e7d0      	b.n	8009260 <_dtoa_r+0x250>
 80092be:	3101      	adds	r1, #1
 80092c0:	0052      	lsls	r2, r2, #1
 80092c2:	e7d1      	b.n	8009268 <_dtoa_r+0x258>
 80092c4:	f3af 8000 	nop.w
 80092c8:	636f4361 	.word	0x636f4361
 80092cc:	3fd287a7 	.word	0x3fd287a7
 80092d0:	8b60c8b3 	.word	0x8b60c8b3
 80092d4:	3fc68a28 	.word	0x3fc68a28
 80092d8:	509f79fb 	.word	0x509f79fb
 80092dc:	3fd34413 	.word	0x3fd34413
 80092e0:	0800bd9c 	.word	0x0800bd9c
 80092e4:	0800bdb3 	.word	0x0800bdb3
 80092e8:	7ff00000 	.word	0x7ff00000
 80092ec:	0800bd5d 	.word	0x0800bd5d
 80092f0:	3ff80000 	.word	0x3ff80000
 80092f4:	0800c0b0 	.word	0x0800c0b0
 80092f8:	0800be0b 	.word	0x0800be0b
 80092fc:	0800bd98 	.word	0x0800bd98
 8009300:	0800bd5c 	.word	0x0800bd5c
 8009304:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009308:	6018      	str	r0, [r3, #0]
 800930a:	9b03      	ldr	r3, [sp, #12]
 800930c:	2b0e      	cmp	r3, #14
 800930e:	f200 80a1 	bhi.w	8009454 <_dtoa_r+0x444>
 8009312:	2c00      	cmp	r4, #0
 8009314:	f000 809e 	beq.w	8009454 <_dtoa_r+0x444>
 8009318:	2f00      	cmp	r7, #0
 800931a:	dd33      	ble.n	8009384 <_dtoa_r+0x374>
 800931c:	4b9c      	ldr	r3, [pc, #624]	@ (8009590 <_dtoa_r+0x580>)
 800931e:	f007 020f 	and.w	r2, r7, #15
 8009322:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009326:	ed93 7b00 	vldr	d7, [r3]
 800932a:	05f8      	lsls	r0, r7, #23
 800932c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8009330:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009334:	d516      	bpl.n	8009364 <_dtoa_r+0x354>
 8009336:	4b97      	ldr	r3, [pc, #604]	@ (8009594 <_dtoa_r+0x584>)
 8009338:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800933c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009340:	f7f7 fa84 	bl	800084c <__aeabi_ddiv>
 8009344:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009348:	f004 040f 	and.w	r4, r4, #15
 800934c:	2603      	movs	r6, #3
 800934e:	4d91      	ldr	r5, [pc, #580]	@ (8009594 <_dtoa_r+0x584>)
 8009350:	b954      	cbnz	r4, 8009368 <_dtoa_r+0x358>
 8009352:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009356:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800935a:	f7f7 fa77 	bl	800084c <__aeabi_ddiv>
 800935e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009362:	e028      	b.n	80093b6 <_dtoa_r+0x3a6>
 8009364:	2602      	movs	r6, #2
 8009366:	e7f2      	b.n	800934e <_dtoa_r+0x33e>
 8009368:	07e1      	lsls	r1, r4, #31
 800936a:	d508      	bpl.n	800937e <_dtoa_r+0x36e>
 800936c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009370:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009374:	f7f7 f940 	bl	80005f8 <__aeabi_dmul>
 8009378:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800937c:	3601      	adds	r6, #1
 800937e:	1064      	asrs	r4, r4, #1
 8009380:	3508      	adds	r5, #8
 8009382:	e7e5      	b.n	8009350 <_dtoa_r+0x340>
 8009384:	f000 80af 	beq.w	80094e6 <_dtoa_r+0x4d6>
 8009388:	427c      	negs	r4, r7
 800938a:	4b81      	ldr	r3, [pc, #516]	@ (8009590 <_dtoa_r+0x580>)
 800938c:	4d81      	ldr	r5, [pc, #516]	@ (8009594 <_dtoa_r+0x584>)
 800938e:	f004 020f 	and.w	r2, r4, #15
 8009392:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800939a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800939e:	f7f7 f92b 	bl	80005f8 <__aeabi_dmul>
 80093a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80093a6:	1124      	asrs	r4, r4, #4
 80093a8:	2300      	movs	r3, #0
 80093aa:	2602      	movs	r6, #2
 80093ac:	2c00      	cmp	r4, #0
 80093ae:	f040 808f 	bne.w	80094d0 <_dtoa_r+0x4c0>
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d1d3      	bne.n	800935e <_dtoa_r+0x34e>
 80093b6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80093b8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	f000 8094 	beq.w	80094ea <_dtoa_r+0x4da>
 80093c2:	4b75      	ldr	r3, [pc, #468]	@ (8009598 <_dtoa_r+0x588>)
 80093c4:	2200      	movs	r2, #0
 80093c6:	4620      	mov	r0, r4
 80093c8:	4629      	mov	r1, r5
 80093ca:	f7f7 fb87 	bl	8000adc <__aeabi_dcmplt>
 80093ce:	2800      	cmp	r0, #0
 80093d0:	f000 808b 	beq.w	80094ea <_dtoa_r+0x4da>
 80093d4:	9b03      	ldr	r3, [sp, #12]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	f000 8087 	beq.w	80094ea <_dtoa_r+0x4da>
 80093dc:	f1bb 0f00 	cmp.w	fp, #0
 80093e0:	dd34      	ble.n	800944c <_dtoa_r+0x43c>
 80093e2:	4620      	mov	r0, r4
 80093e4:	4b6d      	ldr	r3, [pc, #436]	@ (800959c <_dtoa_r+0x58c>)
 80093e6:	2200      	movs	r2, #0
 80093e8:	4629      	mov	r1, r5
 80093ea:	f7f7 f905 	bl	80005f8 <__aeabi_dmul>
 80093ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80093f2:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 80093f6:	3601      	adds	r6, #1
 80093f8:	465c      	mov	r4, fp
 80093fa:	4630      	mov	r0, r6
 80093fc:	f7f7 f892 	bl	8000524 <__aeabi_i2d>
 8009400:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009404:	f7f7 f8f8 	bl	80005f8 <__aeabi_dmul>
 8009408:	4b65      	ldr	r3, [pc, #404]	@ (80095a0 <_dtoa_r+0x590>)
 800940a:	2200      	movs	r2, #0
 800940c:	f7f6 ff3e 	bl	800028c <__adddf3>
 8009410:	4605      	mov	r5, r0
 8009412:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009416:	2c00      	cmp	r4, #0
 8009418:	d16a      	bne.n	80094f0 <_dtoa_r+0x4e0>
 800941a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800941e:	4b61      	ldr	r3, [pc, #388]	@ (80095a4 <_dtoa_r+0x594>)
 8009420:	2200      	movs	r2, #0
 8009422:	f7f6 ff31 	bl	8000288 <__aeabi_dsub>
 8009426:	4602      	mov	r2, r0
 8009428:	460b      	mov	r3, r1
 800942a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800942e:	462a      	mov	r2, r5
 8009430:	4633      	mov	r3, r6
 8009432:	f7f7 fb71 	bl	8000b18 <__aeabi_dcmpgt>
 8009436:	2800      	cmp	r0, #0
 8009438:	f040 8298 	bne.w	800996c <_dtoa_r+0x95c>
 800943c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009440:	462a      	mov	r2, r5
 8009442:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009446:	f7f7 fb49 	bl	8000adc <__aeabi_dcmplt>
 800944a:	bb38      	cbnz	r0, 800949c <_dtoa_r+0x48c>
 800944c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8009450:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009454:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009456:	2b00      	cmp	r3, #0
 8009458:	f2c0 8157 	blt.w	800970a <_dtoa_r+0x6fa>
 800945c:	2f0e      	cmp	r7, #14
 800945e:	f300 8154 	bgt.w	800970a <_dtoa_r+0x6fa>
 8009462:	4b4b      	ldr	r3, [pc, #300]	@ (8009590 <_dtoa_r+0x580>)
 8009464:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009468:	ed93 7b00 	vldr	d7, [r3]
 800946c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800946e:	2b00      	cmp	r3, #0
 8009470:	ed8d 7b00 	vstr	d7, [sp]
 8009474:	f280 80e5 	bge.w	8009642 <_dtoa_r+0x632>
 8009478:	9b03      	ldr	r3, [sp, #12]
 800947a:	2b00      	cmp	r3, #0
 800947c:	f300 80e1 	bgt.w	8009642 <_dtoa_r+0x632>
 8009480:	d10c      	bne.n	800949c <_dtoa_r+0x48c>
 8009482:	4b48      	ldr	r3, [pc, #288]	@ (80095a4 <_dtoa_r+0x594>)
 8009484:	2200      	movs	r2, #0
 8009486:	ec51 0b17 	vmov	r0, r1, d7
 800948a:	f7f7 f8b5 	bl	80005f8 <__aeabi_dmul>
 800948e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009492:	f7f7 fb37 	bl	8000b04 <__aeabi_dcmpge>
 8009496:	2800      	cmp	r0, #0
 8009498:	f000 8266 	beq.w	8009968 <_dtoa_r+0x958>
 800949c:	2400      	movs	r4, #0
 800949e:	4625      	mov	r5, r4
 80094a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80094a2:	4656      	mov	r6, sl
 80094a4:	ea6f 0803 	mvn.w	r8, r3
 80094a8:	2700      	movs	r7, #0
 80094aa:	4621      	mov	r1, r4
 80094ac:	4648      	mov	r0, r9
 80094ae:	f001 f9c3 	bl	800a838 <_Bfree>
 80094b2:	2d00      	cmp	r5, #0
 80094b4:	f000 80bd 	beq.w	8009632 <_dtoa_r+0x622>
 80094b8:	b12f      	cbz	r7, 80094c6 <_dtoa_r+0x4b6>
 80094ba:	42af      	cmp	r7, r5
 80094bc:	d003      	beq.n	80094c6 <_dtoa_r+0x4b6>
 80094be:	4639      	mov	r1, r7
 80094c0:	4648      	mov	r0, r9
 80094c2:	f001 f9b9 	bl	800a838 <_Bfree>
 80094c6:	4629      	mov	r1, r5
 80094c8:	4648      	mov	r0, r9
 80094ca:	f001 f9b5 	bl	800a838 <_Bfree>
 80094ce:	e0b0      	b.n	8009632 <_dtoa_r+0x622>
 80094d0:	07e2      	lsls	r2, r4, #31
 80094d2:	d505      	bpl.n	80094e0 <_dtoa_r+0x4d0>
 80094d4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80094d8:	f7f7 f88e 	bl	80005f8 <__aeabi_dmul>
 80094dc:	3601      	adds	r6, #1
 80094de:	2301      	movs	r3, #1
 80094e0:	1064      	asrs	r4, r4, #1
 80094e2:	3508      	adds	r5, #8
 80094e4:	e762      	b.n	80093ac <_dtoa_r+0x39c>
 80094e6:	2602      	movs	r6, #2
 80094e8:	e765      	b.n	80093b6 <_dtoa_r+0x3a6>
 80094ea:	9c03      	ldr	r4, [sp, #12]
 80094ec:	46b8      	mov	r8, r7
 80094ee:	e784      	b.n	80093fa <_dtoa_r+0x3ea>
 80094f0:	4b27      	ldr	r3, [pc, #156]	@ (8009590 <_dtoa_r+0x580>)
 80094f2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80094f4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80094f8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80094fc:	4454      	add	r4, sl
 80094fe:	2900      	cmp	r1, #0
 8009500:	d054      	beq.n	80095ac <_dtoa_r+0x59c>
 8009502:	4929      	ldr	r1, [pc, #164]	@ (80095a8 <_dtoa_r+0x598>)
 8009504:	2000      	movs	r0, #0
 8009506:	f7f7 f9a1 	bl	800084c <__aeabi_ddiv>
 800950a:	4633      	mov	r3, r6
 800950c:	462a      	mov	r2, r5
 800950e:	f7f6 febb 	bl	8000288 <__aeabi_dsub>
 8009512:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009516:	4656      	mov	r6, sl
 8009518:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800951c:	f7f7 fb1c 	bl	8000b58 <__aeabi_d2iz>
 8009520:	4605      	mov	r5, r0
 8009522:	f7f6 ffff 	bl	8000524 <__aeabi_i2d>
 8009526:	4602      	mov	r2, r0
 8009528:	460b      	mov	r3, r1
 800952a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800952e:	f7f6 feab 	bl	8000288 <__aeabi_dsub>
 8009532:	3530      	adds	r5, #48	@ 0x30
 8009534:	4602      	mov	r2, r0
 8009536:	460b      	mov	r3, r1
 8009538:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800953c:	f806 5b01 	strb.w	r5, [r6], #1
 8009540:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009544:	f7f7 faca 	bl	8000adc <__aeabi_dcmplt>
 8009548:	2800      	cmp	r0, #0
 800954a:	d172      	bne.n	8009632 <_dtoa_r+0x622>
 800954c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009550:	4911      	ldr	r1, [pc, #68]	@ (8009598 <_dtoa_r+0x588>)
 8009552:	2000      	movs	r0, #0
 8009554:	f7f6 fe98 	bl	8000288 <__aeabi_dsub>
 8009558:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800955c:	f7f7 fabe 	bl	8000adc <__aeabi_dcmplt>
 8009560:	2800      	cmp	r0, #0
 8009562:	f040 80b4 	bne.w	80096ce <_dtoa_r+0x6be>
 8009566:	42a6      	cmp	r6, r4
 8009568:	f43f af70 	beq.w	800944c <_dtoa_r+0x43c>
 800956c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009570:	4b0a      	ldr	r3, [pc, #40]	@ (800959c <_dtoa_r+0x58c>)
 8009572:	2200      	movs	r2, #0
 8009574:	f7f7 f840 	bl	80005f8 <__aeabi_dmul>
 8009578:	4b08      	ldr	r3, [pc, #32]	@ (800959c <_dtoa_r+0x58c>)
 800957a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800957e:	2200      	movs	r2, #0
 8009580:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009584:	f7f7 f838 	bl	80005f8 <__aeabi_dmul>
 8009588:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800958c:	e7c4      	b.n	8009518 <_dtoa_r+0x508>
 800958e:	bf00      	nop
 8009590:	0800c0b0 	.word	0x0800c0b0
 8009594:	0800c088 	.word	0x0800c088
 8009598:	3ff00000 	.word	0x3ff00000
 800959c:	40240000 	.word	0x40240000
 80095a0:	401c0000 	.word	0x401c0000
 80095a4:	40140000 	.word	0x40140000
 80095a8:	3fe00000 	.word	0x3fe00000
 80095ac:	4631      	mov	r1, r6
 80095ae:	4628      	mov	r0, r5
 80095b0:	f7f7 f822 	bl	80005f8 <__aeabi_dmul>
 80095b4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80095b8:	9413      	str	r4, [sp, #76]	@ 0x4c
 80095ba:	4656      	mov	r6, sl
 80095bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80095c0:	f7f7 faca 	bl	8000b58 <__aeabi_d2iz>
 80095c4:	4605      	mov	r5, r0
 80095c6:	f7f6 ffad 	bl	8000524 <__aeabi_i2d>
 80095ca:	4602      	mov	r2, r0
 80095cc:	460b      	mov	r3, r1
 80095ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80095d2:	f7f6 fe59 	bl	8000288 <__aeabi_dsub>
 80095d6:	3530      	adds	r5, #48	@ 0x30
 80095d8:	f806 5b01 	strb.w	r5, [r6], #1
 80095dc:	4602      	mov	r2, r0
 80095de:	460b      	mov	r3, r1
 80095e0:	42a6      	cmp	r6, r4
 80095e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80095e6:	f04f 0200 	mov.w	r2, #0
 80095ea:	d124      	bne.n	8009636 <_dtoa_r+0x626>
 80095ec:	4baf      	ldr	r3, [pc, #700]	@ (80098ac <_dtoa_r+0x89c>)
 80095ee:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80095f2:	f7f6 fe4b 	bl	800028c <__adddf3>
 80095f6:	4602      	mov	r2, r0
 80095f8:	460b      	mov	r3, r1
 80095fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80095fe:	f7f7 fa8b 	bl	8000b18 <__aeabi_dcmpgt>
 8009602:	2800      	cmp	r0, #0
 8009604:	d163      	bne.n	80096ce <_dtoa_r+0x6be>
 8009606:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800960a:	49a8      	ldr	r1, [pc, #672]	@ (80098ac <_dtoa_r+0x89c>)
 800960c:	2000      	movs	r0, #0
 800960e:	f7f6 fe3b 	bl	8000288 <__aeabi_dsub>
 8009612:	4602      	mov	r2, r0
 8009614:	460b      	mov	r3, r1
 8009616:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800961a:	f7f7 fa5f 	bl	8000adc <__aeabi_dcmplt>
 800961e:	2800      	cmp	r0, #0
 8009620:	f43f af14 	beq.w	800944c <_dtoa_r+0x43c>
 8009624:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009626:	1e73      	subs	r3, r6, #1
 8009628:	9313      	str	r3, [sp, #76]	@ 0x4c
 800962a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800962e:	2b30      	cmp	r3, #48	@ 0x30
 8009630:	d0f8      	beq.n	8009624 <_dtoa_r+0x614>
 8009632:	4647      	mov	r7, r8
 8009634:	e03b      	b.n	80096ae <_dtoa_r+0x69e>
 8009636:	4b9e      	ldr	r3, [pc, #632]	@ (80098b0 <_dtoa_r+0x8a0>)
 8009638:	f7f6 ffde 	bl	80005f8 <__aeabi_dmul>
 800963c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009640:	e7bc      	b.n	80095bc <_dtoa_r+0x5ac>
 8009642:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009646:	4656      	mov	r6, sl
 8009648:	e9dd 2300 	ldrd	r2, r3, [sp]
 800964c:	4620      	mov	r0, r4
 800964e:	4629      	mov	r1, r5
 8009650:	f7f7 f8fc 	bl	800084c <__aeabi_ddiv>
 8009654:	f7f7 fa80 	bl	8000b58 <__aeabi_d2iz>
 8009658:	4680      	mov	r8, r0
 800965a:	f7f6 ff63 	bl	8000524 <__aeabi_i2d>
 800965e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009662:	f7f6 ffc9 	bl	80005f8 <__aeabi_dmul>
 8009666:	4602      	mov	r2, r0
 8009668:	460b      	mov	r3, r1
 800966a:	4620      	mov	r0, r4
 800966c:	4629      	mov	r1, r5
 800966e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009672:	f7f6 fe09 	bl	8000288 <__aeabi_dsub>
 8009676:	f806 4b01 	strb.w	r4, [r6], #1
 800967a:	9d03      	ldr	r5, [sp, #12]
 800967c:	eba6 040a 	sub.w	r4, r6, sl
 8009680:	42a5      	cmp	r5, r4
 8009682:	4602      	mov	r2, r0
 8009684:	460b      	mov	r3, r1
 8009686:	d133      	bne.n	80096f0 <_dtoa_r+0x6e0>
 8009688:	f7f6 fe00 	bl	800028c <__adddf3>
 800968c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009690:	4604      	mov	r4, r0
 8009692:	460d      	mov	r5, r1
 8009694:	f7f7 fa40 	bl	8000b18 <__aeabi_dcmpgt>
 8009698:	b9c0      	cbnz	r0, 80096cc <_dtoa_r+0x6bc>
 800969a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800969e:	4620      	mov	r0, r4
 80096a0:	4629      	mov	r1, r5
 80096a2:	f7f7 fa11 	bl	8000ac8 <__aeabi_dcmpeq>
 80096a6:	b110      	cbz	r0, 80096ae <_dtoa_r+0x69e>
 80096a8:	f018 0f01 	tst.w	r8, #1
 80096ac:	d10e      	bne.n	80096cc <_dtoa_r+0x6bc>
 80096ae:	9902      	ldr	r1, [sp, #8]
 80096b0:	4648      	mov	r0, r9
 80096b2:	f001 f8c1 	bl	800a838 <_Bfree>
 80096b6:	2300      	movs	r3, #0
 80096b8:	7033      	strb	r3, [r6, #0]
 80096ba:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80096bc:	3701      	adds	r7, #1
 80096be:	601f      	str	r7, [r3, #0]
 80096c0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	f000 824b 	beq.w	8009b5e <_dtoa_r+0xb4e>
 80096c8:	601e      	str	r6, [r3, #0]
 80096ca:	e248      	b.n	8009b5e <_dtoa_r+0xb4e>
 80096cc:	46b8      	mov	r8, r7
 80096ce:	4633      	mov	r3, r6
 80096d0:	461e      	mov	r6, r3
 80096d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80096d6:	2a39      	cmp	r2, #57	@ 0x39
 80096d8:	d106      	bne.n	80096e8 <_dtoa_r+0x6d8>
 80096da:	459a      	cmp	sl, r3
 80096dc:	d1f8      	bne.n	80096d0 <_dtoa_r+0x6c0>
 80096de:	2230      	movs	r2, #48	@ 0x30
 80096e0:	f108 0801 	add.w	r8, r8, #1
 80096e4:	f88a 2000 	strb.w	r2, [sl]
 80096e8:	781a      	ldrb	r2, [r3, #0]
 80096ea:	3201      	adds	r2, #1
 80096ec:	701a      	strb	r2, [r3, #0]
 80096ee:	e7a0      	b.n	8009632 <_dtoa_r+0x622>
 80096f0:	4b6f      	ldr	r3, [pc, #444]	@ (80098b0 <_dtoa_r+0x8a0>)
 80096f2:	2200      	movs	r2, #0
 80096f4:	f7f6 ff80 	bl	80005f8 <__aeabi_dmul>
 80096f8:	2200      	movs	r2, #0
 80096fa:	2300      	movs	r3, #0
 80096fc:	4604      	mov	r4, r0
 80096fe:	460d      	mov	r5, r1
 8009700:	f7f7 f9e2 	bl	8000ac8 <__aeabi_dcmpeq>
 8009704:	2800      	cmp	r0, #0
 8009706:	d09f      	beq.n	8009648 <_dtoa_r+0x638>
 8009708:	e7d1      	b.n	80096ae <_dtoa_r+0x69e>
 800970a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800970c:	2a00      	cmp	r2, #0
 800970e:	f000 80ea 	beq.w	80098e6 <_dtoa_r+0x8d6>
 8009712:	9a07      	ldr	r2, [sp, #28]
 8009714:	2a01      	cmp	r2, #1
 8009716:	f300 80cd 	bgt.w	80098b4 <_dtoa_r+0x8a4>
 800971a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800971c:	2a00      	cmp	r2, #0
 800971e:	f000 80c1 	beq.w	80098a4 <_dtoa_r+0x894>
 8009722:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009726:	9c08      	ldr	r4, [sp, #32]
 8009728:	9e00      	ldr	r6, [sp, #0]
 800972a:	9a00      	ldr	r2, [sp, #0]
 800972c:	441a      	add	r2, r3
 800972e:	9200      	str	r2, [sp, #0]
 8009730:	9a06      	ldr	r2, [sp, #24]
 8009732:	2101      	movs	r1, #1
 8009734:	441a      	add	r2, r3
 8009736:	4648      	mov	r0, r9
 8009738:	9206      	str	r2, [sp, #24]
 800973a:	f001 f97b 	bl	800aa34 <__i2b>
 800973e:	4605      	mov	r5, r0
 8009740:	b166      	cbz	r6, 800975c <_dtoa_r+0x74c>
 8009742:	9b06      	ldr	r3, [sp, #24]
 8009744:	2b00      	cmp	r3, #0
 8009746:	dd09      	ble.n	800975c <_dtoa_r+0x74c>
 8009748:	42b3      	cmp	r3, r6
 800974a:	9a00      	ldr	r2, [sp, #0]
 800974c:	bfa8      	it	ge
 800974e:	4633      	movge	r3, r6
 8009750:	1ad2      	subs	r2, r2, r3
 8009752:	9200      	str	r2, [sp, #0]
 8009754:	9a06      	ldr	r2, [sp, #24]
 8009756:	1af6      	subs	r6, r6, r3
 8009758:	1ad3      	subs	r3, r2, r3
 800975a:	9306      	str	r3, [sp, #24]
 800975c:	9b08      	ldr	r3, [sp, #32]
 800975e:	b30b      	cbz	r3, 80097a4 <_dtoa_r+0x794>
 8009760:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009762:	2b00      	cmp	r3, #0
 8009764:	f000 80c6 	beq.w	80098f4 <_dtoa_r+0x8e4>
 8009768:	2c00      	cmp	r4, #0
 800976a:	f000 80c0 	beq.w	80098ee <_dtoa_r+0x8de>
 800976e:	4629      	mov	r1, r5
 8009770:	4622      	mov	r2, r4
 8009772:	4648      	mov	r0, r9
 8009774:	f001 fa16 	bl	800aba4 <__pow5mult>
 8009778:	9a02      	ldr	r2, [sp, #8]
 800977a:	4601      	mov	r1, r0
 800977c:	4605      	mov	r5, r0
 800977e:	4648      	mov	r0, r9
 8009780:	f001 f96e 	bl	800aa60 <__multiply>
 8009784:	9902      	ldr	r1, [sp, #8]
 8009786:	4680      	mov	r8, r0
 8009788:	4648      	mov	r0, r9
 800978a:	f001 f855 	bl	800a838 <_Bfree>
 800978e:	9b08      	ldr	r3, [sp, #32]
 8009790:	1b1b      	subs	r3, r3, r4
 8009792:	9308      	str	r3, [sp, #32]
 8009794:	f000 80b1 	beq.w	80098fa <_dtoa_r+0x8ea>
 8009798:	9a08      	ldr	r2, [sp, #32]
 800979a:	4641      	mov	r1, r8
 800979c:	4648      	mov	r0, r9
 800979e:	f001 fa01 	bl	800aba4 <__pow5mult>
 80097a2:	9002      	str	r0, [sp, #8]
 80097a4:	2101      	movs	r1, #1
 80097a6:	4648      	mov	r0, r9
 80097a8:	f001 f944 	bl	800aa34 <__i2b>
 80097ac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80097ae:	4604      	mov	r4, r0
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	f000 81d8 	beq.w	8009b66 <_dtoa_r+0xb56>
 80097b6:	461a      	mov	r2, r3
 80097b8:	4601      	mov	r1, r0
 80097ba:	4648      	mov	r0, r9
 80097bc:	f001 f9f2 	bl	800aba4 <__pow5mult>
 80097c0:	9b07      	ldr	r3, [sp, #28]
 80097c2:	2b01      	cmp	r3, #1
 80097c4:	4604      	mov	r4, r0
 80097c6:	f300 809f 	bgt.w	8009908 <_dtoa_r+0x8f8>
 80097ca:	9b04      	ldr	r3, [sp, #16]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	f040 8097 	bne.w	8009900 <_dtoa_r+0x8f0>
 80097d2:	9b05      	ldr	r3, [sp, #20]
 80097d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80097d8:	2b00      	cmp	r3, #0
 80097da:	f040 8093 	bne.w	8009904 <_dtoa_r+0x8f4>
 80097de:	9b05      	ldr	r3, [sp, #20]
 80097e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80097e4:	0d1b      	lsrs	r3, r3, #20
 80097e6:	051b      	lsls	r3, r3, #20
 80097e8:	b133      	cbz	r3, 80097f8 <_dtoa_r+0x7e8>
 80097ea:	9b00      	ldr	r3, [sp, #0]
 80097ec:	3301      	adds	r3, #1
 80097ee:	9300      	str	r3, [sp, #0]
 80097f0:	9b06      	ldr	r3, [sp, #24]
 80097f2:	3301      	adds	r3, #1
 80097f4:	9306      	str	r3, [sp, #24]
 80097f6:	2301      	movs	r3, #1
 80097f8:	9308      	str	r3, [sp, #32]
 80097fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	f000 81b8 	beq.w	8009b72 <_dtoa_r+0xb62>
 8009802:	6923      	ldr	r3, [r4, #16]
 8009804:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009808:	6918      	ldr	r0, [r3, #16]
 800980a:	f001 f8c7 	bl	800a99c <__hi0bits>
 800980e:	f1c0 0020 	rsb	r0, r0, #32
 8009812:	9b06      	ldr	r3, [sp, #24]
 8009814:	4418      	add	r0, r3
 8009816:	f010 001f 	ands.w	r0, r0, #31
 800981a:	f000 8082 	beq.w	8009922 <_dtoa_r+0x912>
 800981e:	f1c0 0320 	rsb	r3, r0, #32
 8009822:	2b04      	cmp	r3, #4
 8009824:	dd73      	ble.n	800990e <_dtoa_r+0x8fe>
 8009826:	9b00      	ldr	r3, [sp, #0]
 8009828:	f1c0 001c 	rsb	r0, r0, #28
 800982c:	4403      	add	r3, r0
 800982e:	9300      	str	r3, [sp, #0]
 8009830:	9b06      	ldr	r3, [sp, #24]
 8009832:	4403      	add	r3, r0
 8009834:	4406      	add	r6, r0
 8009836:	9306      	str	r3, [sp, #24]
 8009838:	9b00      	ldr	r3, [sp, #0]
 800983a:	2b00      	cmp	r3, #0
 800983c:	dd05      	ble.n	800984a <_dtoa_r+0x83a>
 800983e:	9902      	ldr	r1, [sp, #8]
 8009840:	461a      	mov	r2, r3
 8009842:	4648      	mov	r0, r9
 8009844:	f001 fa08 	bl	800ac58 <__lshift>
 8009848:	9002      	str	r0, [sp, #8]
 800984a:	9b06      	ldr	r3, [sp, #24]
 800984c:	2b00      	cmp	r3, #0
 800984e:	dd05      	ble.n	800985c <_dtoa_r+0x84c>
 8009850:	4621      	mov	r1, r4
 8009852:	461a      	mov	r2, r3
 8009854:	4648      	mov	r0, r9
 8009856:	f001 f9ff 	bl	800ac58 <__lshift>
 800985a:	4604      	mov	r4, r0
 800985c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800985e:	2b00      	cmp	r3, #0
 8009860:	d061      	beq.n	8009926 <_dtoa_r+0x916>
 8009862:	9802      	ldr	r0, [sp, #8]
 8009864:	4621      	mov	r1, r4
 8009866:	f001 fa63 	bl	800ad30 <__mcmp>
 800986a:	2800      	cmp	r0, #0
 800986c:	da5b      	bge.n	8009926 <_dtoa_r+0x916>
 800986e:	2300      	movs	r3, #0
 8009870:	9902      	ldr	r1, [sp, #8]
 8009872:	220a      	movs	r2, #10
 8009874:	4648      	mov	r0, r9
 8009876:	f001 f801 	bl	800a87c <__multadd>
 800987a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800987c:	9002      	str	r0, [sp, #8]
 800987e:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8009882:	2b00      	cmp	r3, #0
 8009884:	f000 8177 	beq.w	8009b76 <_dtoa_r+0xb66>
 8009888:	4629      	mov	r1, r5
 800988a:	2300      	movs	r3, #0
 800988c:	220a      	movs	r2, #10
 800988e:	4648      	mov	r0, r9
 8009890:	f000 fff4 	bl	800a87c <__multadd>
 8009894:	f1bb 0f00 	cmp.w	fp, #0
 8009898:	4605      	mov	r5, r0
 800989a:	dc6f      	bgt.n	800997c <_dtoa_r+0x96c>
 800989c:	9b07      	ldr	r3, [sp, #28]
 800989e:	2b02      	cmp	r3, #2
 80098a0:	dc49      	bgt.n	8009936 <_dtoa_r+0x926>
 80098a2:	e06b      	b.n	800997c <_dtoa_r+0x96c>
 80098a4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80098a6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80098aa:	e73c      	b.n	8009726 <_dtoa_r+0x716>
 80098ac:	3fe00000 	.word	0x3fe00000
 80098b0:	40240000 	.word	0x40240000
 80098b4:	9b03      	ldr	r3, [sp, #12]
 80098b6:	1e5c      	subs	r4, r3, #1
 80098b8:	9b08      	ldr	r3, [sp, #32]
 80098ba:	42a3      	cmp	r3, r4
 80098bc:	db09      	blt.n	80098d2 <_dtoa_r+0x8c2>
 80098be:	1b1c      	subs	r4, r3, r4
 80098c0:	9b03      	ldr	r3, [sp, #12]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	f6bf af30 	bge.w	8009728 <_dtoa_r+0x718>
 80098c8:	9b00      	ldr	r3, [sp, #0]
 80098ca:	9a03      	ldr	r2, [sp, #12]
 80098cc:	1a9e      	subs	r6, r3, r2
 80098ce:	2300      	movs	r3, #0
 80098d0:	e72b      	b.n	800972a <_dtoa_r+0x71a>
 80098d2:	9b08      	ldr	r3, [sp, #32]
 80098d4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80098d6:	9408      	str	r4, [sp, #32]
 80098d8:	1ae3      	subs	r3, r4, r3
 80098da:	441a      	add	r2, r3
 80098dc:	9e00      	ldr	r6, [sp, #0]
 80098de:	9b03      	ldr	r3, [sp, #12]
 80098e0:	920d      	str	r2, [sp, #52]	@ 0x34
 80098e2:	2400      	movs	r4, #0
 80098e4:	e721      	b.n	800972a <_dtoa_r+0x71a>
 80098e6:	9c08      	ldr	r4, [sp, #32]
 80098e8:	9e00      	ldr	r6, [sp, #0]
 80098ea:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80098ec:	e728      	b.n	8009740 <_dtoa_r+0x730>
 80098ee:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80098f2:	e751      	b.n	8009798 <_dtoa_r+0x788>
 80098f4:	9a08      	ldr	r2, [sp, #32]
 80098f6:	9902      	ldr	r1, [sp, #8]
 80098f8:	e750      	b.n	800979c <_dtoa_r+0x78c>
 80098fa:	f8cd 8008 	str.w	r8, [sp, #8]
 80098fe:	e751      	b.n	80097a4 <_dtoa_r+0x794>
 8009900:	2300      	movs	r3, #0
 8009902:	e779      	b.n	80097f8 <_dtoa_r+0x7e8>
 8009904:	9b04      	ldr	r3, [sp, #16]
 8009906:	e777      	b.n	80097f8 <_dtoa_r+0x7e8>
 8009908:	2300      	movs	r3, #0
 800990a:	9308      	str	r3, [sp, #32]
 800990c:	e779      	b.n	8009802 <_dtoa_r+0x7f2>
 800990e:	d093      	beq.n	8009838 <_dtoa_r+0x828>
 8009910:	9a00      	ldr	r2, [sp, #0]
 8009912:	331c      	adds	r3, #28
 8009914:	441a      	add	r2, r3
 8009916:	9200      	str	r2, [sp, #0]
 8009918:	9a06      	ldr	r2, [sp, #24]
 800991a:	441a      	add	r2, r3
 800991c:	441e      	add	r6, r3
 800991e:	9206      	str	r2, [sp, #24]
 8009920:	e78a      	b.n	8009838 <_dtoa_r+0x828>
 8009922:	4603      	mov	r3, r0
 8009924:	e7f4      	b.n	8009910 <_dtoa_r+0x900>
 8009926:	9b03      	ldr	r3, [sp, #12]
 8009928:	2b00      	cmp	r3, #0
 800992a:	46b8      	mov	r8, r7
 800992c:	dc20      	bgt.n	8009970 <_dtoa_r+0x960>
 800992e:	469b      	mov	fp, r3
 8009930:	9b07      	ldr	r3, [sp, #28]
 8009932:	2b02      	cmp	r3, #2
 8009934:	dd1e      	ble.n	8009974 <_dtoa_r+0x964>
 8009936:	f1bb 0f00 	cmp.w	fp, #0
 800993a:	f47f adb1 	bne.w	80094a0 <_dtoa_r+0x490>
 800993e:	4621      	mov	r1, r4
 8009940:	465b      	mov	r3, fp
 8009942:	2205      	movs	r2, #5
 8009944:	4648      	mov	r0, r9
 8009946:	f000 ff99 	bl	800a87c <__multadd>
 800994a:	4601      	mov	r1, r0
 800994c:	4604      	mov	r4, r0
 800994e:	9802      	ldr	r0, [sp, #8]
 8009950:	f001 f9ee 	bl	800ad30 <__mcmp>
 8009954:	2800      	cmp	r0, #0
 8009956:	f77f ada3 	ble.w	80094a0 <_dtoa_r+0x490>
 800995a:	4656      	mov	r6, sl
 800995c:	2331      	movs	r3, #49	@ 0x31
 800995e:	f806 3b01 	strb.w	r3, [r6], #1
 8009962:	f108 0801 	add.w	r8, r8, #1
 8009966:	e59f      	b.n	80094a8 <_dtoa_r+0x498>
 8009968:	9c03      	ldr	r4, [sp, #12]
 800996a:	46b8      	mov	r8, r7
 800996c:	4625      	mov	r5, r4
 800996e:	e7f4      	b.n	800995a <_dtoa_r+0x94a>
 8009970:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8009974:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009976:	2b00      	cmp	r3, #0
 8009978:	f000 8101 	beq.w	8009b7e <_dtoa_r+0xb6e>
 800997c:	2e00      	cmp	r6, #0
 800997e:	dd05      	ble.n	800998c <_dtoa_r+0x97c>
 8009980:	4629      	mov	r1, r5
 8009982:	4632      	mov	r2, r6
 8009984:	4648      	mov	r0, r9
 8009986:	f001 f967 	bl	800ac58 <__lshift>
 800998a:	4605      	mov	r5, r0
 800998c:	9b08      	ldr	r3, [sp, #32]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d05c      	beq.n	8009a4c <_dtoa_r+0xa3c>
 8009992:	6869      	ldr	r1, [r5, #4]
 8009994:	4648      	mov	r0, r9
 8009996:	f000 ff0f 	bl	800a7b8 <_Balloc>
 800999a:	4606      	mov	r6, r0
 800999c:	b928      	cbnz	r0, 80099aa <_dtoa_r+0x99a>
 800999e:	4b82      	ldr	r3, [pc, #520]	@ (8009ba8 <_dtoa_r+0xb98>)
 80099a0:	4602      	mov	r2, r0
 80099a2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80099a6:	f7ff bb4a 	b.w	800903e <_dtoa_r+0x2e>
 80099aa:	692a      	ldr	r2, [r5, #16]
 80099ac:	3202      	adds	r2, #2
 80099ae:	0092      	lsls	r2, r2, #2
 80099b0:	f105 010c 	add.w	r1, r5, #12
 80099b4:	300c      	adds	r0, #12
 80099b6:	f7ff fa83 	bl	8008ec0 <memcpy>
 80099ba:	2201      	movs	r2, #1
 80099bc:	4631      	mov	r1, r6
 80099be:	4648      	mov	r0, r9
 80099c0:	f001 f94a 	bl	800ac58 <__lshift>
 80099c4:	f10a 0301 	add.w	r3, sl, #1
 80099c8:	9300      	str	r3, [sp, #0]
 80099ca:	eb0a 030b 	add.w	r3, sl, fp
 80099ce:	9308      	str	r3, [sp, #32]
 80099d0:	9b04      	ldr	r3, [sp, #16]
 80099d2:	f003 0301 	and.w	r3, r3, #1
 80099d6:	462f      	mov	r7, r5
 80099d8:	9306      	str	r3, [sp, #24]
 80099da:	4605      	mov	r5, r0
 80099dc:	9b00      	ldr	r3, [sp, #0]
 80099de:	9802      	ldr	r0, [sp, #8]
 80099e0:	4621      	mov	r1, r4
 80099e2:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 80099e6:	f7ff fa89 	bl	8008efc <quorem>
 80099ea:	4603      	mov	r3, r0
 80099ec:	3330      	adds	r3, #48	@ 0x30
 80099ee:	9003      	str	r0, [sp, #12]
 80099f0:	4639      	mov	r1, r7
 80099f2:	9802      	ldr	r0, [sp, #8]
 80099f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80099f6:	f001 f99b 	bl	800ad30 <__mcmp>
 80099fa:	462a      	mov	r2, r5
 80099fc:	9004      	str	r0, [sp, #16]
 80099fe:	4621      	mov	r1, r4
 8009a00:	4648      	mov	r0, r9
 8009a02:	f001 f9b1 	bl	800ad68 <__mdiff>
 8009a06:	68c2      	ldr	r2, [r0, #12]
 8009a08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a0a:	4606      	mov	r6, r0
 8009a0c:	bb02      	cbnz	r2, 8009a50 <_dtoa_r+0xa40>
 8009a0e:	4601      	mov	r1, r0
 8009a10:	9802      	ldr	r0, [sp, #8]
 8009a12:	f001 f98d 	bl	800ad30 <__mcmp>
 8009a16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a18:	4602      	mov	r2, r0
 8009a1a:	4631      	mov	r1, r6
 8009a1c:	4648      	mov	r0, r9
 8009a1e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009a20:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a22:	f000 ff09 	bl	800a838 <_Bfree>
 8009a26:	9b07      	ldr	r3, [sp, #28]
 8009a28:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009a2a:	9e00      	ldr	r6, [sp, #0]
 8009a2c:	ea42 0103 	orr.w	r1, r2, r3
 8009a30:	9b06      	ldr	r3, [sp, #24]
 8009a32:	4319      	orrs	r1, r3
 8009a34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a36:	d10d      	bne.n	8009a54 <_dtoa_r+0xa44>
 8009a38:	2b39      	cmp	r3, #57	@ 0x39
 8009a3a:	d027      	beq.n	8009a8c <_dtoa_r+0xa7c>
 8009a3c:	9a04      	ldr	r2, [sp, #16]
 8009a3e:	2a00      	cmp	r2, #0
 8009a40:	dd01      	ble.n	8009a46 <_dtoa_r+0xa36>
 8009a42:	9b03      	ldr	r3, [sp, #12]
 8009a44:	3331      	adds	r3, #49	@ 0x31
 8009a46:	f88b 3000 	strb.w	r3, [fp]
 8009a4a:	e52e      	b.n	80094aa <_dtoa_r+0x49a>
 8009a4c:	4628      	mov	r0, r5
 8009a4e:	e7b9      	b.n	80099c4 <_dtoa_r+0x9b4>
 8009a50:	2201      	movs	r2, #1
 8009a52:	e7e2      	b.n	8009a1a <_dtoa_r+0xa0a>
 8009a54:	9904      	ldr	r1, [sp, #16]
 8009a56:	2900      	cmp	r1, #0
 8009a58:	db04      	blt.n	8009a64 <_dtoa_r+0xa54>
 8009a5a:	9807      	ldr	r0, [sp, #28]
 8009a5c:	4301      	orrs	r1, r0
 8009a5e:	9806      	ldr	r0, [sp, #24]
 8009a60:	4301      	orrs	r1, r0
 8009a62:	d120      	bne.n	8009aa6 <_dtoa_r+0xa96>
 8009a64:	2a00      	cmp	r2, #0
 8009a66:	ddee      	ble.n	8009a46 <_dtoa_r+0xa36>
 8009a68:	9902      	ldr	r1, [sp, #8]
 8009a6a:	9300      	str	r3, [sp, #0]
 8009a6c:	2201      	movs	r2, #1
 8009a6e:	4648      	mov	r0, r9
 8009a70:	f001 f8f2 	bl	800ac58 <__lshift>
 8009a74:	4621      	mov	r1, r4
 8009a76:	9002      	str	r0, [sp, #8]
 8009a78:	f001 f95a 	bl	800ad30 <__mcmp>
 8009a7c:	2800      	cmp	r0, #0
 8009a7e:	9b00      	ldr	r3, [sp, #0]
 8009a80:	dc02      	bgt.n	8009a88 <_dtoa_r+0xa78>
 8009a82:	d1e0      	bne.n	8009a46 <_dtoa_r+0xa36>
 8009a84:	07da      	lsls	r2, r3, #31
 8009a86:	d5de      	bpl.n	8009a46 <_dtoa_r+0xa36>
 8009a88:	2b39      	cmp	r3, #57	@ 0x39
 8009a8a:	d1da      	bne.n	8009a42 <_dtoa_r+0xa32>
 8009a8c:	2339      	movs	r3, #57	@ 0x39
 8009a8e:	f88b 3000 	strb.w	r3, [fp]
 8009a92:	4633      	mov	r3, r6
 8009a94:	461e      	mov	r6, r3
 8009a96:	3b01      	subs	r3, #1
 8009a98:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009a9c:	2a39      	cmp	r2, #57	@ 0x39
 8009a9e:	d04e      	beq.n	8009b3e <_dtoa_r+0xb2e>
 8009aa0:	3201      	adds	r2, #1
 8009aa2:	701a      	strb	r2, [r3, #0]
 8009aa4:	e501      	b.n	80094aa <_dtoa_r+0x49a>
 8009aa6:	2a00      	cmp	r2, #0
 8009aa8:	dd03      	ble.n	8009ab2 <_dtoa_r+0xaa2>
 8009aaa:	2b39      	cmp	r3, #57	@ 0x39
 8009aac:	d0ee      	beq.n	8009a8c <_dtoa_r+0xa7c>
 8009aae:	3301      	adds	r3, #1
 8009ab0:	e7c9      	b.n	8009a46 <_dtoa_r+0xa36>
 8009ab2:	9a00      	ldr	r2, [sp, #0]
 8009ab4:	9908      	ldr	r1, [sp, #32]
 8009ab6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009aba:	428a      	cmp	r2, r1
 8009abc:	d028      	beq.n	8009b10 <_dtoa_r+0xb00>
 8009abe:	9902      	ldr	r1, [sp, #8]
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	220a      	movs	r2, #10
 8009ac4:	4648      	mov	r0, r9
 8009ac6:	f000 fed9 	bl	800a87c <__multadd>
 8009aca:	42af      	cmp	r7, r5
 8009acc:	9002      	str	r0, [sp, #8]
 8009ace:	f04f 0300 	mov.w	r3, #0
 8009ad2:	f04f 020a 	mov.w	r2, #10
 8009ad6:	4639      	mov	r1, r7
 8009ad8:	4648      	mov	r0, r9
 8009ada:	d107      	bne.n	8009aec <_dtoa_r+0xadc>
 8009adc:	f000 fece 	bl	800a87c <__multadd>
 8009ae0:	4607      	mov	r7, r0
 8009ae2:	4605      	mov	r5, r0
 8009ae4:	9b00      	ldr	r3, [sp, #0]
 8009ae6:	3301      	adds	r3, #1
 8009ae8:	9300      	str	r3, [sp, #0]
 8009aea:	e777      	b.n	80099dc <_dtoa_r+0x9cc>
 8009aec:	f000 fec6 	bl	800a87c <__multadd>
 8009af0:	4629      	mov	r1, r5
 8009af2:	4607      	mov	r7, r0
 8009af4:	2300      	movs	r3, #0
 8009af6:	220a      	movs	r2, #10
 8009af8:	4648      	mov	r0, r9
 8009afa:	f000 febf 	bl	800a87c <__multadd>
 8009afe:	4605      	mov	r5, r0
 8009b00:	e7f0      	b.n	8009ae4 <_dtoa_r+0xad4>
 8009b02:	f1bb 0f00 	cmp.w	fp, #0
 8009b06:	bfcc      	ite	gt
 8009b08:	465e      	movgt	r6, fp
 8009b0a:	2601      	movle	r6, #1
 8009b0c:	4456      	add	r6, sl
 8009b0e:	2700      	movs	r7, #0
 8009b10:	9902      	ldr	r1, [sp, #8]
 8009b12:	9300      	str	r3, [sp, #0]
 8009b14:	2201      	movs	r2, #1
 8009b16:	4648      	mov	r0, r9
 8009b18:	f001 f89e 	bl	800ac58 <__lshift>
 8009b1c:	4621      	mov	r1, r4
 8009b1e:	9002      	str	r0, [sp, #8]
 8009b20:	f001 f906 	bl	800ad30 <__mcmp>
 8009b24:	2800      	cmp	r0, #0
 8009b26:	dcb4      	bgt.n	8009a92 <_dtoa_r+0xa82>
 8009b28:	d102      	bne.n	8009b30 <_dtoa_r+0xb20>
 8009b2a:	9b00      	ldr	r3, [sp, #0]
 8009b2c:	07db      	lsls	r3, r3, #31
 8009b2e:	d4b0      	bmi.n	8009a92 <_dtoa_r+0xa82>
 8009b30:	4633      	mov	r3, r6
 8009b32:	461e      	mov	r6, r3
 8009b34:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009b38:	2a30      	cmp	r2, #48	@ 0x30
 8009b3a:	d0fa      	beq.n	8009b32 <_dtoa_r+0xb22>
 8009b3c:	e4b5      	b.n	80094aa <_dtoa_r+0x49a>
 8009b3e:	459a      	cmp	sl, r3
 8009b40:	d1a8      	bne.n	8009a94 <_dtoa_r+0xa84>
 8009b42:	2331      	movs	r3, #49	@ 0x31
 8009b44:	f108 0801 	add.w	r8, r8, #1
 8009b48:	f88a 3000 	strb.w	r3, [sl]
 8009b4c:	e4ad      	b.n	80094aa <_dtoa_r+0x49a>
 8009b4e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009b50:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8009bac <_dtoa_r+0xb9c>
 8009b54:	b11b      	cbz	r3, 8009b5e <_dtoa_r+0xb4e>
 8009b56:	f10a 0308 	add.w	r3, sl, #8
 8009b5a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009b5c:	6013      	str	r3, [r2, #0]
 8009b5e:	4650      	mov	r0, sl
 8009b60:	b017      	add	sp, #92	@ 0x5c
 8009b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b66:	9b07      	ldr	r3, [sp, #28]
 8009b68:	2b01      	cmp	r3, #1
 8009b6a:	f77f ae2e 	ble.w	80097ca <_dtoa_r+0x7ba>
 8009b6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009b70:	9308      	str	r3, [sp, #32]
 8009b72:	2001      	movs	r0, #1
 8009b74:	e64d      	b.n	8009812 <_dtoa_r+0x802>
 8009b76:	f1bb 0f00 	cmp.w	fp, #0
 8009b7a:	f77f aed9 	ble.w	8009930 <_dtoa_r+0x920>
 8009b7e:	4656      	mov	r6, sl
 8009b80:	9802      	ldr	r0, [sp, #8]
 8009b82:	4621      	mov	r1, r4
 8009b84:	f7ff f9ba 	bl	8008efc <quorem>
 8009b88:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8009b8c:	f806 3b01 	strb.w	r3, [r6], #1
 8009b90:	eba6 020a 	sub.w	r2, r6, sl
 8009b94:	4593      	cmp	fp, r2
 8009b96:	ddb4      	ble.n	8009b02 <_dtoa_r+0xaf2>
 8009b98:	9902      	ldr	r1, [sp, #8]
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	220a      	movs	r2, #10
 8009b9e:	4648      	mov	r0, r9
 8009ba0:	f000 fe6c 	bl	800a87c <__multadd>
 8009ba4:	9002      	str	r0, [sp, #8]
 8009ba6:	e7eb      	b.n	8009b80 <_dtoa_r+0xb70>
 8009ba8:	0800be0b 	.word	0x0800be0b
 8009bac:	0800bd8f 	.word	0x0800bd8f

08009bb0 <rshift>:
 8009bb0:	6903      	ldr	r3, [r0, #16]
 8009bb2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009bb6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009bba:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009bbe:	f100 0414 	add.w	r4, r0, #20
 8009bc2:	dd45      	ble.n	8009c50 <rshift+0xa0>
 8009bc4:	f011 011f 	ands.w	r1, r1, #31
 8009bc8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009bcc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009bd0:	d10c      	bne.n	8009bec <rshift+0x3c>
 8009bd2:	f100 0710 	add.w	r7, r0, #16
 8009bd6:	4629      	mov	r1, r5
 8009bd8:	42b1      	cmp	r1, r6
 8009bda:	d334      	bcc.n	8009c46 <rshift+0x96>
 8009bdc:	1a9b      	subs	r3, r3, r2
 8009bde:	009b      	lsls	r3, r3, #2
 8009be0:	1eea      	subs	r2, r5, #3
 8009be2:	4296      	cmp	r6, r2
 8009be4:	bf38      	it	cc
 8009be6:	2300      	movcc	r3, #0
 8009be8:	4423      	add	r3, r4
 8009bea:	e015      	b.n	8009c18 <rshift+0x68>
 8009bec:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009bf0:	f1c1 0820 	rsb	r8, r1, #32
 8009bf4:	40cf      	lsrs	r7, r1
 8009bf6:	f105 0e04 	add.w	lr, r5, #4
 8009bfa:	46a1      	mov	r9, r4
 8009bfc:	4576      	cmp	r6, lr
 8009bfe:	46f4      	mov	ip, lr
 8009c00:	d815      	bhi.n	8009c2e <rshift+0x7e>
 8009c02:	1a9a      	subs	r2, r3, r2
 8009c04:	0092      	lsls	r2, r2, #2
 8009c06:	3a04      	subs	r2, #4
 8009c08:	3501      	adds	r5, #1
 8009c0a:	42ae      	cmp	r6, r5
 8009c0c:	bf38      	it	cc
 8009c0e:	2200      	movcc	r2, #0
 8009c10:	18a3      	adds	r3, r4, r2
 8009c12:	50a7      	str	r7, [r4, r2]
 8009c14:	b107      	cbz	r7, 8009c18 <rshift+0x68>
 8009c16:	3304      	adds	r3, #4
 8009c18:	1b1a      	subs	r2, r3, r4
 8009c1a:	42a3      	cmp	r3, r4
 8009c1c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009c20:	bf08      	it	eq
 8009c22:	2300      	moveq	r3, #0
 8009c24:	6102      	str	r2, [r0, #16]
 8009c26:	bf08      	it	eq
 8009c28:	6143      	streq	r3, [r0, #20]
 8009c2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c2e:	f8dc c000 	ldr.w	ip, [ip]
 8009c32:	fa0c fc08 	lsl.w	ip, ip, r8
 8009c36:	ea4c 0707 	orr.w	r7, ip, r7
 8009c3a:	f849 7b04 	str.w	r7, [r9], #4
 8009c3e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009c42:	40cf      	lsrs	r7, r1
 8009c44:	e7da      	b.n	8009bfc <rshift+0x4c>
 8009c46:	f851 cb04 	ldr.w	ip, [r1], #4
 8009c4a:	f847 cf04 	str.w	ip, [r7, #4]!
 8009c4e:	e7c3      	b.n	8009bd8 <rshift+0x28>
 8009c50:	4623      	mov	r3, r4
 8009c52:	e7e1      	b.n	8009c18 <rshift+0x68>

08009c54 <__hexdig_fun>:
 8009c54:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009c58:	2b09      	cmp	r3, #9
 8009c5a:	d802      	bhi.n	8009c62 <__hexdig_fun+0xe>
 8009c5c:	3820      	subs	r0, #32
 8009c5e:	b2c0      	uxtb	r0, r0
 8009c60:	4770      	bx	lr
 8009c62:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009c66:	2b05      	cmp	r3, #5
 8009c68:	d801      	bhi.n	8009c6e <__hexdig_fun+0x1a>
 8009c6a:	3847      	subs	r0, #71	@ 0x47
 8009c6c:	e7f7      	b.n	8009c5e <__hexdig_fun+0xa>
 8009c6e:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009c72:	2b05      	cmp	r3, #5
 8009c74:	d801      	bhi.n	8009c7a <__hexdig_fun+0x26>
 8009c76:	3827      	subs	r0, #39	@ 0x27
 8009c78:	e7f1      	b.n	8009c5e <__hexdig_fun+0xa>
 8009c7a:	2000      	movs	r0, #0
 8009c7c:	4770      	bx	lr
	...

08009c80 <__gethex>:
 8009c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c84:	b085      	sub	sp, #20
 8009c86:	468a      	mov	sl, r1
 8009c88:	9302      	str	r3, [sp, #8]
 8009c8a:	680b      	ldr	r3, [r1, #0]
 8009c8c:	9001      	str	r0, [sp, #4]
 8009c8e:	4690      	mov	r8, r2
 8009c90:	1c9c      	adds	r4, r3, #2
 8009c92:	46a1      	mov	r9, r4
 8009c94:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009c98:	2830      	cmp	r0, #48	@ 0x30
 8009c9a:	d0fa      	beq.n	8009c92 <__gethex+0x12>
 8009c9c:	eba9 0303 	sub.w	r3, r9, r3
 8009ca0:	f1a3 0b02 	sub.w	fp, r3, #2
 8009ca4:	f7ff ffd6 	bl	8009c54 <__hexdig_fun>
 8009ca8:	4605      	mov	r5, r0
 8009caa:	2800      	cmp	r0, #0
 8009cac:	d168      	bne.n	8009d80 <__gethex+0x100>
 8009cae:	49a0      	ldr	r1, [pc, #640]	@ (8009f30 <__gethex+0x2b0>)
 8009cb0:	2201      	movs	r2, #1
 8009cb2:	4648      	mov	r0, r9
 8009cb4:	f7ff f8c0 	bl	8008e38 <strncmp>
 8009cb8:	4607      	mov	r7, r0
 8009cba:	2800      	cmp	r0, #0
 8009cbc:	d167      	bne.n	8009d8e <__gethex+0x10e>
 8009cbe:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009cc2:	4626      	mov	r6, r4
 8009cc4:	f7ff ffc6 	bl	8009c54 <__hexdig_fun>
 8009cc8:	2800      	cmp	r0, #0
 8009cca:	d062      	beq.n	8009d92 <__gethex+0x112>
 8009ccc:	4623      	mov	r3, r4
 8009cce:	7818      	ldrb	r0, [r3, #0]
 8009cd0:	2830      	cmp	r0, #48	@ 0x30
 8009cd2:	4699      	mov	r9, r3
 8009cd4:	f103 0301 	add.w	r3, r3, #1
 8009cd8:	d0f9      	beq.n	8009cce <__gethex+0x4e>
 8009cda:	f7ff ffbb 	bl	8009c54 <__hexdig_fun>
 8009cde:	fab0 f580 	clz	r5, r0
 8009ce2:	096d      	lsrs	r5, r5, #5
 8009ce4:	f04f 0b01 	mov.w	fp, #1
 8009ce8:	464a      	mov	r2, r9
 8009cea:	4616      	mov	r6, r2
 8009cec:	3201      	adds	r2, #1
 8009cee:	7830      	ldrb	r0, [r6, #0]
 8009cf0:	f7ff ffb0 	bl	8009c54 <__hexdig_fun>
 8009cf4:	2800      	cmp	r0, #0
 8009cf6:	d1f8      	bne.n	8009cea <__gethex+0x6a>
 8009cf8:	498d      	ldr	r1, [pc, #564]	@ (8009f30 <__gethex+0x2b0>)
 8009cfa:	2201      	movs	r2, #1
 8009cfc:	4630      	mov	r0, r6
 8009cfe:	f7ff f89b 	bl	8008e38 <strncmp>
 8009d02:	2800      	cmp	r0, #0
 8009d04:	d13f      	bne.n	8009d86 <__gethex+0x106>
 8009d06:	b944      	cbnz	r4, 8009d1a <__gethex+0x9a>
 8009d08:	1c74      	adds	r4, r6, #1
 8009d0a:	4622      	mov	r2, r4
 8009d0c:	4616      	mov	r6, r2
 8009d0e:	3201      	adds	r2, #1
 8009d10:	7830      	ldrb	r0, [r6, #0]
 8009d12:	f7ff ff9f 	bl	8009c54 <__hexdig_fun>
 8009d16:	2800      	cmp	r0, #0
 8009d18:	d1f8      	bne.n	8009d0c <__gethex+0x8c>
 8009d1a:	1ba4      	subs	r4, r4, r6
 8009d1c:	00a7      	lsls	r7, r4, #2
 8009d1e:	7833      	ldrb	r3, [r6, #0]
 8009d20:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009d24:	2b50      	cmp	r3, #80	@ 0x50
 8009d26:	d13e      	bne.n	8009da6 <__gethex+0x126>
 8009d28:	7873      	ldrb	r3, [r6, #1]
 8009d2a:	2b2b      	cmp	r3, #43	@ 0x2b
 8009d2c:	d033      	beq.n	8009d96 <__gethex+0x116>
 8009d2e:	2b2d      	cmp	r3, #45	@ 0x2d
 8009d30:	d034      	beq.n	8009d9c <__gethex+0x11c>
 8009d32:	1c71      	adds	r1, r6, #1
 8009d34:	2400      	movs	r4, #0
 8009d36:	7808      	ldrb	r0, [r1, #0]
 8009d38:	f7ff ff8c 	bl	8009c54 <__hexdig_fun>
 8009d3c:	1e43      	subs	r3, r0, #1
 8009d3e:	b2db      	uxtb	r3, r3
 8009d40:	2b18      	cmp	r3, #24
 8009d42:	d830      	bhi.n	8009da6 <__gethex+0x126>
 8009d44:	f1a0 0210 	sub.w	r2, r0, #16
 8009d48:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009d4c:	f7ff ff82 	bl	8009c54 <__hexdig_fun>
 8009d50:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8009d54:	fa5f fc8c 	uxtb.w	ip, ip
 8009d58:	f1bc 0f18 	cmp.w	ip, #24
 8009d5c:	f04f 030a 	mov.w	r3, #10
 8009d60:	d91e      	bls.n	8009da0 <__gethex+0x120>
 8009d62:	b104      	cbz	r4, 8009d66 <__gethex+0xe6>
 8009d64:	4252      	negs	r2, r2
 8009d66:	4417      	add	r7, r2
 8009d68:	f8ca 1000 	str.w	r1, [sl]
 8009d6c:	b1ed      	cbz	r5, 8009daa <__gethex+0x12a>
 8009d6e:	f1bb 0f00 	cmp.w	fp, #0
 8009d72:	bf0c      	ite	eq
 8009d74:	2506      	moveq	r5, #6
 8009d76:	2500      	movne	r5, #0
 8009d78:	4628      	mov	r0, r5
 8009d7a:	b005      	add	sp, #20
 8009d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d80:	2500      	movs	r5, #0
 8009d82:	462c      	mov	r4, r5
 8009d84:	e7b0      	b.n	8009ce8 <__gethex+0x68>
 8009d86:	2c00      	cmp	r4, #0
 8009d88:	d1c7      	bne.n	8009d1a <__gethex+0x9a>
 8009d8a:	4627      	mov	r7, r4
 8009d8c:	e7c7      	b.n	8009d1e <__gethex+0x9e>
 8009d8e:	464e      	mov	r6, r9
 8009d90:	462f      	mov	r7, r5
 8009d92:	2501      	movs	r5, #1
 8009d94:	e7c3      	b.n	8009d1e <__gethex+0x9e>
 8009d96:	2400      	movs	r4, #0
 8009d98:	1cb1      	adds	r1, r6, #2
 8009d9a:	e7cc      	b.n	8009d36 <__gethex+0xb6>
 8009d9c:	2401      	movs	r4, #1
 8009d9e:	e7fb      	b.n	8009d98 <__gethex+0x118>
 8009da0:	fb03 0002 	mla	r0, r3, r2, r0
 8009da4:	e7ce      	b.n	8009d44 <__gethex+0xc4>
 8009da6:	4631      	mov	r1, r6
 8009da8:	e7de      	b.n	8009d68 <__gethex+0xe8>
 8009daa:	eba6 0309 	sub.w	r3, r6, r9
 8009dae:	3b01      	subs	r3, #1
 8009db0:	4629      	mov	r1, r5
 8009db2:	2b07      	cmp	r3, #7
 8009db4:	dc0a      	bgt.n	8009dcc <__gethex+0x14c>
 8009db6:	9801      	ldr	r0, [sp, #4]
 8009db8:	f000 fcfe 	bl	800a7b8 <_Balloc>
 8009dbc:	4604      	mov	r4, r0
 8009dbe:	b940      	cbnz	r0, 8009dd2 <__gethex+0x152>
 8009dc0:	4b5c      	ldr	r3, [pc, #368]	@ (8009f34 <__gethex+0x2b4>)
 8009dc2:	4602      	mov	r2, r0
 8009dc4:	21e4      	movs	r1, #228	@ 0xe4
 8009dc6:	485c      	ldr	r0, [pc, #368]	@ (8009f38 <__gethex+0x2b8>)
 8009dc8:	f001 fa8e 	bl	800b2e8 <__assert_func>
 8009dcc:	3101      	adds	r1, #1
 8009dce:	105b      	asrs	r3, r3, #1
 8009dd0:	e7ef      	b.n	8009db2 <__gethex+0x132>
 8009dd2:	f100 0a14 	add.w	sl, r0, #20
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	4655      	mov	r5, sl
 8009dda:	469b      	mov	fp, r3
 8009ddc:	45b1      	cmp	r9, r6
 8009dde:	d337      	bcc.n	8009e50 <__gethex+0x1d0>
 8009de0:	f845 bb04 	str.w	fp, [r5], #4
 8009de4:	eba5 050a 	sub.w	r5, r5, sl
 8009de8:	10ad      	asrs	r5, r5, #2
 8009dea:	6125      	str	r5, [r4, #16]
 8009dec:	4658      	mov	r0, fp
 8009dee:	f000 fdd5 	bl	800a99c <__hi0bits>
 8009df2:	016d      	lsls	r5, r5, #5
 8009df4:	f8d8 6000 	ldr.w	r6, [r8]
 8009df8:	1a2d      	subs	r5, r5, r0
 8009dfa:	42b5      	cmp	r5, r6
 8009dfc:	dd54      	ble.n	8009ea8 <__gethex+0x228>
 8009dfe:	1bad      	subs	r5, r5, r6
 8009e00:	4629      	mov	r1, r5
 8009e02:	4620      	mov	r0, r4
 8009e04:	f001 f961 	bl	800b0ca <__any_on>
 8009e08:	4681      	mov	r9, r0
 8009e0a:	b178      	cbz	r0, 8009e2c <__gethex+0x1ac>
 8009e0c:	1e6b      	subs	r3, r5, #1
 8009e0e:	1159      	asrs	r1, r3, #5
 8009e10:	f003 021f 	and.w	r2, r3, #31
 8009e14:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009e18:	f04f 0901 	mov.w	r9, #1
 8009e1c:	fa09 f202 	lsl.w	r2, r9, r2
 8009e20:	420a      	tst	r2, r1
 8009e22:	d003      	beq.n	8009e2c <__gethex+0x1ac>
 8009e24:	454b      	cmp	r3, r9
 8009e26:	dc36      	bgt.n	8009e96 <__gethex+0x216>
 8009e28:	f04f 0902 	mov.w	r9, #2
 8009e2c:	4629      	mov	r1, r5
 8009e2e:	4620      	mov	r0, r4
 8009e30:	f7ff febe 	bl	8009bb0 <rshift>
 8009e34:	442f      	add	r7, r5
 8009e36:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009e3a:	42bb      	cmp	r3, r7
 8009e3c:	da42      	bge.n	8009ec4 <__gethex+0x244>
 8009e3e:	9801      	ldr	r0, [sp, #4]
 8009e40:	4621      	mov	r1, r4
 8009e42:	f000 fcf9 	bl	800a838 <_Bfree>
 8009e46:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009e48:	2300      	movs	r3, #0
 8009e4a:	6013      	str	r3, [r2, #0]
 8009e4c:	25a3      	movs	r5, #163	@ 0xa3
 8009e4e:	e793      	b.n	8009d78 <__gethex+0xf8>
 8009e50:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009e54:	2a2e      	cmp	r2, #46	@ 0x2e
 8009e56:	d012      	beq.n	8009e7e <__gethex+0x1fe>
 8009e58:	2b20      	cmp	r3, #32
 8009e5a:	d104      	bne.n	8009e66 <__gethex+0x1e6>
 8009e5c:	f845 bb04 	str.w	fp, [r5], #4
 8009e60:	f04f 0b00 	mov.w	fp, #0
 8009e64:	465b      	mov	r3, fp
 8009e66:	7830      	ldrb	r0, [r6, #0]
 8009e68:	9303      	str	r3, [sp, #12]
 8009e6a:	f7ff fef3 	bl	8009c54 <__hexdig_fun>
 8009e6e:	9b03      	ldr	r3, [sp, #12]
 8009e70:	f000 000f 	and.w	r0, r0, #15
 8009e74:	4098      	lsls	r0, r3
 8009e76:	ea4b 0b00 	orr.w	fp, fp, r0
 8009e7a:	3304      	adds	r3, #4
 8009e7c:	e7ae      	b.n	8009ddc <__gethex+0x15c>
 8009e7e:	45b1      	cmp	r9, r6
 8009e80:	d8ea      	bhi.n	8009e58 <__gethex+0x1d8>
 8009e82:	492b      	ldr	r1, [pc, #172]	@ (8009f30 <__gethex+0x2b0>)
 8009e84:	9303      	str	r3, [sp, #12]
 8009e86:	2201      	movs	r2, #1
 8009e88:	4630      	mov	r0, r6
 8009e8a:	f7fe ffd5 	bl	8008e38 <strncmp>
 8009e8e:	9b03      	ldr	r3, [sp, #12]
 8009e90:	2800      	cmp	r0, #0
 8009e92:	d1e1      	bne.n	8009e58 <__gethex+0x1d8>
 8009e94:	e7a2      	b.n	8009ddc <__gethex+0x15c>
 8009e96:	1ea9      	subs	r1, r5, #2
 8009e98:	4620      	mov	r0, r4
 8009e9a:	f001 f916 	bl	800b0ca <__any_on>
 8009e9e:	2800      	cmp	r0, #0
 8009ea0:	d0c2      	beq.n	8009e28 <__gethex+0x1a8>
 8009ea2:	f04f 0903 	mov.w	r9, #3
 8009ea6:	e7c1      	b.n	8009e2c <__gethex+0x1ac>
 8009ea8:	da09      	bge.n	8009ebe <__gethex+0x23e>
 8009eaa:	1b75      	subs	r5, r6, r5
 8009eac:	4621      	mov	r1, r4
 8009eae:	9801      	ldr	r0, [sp, #4]
 8009eb0:	462a      	mov	r2, r5
 8009eb2:	f000 fed1 	bl	800ac58 <__lshift>
 8009eb6:	1b7f      	subs	r7, r7, r5
 8009eb8:	4604      	mov	r4, r0
 8009eba:	f100 0a14 	add.w	sl, r0, #20
 8009ebe:	f04f 0900 	mov.w	r9, #0
 8009ec2:	e7b8      	b.n	8009e36 <__gethex+0x1b6>
 8009ec4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009ec8:	42bd      	cmp	r5, r7
 8009eca:	dd6f      	ble.n	8009fac <__gethex+0x32c>
 8009ecc:	1bed      	subs	r5, r5, r7
 8009ece:	42ae      	cmp	r6, r5
 8009ed0:	dc34      	bgt.n	8009f3c <__gethex+0x2bc>
 8009ed2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009ed6:	2b02      	cmp	r3, #2
 8009ed8:	d022      	beq.n	8009f20 <__gethex+0x2a0>
 8009eda:	2b03      	cmp	r3, #3
 8009edc:	d024      	beq.n	8009f28 <__gethex+0x2a8>
 8009ede:	2b01      	cmp	r3, #1
 8009ee0:	d115      	bne.n	8009f0e <__gethex+0x28e>
 8009ee2:	42ae      	cmp	r6, r5
 8009ee4:	d113      	bne.n	8009f0e <__gethex+0x28e>
 8009ee6:	2e01      	cmp	r6, #1
 8009ee8:	d10b      	bne.n	8009f02 <__gethex+0x282>
 8009eea:	9a02      	ldr	r2, [sp, #8]
 8009eec:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009ef0:	6013      	str	r3, [r2, #0]
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	6123      	str	r3, [r4, #16]
 8009ef6:	f8ca 3000 	str.w	r3, [sl]
 8009efa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009efc:	2562      	movs	r5, #98	@ 0x62
 8009efe:	601c      	str	r4, [r3, #0]
 8009f00:	e73a      	b.n	8009d78 <__gethex+0xf8>
 8009f02:	1e71      	subs	r1, r6, #1
 8009f04:	4620      	mov	r0, r4
 8009f06:	f001 f8e0 	bl	800b0ca <__any_on>
 8009f0a:	2800      	cmp	r0, #0
 8009f0c:	d1ed      	bne.n	8009eea <__gethex+0x26a>
 8009f0e:	9801      	ldr	r0, [sp, #4]
 8009f10:	4621      	mov	r1, r4
 8009f12:	f000 fc91 	bl	800a838 <_Bfree>
 8009f16:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009f18:	2300      	movs	r3, #0
 8009f1a:	6013      	str	r3, [r2, #0]
 8009f1c:	2550      	movs	r5, #80	@ 0x50
 8009f1e:	e72b      	b.n	8009d78 <__gethex+0xf8>
 8009f20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d1f3      	bne.n	8009f0e <__gethex+0x28e>
 8009f26:	e7e0      	b.n	8009eea <__gethex+0x26a>
 8009f28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d1dd      	bne.n	8009eea <__gethex+0x26a>
 8009f2e:	e7ee      	b.n	8009f0e <__gethex+0x28e>
 8009f30:	0800bd85 	.word	0x0800bd85
 8009f34:	0800be0b 	.word	0x0800be0b
 8009f38:	0800be1c 	.word	0x0800be1c
 8009f3c:	1e6f      	subs	r7, r5, #1
 8009f3e:	f1b9 0f00 	cmp.w	r9, #0
 8009f42:	d130      	bne.n	8009fa6 <__gethex+0x326>
 8009f44:	b127      	cbz	r7, 8009f50 <__gethex+0x2d0>
 8009f46:	4639      	mov	r1, r7
 8009f48:	4620      	mov	r0, r4
 8009f4a:	f001 f8be 	bl	800b0ca <__any_on>
 8009f4e:	4681      	mov	r9, r0
 8009f50:	117a      	asrs	r2, r7, #5
 8009f52:	2301      	movs	r3, #1
 8009f54:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009f58:	f007 071f 	and.w	r7, r7, #31
 8009f5c:	40bb      	lsls	r3, r7
 8009f5e:	4213      	tst	r3, r2
 8009f60:	4629      	mov	r1, r5
 8009f62:	4620      	mov	r0, r4
 8009f64:	bf18      	it	ne
 8009f66:	f049 0902 	orrne.w	r9, r9, #2
 8009f6a:	f7ff fe21 	bl	8009bb0 <rshift>
 8009f6e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009f72:	1b76      	subs	r6, r6, r5
 8009f74:	2502      	movs	r5, #2
 8009f76:	f1b9 0f00 	cmp.w	r9, #0
 8009f7a:	d047      	beq.n	800a00c <__gethex+0x38c>
 8009f7c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009f80:	2b02      	cmp	r3, #2
 8009f82:	d015      	beq.n	8009fb0 <__gethex+0x330>
 8009f84:	2b03      	cmp	r3, #3
 8009f86:	d017      	beq.n	8009fb8 <__gethex+0x338>
 8009f88:	2b01      	cmp	r3, #1
 8009f8a:	d109      	bne.n	8009fa0 <__gethex+0x320>
 8009f8c:	f019 0f02 	tst.w	r9, #2
 8009f90:	d006      	beq.n	8009fa0 <__gethex+0x320>
 8009f92:	f8da 3000 	ldr.w	r3, [sl]
 8009f96:	ea49 0903 	orr.w	r9, r9, r3
 8009f9a:	f019 0f01 	tst.w	r9, #1
 8009f9e:	d10e      	bne.n	8009fbe <__gethex+0x33e>
 8009fa0:	f045 0510 	orr.w	r5, r5, #16
 8009fa4:	e032      	b.n	800a00c <__gethex+0x38c>
 8009fa6:	f04f 0901 	mov.w	r9, #1
 8009faa:	e7d1      	b.n	8009f50 <__gethex+0x2d0>
 8009fac:	2501      	movs	r5, #1
 8009fae:	e7e2      	b.n	8009f76 <__gethex+0x2f6>
 8009fb0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009fb2:	f1c3 0301 	rsb	r3, r3, #1
 8009fb6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009fb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d0f0      	beq.n	8009fa0 <__gethex+0x320>
 8009fbe:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009fc2:	f104 0314 	add.w	r3, r4, #20
 8009fc6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009fca:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009fce:	f04f 0c00 	mov.w	ip, #0
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fd8:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8009fdc:	d01b      	beq.n	800a016 <__gethex+0x396>
 8009fde:	3201      	adds	r2, #1
 8009fe0:	6002      	str	r2, [r0, #0]
 8009fe2:	2d02      	cmp	r5, #2
 8009fe4:	f104 0314 	add.w	r3, r4, #20
 8009fe8:	d13c      	bne.n	800a064 <__gethex+0x3e4>
 8009fea:	f8d8 2000 	ldr.w	r2, [r8]
 8009fee:	3a01      	subs	r2, #1
 8009ff0:	42b2      	cmp	r2, r6
 8009ff2:	d109      	bne.n	800a008 <__gethex+0x388>
 8009ff4:	1171      	asrs	r1, r6, #5
 8009ff6:	2201      	movs	r2, #1
 8009ff8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009ffc:	f006 061f 	and.w	r6, r6, #31
 800a000:	fa02 f606 	lsl.w	r6, r2, r6
 800a004:	421e      	tst	r6, r3
 800a006:	d13a      	bne.n	800a07e <__gethex+0x3fe>
 800a008:	f045 0520 	orr.w	r5, r5, #32
 800a00c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a00e:	601c      	str	r4, [r3, #0]
 800a010:	9b02      	ldr	r3, [sp, #8]
 800a012:	601f      	str	r7, [r3, #0]
 800a014:	e6b0      	b.n	8009d78 <__gethex+0xf8>
 800a016:	4299      	cmp	r1, r3
 800a018:	f843 cc04 	str.w	ip, [r3, #-4]
 800a01c:	d8d9      	bhi.n	8009fd2 <__gethex+0x352>
 800a01e:	68a3      	ldr	r3, [r4, #8]
 800a020:	459b      	cmp	fp, r3
 800a022:	db17      	blt.n	800a054 <__gethex+0x3d4>
 800a024:	6861      	ldr	r1, [r4, #4]
 800a026:	9801      	ldr	r0, [sp, #4]
 800a028:	3101      	adds	r1, #1
 800a02a:	f000 fbc5 	bl	800a7b8 <_Balloc>
 800a02e:	4681      	mov	r9, r0
 800a030:	b918      	cbnz	r0, 800a03a <__gethex+0x3ba>
 800a032:	4b1a      	ldr	r3, [pc, #104]	@ (800a09c <__gethex+0x41c>)
 800a034:	4602      	mov	r2, r0
 800a036:	2184      	movs	r1, #132	@ 0x84
 800a038:	e6c5      	b.n	8009dc6 <__gethex+0x146>
 800a03a:	6922      	ldr	r2, [r4, #16]
 800a03c:	3202      	adds	r2, #2
 800a03e:	f104 010c 	add.w	r1, r4, #12
 800a042:	0092      	lsls	r2, r2, #2
 800a044:	300c      	adds	r0, #12
 800a046:	f7fe ff3b 	bl	8008ec0 <memcpy>
 800a04a:	4621      	mov	r1, r4
 800a04c:	9801      	ldr	r0, [sp, #4]
 800a04e:	f000 fbf3 	bl	800a838 <_Bfree>
 800a052:	464c      	mov	r4, r9
 800a054:	6923      	ldr	r3, [r4, #16]
 800a056:	1c5a      	adds	r2, r3, #1
 800a058:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a05c:	6122      	str	r2, [r4, #16]
 800a05e:	2201      	movs	r2, #1
 800a060:	615a      	str	r2, [r3, #20]
 800a062:	e7be      	b.n	8009fe2 <__gethex+0x362>
 800a064:	6922      	ldr	r2, [r4, #16]
 800a066:	455a      	cmp	r2, fp
 800a068:	dd0b      	ble.n	800a082 <__gethex+0x402>
 800a06a:	2101      	movs	r1, #1
 800a06c:	4620      	mov	r0, r4
 800a06e:	f7ff fd9f 	bl	8009bb0 <rshift>
 800a072:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a076:	3701      	adds	r7, #1
 800a078:	42bb      	cmp	r3, r7
 800a07a:	f6ff aee0 	blt.w	8009e3e <__gethex+0x1be>
 800a07e:	2501      	movs	r5, #1
 800a080:	e7c2      	b.n	800a008 <__gethex+0x388>
 800a082:	f016 061f 	ands.w	r6, r6, #31
 800a086:	d0fa      	beq.n	800a07e <__gethex+0x3fe>
 800a088:	4453      	add	r3, sl
 800a08a:	f1c6 0620 	rsb	r6, r6, #32
 800a08e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a092:	f000 fc83 	bl	800a99c <__hi0bits>
 800a096:	42b0      	cmp	r0, r6
 800a098:	dbe7      	blt.n	800a06a <__gethex+0x3ea>
 800a09a:	e7f0      	b.n	800a07e <__gethex+0x3fe>
 800a09c:	0800be0b 	.word	0x0800be0b

0800a0a0 <L_shift>:
 800a0a0:	f1c2 0208 	rsb	r2, r2, #8
 800a0a4:	0092      	lsls	r2, r2, #2
 800a0a6:	b570      	push	{r4, r5, r6, lr}
 800a0a8:	f1c2 0620 	rsb	r6, r2, #32
 800a0ac:	6843      	ldr	r3, [r0, #4]
 800a0ae:	6804      	ldr	r4, [r0, #0]
 800a0b0:	fa03 f506 	lsl.w	r5, r3, r6
 800a0b4:	432c      	orrs	r4, r5
 800a0b6:	40d3      	lsrs	r3, r2
 800a0b8:	6004      	str	r4, [r0, #0]
 800a0ba:	f840 3f04 	str.w	r3, [r0, #4]!
 800a0be:	4288      	cmp	r0, r1
 800a0c0:	d3f4      	bcc.n	800a0ac <L_shift+0xc>
 800a0c2:	bd70      	pop	{r4, r5, r6, pc}

0800a0c4 <__match>:
 800a0c4:	b530      	push	{r4, r5, lr}
 800a0c6:	6803      	ldr	r3, [r0, #0]
 800a0c8:	3301      	adds	r3, #1
 800a0ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a0ce:	b914      	cbnz	r4, 800a0d6 <__match+0x12>
 800a0d0:	6003      	str	r3, [r0, #0]
 800a0d2:	2001      	movs	r0, #1
 800a0d4:	bd30      	pop	{r4, r5, pc}
 800a0d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0da:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a0de:	2d19      	cmp	r5, #25
 800a0e0:	bf98      	it	ls
 800a0e2:	3220      	addls	r2, #32
 800a0e4:	42a2      	cmp	r2, r4
 800a0e6:	d0f0      	beq.n	800a0ca <__match+0x6>
 800a0e8:	2000      	movs	r0, #0
 800a0ea:	e7f3      	b.n	800a0d4 <__match+0x10>

0800a0ec <__hexnan>:
 800a0ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0f0:	680b      	ldr	r3, [r1, #0]
 800a0f2:	6801      	ldr	r1, [r0, #0]
 800a0f4:	115e      	asrs	r6, r3, #5
 800a0f6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a0fa:	f013 031f 	ands.w	r3, r3, #31
 800a0fe:	b087      	sub	sp, #28
 800a100:	bf18      	it	ne
 800a102:	3604      	addne	r6, #4
 800a104:	2500      	movs	r5, #0
 800a106:	1f37      	subs	r7, r6, #4
 800a108:	4682      	mov	sl, r0
 800a10a:	4690      	mov	r8, r2
 800a10c:	9301      	str	r3, [sp, #4]
 800a10e:	f846 5c04 	str.w	r5, [r6, #-4]
 800a112:	46b9      	mov	r9, r7
 800a114:	463c      	mov	r4, r7
 800a116:	9502      	str	r5, [sp, #8]
 800a118:	46ab      	mov	fp, r5
 800a11a:	784a      	ldrb	r2, [r1, #1]
 800a11c:	1c4b      	adds	r3, r1, #1
 800a11e:	9303      	str	r3, [sp, #12]
 800a120:	b342      	cbz	r2, 800a174 <__hexnan+0x88>
 800a122:	4610      	mov	r0, r2
 800a124:	9105      	str	r1, [sp, #20]
 800a126:	9204      	str	r2, [sp, #16]
 800a128:	f7ff fd94 	bl	8009c54 <__hexdig_fun>
 800a12c:	2800      	cmp	r0, #0
 800a12e:	d151      	bne.n	800a1d4 <__hexnan+0xe8>
 800a130:	9a04      	ldr	r2, [sp, #16]
 800a132:	9905      	ldr	r1, [sp, #20]
 800a134:	2a20      	cmp	r2, #32
 800a136:	d818      	bhi.n	800a16a <__hexnan+0x7e>
 800a138:	9b02      	ldr	r3, [sp, #8]
 800a13a:	459b      	cmp	fp, r3
 800a13c:	dd13      	ble.n	800a166 <__hexnan+0x7a>
 800a13e:	454c      	cmp	r4, r9
 800a140:	d206      	bcs.n	800a150 <__hexnan+0x64>
 800a142:	2d07      	cmp	r5, #7
 800a144:	dc04      	bgt.n	800a150 <__hexnan+0x64>
 800a146:	462a      	mov	r2, r5
 800a148:	4649      	mov	r1, r9
 800a14a:	4620      	mov	r0, r4
 800a14c:	f7ff ffa8 	bl	800a0a0 <L_shift>
 800a150:	4544      	cmp	r4, r8
 800a152:	d952      	bls.n	800a1fa <__hexnan+0x10e>
 800a154:	2300      	movs	r3, #0
 800a156:	f1a4 0904 	sub.w	r9, r4, #4
 800a15a:	f844 3c04 	str.w	r3, [r4, #-4]
 800a15e:	f8cd b008 	str.w	fp, [sp, #8]
 800a162:	464c      	mov	r4, r9
 800a164:	461d      	mov	r5, r3
 800a166:	9903      	ldr	r1, [sp, #12]
 800a168:	e7d7      	b.n	800a11a <__hexnan+0x2e>
 800a16a:	2a29      	cmp	r2, #41	@ 0x29
 800a16c:	d157      	bne.n	800a21e <__hexnan+0x132>
 800a16e:	3102      	adds	r1, #2
 800a170:	f8ca 1000 	str.w	r1, [sl]
 800a174:	f1bb 0f00 	cmp.w	fp, #0
 800a178:	d051      	beq.n	800a21e <__hexnan+0x132>
 800a17a:	454c      	cmp	r4, r9
 800a17c:	d206      	bcs.n	800a18c <__hexnan+0xa0>
 800a17e:	2d07      	cmp	r5, #7
 800a180:	dc04      	bgt.n	800a18c <__hexnan+0xa0>
 800a182:	462a      	mov	r2, r5
 800a184:	4649      	mov	r1, r9
 800a186:	4620      	mov	r0, r4
 800a188:	f7ff ff8a 	bl	800a0a0 <L_shift>
 800a18c:	4544      	cmp	r4, r8
 800a18e:	d936      	bls.n	800a1fe <__hexnan+0x112>
 800a190:	f1a8 0204 	sub.w	r2, r8, #4
 800a194:	4623      	mov	r3, r4
 800a196:	f853 1b04 	ldr.w	r1, [r3], #4
 800a19a:	f842 1f04 	str.w	r1, [r2, #4]!
 800a19e:	429f      	cmp	r7, r3
 800a1a0:	d2f9      	bcs.n	800a196 <__hexnan+0xaa>
 800a1a2:	1b3b      	subs	r3, r7, r4
 800a1a4:	f023 0303 	bic.w	r3, r3, #3
 800a1a8:	3304      	adds	r3, #4
 800a1aa:	3401      	adds	r4, #1
 800a1ac:	3e03      	subs	r6, #3
 800a1ae:	42b4      	cmp	r4, r6
 800a1b0:	bf88      	it	hi
 800a1b2:	2304      	movhi	r3, #4
 800a1b4:	4443      	add	r3, r8
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	f843 2b04 	str.w	r2, [r3], #4
 800a1bc:	429f      	cmp	r7, r3
 800a1be:	d2fb      	bcs.n	800a1b8 <__hexnan+0xcc>
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	b91b      	cbnz	r3, 800a1cc <__hexnan+0xe0>
 800a1c4:	4547      	cmp	r7, r8
 800a1c6:	d128      	bne.n	800a21a <__hexnan+0x12e>
 800a1c8:	2301      	movs	r3, #1
 800a1ca:	603b      	str	r3, [r7, #0]
 800a1cc:	2005      	movs	r0, #5
 800a1ce:	b007      	add	sp, #28
 800a1d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1d4:	3501      	adds	r5, #1
 800a1d6:	2d08      	cmp	r5, #8
 800a1d8:	f10b 0b01 	add.w	fp, fp, #1
 800a1dc:	dd06      	ble.n	800a1ec <__hexnan+0x100>
 800a1de:	4544      	cmp	r4, r8
 800a1e0:	d9c1      	bls.n	800a166 <__hexnan+0x7a>
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	f844 3c04 	str.w	r3, [r4, #-4]
 800a1e8:	2501      	movs	r5, #1
 800a1ea:	3c04      	subs	r4, #4
 800a1ec:	6822      	ldr	r2, [r4, #0]
 800a1ee:	f000 000f 	and.w	r0, r0, #15
 800a1f2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a1f6:	6020      	str	r0, [r4, #0]
 800a1f8:	e7b5      	b.n	800a166 <__hexnan+0x7a>
 800a1fa:	2508      	movs	r5, #8
 800a1fc:	e7b3      	b.n	800a166 <__hexnan+0x7a>
 800a1fe:	9b01      	ldr	r3, [sp, #4]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d0dd      	beq.n	800a1c0 <__hexnan+0xd4>
 800a204:	f1c3 0320 	rsb	r3, r3, #32
 800a208:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a20c:	40da      	lsrs	r2, r3
 800a20e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a212:	4013      	ands	r3, r2
 800a214:	f846 3c04 	str.w	r3, [r6, #-4]
 800a218:	e7d2      	b.n	800a1c0 <__hexnan+0xd4>
 800a21a:	3f04      	subs	r7, #4
 800a21c:	e7d0      	b.n	800a1c0 <__hexnan+0xd4>
 800a21e:	2004      	movs	r0, #4
 800a220:	e7d5      	b.n	800a1ce <__hexnan+0xe2>

0800a222 <__ssputs_r>:
 800a222:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a226:	688e      	ldr	r6, [r1, #8]
 800a228:	461f      	mov	r7, r3
 800a22a:	42be      	cmp	r6, r7
 800a22c:	680b      	ldr	r3, [r1, #0]
 800a22e:	4682      	mov	sl, r0
 800a230:	460c      	mov	r4, r1
 800a232:	4690      	mov	r8, r2
 800a234:	d82d      	bhi.n	800a292 <__ssputs_r+0x70>
 800a236:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a23a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a23e:	d026      	beq.n	800a28e <__ssputs_r+0x6c>
 800a240:	6965      	ldr	r5, [r4, #20]
 800a242:	6909      	ldr	r1, [r1, #16]
 800a244:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a248:	eba3 0901 	sub.w	r9, r3, r1
 800a24c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a250:	1c7b      	adds	r3, r7, #1
 800a252:	444b      	add	r3, r9
 800a254:	106d      	asrs	r5, r5, #1
 800a256:	429d      	cmp	r5, r3
 800a258:	bf38      	it	cc
 800a25a:	461d      	movcc	r5, r3
 800a25c:	0553      	lsls	r3, r2, #21
 800a25e:	d527      	bpl.n	800a2b0 <__ssputs_r+0x8e>
 800a260:	4629      	mov	r1, r5
 800a262:	f000 f95f 	bl	800a524 <_malloc_r>
 800a266:	4606      	mov	r6, r0
 800a268:	b360      	cbz	r0, 800a2c4 <__ssputs_r+0xa2>
 800a26a:	6921      	ldr	r1, [r4, #16]
 800a26c:	464a      	mov	r2, r9
 800a26e:	f7fe fe27 	bl	8008ec0 <memcpy>
 800a272:	89a3      	ldrh	r3, [r4, #12]
 800a274:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a278:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a27c:	81a3      	strh	r3, [r4, #12]
 800a27e:	6126      	str	r6, [r4, #16]
 800a280:	6165      	str	r5, [r4, #20]
 800a282:	444e      	add	r6, r9
 800a284:	eba5 0509 	sub.w	r5, r5, r9
 800a288:	6026      	str	r6, [r4, #0]
 800a28a:	60a5      	str	r5, [r4, #8]
 800a28c:	463e      	mov	r6, r7
 800a28e:	42be      	cmp	r6, r7
 800a290:	d900      	bls.n	800a294 <__ssputs_r+0x72>
 800a292:	463e      	mov	r6, r7
 800a294:	6820      	ldr	r0, [r4, #0]
 800a296:	4632      	mov	r2, r6
 800a298:	4641      	mov	r1, r8
 800a29a:	f000 ffb5 	bl	800b208 <memmove>
 800a29e:	68a3      	ldr	r3, [r4, #8]
 800a2a0:	1b9b      	subs	r3, r3, r6
 800a2a2:	60a3      	str	r3, [r4, #8]
 800a2a4:	6823      	ldr	r3, [r4, #0]
 800a2a6:	4433      	add	r3, r6
 800a2a8:	6023      	str	r3, [r4, #0]
 800a2aa:	2000      	movs	r0, #0
 800a2ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2b0:	462a      	mov	r2, r5
 800a2b2:	f000 ff6e 	bl	800b192 <_realloc_r>
 800a2b6:	4606      	mov	r6, r0
 800a2b8:	2800      	cmp	r0, #0
 800a2ba:	d1e0      	bne.n	800a27e <__ssputs_r+0x5c>
 800a2bc:	6921      	ldr	r1, [r4, #16]
 800a2be:	4650      	mov	r0, sl
 800a2c0:	f001 f844 	bl	800b34c <_free_r>
 800a2c4:	230c      	movs	r3, #12
 800a2c6:	f8ca 3000 	str.w	r3, [sl]
 800a2ca:	89a3      	ldrh	r3, [r4, #12]
 800a2cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a2d0:	81a3      	strh	r3, [r4, #12]
 800a2d2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a2d6:	e7e9      	b.n	800a2ac <__ssputs_r+0x8a>

0800a2d8 <_svfiprintf_r>:
 800a2d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2dc:	4698      	mov	r8, r3
 800a2de:	898b      	ldrh	r3, [r1, #12]
 800a2e0:	061b      	lsls	r3, r3, #24
 800a2e2:	b09d      	sub	sp, #116	@ 0x74
 800a2e4:	4607      	mov	r7, r0
 800a2e6:	460d      	mov	r5, r1
 800a2e8:	4614      	mov	r4, r2
 800a2ea:	d510      	bpl.n	800a30e <_svfiprintf_r+0x36>
 800a2ec:	690b      	ldr	r3, [r1, #16]
 800a2ee:	b973      	cbnz	r3, 800a30e <_svfiprintf_r+0x36>
 800a2f0:	2140      	movs	r1, #64	@ 0x40
 800a2f2:	f000 f917 	bl	800a524 <_malloc_r>
 800a2f6:	6028      	str	r0, [r5, #0]
 800a2f8:	6128      	str	r0, [r5, #16]
 800a2fa:	b930      	cbnz	r0, 800a30a <_svfiprintf_r+0x32>
 800a2fc:	230c      	movs	r3, #12
 800a2fe:	603b      	str	r3, [r7, #0]
 800a300:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a304:	b01d      	add	sp, #116	@ 0x74
 800a306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a30a:	2340      	movs	r3, #64	@ 0x40
 800a30c:	616b      	str	r3, [r5, #20]
 800a30e:	2300      	movs	r3, #0
 800a310:	9309      	str	r3, [sp, #36]	@ 0x24
 800a312:	2320      	movs	r3, #32
 800a314:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a318:	f8cd 800c 	str.w	r8, [sp, #12]
 800a31c:	2330      	movs	r3, #48	@ 0x30
 800a31e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a4bc <_svfiprintf_r+0x1e4>
 800a322:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a326:	f04f 0901 	mov.w	r9, #1
 800a32a:	4623      	mov	r3, r4
 800a32c:	469a      	mov	sl, r3
 800a32e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a332:	b10a      	cbz	r2, 800a338 <_svfiprintf_r+0x60>
 800a334:	2a25      	cmp	r2, #37	@ 0x25
 800a336:	d1f9      	bne.n	800a32c <_svfiprintf_r+0x54>
 800a338:	ebba 0b04 	subs.w	fp, sl, r4
 800a33c:	d00b      	beq.n	800a356 <_svfiprintf_r+0x7e>
 800a33e:	465b      	mov	r3, fp
 800a340:	4622      	mov	r2, r4
 800a342:	4629      	mov	r1, r5
 800a344:	4638      	mov	r0, r7
 800a346:	f7ff ff6c 	bl	800a222 <__ssputs_r>
 800a34a:	3001      	adds	r0, #1
 800a34c:	f000 80a7 	beq.w	800a49e <_svfiprintf_r+0x1c6>
 800a350:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a352:	445a      	add	r2, fp
 800a354:	9209      	str	r2, [sp, #36]	@ 0x24
 800a356:	f89a 3000 	ldrb.w	r3, [sl]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	f000 809f 	beq.w	800a49e <_svfiprintf_r+0x1c6>
 800a360:	2300      	movs	r3, #0
 800a362:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a366:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a36a:	f10a 0a01 	add.w	sl, sl, #1
 800a36e:	9304      	str	r3, [sp, #16]
 800a370:	9307      	str	r3, [sp, #28]
 800a372:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a376:	931a      	str	r3, [sp, #104]	@ 0x68
 800a378:	4654      	mov	r4, sl
 800a37a:	2205      	movs	r2, #5
 800a37c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a380:	484e      	ldr	r0, [pc, #312]	@ (800a4bc <_svfiprintf_r+0x1e4>)
 800a382:	f7f5 ff25 	bl	80001d0 <memchr>
 800a386:	9a04      	ldr	r2, [sp, #16]
 800a388:	b9d8      	cbnz	r0, 800a3c2 <_svfiprintf_r+0xea>
 800a38a:	06d0      	lsls	r0, r2, #27
 800a38c:	bf44      	itt	mi
 800a38e:	2320      	movmi	r3, #32
 800a390:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a394:	0711      	lsls	r1, r2, #28
 800a396:	bf44      	itt	mi
 800a398:	232b      	movmi	r3, #43	@ 0x2b
 800a39a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a39e:	f89a 3000 	ldrb.w	r3, [sl]
 800a3a2:	2b2a      	cmp	r3, #42	@ 0x2a
 800a3a4:	d015      	beq.n	800a3d2 <_svfiprintf_r+0xfa>
 800a3a6:	9a07      	ldr	r2, [sp, #28]
 800a3a8:	4654      	mov	r4, sl
 800a3aa:	2000      	movs	r0, #0
 800a3ac:	f04f 0c0a 	mov.w	ip, #10
 800a3b0:	4621      	mov	r1, r4
 800a3b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a3b6:	3b30      	subs	r3, #48	@ 0x30
 800a3b8:	2b09      	cmp	r3, #9
 800a3ba:	d94b      	bls.n	800a454 <_svfiprintf_r+0x17c>
 800a3bc:	b1b0      	cbz	r0, 800a3ec <_svfiprintf_r+0x114>
 800a3be:	9207      	str	r2, [sp, #28]
 800a3c0:	e014      	b.n	800a3ec <_svfiprintf_r+0x114>
 800a3c2:	eba0 0308 	sub.w	r3, r0, r8
 800a3c6:	fa09 f303 	lsl.w	r3, r9, r3
 800a3ca:	4313      	orrs	r3, r2
 800a3cc:	9304      	str	r3, [sp, #16]
 800a3ce:	46a2      	mov	sl, r4
 800a3d0:	e7d2      	b.n	800a378 <_svfiprintf_r+0xa0>
 800a3d2:	9b03      	ldr	r3, [sp, #12]
 800a3d4:	1d19      	adds	r1, r3, #4
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	9103      	str	r1, [sp, #12]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	bfbb      	ittet	lt
 800a3de:	425b      	neglt	r3, r3
 800a3e0:	f042 0202 	orrlt.w	r2, r2, #2
 800a3e4:	9307      	strge	r3, [sp, #28]
 800a3e6:	9307      	strlt	r3, [sp, #28]
 800a3e8:	bfb8      	it	lt
 800a3ea:	9204      	strlt	r2, [sp, #16]
 800a3ec:	7823      	ldrb	r3, [r4, #0]
 800a3ee:	2b2e      	cmp	r3, #46	@ 0x2e
 800a3f0:	d10a      	bne.n	800a408 <_svfiprintf_r+0x130>
 800a3f2:	7863      	ldrb	r3, [r4, #1]
 800a3f4:	2b2a      	cmp	r3, #42	@ 0x2a
 800a3f6:	d132      	bne.n	800a45e <_svfiprintf_r+0x186>
 800a3f8:	9b03      	ldr	r3, [sp, #12]
 800a3fa:	1d1a      	adds	r2, r3, #4
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	9203      	str	r2, [sp, #12]
 800a400:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a404:	3402      	adds	r4, #2
 800a406:	9305      	str	r3, [sp, #20]
 800a408:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a4cc <_svfiprintf_r+0x1f4>
 800a40c:	7821      	ldrb	r1, [r4, #0]
 800a40e:	2203      	movs	r2, #3
 800a410:	4650      	mov	r0, sl
 800a412:	f7f5 fedd 	bl	80001d0 <memchr>
 800a416:	b138      	cbz	r0, 800a428 <_svfiprintf_r+0x150>
 800a418:	9b04      	ldr	r3, [sp, #16]
 800a41a:	eba0 000a 	sub.w	r0, r0, sl
 800a41e:	2240      	movs	r2, #64	@ 0x40
 800a420:	4082      	lsls	r2, r0
 800a422:	4313      	orrs	r3, r2
 800a424:	3401      	adds	r4, #1
 800a426:	9304      	str	r3, [sp, #16]
 800a428:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a42c:	4824      	ldr	r0, [pc, #144]	@ (800a4c0 <_svfiprintf_r+0x1e8>)
 800a42e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a432:	2206      	movs	r2, #6
 800a434:	f7f5 fecc 	bl	80001d0 <memchr>
 800a438:	2800      	cmp	r0, #0
 800a43a:	d036      	beq.n	800a4aa <_svfiprintf_r+0x1d2>
 800a43c:	4b21      	ldr	r3, [pc, #132]	@ (800a4c4 <_svfiprintf_r+0x1ec>)
 800a43e:	bb1b      	cbnz	r3, 800a488 <_svfiprintf_r+0x1b0>
 800a440:	9b03      	ldr	r3, [sp, #12]
 800a442:	3307      	adds	r3, #7
 800a444:	f023 0307 	bic.w	r3, r3, #7
 800a448:	3308      	adds	r3, #8
 800a44a:	9303      	str	r3, [sp, #12]
 800a44c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a44e:	4433      	add	r3, r6
 800a450:	9309      	str	r3, [sp, #36]	@ 0x24
 800a452:	e76a      	b.n	800a32a <_svfiprintf_r+0x52>
 800a454:	fb0c 3202 	mla	r2, ip, r2, r3
 800a458:	460c      	mov	r4, r1
 800a45a:	2001      	movs	r0, #1
 800a45c:	e7a8      	b.n	800a3b0 <_svfiprintf_r+0xd8>
 800a45e:	2300      	movs	r3, #0
 800a460:	3401      	adds	r4, #1
 800a462:	9305      	str	r3, [sp, #20]
 800a464:	4619      	mov	r1, r3
 800a466:	f04f 0c0a 	mov.w	ip, #10
 800a46a:	4620      	mov	r0, r4
 800a46c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a470:	3a30      	subs	r2, #48	@ 0x30
 800a472:	2a09      	cmp	r2, #9
 800a474:	d903      	bls.n	800a47e <_svfiprintf_r+0x1a6>
 800a476:	2b00      	cmp	r3, #0
 800a478:	d0c6      	beq.n	800a408 <_svfiprintf_r+0x130>
 800a47a:	9105      	str	r1, [sp, #20]
 800a47c:	e7c4      	b.n	800a408 <_svfiprintf_r+0x130>
 800a47e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a482:	4604      	mov	r4, r0
 800a484:	2301      	movs	r3, #1
 800a486:	e7f0      	b.n	800a46a <_svfiprintf_r+0x192>
 800a488:	ab03      	add	r3, sp, #12
 800a48a:	9300      	str	r3, [sp, #0]
 800a48c:	462a      	mov	r2, r5
 800a48e:	4b0e      	ldr	r3, [pc, #56]	@ (800a4c8 <_svfiprintf_r+0x1f0>)
 800a490:	a904      	add	r1, sp, #16
 800a492:	4638      	mov	r0, r7
 800a494:	f7fc ff9a 	bl	80073cc <_printf_float>
 800a498:	1c42      	adds	r2, r0, #1
 800a49a:	4606      	mov	r6, r0
 800a49c:	d1d6      	bne.n	800a44c <_svfiprintf_r+0x174>
 800a49e:	89ab      	ldrh	r3, [r5, #12]
 800a4a0:	065b      	lsls	r3, r3, #25
 800a4a2:	f53f af2d 	bmi.w	800a300 <_svfiprintf_r+0x28>
 800a4a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a4a8:	e72c      	b.n	800a304 <_svfiprintf_r+0x2c>
 800a4aa:	ab03      	add	r3, sp, #12
 800a4ac:	9300      	str	r3, [sp, #0]
 800a4ae:	462a      	mov	r2, r5
 800a4b0:	4b05      	ldr	r3, [pc, #20]	@ (800a4c8 <_svfiprintf_r+0x1f0>)
 800a4b2:	a904      	add	r1, sp, #16
 800a4b4:	4638      	mov	r0, r7
 800a4b6:	f7fd fa21 	bl	80078fc <_printf_i>
 800a4ba:	e7ed      	b.n	800a498 <_svfiprintf_r+0x1c0>
 800a4bc:	0800be7c 	.word	0x0800be7c
 800a4c0:	0800be86 	.word	0x0800be86
 800a4c4:	080073cd 	.word	0x080073cd
 800a4c8:	0800a223 	.word	0x0800a223
 800a4cc:	0800be82 	.word	0x0800be82

0800a4d0 <malloc>:
 800a4d0:	4b02      	ldr	r3, [pc, #8]	@ (800a4dc <malloc+0xc>)
 800a4d2:	4601      	mov	r1, r0
 800a4d4:	6818      	ldr	r0, [r3, #0]
 800a4d6:	f000 b825 	b.w	800a524 <_malloc_r>
 800a4da:	bf00      	nop
 800a4dc:	20000188 	.word	0x20000188

0800a4e0 <sbrk_aligned>:
 800a4e0:	b570      	push	{r4, r5, r6, lr}
 800a4e2:	4e0f      	ldr	r6, [pc, #60]	@ (800a520 <sbrk_aligned+0x40>)
 800a4e4:	460c      	mov	r4, r1
 800a4e6:	6831      	ldr	r1, [r6, #0]
 800a4e8:	4605      	mov	r5, r0
 800a4ea:	b911      	cbnz	r1, 800a4f2 <sbrk_aligned+0x12>
 800a4ec:	f000 feca 	bl	800b284 <_sbrk_r>
 800a4f0:	6030      	str	r0, [r6, #0]
 800a4f2:	4621      	mov	r1, r4
 800a4f4:	4628      	mov	r0, r5
 800a4f6:	f000 fec5 	bl	800b284 <_sbrk_r>
 800a4fa:	1c43      	adds	r3, r0, #1
 800a4fc:	d103      	bne.n	800a506 <sbrk_aligned+0x26>
 800a4fe:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a502:	4620      	mov	r0, r4
 800a504:	bd70      	pop	{r4, r5, r6, pc}
 800a506:	1cc4      	adds	r4, r0, #3
 800a508:	f024 0403 	bic.w	r4, r4, #3
 800a50c:	42a0      	cmp	r0, r4
 800a50e:	d0f8      	beq.n	800a502 <sbrk_aligned+0x22>
 800a510:	1a21      	subs	r1, r4, r0
 800a512:	4628      	mov	r0, r5
 800a514:	f000 feb6 	bl	800b284 <_sbrk_r>
 800a518:	3001      	adds	r0, #1
 800a51a:	d1f2      	bne.n	800a502 <sbrk_aligned+0x22>
 800a51c:	e7ef      	b.n	800a4fe <sbrk_aligned+0x1e>
 800a51e:	bf00      	nop
 800a520:	20000770 	.word	0x20000770

0800a524 <_malloc_r>:
 800a524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a528:	1ccd      	adds	r5, r1, #3
 800a52a:	f025 0503 	bic.w	r5, r5, #3
 800a52e:	3508      	adds	r5, #8
 800a530:	2d0c      	cmp	r5, #12
 800a532:	bf38      	it	cc
 800a534:	250c      	movcc	r5, #12
 800a536:	2d00      	cmp	r5, #0
 800a538:	4606      	mov	r6, r0
 800a53a:	db01      	blt.n	800a540 <_malloc_r+0x1c>
 800a53c:	42a9      	cmp	r1, r5
 800a53e:	d904      	bls.n	800a54a <_malloc_r+0x26>
 800a540:	230c      	movs	r3, #12
 800a542:	6033      	str	r3, [r6, #0]
 800a544:	2000      	movs	r0, #0
 800a546:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a54a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a620 <_malloc_r+0xfc>
 800a54e:	f000 f927 	bl	800a7a0 <__malloc_lock>
 800a552:	f8d8 3000 	ldr.w	r3, [r8]
 800a556:	461c      	mov	r4, r3
 800a558:	bb44      	cbnz	r4, 800a5ac <_malloc_r+0x88>
 800a55a:	4629      	mov	r1, r5
 800a55c:	4630      	mov	r0, r6
 800a55e:	f7ff ffbf 	bl	800a4e0 <sbrk_aligned>
 800a562:	1c43      	adds	r3, r0, #1
 800a564:	4604      	mov	r4, r0
 800a566:	d158      	bne.n	800a61a <_malloc_r+0xf6>
 800a568:	f8d8 4000 	ldr.w	r4, [r8]
 800a56c:	4627      	mov	r7, r4
 800a56e:	2f00      	cmp	r7, #0
 800a570:	d143      	bne.n	800a5fa <_malloc_r+0xd6>
 800a572:	2c00      	cmp	r4, #0
 800a574:	d04b      	beq.n	800a60e <_malloc_r+0xea>
 800a576:	6823      	ldr	r3, [r4, #0]
 800a578:	4639      	mov	r1, r7
 800a57a:	4630      	mov	r0, r6
 800a57c:	eb04 0903 	add.w	r9, r4, r3
 800a580:	f000 fe80 	bl	800b284 <_sbrk_r>
 800a584:	4581      	cmp	r9, r0
 800a586:	d142      	bne.n	800a60e <_malloc_r+0xea>
 800a588:	6821      	ldr	r1, [r4, #0]
 800a58a:	1a6d      	subs	r5, r5, r1
 800a58c:	4629      	mov	r1, r5
 800a58e:	4630      	mov	r0, r6
 800a590:	f7ff ffa6 	bl	800a4e0 <sbrk_aligned>
 800a594:	3001      	adds	r0, #1
 800a596:	d03a      	beq.n	800a60e <_malloc_r+0xea>
 800a598:	6823      	ldr	r3, [r4, #0]
 800a59a:	442b      	add	r3, r5
 800a59c:	6023      	str	r3, [r4, #0]
 800a59e:	f8d8 3000 	ldr.w	r3, [r8]
 800a5a2:	685a      	ldr	r2, [r3, #4]
 800a5a4:	bb62      	cbnz	r2, 800a600 <_malloc_r+0xdc>
 800a5a6:	f8c8 7000 	str.w	r7, [r8]
 800a5aa:	e00f      	b.n	800a5cc <_malloc_r+0xa8>
 800a5ac:	6822      	ldr	r2, [r4, #0]
 800a5ae:	1b52      	subs	r2, r2, r5
 800a5b0:	d420      	bmi.n	800a5f4 <_malloc_r+0xd0>
 800a5b2:	2a0b      	cmp	r2, #11
 800a5b4:	d917      	bls.n	800a5e6 <_malloc_r+0xc2>
 800a5b6:	1961      	adds	r1, r4, r5
 800a5b8:	42a3      	cmp	r3, r4
 800a5ba:	6025      	str	r5, [r4, #0]
 800a5bc:	bf18      	it	ne
 800a5be:	6059      	strne	r1, [r3, #4]
 800a5c0:	6863      	ldr	r3, [r4, #4]
 800a5c2:	bf08      	it	eq
 800a5c4:	f8c8 1000 	streq.w	r1, [r8]
 800a5c8:	5162      	str	r2, [r4, r5]
 800a5ca:	604b      	str	r3, [r1, #4]
 800a5cc:	4630      	mov	r0, r6
 800a5ce:	f000 f8ed 	bl	800a7ac <__malloc_unlock>
 800a5d2:	f104 000b 	add.w	r0, r4, #11
 800a5d6:	1d23      	adds	r3, r4, #4
 800a5d8:	f020 0007 	bic.w	r0, r0, #7
 800a5dc:	1ac2      	subs	r2, r0, r3
 800a5de:	bf1c      	itt	ne
 800a5e0:	1a1b      	subne	r3, r3, r0
 800a5e2:	50a3      	strne	r3, [r4, r2]
 800a5e4:	e7af      	b.n	800a546 <_malloc_r+0x22>
 800a5e6:	6862      	ldr	r2, [r4, #4]
 800a5e8:	42a3      	cmp	r3, r4
 800a5ea:	bf0c      	ite	eq
 800a5ec:	f8c8 2000 	streq.w	r2, [r8]
 800a5f0:	605a      	strne	r2, [r3, #4]
 800a5f2:	e7eb      	b.n	800a5cc <_malloc_r+0xa8>
 800a5f4:	4623      	mov	r3, r4
 800a5f6:	6864      	ldr	r4, [r4, #4]
 800a5f8:	e7ae      	b.n	800a558 <_malloc_r+0x34>
 800a5fa:	463c      	mov	r4, r7
 800a5fc:	687f      	ldr	r7, [r7, #4]
 800a5fe:	e7b6      	b.n	800a56e <_malloc_r+0x4a>
 800a600:	461a      	mov	r2, r3
 800a602:	685b      	ldr	r3, [r3, #4]
 800a604:	42a3      	cmp	r3, r4
 800a606:	d1fb      	bne.n	800a600 <_malloc_r+0xdc>
 800a608:	2300      	movs	r3, #0
 800a60a:	6053      	str	r3, [r2, #4]
 800a60c:	e7de      	b.n	800a5cc <_malloc_r+0xa8>
 800a60e:	230c      	movs	r3, #12
 800a610:	6033      	str	r3, [r6, #0]
 800a612:	4630      	mov	r0, r6
 800a614:	f000 f8ca 	bl	800a7ac <__malloc_unlock>
 800a618:	e794      	b.n	800a544 <_malloc_r+0x20>
 800a61a:	6005      	str	r5, [r0, #0]
 800a61c:	e7d6      	b.n	800a5cc <_malloc_r+0xa8>
 800a61e:	bf00      	nop
 800a620:	20000774 	.word	0x20000774

0800a624 <__ascii_mbtowc>:
 800a624:	b082      	sub	sp, #8
 800a626:	b901      	cbnz	r1, 800a62a <__ascii_mbtowc+0x6>
 800a628:	a901      	add	r1, sp, #4
 800a62a:	b142      	cbz	r2, 800a63e <__ascii_mbtowc+0x1a>
 800a62c:	b14b      	cbz	r3, 800a642 <__ascii_mbtowc+0x1e>
 800a62e:	7813      	ldrb	r3, [r2, #0]
 800a630:	600b      	str	r3, [r1, #0]
 800a632:	7812      	ldrb	r2, [r2, #0]
 800a634:	1e10      	subs	r0, r2, #0
 800a636:	bf18      	it	ne
 800a638:	2001      	movne	r0, #1
 800a63a:	b002      	add	sp, #8
 800a63c:	4770      	bx	lr
 800a63e:	4610      	mov	r0, r2
 800a640:	e7fb      	b.n	800a63a <__ascii_mbtowc+0x16>
 800a642:	f06f 0001 	mvn.w	r0, #1
 800a646:	e7f8      	b.n	800a63a <__ascii_mbtowc+0x16>

0800a648 <__sflush_r>:
 800a648:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a64c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a650:	0716      	lsls	r6, r2, #28
 800a652:	4605      	mov	r5, r0
 800a654:	460c      	mov	r4, r1
 800a656:	d454      	bmi.n	800a702 <__sflush_r+0xba>
 800a658:	684b      	ldr	r3, [r1, #4]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	dc02      	bgt.n	800a664 <__sflush_r+0x1c>
 800a65e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a660:	2b00      	cmp	r3, #0
 800a662:	dd48      	ble.n	800a6f6 <__sflush_r+0xae>
 800a664:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a666:	2e00      	cmp	r6, #0
 800a668:	d045      	beq.n	800a6f6 <__sflush_r+0xae>
 800a66a:	2300      	movs	r3, #0
 800a66c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a670:	682f      	ldr	r7, [r5, #0]
 800a672:	6a21      	ldr	r1, [r4, #32]
 800a674:	602b      	str	r3, [r5, #0]
 800a676:	d030      	beq.n	800a6da <__sflush_r+0x92>
 800a678:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a67a:	89a3      	ldrh	r3, [r4, #12]
 800a67c:	0759      	lsls	r1, r3, #29
 800a67e:	d505      	bpl.n	800a68c <__sflush_r+0x44>
 800a680:	6863      	ldr	r3, [r4, #4]
 800a682:	1ad2      	subs	r2, r2, r3
 800a684:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a686:	b10b      	cbz	r3, 800a68c <__sflush_r+0x44>
 800a688:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a68a:	1ad2      	subs	r2, r2, r3
 800a68c:	2300      	movs	r3, #0
 800a68e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a690:	6a21      	ldr	r1, [r4, #32]
 800a692:	4628      	mov	r0, r5
 800a694:	47b0      	blx	r6
 800a696:	1c43      	adds	r3, r0, #1
 800a698:	89a3      	ldrh	r3, [r4, #12]
 800a69a:	d106      	bne.n	800a6aa <__sflush_r+0x62>
 800a69c:	6829      	ldr	r1, [r5, #0]
 800a69e:	291d      	cmp	r1, #29
 800a6a0:	d82b      	bhi.n	800a6fa <__sflush_r+0xb2>
 800a6a2:	4a2a      	ldr	r2, [pc, #168]	@ (800a74c <__sflush_r+0x104>)
 800a6a4:	40ca      	lsrs	r2, r1
 800a6a6:	07d6      	lsls	r6, r2, #31
 800a6a8:	d527      	bpl.n	800a6fa <__sflush_r+0xb2>
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	6062      	str	r2, [r4, #4]
 800a6ae:	04d9      	lsls	r1, r3, #19
 800a6b0:	6922      	ldr	r2, [r4, #16]
 800a6b2:	6022      	str	r2, [r4, #0]
 800a6b4:	d504      	bpl.n	800a6c0 <__sflush_r+0x78>
 800a6b6:	1c42      	adds	r2, r0, #1
 800a6b8:	d101      	bne.n	800a6be <__sflush_r+0x76>
 800a6ba:	682b      	ldr	r3, [r5, #0]
 800a6bc:	b903      	cbnz	r3, 800a6c0 <__sflush_r+0x78>
 800a6be:	6560      	str	r0, [r4, #84]	@ 0x54
 800a6c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a6c2:	602f      	str	r7, [r5, #0]
 800a6c4:	b1b9      	cbz	r1, 800a6f6 <__sflush_r+0xae>
 800a6c6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a6ca:	4299      	cmp	r1, r3
 800a6cc:	d002      	beq.n	800a6d4 <__sflush_r+0x8c>
 800a6ce:	4628      	mov	r0, r5
 800a6d0:	f000 fe3c 	bl	800b34c <_free_r>
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	6363      	str	r3, [r4, #52]	@ 0x34
 800a6d8:	e00d      	b.n	800a6f6 <__sflush_r+0xae>
 800a6da:	2301      	movs	r3, #1
 800a6dc:	4628      	mov	r0, r5
 800a6de:	47b0      	blx	r6
 800a6e0:	4602      	mov	r2, r0
 800a6e2:	1c50      	adds	r0, r2, #1
 800a6e4:	d1c9      	bne.n	800a67a <__sflush_r+0x32>
 800a6e6:	682b      	ldr	r3, [r5, #0]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d0c6      	beq.n	800a67a <__sflush_r+0x32>
 800a6ec:	2b1d      	cmp	r3, #29
 800a6ee:	d001      	beq.n	800a6f4 <__sflush_r+0xac>
 800a6f0:	2b16      	cmp	r3, #22
 800a6f2:	d11e      	bne.n	800a732 <__sflush_r+0xea>
 800a6f4:	602f      	str	r7, [r5, #0]
 800a6f6:	2000      	movs	r0, #0
 800a6f8:	e022      	b.n	800a740 <__sflush_r+0xf8>
 800a6fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a6fe:	b21b      	sxth	r3, r3
 800a700:	e01b      	b.n	800a73a <__sflush_r+0xf2>
 800a702:	690f      	ldr	r7, [r1, #16]
 800a704:	2f00      	cmp	r7, #0
 800a706:	d0f6      	beq.n	800a6f6 <__sflush_r+0xae>
 800a708:	0793      	lsls	r3, r2, #30
 800a70a:	680e      	ldr	r6, [r1, #0]
 800a70c:	bf08      	it	eq
 800a70e:	694b      	ldreq	r3, [r1, #20]
 800a710:	600f      	str	r7, [r1, #0]
 800a712:	bf18      	it	ne
 800a714:	2300      	movne	r3, #0
 800a716:	eba6 0807 	sub.w	r8, r6, r7
 800a71a:	608b      	str	r3, [r1, #8]
 800a71c:	f1b8 0f00 	cmp.w	r8, #0
 800a720:	dde9      	ble.n	800a6f6 <__sflush_r+0xae>
 800a722:	6a21      	ldr	r1, [r4, #32]
 800a724:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a726:	4643      	mov	r3, r8
 800a728:	463a      	mov	r2, r7
 800a72a:	4628      	mov	r0, r5
 800a72c:	47b0      	blx	r6
 800a72e:	2800      	cmp	r0, #0
 800a730:	dc08      	bgt.n	800a744 <__sflush_r+0xfc>
 800a732:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a736:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a73a:	81a3      	strh	r3, [r4, #12]
 800a73c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a744:	4407      	add	r7, r0
 800a746:	eba8 0800 	sub.w	r8, r8, r0
 800a74a:	e7e7      	b.n	800a71c <__sflush_r+0xd4>
 800a74c:	20400001 	.word	0x20400001

0800a750 <_fflush_r>:
 800a750:	b538      	push	{r3, r4, r5, lr}
 800a752:	690b      	ldr	r3, [r1, #16]
 800a754:	4605      	mov	r5, r0
 800a756:	460c      	mov	r4, r1
 800a758:	b913      	cbnz	r3, 800a760 <_fflush_r+0x10>
 800a75a:	2500      	movs	r5, #0
 800a75c:	4628      	mov	r0, r5
 800a75e:	bd38      	pop	{r3, r4, r5, pc}
 800a760:	b118      	cbz	r0, 800a76a <_fflush_r+0x1a>
 800a762:	6a03      	ldr	r3, [r0, #32]
 800a764:	b90b      	cbnz	r3, 800a76a <_fflush_r+0x1a>
 800a766:	f7fd fca3 	bl	80080b0 <__sinit>
 800a76a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d0f3      	beq.n	800a75a <_fflush_r+0xa>
 800a772:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a774:	07d0      	lsls	r0, r2, #31
 800a776:	d404      	bmi.n	800a782 <_fflush_r+0x32>
 800a778:	0599      	lsls	r1, r3, #22
 800a77a:	d402      	bmi.n	800a782 <_fflush_r+0x32>
 800a77c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a77e:	f7fe fb98 	bl	8008eb2 <__retarget_lock_acquire_recursive>
 800a782:	4628      	mov	r0, r5
 800a784:	4621      	mov	r1, r4
 800a786:	f7ff ff5f 	bl	800a648 <__sflush_r>
 800a78a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a78c:	07da      	lsls	r2, r3, #31
 800a78e:	4605      	mov	r5, r0
 800a790:	d4e4      	bmi.n	800a75c <_fflush_r+0xc>
 800a792:	89a3      	ldrh	r3, [r4, #12]
 800a794:	059b      	lsls	r3, r3, #22
 800a796:	d4e1      	bmi.n	800a75c <_fflush_r+0xc>
 800a798:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a79a:	f7fe fb8b 	bl	8008eb4 <__retarget_lock_release_recursive>
 800a79e:	e7dd      	b.n	800a75c <_fflush_r+0xc>

0800a7a0 <__malloc_lock>:
 800a7a0:	4801      	ldr	r0, [pc, #4]	@ (800a7a8 <__malloc_lock+0x8>)
 800a7a2:	f7fe bb86 	b.w	8008eb2 <__retarget_lock_acquire_recursive>
 800a7a6:	bf00      	nop
 800a7a8:	2000076c 	.word	0x2000076c

0800a7ac <__malloc_unlock>:
 800a7ac:	4801      	ldr	r0, [pc, #4]	@ (800a7b4 <__malloc_unlock+0x8>)
 800a7ae:	f7fe bb81 	b.w	8008eb4 <__retarget_lock_release_recursive>
 800a7b2:	bf00      	nop
 800a7b4:	2000076c 	.word	0x2000076c

0800a7b8 <_Balloc>:
 800a7b8:	b570      	push	{r4, r5, r6, lr}
 800a7ba:	69c6      	ldr	r6, [r0, #28]
 800a7bc:	4604      	mov	r4, r0
 800a7be:	460d      	mov	r5, r1
 800a7c0:	b976      	cbnz	r6, 800a7e0 <_Balloc+0x28>
 800a7c2:	2010      	movs	r0, #16
 800a7c4:	f7ff fe84 	bl	800a4d0 <malloc>
 800a7c8:	4602      	mov	r2, r0
 800a7ca:	61e0      	str	r0, [r4, #28]
 800a7cc:	b920      	cbnz	r0, 800a7d8 <_Balloc+0x20>
 800a7ce:	4b18      	ldr	r3, [pc, #96]	@ (800a830 <_Balloc+0x78>)
 800a7d0:	4818      	ldr	r0, [pc, #96]	@ (800a834 <_Balloc+0x7c>)
 800a7d2:	216b      	movs	r1, #107	@ 0x6b
 800a7d4:	f000 fd88 	bl	800b2e8 <__assert_func>
 800a7d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a7dc:	6006      	str	r6, [r0, #0]
 800a7de:	60c6      	str	r6, [r0, #12]
 800a7e0:	69e6      	ldr	r6, [r4, #28]
 800a7e2:	68f3      	ldr	r3, [r6, #12]
 800a7e4:	b183      	cbz	r3, 800a808 <_Balloc+0x50>
 800a7e6:	69e3      	ldr	r3, [r4, #28]
 800a7e8:	68db      	ldr	r3, [r3, #12]
 800a7ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a7ee:	b9b8      	cbnz	r0, 800a820 <_Balloc+0x68>
 800a7f0:	2101      	movs	r1, #1
 800a7f2:	fa01 f605 	lsl.w	r6, r1, r5
 800a7f6:	1d72      	adds	r2, r6, #5
 800a7f8:	0092      	lsls	r2, r2, #2
 800a7fa:	4620      	mov	r0, r4
 800a7fc:	f000 fd92 	bl	800b324 <_calloc_r>
 800a800:	b160      	cbz	r0, 800a81c <_Balloc+0x64>
 800a802:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a806:	e00e      	b.n	800a826 <_Balloc+0x6e>
 800a808:	2221      	movs	r2, #33	@ 0x21
 800a80a:	2104      	movs	r1, #4
 800a80c:	4620      	mov	r0, r4
 800a80e:	f000 fd89 	bl	800b324 <_calloc_r>
 800a812:	69e3      	ldr	r3, [r4, #28]
 800a814:	60f0      	str	r0, [r6, #12]
 800a816:	68db      	ldr	r3, [r3, #12]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d1e4      	bne.n	800a7e6 <_Balloc+0x2e>
 800a81c:	2000      	movs	r0, #0
 800a81e:	bd70      	pop	{r4, r5, r6, pc}
 800a820:	6802      	ldr	r2, [r0, #0]
 800a822:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a826:	2300      	movs	r3, #0
 800a828:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a82c:	e7f7      	b.n	800a81e <_Balloc+0x66>
 800a82e:	bf00      	nop
 800a830:	0800bd9c 	.word	0x0800bd9c
 800a834:	0800be8d 	.word	0x0800be8d

0800a838 <_Bfree>:
 800a838:	b570      	push	{r4, r5, r6, lr}
 800a83a:	69c6      	ldr	r6, [r0, #28]
 800a83c:	4605      	mov	r5, r0
 800a83e:	460c      	mov	r4, r1
 800a840:	b976      	cbnz	r6, 800a860 <_Bfree+0x28>
 800a842:	2010      	movs	r0, #16
 800a844:	f7ff fe44 	bl	800a4d0 <malloc>
 800a848:	4602      	mov	r2, r0
 800a84a:	61e8      	str	r0, [r5, #28]
 800a84c:	b920      	cbnz	r0, 800a858 <_Bfree+0x20>
 800a84e:	4b09      	ldr	r3, [pc, #36]	@ (800a874 <_Bfree+0x3c>)
 800a850:	4809      	ldr	r0, [pc, #36]	@ (800a878 <_Bfree+0x40>)
 800a852:	218f      	movs	r1, #143	@ 0x8f
 800a854:	f000 fd48 	bl	800b2e8 <__assert_func>
 800a858:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a85c:	6006      	str	r6, [r0, #0]
 800a85e:	60c6      	str	r6, [r0, #12]
 800a860:	b13c      	cbz	r4, 800a872 <_Bfree+0x3a>
 800a862:	69eb      	ldr	r3, [r5, #28]
 800a864:	6862      	ldr	r2, [r4, #4]
 800a866:	68db      	ldr	r3, [r3, #12]
 800a868:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a86c:	6021      	str	r1, [r4, #0]
 800a86e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a872:	bd70      	pop	{r4, r5, r6, pc}
 800a874:	0800bd9c 	.word	0x0800bd9c
 800a878:	0800be8d 	.word	0x0800be8d

0800a87c <__multadd>:
 800a87c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a880:	690d      	ldr	r5, [r1, #16]
 800a882:	4607      	mov	r7, r0
 800a884:	460c      	mov	r4, r1
 800a886:	461e      	mov	r6, r3
 800a888:	f101 0c14 	add.w	ip, r1, #20
 800a88c:	2000      	movs	r0, #0
 800a88e:	f8dc 3000 	ldr.w	r3, [ip]
 800a892:	b299      	uxth	r1, r3
 800a894:	fb02 6101 	mla	r1, r2, r1, r6
 800a898:	0c1e      	lsrs	r6, r3, #16
 800a89a:	0c0b      	lsrs	r3, r1, #16
 800a89c:	fb02 3306 	mla	r3, r2, r6, r3
 800a8a0:	b289      	uxth	r1, r1
 800a8a2:	3001      	adds	r0, #1
 800a8a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a8a8:	4285      	cmp	r5, r0
 800a8aa:	f84c 1b04 	str.w	r1, [ip], #4
 800a8ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a8b2:	dcec      	bgt.n	800a88e <__multadd+0x12>
 800a8b4:	b30e      	cbz	r6, 800a8fa <__multadd+0x7e>
 800a8b6:	68a3      	ldr	r3, [r4, #8]
 800a8b8:	42ab      	cmp	r3, r5
 800a8ba:	dc19      	bgt.n	800a8f0 <__multadd+0x74>
 800a8bc:	6861      	ldr	r1, [r4, #4]
 800a8be:	4638      	mov	r0, r7
 800a8c0:	3101      	adds	r1, #1
 800a8c2:	f7ff ff79 	bl	800a7b8 <_Balloc>
 800a8c6:	4680      	mov	r8, r0
 800a8c8:	b928      	cbnz	r0, 800a8d6 <__multadd+0x5a>
 800a8ca:	4602      	mov	r2, r0
 800a8cc:	4b0c      	ldr	r3, [pc, #48]	@ (800a900 <__multadd+0x84>)
 800a8ce:	480d      	ldr	r0, [pc, #52]	@ (800a904 <__multadd+0x88>)
 800a8d0:	21ba      	movs	r1, #186	@ 0xba
 800a8d2:	f000 fd09 	bl	800b2e8 <__assert_func>
 800a8d6:	6922      	ldr	r2, [r4, #16]
 800a8d8:	3202      	adds	r2, #2
 800a8da:	f104 010c 	add.w	r1, r4, #12
 800a8de:	0092      	lsls	r2, r2, #2
 800a8e0:	300c      	adds	r0, #12
 800a8e2:	f7fe faed 	bl	8008ec0 <memcpy>
 800a8e6:	4621      	mov	r1, r4
 800a8e8:	4638      	mov	r0, r7
 800a8ea:	f7ff ffa5 	bl	800a838 <_Bfree>
 800a8ee:	4644      	mov	r4, r8
 800a8f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a8f4:	3501      	adds	r5, #1
 800a8f6:	615e      	str	r6, [r3, #20]
 800a8f8:	6125      	str	r5, [r4, #16]
 800a8fa:	4620      	mov	r0, r4
 800a8fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a900:	0800be0b 	.word	0x0800be0b
 800a904:	0800be8d 	.word	0x0800be8d

0800a908 <__s2b>:
 800a908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a90c:	460c      	mov	r4, r1
 800a90e:	4615      	mov	r5, r2
 800a910:	461f      	mov	r7, r3
 800a912:	2209      	movs	r2, #9
 800a914:	3308      	adds	r3, #8
 800a916:	4606      	mov	r6, r0
 800a918:	fb93 f3f2 	sdiv	r3, r3, r2
 800a91c:	2100      	movs	r1, #0
 800a91e:	2201      	movs	r2, #1
 800a920:	429a      	cmp	r2, r3
 800a922:	db09      	blt.n	800a938 <__s2b+0x30>
 800a924:	4630      	mov	r0, r6
 800a926:	f7ff ff47 	bl	800a7b8 <_Balloc>
 800a92a:	b940      	cbnz	r0, 800a93e <__s2b+0x36>
 800a92c:	4602      	mov	r2, r0
 800a92e:	4b19      	ldr	r3, [pc, #100]	@ (800a994 <__s2b+0x8c>)
 800a930:	4819      	ldr	r0, [pc, #100]	@ (800a998 <__s2b+0x90>)
 800a932:	21d3      	movs	r1, #211	@ 0xd3
 800a934:	f000 fcd8 	bl	800b2e8 <__assert_func>
 800a938:	0052      	lsls	r2, r2, #1
 800a93a:	3101      	adds	r1, #1
 800a93c:	e7f0      	b.n	800a920 <__s2b+0x18>
 800a93e:	9b08      	ldr	r3, [sp, #32]
 800a940:	6143      	str	r3, [r0, #20]
 800a942:	2d09      	cmp	r5, #9
 800a944:	f04f 0301 	mov.w	r3, #1
 800a948:	6103      	str	r3, [r0, #16]
 800a94a:	dd16      	ble.n	800a97a <__s2b+0x72>
 800a94c:	f104 0909 	add.w	r9, r4, #9
 800a950:	46c8      	mov	r8, r9
 800a952:	442c      	add	r4, r5
 800a954:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a958:	4601      	mov	r1, r0
 800a95a:	3b30      	subs	r3, #48	@ 0x30
 800a95c:	220a      	movs	r2, #10
 800a95e:	4630      	mov	r0, r6
 800a960:	f7ff ff8c 	bl	800a87c <__multadd>
 800a964:	45a0      	cmp	r8, r4
 800a966:	d1f5      	bne.n	800a954 <__s2b+0x4c>
 800a968:	f1a5 0408 	sub.w	r4, r5, #8
 800a96c:	444c      	add	r4, r9
 800a96e:	1b2d      	subs	r5, r5, r4
 800a970:	1963      	adds	r3, r4, r5
 800a972:	42bb      	cmp	r3, r7
 800a974:	db04      	blt.n	800a980 <__s2b+0x78>
 800a976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a97a:	340a      	adds	r4, #10
 800a97c:	2509      	movs	r5, #9
 800a97e:	e7f6      	b.n	800a96e <__s2b+0x66>
 800a980:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a984:	4601      	mov	r1, r0
 800a986:	3b30      	subs	r3, #48	@ 0x30
 800a988:	220a      	movs	r2, #10
 800a98a:	4630      	mov	r0, r6
 800a98c:	f7ff ff76 	bl	800a87c <__multadd>
 800a990:	e7ee      	b.n	800a970 <__s2b+0x68>
 800a992:	bf00      	nop
 800a994:	0800be0b 	.word	0x0800be0b
 800a998:	0800be8d 	.word	0x0800be8d

0800a99c <__hi0bits>:
 800a99c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	bf36      	itet	cc
 800a9a4:	0403      	lslcc	r3, r0, #16
 800a9a6:	2000      	movcs	r0, #0
 800a9a8:	2010      	movcc	r0, #16
 800a9aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a9ae:	bf3c      	itt	cc
 800a9b0:	021b      	lslcc	r3, r3, #8
 800a9b2:	3008      	addcc	r0, #8
 800a9b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a9b8:	bf3c      	itt	cc
 800a9ba:	011b      	lslcc	r3, r3, #4
 800a9bc:	3004      	addcc	r0, #4
 800a9be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a9c2:	bf3c      	itt	cc
 800a9c4:	009b      	lslcc	r3, r3, #2
 800a9c6:	3002      	addcc	r0, #2
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	db05      	blt.n	800a9d8 <__hi0bits+0x3c>
 800a9cc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a9d0:	f100 0001 	add.w	r0, r0, #1
 800a9d4:	bf08      	it	eq
 800a9d6:	2020      	moveq	r0, #32
 800a9d8:	4770      	bx	lr

0800a9da <__lo0bits>:
 800a9da:	6803      	ldr	r3, [r0, #0]
 800a9dc:	4602      	mov	r2, r0
 800a9de:	f013 0007 	ands.w	r0, r3, #7
 800a9e2:	d00b      	beq.n	800a9fc <__lo0bits+0x22>
 800a9e4:	07d9      	lsls	r1, r3, #31
 800a9e6:	d421      	bmi.n	800aa2c <__lo0bits+0x52>
 800a9e8:	0798      	lsls	r0, r3, #30
 800a9ea:	bf49      	itett	mi
 800a9ec:	085b      	lsrmi	r3, r3, #1
 800a9ee:	089b      	lsrpl	r3, r3, #2
 800a9f0:	2001      	movmi	r0, #1
 800a9f2:	6013      	strmi	r3, [r2, #0]
 800a9f4:	bf5c      	itt	pl
 800a9f6:	6013      	strpl	r3, [r2, #0]
 800a9f8:	2002      	movpl	r0, #2
 800a9fa:	4770      	bx	lr
 800a9fc:	b299      	uxth	r1, r3
 800a9fe:	b909      	cbnz	r1, 800aa04 <__lo0bits+0x2a>
 800aa00:	0c1b      	lsrs	r3, r3, #16
 800aa02:	2010      	movs	r0, #16
 800aa04:	b2d9      	uxtb	r1, r3
 800aa06:	b909      	cbnz	r1, 800aa0c <__lo0bits+0x32>
 800aa08:	3008      	adds	r0, #8
 800aa0a:	0a1b      	lsrs	r3, r3, #8
 800aa0c:	0719      	lsls	r1, r3, #28
 800aa0e:	bf04      	itt	eq
 800aa10:	091b      	lsreq	r3, r3, #4
 800aa12:	3004      	addeq	r0, #4
 800aa14:	0799      	lsls	r1, r3, #30
 800aa16:	bf04      	itt	eq
 800aa18:	089b      	lsreq	r3, r3, #2
 800aa1a:	3002      	addeq	r0, #2
 800aa1c:	07d9      	lsls	r1, r3, #31
 800aa1e:	d403      	bmi.n	800aa28 <__lo0bits+0x4e>
 800aa20:	085b      	lsrs	r3, r3, #1
 800aa22:	f100 0001 	add.w	r0, r0, #1
 800aa26:	d003      	beq.n	800aa30 <__lo0bits+0x56>
 800aa28:	6013      	str	r3, [r2, #0]
 800aa2a:	4770      	bx	lr
 800aa2c:	2000      	movs	r0, #0
 800aa2e:	4770      	bx	lr
 800aa30:	2020      	movs	r0, #32
 800aa32:	4770      	bx	lr

0800aa34 <__i2b>:
 800aa34:	b510      	push	{r4, lr}
 800aa36:	460c      	mov	r4, r1
 800aa38:	2101      	movs	r1, #1
 800aa3a:	f7ff febd 	bl	800a7b8 <_Balloc>
 800aa3e:	4602      	mov	r2, r0
 800aa40:	b928      	cbnz	r0, 800aa4e <__i2b+0x1a>
 800aa42:	4b05      	ldr	r3, [pc, #20]	@ (800aa58 <__i2b+0x24>)
 800aa44:	4805      	ldr	r0, [pc, #20]	@ (800aa5c <__i2b+0x28>)
 800aa46:	f240 1145 	movw	r1, #325	@ 0x145
 800aa4a:	f000 fc4d 	bl	800b2e8 <__assert_func>
 800aa4e:	2301      	movs	r3, #1
 800aa50:	6144      	str	r4, [r0, #20]
 800aa52:	6103      	str	r3, [r0, #16]
 800aa54:	bd10      	pop	{r4, pc}
 800aa56:	bf00      	nop
 800aa58:	0800be0b 	.word	0x0800be0b
 800aa5c:	0800be8d 	.word	0x0800be8d

0800aa60 <__multiply>:
 800aa60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa64:	4617      	mov	r7, r2
 800aa66:	690a      	ldr	r2, [r1, #16]
 800aa68:	693b      	ldr	r3, [r7, #16]
 800aa6a:	429a      	cmp	r2, r3
 800aa6c:	bfa8      	it	ge
 800aa6e:	463b      	movge	r3, r7
 800aa70:	4689      	mov	r9, r1
 800aa72:	bfa4      	itt	ge
 800aa74:	460f      	movge	r7, r1
 800aa76:	4699      	movge	r9, r3
 800aa78:	693d      	ldr	r5, [r7, #16]
 800aa7a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800aa7e:	68bb      	ldr	r3, [r7, #8]
 800aa80:	6879      	ldr	r1, [r7, #4]
 800aa82:	eb05 060a 	add.w	r6, r5, sl
 800aa86:	42b3      	cmp	r3, r6
 800aa88:	b085      	sub	sp, #20
 800aa8a:	bfb8      	it	lt
 800aa8c:	3101      	addlt	r1, #1
 800aa8e:	f7ff fe93 	bl	800a7b8 <_Balloc>
 800aa92:	b930      	cbnz	r0, 800aaa2 <__multiply+0x42>
 800aa94:	4602      	mov	r2, r0
 800aa96:	4b41      	ldr	r3, [pc, #260]	@ (800ab9c <__multiply+0x13c>)
 800aa98:	4841      	ldr	r0, [pc, #260]	@ (800aba0 <__multiply+0x140>)
 800aa9a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800aa9e:	f000 fc23 	bl	800b2e8 <__assert_func>
 800aaa2:	f100 0414 	add.w	r4, r0, #20
 800aaa6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800aaaa:	4623      	mov	r3, r4
 800aaac:	2200      	movs	r2, #0
 800aaae:	4573      	cmp	r3, lr
 800aab0:	d320      	bcc.n	800aaf4 <__multiply+0x94>
 800aab2:	f107 0814 	add.w	r8, r7, #20
 800aab6:	f109 0114 	add.w	r1, r9, #20
 800aaba:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800aabe:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800aac2:	9302      	str	r3, [sp, #8]
 800aac4:	1beb      	subs	r3, r5, r7
 800aac6:	3b15      	subs	r3, #21
 800aac8:	f023 0303 	bic.w	r3, r3, #3
 800aacc:	3304      	adds	r3, #4
 800aace:	3715      	adds	r7, #21
 800aad0:	42bd      	cmp	r5, r7
 800aad2:	bf38      	it	cc
 800aad4:	2304      	movcc	r3, #4
 800aad6:	9301      	str	r3, [sp, #4]
 800aad8:	9b02      	ldr	r3, [sp, #8]
 800aada:	9103      	str	r1, [sp, #12]
 800aadc:	428b      	cmp	r3, r1
 800aade:	d80c      	bhi.n	800aafa <__multiply+0x9a>
 800aae0:	2e00      	cmp	r6, #0
 800aae2:	dd03      	ble.n	800aaec <__multiply+0x8c>
 800aae4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d055      	beq.n	800ab98 <__multiply+0x138>
 800aaec:	6106      	str	r6, [r0, #16]
 800aaee:	b005      	add	sp, #20
 800aaf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaf4:	f843 2b04 	str.w	r2, [r3], #4
 800aaf8:	e7d9      	b.n	800aaae <__multiply+0x4e>
 800aafa:	f8b1 a000 	ldrh.w	sl, [r1]
 800aafe:	f1ba 0f00 	cmp.w	sl, #0
 800ab02:	d01f      	beq.n	800ab44 <__multiply+0xe4>
 800ab04:	46c4      	mov	ip, r8
 800ab06:	46a1      	mov	r9, r4
 800ab08:	2700      	movs	r7, #0
 800ab0a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ab0e:	f8d9 3000 	ldr.w	r3, [r9]
 800ab12:	fa1f fb82 	uxth.w	fp, r2
 800ab16:	b29b      	uxth	r3, r3
 800ab18:	fb0a 330b 	mla	r3, sl, fp, r3
 800ab1c:	443b      	add	r3, r7
 800ab1e:	f8d9 7000 	ldr.w	r7, [r9]
 800ab22:	0c12      	lsrs	r2, r2, #16
 800ab24:	0c3f      	lsrs	r7, r7, #16
 800ab26:	fb0a 7202 	mla	r2, sl, r2, r7
 800ab2a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800ab2e:	b29b      	uxth	r3, r3
 800ab30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ab34:	4565      	cmp	r5, ip
 800ab36:	f849 3b04 	str.w	r3, [r9], #4
 800ab3a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800ab3e:	d8e4      	bhi.n	800ab0a <__multiply+0xaa>
 800ab40:	9b01      	ldr	r3, [sp, #4]
 800ab42:	50e7      	str	r7, [r4, r3]
 800ab44:	9b03      	ldr	r3, [sp, #12]
 800ab46:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ab4a:	3104      	adds	r1, #4
 800ab4c:	f1b9 0f00 	cmp.w	r9, #0
 800ab50:	d020      	beq.n	800ab94 <__multiply+0x134>
 800ab52:	6823      	ldr	r3, [r4, #0]
 800ab54:	4647      	mov	r7, r8
 800ab56:	46a4      	mov	ip, r4
 800ab58:	f04f 0a00 	mov.w	sl, #0
 800ab5c:	f8b7 b000 	ldrh.w	fp, [r7]
 800ab60:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800ab64:	fb09 220b 	mla	r2, r9, fp, r2
 800ab68:	4452      	add	r2, sl
 800ab6a:	b29b      	uxth	r3, r3
 800ab6c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ab70:	f84c 3b04 	str.w	r3, [ip], #4
 800ab74:	f857 3b04 	ldr.w	r3, [r7], #4
 800ab78:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ab7c:	f8bc 3000 	ldrh.w	r3, [ip]
 800ab80:	fb09 330a 	mla	r3, r9, sl, r3
 800ab84:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800ab88:	42bd      	cmp	r5, r7
 800ab8a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ab8e:	d8e5      	bhi.n	800ab5c <__multiply+0xfc>
 800ab90:	9a01      	ldr	r2, [sp, #4]
 800ab92:	50a3      	str	r3, [r4, r2]
 800ab94:	3404      	adds	r4, #4
 800ab96:	e79f      	b.n	800aad8 <__multiply+0x78>
 800ab98:	3e01      	subs	r6, #1
 800ab9a:	e7a1      	b.n	800aae0 <__multiply+0x80>
 800ab9c:	0800be0b 	.word	0x0800be0b
 800aba0:	0800be8d 	.word	0x0800be8d

0800aba4 <__pow5mult>:
 800aba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aba8:	4615      	mov	r5, r2
 800abaa:	f012 0203 	ands.w	r2, r2, #3
 800abae:	4607      	mov	r7, r0
 800abb0:	460e      	mov	r6, r1
 800abb2:	d007      	beq.n	800abc4 <__pow5mult+0x20>
 800abb4:	4c25      	ldr	r4, [pc, #148]	@ (800ac4c <__pow5mult+0xa8>)
 800abb6:	3a01      	subs	r2, #1
 800abb8:	2300      	movs	r3, #0
 800abba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800abbe:	f7ff fe5d 	bl	800a87c <__multadd>
 800abc2:	4606      	mov	r6, r0
 800abc4:	10ad      	asrs	r5, r5, #2
 800abc6:	d03d      	beq.n	800ac44 <__pow5mult+0xa0>
 800abc8:	69fc      	ldr	r4, [r7, #28]
 800abca:	b97c      	cbnz	r4, 800abec <__pow5mult+0x48>
 800abcc:	2010      	movs	r0, #16
 800abce:	f7ff fc7f 	bl	800a4d0 <malloc>
 800abd2:	4602      	mov	r2, r0
 800abd4:	61f8      	str	r0, [r7, #28]
 800abd6:	b928      	cbnz	r0, 800abe4 <__pow5mult+0x40>
 800abd8:	4b1d      	ldr	r3, [pc, #116]	@ (800ac50 <__pow5mult+0xac>)
 800abda:	481e      	ldr	r0, [pc, #120]	@ (800ac54 <__pow5mult+0xb0>)
 800abdc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800abe0:	f000 fb82 	bl	800b2e8 <__assert_func>
 800abe4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800abe8:	6004      	str	r4, [r0, #0]
 800abea:	60c4      	str	r4, [r0, #12]
 800abec:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800abf0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800abf4:	b94c      	cbnz	r4, 800ac0a <__pow5mult+0x66>
 800abf6:	f240 2171 	movw	r1, #625	@ 0x271
 800abfa:	4638      	mov	r0, r7
 800abfc:	f7ff ff1a 	bl	800aa34 <__i2b>
 800ac00:	2300      	movs	r3, #0
 800ac02:	f8c8 0008 	str.w	r0, [r8, #8]
 800ac06:	4604      	mov	r4, r0
 800ac08:	6003      	str	r3, [r0, #0]
 800ac0a:	f04f 0900 	mov.w	r9, #0
 800ac0e:	07eb      	lsls	r3, r5, #31
 800ac10:	d50a      	bpl.n	800ac28 <__pow5mult+0x84>
 800ac12:	4631      	mov	r1, r6
 800ac14:	4622      	mov	r2, r4
 800ac16:	4638      	mov	r0, r7
 800ac18:	f7ff ff22 	bl	800aa60 <__multiply>
 800ac1c:	4631      	mov	r1, r6
 800ac1e:	4680      	mov	r8, r0
 800ac20:	4638      	mov	r0, r7
 800ac22:	f7ff fe09 	bl	800a838 <_Bfree>
 800ac26:	4646      	mov	r6, r8
 800ac28:	106d      	asrs	r5, r5, #1
 800ac2a:	d00b      	beq.n	800ac44 <__pow5mult+0xa0>
 800ac2c:	6820      	ldr	r0, [r4, #0]
 800ac2e:	b938      	cbnz	r0, 800ac40 <__pow5mult+0x9c>
 800ac30:	4622      	mov	r2, r4
 800ac32:	4621      	mov	r1, r4
 800ac34:	4638      	mov	r0, r7
 800ac36:	f7ff ff13 	bl	800aa60 <__multiply>
 800ac3a:	6020      	str	r0, [r4, #0]
 800ac3c:	f8c0 9000 	str.w	r9, [r0]
 800ac40:	4604      	mov	r4, r0
 800ac42:	e7e4      	b.n	800ac0e <__pow5mult+0x6a>
 800ac44:	4630      	mov	r0, r6
 800ac46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac4a:	bf00      	nop
 800ac4c:	0800c07c 	.word	0x0800c07c
 800ac50:	0800bd9c 	.word	0x0800bd9c
 800ac54:	0800be8d 	.word	0x0800be8d

0800ac58 <__lshift>:
 800ac58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac5c:	460c      	mov	r4, r1
 800ac5e:	6849      	ldr	r1, [r1, #4]
 800ac60:	6923      	ldr	r3, [r4, #16]
 800ac62:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ac66:	68a3      	ldr	r3, [r4, #8]
 800ac68:	4607      	mov	r7, r0
 800ac6a:	4691      	mov	r9, r2
 800ac6c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ac70:	f108 0601 	add.w	r6, r8, #1
 800ac74:	42b3      	cmp	r3, r6
 800ac76:	db0b      	blt.n	800ac90 <__lshift+0x38>
 800ac78:	4638      	mov	r0, r7
 800ac7a:	f7ff fd9d 	bl	800a7b8 <_Balloc>
 800ac7e:	4605      	mov	r5, r0
 800ac80:	b948      	cbnz	r0, 800ac96 <__lshift+0x3e>
 800ac82:	4602      	mov	r2, r0
 800ac84:	4b28      	ldr	r3, [pc, #160]	@ (800ad28 <__lshift+0xd0>)
 800ac86:	4829      	ldr	r0, [pc, #164]	@ (800ad2c <__lshift+0xd4>)
 800ac88:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ac8c:	f000 fb2c 	bl	800b2e8 <__assert_func>
 800ac90:	3101      	adds	r1, #1
 800ac92:	005b      	lsls	r3, r3, #1
 800ac94:	e7ee      	b.n	800ac74 <__lshift+0x1c>
 800ac96:	2300      	movs	r3, #0
 800ac98:	f100 0114 	add.w	r1, r0, #20
 800ac9c:	f100 0210 	add.w	r2, r0, #16
 800aca0:	4618      	mov	r0, r3
 800aca2:	4553      	cmp	r3, sl
 800aca4:	db33      	blt.n	800ad0e <__lshift+0xb6>
 800aca6:	6920      	ldr	r0, [r4, #16]
 800aca8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800acac:	f104 0314 	add.w	r3, r4, #20
 800acb0:	f019 091f 	ands.w	r9, r9, #31
 800acb4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800acb8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800acbc:	d02b      	beq.n	800ad16 <__lshift+0xbe>
 800acbe:	f1c9 0e20 	rsb	lr, r9, #32
 800acc2:	468a      	mov	sl, r1
 800acc4:	2200      	movs	r2, #0
 800acc6:	6818      	ldr	r0, [r3, #0]
 800acc8:	fa00 f009 	lsl.w	r0, r0, r9
 800accc:	4310      	orrs	r0, r2
 800acce:	f84a 0b04 	str.w	r0, [sl], #4
 800acd2:	f853 2b04 	ldr.w	r2, [r3], #4
 800acd6:	459c      	cmp	ip, r3
 800acd8:	fa22 f20e 	lsr.w	r2, r2, lr
 800acdc:	d8f3      	bhi.n	800acc6 <__lshift+0x6e>
 800acde:	ebac 0304 	sub.w	r3, ip, r4
 800ace2:	3b15      	subs	r3, #21
 800ace4:	f023 0303 	bic.w	r3, r3, #3
 800ace8:	3304      	adds	r3, #4
 800acea:	f104 0015 	add.w	r0, r4, #21
 800acee:	4560      	cmp	r0, ip
 800acf0:	bf88      	it	hi
 800acf2:	2304      	movhi	r3, #4
 800acf4:	50ca      	str	r2, [r1, r3]
 800acf6:	b10a      	cbz	r2, 800acfc <__lshift+0xa4>
 800acf8:	f108 0602 	add.w	r6, r8, #2
 800acfc:	3e01      	subs	r6, #1
 800acfe:	4638      	mov	r0, r7
 800ad00:	612e      	str	r6, [r5, #16]
 800ad02:	4621      	mov	r1, r4
 800ad04:	f7ff fd98 	bl	800a838 <_Bfree>
 800ad08:	4628      	mov	r0, r5
 800ad0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad0e:	f842 0f04 	str.w	r0, [r2, #4]!
 800ad12:	3301      	adds	r3, #1
 800ad14:	e7c5      	b.n	800aca2 <__lshift+0x4a>
 800ad16:	3904      	subs	r1, #4
 800ad18:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad1c:	f841 2f04 	str.w	r2, [r1, #4]!
 800ad20:	459c      	cmp	ip, r3
 800ad22:	d8f9      	bhi.n	800ad18 <__lshift+0xc0>
 800ad24:	e7ea      	b.n	800acfc <__lshift+0xa4>
 800ad26:	bf00      	nop
 800ad28:	0800be0b 	.word	0x0800be0b
 800ad2c:	0800be8d 	.word	0x0800be8d

0800ad30 <__mcmp>:
 800ad30:	690a      	ldr	r2, [r1, #16]
 800ad32:	4603      	mov	r3, r0
 800ad34:	6900      	ldr	r0, [r0, #16]
 800ad36:	1a80      	subs	r0, r0, r2
 800ad38:	b530      	push	{r4, r5, lr}
 800ad3a:	d10e      	bne.n	800ad5a <__mcmp+0x2a>
 800ad3c:	3314      	adds	r3, #20
 800ad3e:	3114      	adds	r1, #20
 800ad40:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ad44:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ad48:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ad4c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ad50:	4295      	cmp	r5, r2
 800ad52:	d003      	beq.n	800ad5c <__mcmp+0x2c>
 800ad54:	d205      	bcs.n	800ad62 <__mcmp+0x32>
 800ad56:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ad5a:	bd30      	pop	{r4, r5, pc}
 800ad5c:	42a3      	cmp	r3, r4
 800ad5e:	d3f3      	bcc.n	800ad48 <__mcmp+0x18>
 800ad60:	e7fb      	b.n	800ad5a <__mcmp+0x2a>
 800ad62:	2001      	movs	r0, #1
 800ad64:	e7f9      	b.n	800ad5a <__mcmp+0x2a>
	...

0800ad68 <__mdiff>:
 800ad68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad6c:	4689      	mov	r9, r1
 800ad6e:	4606      	mov	r6, r0
 800ad70:	4611      	mov	r1, r2
 800ad72:	4648      	mov	r0, r9
 800ad74:	4614      	mov	r4, r2
 800ad76:	f7ff ffdb 	bl	800ad30 <__mcmp>
 800ad7a:	1e05      	subs	r5, r0, #0
 800ad7c:	d112      	bne.n	800ada4 <__mdiff+0x3c>
 800ad7e:	4629      	mov	r1, r5
 800ad80:	4630      	mov	r0, r6
 800ad82:	f7ff fd19 	bl	800a7b8 <_Balloc>
 800ad86:	4602      	mov	r2, r0
 800ad88:	b928      	cbnz	r0, 800ad96 <__mdiff+0x2e>
 800ad8a:	4b3f      	ldr	r3, [pc, #252]	@ (800ae88 <__mdiff+0x120>)
 800ad8c:	f240 2137 	movw	r1, #567	@ 0x237
 800ad90:	483e      	ldr	r0, [pc, #248]	@ (800ae8c <__mdiff+0x124>)
 800ad92:	f000 faa9 	bl	800b2e8 <__assert_func>
 800ad96:	2301      	movs	r3, #1
 800ad98:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ad9c:	4610      	mov	r0, r2
 800ad9e:	b003      	add	sp, #12
 800ada0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ada4:	bfbc      	itt	lt
 800ada6:	464b      	movlt	r3, r9
 800ada8:	46a1      	movlt	r9, r4
 800adaa:	4630      	mov	r0, r6
 800adac:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800adb0:	bfba      	itte	lt
 800adb2:	461c      	movlt	r4, r3
 800adb4:	2501      	movlt	r5, #1
 800adb6:	2500      	movge	r5, #0
 800adb8:	f7ff fcfe 	bl	800a7b8 <_Balloc>
 800adbc:	4602      	mov	r2, r0
 800adbe:	b918      	cbnz	r0, 800adc8 <__mdiff+0x60>
 800adc0:	4b31      	ldr	r3, [pc, #196]	@ (800ae88 <__mdiff+0x120>)
 800adc2:	f240 2145 	movw	r1, #581	@ 0x245
 800adc6:	e7e3      	b.n	800ad90 <__mdiff+0x28>
 800adc8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800adcc:	6926      	ldr	r6, [r4, #16]
 800adce:	60c5      	str	r5, [r0, #12]
 800add0:	f109 0310 	add.w	r3, r9, #16
 800add4:	f109 0514 	add.w	r5, r9, #20
 800add8:	f104 0e14 	add.w	lr, r4, #20
 800addc:	f100 0b14 	add.w	fp, r0, #20
 800ade0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ade4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ade8:	9301      	str	r3, [sp, #4]
 800adea:	46d9      	mov	r9, fp
 800adec:	f04f 0c00 	mov.w	ip, #0
 800adf0:	9b01      	ldr	r3, [sp, #4]
 800adf2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800adf6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800adfa:	9301      	str	r3, [sp, #4]
 800adfc:	fa1f f38a 	uxth.w	r3, sl
 800ae00:	4619      	mov	r1, r3
 800ae02:	b283      	uxth	r3, r0
 800ae04:	1acb      	subs	r3, r1, r3
 800ae06:	0c00      	lsrs	r0, r0, #16
 800ae08:	4463      	add	r3, ip
 800ae0a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ae0e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ae12:	b29b      	uxth	r3, r3
 800ae14:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ae18:	4576      	cmp	r6, lr
 800ae1a:	f849 3b04 	str.w	r3, [r9], #4
 800ae1e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ae22:	d8e5      	bhi.n	800adf0 <__mdiff+0x88>
 800ae24:	1b33      	subs	r3, r6, r4
 800ae26:	3b15      	subs	r3, #21
 800ae28:	f023 0303 	bic.w	r3, r3, #3
 800ae2c:	3415      	adds	r4, #21
 800ae2e:	3304      	adds	r3, #4
 800ae30:	42a6      	cmp	r6, r4
 800ae32:	bf38      	it	cc
 800ae34:	2304      	movcc	r3, #4
 800ae36:	441d      	add	r5, r3
 800ae38:	445b      	add	r3, fp
 800ae3a:	461e      	mov	r6, r3
 800ae3c:	462c      	mov	r4, r5
 800ae3e:	4544      	cmp	r4, r8
 800ae40:	d30e      	bcc.n	800ae60 <__mdiff+0xf8>
 800ae42:	f108 0103 	add.w	r1, r8, #3
 800ae46:	1b49      	subs	r1, r1, r5
 800ae48:	f021 0103 	bic.w	r1, r1, #3
 800ae4c:	3d03      	subs	r5, #3
 800ae4e:	45a8      	cmp	r8, r5
 800ae50:	bf38      	it	cc
 800ae52:	2100      	movcc	r1, #0
 800ae54:	440b      	add	r3, r1
 800ae56:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ae5a:	b191      	cbz	r1, 800ae82 <__mdiff+0x11a>
 800ae5c:	6117      	str	r7, [r2, #16]
 800ae5e:	e79d      	b.n	800ad9c <__mdiff+0x34>
 800ae60:	f854 1b04 	ldr.w	r1, [r4], #4
 800ae64:	46e6      	mov	lr, ip
 800ae66:	0c08      	lsrs	r0, r1, #16
 800ae68:	fa1c fc81 	uxtah	ip, ip, r1
 800ae6c:	4471      	add	r1, lr
 800ae6e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ae72:	b289      	uxth	r1, r1
 800ae74:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ae78:	f846 1b04 	str.w	r1, [r6], #4
 800ae7c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ae80:	e7dd      	b.n	800ae3e <__mdiff+0xd6>
 800ae82:	3f01      	subs	r7, #1
 800ae84:	e7e7      	b.n	800ae56 <__mdiff+0xee>
 800ae86:	bf00      	nop
 800ae88:	0800be0b 	.word	0x0800be0b
 800ae8c:	0800be8d 	.word	0x0800be8d

0800ae90 <__ulp>:
 800ae90:	b082      	sub	sp, #8
 800ae92:	ed8d 0b00 	vstr	d0, [sp]
 800ae96:	9a01      	ldr	r2, [sp, #4]
 800ae98:	4b0f      	ldr	r3, [pc, #60]	@ (800aed8 <__ulp+0x48>)
 800ae9a:	4013      	ands	r3, r2
 800ae9c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	dc08      	bgt.n	800aeb6 <__ulp+0x26>
 800aea4:	425b      	negs	r3, r3
 800aea6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800aeaa:	ea4f 5223 	mov.w	r2, r3, asr #20
 800aeae:	da04      	bge.n	800aeba <__ulp+0x2a>
 800aeb0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800aeb4:	4113      	asrs	r3, r2
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	e008      	b.n	800aecc <__ulp+0x3c>
 800aeba:	f1a2 0314 	sub.w	r3, r2, #20
 800aebe:	2b1e      	cmp	r3, #30
 800aec0:	bfda      	itte	le
 800aec2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800aec6:	40da      	lsrle	r2, r3
 800aec8:	2201      	movgt	r2, #1
 800aeca:	2300      	movs	r3, #0
 800aecc:	4619      	mov	r1, r3
 800aece:	4610      	mov	r0, r2
 800aed0:	ec41 0b10 	vmov	d0, r0, r1
 800aed4:	b002      	add	sp, #8
 800aed6:	4770      	bx	lr
 800aed8:	7ff00000 	.word	0x7ff00000

0800aedc <__b2d>:
 800aedc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aee0:	6906      	ldr	r6, [r0, #16]
 800aee2:	f100 0814 	add.w	r8, r0, #20
 800aee6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800aeea:	1f37      	subs	r7, r6, #4
 800aeec:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800aef0:	4610      	mov	r0, r2
 800aef2:	f7ff fd53 	bl	800a99c <__hi0bits>
 800aef6:	f1c0 0320 	rsb	r3, r0, #32
 800aefa:	280a      	cmp	r0, #10
 800aefc:	600b      	str	r3, [r1, #0]
 800aefe:	491b      	ldr	r1, [pc, #108]	@ (800af6c <__b2d+0x90>)
 800af00:	dc15      	bgt.n	800af2e <__b2d+0x52>
 800af02:	f1c0 0c0b 	rsb	ip, r0, #11
 800af06:	fa22 f30c 	lsr.w	r3, r2, ip
 800af0a:	45b8      	cmp	r8, r7
 800af0c:	ea43 0501 	orr.w	r5, r3, r1
 800af10:	bf34      	ite	cc
 800af12:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800af16:	2300      	movcs	r3, #0
 800af18:	3015      	adds	r0, #21
 800af1a:	fa02 f000 	lsl.w	r0, r2, r0
 800af1e:	fa23 f30c 	lsr.w	r3, r3, ip
 800af22:	4303      	orrs	r3, r0
 800af24:	461c      	mov	r4, r3
 800af26:	ec45 4b10 	vmov	d0, r4, r5
 800af2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af2e:	45b8      	cmp	r8, r7
 800af30:	bf3a      	itte	cc
 800af32:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800af36:	f1a6 0708 	subcc.w	r7, r6, #8
 800af3a:	2300      	movcs	r3, #0
 800af3c:	380b      	subs	r0, #11
 800af3e:	d012      	beq.n	800af66 <__b2d+0x8a>
 800af40:	f1c0 0120 	rsb	r1, r0, #32
 800af44:	fa23 f401 	lsr.w	r4, r3, r1
 800af48:	4082      	lsls	r2, r0
 800af4a:	4322      	orrs	r2, r4
 800af4c:	4547      	cmp	r7, r8
 800af4e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800af52:	bf8c      	ite	hi
 800af54:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800af58:	2200      	movls	r2, #0
 800af5a:	4083      	lsls	r3, r0
 800af5c:	40ca      	lsrs	r2, r1
 800af5e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800af62:	4313      	orrs	r3, r2
 800af64:	e7de      	b.n	800af24 <__b2d+0x48>
 800af66:	ea42 0501 	orr.w	r5, r2, r1
 800af6a:	e7db      	b.n	800af24 <__b2d+0x48>
 800af6c:	3ff00000 	.word	0x3ff00000

0800af70 <__d2b>:
 800af70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800af74:	460f      	mov	r7, r1
 800af76:	2101      	movs	r1, #1
 800af78:	ec59 8b10 	vmov	r8, r9, d0
 800af7c:	4616      	mov	r6, r2
 800af7e:	f7ff fc1b 	bl	800a7b8 <_Balloc>
 800af82:	4604      	mov	r4, r0
 800af84:	b930      	cbnz	r0, 800af94 <__d2b+0x24>
 800af86:	4602      	mov	r2, r0
 800af88:	4b23      	ldr	r3, [pc, #140]	@ (800b018 <__d2b+0xa8>)
 800af8a:	4824      	ldr	r0, [pc, #144]	@ (800b01c <__d2b+0xac>)
 800af8c:	f240 310f 	movw	r1, #783	@ 0x30f
 800af90:	f000 f9aa 	bl	800b2e8 <__assert_func>
 800af94:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800af98:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800af9c:	b10d      	cbz	r5, 800afa2 <__d2b+0x32>
 800af9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800afa2:	9301      	str	r3, [sp, #4]
 800afa4:	f1b8 0300 	subs.w	r3, r8, #0
 800afa8:	d023      	beq.n	800aff2 <__d2b+0x82>
 800afaa:	4668      	mov	r0, sp
 800afac:	9300      	str	r3, [sp, #0]
 800afae:	f7ff fd14 	bl	800a9da <__lo0bits>
 800afb2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800afb6:	b1d0      	cbz	r0, 800afee <__d2b+0x7e>
 800afb8:	f1c0 0320 	rsb	r3, r0, #32
 800afbc:	fa02 f303 	lsl.w	r3, r2, r3
 800afc0:	430b      	orrs	r3, r1
 800afc2:	40c2      	lsrs	r2, r0
 800afc4:	6163      	str	r3, [r4, #20]
 800afc6:	9201      	str	r2, [sp, #4]
 800afc8:	9b01      	ldr	r3, [sp, #4]
 800afca:	61a3      	str	r3, [r4, #24]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	bf0c      	ite	eq
 800afd0:	2201      	moveq	r2, #1
 800afd2:	2202      	movne	r2, #2
 800afd4:	6122      	str	r2, [r4, #16]
 800afd6:	b1a5      	cbz	r5, 800b002 <__d2b+0x92>
 800afd8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800afdc:	4405      	add	r5, r0
 800afde:	603d      	str	r5, [r7, #0]
 800afe0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800afe4:	6030      	str	r0, [r6, #0]
 800afe6:	4620      	mov	r0, r4
 800afe8:	b003      	add	sp, #12
 800afea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800afee:	6161      	str	r1, [r4, #20]
 800aff0:	e7ea      	b.n	800afc8 <__d2b+0x58>
 800aff2:	a801      	add	r0, sp, #4
 800aff4:	f7ff fcf1 	bl	800a9da <__lo0bits>
 800aff8:	9b01      	ldr	r3, [sp, #4]
 800affa:	6163      	str	r3, [r4, #20]
 800affc:	3020      	adds	r0, #32
 800affe:	2201      	movs	r2, #1
 800b000:	e7e8      	b.n	800afd4 <__d2b+0x64>
 800b002:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b006:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b00a:	6038      	str	r0, [r7, #0]
 800b00c:	6918      	ldr	r0, [r3, #16]
 800b00e:	f7ff fcc5 	bl	800a99c <__hi0bits>
 800b012:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b016:	e7e5      	b.n	800afe4 <__d2b+0x74>
 800b018:	0800be0b 	.word	0x0800be0b
 800b01c:	0800be8d 	.word	0x0800be8d

0800b020 <__ratio>:
 800b020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b024:	b085      	sub	sp, #20
 800b026:	e9cd 1000 	strd	r1, r0, [sp]
 800b02a:	a902      	add	r1, sp, #8
 800b02c:	f7ff ff56 	bl	800aedc <__b2d>
 800b030:	9800      	ldr	r0, [sp, #0]
 800b032:	a903      	add	r1, sp, #12
 800b034:	ec55 4b10 	vmov	r4, r5, d0
 800b038:	f7ff ff50 	bl	800aedc <__b2d>
 800b03c:	9b01      	ldr	r3, [sp, #4]
 800b03e:	6919      	ldr	r1, [r3, #16]
 800b040:	9b00      	ldr	r3, [sp, #0]
 800b042:	691b      	ldr	r3, [r3, #16]
 800b044:	1ac9      	subs	r1, r1, r3
 800b046:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b04a:	1a9b      	subs	r3, r3, r2
 800b04c:	ec5b ab10 	vmov	sl, fp, d0
 800b050:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b054:	2b00      	cmp	r3, #0
 800b056:	bfce      	itee	gt
 800b058:	462a      	movgt	r2, r5
 800b05a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b05e:	465a      	movle	r2, fp
 800b060:	462f      	mov	r7, r5
 800b062:	46d9      	mov	r9, fp
 800b064:	bfcc      	ite	gt
 800b066:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b06a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b06e:	464b      	mov	r3, r9
 800b070:	4652      	mov	r2, sl
 800b072:	4620      	mov	r0, r4
 800b074:	4639      	mov	r1, r7
 800b076:	f7f5 fbe9 	bl	800084c <__aeabi_ddiv>
 800b07a:	ec41 0b10 	vmov	d0, r0, r1
 800b07e:	b005      	add	sp, #20
 800b080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b084 <__copybits>:
 800b084:	3901      	subs	r1, #1
 800b086:	b570      	push	{r4, r5, r6, lr}
 800b088:	1149      	asrs	r1, r1, #5
 800b08a:	6914      	ldr	r4, [r2, #16]
 800b08c:	3101      	adds	r1, #1
 800b08e:	f102 0314 	add.w	r3, r2, #20
 800b092:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b096:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b09a:	1f05      	subs	r5, r0, #4
 800b09c:	42a3      	cmp	r3, r4
 800b09e:	d30c      	bcc.n	800b0ba <__copybits+0x36>
 800b0a0:	1aa3      	subs	r3, r4, r2
 800b0a2:	3b11      	subs	r3, #17
 800b0a4:	f023 0303 	bic.w	r3, r3, #3
 800b0a8:	3211      	adds	r2, #17
 800b0aa:	42a2      	cmp	r2, r4
 800b0ac:	bf88      	it	hi
 800b0ae:	2300      	movhi	r3, #0
 800b0b0:	4418      	add	r0, r3
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	4288      	cmp	r0, r1
 800b0b6:	d305      	bcc.n	800b0c4 <__copybits+0x40>
 800b0b8:	bd70      	pop	{r4, r5, r6, pc}
 800b0ba:	f853 6b04 	ldr.w	r6, [r3], #4
 800b0be:	f845 6f04 	str.w	r6, [r5, #4]!
 800b0c2:	e7eb      	b.n	800b09c <__copybits+0x18>
 800b0c4:	f840 3b04 	str.w	r3, [r0], #4
 800b0c8:	e7f4      	b.n	800b0b4 <__copybits+0x30>

0800b0ca <__any_on>:
 800b0ca:	f100 0214 	add.w	r2, r0, #20
 800b0ce:	6900      	ldr	r0, [r0, #16]
 800b0d0:	114b      	asrs	r3, r1, #5
 800b0d2:	4298      	cmp	r0, r3
 800b0d4:	b510      	push	{r4, lr}
 800b0d6:	db11      	blt.n	800b0fc <__any_on+0x32>
 800b0d8:	dd0a      	ble.n	800b0f0 <__any_on+0x26>
 800b0da:	f011 011f 	ands.w	r1, r1, #31
 800b0de:	d007      	beq.n	800b0f0 <__any_on+0x26>
 800b0e0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b0e4:	fa24 f001 	lsr.w	r0, r4, r1
 800b0e8:	fa00 f101 	lsl.w	r1, r0, r1
 800b0ec:	428c      	cmp	r4, r1
 800b0ee:	d10b      	bne.n	800b108 <__any_on+0x3e>
 800b0f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b0f4:	4293      	cmp	r3, r2
 800b0f6:	d803      	bhi.n	800b100 <__any_on+0x36>
 800b0f8:	2000      	movs	r0, #0
 800b0fa:	bd10      	pop	{r4, pc}
 800b0fc:	4603      	mov	r3, r0
 800b0fe:	e7f7      	b.n	800b0f0 <__any_on+0x26>
 800b100:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b104:	2900      	cmp	r1, #0
 800b106:	d0f5      	beq.n	800b0f4 <__any_on+0x2a>
 800b108:	2001      	movs	r0, #1
 800b10a:	e7f6      	b.n	800b0fa <__any_on+0x30>

0800b10c <__sread>:
 800b10c:	b510      	push	{r4, lr}
 800b10e:	460c      	mov	r4, r1
 800b110:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b114:	f000 f8a4 	bl	800b260 <_read_r>
 800b118:	2800      	cmp	r0, #0
 800b11a:	bfab      	itete	ge
 800b11c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b11e:	89a3      	ldrhlt	r3, [r4, #12]
 800b120:	181b      	addge	r3, r3, r0
 800b122:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b126:	bfac      	ite	ge
 800b128:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b12a:	81a3      	strhlt	r3, [r4, #12]
 800b12c:	bd10      	pop	{r4, pc}

0800b12e <__swrite>:
 800b12e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b132:	461f      	mov	r7, r3
 800b134:	898b      	ldrh	r3, [r1, #12]
 800b136:	05db      	lsls	r3, r3, #23
 800b138:	4605      	mov	r5, r0
 800b13a:	460c      	mov	r4, r1
 800b13c:	4616      	mov	r6, r2
 800b13e:	d505      	bpl.n	800b14c <__swrite+0x1e>
 800b140:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b144:	2302      	movs	r3, #2
 800b146:	2200      	movs	r2, #0
 800b148:	f000 f878 	bl	800b23c <_lseek_r>
 800b14c:	89a3      	ldrh	r3, [r4, #12]
 800b14e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b152:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b156:	81a3      	strh	r3, [r4, #12]
 800b158:	4632      	mov	r2, r6
 800b15a:	463b      	mov	r3, r7
 800b15c:	4628      	mov	r0, r5
 800b15e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b162:	f000 b89f 	b.w	800b2a4 <_write_r>

0800b166 <__sseek>:
 800b166:	b510      	push	{r4, lr}
 800b168:	460c      	mov	r4, r1
 800b16a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b16e:	f000 f865 	bl	800b23c <_lseek_r>
 800b172:	1c43      	adds	r3, r0, #1
 800b174:	89a3      	ldrh	r3, [r4, #12]
 800b176:	bf15      	itete	ne
 800b178:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b17a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b17e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b182:	81a3      	strheq	r3, [r4, #12]
 800b184:	bf18      	it	ne
 800b186:	81a3      	strhne	r3, [r4, #12]
 800b188:	bd10      	pop	{r4, pc}

0800b18a <__sclose>:
 800b18a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b18e:	f000 b89b 	b.w	800b2c8 <_close_r>

0800b192 <_realloc_r>:
 800b192:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b196:	4607      	mov	r7, r0
 800b198:	4614      	mov	r4, r2
 800b19a:	460d      	mov	r5, r1
 800b19c:	b921      	cbnz	r1, 800b1a8 <_realloc_r+0x16>
 800b19e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b1a2:	4611      	mov	r1, r2
 800b1a4:	f7ff b9be 	b.w	800a524 <_malloc_r>
 800b1a8:	b92a      	cbnz	r2, 800b1b6 <_realloc_r+0x24>
 800b1aa:	f000 f8cf 	bl	800b34c <_free_r>
 800b1ae:	4625      	mov	r5, r4
 800b1b0:	4628      	mov	r0, r5
 800b1b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1b6:	f000 f913 	bl	800b3e0 <_malloc_usable_size_r>
 800b1ba:	4284      	cmp	r4, r0
 800b1bc:	4606      	mov	r6, r0
 800b1be:	d802      	bhi.n	800b1c6 <_realloc_r+0x34>
 800b1c0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b1c4:	d8f4      	bhi.n	800b1b0 <_realloc_r+0x1e>
 800b1c6:	4621      	mov	r1, r4
 800b1c8:	4638      	mov	r0, r7
 800b1ca:	f7ff f9ab 	bl	800a524 <_malloc_r>
 800b1ce:	4680      	mov	r8, r0
 800b1d0:	b908      	cbnz	r0, 800b1d6 <_realloc_r+0x44>
 800b1d2:	4645      	mov	r5, r8
 800b1d4:	e7ec      	b.n	800b1b0 <_realloc_r+0x1e>
 800b1d6:	42b4      	cmp	r4, r6
 800b1d8:	4622      	mov	r2, r4
 800b1da:	4629      	mov	r1, r5
 800b1dc:	bf28      	it	cs
 800b1de:	4632      	movcs	r2, r6
 800b1e0:	f7fd fe6e 	bl	8008ec0 <memcpy>
 800b1e4:	4629      	mov	r1, r5
 800b1e6:	4638      	mov	r0, r7
 800b1e8:	f000 f8b0 	bl	800b34c <_free_r>
 800b1ec:	e7f1      	b.n	800b1d2 <_realloc_r+0x40>

0800b1ee <__ascii_wctomb>:
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	4608      	mov	r0, r1
 800b1f2:	b141      	cbz	r1, 800b206 <__ascii_wctomb+0x18>
 800b1f4:	2aff      	cmp	r2, #255	@ 0xff
 800b1f6:	d904      	bls.n	800b202 <__ascii_wctomb+0x14>
 800b1f8:	228a      	movs	r2, #138	@ 0x8a
 800b1fa:	601a      	str	r2, [r3, #0]
 800b1fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b200:	4770      	bx	lr
 800b202:	700a      	strb	r2, [r1, #0]
 800b204:	2001      	movs	r0, #1
 800b206:	4770      	bx	lr

0800b208 <memmove>:
 800b208:	4288      	cmp	r0, r1
 800b20a:	b510      	push	{r4, lr}
 800b20c:	eb01 0402 	add.w	r4, r1, r2
 800b210:	d902      	bls.n	800b218 <memmove+0x10>
 800b212:	4284      	cmp	r4, r0
 800b214:	4623      	mov	r3, r4
 800b216:	d807      	bhi.n	800b228 <memmove+0x20>
 800b218:	1e43      	subs	r3, r0, #1
 800b21a:	42a1      	cmp	r1, r4
 800b21c:	d008      	beq.n	800b230 <memmove+0x28>
 800b21e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b222:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b226:	e7f8      	b.n	800b21a <memmove+0x12>
 800b228:	4402      	add	r2, r0
 800b22a:	4601      	mov	r1, r0
 800b22c:	428a      	cmp	r2, r1
 800b22e:	d100      	bne.n	800b232 <memmove+0x2a>
 800b230:	bd10      	pop	{r4, pc}
 800b232:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b236:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b23a:	e7f7      	b.n	800b22c <memmove+0x24>

0800b23c <_lseek_r>:
 800b23c:	b538      	push	{r3, r4, r5, lr}
 800b23e:	4d07      	ldr	r5, [pc, #28]	@ (800b25c <_lseek_r+0x20>)
 800b240:	4604      	mov	r4, r0
 800b242:	4608      	mov	r0, r1
 800b244:	4611      	mov	r1, r2
 800b246:	2200      	movs	r2, #0
 800b248:	602a      	str	r2, [r5, #0]
 800b24a:	461a      	mov	r2, r3
 800b24c:	f7f7 fc5d 	bl	8002b0a <_lseek>
 800b250:	1c43      	adds	r3, r0, #1
 800b252:	d102      	bne.n	800b25a <_lseek_r+0x1e>
 800b254:	682b      	ldr	r3, [r5, #0]
 800b256:	b103      	cbz	r3, 800b25a <_lseek_r+0x1e>
 800b258:	6023      	str	r3, [r4, #0]
 800b25a:	bd38      	pop	{r3, r4, r5, pc}
 800b25c:	20000778 	.word	0x20000778

0800b260 <_read_r>:
 800b260:	b538      	push	{r3, r4, r5, lr}
 800b262:	4d07      	ldr	r5, [pc, #28]	@ (800b280 <_read_r+0x20>)
 800b264:	4604      	mov	r4, r0
 800b266:	4608      	mov	r0, r1
 800b268:	4611      	mov	r1, r2
 800b26a:	2200      	movs	r2, #0
 800b26c:	602a      	str	r2, [r5, #0]
 800b26e:	461a      	mov	r2, r3
 800b270:	f7f7 fc07 	bl	8002a82 <_read>
 800b274:	1c43      	adds	r3, r0, #1
 800b276:	d102      	bne.n	800b27e <_read_r+0x1e>
 800b278:	682b      	ldr	r3, [r5, #0]
 800b27a:	b103      	cbz	r3, 800b27e <_read_r+0x1e>
 800b27c:	6023      	str	r3, [r4, #0]
 800b27e:	bd38      	pop	{r3, r4, r5, pc}
 800b280:	20000778 	.word	0x20000778

0800b284 <_sbrk_r>:
 800b284:	b538      	push	{r3, r4, r5, lr}
 800b286:	4d06      	ldr	r5, [pc, #24]	@ (800b2a0 <_sbrk_r+0x1c>)
 800b288:	2300      	movs	r3, #0
 800b28a:	4604      	mov	r4, r0
 800b28c:	4608      	mov	r0, r1
 800b28e:	602b      	str	r3, [r5, #0]
 800b290:	f7f7 fc48 	bl	8002b24 <_sbrk>
 800b294:	1c43      	adds	r3, r0, #1
 800b296:	d102      	bne.n	800b29e <_sbrk_r+0x1a>
 800b298:	682b      	ldr	r3, [r5, #0]
 800b29a:	b103      	cbz	r3, 800b29e <_sbrk_r+0x1a>
 800b29c:	6023      	str	r3, [r4, #0]
 800b29e:	bd38      	pop	{r3, r4, r5, pc}
 800b2a0:	20000778 	.word	0x20000778

0800b2a4 <_write_r>:
 800b2a4:	b538      	push	{r3, r4, r5, lr}
 800b2a6:	4d07      	ldr	r5, [pc, #28]	@ (800b2c4 <_write_r+0x20>)
 800b2a8:	4604      	mov	r4, r0
 800b2aa:	4608      	mov	r0, r1
 800b2ac:	4611      	mov	r1, r2
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	602a      	str	r2, [r5, #0]
 800b2b2:	461a      	mov	r2, r3
 800b2b4:	f7f7 f80e 	bl	80022d4 <_write>
 800b2b8:	1c43      	adds	r3, r0, #1
 800b2ba:	d102      	bne.n	800b2c2 <_write_r+0x1e>
 800b2bc:	682b      	ldr	r3, [r5, #0]
 800b2be:	b103      	cbz	r3, 800b2c2 <_write_r+0x1e>
 800b2c0:	6023      	str	r3, [r4, #0]
 800b2c2:	bd38      	pop	{r3, r4, r5, pc}
 800b2c4:	20000778 	.word	0x20000778

0800b2c8 <_close_r>:
 800b2c8:	b538      	push	{r3, r4, r5, lr}
 800b2ca:	4d06      	ldr	r5, [pc, #24]	@ (800b2e4 <_close_r+0x1c>)
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	4604      	mov	r4, r0
 800b2d0:	4608      	mov	r0, r1
 800b2d2:	602b      	str	r3, [r5, #0]
 800b2d4:	f7f7 fbf2 	bl	8002abc <_close>
 800b2d8:	1c43      	adds	r3, r0, #1
 800b2da:	d102      	bne.n	800b2e2 <_close_r+0x1a>
 800b2dc:	682b      	ldr	r3, [r5, #0]
 800b2de:	b103      	cbz	r3, 800b2e2 <_close_r+0x1a>
 800b2e0:	6023      	str	r3, [r4, #0]
 800b2e2:	bd38      	pop	{r3, r4, r5, pc}
 800b2e4:	20000778 	.word	0x20000778

0800b2e8 <__assert_func>:
 800b2e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b2ea:	4614      	mov	r4, r2
 800b2ec:	461a      	mov	r2, r3
 800b2ee:	4b09      	ldr	r3, [pc, #36]	@ (800b314 <__assert_func+0x2c>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	4605      	mov	r5, r0
 800b2f4:	68d8      	ldr	r0, [r3, #12]
 800b2f6:	b14c      	cbz	r4, 800b30c <__assert_func+0x24>
 800b2f8:	4b07      	ldr	r3, [pc, #28]	@ (800b318 <__assert_func+0x30>)
 800b2fa:	9100      	str	r1, [sp, #0]
 800b2fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b300:	4906      	ldr	r1, [pc, #24]	@ (800b31c <__assert_func+0x34>)
 800b302:	462b      	mov	r3, r5
 800b304:	f000 f874 	bl	800b3f0 <fiprintf>
 800b308:	f000 f884 	bl	800b414 <abort>
 800b30c:	4b04      	ldr	r3, [pc, #16]	@ (800b320 <__assert_func+0x38>)
 800b30e:	461c      	mov	r4, r3
 800b310:	e7f3      	b.n	800b2fa <__assert_func+0x12>
 800b312:	bf00      	nop
 800b314:	20000188 	.word	0x20000188
 800b318:	0800bee6 	.word	0x0800bee6
 800b31c:	0800bef3 	.word	0x0800bef3
 800b320:	0800bf21 	.word	0x0800bf21

0800b324 <_calloc_r>:
 800b324:	b570      	push	{r4, r5, r6, lr}
 800b326:	fba1 5402 	umull	r5, r4, r1, r2
 800b32a:	b934      	cbnz	r4, 800b33a <_calloc_r+0x16>
 800b32c:	4629      	mov	r1, r5
 800b32e:	f7ff f8f9 	bl	800a524 <_malloc_r>
 800b332:	4606      	mov	r6, r0
 800b334:	b928      	cbnz	r0, 800b342 <_calloc_r+0x1e>
 800b336:	4630      	mov	r0, r6
 800b338:	bd70      	pop	{r4, r5, r6, pc}
 800b33a:	220c      	movs	r2, #12
 800b33c:	6002      	str	r2, [r0, #0]
 800b33e:	2600      	movs	r6, #0
 800b340:	e7f9      	b.n	800b336 <_calloc_r+0x12>
 800b342:	462a      	mov	r2, r5
 800b344:	4621      	mov	r1, r4
 800b346:	f7fd fd6f 	bl	8008e28 <memset>
 800b34a:	e7f4      	b.n	800b336 <_calloc_r+0x12>

0800b34c <_free_r>:
 800b34c:	b538      	push	{r3, r4, r5, lr}
 800b34e:	4605      	mov	r5, r0
 800b350:	2900      	cmp	r1, #0
 800b352:	d041      	beq.n	800b3d8 <_free_r+0x8c>
 800b354:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b358:	1f0c      	subs	r4, r1, #4
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	bfb8      	it	lt
 800b35e:	18e4      	addlt	r4, r4, r3
 800b360:	f7ff fa1e 	bl	800a7a0 <__malloc_lock>
 800b364:	4a1d      	ldr	r2, [pc, #116]	@ (800b3dc <_free_r+0x90>)
 800b366:	6813      	ldr	r3, [r2, #0]
 800b368:	b933      	cbnz	r3, 800b378 <_free_r+0x2c>
 800b36a:	6063      	str	r3, [r4, #4]
 800b36c:	6014      	str	r4, [r2, #0]
 800b36e:	4628      	mov	r0, r5
 800b370:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b374:	f7ff ba1a 	b.w	800a7ac <__malloc_unlock>
 800b378:	42a3      	cmp	r3, r4
 800b37a:	d908      	bls.n	800b38e <_free_r+0x42>
 800b37c:	6820      	ldr	r0, [r4, #0]
 800b37e:	1821      	adds	r1, r4, r0
 800b380:	428b      	cmp	r3, r1
 800b382:	bf01      	itttt	eq
 800b384:	6819      	ldreq	r1, [r3, #0]
 800b386:	685b      	ldreq	r3, [r3, #4]
 800b388:	1809      	addeq	r1, r1, r0
 800b38a:	6021      	streq	r1, [r4, #0]
 800b38c:	e7ed      	b.n	800b36a <_free_r+0x1e>
 800b38e:	461a      	mov	r2, r3
 800b390:	685b      	ldr	r3, [r3, #4]
 800b392:	b10b      	cbz	r3, 800b398 <_free_r+0x4c>
 800b394:	42a3      	cmp	r3, r4
 800b396:	d9fa      	bls.n	800b38e <_free_r+0x42>
 800b398:	6811      	ldr	r1, [r2, #0]
 800b39a:	1850      	adds	r0, r2, r1
 800b39c:	42a0      	cmp	r0, r4
 800b39e:	d10b      	bne.n	800b3b8 <_free_r+0x6c>
 800b3a0:	6820      	ldr	r0, [r4, #0]
 800b3a2:	4401      	add	r1, r0
 800b3a4:	1850      	adds	r0, r2, r1
 800b3a6:	4283      	cmp	r3, r0
 800b3a8:	6011      	str	r1, [r2, #0]
 800b3aa:	d1e0      	bne.n	800b36e <_free_r+0x22>
 800b3ac:	6818      	ldr	r0, [r3, #0]
 800b3ae:	685b      	ldr	r3, [r3, #4]
 800b3b0:	6053      	str	r3, [r2, #4]
 800b3b2:	4408      	add	r0, r1
 800b3b4:	6010      	str	r0, [r2, #0]
 800b3b6:	e7da      	b.n	800b36e <_free_r+0x22>
 800b3b8:	d902      	bls.n	800b3c0 <_free_r+0x74>
 800b3ba:	230c      	movs	r3, #12
 800b3bc:	602b      	str	r3, [r5, #0]
 800b3be:	e7d6      	b.n	800b36e <_free_r+0x22>
 800b3c0:	6820      	ldr	r0, [r4, #0]
 800b3c2:	1821      	adds	r1, r4, r0
 800b3c4:	428b      	cmp	r3, r1
 800b3c6:	bf04      	itt	eq
 800b3c8:	6819      	ldreq	r1, [r3, #0]
 800b3ca:	685b      	ldreq	r3, [r3, #4]
 800b3cc:	6063      	str	r3, [r4, #4]
 800b3ce:	bf04      	itt	eq
 800b3d0:	1809      	addeq	r1, r1, r0
 800b3d2:	6021      	streq	r1, [r4, #0]
 800b3d4:	6054      	str	r4, [r2, #4]
 800b3d6:	e7ca      	b.n	800b36e <_free_r+0x22>
 800b3d8:	bd38      	pop	{r3, r4, r5, pc}
 800b3da:	bf00      	nop
 800b3dc:	20000774 	.word	0x20000774

0800b3e0 <_malloc_usable_size_r>:
 800b3e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3e4:	1f18      	subs	r0, r3, #4
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	bfbc      	itt	lt
 800b3ea:	580b      	ldrlt	r3, [r1, r0]
 800b3ec:	18c0      	addlt	r0, r0, r3
 800b3ee:	4770      	bx	lr

0800b3f0 <fiprintf>:
 800b3f0:	b40e      	push	{r1, r2, r3}
 800b3f2:	b503      	push	{r0, r1, lr}
 800b3f4:	4601      	mov	r1, r0
 800b3f6:	ab03      	add	r3, sp, #12
 800b3f8:	4805      	ldr	r0, [pc, #20]	@ (800b410 <fiprintf+0x20>)
 800b3fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3fe:	6800      	ldr	r0, [r0, #0]
 800b400:	9301      	str	r3, [sp, #4]
 800b402:	f000 f837 	bl	800b474 <_vfiprintf_r>
 800b406:	b002      	add	sp, #8
 800b408:	f85d eb04 	ldr.w	lr, [sp], #4
 800b40c:	b003      	add	sp, #12
 800b40e:	4770      	bx	lr
 800b410:	20000188 	.word	0x20000188

0800b414 <abort>:
 800b414:	b508      	push	{r3, lr}
 800b416:	2006      	movs	r0, #6
 800b418:	f000 fa62 	bl	800b8e0 <raise>
 800b41c:	2001      	movs	r0, #1
 800b41e:	f7f7 fb25 	bl	8002a6c <_exit>

0800b422 <__sfputc_r>:
 800b422:	6893      	ldr	r3, [r2, #8]
 800b424:	3b01      	subs	r3, #1
 800b426:	2b00      	cmp	r3, #0
 800b428:	b410      	push	{r4}
 800b42a:	6093      	str	r3, [r2, #8]
 800b42c:	da08      	bge.n	800b440 <__sfputc_r+0x1e>
 800b42e:	6994      	ldr	r4, [r2, #24]
 800b430:	42a3      	cmp	r3, r4
 800b432:	db01      	blt.n	800b438 <__sfputc_r+0x16>
 800b434:	290a      	cmp	r1, #10
 800b436:	d103      	bne.n	800b440 <__sfputc_r+0x1e>
 800b438:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b43c:	f000 b932 	b.w	800b6a4 <__swbuf_r>
 800b440:	6813      	ldr	r3, [r2, #0]
 800b442:	1c58      	adds	r0, r3, #1
 800b444:	6010      	str	r0, [r2, #0]
 800b446:	7019      	strb	r1, [r3, #0]
 800b448:	4608      	mov	r0, r1
 800b44a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b44e:	4770      	bx	lr

0800b450 <__sfputs_r>:
 800b450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b452:	4606      	mov	r6, r0
 800b454:	460f      	mov	r7, r1
 800b456:	4614      	mov	r4, r2
 800b458:	18d5      	adds	r5, r2, r3
 800b45a:	42ac      	cmp	r4, r5
 800b45c:	d101      	bne.n	800b462 <__sfputs_r+0x12>
 800b45e:	2000      	movs	r0, #0
 800b460:	e007      	b.n	800b472 <__sfputs_r+0x22>
 800b462:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b466:	463a      	mov	r2, r7
 800b468:	4630      	mov	r0, r6
 800b46a:	f7ff ffda 	bl	800b422 <__sfputc_r>
 800b46e:	1c43      	adds	r3, r0, #1
 800b470:	d1f3      	bne.n	800b45a <__sfputs_r+0xa>
 800b472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b474 <_vfiprintf_r>:
 800b474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b478:	460d      	mov	r5, r1
 800b47a:	b09d      	sub	sp, #116	@ 0x74
 800b47c:	4614      	mov	r4, r2
 800b47e:	4698      	mov	r8, r3
 800b480:	4606      	mov	r6, r0
 800b482:	b118      	cbz	r0, 800b48c <_vfiprintf_r+0x18>
 800b484:	6a03      	ldr	r3, [r0, #32]
 800b486:	b90b      	cbnz	r3, 800b48c <_vfiprintf_r+0x18>
 800b488:	f7fc fe12 	bl	80080b0 <__sinit>
 800b48c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b48e:	07d9      	lsls	r1, r3, #31
 800b490:	d405      	bmi.n	800b49e <_vfiprintf_r+0x2a>
 800b492:	89ab      	ldrh	r3, [r5, #12]
 800b494:	059a      	lsls	r2, r3, #22
 800b496:	d402      	bmi.n	800b49e <_vfiprintf_r+0x2a>
 800b498:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b49a:	f7fd fd0a 	bl	8008eb2 <__retarget_lock_acquire_recursive>
 800b49e:	89ab      	ldrh	r3, [r5, #12]
 800b4a0:	071b      	lsls	r3, r3, #28
 800b4a2:	d501      	bpl.n	800b4a8 <_vfiprintf_r+0x34>
 800b4a4:	692b      	ldr	r3, [r5, #16]
 800b4a6:	b99b      	cbnz	r3, 800b4d0 <_vfiprintf_r+0x5c>
 800b4a8:	4629      	mov	r1, r5
 800b4aa:	4630      	mov	r0, r6
 800b4ac:	f000 f938 	bl	800b720 <__swsetup_r>
 800b4b0:	b170      	cbz	r0, 800b4d0 <_vfiprintf_r+0x5c>
 800b4b2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b4b4:	07dc      	lsls	r4, r3, #31
 800b4b6:	d504      	bpl.n	800b4c2 <_vfiprintf_r+0x4e>
 800b4b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b4bc:	b01d      	add	sp, #116	@ 0x74
 800b4be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4c2:	89ab      	ldrh	r3, [r5, #12]
 800b4c4:	0598      	lsls	r0, r3, #22
 800b4c6:	d4f7      	bmi.n	800b4b8 <_vfiprintf_r+0x44>
 800b4c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b4ca:	f7fd fcf3 	bl	8008eb4 <__retarget_lock_release_recursive>
 800b4ce:	e7f3      	b.n	800b4b8 <_vfiprintf_r+0x44>
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b4d4:	2320      	movs	r3, #32
 800b4d6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b4da:	f8cd 800c 	str.w	r8, [sp, #12]
 800b4de:	2330      	movs	r3, #48	@ 0x30
 800b4e0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b690 <_vfiprintf_r+0x21c>
 800b4e4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b4e8:	f04f 0901 	mov.w	r9, #1
 800b4ec:	4623      	mov	r3, r4
 800b4ee:	469a      	mov	sl, r3
 800b4f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b4f4:	b10a      	cbz	r2, 800b4fa <_vfiprintf_r+0x86>
 800b4f6:	2a25      	cmp	r2, #37	@ 0x25
 800b4f8:	d1f9      	bne.n	800b4ee <_vfiprintf_r+0x7a>
 800b4fa:	ebba 0b04 	subs.w	fp, sl, r4
 800b4fe:	d00b      	beq.n	800b518 <_vfiprintf_r+0xa4>
 800b500:	465b      	mov	r3, fp
 800b502:	4622      	mov	r2, r4
 800b504:	4629      	mov	r1, r5
 800b506:	4630      	mov	r0, r6
 800b508:	f7ff ffa2 	bl	800b450 <__sfputs_r>
 800b50c:	3001      	adds	r0, #1
 800b50e:	f000 80a7 	beq.w	800b660 <_vfiprintf_r+0x1ec>
 800b512:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b514:	445a      	add	r2, fp
 800b516:	9209      	str	r2, [sp, #36]	@ 0x24
 800b518:	f89a 3000 	ldrb.w	r3, [sl]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	f000 809f 	beq.w	800b660 <_vfiprintf_r+0x1ec>
 800b522:	2300      	movs	r3, #0
 800b524:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b528:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b52c:	f10a 0a01 	add.w	sl, sl, #1
 800b530:	9304      	str	r3, [sp, #16]
 800b532:	9307      	str	r3, [sp, #28]
 800b534:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b538:	931a      	str	r3, [sp, #104]	@ 0x68
 800b53a:	4654      	mov	r4, sl
 800b53c:	2205      	movs	r2, #5
 800b53e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b542:	4853      	ldr	r0, [pc, #332]	@ (800b690 <_vfiprintf_r+0x21c>)
 800b544:	f7f4 fe44 	bl	80001d0 <memchr>
 800b548:	9a04      	ldr	r2, [sp, #16]
 800b54a:	b9d8      	cbnz	r0, 800b584 <_vfiprintf_r+0x110>
 800b54c:	06d1      	lsls	r1, r2, #27
 800b54e:	bf44      	itt	mi
 800b550:	2320      	movmi	r3, #32
 800b552:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b556:	0713      	lsls	r3, r2, #28
 800b558:	bf44      	itt	mi
 800b55a:	232b      	movmi	r3, #43	@ 0x2b
 800b55c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b560:	f89a 3000 	ldrb.w	r3, [sl]
 800b564:	2b2a      	cmp	r3, #42	@ 0x2a
 800b566:	d015      	beq.n	800b594 <_vfiprintf_r+0x120>
 800b568:	9a07      	ldr	r2, [sp, #28]
 800b56a:	4654      	mov	r4, sl
 800b56c:	2000      	movs	r0, #0
 800b56e:	f04f 0c0a 	mov.w	ip, #10
 800b572:	4621      	mov	r1, r4
 800b574:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b578:	3b30      	subs	r3, #48	@ 0x30
 800b57a:	2b09      	cmp	r3, #9
 800b57c:	d94b      	bls.n	800b616 <_vfiprintf_r+0x1a2>
 800b57e:	b1b0      	cbz	r0, 800b5ae <_vfiprintf_r+0x13a>
 800b580:	9207      	str	r2, [sp, #28]
 800b582:	e014      	b.n	800b5ae <_vfiprintf_r+0x13a>
 800b584:	eba0 0308 	sub.w	r3, r0, r8
 800b588:	fa09 f303 	lsl.w	r3, r9, r3
 800b58c:	4313      	orrs	r3, r2
 800b58e:	9304      	str	r3, [sp, #16]
 800b590:	46a2      	mov	sl, r4
 800b592:	e7d2      	b.n	800b53a <_vfiprintf_r+0xc6>
 800b594:	9b03      	ldr	r3, [sp, #12]
 800b596:	1d19      	adds	r1, r3, #4
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	9103      	str	r1, [sp, #12]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	bfbb      	ittet	lt
 800b5a0:	425b      	neglt	r3, r3
 800b5a2:	f042 0202 	orrlt.w	r2, r2, #2
 800b5a6:	9307      	strge	r3, [sp, #28]
 800b5a8:	9307      	strlt	r3, [sp, #28]
 800b5aa:	bfb8      	it	lt
 800b5ac:	9204      	strlt	r2, [sp, #16]
 800b5ae:	7823      	ldrb	r3, [r4, #0]
 800b5b0:	2b2e      	cmp	r3, #46	@ 0x2e
 800b5b2:	d10a      	bne.n	800b5ca <_vfiprintf_r+0x156>
 800b5b4:	7863      	ldrb	r3, [r4, #1]
 800b5b6:	2b2a      	cmp	r3, #42	@ 0x2a
 800b5b8:	d132      	bne.n	800b620 <_vfiprintf_r+0x1ac>
 800b5ba:	9b03      	ldr	r3, [sp, #12]
 800b5bc:	1d1a      	adds	r2, r3, #4
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	9203      	str	r2, [sp, #12]
 800b5c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b5c6:	3402      	adds	r4, #2
 800b5c8:	9305      	str	r3, [sp, #20]
 800b5ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b6a0 <_vfiprintf_r+0x22c>
 800b5ce:	7821      	ldrb	r1, [r4, #0]
 800b5d0:	2203      	movs	r2, #3
 800b5d2:	4650      	mov	r0, sl
 800b5d4:	f7f4 fdfc 	bl	80001d0 <memchr>
 800b5d8:	b138      	cbz	r0, 800b5ea <_vfiprintf_r+0x176>
 800b5da:	9b04      	ldr	r3, [sp, #16]
 800b5dc:	eba0 000a 	sub.w	r0, r0, sl
 800b5e0:	2240      	movs	r2, #64	@ 0x40
 800b5e2:	4082      	lsls	r2, r0
 800b5e4:	4313      	orrs	r3, r2
 800b5e6:	3401      	adds	r4, #1
 800b5e8:	9304      	str	r3, [sp, #16]
 800b5ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5ee:	4829      	ldr	r0, [pc, #164]	@ (800b694 <_vfiprintf_r+0x220>)
 800b5f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b5f4:	2206      	movs	r2, #6
 800b5f6:	f7f4 fdeb 	bl	80001d0 <memchr>
 800b5fa:	2800      	cmp	r0, #0
 800b5fc:	d03f      	beq.n	800b67e <_vfiprintf_r+0x20a>
 800b5fe:	4b26      	ldr	r3, [pc, #152]	@ (800b698 <_vfiprintf_r+0x224>)
 800b600:	bb1b      	cbnz	r3, 800b64a <_vfiprintf_r+0x1d6>
 800b602:	9b03      	ldr	r3, [sp, #12]
 800b604:	3307      	adds	r3, #7
 800b606:	f023 0307 	bic.w	r3, r3, #7
 800b60a:	3308      	adds	r3, #8
 800b60c:	9303      	str	r3, [sp, #12]
 800b60e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b610:	443b      	add	r3, r7
 800b612:	9309      	str	r3, [sp, #36]	@ 0x24
 800b614:	e76a      	b.n	800b4ec <_vfiprintf_r+0x78>
 800b616:	fb0c 3202 	mla	r2, ip, r2, r3
 800b61a:	460c      	mov	r4, r1
 800b61c:	2001      	movs	r0, #1
 800b61e:	e7a8      	b.n	800b572 <_vfiprintf_r+0xfe>
 800b620:	2300      	movs	r3, #0
 800b622:	3401      	adds	r4, #1
 800b624:	9305      	str	r3, [sp, #20]
 800b626:	4619      	mov	r1, r3
 800b628:	f04f 0c0a 	mov.w	ip, #10
 800b62c:	4620      	mov	r0, r4
 800b62e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b632:	3a30      	subs	r2, #48	@ 0x30
 800b634:	2a09      	cmp	r2, #9
 800b636:	d903      	bls.n	800b640 <_vfiprintf_r+0x1cc>
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d0c6      	beq.n	800b5ca <_vfiprintf_r+0x156>
 800b63c:	9105      	str	r1, [sp, #20]
 800b63e:	e7c4      	b.n	800b5ca <_vfiprintf_r+0x156>
 800b640:	fb0c 2101 	mla	r1, ip, r1, r2
 800b644:	4604      	mov	r4, r0
 800b646:	2301      	movs	r3, #1
 800b648:	e7f0      	b.n	800b62c <_vfiprintf_r+0x1b8>
 800b64a:	ab03      	add	r3, sp, #12
 800b64c:	9300      	str	r3, [sp, #0]
 800b64e:	462a      	mov	r2, r5
 800b650:	4b12      	ldr	r3, [pc, #72]	@ (800b69c <_vfiprintf_r+0x228>)
 800b652:	a904      	add	r1, sp, #16
 800b654:	4630      	mov	r0, r6
 800b656:	f7fb feb9 	bl	80073cc <_printf_float>
 800b65a:	4607      	mov	r7, r0
 800b65c:	1c78      	adds	r0, r7, #1
 800b65e:	d1d6      	bne.n	800b60e <_vfiprintf_r+0x19a>
 800b660:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b662:	07d9      	lsls	r1, r3, #31
 800b664:	d405      	bmi.n	800b672 <_vfiprintf_r+0x1fe>
 800b666:	89ab      	ldrh	r3, [r5, #12]
 800b668:	059a      	lsls	r2, r3, #22
 800b66a:	d402      	bmi.n	800b672 <_vfiprintf_r+0x1fe>
 800b66c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b66e:	f7fd fc21 	bl	8008eb4 <__retarget_lock_release_recursive>
 800b672:	89ab      	ldrh	r3, [r5, #12]
 800b674:	065b      	lsls	r3, r3, #25
 800b676:	f53f af1f 	bmi.w	800b4b8 <_vfiprintf_r+0x44>
 800b67a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b67c:	e71e      	b.n	800b4bc <_vfiprintf_r+0x48>
 800b67e:	ab03      	add	r3, sp, #12
 800b680:	9300      	str	r3, [sp, #0]
 800b682:	462a      	mov	r2, r5
 800b684:	4b05      	ldr	r3, [pc, #20]	@ (800b69c <_vfiprintf_r+0x228>)
 800b686:	a904      	add	r1, sp, #16
 800b688:	4630      	mov	r0, r6
 800b68a:	f7fc f937 	bl	80078fc <_printf_i>
 800b68e:	e7e4      	b.n	800b65a <_vfiprintf_r+0x1e6>
 800b690:	0800be7c 	.word	0x0800be7c
 800b694:	0800be86 	.word	0x0800be86
 800b698:	080073cd 	.word	0x080073cd
 800b69c:	0800b451 	.word	0x0800b451
 800b6a0:	0800be82 	.word	0x0800be82

0800b6a4 <__swbuf_r>:
 800b6a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6a6:	460e      	mov	r6, r1
 800b6a8:	4614      	mov	r4, r2
 800b6aa:	4605      	mov	r5, r0
 800b6ac:	b118      	cbz	r0, 800b6b6 <__swbuf_r+0x12>
 800b6ae:	6a03      	ldr	r3, [r0, #32]
 800b6b0:	b90b      	cbnz	r3, 800b6b6 <__swbuf_r+0x12>
 800b6b2:	f7fc fcfd 	bl	80080b0 <__sinit>
 800b6b6:	69a3      	ldr	r3, [r4, #24]
 800b6b8:	60a3      	str	r3, [r4, #8]
 800b6ba:	89a3      	ldrh	r3, [r4, #12]
 800b6bc:	071a      	lsls	r2, r3, #28
 800b6be:	d501      	bpl.n	800b6c4 <__swbuf_r+0x20>
 800b6c0:	6923      	ldr	r3, [r4, #16]
 800b6c2:	b943      	cbnz	r3, 800b6d6 <__swbuf_r+0x32>
 800b6c4:	4621      	mov	r1, r4
 800b6c6:	4628      	mov	r0, r5
 800b6c8:	f000 f82a 	bl	800b720 <__swsetup_r>
 800b6cc:	b118      	cbz	r0, 800b6d6 <__swbuf_r+0x32>
 800b6ce:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800b6d2:	4638      	mov	r0, r7
 800b6d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6d6:	6823      	ldr	r3, [r4, #0]
 800b6d8:	6922      	ldr	r2, [r4, #16]
 800b6da:	1a98      	subs	r0, r3, r2
 800b6dc:	6963      	ldr	r3, [r4, #20]
 800b6de:	b2f6      	uxtb	r6, r6
 800b6e0:	4283      	cmp	r3, r0
 800b6e2:	4637      	mov	r7, r6
 800b6e4:	dc05      	bgt.n	800b6f2 <__swbuf_r+0x4e>
 800b6e6:	4621      	mov	r1, r4
 800b6e8:	4628      	mov	r0, r5
 800b6ea:	f7ff f831 	bl	800a750 <_fflush_r>
 800b6ee:	2800      	cmp	r0, #0
 800b6f0:	d1ed      	bne.n	800b6ce <__swbuf_r+0x2a>
 800b6f2:	68a3      	ldr	r3, [r4, #8]
 800b6f4:	3b01      	subs	r3, #1
 800b6f6:	60a3      	str	r3, [r4, #8]
 800b6f8:	6823      	ldr	r3, [r4, #0]
 800b6fa:	1c5a      	adds	r2, r3, #1
 800b6fc:	6022      	str	r2, [r4, #0]
 800b6fe:	701e      	strb	r6, [r3, #0]
 800b700:	6962      	ldr	r2, [r4, #20]
 800b702:	1c43      	adds	r3, r0, #1
 800b704:	429a      	cmp	r2, r3
 800b706:	d004      	beq.n	800b712 <__swbuf_r+0x6e>
 800b708:	89a3      	ldrh	r3, [r4, #12]
 800b70a:	07db      	lsls	r3, r3, #31
 800b70c:	d5e1      	bpl.n	800b6d2 <__swbuf_r+0x2e>
 800b70e:	2e0a      	cmp	r6, #10
 800b710:	d1df      	bne.n	800b6d2 <__swbuf_r+0x2e>
 800b712:	4621      	mov	r1, r4
 800b714:	4628      	mov	r0, r5
 800b716:	f7ff f81b 	bl	800a750 <_fflush_r>
 800b71a:	2800      	cmp	r0, #0
 800b71c:	d0d9      	beq.n	800b6d2 <__swbuf_r+0x2e>
 800b71e:	e7d6      	b.n	800b6ce <__swbuf_r+0x2a>

0800b720 <__swsetup_r>:
 800b720:	b538      	push	{r3, r4, r5, lr}
 800b722:	4b29      	ldr	r3, [pc, #164]	@ (800b7c8 <__swsetup_r+0xa8>)
 800b724:	4605      	mov	r5, r0
 800b726:	6818      	ldr	r0, [r3, #0]
 800b728:	460c      	mov	r4, r1
 800b72a:	b118      	cbz	r0, 800b734 <__swsetup_r+0x14>
 800b72c:	6a03      	ldr	r3, [r0, #32]
 800b72e:	b90b      	cbnz	r3, 800b734 <__swsetup_r+0x14>
 800b730:	f7fc fcbe 	bl	80080b0 <__sinit>
 800b734:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b738:	0719      	lsls	r1, r3, #28
 800b73a:	d422      	bmi.n	800b782 <__swsetup_r+0x62>
 800b73c:	06da      	lsls	r2, r3, #27
 800b73e:	d407      	bmi.n	800b750 <__swsetup_r+0x30>
 800b740:	2209      	movs	r2, #9
 800b742:	602a      	str	r2, [r5, #0]
 800b744:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b748:	81a3      	strh	r3, [r4, #12]
 800b74a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b74e:	e033      	b.n	800b7b8 <__swsetup_r+0x98>
 800b750:	0758      	lsls	r0, r3, #29
 800b752:	d512      	bpl.n	800b77a <__swsetup_r+0x5a>
 800b754:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b756:	b141      	cbz	r1, 800b76a <__swsetup_r+0x4a>
 800b758:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b75c:	4299      	cmp	r1, r3
 800b75e:	d002      	beq.n	800b766 <__swsetup_r+0x46>
 800b760:	4628      	mov	r0, r5
 800b762:	f7ff fdf3 	bl	800b34c <_free_r>
 800b766:	2300      	movs	r3, #0
 800b768:	6363      	str	r3, [r4, #52]	@ 0x34
 800b76a:	89a3      	ldrh	r3, [r4, #12]
 800b76c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b770:	81a3      	strh	r3, [r4, #12]
 800b772:	2300      	movs	r3, #0
 800b774:	6063      	str	r3, [r4, #4]
 800b776:	6923      	ldr	r3, [r4, #16]
 800b778:	6023      	str	r3, [r4, #0]
 800b77a:	89a3      	ldrh	r3, [r4, #12]
 800b77c:	f043 0308 	orr.w	r3, r3, #8
 800b780:	81a3      	strh	r3, [r4, #12]
 800b782:	6923      	ldr	r3, [r4, #16]
 800b784:	b94b      	cbnz	r3, 800b79a <__swsetup_r+0x7a>
 800b786:	89a3      	ldrh	r3, [r4, #12]
 800b788:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b78c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b790:	d003      	beq.n	800b79a <__swsetup_r+0x7a>
 800b792:	4621      	mov	r1, r4
 800b794:	4628      	mov	r0, r5
 800b796:	f000 f83f 	bl	800b818 <__smakebuf_r>
 800b79a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b79e:	f013 0201 	ands.w	r2, r3, #1
 800b7a2:	d00a      	beq.n	800b7ba <__swsetup_r+0x9a>
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	60a2      	str	r2, [r4, #8]
 800b7a8:	6962      	ldr	r2, [r4, #20]
 800b7aa:	4252      	negs	r2, r2
 800b7ac:	61a2      	str	r2, [r4, #24]
 800b7ae:	6922      	ldr	r2, [r4, #16]
 800b7b0:	b942      	cbnz	r2, 800b7c4 <__swsetup_r+0xa4>
 800b7b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b7b6:	d1c5      	bne.n	800b744 <__swsetup_r+0x24>
 800b7b8:	bd38      	pop	{r3, r4, r5, pc}
 800b7ba:	0799      	lsls	r1, r3, #30
 800b7bc:	bf58      	it	pl
 800b7be:	6962      	ldrpl	r2, [r4, #20]
 800b7c0:	60a2      	str	r2, [r4, #8]
 800b7c2:	e7f4      	b.n	800b7ae <__swsetup_r+0x8e>
 800b7c4:	2000      	movs	r0, #0
 800b7c6:	e7f7      	b.n	800b7b8 <__swsetup_r+0x98>
 800b7c8:	20000188 	.word	0x20000188

0800b7cc <__swhatbuf_r>:
 800b7cc:	b570      	push	{r4, r5, r6, lr}
 800b7ce:	460c      	mov	r4, r1
 800b7d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7d4:	2900      	cmp	r1, #0
 800b7d6:	b096      	sub	sp, #88	@ 0x58
 800b7d8:	4615      	mov	r5, r2
 800b7da:	461e      	mov	r6, r3
 800b7dc:	da0d      	bge.n	800b7fa <__swhatbuf_r+0x2e>
 800b7de:	89a3      	ldrh	r3, [r4, #12]
 800b7e0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b7e4:	f04f 0100 	mov.w	r1, #0
 800b7e8:	bf14      	ite	ne
 800b7ea:	2340      	movne	r3, #64	@ 0x40
 800b7ec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b7f0:	2000      	movs	r0, #0
 800b7f2:	6031      	str	r1, [r6, #0]
 800b7f4:	602b      	str	r3, [r5, #0]
 800b7f6:	b016      	add	sp, #88	@ 0x58
 800b7f8:	bd70      	pop	{r4, r5, r6, pc}
 800b7fa:	466a      	mov	r2, sp
 800b7fc:	f000 f89c 	bl	800b938 <_fstat_r>
 800b800:	2800      	cmp	r0, #0
 800b802:	dbec      	blt.n	800b7de <__swhatbuf_r+0x12>
 800b804:	9901      	ldr	r1, [sp, #4]
 800b806:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b80a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b80e:	4259      	negs	r1, r3
 800b810:	4159      	adcs	r1, r3
 800b812:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b816:	e7eb      	b.n	800b7f0 <__swhatbuf_r+0x24>

0800b818 <__smakebuf_r>:
 800b818:	898b      	ldrh	r3, [r1, #12]
 800b81a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b81c:	079d      	lsls	r5, r3, #30
 800b81e:	4606      	mov	r6, r0
 800b820:	460c      	mov	r4, r1
 800b822:	d507      	bpl.n	800b834 <__smakebuf_r+0x1c>
 800b824:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b828:	6023      	str	r3, [r4, #0]
 800b82a:	6123      	str	r3, [r4, #16]
 800b82c:	2301      	movs	r3, #1
 800b82e:	6163      	str	r3, [r4, #20]
 800b830:	b003      	add	sp, #12
 800b832:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b834:	ab01      	add	r3, sp, #4
 800b836:	466a      	mov	r2, sp
 800b838:	f7ff ffc8 	bl	800b7cc <__swhatbuf_r>
 800b83c:	9f00      	ldr	r7, [sp, #0]
 800b83e:	4605      	mov	r5, r0
 800b840:	4639      	mov	r1, r7
 800b842:	4630      	mov	r0, r6
 800b844:	f7fe fe6e 	bl	800a524 <_malloc_r>
 800b848:	b948      	cbnz	r0, 800b85e <__smakebuf_r+0x46>
 800b84a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b84e:	059a      	lsls	r2, r3, #22
 800b850:	d4ee      	bmi.n	800b830 <__smakebuf_r+0x18>
 800b852:	f023 0303 	bic.w	r3, r3, #3
 800b856:	f043 0302 	orr.w	r3, r3, #2
 800b85a:	81a3      	strh	r3, [r4, #12]
 800b85c:	e7e2      	b.n	800b824 <__smakebuf_r+0xc>
 800b85e:	89a3      	ldrh	r3, [r4, #12]
 800b860:	6020      	str	r0, [r4, #0]
 800b862:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b866:	81a3      	strh	r3, [r4, #12]
 800b868:	9b01      	ldr	r3, [sp, #4]
 800b86a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b86e:	b15b      	cbz	r3, 800b888 <__smakebuf_r+0x70>
 800b870:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b874:	4630      	mov	r0, r6
 800b876:	f000 f83b 	bl	800b8f0 <_isatty_r>
 800b87a:	b128      	cbz	r0, 800b888 <__smakebuf_r+0x70>
 800b87c:	89a3      	ldrh	r3, [r4, #12]
 800b87e:	f023 0303 	bic.w	r3, r3, #3
 800b882:	f043 0301 	orr.w	r3, r3, #1
 800b886:	81a3      	strh	r3, [r4, #12]
 800b888:	89a3      	ldrh	r3, [r4, #12]
 800b88a:	431d      	orrs	r5, r3
 800b88c:	81a5      	strh	r5, [r4, #12]
 800b88e:	e7cf      	b.n	800b830 <__smakebuf_r+0x18>

0800b890 <_raise_r>:
 800b890:	291f      	cmp	r1, #31
 800b892:	b538      	push	{r3, r4, r5, lr}
 800b894:	4605      	mov	r5, r0
 800b896:	460c      	mov	r4, r1
 800b898:	d904      	bls.n	800b8a4 <_raise_r+0x14>
 800b89a:	2316      	movs	r3, #22
 800b89c:	6003      	str	r3, [r0, #0]
 800b89e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b8a2:	bd38      	pop	{r3, r4, r5, pc}
 800b8a4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b8a6:	b112      	cbz	r2, 800b8ae <_raise_r+0x1e>
 800b8a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b8ac:	b94b      	cbnz	r3, 800b8c2 <_raise_r+0x32>
 800b8ae:	4628      	mov	r0, r5
 800b8b0:	f000 f840 	bl	800b934 <_getpid_r>
 800b8b4:	4622      	mov	r2, r4
 800b8b6:	4601      	mov	r1, r0
 800b8b8:	4628      	mov	r0, r5
 800b8ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b8be:	f000 b827 	b.w	800b910 <_kill_r>
 800b8c2:	2b01      	cmp	r3, #1
 800b8c4:	d00a      	beq.n	800b8dc <_raise_r+0x4c>
 800b8c6:	1c59      	adds	r1, r3, #1
 800b8c8:	d103      	bne.n	800b8d2 <_raise_r+0x42>
 800b8ca:	2316      	movs	r3, #22
 800b8cc:	6003      	str	r3, [r0, #0]
 800b8ce:	2001      	movs	r0, #1
 800b8d0:	e7e7      	b.n	800b8a2 <_raise_r+0x12>
 800b8d2:	2100      	movs	r1, #0
 800b8d4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b8d8:	4620      	mov	r0, r4
 800b8da:	4798      	blx	r3
 800b8dc:	2000      	movs	r0, #0
 800b8de:	e7e0      	b.n	800b8a2 <_raise_r+0x12>

0800b8e0 <raise>:
 800b8e0:	4b02      	ldr	r3, [pc, #8]	@ (800b8ec <raise+0xc>)
 800b8e2:	4601      	mov	r1, r0
 800b8e4:	6818      	ldr	r0, [r3, #0]
 800b8e6:	f7ff bfd3 	b.w	800b890 <_raise_r>
 800b8ea:	bf00      	nop
 800b8ec:	20000188 	.word	0x20000188

0800b8f0 <_isatty_r>:
 800b8f0:	b538      	push	{r3, r4, r5, lr}
 800b8f2:	4d06      	ldr	r5, [pc, #24]	@ (800b90c <_isatty_r+0x1c>)
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	4604      	mov	r4, r0
 800b8f8:	4608      	mov	r0, r1
 800b8fa:	602b      	str	r3, [r5, #0]
 800b8fc:	f7f7 f8fa 	bl	8002af4 <_isatty>
 800b900:	1c43      	adds	r3, r0, #1
 800b902:	d102      	bne.n	800b90a <_isatty_r+0x1a>
 800b904:	682b      	ldr	r3, [r5, #0]
 800b906:	b103      	cbz	r3, 800b90a <_isatty_r+0x1a>
 800b908:	6023      	str	r3, [r4, #0]
 800b90a:	bd38      	pop	{r3, r4, r5, pc}
 800b90c:	20000778 	.word	0x20000778

0800b910 <_kill_r>:
 800b910:	b538      	push	{r3, r4, r5, lr}
 800b912:	4d07      	ldr	r5, [pc, #28]	@ (800b930 <_kill_r+0x20>)
 800b914:	2300      	movs	r3, #0
 800b916:	4604      	mov	r4, r0
 800b918:	4608      	mov	r0, r1
 800b91a:	4611      	mov	r1, r2
 800b91c:	602b      	str	r3, [r5, #0]
 800b91e:	f7f7 f895 	bl	8002a4c <_kill>
 800b922:	1c43      	adds	r3, r0, #1
 800b924:	d102      	bne.n	800b92c <_kill_r+0x1c>
 800b926:	682b      	ldr	r3, [r5, #0]
 800b928:	b103      	cbz	r3, 800b92c <_kill_r+0x1c>
 800b92a:	6023      	str	r3, [r4, #0]
 800b92c:	bd38      	pop	{r3, r4, r5, pc}
 800b92e:	bf00      	nop
 800b930:	20000778 	.word	0x20000778

0800b934 <_getpid_r>:
 800b934:	f7f7 b882 	b.w	8002a3c <_getpid>

0800b938 <_fstat_r>:
 800b938:	b538      	push	{r3, r4, r5, lr}
 800b93a:	4d07      	ldr	r5, [pc, #28]	@ (800b958 <_fstat_r+0x20>)
 800b93c:	2300      	movs	r3, #0
 800b93e:	4604      	mov	r4, r0
 800b940:	4608      	mov	r0, r1
 800b942:	4611      	mov	r1, r2
 800b944:	602b      	str	r3, [r5, #0]
 800b946:	f7f7 f8c5 	bl	8002ad4 <_fstat>
 800b94a:	1c43      	adds	r3, r0, #1
 800b94c:	d102      	bne.n	800b954 <_fstat_r+0x1c>
 800b94e:	682b      	ldr	r3, [r5, #0]
 800b950:	b103      	cbz	r3, 800b954 <_fstat_r+0x1c>
 800b952:	6023      	str	r3, [r4, #0]
 800b954:	bd38      	pop	{r3, r4, r5, pc}
 800b956:	bf00      	nop
 800b958:	20000778 	.word	0x20000778

0800b95c <atan2f>:
 800b95c:	f000 b81e 	b.w	800b99c <__ieee754_atan2f>

0800b960 <sqrtf>:
 800b960:	b508      	push	{r3, lr}
 800b962:	ed2d 8b02 	vpush	{d8}
 800b966:	eeb0 8a40 	vmov.f32	s16, s0
 800b96a:	f000 f8b7 	bl	800badc <__ieee754_sqrtf>
 800b96e:	eeb4 8a48 	vcmp.f32	s16, s16
 800b972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b976:	d60c      	bvs.n	800b992 <sqrtf+0x32>
 800b978:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800b998 <sqrtf+0x38>
 800b97c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800b980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b984:	d505      	bpl.n	800b992 <sqrtf+0x32>
 800b986:	f7fd fa69 	bl	8008e5c <__errno>
 800b98a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800b98e:	2321      	movs	r3, #33	@ 0x21
 800b990:	6003      	str	r3, [r0, #0]
 800b992:	ecbd 8b02 	vpop	{d8}
 800b996:	bd08      	pop	{r3, pc}
 800b998:	00000000 	.word	0x00000000

0800b99c <__ieee754_atan2f>:
 800b99c:	ee10 2a90 	vmov	r2, s1
 800b9a0:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800b9a4:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800b9a8:	b510      	push	{r4, lr}
 800b9aa:	eef0 7a40 	vmov.f32	s15, s0
 800b9ae:	d806      	bhi.n	800b9be <__ieee754_atan2f+0x22>
 800b9b0:	ee10 0a10 	vmov	r0, s0
 800b9b4:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800b9b8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800b9bc:	d904      	bls.n	800b9c8 <__ieee754_atan2f+0x2c>
 800b9be:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800b9c2:	eeb0 0a67 	vmov.f32	s0, s15
 800b9c6:	bd10      	pop	{r4, pc}
 800b9c8:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800b9cc:	d103      	bne.n	800b9d6 <__ieee754_atan2f+0x3a>
 800b9ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b9d2:	f000 b887 	b.w	800bae4 <atanf>
 800b9d6:	1794      	asrs	r4, r2, #30
 800b9d8:	f004 0402 	and.w	r4, r4, #2
 800b9dc:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800b9e0:	b943      	cbnz	r3, 800b9f4 <__ieee754_atan2f+0x58>
 800b9e2:	2c02      	cmp	r4, #2
 800b9e4:	d05e      	beq.n	800baa4 <__ieee754_atan2f+0x108>
 800b9e6:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800bab8 <__ieee754_atan2f+0x11c>
 800b9ea:	2c03      	cmp	r4, #3
 800b9ec:	bf08      	it	eq
 800b9ee:	eef0 7a47 	vmoveq.f32	s15, s14
 800b9f2:	e7e6      	b.n	800b9c2 <__ieee754_atan2f+0x26>
 800b9f4:	b941      	cbnz	r1, 800ba08 <__ieee754_atan2f+0x6c>
 800b9f6:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800babc <__ieee754_atan2f+0x120>
 800b9fa:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800bac0 <__ieee754_atan2f+0x124>
 800b9fe:	2800      	cmp	r0, #0
 800ba00:	bfa8      	it	ge
 800ba02:	eef0 7a47 	vmovge.f32	s15, s14
 800ba06:	e7dc      	b.n	800b9c2 <__ieee754_atan2f+0x26>
 800ba08:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800ba0c:	d110      	bne.n	800ba30 <__ieee754_atan2f+0x94>
 800ba0e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800ba12:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 800ba16:	d107      	bne.n	800ba28 <__ieee754_atan2f+0x8c>
 800ba18:	2c02      	cmp	r4, #2
 800ba1a:	d846      	bhi.n	800baaa <__ieee754_atan2f+0x10e>
 800ba1c:	4b29      	ldr	r3, [pc, #164]	@ (800bac4 <__ieee754_atan2f+0x128>)
 800ba1e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ba22:	edd3 7a00 	vldr	s15, [r3]
 800ba26:	e7cc      	b.n	800b9c2 <__ieee754_atan2f+0x26>
 800ba28:	2c02      	cmp	r4, #2
 800ba2a:	d841      	bhi.n	800bab0 <__ieee754_atan2f+0x114>
 800ba2c:	4b26      	ldr	r3, [pc, #152]	@ (800bac8 <__ieee754_atan2f+0x12c>)
 800ba2e:	e7f6      	b.n	800ba1e <__ieee754_atan2f+0x82>
 800ba30:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800ba34:	d0df      	beq.n	800b9f6 <__ieee754_atan2f+0x5a>
 800ba36:	1a5b      	subs	r3, r3, r1
 800ba38:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800ba3c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800ba40:	da1a      	bge.n	800ba78 <__ieee754_atan2f+0xdc>
 800ba42:	2a00      	cmp	r2, #0
 800ba44:	da01      	bge.n	800ba4a <__ieee754_atan2f+0xae>
 800ba46:	313c      	adds	r1, #60	@ 0x3c
 800ba48:	db19      	blt.n	800ba7e <__ieee754_atan2f+0xe2>
 800ba4a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800ba4e:	f000 f91d 	bl	800bc8c <fabsf>
 800ba52:	f000 f847 	bl	800bae4 <atanf>
 800ba56:	eef0 7a40 	vmov.f32	s15, s0
 800ba5a:	2c01      	cmp	r4, #1
 800ba5c:	d012      	beq.n	800ba84 <__ieee754_atan2f+0xe8>
 800ba5e:	2c02      	cmp	r4, #2
 800ba60:	d017      	beq.n	800ba92 <__ieee754_atan2f+0xf6>
 800ba62:	2c00      	cmp	r4, #0
 800ba64:	d0ad      	beq.n	800b9c2 <__ieee754_atan2f+0x26>
 800ba66:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800bacc <__ieee754_atan2f+0x130>
 800ba6a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ba6e:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800bad0 <__ieee754_atan2f+0x134>
 800ba72:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ba76:	e7a4      	b.n	800b9c2 <__ieee754_atan2f+0x26>
 800ba78:	eddf 7a11 	vldr	s15, [pc, #68]	@ 800bac0 <__ieee754_atan2f+0x124>
 800ba7c:	e7ed      	b.n	800ba5a <__ieee754_atan2f+0xbe>
 800ba7e:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800bad4 <__ieee754_atan2f+0x138>
 800ba82:	e7ea      	b.n	800ba5a <__ieee754_atan2f+0xbe>
 800ba84:	ee17 3a90 	vmov	r3, s15
 800ba88:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800ba8c:	ee07 3a90 	vmov	s15, r3
 800ba90:	e797      	b.n	800b9c2 <__ieee754_atan2f+0x26>
 800ba92:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800bacc <__ieee754_atan2f+0x130>
 800ba96:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ba9a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800bad0 <__ieee754_atan2f+0x134>
 800ba9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800baa2:	e78e      	b.n	800b9c2 <__ieee754_atan2f+0x26>
 800baa4:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800bad0 <__ieee754_atan2f+0x134>
 800baa8:	e78b      	b.n	800b9c2 <__ieee754_atan2f+0x26>
 800baaa:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800bad8 <__ieee754_atan2f+0x13c>
 800baae:	e788      	b.n	800b9c2 <__ieee754_atan2f+0x26>
 800bab0:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800bad4 <__ieee754_atan2f+0x138>
 800bab4:	e785      	b.n	800b9c2 <__ieee754_atan2f+0x26>
 800bab6:	bf00      	nop
 800bab8:	c0490fdb 	.word	0xc0490fdb
 800babc:	bfc90fdb 	.word	0xbfc90fdb
 800bac0:	3fc90fdb 	.word	0x3fc90fdb
 800bac4:	0800c184 	.word	0x0800c184
 800bac8:	0800c178 	.word	0x0800c178
 800bacc:	33bbbd2e 	.word	0x33bbbd2e
 800bad0:	40490fdb 	.word	0x40490fdb
 800bad4:	00000000 	.word	0x00000000
 800bad8:	3f490fdb 	.word	0x3f490fdb

0800badc <__ieee754_sqrtf>:
 800badc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800bae0:	4770      	bx	lr
	...

0800bae4 <atanf>:
 800bae4:	b538      	push	{r3, r4, r5, lr}
 800bae6:	ee10 5a10 	vmov	r5, s0
 800baea:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800baee:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800baf2:	eef0 7a40 	vmov.f32	s15, s0
 800baf6:	d310      	bcc.n	800bb1a <atanf+0x36>
 800baf8:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800bafc:	d904      	bls.n	800bb08 <atanf+0x24>
 800bafe:	ee70 7a00 	vadd.f32	s15, s0, s0
 800bb02:	eeb0 0a67 	vmov.f32	s0, s15
 800bb06:	bd38      	pop	{r3, r4, r5, pc}
 800bb08:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800bc40 <atanf+0x15c>
 800bb0c:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800bc44 <atanf+0x160>
 800bb10:	2d00      	cmp	r5, #0
 800bb12:	bfc8      	it	gt
 800bb14:	eef0 7a47 	vmovgt.f32	s15, s14
 800bb18:	e7f3      	b.n	800bb02 <atanf+0x1e>
 800bb1a:	4b4b      	ldr	r3, [pc, #300]	@ (800bc48 <atanf+0x164>)
 800bb1c:	429c      	cmp	r4, r3
 800bb1e:	d810      	bhi.n	800bb42 <atanf+0x5e>
 800bb20:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800bb24:	d20a      	bcs.n	800bb3c <atanf+0x58>
 800bb26:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800bc4c <atanf+0x168>
 800bb2a:	ee30 7a07 	vadd.f32	s14, s0, s14
 800bb2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bb32:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800bb36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb3a:	dce2      	bgt.n	800bb02 <atanf+0x1e>
 800bb3c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bb40:	e013      	b.n	800bb6a <atanf+0x86>
 800bb42:	f000 f8a3 	bl	800bc8c <fabsf>
 800bb46:	4b42      	ldr	r3, [pc, #264]	@ (800bc50 <atanf+0x16c>)
 800bb48:	429c      	cmp	r4, r3
 800bb4a:	d84f      	bhi.n	800bbec <atanf+0x108>
 800bb4c:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800bb50:	429c      	cmp	r4, r3
 800bb52:	d841      	bhi.n	800bbd8 <atanf+0xf4>
 800bb54:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800bb58:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800bb5c:	eea0 7a27 	vfma.f32	s14, s0, s15
 800bb60:	2300      	movs	r3, #0
 800bb62:	ee30 0a27 	vadd.f32	s0, s0, s15
 800bb66:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800bb6a:	1c5a      	adds	r2, r3, #1
 800bb6c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800bb70:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800bc54 <atanf+0x170>
 800bb74:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800bc58 <atanf+0x174>
 800bb78:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800bc5c <atanf+0x178>
 800bb7c:	ee66 6a06 	vmul.f32	s13, s12, s12
 800bb80:	eee6 5a87 	vfma.f32	s11, s13, s14
 800bb84:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800bc60 <atanf+0x17c>
 800bb88:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800bb8c:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800bc64 <atanf+0x180>
 800bb90:	eee7 5a26 	vfma.f32	s11, s14, s13
 800bb94:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800bc68 <atanf+0x184>
 800bb98:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800bb9c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800bc6c <atanf+0x188>
 800bba0:	eee7 5a26 	vfma.f32	s11, s14, s13
 800bba4:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800bc70 <atanf+0x18c>
 800bba8:	eea6 5a87 	vfma.f32	s10, s13, s14
 800bbac:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800bc74 <atanf+0x190>
 800bbb0:	eea5 7a26 	vfma.f32	s14, s10, s13
 800bbb4:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800bc78 <atanf+0x194>
 800bbb8:	eea7 5a26 	vfma.f32	s10, s14, s13
 800bbbc:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800bc7c <atanf+0x198>
 800bbc0:	eea5 7a26 	vfma.f32	s14, s10, s13
 800bbc4:	ee27 7a26 	vmul.f32	s14, s14, s13
 800bbc8:	eea5 7a86 	vfma.f32	s14, s11, s12
 800bbcc:	ee27 7a87 	vmul.f32	s14, s15, s14
 800bbd0:	d121      	bne.n	800bc16 <atanf+0x132>
 800bbd2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bbd6:	e794      	b.n	800bb02 <atanf+0x1e>
 800bbd8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800bbdc:	ee30 7a67 	vsub.f32	s14, s0, s15
 800bbe0:	ee30 0a27 	vadd.f32	s0, s0, s15
 800bbe4:	2301      	movs	r3, #1
 800bbe6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800bbea:	e7be      	b.n	800bb6a <atanf+0x86>
 800bbec:	4b24      	ldr	r3, [pc, #144]	@ (800bc80 <atanf+0x19c>)
 800bbee:	429c      	cmp	r4, r3
 800bbf0:	d80b      	bhi.n	800bc0a <atanf+0x126>
 800bbf2:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800bbf6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bbfa:	eea0 7a27 	vfma.f32	s14, s0, s15
 800bbfe:	2302      	movs	r3, #2
 800bc00:	ee70 6a67 	vsub.f32	s13, s0, s15
 800bc04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc08:	e7af      	b.n	800bb6a <atanf+0x86>
 800bc0a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800bc0e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800bc12:	2303      	movs	r3, #3
 800bc14:	e7a9      	b.n	800bb6a <atanf+0x86>
 800bc16:	4a1b      	ldr	r2, [pc, #108]	@ (800bc84 <atanf+0x1a0>)
 800bc18:	491b      	ldr	r1, [pc, #108]	@ (800bc88 <atanf+0x1a4>)
 800bc1a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800bc1e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800bc22:	edd3 6a00 	vldr	s13, [r3]
 800bc26:	ee37 7a66 	vsub.f32	s14, s14, s13
 800bc2a:	2d00      	cmp	r5, #0
 800bc2c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bc30:	edd2 7a00 	vldr	s15, [r2]
 800bc34:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bc38:	bfb8      	it	lt
 800bc3a:	eef1 7a67 	vneglt.f32	s15, s15
 800bc3e:	e760      	b.n	800bb02 <atanf+0x1e>
 800bc40:	bfc90fdb 	.word	0xbfc90fdb
 800bc44:	3fc90fdb 	.word	0x3fc90fdb
 800bc48:	3edfffff 	.word	0x3edfffff
 800bc4c:	7149f2ca 	.word	0x7149f2ca
 800bc50:	3f97ffff 	.word	0x3f97ffff
 800bc54:	3c8569d7 	.word	0x3c8569d7
 800bc58:	3d4bda59 	.word	0x3d4bda59
 800bc5c:	bd6ef16b 	.word	0xbd6ef16b
 800bc60:	3d886b35 	.word	0x3d886b35
 800bc64:	3dba2e6e 	.word	0x3dba2e6e
 800bc68:	3e124925 	.word	0x3e124925
 800bc6c:	3eaaaaab 	.word	0x3eaaaaab
 800bc70:	bd15a221 	.word	0xbd15a221
 800bc74:	bd9d8795 	.word	0xbd9d8795
 800bc78:	bde38e38 	.word	0xbde38e38
 800bc7c:	be4ccccd 	.word	0xbe4ccccd
 800bc80:	401bffff 	.word	0x401bffff
 800bc84:	0800c1a0 	.word	0x0800c1a0
 800bc88:	0800c190 	.word	0x0800c190

0800bc8c <fabsf>:
 800bc8c:	ee10 3a10 	vmov	r3, s0
 800bc90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bc94:	ee00 3a10 	vmov	s0, r3
 800bc98:	4770      	bx	lr
	...

0800bc9c <_init>:
 800bc9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc9e:	bf00      	nop
 800bca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bca2:	bc08      	pop	{r3}
 800bca4:	469e      	mov	lr, r3
 800bca6:	4770      	bx	lr

0800bca8 <_fini>:
 800bca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcaa:	bf00      	nop
 800bcac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcae:	bc08      	pop	{r3}
 800bcb0:	469e      	mov	lr, r3
 800bcb2:	4770      	bx	lr
