
build/debug/Drone_PID_IDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003888  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08003a10  08003a10  00004a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a90  08003a90  00005060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003a90  08003a90  00004a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a98  08003a98  00005060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08003a98  08003a98  00004a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  08003aa0  08003aa0  00004aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08003aa8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ac  20000060  08003b08  00005060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000030c  08003b08  0000530c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005060  2**0
                  CONTENTS, READONLY
 12 .comment      00000038  00000000  00000000  00005090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001296e  00000000  00000000  000050c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002051  00000000  00000000  00017a36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00009818  00000000  00000000  00019a87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000bc8  00000000  00000000  000232a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000914  00000000  00000000  00023e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f5f2  00000000  00000000  0002477c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00003e6f  00000000  00000000  00033d6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001ebc  00000000  00000000  00037be0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  00039a9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__aeabi_dmul>:
 8000188:	b570      	push	{r4, r5, r6, lr}
 800018a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800018e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000192:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000196:	bf1d      	ittte	ne
 8000198:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800019c:	ea94 0f0c 	teqne	r4, ip
 80001a0:	ea95 0f0c 	teqne	r5, ip
 80001a4:	f000 f8de 	bleq	8000364 <__aeabi_dmul+0x1dc>
 80001a8:	442c      	add	r4, r5
 80001aa:	ea81 0603 	eor.w	r6, r1, r3
 80001ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001ba:	bf18      	it	ne
 80001bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80001c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80001c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80001c8:	d038      	beq.n	800023c <__aeabi_dmul+0xb4>
 80001ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80001ce:	f04f 0500 	mov.w	r5, #0
 80001d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001d6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80001da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001de:	f04f 0600 	mov.w	r6, #0
 80001e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001e6:	f09c 0f00 	teq	ip, #0
 80001ea:	bf18      	it	ne
 80001ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80001f0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80001f4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80001f8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80001fc:	d204      	bcs.n	8000208 <__aeabi_dmul+0x80>
 80001fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000202:	416d      	adcs	r5, r5
 8000204:	eb46 0606 	adc.w	r6, r6, r6
 8000208:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800020c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000210:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000214:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000218:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800021c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000220:	bf88      	it	hi
 8000222:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000226:	d81e      	bhi.n	8000266 <__aeabi_dmul+0xde>
 8000228:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800022c:	bf08      	it	eq
 800022e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000232:	f150 0000 	adcs.w	r0, r0, #0
 8000236:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800023a:	bd70      	pop	{r4, r5, r6, pc}
 800023c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000240:	ea46 0101 	orr.w	r1, r6, r1
 8000244:	ea40 0002 	orr.w	r0, r0, r2
 8000248:	ea81 0103 	eor.w	r1, r1, r3
 800024c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000250:	bfc2      	ittt	gt
 8000252:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000256:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800025a:	bd70      	popgt	{r4, r5, r6, pc}
 800025c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000260:	f04f 0e00 	mov.w	lr, #0
 8000264:	3c01      	subs	r4, #1
 8000266:	f300 80ab 	bgt.w	80003c0 <__aeabi_dmul+0x238>
 800026a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800026e:	bfde      	ittt	le
 8000270:	2000      	movle	r0, #0
 8000272:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000276:	bd70      	pople	{r4, r5, r6, pc}
 8000278:	f1c4 0400 	rsb	r4, r4, #0
 800027c:	3c20      	subs	r4, #32
 800027e:	da35      	bge.n	80002ec <__aeabi_dmul+0x164>
 8000280:	340c      	adds	r4, #12
 8000282:	dc1b      	bgt.n	80002bc <__aeabi_dmul+0x134>
 8000284:	f104 0414 	add.w	r4, r4, #20
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f305 	lsl.w	r3, r0, r5
 8000290:	fa20 f004 	lsr.w	r0, r0, r4
 8000294:	fa01 f205 	lsl.w	r2, r1, r5
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80002a0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ac:	eb42 0106 	adc.w	r1, r2, r6
 80002b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002b4:	bf08      	it	eq
 80002b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ba:	bd70      	pop	{r4, r5, r6, pc}
 80002bc:	f1c4 040c 	rsb	r4, r4, #12
 80002c0:	f1c4 0520 	rsb	r5, r4, #32
 80002c4:	fa00 f304 	lsl.w	r3, r0, r4
 80002c8:	fa20 f005 	lsr.w	r0, r0, r5
 80002cc:	fa01 f204 	lsl.w	r2, r1, r4
 80002d0:	ea40 0002 	orr.w	r0, r0, r2
 80002d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f1c4 0520 	rsb	r5, r4, #32
 80002f0:	fa00 f205 	lsl.w	r2, r0, r5
 80002f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80002f8:	fa20 f304 	lsr.w	r3, r0, r4
 80002fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000300:	ea43 0302 	orr.w	r3, r3, r2
 8000304:	fa21 f004 	lsr.w	r0, r1, r4
 8000308:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800030c:	fa21 f204 	lsr.w	r2, r1, r4
 8000310:	ea20 0002 	bic.w	r0, r0, r2
 8000314:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000318:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800031c:	bf08      	it	eq
 800031e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f094 0f00 	teq	r4, #0
 8000328:	d10f      	bne.n	800034a <__aeabi_dmul+0x1c2>
 800032a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800032e:	0040      	lsls	r0, r0, #1
 8000330:	eb41 0101 	adc.w	r1, r1, r1
 8000334:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000338:	bf08      	it	eq
 800033a:	3c01      	subeq	r4, #1
 800033c:	d0f7      	beq.n	800032e <__aeabi_dmul+0x1a6>
 800033e:	ea41 0106 	orr.w	r1, r1, r6
 8000342:	f095 0f00 	teq	r5, #0
 8000346:	bf18      	it	ne
 8000348:	4770      	bxne	lr
 800034a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800034e:	0052      	lsls	r2, r2, #1
 8000350:	eb43 0303 	adc.w	r3, r3, r3
 8000354:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000358:	bf08      	it	eq
 800035a:	3d01      	subeq	r5, #1
 800035c:	d0f7      	beq.n	800034e <__aeabi_dmul+0x1c6>
 800035e:	ea43 0306 	orr.w	r3, r3, r6
 8000362:	4770      	bx	lr
 8000364:	ea94 0f0c 	teq	r4, ip
 8000368:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800036c:	bf18      	it	ne
 800036e:	ea95 0f0c 	teqne	r5, ip
 8000372:	d00c      	beq.n	800038e <__aeabi_dmul+0x206>
 8000374:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000378:	bf18      	it	ne
 800037a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800037e:	d1d1      	bne.n	8000324 <__aeabi_dmul+0x19c>
 8000380:	ea81 0103 	eor.w	r1, r1, r3
 8000384:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000388:	f04f 0000 	mov.w	r0, #0
 800038c:	bd70      	pop	{r4, r5, r6, pc}
 800038e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000392:	bf06      	itte	eq
 8000394:	4610      	moveq	r0, r2
 8000396:	4619      	moveq	r1, r3
 8000398:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800039c:	d019      	beq.n	80003d2 <__aeabi_dmul+0x24a>
 800039e:	ea94 0f0c 	teq	r4, ip
 80003a2:	d102      	bne.n	80003aa <__aeabi_dmul+0x222>
 80003a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003a8:	d113      	bne.n	80003d2 <__aeabi_dmul+0x24a>
 80003aa:	ea95 0f0c 	teq	r5, ip
 80003ae:	d105      	bne.n	80003bc <__aeabi_dmul+0x234>
 80003b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003b4:	bf1c      	itt	ne
 80003b6:	4610      	movne	r0, r2
 80003b8:	4619      	movne	r1, r3
 80003ba:	d10a      	bne.n	80003d2 <__aeabi_dmul+0x24a>
 80003bc:	ea81 0103 	eor.w	r1, r1, r3
 80003c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80003c8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003cc:	f04f 0000 	mov.w	r0, #0
 80003d0:	bd70      	pop	{r4, r5, r6, pc}
 80003d2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80003d6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80003da:	bd70      	pop	{r4, r5, r6, pc}

080003dc <__aeabi_drsub>:
 80003dc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003e0:	e002      	b.n	80003e8 <__adddf3>
 80003e2:	bf00      	nop

080003e4 <__aeabi_dsub>:
 80003e4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003e8 <__adddf3>:
 80003e8:	b530      	push	{r4, r5, lr}
 80003ea:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003ee:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003f2:	ea94 0f05 	teq	r4, r5
 80003f6:	bf08      	it	eq
 80003f8:	ea90 0f02 	teqeq	r0, r2
 80003fc:	bf1f      	itttt	ne
 80003fe:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000402:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000406:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800040a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040e:	f000 80e2 	beq.w	80005d6 <__adddf3+0x1ee>
 8000412:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000416:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800041a:	bfb8      	it	lt
 800041c:	426d      	neglt	r5, r5
 800041e:	dd0c      	ble.n	800043a <__adddf3+0x52>
 8000420:	442c      	add	r4, r5
 8000422:	ea80 0202 	eor.w	r2, r0, r2
 8000426:	ea81 0303 	eor.w	r3, r1, r3
 800042a:	ea82 0000 	eor.w	r0, r2, r0
 800042e:	ea83 0101 	eor.w	r1, r3, r1
 8000432:	ea80 0202 	eor.w	r2, r0, r2
 8000436:	ea81 0303 	eor.w	r3, r1, r3
 800043a:	2d36      	cmp	r5, #54	@ 0x36
 800043c:	bf88      	it	hi
 800043e:	bd30      	pophi	{r4, r5, pc}
 8000440:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000444:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000448:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800044c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000450:	d002      	beq.n	8000458 <__adddf3+0x70>
 8000452:	4240      	negs	r0, r0
 8000454:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000458:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800045c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000460:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000464:	d002      	beq.n	800046c <__adddf3+0x84>
 8000466:	4252      	negs	r2, r2
 8000468:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800046c:	ea94 0f05 	teq	r4, r5
 8000470:	f000 80a7 	beq.w	80005c2 <__adddf3+0x1da>
 8000474:	f1a4 0401 	sub.w	r4, r4, #1
 8000478:	f1d5 0e20 	rsbs	lr, r5, #32
 800047c:	db0d      	blt.n	800049a <__adddf3+0xb2>
 800047e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000482:	fa22 f205 	lsr.w	r2, r2, r5
 8000486:	1880      	adds	r0, r0, r2
 8000488:	f141 0100 	adc.w	r1, r1, #0
 800048c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000490:	1880      	adds	r0, r0, r2
 8000492:	fa43 f305 	asr.w	r3, r3, r5
 8000496:	4159      	adcs	r1, r3
 8000498:	e00e      	b.n	80004b8 <__adddf3+0xd0>
 800049a:	f1a5 0520 	sub.w	r5, r5, #32
 800049e:	f10e 0e20 	add.w	lr, lr, #32
 80004a2:	2a01      	cmp	r2, #1
 80004a4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004a8:	bf28      	it	cs
 80004aa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ae:	fa43 f305 	asr.w	r3, r3, r5
 80004b2:	18c0      	adds	r0, r0, r3
 80004b4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	d507      	bpl.n	80004ce <__adddf3+0xe6>
 80004be:	f04f 0e00 	mov.w	lr, #0
 80004c2:	f1dc 0c00 	rsbs	ip, ip, #0
 80004c6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ca:	eb6e 0101 	sbc.w	r1, lr, r1
 80004ce:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004d2:	d31b      	bcc.n	800050c <__adddf3+0x124>
 80004d4:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004d8:	d30c      	bcc.n	80004f4 <__adddf3+0x10c>
 80004da:	0849      	lsrs	r1, r1, #1
 80004dc:	ea5f 0030 	movs.w	r0, r0, rrx
 80004e0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004e4:	f104 0401 	add.w	r4, r4, #1
 80004e8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004ec:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004f0:	f080 809a 	bcs.w	8000628 <__adddf3+0x240>
 80004f4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004f8:	bf08      	it	eq
 80004fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004fe:	f150 0000 	adcs.w	r0, r0, #0
 8000502:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000506:	ea41 0105 	orr.w	r1, r1, r5
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000510:	4140      	adcs	r0, r0
 8000512:	eb41 0101 	adc.w	r1, r1, r1
 8000516:	3c01      	subs	r4, #1
 8000518:	bf28      	it	cs
 800051a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800051e:	d2e9      	bcs.n	80004f4 <__adddf3+0x10c>
 8000520:	f091 0f00 	teq	r1, #0
 8000524:	bf04      	itt	eq
 8000526:	4601      	moveq	r1, r0
 8000528:	2000      	moveq	r0, #0
 800052a:	fab1 f381 	clz	r3, r1
 800052e:	bf08      	it	eq
 8000530:	3320      	addeq	r3, #32
 8000532:	f1a3 030b 	sub.w	r3, r3, #11
 8000536:	f1b3 0220 	subs.w	r2, r3, #32
 800053a:	da0c      	bge.n	8000556 <__adddf3+0x16e>
 800053c:	320c      	adds	r2, #12
 800053e:	dd08      	ble.n	8000552 <__adddf3+0x16a>
 8000540:	f102 0c14 	add.w	ip, r2, #20
 8000544:	f1c2 020c 	rsb	r2, r2, #12
 8000548:	fa01 f00c 	lsl.w	r0, r1, ip
 800054c:	fa21 f102 	lsr.w	r1, r1, r2
 8000550:	e00c      	b.n	800056c <__adddf3+0x184>
 8000552:	f102 0214 	add.w	r2, r2, #20
 8000556:	bfd8      	it	le
 8000558:	f1c2 0c20 	rsble	ip, r2, #32
 800055c:	fa01 f102 	lsl.w	r1, r1, r2
 8000560:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000564:	bfdc      	itt	le
 8000566:	ea41 010c 	orrle.w	r1, r1, ip
 800056a:	4090      	lslle	r0, r2
 800056c:	1ae4      	subs	r4, r4, r3
 800056e:	bfa2      	ittt	ge
 8000570:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000574:	4329      	orrge	r1, r5
 8000576:	bd30      	popge	{r4, r5, pc}
 8000578:	ea6f 0404 	mvn.w	r4, r4
 800057c:	3c1f      	subs	r4, #31
 800057e:	da1c      	bge.n	80005ba <__adddf3+0x1d2>
 8000580:	340c      	adds	r4, #12
 8000582:	dc0e      	bgt.n	80005a2 <__adddf3+0x1ba>
 8000584:	f104 0414 	add.w	r4, r4, #20
 8000588:	f1c4 0220 	rsb	r2, r4, #32
 800058c:	fa20 f004 	lsr.w	r0, r0, r4
 8000590:	fa01 f302 	lsl.w	r3, r1, r2
 8000594:	ea40 0003 	orr.w	r0, r0, r3
 8000598:	fa21 f304 	lsr.w	r3, r1, r4
 800059c:	ea45 0103 	orr.w	r1, r5, r3
 80005a0:	bd30      	pop	{r4, r5, pc}
 80005a2:	f1c4 040c 	rsb	r4, r4, #12
 80005a6:	f1c4 0220 	rsb	r2, r4, #32
 80005aa:	fa20 f002 	lsr.w	r0, r0, r2
 80005ae:	fa01 f304 	lsl.w	r3, r1, r4
 80005b2:	ea40 0003 	orr.w	r0, r0, r3
 80005b6:	4629      	mov	r1, r5
 80005b8:	bd30      	pop	{r4, r5, pc}
 80005ba:	fa21 f004 	lsr.w	r0, r1, r4
 80005be:	4629      	mov	r1, r5
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	f094 0f00 	teq	r4, #0
 80005c6:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005ca:	bf06      	itte	eq
 80005cc:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005d0:	3401      	addeq	r4, #1
 80005d2:	3d01      	subne	r5, #1
 80005d4:	e74e      	b.n	8000474 <__adddf3+0x8c>
 80005d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005da:	bf18      	it	ne
 80005dc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005e0:	d029      	beq.n	8000636 <__adddf3+0x24e>
 80005e2:	ea94 0f05 	teq	r4, r5
 80005e6:	bf08      	it	eq
 80005e8:	ea90 0f02 	teqeq	r0, r2
 80005ec:	d005      	beq.n	80005fa <__adddf3+0x212>
 80005ee:	ea54 0c00 	orrs.w	ip, r4, r0
 80005f2:	bf04      	itt	eq
 80005f4:	4619      	moveq	r1, r3
 80005f6:	4610      	moveq	r0, r2
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	ea91 0f03 	teq	r1, r3
 80005fe:	bf1e      	ittt	ne
 8000600:	2100      	movne	r1, #0
 8000602:	2000      	movne	r0, #0
 8000604:	bd30      	popne	{r4, r5, pc}
 8000606:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800060a:	d105      	bne.n	8000618 <__adddf3+0x230>
 800060c:	0040      	lsls	r0, r0, #1
 800060e:	4149      	adcs	r1, r1
 8000610:	bf28      	it	cs
 8000612:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000616:	bd30      	pop	{r4, r5, pc}
 8000618:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800061c:	bf3c      	itt	cc
 800061e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000622:	bd30      	popcc	{r4, r5, pc}
 8000624:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000628:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800062c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000630:	f04f 0000 	mov.w	r0, #0
 8000634:	bd30      	pop	{r4, r5, pc}
 8000636:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063a:	bf1a      	itte	ne
 800063c:	4619      	movne	r1, r3
 800063e:	4610      	movne	r0, r2
 8000640:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000644:	bf1c      	itt	ne
 8000646:	460b      	movne	r3, r1
 8000648:	4602      	movne	r2, r0
 800064a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800064e:	bf06      	itte	eq
 8000650:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000654:	ea91 0f03 	teqeq	r1, r3
 8000658:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800065c:	bd30      	pop	{r4, r5, pc}
 800065e:	bf00      	nop

08000660 <__aeabi_ui2d>:
 8000660:	f090 0f00 	teq	r0, #0
 8000664:	bf04      	itt	eq
 8000666:	2100      	moveq	r1, #0
 8000668:	4770      	bxeq	lr
 800066a:	b530      	push	{r4, r5, lr}
 800066c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000670:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000674:	f04f 0500 	mov.w	r5, #0
 8000678:	f04f 0100 	mov.w	r1, #0
 800067c:	e750      	b.n	8000520 <__adddf3+0x138>
 800067e:	bf00      	nop

08000680 <__aeabi_i2d>:
 8000680:	f090 0f00 	teq	r0, #0
 8000684:	bf04      	itt	eq
 8000686:	2100      	moveq	r1, #0
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000690:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000694:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000698:	bf48      	it	mi
 800069a:	4240      	negmi	r0, r0
 800069c:	f04f 0100 	mov.w	r1, #0
 80006a0:	e73e      	b.n	8000520 <__adddf3+0x138>
 80006a2:	bf00      	nop

080006a4 <__aeabi_f2d>:
 80006a4:	0042      	lsls	r2, r0, #1
 80006a6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006aa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ae:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006b2:	bf1f      	itttt	ne
 80006b4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006b8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006bc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006c0:	4770      	bxne	lr
 80006c2:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006c6:	bf08      	it	eq
 80006c8:	4770      	bxeq	lr
 80006ca:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006ce:	bf04      	itt	eq
 80006d0:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006d4:	4770      	bxeq	lr
 80006d6:	b530      	push	{r4, r5, lr}
 80006d8:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006dc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006e4:	e71c      	b.n	8000520 <__adddf3+0x138>
 80006e6:	bf00      	nop

080006e8 <__aeabi_ul2d>:
 80006e8:	ea50 0201 	orrs.w	r2, r0, r1
 80006ec:	bf08      	it	eq
 80006ee:	4770      	bxeq	lr
 80006f0:	b530      	push	{r4, r5, lr}
 80006f2:	f04f 0500 	mov.w	r5, #0
 80006f6:	e00a      	b.n	800070e <__aeabi_l2d+0x16>

080006f8 <__aeabi_l2d>:
 80006f8:	ea50 0201 	orrs.w	r2, r0, r1
 80006fc:	bf08      	it	eq
 80006fe:	4770      	bxeq	lr
 8000700:	b530      	push	{r4, r5, lr}
 8000702:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000706:	d502      	bpl.n	800070e <__aeabi_l2d+0x16>
 8000708:	4240      	negs	r0, r0
 800070a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800070e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000712:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000716:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800071a:	f43f aed8 	beq.w	80004ce <__adddf3+0xe6>
 800071e:	f04f 0203 	mov.w	r2, #3
 8000722:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000726:	bf18      	it	ne
 8000728:	3203      	addne	r2, #3
 800072a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800072e:	bf18      	it	ne
 8000730:	3203      	addne	r2, #3
 8000732:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000736:	f1c2 0320 	rsb	r3, r2, #32
 800073a:	fa00 fc03 	lsl.w	ip, r0, r3
 800073e:	fa20 f002 	lsr.w	r0, r0, r2
 8000742:	fa01 fe03 	lsl.w	lr, r1, r3
 8000746:	ea40 000e 	orr.w	r0, r0, lr
 800074a:	fa21 f102 	lsr.w	r1, r1, r2
 800074e:	4414      	add	r4, r2
 8000750:	e6bd      	b.n	80004ce <__adddf3+0xe6>
 8000752:	bf00      	nop

08000754 <__aeabi_d2f>:
 8000754:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000758:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 800075c:	bf24      	itt	cs
 800075e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000762:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000766:	d90d      	bls.n	8000784 <__aeabi_d2f+0x30>
 8000768:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800076c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000770:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000774:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000778:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800077c:	bf08      	it	eq
 800077e:	f020 0001 	biceq.w	r0, r0, #1
 8000782:	4770      	bx	lr
 8000784:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000788:	d121      	bne.n	80007ce <__aeabi_d2f+0x7a>
 800078a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 800078e:	bfbc      	itt	lt
 8000790:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000794:	4770      	bxlt	lr
 8000796:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800079a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800079e:	f1c2 0218 	rsb	r2, r2, #24
 80007a2:	f1c2 0c20 	rsb	ip, r2, #32
 80007a6:	fa10 f30c 	lsls.w	r3, r0, ip
 80007aa:	fa20 f002 	lsr.w	r0, r0, r2
 80007ae:	bf18      	it	ne
 80007b0:	f040 0001 	orrne.w	r0, r0, #1
 80007b4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007b8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007bc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80007c0:	ea40 000c 	orr.w	r0, r0, ip
 80007c4:	fa23 f302 	lsr.w	r3, r3, r2
 80007c8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80007cc:	e7cc      	b.n	8000768 <__aeabi_d2f+0x14>
 80007ce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80007d2:	d107      	bne.n	80007e4 <__aeabi_d2f+0x90>
 80007d4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80007d8:	bf1e      	ittt	ne
 80007da:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80007de:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80007e2:	4770      	bxne	lr
 80007e4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80007e8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80007ec:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop

080007f4 <__aeabi_uldivmod>:
 80007f4:	b953      	cbnz	r3, 800080c <__aeabi_uldivmod+0x18>
 80007f6:	b94a      	cbnz	r2, 800080c <__aeabi_uldivmod+0x18>
 80007f8:	2900      	cmp	r1, #0
 80007fa:	bf08      	it	eq
 80007fc:	2800      	cmpeq	r0, #0
 80007fe:	bf1c      	itt	ne
 8000800:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000804:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000808:	f000 b80c 	b.w	8000824 <__aeabi_idiv0>
 800080c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000810:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000814:	f002 ff72 	bl	80036fc <__udivmoddi4>
 8000818:	f8dd e004 	ldr.w	lr, [sp, #4]
 800081c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000820:	b004      	add	sp, #16
 8000822:	4770      	bx	lr

08000824 <__aeabi_idiv0>:
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop

08000828 <__do_global_dtors_aux>:
 8000828:	b510      	push	{r4, lr}
 800082a:	4c05      	ldr	r4, [pc, #20]	@ (8000840 <__do_global_dtors_aux+0x18>)
 800082c:	7823      	ldrb	r3, [r4, #0]
 800082e:	b933      	cbnz	r3, 800083e <__do_global_dtors_aux+0x16>
 8000830:	4b04      	ldr	r3, [pc, #16]	@ (8000844 <__do_global_dtors_aux+0x1c>)
 8000832:	b113      	cbz	r3, 800083a <__do_global_dtors_aux+0x12>
 8000834:	4804      	ldr	r0, [pc, #16]	@ (8000848 <__do_global_dtors_aux+0x20>)
 8000836:	f3af 8000 	nop.w
 800083a:	2301      	movs	r3, #1
 800083c:	7023      	strb	r3, [r4, #0]
 800083e:	bd10      	pop	{r4, pc}
 8000840:	20000060 	.word	0x20000060
 8000844:	00000000 	.word	0x00000000
 8000848:	080039f4 	.word	0x080039f4

0800084c <frame_dummy>:
 800084c:	b508      	push	{r3, lr}
 800084e:	4b03      	ldr	r3, [pc, #12]	@ (800085c <frame_dummy+0x10>)
 8000850:	b11b      	cbz	r3, 800085a <frame_dummy+0xe>
 8000852:	4903      	ldr	r1, [pc, #12]	@ (8000860 <frame_dummy+0x14>)
 8000854:	4803      	ldr	r0, [pc, #12]	@ (8000864 <frame_dummy+0x18>)
 8000856:	f3af 8000 	nop.w
 800085a:	bd08      	pop	{r3, pc}
 800085c:	00000000 	.word	0x00000000
 8000860:	20000064 	.word	0x20000064
 8000864:	080039f4 	.word	0x080039f4

08000868 <Accelerometer_Init>:
 * and ensures it is ready for operation.
 *
 * @note This function should be called before attempting to read data from the accelerometer.
 */
void Accelerometer_Init(I2C_HandleTypeDef *hi2c)
{
 8000868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800086c:	b086      	sub	sp, #24
 800086e:	4604      	mov	r4, r0
    uint8_t data = 0;
 8000870:	2300      	movs	r3, #0
 8000872:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8_t check;
    // Read WHO_AM_I register (0x75) to check if the device is connected
    HAL_I2C_Mem_Read(hi2c, MPU6050_ADDR, 0x75, 1, &check, 1, 1000);
 8000876:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800087a:	9302      	str	r3, [sp, #8]
 800087c:	2301      	movs	r3, #1
 800087e:	9301      	str	r3, [sp, #4]
 8000880:	f10d 0216 	add.w	r2, sp, #22
 8000884:	9200      	str	r2, [sp, #0]
 8000886:	2275      	movs	r2, #117	@ 0x75
 8000888:	21d0      	movs	r1, #208	@ 0xd0
 800088a:	f000 ffd7 	bl	800183c <HAL_I2C_Mem_Read>
    if (check != 0x68) {
 800088e:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8000892:	2b68      	cmp	r3, #104	@ 0x68
 8000894:	d002      	beq.n	800089c <Accelerometer_Init+0x34>
    data = 0x00; // ±2g full scale
    HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, 0x1C, 1, &data, 1, 1000);
    // set Gyroscopic configuration in GYRO_CONFIG Register (0x1B)
    data = 0x00; // ±250°/s full scale
    HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, 0x1B, 1, &data, 1, 1000);
}
 8000896:	b006      	add	sp, #24
 8000898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, 0x6B, 1, &data, 1, 1000);
 800089c:	f44f 777a 	mov.w	r7, #1000	@ 0x3e8
 80008a0:	9702      	str	r7, [sp, #8]
 80008a2:	2501      	movs	r5, #1
 80008a4:	9501      	str	r5, [sp, #4]
 80008a6:	f10d 0617 	add.w	r6, sp, #23
 80008aa:	9600      	str	r6, [sp, #0]
 80008ac:	462b      	mov	r3, r5
 80008ae:	226b      	movs	r2, #107	@ 0x6b
 80008b0:	21d0      	movs	r1, #208	@ 0xd0
 80008b2:	4620      	mov	r0, r4
 80008b4:	f000 feef 	bl	8001696 <HAL_I2C_Mem_Write>
    data = 0x07; // 1000 Hz / (1 + 7) = 125 Hz
 80008b8:	2307      	movs	r3, #7
 80008ba:	f88d 3017 	strb.w	r3, [sp, #23]
    HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, 0x19, 1, &data, 1, 1000);
 80008be:	9702      	str	r7, [sp, #8]
 80008c0:	9501      	str	r5, [sp, #4]
 80008c2:	9600      	str	r6, [sp, #0]
 80008c4:	462b      	mov	r3, r5
 80008c6:	2219      	movs	r2, #25
 80008c8:	21d0      	movs	r1, #208	@ 0xd0
 80008ca:	4620      	mov	r0, r4
 80008cc:	f000 fee3 	bl	8001696 <HAL_I2C_Mem_Write>
    data = 0x00; // ±2g full scale
 80008d0:	f04f 0800 	mov.w	r8, #0
 80008d4:	f88d 8017 	strb.w	r8, [sp, #23]
    HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, 0x1C, 1, &data, 1, 1000);
 80008d8:	9702      	str	r7, [sp, #8]
 80008da:	9501      	str	r5, [sp, #4]
 80008dc:	9600      	str	r6, [sp, #0]
 80008de:	462b      	mov	r3, r5
 80008e0:	221c      	movs	r2, #28
 80008e2:	21d0      	movs	r1, #208	@ 0xd0
 80008e4:	4620      	mov	r0, r4
 80008e6:	f000 fed6 	bl	8001696 <HAL_I2C_Mem_Write>
    data = 0x00; // ±250°/s full scale
 80008ea:	f88d 8017 	strb.w	r8, [sp, #23]
    HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, 0x1B, 1, &data, 1, 1000);
 80008ee:	9702      	str	r7, [sp, #8]
 80008f0:	9501      	str	r5, [sp, #4]
 80008f2:	9600      	str	r6, [sp, #0]
 80008f4:	462b      	mov	r3, r5
 80008f6:	221b      	movs	r2, #27
 80008f8:	21d0      	movs	r1, #208	@ 0xd0
 80008fa:	4620      	mov	r0, r4
 80008fc:	f000 fecb 	bl	8001696 <HAL_I2C_Mem_Write>
 8000900:	e7c9      	b.n	8000896 <Accelerometer_Init+0x2e>
	...

08000904 <Accelerometer_Read>:
 * acceleration information.
 *
 * @return int Returns 0 on success, or a negative error code on failure.
 */
void Accelerometer_Read(I2C_HandleTypeDef *hi2c, AccelData *accel_data, GyroData *gyro_data)
{    
 8000904:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000908:	b087      	sub	sp, #28
 800090a:	4606      	mov	r6, r0
 800090c:	460d      	mov	r5, r1
 800090e:	4614      	mov	r4, r2
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from ACCEL_XOUT_H (0x3B) Register
    HAL_I2C_Mem_Read(hi2c, MPU6050_ADDR, 0x3B, 1, Rec_Data, 6, 1000);
 8000910:	f44f 797a 	mov.w	r9, #1000	@ 0x3e8
 8000914:	f8cd 9008 	str.w	r9, [sp, #8]
 8000918:	f04f 0806 	mov.w	r8, #6
 800091c:	f8cd 8004 	str.w	r8, [sp, #4]
 8000920:	af04      	add	r7, sp, #16
 8000922:	9700      	str	r7, [sp, #0]
 8000924:	2301      	movs	r3, #1
 8000926:	223b      	movs	r2, #59	@ 0x3b
 8000928:	21d0      	movs	r1, #208	@ 0xd0
 800092a:	f000 ff87 	bl	800183c <HAL_I2C_Mem_Read>
    // Convert the data to 16-bit signed integers
    accel_data->x = (int16_t)((Rec_Data[0] << 8) | Rec_Data[1]);
 800092e:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8000932:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8000936:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800093a:	b21b      	sxth	r3, r3
 800093c:	ee07 3a90 	vmov	s15, r3
 8000940:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000944:	edc5 6a00 	vstr	s13, [r5]
    accel_data->y = (int16_t)((Rec_Data[2] << 8) | Rec_Data[3]);
 8000948:	f89d 2012 	ldrb.w	r2, [sp, #18]
 800094c:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8000950:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000954:	b21b      	sxth	r3, r3
 8000956:	ee07 3a90 	vmov	s15, r3
 800095a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800095e:	ed85 7a01 	vstr	s14, [r5, #4]
    accel_data->z = (int16_t)((Rec_Data[4] << 8) | Rec_Data[5]);
 8000962:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8000966:	f89d 3015 	ldrb.w	r3, [sp, #21]
 800096a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800096e:	b21b      	sxth	r3, r3
 8000970:	ee07 3a90 	vmov	s15, r3
 8000974:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000978:	edc5 7a02 	vstr	s15, [r5, #8]
    // Convert raw value to g-force
    accel_data->x = (float)accel_data->x / 16384.0f; // For ±2g full scale
 800097c:	ed9f 6a28 	vldr	s12, [pc, #160]	@ 8000a20 <Accelerometer_Read+0x11c>
 8000980:	ee66 6a86 	vmul.f32	s13, s13, s12
 8000984:	edc5 6a00 	vstr	s13, [r5]
    accel_data->y = (float)accel_data->y / 16384.0f; 
 8000988:	ee27 7a06 	vmul.f32	s14, s14, s12
 800098c:	ed85 7a01 	vstr	s14, [r5, #4]
    accel_data->z = (float)accel_data->z / 16384.0f;
 8000990:	ee67 7a86 	vmul.f32	s15, s15, s12
 8000994:	edc5 7a02 	vstr	s15, [r5, #8]

    // Read 6 BYTES of data starting from GYRO_XOUT_H (0x43) Register
    HAL_I2C_Mem_Read(hi2c, MPU6050_ADDR, 0x43, 1, Rec_Data, 6, 1000);
 8000998:	f8cd 9008 	str.w	r9, [sp, #8]
 800099c:	f8cd 8004 	str.w	r8, [sp, #4]
 80009a0:	9700      	str	r7, [sp, #0]
 80009a2:	2301      	movs	r3, #1
 80009a4:	2243      	movs	r2, #67	@ 0x43
 80009a6:	21d0      	movs	r1, #208	@ 0xd0
 80009a8:	4630      	mov	r0, r6
 80009aa:	f000 ff47 	bl	800183c <HAL_I2C_Mem_Read>
    // Convert the data to 16-bit signed integers
    gyro_data->x = (int16_t)((Rec_Data[0] << 8) | Rec_Data[1]);
 80009ae:	f89d 2010 	ldrb.w	r2, [sp, #16]
 80009b2:	f89d 3011 	ldrb.w	r3, [sp, #17]
 80009b6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80009ba:	b21b      	sxth	r3, r3
 80009bc:	ee07 3a90 	vmov	s15, r3
 80009c0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80009c4:	edc4 6a00 	vstr	s13, [r4]
    gyro_data->y = (int16_t)((Rec_Data[2] << 8) | Rec_Data[3]);
 80009c8:	f89d 2012 	ldrb.w	r2, [sp, #18]
 80009cc:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80009d0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80009d4:	b21b      	sxth	r3, r3
 80009d6:	ee07 3a90 	vmov	s15, r3
 80009da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80009de:	ed84 7a01 	vstr	s14, [r4, #4]
    gyro_data->z = (int16_t)((Rec_Data[4] << 8) | Rec_Data[5]);
 80009e2:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80009e6:	f89d 3015 	ldrb.w	r3, [sp, #21]
 80009ea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80009ee:	b21b      	sxth	r3, r3
 80009f0:	ee07 3a90 	vmov	s15, r3
 80009f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009f8:	edc4 7a02 	vstr	s15, [r4, #8]
    // Convert raw value to degrees per second
    gyro_data->x = (float)gyro_data->x / 131.0f; // For ±250°/s full scale
 80009fc:	ed9f 6a09 	vldr	s12, [pc, #36]	@ 8000a24 <Accelerometer_Read+0x120>
 8000a00:	eec6 5a86 	vdiv.f32	s11, s13, s12
 8000a04:	edc4 5a00 	vstr	s11, [r4]
    gyro_data->y = (float)gyro_data->y / 131.0f;
 8000a08:	eec7 6a06 	vdiv.f32	s13, s14, s12
 8000a0c:	edc4 6a01 	vstr	s13, [r4, #4]
    gyro_data->z = (float)gyro_data->z / 131.0f; 
 8000a10:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8000a14:	ed84 7a02 	vstr	s14, [r4, #8]
}
 8000a18:	b007      	add	sp, #28
 8000a1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000a1e:	bf00      	nop
 8000a20:	38800000 	.word	0x38800000
 8000a24:	43030000 	.word	0x43030000

08000a28 <angles_from_accel>:
 *
 * @param accel_data Structure containing accelerometer data (x, y, z).
 * @param pitch Pointer to store the calculated pitch angle (in degrees).
 * @param roll Pointer to store the calculated roll angle (in degrees).
 */
void angles_from_accel(AccelData accel_data, float *pitch, float *roll) {
 8000a28:	b530      	push	{r4, r5, lr}
 8000a2a:	ed2d 8b04 	vpush	{d8-d9}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	eeb0 9a40 	vmov.f32	s18, s0
 8000a34:	eeb0 8a60 	vmov.f32	s16, s1
 8000a38:	4605      	mov	r5, r0
 8000a3a:	460c      	mov	r4, r1
 8000a3c:	ed8d 0a01 	vstr	s0, [sp, #4]
 8000a40:	edcd 0a02 	vstr	s1, [sp, #8]
 8000a44:	ed8d 1a03 	vstr	s2, [sp, #12]
    *pitch = atan2f(accel_data.y, sqrtf(accel_data.x * accel_data.x + accel_data.z * accel_data.z)) * (180.0f / M_PI);
 8000a48:	ee20 0a00 	vmul.f32	s0, s0, s0
 8000a4c:	ee61 8a01 	vmul.f32	s17, s2, s2
 8000a50:	ee30 0a28 	vadd.f32	s0, s0, s17
 8000a54:	f002 fcac 	bl	80033b0 <sqrtf>
 8000a58:	eef0 0a40 	vmov.f32	s1, s0
 8000a5c:	eeb0 0a48 	vmov.f32	s0, s16
 8000a60:	f002 fca4 	bl	80033ac <atan2f>
 8000a64:	ee10 0a10 	vmov	r0, s0
 8000a68:	f7ff fe1c 	bl	80006a4 <__aeabi_f2d>
 8000a6c:	a312      	add	r3, pc, #72	@ (adr r3, 8000ab8 <angles_from_accel+0x90>)
 8000a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a72:	f7ff fb89 	bl	8000188 <__aeabi_dmul>
 8000a76:	f7ff fe6d 	bl	8000754 <__aeabi_d2f>
 8000a7a:	6028      	str	r0, [r5, #0]
    *roll = atan2f(-accel_data.x, sqrtf(accel_data.y * accel_data.y + accel_data.z * accel_data.z)) * (180.0f / M_PI);
 8000a7c:	ee28 8a08 	vmul.f32	s16, s16, s16
 8000a80:	ee38 0a88 	vadd.f32	s0, s17, s16
 8000a84:	f002 fc94 	bl	80033b0 <sqrtf>
 8000a88:	eef0 0a40 	vmov.f32	s1, s0
 8000a8c:	eeb1 0a49 	vneg.f32	s0, s18
 8000a90:	f002 fc8c 	bl	80033ac <atan2f>
 8000a94:	ee10 0a10 	vmov	r0, s0
 8000a98:	f7ff fe04 	bl	80006a4 <__aeabi_f2d>
 8000a9c:	a306      	add	r3, pc, #24	@ (adr r3, 8000ab8 <angles_from_accel+0x90>)
 8000a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000aa2:	f7ff fb71 	bl	8000188 <__aeabi_dmul>
 8000aa6:	f7ff fe55 	bl	8000754 <__aeabi_d2f>
 8000aaa:	6020      	str	r0, [r4, #0]
}
 8000aac:	b005      	add	sp, #20
 8000aae:	ecbd 8b04 	vpop	{d8-d9}
 8000ab2:	bd30      	pop	{r4, r5, pc}
 8000ab4:	f3af 8000 	nop.w
 8000ab8:	1a63c1f8 	.word	0x1a63c1f8
 8000abc:	404ca5dc 	.word	0x404ca5dc

08000ac0 <angles_rate_from_gyro>:
 *
 * @param gyro_data Structure containing gyroscope data (x, y, z).
 * @param pitch_rate Pointer to store the calculated pitch rate (in degrees per second).
 * @param roll_rate Pointer to store the calculated roll rate (in degrees per second).
 */
void angles_rate_from_gyro(GyroData gyro_data, float *pitch_rate, float *roll_rate) {
 8000ac0:	b084      	sub	sp, #16
 8000ac2:	ed8d 0a01 	vstr	s0, [sp, #4]
 8000ac6:	edcd 0a02 	vstr	s1, [sp, #8]
 8000aca:	ed8d 1a03 	vstr	s2, [sp, #12]
    *pitch_rate = gyro_data.y; // Gyro Y-axis for pitch rate
 8000ace:	edc0 0a00 	vstr	s1, [r0]
    *roll_rate = gyro_data.x;  // Gyro X-axis for roll rate
 8000ad2:	ed81 0a00 	vstr	s0, [r1]
}
 8000ad6:	b004      	add	sp, #16
 8000ad8:	4770      	bx	lr
	...

08000adc <Kalman_Init>:
 * @param init_covariance Initial estimate of the error covariance.
 * @param process_noise Process noise covariance (Q).
 * @param measurement_noise Measurement noise covariance (R).
 */
void Kalman_Init(Kalman_t *kalman_x, Kalman_t *kalman_y)
{
 8000adc:	b500      	push	{lr}
    // Initialize Kalman filter parameters for X, Y, and Z axes
    kalman_x->angle = 0.0f;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	6003      	str	r3, [r0, #0]
    kalman_x->bias = 0.0f;
 8000ae2:	6043      	str	r3, [r0, #4]
    kalman_x->rate = 0.0f;
 8000ae4:	6083      	str	r3, [r0, #8]
    kalman_x->P[0][0] = 1.0f; // P[0][0]
 8000ae6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000aea:	60c2      	str	r2, [r0, #12]
    kalman_x->P[0][1] = 0.0f; // P[0][1]
 8000aec:	6103      	str	r3, [r0, #16]
    kalman_x->P[1][0] = 0.0f; // P[1][0]
 8000aee:	6143      	str	r3, [r0, #20]
    kalman_x->P[1][1] = 1.0f; // P[1][1]
 8000af0:	6182      	str	r2, [r0, #24]
    kalman_x->Q_angle = 0.001f; // Process noise covariance for angle
 8000af2:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8000b28 <Kalman_Init+0x4c>
 8000af6:	edc0 7a07 	vstr	s15, [r0, #28]
    kalman_x->Q_bias = 0.003f; // Process noise covariance for bias
 8000afa:	f8df e030 	ldr.w	lr, [pc, #48]	@ 8000b2c <Kalman_Init+0x50>
 8000afe:	f8c0 e020 	str.w	lr, [r0, #32]
    kalman_x->R_measure = 0.03f; // Measurement noise covariance
 8000b02:	f8df c02c 	ldr.w	ip, [pc, #44]	@ 8000b30 <Kalman_Init+0x54>
 8000b06:	f8c0 c024 	str.w	ip, [r0, #36]	@ 0x24

    kalman_y->angle = 0.0f;
 8000b0a:	600b      	str	r3, [r1, #0]
    kalman_y->bias = 0.0f;
 8000b0c:	604b      	str	r3, [r1, #4]
    kalman_y->rate = 0.0f;
 8000b0e:	608b      	str	r3, [r1, #8]
    kalman_y->P[0][0] = 1.0f;
 8000b10:	60ca      	str	r2, [r1, #12]
    kalman_y->P[0][1] = 0.0f;
 8000b12:	610b      	str	r3, [r1, #16]
    kalman_y->P[1][0] = 0.0f;
 8000b14:	614b      	str	r3, [r1, #20]
    kalman_y->P[1][1] = 1.0f;
 8000b16:	618a      	str	r2, [r1, #24]
    kalman_y->Q_angle = 0.001f;
 8000b18:	edc1 7a07 	vstr	s15, [r1, #28]
    kalman_y->Q_bias = 0.003f;
 8000b1c:	f8c1 e020 	str.w	lr, [r1, #32]
    kalman_y->R_measure = 0.03f;
 8000b20:	f8c1 c024 	str.w	ip, [r1, #36]	@ 0x24
}
 8000b24:	f85d fb04 	ldr.w	pc, [sp], #4
 8000b28:	3a83126f 	.word	0x3a83126f
 8000b2c:	3b449ba6 	.word	0x3b449ba6
 8000b30:	3cf5c28f 	.word	0x3cf5c28f

08000b34 <Kalman_GetAngle>:
 * @param gyro_rate Angular rate measured from the gyroscope (in degrees per second).
 * @param dt Time interval since the last update (in seconds).
 */
void Kalman_GetAngle(Kalman_t *kalman, float acc_angle, float gyro_rate, float dt) {
    // 1. Prediction
    kalman->rate = gyro_rate - kalman->bias;
 8000b34:	edd0 4a01 	vldr	s9, [r0, #4]
 8000b38:	ee70 0ae4 	vsub.f32	s1, s1, s9
 8000b3c:	edc0 0a02 	vstr	s1, [r0, #8]
    kalman->angle += dt * kalman->rate;
 8000b40:	ed90 5a00 	vldr	s10, [r0]
 8000b44:	ee60 0a81 	vmul.f32	s1, s1, s2
 8000b48:	ee35 5a20 	vadd.f32	s10, s10, s1
 8000b4c:	ed80 5a00 	vstr	s10, [r0]

    // state covariance update
    kalman->P[0][0] += dt * (dt*kalman->P[1][1] - kalman->P[0][1] - kalman->P[1][0] + kalman->Q_angle);
 8000b50:	edd0 7a03 	vldr	s15, [r0, #12]
 8000b54:	ed90 6a06 	vldr	s12, [r0, #24]
 8000b58:	ee26 4a01 	vmul.f32	s8, s12, s2
 8000b5c:	ed90 7a04 	vldr	s14, [r0, #16]
 8000b60:	ee74 5a47 	vsub.f32	s11, s8, s14
 8000b64:	edd0 6a05 	vldr	s13, [r0, #20]
 8000b68:	ee75 5ae6 	vsub.f32	s11, s11, s13
 8000b6c:	edd0 3a07 	vldr	s7, [r0, #28]
 8000b70:	ee75 5aa3 	vadd.f32	s11, s11, s7
 8000b74:	ee65 5a81 	vmul.f32	s11, s11, s2
 8000b78:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8000b7c:	edc0 7a03 	vstr	s15, [r0, #12]
    kalman->P[0][1] -= dt * kalman->P[1][1];
 8000b80:	ee37 7a44 	vsub.f32	s14, s14, s8
 8000b84:	ed80 7a04 	vstr	s14, [r0, #16]
    kalman->P[1][0] -= dt * kalman->P[1][1];
 8000b88:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8000b8c:	edc0 6a05 	vstr	s13, [r0, #20]
    kalman->P[1][1] += kalman->Q_bias * dt;
 8000b90:	edd0 5a08 	vldr	s11, [r0, #32]
 8000b94:	ee65 5a81 	vmul.f32	s11, s11, s2
 8000b98:	ee36 6a25 	vadd.f32	s12, s12, s11
 8000b9c:	ed80 6a06 	vstr	s12, [r0, #24]

    // 2. update
    float y = acc_angle - kalman->angle; // innovation
 8000ba0:	ee30 0a45 	vsub.f32	s0, s0, s10
    float S = kalman->P[0][0] + kalman->R_measure; // incertitude innovation
 8000ba4:	ed90 4a09 	vldr	s8, [r0, #36]	@ 0x24
 8000ba8:	ee37 4a84 	vadd.f32	s8, s15, s8
    float K0 = kalman->P[0][0] / S;
 8000bac:	eec7 5a84 	vdiv.f32	s11, s15, s8
    float K1 = kalman->P[1][0] / S;
 8000bb0:	eec6 3a84 	vdiv.f32	s7, s13, s8

    // state update
    kalman->angle += K0 * y;
 8000bb4:	ee20 4a25 	vmul.f32	s8, s0, s11
 8000bb8:	ee35 5a04 	vadd.f32	s10, s10, s8
 8000bbc:	ed80 5a00 	vstr	s10, [r0]
    kalman->bias  += K1 * y;
 8000bc0:	ee20 0a23 	vmul.f32	s0, s0, s7
 8000bc4:	ee74 4a80 	vadd.f32	s9, s9, s0
 8000bc8:	edc0 4a01 	vstr	s9, [r0, #4]

    // state covariance update
    float P00_temp = kalman->P[0][0];
    float P01_temp = kalman->P[0][1];

    kalman->P[0][0] -= K0 * P00_temp;
 8000bcc:	ee27 5aa5 	vmul.f32	s10, s15, s11
 8000bd0:	ee37 5ac5 	vsub.f32	s10, s15, s10
 8000bd4:	ed80 5a03 	vstr	s10, [r0, #12]
    kalman->P[0][1] -= K0 * P01_temp;
 8000bd8:	ee67 5a25 	vmul.f32	s11, s14, s11
 8000bdc:	ee77 5a65 	vsub.f32	s11, s14, s11
 8000be0:	edc0 5a04 	vstr	s11, [r0, #16]
    kalman->P[1][0] -= K1 * P00_temp;
 8000be4:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8000be8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000bec:	edc0 6a05 	vstr	s13, [r0, #20]
    kalman->P[1][1] -= K1 * P01_temp;
 8000bf0:	ee27 7a23 	vmul.f32	s14, s14, s7
 8000bf4:	ee36 6a47 	vsub.f32	s12, s12, s14
 8000bf8:	ed80 6a06 	vstr	s12, [r0, #24]
}
 8000bfc:	4770      	bx	lr
	...

08000c00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c00:	b530      	push	{r4, r5, lr}
 8000c02:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c04:	ad05      	add	r5, sp, #20
 8000c06:	2400      	movs	r4, #0
 8000c08:	9405      	str	r4, [sp, #20]
 8000c0a:	9406      	str	r4, [sp, #24]
 8000c0c:	9407      	str	r4, [sp, #28]
 8000c0e:	9408      	str	r4, [sp, #32]
 8000c10:	9409      	str	r4, [sp, #36]	@ 0x24
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c12:	4b21      	ldr	r3, [pc, #132]	@ (8000c98 <MX_GPIO_Init+0x98>)
 8000c14:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000c16:	f042 0204 	orr.w	r2, r2, #4
 8000c1a:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000c1c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000c1e:	f002 0204 	and.w	r2, r2, #4
 8000c22:	9201      	str	r2, [sp, #4]
 8000c24:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c26:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000c28:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000c2c:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000c2e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000c30:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000c34:	9202      	str	r2, [sp, #8]
 8000c36:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c38:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000c3a:	f042 0201 	orr.w	r2, r2, #1
 8000c3e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000c40:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000c42:	f002 0201 	and.w	r2, r2, #1
 8000c46:	9203      	str	r2, [sp, #12]
 8000c48:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000c4c:	f042 0202 	orr.w	r2, r2, #2
 8000c50:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000c52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c54:	f003 0302 	and.w	r3, r3, #2
 8000c58:	9304      	str	r3, [sp, #16]
 8000c5a:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c5c:	4622      	mov	r2, r4
 8000c5e:	2120      	movs	r1, #32
 8000c60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c64:	f000 fade 	bl	8001224 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c68:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c6c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c6e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000c72:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c76:	4629      	mov	r1, r5
 8000c78:	4808      	ldr	r0, [pc, #32]	@ (8000c9c <MX_GPIO_Init+0x9c>)
 8000c7a:	f000 f9d3 	bl	8001024 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c7e:	2320      	movs	r3, #32
 8000c80:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c82:	2301      	movs	r3, #1
 8000c84:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c88:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c8a:	4629      	mov	r1, r5
 8000c8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c90:	f000 f9c8 	bl	8001024 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c94:	b00b      	add	sp, #44	@ 0x2c
 8000c96:	bd30      	pop	{r4, r5, pc}
 8000c98:	40021000 	.word	0x40021000
 8000c9c:	48000800 	.word	0x48000800

08000ca0 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ca2:	e7fe      	b.n	8000ca2 <Error_Handler+0x2>

08000ca4 <MX_USART2_UART_Init>:
{
 8000ca4:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 8000ca6:	480b      	ldr	r0, [pc, #44]	@ (8000cd4 <MX_USART2_UART_Init+0x30>)
 8000ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd8 <MX_USART2_UART_Init+0x34>)
 8000caa:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8000cac:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000cb0:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cb6:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cb8:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cba:	220c      	movs	r2, #12
 8000cbc:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cbe:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cc0:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cc2:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cc4:	6243      	str	r3, [r0, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cc6:	f002 face 	bl	8003266 <HAL_UART_Init>
 8000cca:	b900      	cbnz	r0, 8000cce <MX_USART2_UART_Init+0x2a>
}
 8000ccc:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000cce:	f7ff ffe7 	bl	8000ca0 <Error_Handler>
 8000cd2:	bf00      	nop
 8000cd4:	200000f4 	.word	0x200000f4
 8000cd8:	40004400 	.word	0x40004400

08000cdc <MX_I2C1_Init>:
{
 8000cdc:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 8000cde:	4811      	ldr	r0, [pc, #68]	@ (8000d24 <MX_I2C1_Init+0x48>)
 8000ce0:	4b11      	ldr	r3, [pc, #68]	@ (8000d28 <MX_I2C1_Init+0x4c>)
 8000ce2:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 8000ce4:	4b11      	ldr	r3, [pc, #68]	@ (8000d2c <MX_I2C1_Init+0x50>)
 8000ce6:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cec:	2201      	movs	r2, #1
 8000cee:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cf0:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cf2:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cf4:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cf6:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cf8:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cfa:	f000 fc68 	bl	80015ce <HAL_I2C_Init>
 8000cfe:	b950      	cbnz	r0, 8000d16 <MX_I2C1_Init+0x3a>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d00:	2100      	movs	r1, #0
 8000d02:	4808      	ldr	r0, [pc, #32]	@ (8000d24 <MX_I2C1_Init+0x48>)
 8000d04:	f000 fe70 	bl	80019e8 <HAL_I2CEx_ConfigAnalogFilter>
 8000d08:	b938      	cbnz	r0, 8000d1a <MX_I2C1_Init+0x3e>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	4805      	ldr	r0, [pc, #20]	@ (8000d24 <MX_I2C1_Init+0x48>)
 8000d0e:	f000 fe98 	bl	8001a42 <HAL_I2CEx_ConfigDigitalFilter>
 8000d12:	b920      	cbnz	r0, 8000d1e <MX_I2C1_Init+0x42>
}
 8000d14:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000d16:	f7ff ffc3 	bl	8000ca0 <Error_Handler>
    Error_Handler();
 8000d1a:	f7ff ffc1 	bl	8000ca0 <Error_Handler>
    Error_Handler();
 8000d1e:	f7ff ffbf 	bl	8000ca0 <Error_Handler>
 8000d22:	bf00      	nop
 8000d24:	2000017c 	.word	0x2000017c
 8000d28:	40005400 	.word	0x40005400
 8000d2c:	10d19ce4 	.word	0x10d19ce4

08000d30 <SystemClock_Config>:
{
 8000d30:	b500      	push	{lr}
 8000d32:	b097      	sub	sp, #92	@ 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d34:	2244      	movs	r2, #68	@ 0x44
 8000d36:	2100      	movs	r1, #0
 8000d38:	a805      	add	r0, sp, #20
 8000d3a:	f002 fb04 	bl	8003346 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d3e:	2300      	movs	r3, #0
 8000d40:	9300      	str	r3, [sp, #0]
 8000d42:	9301      	str	r3, [sp, #4]
 8000d44:	9302      	str	r3, [sp, #8]
 8000d46:	9303      	str	r3, [sp, #12]
 8000d48:	9304      	str	r3, [sp, #16]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000d4a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000d4e:	f000 ff4d 	bl	8001bec <HAL_PWREx_ControlVoltageScaling>
 8000d52:	bb20      	cbnz	r0, 8000d9e <SystemClock_Config+0x6e>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d54:	2302      	movs	r3, #2
 8000d56:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d58:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d5c:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d5e:	2210      	movs	r2, #16
 8000d60:	9209      	str	r2, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d62:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d64:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d66:	2201      	movs	r2, #1
 8000d68:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000d6a:	220a      	movs	r2, #10
 8000d6c:	9212      	str	r2, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000d6e:	2207      	movs	r2, #7
 8000d70:	9213      	str	r2, [sp, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d72:	9314      	str	r3, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d74:	9315      	str	r3, [sp, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d76:	a805      	add	r0, sp, #20
 8000d78:	f001 f81c 	bl	8001db4 <HAL_RCC_OscConfig>
 8000d7c:	b988      	cbnz	r0, 8000da2 <SystemClock_Config+0x72>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d7e:	230f      	movs	r3, #15
 8000d80:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d82:	2303      	movs	r3, #3
 8000d84:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d86:	2300      	movs	r3, #0
 8000d88:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d8a:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d8c:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d8e:	2104      	movs	r1, #4
 8000d90:	4668      	mov	r0, sp
 8000d92:	f001 fb1d 	bl	80023d0 <HAL_RCC_ClockConfig>
 8000d96:	b930      	cbnz	r0, 8000da6 <SystemClock_Config+0x76>
}
 8000d98:	b017      	add	sp, #92	@ 0x5c
 8000d9a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000d9e:	f7ff ff7f 	bl	8000ca0 <Error_Handler>
    Error_Handler();
 8000da2:	f7ff ff7d 	bl	8000ca0 <Error_Handler>
    Error_Handler();
 8000da6:	f7ff ff7b 	bl	8000ca0 <Error_Handler>
	...

08000dac <main>:
{
 8000dac:	b580      	push	{r7, lr}
  HAL_Init();
 8000dae:	f000 f893 	bl	8000ed8 <HAL_Init>
  Accelerometer_Init(&hi2c1); // Initialize the accelerometer
 8000db2:	482a      	ldr	r0, [pc, #168]	@ (8000e5c <main+0xb0>)
 8000db4:	f7ff fd58 	bl	8000868 <Accelerometer_Init>
  Kalman_Init(&kalman_pitch, &kalman_roll); // Initialize Kalman filters for x, y, z axes
 8000db8:	4929      	ldr	r1, [pc, #164]	@ (8000e60 <main+0xb4>)
 8000dba:	482a      	ldr	r0, [pc, #168]	@ (8000e64 <main+0xb8>)
 8000dbc:	f7ff fe8e 	bl	8000adc <Kalman_Init>
  SystemClock_Config();
 8000dc0:	f7ff ffb6 	bl	8000d30 <SystemClock_Config>
  MX_GPIO_Init();
 8000dc4:	f7ff ff1c 	bl	8000c00 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000dc8:	f7ff ff6c 	bl	8000ca4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000dcc:	f7ff ff86 	bl	8000cdc <MX_I2C1_Init>
    LD2_GPIO_Port->ODR ^= LD2_Pin; // Toggle the LED
 8000dd0:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000dd4:	6953      	ldr	r3, [r2, #20]
 8000dd6:	f083 0320 	eor.w	r3, r3, #32
 8000dda:	6153      	str	r3, [r2, #20]
    Accelerometer_Read(&hi2c1, &accel_data, &gyro_data); // Read accelerometer and gyro data
 8000ddc:	4c22      	ldr	r4, [pc, #136]	@ (8000e68 <main+0xbc>)
 8000dde:	4d23      	ldr	r5, [pc, #140]	@ (8000e6c <main+0xc0>)
 8000de0:	4622      	mov	r2, r4
 8000de2:	4629      	mov	r1, r5
 8000de4:	481d      	ldr	r0, [pc, #116]	@ (8000e5c <main+0xb0>)
 8000de6:	f7ff fd8d 	bl	8000904 <Accelerometer_Read>
    angles_from_accel(accel_data, &pitch_calc, &roll_calc); // Calculate pitch and roll from accelerometer data
 8000dea:	4e21      	ldr	r6, [pc, #132]	@ (8000e70 <main+0xc4>)
 8000dec:	4f21      	ldr	r7, [pc, #132]	@ (8000e74 <main+0xc8>)
 8000dee:	4631      	mov	r1, r6
 8000df0:	4638      	mov	r0, r7
 8000df2:	ed95 0a00 	vldr	s0, [r5]
 8000df6:	edd5 0a01 	vldr	s1, [r5, #4]
 8000dfa:	ed95 1a02 	vldr	s2, [r5, #8]
 8000dfe:	f7ff fe13 	bl	8000a28 <angles_from_accel>
    angles_rate_from_gyro(gyro_data, &pitch_rate_calc, &roll_rate_calc); // Calculate pitch and roll rates from gyro data
 8000e02:	4d1d      	ldr	r5, [pc, #116]	@ (8000e78 <main+0xcc>)
 8000e04:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8000e84 <main+0xd8>
 8000e08:	4629      	mov	r1, r5
 8000e0a:	4640      	mov	r0, r8
 8000e0c:	ed94 0a00 	vldr	s0, [r4]
 8000e10:	edd4 0a01 	vldr	s1, [r4, #4]
 8000e14:	ed94 1a02 	vldr	s2, [r4, #8]
 8000e18:	f7ff fe52 	bl	8000ac0 <angles_rate_from_gyro>
    Kalman_GetAngle(&kalman_pitch, pitch_calc, pitch_rate_calc, dt);
 8000e1c:	4c17      	ldr	r4, [pc, #92]	@ (8000e7c <main+0xd0>)
 8000e1e:	ed94 1a00 	vldr	s2, [r4]
 8000e22:	edd8 0a00 	vldr	s1, [r8]
 8000e26:	ed97 0a00 	vldr	s0, [r7]
 8000e2a:	480e      	ldr	r0, [pc, #56]	@ (8000e64 <main+0xb8>)
 8000e2c:	f7ff fe82 	bl	8000b34 <Kalman_GetAngle>
    Kalman_GetAngle(&kalman_roll, roll_calc, roll_rate_calc, dt);
 8000e30:	ed94 1a00 	vldr	s2, [r4]
 8000e34:	edd5 0a00 	vldr	s1, [r5]
 8000e38:	ed96 0a00 	vldr	s0, [r6]
 8000e3c:	4808      	ldr	r0, [pc, #32]	@ (8000e60 <main+0xb4>)
 8000e3e:	f7ff fe79 	bl	8000b34 <Kalman_GetAngle>
    HAL_Delay(dt * 1000); // Delay for the time step
 8000e42:	edd4 7a00 	vldr	s15, [r4]
 8000e46:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8000e80 <main+0xd4>
 8000e4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e52:	ee17 0a90 	vmov	r0, s15
 8000e56:	f000 f867 	bl	8000f28 <HAL_Delay>
  while (1)
 8000e5a:	e7b9      	b.n	8000dd0 <main+0x24>
 8000e5c:	2000017c 	.word	0x2000017c
 8000e60:	2000008c 	.word	0x2000008c
 8000e64:	200000b4 	.word	0x200000b4
 8000e68:	200000dc 	.word	0x200000dc
 8000e6c:	200000e8 	.word	0x200000e8
 8000e70:	20000084 	.word	0x20000084
 8000e74:	20000088 	.word	0x20000088
 8000e78:	2000007c 	.word	0x2000007c
 8000e7c:	20000000 	.word	0x20000000
 8000e80:	447a0000 	.word	0x447a0000
 8000e84:	20000080 	.word	0x20000080

08000e88 <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e88:	4b10      	ldr	r3, [pc, #64]	@ (8000ecc <HAL_InitTick+0x44>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	b90b      	cbnz	r3, 8000e92 <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e8e:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8000e90:	4770      	bx	lr
{
 8000e92:	b510      	push	{r4, lr}
 8000e94:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e96:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e9e:	4a0c      	ldr	r2, [pc, #48]	@ (8000ed0 <HAL_InitTick+0x48>)
 8000ea0:	6810      	ldr	r0, [r2, #0]
 8000ea2:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ea6:	f000 f8a9 	bl	8000ffc <HAL_SYSTICK_Config>
 8000eaa:	b968      	cbnz	r0, 8000ec8 <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eac:	2c0f      	cmp	r4, #15
 8000eae:	d901      	bls.n	8000eb4 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 8000eb0:	2001      	movs	r0, #1
 8000eb2:	e00a      	b.n	8000eca <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	4621      	mov	r1, r4
 8000eb8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ebc:	f000 f88e 	bl	8000fdc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ec0:	4b04      	ldr	r3, [pc, #16]	@ (8000ed4 <HAL_InitTick+0x4c>)
 8000ec2:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ec4:	2000      	movs	r0, #0
 8000ec6:	e000      	b.n	8000eca <HAL_InitTick+0x42>
      status = HAL_ERROR;
 8000ec8:	2001      	movs	r0, #1
}
 8000eca:	bd10      	pop	{r4, pc}
 8000ecc:	20000004 	.word	0x20000004
 8000ed0:	2000000c 	.word	0x2000000c
 8000ed4:	20000008 	.word	0x20000008

08000ed8 <HAL_Init>:
{
 8000ed8:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eda:	4a09      	ldr	r2, [pc, #36]	@ (8000f00 <HAL_Init+0x28>)
 8000edc:	6813      	ldr	r3, [r2, #0]
 8000ede:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ee2:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee4:	2003      	movs	r0, #3
 8000ee6:	f000 f867 	bl	8000fb8 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000eea:	2000      	movs	r0, #0
 8000eec:	f7ff ffcc 	bl	8000e88 <HAL_InitTick>
 8000ef0:	b110      	cbz	r0, 8000ef8 <HAL_Init+0x20>
    status = HAL_ERROR;
 8000ef2:	2401      	movs	r4, #1
}
 8000ef4:	4620      	mov	r0, r4
 8000ef6:	bd10      	pop	{r4, pc}
 8000ef8:	4604      	mov	r4, r0
    HAL_MspInit();
 8000efa:	f000 fdcd 	bl	8001a98 <HAL_MspInit>
 8000efe:	e7f9      	b.n	8000ef4 <HAL_Init+0x1c>
 8000f00:	40022000 	.word	0x40022000

08000f04 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000f04:	4b03      	ldr	r3, [pc, #12]	@ (8000f14 <HAL_IncTick+0x10>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	4a03      	ldr	r2, [pc, #12]	@ (8000f18 <HAL_IncTick+0x14>)
 8000f0a:	6811      	ldr	r1, [r2, #0]
 8000f0c:	440b      	add	r3, r1
 8000f0e:	6013      	str	r3, [r2, #0]
}
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	20000004 	.word	0x20000004
 8000f18:	200001d0 	.word	0x200001d0

08000f1c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f1c:	4b01      	ldr	r3, [pc, #4]	@ (8000f24 <HAL_GetTick+0x8>)
 8000f1e:	6818      	ldr	r0, [r3, #0]
}
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	200001d0 	.word	0x200001d0

08000f28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f28:	b538      	push	{r3, r4, r5, lr}
 8000f2a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000f2c:	f7ff fff6 	bl	8000f1c <HAL_GetTick>
 8000f30:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f32:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8000f36:	d002      	beq.n	8000f3e <HAL_Delay+0x16>
  {
    wait += (uint32_t)uwTickFreq;
 8000f38:	4b04      	ldr	r3, [pc, #16]	@ (8000f4c <HAL_Delay+0x24>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f3e:	f7ff ffed 	bl	8000f1c <HAL_GetTick>
 8000f42:	1b40      	subs	r0, r0, r5
 8000f44:	42a0      	cmp	r0, r4
 8000f46:	d3fa      	bcc.n	8000f3e <HAL_Delay+0x16>
  {
  }
}
 8000f48:	bd38      	pop	{r3, r4, r5, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000004 	.word	0x20000004

08000f50 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000f50:	2800      	cmp	r0, #0
 8000f52:	db08      	blt.n	8000f66 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f54:	0109      	lsls	r1, r1, #4
 8000f56:	b2c9      	uxtb	r1, r1
 8000f58:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8000f5c:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8000f60:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8000f64:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f66:	f000 000f 	and.w	r0, r0, #15
 8000f6a:	0109      	lsls	r1, r1, #4
 8000f6c:	b2c9      	uxtb	r1, r1
 8000f6e:	4b01      	ldr	r3, [pc, #4]	@ (8000f74 <__NVIC_SetPriority+0x24>)
 8000f70:	5419      	strb	r1, [r3, r0]
  }
}
 8000f72:	4770      	bx	lr
 8000f74:	e000ed14 	.word	0xe000ed14

08000f78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f78:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f7a:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f7e:	f1c0 0c07 	rsb	ip, r0, #7
 8000f82:	f1bc 0f04 	cmp.w	ip, #4
 8000f86:	bf28      	it	cs
 8000f88:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f8c:	1d03      	adds	r3, r0, #4
 8000f8e:	2b06      	cmp	r3, #6
 8000f90:	d90f      	bls.n	8000fb2 <NVIC_EncodePriority+0x3a>
 8000f92:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f94:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8000f98:	fa0e f00c 	lsl.w	r0, lr, ip
 8000f9c:	ea21 0100 	bic.w	r1, r1, r0
 8000fa0:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa2:	fa0e fe03 	lsl.w	lr, lr, r3
 8000fa6:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8000faa:	ea41 0002 	orr.w	r0, r1, r2
 8000fae:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	e7ee      	b.n	8000f94 <NVIC_EncodePriority+0x1c>
	...

08000fb8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb8:	4a07      	ldr	r2, [pc, #28]	@ (8000fd8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000fba:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fbc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000fc0:	041b      	lsls	r3, r3, #16
 8000fc2:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fc4:	0200      	lsls	r0, r0, #8
 8000fc6:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fca:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000fcc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000fd4:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000fd6:	4770      	bx	lr
 8000fd8:	e000ed00 	.word	0xe000ed00

08000fdc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fdc:	b510      	push	{r4, lr}
 8000fde:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fe0:	4b05      	ldr	r3, [pc, #20]	@ (8000ff8 <HAL_NVIC_SetPriority+0x1c>)
 8000fe2:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fe4:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8000fe8:	f7ff ffc6 	bl	8000f78 <NVIC_EncodePriority>
 8000fec:	4601      	mov	r1, r0
 8000fee:	4620      	mov	r0, r4
 8000ff0:	f7ff ffae 	bl	8000f50 <__NVIC_SetPriority>
}
 8000ff4:	bd10      	pop	{r4, pc}
 8000ff6:	bf00      	nop
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ffc:	3801      	subs	r0, #1
 8000ffe:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8001002:	d20b      	bcs.n	800101c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001004:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001008:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100a:	4a05      	ldr	r2, [pc, #20]	@ (8001020 <HAL_SYSTICK_Config+0x24>)
 800100c:	21f0      	movs	r1, #240	@ 0xf0
 800100e:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001012:	2000      	movs	r0, #0
 8001014:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001016:	2207      	movs	r2, #7
 8001018:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800101a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800101c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800101e:	4770      	bx	lr
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001024:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001026:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 8001028:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800102a:	e06b      	b.n	8001104 <HAL_GPIO_Init+0xe0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800102c:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800102e:	005e      	lsls	r6, r3, #1
 8001030:	2403      	movs	r4, #3
 8001032:	40b4      	lsls	r4, r6
 8001034:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001038:	68cc      	ldr	r4, [r1, #12]
 800103a:	40b4      	lsls	r4, r6
 800103c:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 800103e:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001040:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001042:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001046:	684c      	ldr	r4, [r1, #4]
 8001048:	f3c4 1400 	ubfx	r4, r4, #4, #1
 800104c:	409c      	lsls	r4, r3
 800104e:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8001050:	6044      	str	r4, [r0, #4]
 8001052:	e069      	b.n	8001128 <HAL_GPIO_Init+0x104>

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001054:	6ac5      	ldr	r5, [r0, #44]	@ 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001056:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800105a:	f3c4 04c0 	ubfx	r4, r4, #3, #1
 800105e:	409c      	lsls	r4, r3
 8001060:	432c      	orrs	r4, r5
        GPIOx->ASCR = temp;
 8001062:	62c4      	str	r4, [r0, #44]	@ 0x2c
 8001064:	e066      	b.n	8001134 <HAL_GPIO_Init+0x110>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001066:	08dd      	lsrs	r5, r3, #3
 8001068:	3508      	adds	r5, #8
 800106a:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800106e:	f003 0c07 	and.w	ip, r3, #7
 8001072:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001076:	f04f 0e0f 	mov.w	lr, #15
 800107a:	fa0e fe0c 	lsl.w	lr, lr, ip
 800107e:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001082:	690c      	ldr	r4, [r1, #16]
 8001084:	fa04 f40c 	lsl.w	r4, r4, ip
 8001088:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 800108c:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8001090:	e067      	b.n	8001162 <HAL_GPIO_Init+0x13e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001092:	2406      	movs	r4, #6
 8001094:	e000      	b.n	8001098 <HAL_GPIO_Init+0x74>
 8001096:	2400      	movs	r4, #0
 8001098:	fa04 f40e 	lsl.w	r4, r4, lr
 800109c:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 800109e:	f10c 0c02 	add.w	ip, ip, #2
 80010a2:	4d5c      	ldr	r5, [pc, #368]	@ (8001214 <HAL_GPIO_Init+0x1f0>)
 80010a4:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010a8:	4c5b      	ldr	r4, [pc, #364]	@ (8001218 <HAL_GPIO_Init+0x1f4>)
 80010aa:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 80010ac:	43d4      	mvns	r4, r2
 80010ae:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010b2:	684f      	ldr	r7, [r1, #4]
 80010b4:	f417 1f80 	tst.w	r7, #1048576	@ 0x100000
 80010b8:	d001      	beq.n	80010be <HAL_GPIO_Init+0x9a>
        {
          temp |= iocurrent;
 80010ba:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 80010be:	4d56      	ldr	r5, [pc, #344]	@ (8001218 <HAL_GPIO_Init+0x1f4>)
 80010c0:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 80010c2:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 80010c4:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010c8:	684f      	ldr	r7, [r1, #4]
 80010ca:	f417 1f00 	tst.w	r7, #2097152	@ 0x200000
 80010ce:	d001      	beq.n	80010d4 <HAL_GPIO_Init+0xb0>
        {
          temp |= iocurrent;
 80010d0:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 80010d4:	4d50      	ldr	r5, [pc, #320]	@ (8001218 <HAL_GPIO_Init+0x1f4>)
 80010d6:	60ee      	str	r6, [r5, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80010d8:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 80010da:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010de:	684f      	ldr	r7, [r1, #4]
 80010e0:	f417 3f00 	tst.w	r7, #131072	@ 0x20000
 80010e4:	d001      	beq.n	80010ea <HAL_GPIO_Init+0xc6>
        {
          temp |= iocurrent;
 80010e6:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 80010ea:	4d4b      	ldr	r5, [pc, #300]	@ (8001218 <HAL_GPIO_Init+0x1f4>)
 80010ec:	606e      	str	r6, [r5, #4]

        temp = EXTI->IMR1;
 80010ee:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 80010f0:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010f2:	684e      	ldr	r6, [r1, #4]
 80010f4:	f416 3f80 	tst.w	r6, #65536	@ 0x10000
 80010f8:	d001      	beq.n	80010fe <HAL_GPIO_Init+0xda>
        {
          temp |= iocurrent;
 80010fa:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->IMR1 = temp;
 80010fe:	4a46      	ldr	r2, [pc, #280]	@ (8001218 <HAL_GPIO_Init+0x1f4>)
 8001100:	6014      	str	r4, [r2, #0]
      }
    }

    position++;
 8001102:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001104:	680a      	ldr	r2, [r1, #0]
 8001106:	fa32 f403 	lsrs.w	r4, r2, r3
 800110a:	f000 8081 	beq.w	8001210 <HAL_GPIO_Init+0x1ec>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800110e:	f04f 0c01 	mov.w	ip, #1
 8001112:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 8001116:	ea1c 0202 	ands.w	r2, ip, r2
 800111a:	d0f2      	beq.n	8001102 <HAL_GPIO_Init+0xde>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800111c:	684c      	ldr	r4, [r1, #4]
 800111e:	f004 0403 	and.w	r4, r4, #3
 8001122:	3c01      	subs	r4, #1
 8001124:	2c01      	cmp	r4, #1
 8001126:	d981      	bls.n	800102c <HAL_GPIO_Init+0x8>
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001128:	684c      	ldr	r4, [r1, #4]
 800112a:	f004 0e03 	and.w	lr, r4, #3
 800112e:	f1be 0f03 	cmp.w	lr, #3
 8001132:	d08f      	beq.n	8001054 <HAL_GPIO_Init+0x30>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001134:	684c      	ldr	r4, [r1, #4]
 8001136:	f004 0403 	and.w	r4, r4, #3
 800113a:	2c03      	cmp	r4, #3
 800113c:	d00c      	beq.n	8001158 <HAL_GPIO_Init+0x134>
        temp = GPIOx->PUPDR;
 800113e:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001140:	005d      	lsls	r5, r3, #1
 8001142:	f04f 0c03 	mov.w	ip, #3
 8001146:	fa0c fc05 	lsl.w	ip, ip, r5
 800114a:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800114e:	688c      	ldr	r4, [r1, #8]
 8001150:	40ac      	lsls	r4, r5
 8001152:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 8001156:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001158:	684c      	ldr	r4, [r1, #4]
 800115a:	f004 0403 	and.w	r4, r4, #3
 800115e:	2c02      	cmp	r4, #2
 8001160:	d081      	beq.n	8001066 <HAL_GPIO_Init+0x42>
      temp = GPIOx->MODER;
 8001162:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001164:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001168:	f04f 0c03 	mov.w	ip, #3
 800116c:	fa0c fc0e 	lsl.w	ip, ip, lr
 8001170:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001174:	684c      	ldr	r4, [r1, #4]
 8001176:	f004 0403 	and.w	r4, r4, #3
 800117a:	fa04 f40e 	lsl.w	r4, r4, lr
 800117e:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8001182:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001184:	684c      	ldr	r4, [r1, #4]
 8001186:	f414 3f40 	tst.w	r4, #196608	@ 0x30000
 800118a:	d0ba      	beq.n	8001102 <HAL_GPIO_Init+0xde>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118c:	4c23      	ldr	r4, [pc, #140]	@ (800121c <HAL_GPIO_Init+0x1f8>)
 800118e:	6e25      	ldr	r5, [r4, #96]	@ 0x60
 8001190:	f045 0501 	orr.w	r5, r5, #1
 8001194:	6625      	str	r5, [r4, #96]	@ 0x60
 8001196:	6e24      	ldr	r4, [r4, #96]	@ 0x60
 8001198:	f004 0401 	and.w	r4, r4, #1
 800119c:	9401      	str	r4, [sp, #4]
 800119e:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 80011a0:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 80011a4:	f10c 0502 	add.w	r5, ip, #2
 80011a8:	4c1a      	ldr	r4, [pc, #104]	@ (8001214 <HAL_GPIO_Init+0x1f0>)
 80011aa:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011ae:	f003 0e03 	and.w	lr, r3, #3
 80011b2:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80011b6:	240f      	movs	r4, #15
 80011b8:	fa04 f40e 	lsl.w	r4, r4, lr
 80011bc:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011c0:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
 80011c4:	f43f af67 	beq.w	8001096 <HAL_GPIO_Init+0x72>
 80011c8:	4c15      	ldr	r4, [pc, #84]	@ (8001220 <HAL_GPIO_Init+0x1fc>)
 80011ca:	42a0      	cmp	r0, r4
 80011cc:	d016      	beq.n	80011fc <HAL_GPIO_Init+0x1d8>
 80011ce:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80011d2:	42a0      	cmp	r0, r4
 80011d4:	d014      	beq.n	8001200 <HAL_GPIO_Init+0x1dc>
 80011d6:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80011da:	42a0      	cmp	r0, r4
 80011dc:	d012      	beq.n	8001204 <HAL_GPIO_Init+0x1e0>
 80011de:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80011e2:	42a0      	cmp	r0, r4
 80011e4:	d010      	beq.n	8001208 <HAL_GPIO_Init+0x1e4>
 80011e6:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80011ea:	42a0      	cmp	r0, r4
 80011ec:	d00e      	beq.n	800120c <HAL_GPIO_Init+0x1e8>
 80011ee:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80011f2:	42a0      	cmp	r0, r4
 80011f4:	f43f af4d 	beq.w	8001092 <HAL_GPIO_Init+0x6e>
 80011f8:	2407      	movs	r4, #7
 80011fa:	e74d      	b.n	8001098 <HAL_GPIO_Init+0x74>
 80011fc:	2401      	movs	r4, #1
 80011fe:	e74b      	b.n	8001098 <HAL_GPIO_Init+0x74>
 8001200:	2402      	movs	r4, #2
 8001202:	e749      	b.n	8001098 <HAL_GPIO_Init+0x74>
 8001204:	2403      	movs	r4, #3
 8001206:	e747      	b.n	8001098 <HAL_GPIO_Init+0x74>
 8001208:	2404      	movs	r4, #4
 800120a:	e745      	b.n	8001098 <HAL_GPIO_Init+0x74>
 800120c:	2405      	movs	r4, #5
 800120e:	e743      	b.n	8001098 <HAL_GPIO_Init+0x74>
  }
}
 8001210:	b003      	add	sp, #12
 8001212:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001214:	40010000 	.word	0x40010000
 8001218:	40010400 	.word	0x40010400
 800121c:	40021000 	.word	0x40021000
 8001220:	48000400 	.word	0x48000400

08001224 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001224:	b10a      	cbz	r2, 800122a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001226:	6181      	str	r1, [r0, #24]
 8001228:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800122a:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 800122c:	4770      	bx	lr

0800122e <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800122e:	6803      	ldr	r3, [r0, #0]
 8001230:	699a      	ldr	r2, [r3, #24]
 8001232:	f012 0f02 	tst.w	r2, #2
 8001236:	d001      	beq.n	800123c <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001238:	2200      	movs	r2, #0
 800123a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800123c:	6803      	ldr	r3, [r0, #0]
 800123e:	699a      	ldr	r2, [r3, #24]
 8001240:	f012 0f01 	tst.w	r2, #1
 8001244:	d103      	bne.n	800124e <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001246:	699a      	ldr	r2, [r3, #24]
 8001248:	f042 0201 	orr.w	r2, r2, #1
 800124c:	619a      	str	r2, [r3, #24]
  }
}
 800124e:	4770      	bx	lr

08001250 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001250:	b410      	push	{r4}
 8001252:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001254:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8001258:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800125c:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800125e:	4321      	orrs	r1, r4
 8001260:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001264:	6802      	ldr	r2, [r0, #0]
 8001266:	6853      	ldr	r3, [r2, #4]
 8001268:	0d64      	lsrs	r4, r4, #21
 800126a:	f404 6480 	and.w	r4, r4, #1024	@ 0x400
 800126e:	f044 747f 	orr.w	r4, r4, #66846720	@ 0x3fc0000
 8001272:	f444 3458 	orr.w	r4, r4, #221184	@ 0x36000
 8001276:	f444 747f 	orr.w	r4, r4, #1020	@ 0x3fc
 800127a:	f044 0403 	orr.w	r4, r4, #3
 800127e:	ea23 0304 	bic.w	r3, r3, r4
 8001282:	430b      	orrs	r3, r1
 8001284:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001286:	f85d 4b04 	ldr.w	r4, [sp], #4
 800128a:	4770      	bx	lr

0800128c <I2C_IsErrorOccurred>:
{
 800128c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001290:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 8001292:	6803      	ldr	r3, [r0, #0]
 8001294:	699e      	ldr	r6, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001296:	f016 0610 	ands.w	r6, r6, #16
 800129a:	d07c      	beq.n	8001396 <I2C_IsErrorOccurred+0x10a>
 800129c:	460d      	mov	r5, r1
 800129e:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80012a0:	2210      	movs	r2, #16
 80012a2:	61da      	str	r2, [r3, #28]
  uint32_t error_code = 0;
 80012a4:	2600      	movs	r6, #0
  HAL_StatusTypeDef status = HAL_OK;
 80012a6:	4637      	mov	r7, r6
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80012a8:	6823      	ldr	r3, [r4, #0]
 80012aa:	6998      	ldr	r0, [r3, #24]
 80012ac:	f010 0f20 	tst.w	r0, #32
 80012b0:	d130      	bne.n	8001314 <I2C_IsErrorOccurred+0x88>
 80012b2:	bb7f      	cbnz	r7, 8001314 <I2C_IsErrorOccurred+0x88>
      if (Timeout != HAL_MAX_DELAY)
 80012b4:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 80012b8:	d0f6      	beq.n	80012a8 <I2C_IsErrorOccurred+0x1c>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80012ba:	f7ff fe2f 	bl	8000f1c <HAL_GetTick>
 80012be:	eba0 0008 	sub.w	r0, r0, r8
 80012c2:	42a8      	cmp	r0, r5
 80012c4:	d801      	bhi.n	80012ca <I2C_IsErrorOccurred+0x3e>
 80012c6:	2d00      	cmp	r5, #0
 80012c8:	d1ee      	bne.n	80012a8 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80012ca:	6821      	ldr	r1, [r4, #0]
 80012cc:	684b      	ldr	r3, [r1, #4]
 80012ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          tmp2 = hi2c->Mode;
 80012d2:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 80012d6:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80012d8:	6988      	ldr	r0, [r1, #24]
 80012da:	f410 4f00 	tst.w	r0, #32768	@ 0x8000
 80012de:	d002      	beq.n	80012e6 <I2C_IsErrorOccurred+0x5a>
 80012e0:	b90b      	cbnz	r3, 80012e6 <I2C_IsErrorOccurred+0x5a>
              (tmp1 != I2C_CR2_STOP) && \
 80012e2:	2a20      	cmp	r2, #32
 80012e4:	d10e      	bne.n	8001304 <I2C_IsErrorOccurred+0x78>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80012e6:	6823      	ldr	r3, [r4, #0]
 80012e8:	699b      	ldr	r3, [r3, #24]
 80012ea:	f013 0f20 	tst.w	r3, #32
 80012ee:	d1db      	bne.n	80012a8 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80012f0:	f7ff fe14 	bl	8000f1c <HAL_GetTick>
 80012f4:	eba0 0008 	sub.w	r0, r0, r8
 80012f8:	2819      	cmp	r0, #25
 80012fa:	d9f4      	bls.n	80012e6 <I2C_IsErrorOccurred+0x5a>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80012fc:	f046 0620 	orr.w	r6, r6, #32
              status = HAL_ERROR;
 8001300:	2701      	movs	r7, #1
              break;
 8001302:	e7d1      	b.n	80012a8 <I2C_IsErrorOccurred+0x1c>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001304:	684b      	ldr	r3, [r1, #4]
 8001306:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800130a:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 800130c:	f7ff fe06 	bl	8000f1c <HAL_GetTick>
 8001310:	4680      	mov	r8, r0
 8001312:	e7e8      	b.n	80012e6 <I2C_IsErrorOccurred+0x5a>
    if (status == HAL_OK)
 8001314:	b90f      	cbnz	r7, 800131a <I2C_IsErrorOccurred+0x8e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001316:	2220      	movs	r2, #32
 8001318:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 800131a:	f046 0604 	orr.w	r6, r6, #4
    status = HAL_ERROR;
 800131e:	2501      	movs	r5, #1
  itflag = hi2c->Instance->ISR;
 8001320:	6822      	ldr	r2, [r4, #0]
 8001322:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001324:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001328:	d005      	beq.n	8001336 <I2C_IsErrorOccurred+0xaa>
    error_code |= HAL_I2C_ERROR_BERR;
 800132a:	f046 0601 	orr.w	r6, r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800132e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001332:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8001334:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001336:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800133a:	d006      	beq.n	800134a <I2C_IsErrorOccurred+0xbe>
    error_code |= HAL_I2C_ERROR_OVR;
 800133c:	f046 0608 	orr.w	r6, r6, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001340:	6822      	ldr	r2, [r4, #0]
 8001342:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001346:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8001348:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800134a:	f413 7f00 	tst.w	r3, #512	@ 0x200
 800134e:	d024      	beq.n	800139a <I2C_IsErrorOccurred+0x10e>
    error_code |= HAL_I2C_ERROR_ARLO;
 8001350:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001354:	6823      	ldr	r3, [r4, #0]
 8001356:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800135a:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 800135c:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 800135e:	4620      	mov	r0, r4
 8001360:	f7ff ff65 	bl	800122e <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8001364:	6822      	ldr	r2, [r4, #0]
 8001366:	6853      	ldr	r3, [r2, #4]
 8001368:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 800136c:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 8001370:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8001374:	f023 0301 	bic.w	r3, r3, #1
 8001378:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 800137a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800137c:	4333      	orrs	r3, r6
 800137e:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001380:	2320      	movs	r3, #32
 8001382:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001386:	2300      	movs	r3, #0
 8001388:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 800138c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 8001390:	4628      	mov	r0, r5
 8001392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8001396:	2500      	movs	r5, #0
 8001398:	e7c2      	b.n	8001320 <I2C_IsErrorOccurred+0x94>
  if (status != HAL_OK)
 800139a:	2d00      	cmp	r5, #0
 800139c:	d0f8      	beq.n	8001390 <I2C_IsErrorOccurred+0x104>
 800139e:	e7de      	b.n	800135e <I2C_IsErrorOccurred+0xd2>

080013a0 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80013a0:	b570      	push	{r4, r5, r6, lr}
 80013a2:	4604      	mov	r4, r0
 80013a4:	460d      	mov	r5, r1
 80013a6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80013a8:	6823      	ldr	r3, [r4, #0]
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	f013 0f02 	tst.w	r3, #2
 80013b0:	d122      	bne.n	80013f8 <I2C_WaitOnTXISFlagUntilTimeout+0x58>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80013b2:	4632      	mov	r2, r6
 80013b4:	4629      	mov	r1, r5
 80013b6:	4620      	mov	r0, r4
 80013b8:	f7ff ff68 	bl	800128c <I2C_IsErrorOccurred>
 80013bc:	b9f0      	cbnz	r0, 80013fc <I2C_WaitOnTXISFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 80013be:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 80013c2:	d0f1      	beq.n	80013a8 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013c4:	f7ff fdaa 	bl	8000f1c <HAL_GetTick>
 80013c8:	1b80      	subs	r0, r0, r6
 80013ca:	42a8      	cmp	r0, r5
 80013cc:	d801      	bhi.n	80013d2 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 80013ce:	2d00      	cmp	r5, #0
 80013d0:	d1ea      	bne.n	80013a8 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80013d2:	6823      	ldr	r3, [r4, #0]
 80013d4:	699b      	ldr	r3, [r3, #24]
 80013d6:	f013 0f02 	tst.w	r3, #2
 80013da:	d1e5      	bne.n	80013a8 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013dc:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80013de:	f043 0320 	orr.w	r3, r3, #32
 80013e2:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80013e4:	2320      	movs	r3, #32
 80013e6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80013ea:	2300      	movs	r3, #0
 80013ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 80013f0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
          return HAL_ERROR;
 80013f4:	2001      	movs	r0, #1
 80013f6:	e000      	b.n	80013fa <I2C_WaitOnTXISFlagUntilTimeout+0x5a>
  return HAL_OK;
 80013f8:	2000      	movs	r0, #0
}
 80013fa:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80013fc:	2001      	movs	r0, #1
 80013fe:	e7fc      	b.n	80013fa <I2C_WaitOnTXISFlagUntilTimeout+0x5a>

08001400 <I2C_WaitOnFlagUntilTimeout>:
{
 8001400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001404:	4605      	mov	r5, r0
 8001406:	4688      	mov	r8, r1
 8001408:	4617      	mov	r7, r2
 800140a:	461e      	mov	r6, r3
 800140c:	f8dd 9020 	ldr.w	r9, [sp, #32]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001410:	682b      	ldr	r3, [r5, #0]
 8001412:	699c      	ldr	r4, [r3, #24]
 8001414:	ea38 0404 	bics.w	r4, r8, r4
 8001418:	bf0c      	ite	eq
 800141a:	2301      	moveq	r3, #1
 800141c:	2300      	movne	r3, #0
 800141e:	42bb      	cmp	r3, r7
 8001420:	d127      	bne.n	8001472 <I2C_WaitOnFlagUntilTimeout+0x72>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001422:	464a      	mov	r2, r9
 8001424:	4631      	mov	r1, r6
 8001426:	4628      	mov	r0, r5
 8001428:	f7ff ff30 	bl	800128c <I2C_IsErrorOccurred>
 800142c:	bb20      	cbnz	r0, 8001478 <I2C_WaitOnFlagUntilTimeout+0x78>
    if (Timeout != HAL_MAX_DELAY)
 800142e:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8001432:	d0ed      	beq.n	8001410 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001434:	f7ff fd72 	bl	8000f1c <HAL_GetTick>
 8001438:	eba0 0009 	sub.w	r0, r0, r9
 800143c:	42b0      	cmp	r0, r6
 800143e:	d801      	bhi.n	8001444 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001440:	2e00      	cmp	r6, #0
 8001442:	d1e5      	bne.n	8001410 <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001444:	682b      	ldr	r3, [r5, #0]
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	ea38 0303 	bics.w	r3, r8, r3
 800144c:	bf0c      	ite	eq
 800144e:	2301      	moveq	r3, #1
 8001450:	2300      	movne	r3, #0
 8001452:	42bb      	cmp	r3, r7
 8001454:	d1dc      	bne.n	8001410 <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001456:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8001458:	f043 0320 	orr.w	r3, r3, #32
 800145c:	646b      	str	r3, [r5, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800145e:	2320      	movs	r3, #32
 8001460:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001464:	2300      	movs	r3, #0
 8001466:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 800146a:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
          return HAL_ERROR;
 800146e:	2001      	movs	r0, #1
 8001470:	e000      	b.n	8001474 <I2C_WaitOnFlagUntilTimeout+0x74>
  return HAL_OK;
 8001472:	2000      	movs	r0, #0
}
 8001474:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return HAL_ERROR;
 8001478:	2001      	movs	r0, #1
 800147a:	e7fb      	b.n	8001474 <I2C_WaitOnFlagUntilTimeout+0x74>

0800147c <I2C_RequestMemoryWrite>:
{
 800147c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001480:	b082      	sub	sp, #8
 8001482:	4604      	mov	r4, r0
 8001484:	4690      	mov	r8, r2
 8001486:	461d      	mov	r5, r3
 8001488:	9e08      	ldr	r6, [sp, #32]
 800148a:	9f09      	ldr	r7, [sp, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800148c:	4b19      	ldr	r3, [pc, #100]	@ (80014f4 <I2C_RequestMemoryWrite+0x78>)
 800148e:	9300      	str	r3, [sp, #0]
 8001490:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001494:	b2ea      	uxtb	r2, r5
 8001496:	f7ff fedb 	bl	8001250 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800149a:	463a      	mov	r2, r7
 800149c:	4631      	mov	r1, r6
 800149e:	4620      	mov	r0, r4
 80014a0:	f7ff ff7e 	bl	80013a0 <I2C_WaitOnTXISFlagUntilTimeout>
 80014a4:	b9f8      	cbnz	r0, 80014e6 <I2C_RequestMemoryWrite+0x6a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80014a6:	2d01      	cmp	r5, #1
 80014a8:	d10e      	bne.n	80014c8 <I2C_RequestMemoryWrite+0x4c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80014aa:	6823      	ldr	r3, [r4, #0]
 80014ac:	fa5f f288 	uxtb.w	r2, r8
 80014b0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80014b2:	9700      	str	r7, [sp, #0]
 80014b4:	4633      	mov	r3, r6
 80014b6:	2200      	movs	r2, #0
 80014b8:	2180      	movs	r1, #128	@ 0x80
 80014ba:	4620      	mov	r0, r4
 80014bc:	f7ff ffa0 	bl	8001400 <I2C_WaitOnFlagUntilTimeout>
 80014c0:	b9a8      	cbnz	r0, 80014ee <I2C_RequestMemoryWrite+0x72>
}
 80014c2:	b002      	add	sp, #8
 80014c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80014c8:	6823      	ldr	r3, [r4, #0]
 80014ca:	ea4f 2218 	mov.w	r2, r8, lsr #8
 80014ce:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80014d0:	463a      	mov	r2, r7
 80014d2:	4631      	mov	r1, r6
 80014d4:	4620      	mov	r0, r4
 80014d6:	f7ff ff63 	bl	80013a0 <I2C_WaitOnTXISFlagUntilTimeout>
 80014da:	b930      	cbnz	r0, 80014ea <I2C_RequestMemoryWrite+0x6e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80014dc:	6823      	ldr	r3, [r4, #0]
 80014de:	fa5f f288 	uxtb.w	r2, r8
 80014e2:	629a      	str	r2, [r3, #40]	@ 0x28
 80014e4:	e7e5      	b.n	80014b2 <I2C_RequestMemoryWrite+0x36>
    return HAL_ERROR;
 80014e6:	2001      	movs	r0, #1
 80014e8:	e7eb      	b.n	80014c2 <I2C_RequestMemoryWrite+0x46>
      return HAL_ERROR;
 80014ea:	2001      	movs	r0, #1
 80014ec:	e7e9      	b.n	80014c2 <I2C_RequestMemoryWrite+0x46>
    return HAL_ERROR;
 80014ee:	2001      	movs	r0, #1
 80014f0:	e7e7      	b.n	80014c2 <I2C_RequestMemoryWrite+0x46>
 80014f2:	bf00      	nop
 80014f4:	80002000 	.word	0x80002000

080014f8 <I2C_RequestMemoryRead>:
{
 80014f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014fc:	b082      	sub	sp, #8
 80014fe:	4604      	mov	r4, r0
 8001500:	4690      	mov	r8, r2
 8001502:	461d      	mov	r5, r3
 8001504:	9e08      	ldr	r6, [sp, #32]
 8001506:	9f09      	ldr	r7, [sp, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001508:	4b18      	ldr	r3, [pc, #96]	@ (800156c <I2C_RequestMemoryRead+0x74>)
 800150a:	9300      	str	r3, [sp, #0]
 800150c:	2300      	movs	r3, #0
 800150e:	b2ea      	uxtb	r2, r5
 8001510:	f7ff fe9e 	bl	8001250 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001514:	463a      	mov	r2, r7
 8001516:	4631      	mov	r1, r6
 8001518:	4620      	mov	r0, r4
 800151a:	f7ff ff41 	bl	80013a0 <I2C_WaitOnTXISFlagUntilTimeout>
 800151e:	b9f8      	cbnz	r0, 8001560 <I2C_RequestMemoryRead+0x68>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001520:	2d01      	cmp	r5, #1
 8001522:	d10e      	bne.n	8001542 <I2C_RequestMemoryRead+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001524:	6823      	ldr	r3, [r4, #0]
 8001526:	fa5f f288 	uxtb.w	r2, r8
 800152a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800152c:	9700      	str	r7, [sp, #0]
 800152e:	4633      	mov	r3, r6
 8001530:	2200      	movs	r2, #0
 8001532:	2140      	movs	r1, #64	@ 0x40
 8001534:	4620      	mov	r0, r4
 8001536:	f7ff ff63 	bl	8001400 <I2C_WaitOnFlagUntilTimeout>
 800153a:	b9a8      	cbnz	r0, 8001568 <I2C_RequestMemoryRead+0x70>
}
 800153c:	b002      	add	sp, #8
 800153e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001542:	6823      	ldr	r3, [r4, #0]
 8001544:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8001548:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800154a:	463a      	mov	r2, r7
 800154c:	4631      	mov	r1, r6
 800154e:	4620      	mov	r0, r4
 8001550:	f7ff ff26 	bl	80013a0 <I2C_WaitOnTXISFlagUntilTimeout>
 8001554:	b930      	cbnz	r0, 8001564 <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001556:	6823      	ldr	r3, [r4, #0]
 8001558:	fa5f f288 	uxtb.w	r2, r8
 800155c:	629a      	str	r2, [r3, #40]	@ 0x28
 800155e:	e7e5      	b.n	800152c <I2C_RequestMemoryRead+0x34>
    return HAL_ERROR;
 8001560:	2001      	movs	r0, #1
 8001562:	e7eb      	b.n	800153c <I2C_RequestMemoryRead+0x44>
      return HAL_ERROR;
 8001564:	2001      	movs	r0, #1
 8001566:	e7e9      	b.n	800153c <I2C_RequestMemoryRead+0x44>
    return HAL_ERROR;
 8001568:	2001      	movs	r0, #1
 800156a:	e7e7      	b.n	800153c <I2C_RequestMemoryRead+0x44>
 800156c:	80002000 	.word	0x80002000

08001570 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8001570:	b570      	push	{r4, r5, r6, lr}
 8001572:	4604      	mov	r4, r0
 8001574:	460d      	mov	r5, r1
 8001576:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001578:	e004      	b.n	8001584 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800157a:	6823      	ldr	r3, [r4, #0]
 800157c:	699b      	ldr	r3, [r3, #24]
 800157e:	f013 0f20 	tst.w	r3, #32
 8001582:	d012      	beq.n	80015aa <I2C_WaitOnSTOPFlagUntilTimeout+0x3a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001584:	6823      	ldr	r3, [r4, #0]
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	f013 0f20 	tst.w	r3, #32
 800158c:	d11b      	bne.n	80015c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x56>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800158e:	4632      	mov	r2, r6
 8001590:	4629      	mov	r1, r5
 8001592:	4620      	mov	r0, r4
 8001594:	f7ff fe7a 	bl	800128c <I2C_IsErrorOccurred>
 8001598:	b9b8      	cbnz	r0, 80015ca <I2C_WaitOnSTOPFlagUntilTimeout+0x5a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800159a:	f7ff fcbf 	bl	8000f1c <HAL_GetTick>
 800159e:	1b80      	subs	r0, r0, r6
 80015a0:	42a8      	cmp	r0, r5
 80015a2:	d8ea      	bhi.n	800157a <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
 80015a4:	2d00      	cmp	r5, #0
 80015a6:	d1ed      	bne.n	8001584 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
 80015a8:	e7e7      	b.n	800157a <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015aa:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80015ac:	f043 0320 	orr.w	r3, r3, #32
 80015b0:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80015b2:	2320      	movs	r3, #32
 80015b4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80015b8:	2300      	movs	r3, #0
 80015ba:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 80015be:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return HAL_ERROR;
 80015c2:	2001      	movs	r0, #1
 80015c4:	e000      	b.n	80015c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x58>
  return HAL_OK;
 80015c6:	2000      	movs	r0, #0
}
 80015c8:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80015ca:	2001      	movs	r0, #1
 80015cc:	e7fc      	b.n	80015c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x58>

080015ce <HAL_I2C_Init>:
  if (hi2c == NULL)
 80015ce:	2800      	cmp	r0, #0
 80015d0:	d05f      	beq.n	8001692 <HAL_I2C_Init+0xc4>
{
 80015d2:	b510      	push	{r4, lr}
 80015d4:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015d6:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d048      	beq.n	8001670 <HAL_I2C_Init+0xa2>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80015de:	2324      	movs	r3, #36	@ 0x24
 80015e0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 80015e4:	6822      	ldr	r2, [r4, #0]
 80015e6:	6813      	ldr	r3, [r2, #0]
 80015e8:	f023 0301 	bic.w	r3, r3, #1
 80015ec:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80015ee:	6863      	ldr	r3, [r4, #4]
 80015f0:	6822      	ldr	r2, [r4, #0]
 80015f2:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 80015f6:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80015f8:	6822      	ldr	r2, [r4, #0]
 80015fa:	6893      	ldr	r3, [r2, #8]
 80015fc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001600:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001602:	68e3      	ldr	r3, [r4, #12]
 8001604:	2b01      	cmp	r3, #1
 8001606:	d038      	beq.n	800167a <HAL_I2C_Init+0xac>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001608:	68a3      	ldr	r3, [r4, #8]
 800160a:	6822      	ldr	r2, [r4, #0]
 800160c:	f443 4304 	orr.w	r3, r3, #33792	@ 0x8400
 8001610:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001612:	68e3      	ldr	r3, [r4, #12]
 8001614:	2b02      	cmp	r3, #2
 8001616:	d036      	beq.n	8001686 <HAL_I2C_Init+0xb8>
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001618:	6822      	ldr	r2, [r4, #0]
 800161a:	6853      	ldr	r3, [r2, #4]
 800161c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001620:	6053      	str	r3, [r2, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001622:	6822      	ldr	r2, [r4, #0]
 8001624:	6853      	ldr	r3, [r2, #4]
 8001626:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800162a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800162e:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001630:	6822      	ldr	r2, [r4, #0]
 8001632:	68d3      	ldr	r3, [r2, #12]
 8001634:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001638:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800163a:	6923      	ldr	r3, [r4, #16]
 800163c:	6962      	ldr	r2, [r4, #20]
 800163e:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001640:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001642:	6822      	ldr	r2, [r4, #0]
 8001644:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001648:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800164a:	69e3      	ldr	r3, [r4, #28]
 800164c:	6a21      	ldr	r1, [r4, #32]
 800164e:	6822      	ldr	r2, [r4, #0]
 8001650:	430b      	orrs	r3, r1
 8001652:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001654:	6822      	ldr	r2, [r4, #0]
 8001656:	6813      	ldr	r3, [r2, #0]
 8001658:	f043 0301 	orr.w	r3, r3, #1
 800165c:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800165e:	2000      	movs	r0, #0
 8001660:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001662:	2320      	movs	r3, #32
 8001664:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001668:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800166a:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 800166e:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001670:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 8001674:	f000 fa28 	bl	8001ac8 <HAL_I2C_MspInit>
 8001678:	e7b1      	b.n	80015de <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800167a:	68a3      	ldr	r3, [r4, #8]
 800167c:	6822      	ldr	r2, [r4, #0]
 800167e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001682:	6093      	str	r3, [r2, #8]
 8001684:	e7c5      	b.n	8001612 <HAL_I2C_Init+0x44>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001686:	6822      	ldr	r2, [r4, #0]
 8001688:	6853      	ldr	r3, [r2, #4]
 800168a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800168e:	6053      	str	r3, [r2, #4]
 8001690:	e7c7      	b.n	8001622 <HAL_I2C_Init+0x54>
    return HAL_ERROR;
 8001692:	2001      	movs	r0, #1
}
 8001694:	4770      	bx	lr

08001696 <HAL_I2C_Mem_Write>:
{
 8001696:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800169a:	b083      	sub	sp, #12
 800169c:	460e      	mov	r6, r1
 800169e:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 80016a2:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 80016a4:	f890 1041 	ldrb.w	r1, [r0, #65]	@ 0x41
 80016a8:	2920      	cmp	r1, #32
 80016aa:	f040 80bb 	bne.w	8001824 <HAL_I2C_Mem_Write+0x18e>
 80016ae:	4604      	mov	r4, r0
 80016b0:	4691      	mov	r9, r2
 80016b2:	4698      	mov	r8, r3
    if ((pData == NULL) || (Size == 0U))
 80016b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80016b6:	b1cb      	cbz	r3, 80016ec <HAL_I2C_Mem_Write+0x56>
 80016b8:	f1ba 0f00 	cmp.w	sl, #0
 80016bc:	d016      	beq.n	80016ec <HAL_I2C_Mem_Write+0x56>
    __HAL_LOCK(hi2c);
 80016be:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	f000 80b2 	beq.w	800182c <HAL_I2C_Mem_Write+0x196>
 80016c8:	f04f 0b01 	mov.w	fp, #1
 80016cc:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 80016d0:	f7ff fc24 	bl	8000f1c <HAL_GetTick>
 80016d4:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80016d6:	9000      	str	r0, [sp, #0]
 80016d8:	2319      	movs	r3, #25
 80016da:	465a      	mov	r2, fp
 80016dc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80016e0:	4620      	mov	r0, r4
 80016e2:	f7ff fe8d 	bl	8001400 <I2C_WaitOnFlagUntilTimeout>
 80016e6:	b130      	cbz	r0, 80016f6 <HAL_I2C_Mem_Write+0x60>
      return HAL_ERROR;
 80016e8:	2001      	movs	r0, #1
 80016ea:	e09c      	b.n	8001826 <HAL_I2C_Mem_Write+0x190>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80016ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016f0:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 80016f2:	2001      	movs	r0, #1
 80016f4:	e097      	b.n	8001826 <HAL_I2C_Mem_Write+0x190>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80016f6:	2321      	movs	r3, #33	@ 0x21
 80016f8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80016fc:	2340      	movs	r3, #64	@ 0x40
 80016fe:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001702:	2300      	movs	r3, #0
 8001704:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 8001706:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8001708:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 800170a:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800170e:	6363      	str	r3, [r4, #52]	@ 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001710:	9701      	str	r7, [sp, #4]
 8001712:	9500      	str	r5, [sp, #0]
 8001714:	4643      	mov	r3, r8
 8001716:	464a      	mov	r2, r9
 8001718:	4631      	mov	r1, r6
 800171a:	4620      	mov	r0, r4
 800171c:	f7ff feae 	bl	800147c <I2C_RequestMemoryWrite>
 8001720:	b970      	cbnz	r0, 8001740 <HAL_I2C_Mem_Write+0xaa>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001722:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001724:	b29b      	uxth	r3, r3
 8001726:	2bff      	cmp	r3, #255	@ 0xff
 8001728:	d90f      	bls.n	800174a <HAL_I2C_Mem_Write+0xb4>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800172a:	22ff      	movs	r2, #255	@ 0xff
 800172c:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800172e:	2300      	movs	r3, #0
 8001730:	9300      	str	r3, [sp, #0]
 8001732:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001736:	4631      	mov	r1, r6
 8001738:	4620      	mov	r0, r4
 800173a:	f7ff fd89 	bl	8001250 <I2C_TransferConfig>
 800173e:	e021      	b.n	8001784 <HAL_I2C_Mem_Write+0xee>
      __HAL_UNLOCK(hi2c);
 8001740:	2300      	movs	r3, #0
 8001742:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8001746:	4658      	mov	r0, fp
 8001748:	e06d      	b.n	8001826 <HAL_I2C_Mem_Write+0x190>
      hi2c->XferSize = hi2c->XferCount;
 800174a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800174c:	b292      	uxth	r2, r2
 800174e:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001750:	2300      	movs	r3, #0
 8001752:	9300      	str	r3, [sp, #0]
 8001754:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001758:	b2d2      	uxtb	r2, r2
 800175a:	4631      	mov	r1, r6
 800175c:	4620      	mov	r0, r4
 800175e:	f7ff fd77 	bl	8001250 <I2C_TransferConfig>
 8001762:	e00f      	b.n	8001784 <HAL_I2C_Mem_Write+0xee>
          hi2c->XferSize = hi2c->XferCount;
 8001764:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8001766:	b292      	uxth	r2, r2
 8001768:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800176a:	2300      	movs	r3, #0
 800176c:	9300      	str	r3, [sp, #0]
 800176e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001772:	b2d2      	uxtb	r2, r2
 8001774:	4631      	mov	r1, r6
 8001776:	4620      	mov	r0, r4
 8001778:	f7ff fd6a 	bl	8001250 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800177c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800177e:	b29b      	uxth	r3, r3
 8001780:	2b00      	cmp	r3, #0
 8001782:	d033      	beq.n	80017ec <HAL_I2C_Mem_Write+0x156>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001784:	463a      	mov	r2, r7
 8001786:	4629      	mov	r1, r5
 8001788:	4620      	mov	r0, r4
 800178a:	f7ff fe09 	bl	80013a0 <I2C_WaitOnTXISFlagUntilTimeout>
 800178e:	2800      	cmp	r0, #0
 8001790:	d14e      	bne.n	8001830 <HAL_I2C_Mem_Write+0x19a>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001792:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001794:	6823      	ldr	r3, [r4, #0]
 8001796:	7812      	ldrb	r2, [r2, #0]
 8001798:	629a      	str	r2, [r3, #40]	@ 0x28
      hi2c->pBuffPtr++;
 800179a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800179c:	3301      	adds	r3, #1
 800179e:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 80017a0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	3b01      	subs	r3, #1
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80017aa:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80017ac:	3b01      	subs	r3, #1
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80017b2:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80017b4:	b292      	uxth	r2, r2
 80017b6:	2a00      	cmp	r2, #0
 80017b8:	d0e0      	beq.n	800177c <HAL_I2C_Mem_Write+0xe6>
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d1de      	bne.n	800177c <HAL_I2C_Mem_Write+0xe6>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80017be:	9700      	str	r7, [sp, #0]
 80017c0:	462b      	mov	r3, r5
 80017c2:	2200      	movs	r2, #0
 80017c4:	2180      	movs	r1, #128	@ 0x80
 80017c6:	4620      	mov	r0, r4
 80017c8:	f7ff fe1a 	bl	8001400 <I2C_WaitOnFlagUntilTimeout>
 80017cc:	bb90      	cbnz	r0, 8001834 <HAL_I2C_Mem_Write+0x19e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017ce:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	2bff      	cmp	r3, #255	@ 0xff
 80017d4:	d9c6      	bls.n	8001764 <HAL_I2C_Mem_Write+0xce>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80017d6:	22ff      	movs	r2, #255	@ 0xff
 80017d8:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80017da:	2300      	movs	r3, #0
 80017dc:	9300      	str	r3, [sp, #0]
 80017de:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80017e2:	4631      	mov	r1, r6
 80017e4:	4620      	mov	r0, r4
 80017e6:	f7ff fd33 	bl	8001250 <I2C_TransferConfig>
 80017ea:	e7c7      	b.n	800177c <HAL_I2C_Mem_Write+0xe6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017ec:	463a      	mov	r2, r7
 80017ee:	4629      	mov	r1, r5
 80017f0:	4620      	mov	r0, r4
 80017f2:	f7ff febd 	bl	8001570 <I2C_WaitOnSTOPFlagUntilTimeout>
 80017f6:	b9f8      	cbnz	r0, 8001838 <HAL_I2C_Mem_Write+0x1a2>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017f8:	6823      	ldr	r3, [r4, #0]
 80017fa:	2220      	movs	r2, #32
 80017fc:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80017fe:	6821      	ldr	r1, [r4, #0]
 8001800:	684b      	ldr	r3, [r1, #4]
 8001802:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8001806:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 800180a:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 800180e:	f023 0301 	bic.w	r3, r3, #1
 8001812:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001814:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001818:	2300      	movs	r3, #0
 800181a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 800181e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    return HAL_OK;
 8001822:	e000      	b.n	8001826 <HAL_I2C_Mem_Write+0x190>
    return HAL_BUSY;
 8001824:	2002      	movs	r0, #2
}
 8001826:	b003      	add	sp, #12
 8001828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800182c:	2002      	movs	r0, #2
 800182e:	e7fa      	b.n	8001826 <HAL_I2C_Mem_Write+0x190>
        return HAL_ERROR;
 8001830:	2001      	movs	r0, #1
 8001832:	e7f8      	b.n	8001826 <HAL_I2C_Mem_Write+0x190>
          return HAL_ERROR;
 8001834:	2001      	movs	r0, #1
 8001836:	e7f6      	b.n	8001826 <HAL_I2C_Mem_Write+0x190>
      return HAL_ERROR;
 8001838:	2001      	movs	r0, #1
 800183a:	e7f4      	b.n	8001826 <HAL_I2C_Mem_Write+0x190>

0800183c <HAL_I2C_Mem_Read>:
{
 800183c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001840:	b083      	sub	sp, #12
 8001842:	460e      	mov	r6, r1
 8001844:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 8001848:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800184a:	f890 1041 	ldrb.w	r1, [r0, #65]	@ 0x41
 800184e:	2920      	cmp	r1, #32
 8001850:	f040 80bc 	bne.w	80019cc <HAL_I2C_Mem_Read+0x190>
 8001854:	4604      	mov	r4, r0
 8001856:	4691      	mov	r9, r2
 8001858:	4698      	mov	r8, r3
    if ((pData == NULL) || (Size == 0U))
 800185a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800185c:	b1cb      	cbz	r3, 8001892 <HAL_I2C_Mem_Read+0x56>
 800185e:	f1ba 0f00 	cmp.w	sl, #0
 8001862:	d016      	beq.n	8001892 <HAL_I2C_Mem_Read+0x56>
    __HAL_LOCK(hi2c);
 8001864:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8001868:	2b01      	cmp	r3, #1
 800186a:	f000 80b3 	beq.w	80019d4 <HAL_I2C_Mem_Read+0x198>
 800186e:	f04f 0b01 	mov.w	fp, #1
 8001872:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8001876:	f7ff fb51 	bl	8000f1c <HAL_GetTick>
 800187a:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800187c:	9000      	str	r0, [sp, #0]
 800187e:	2319      	movs	r3, #25
 8001880:	465a      	mov	r2, fp
 8001882:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001886:	4620      	mov	r0, r4
 8001888:	f7ff fdba 	bl	8001400 <I2C_WaitOnFlagUntilTimeout>
 800188c:	b130      	cbz	r0, 800189c <HAL_I2C_Mem_Read+0x60>
      return HAL_ERROR;
 800188e:	2001      	movs	r0, #1
 8001890:	e09d      	b.n	80019ce <HAL_I2C_Mem_Read+0x192>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001892:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001896:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8001898:	2001      	movs	r0, #1
 800189a:	e098      	b.n	80019ce <HAL_I2C_Mem_Read+0x192>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800189c:	2322      	movs	r3, #34	@ 0x22
 800189e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80018a2:	2340      	movs	r3, #64	@ 0x40
 80018a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018a8:	2300      	movs	r3, #0
 80018aa:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 80018ac:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80018ae:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 80018b0:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80018b4:	6363      	str	r3, [r4, #52]	@ 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80018b6:	9701      	str	r7, [sp, #4]
 80018b8:	9500      	str	r5, [sp, #0]
 80018ba:	4643      	mov	r3, r8
 80018bc:	464a      	mov	r2, r9
 80018be:	4631      	mov	r1, r6
 80018c0:	4620      	mov	r0, r4
 80018c2:	f7ff fe19 	bl	80014f8 <I2C_RequestMemoryRead>
 80018c6:	b970      	cbnz	r0, 80018e6 <HAL_I2C_Mem_Read+0xaa>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018c8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	2bff      	cmp	r3, #255	@ 0xff
 80018ce:	d90f      	bls.n	80018f0 <HAL_I2C_Mem_Read+0xb4>
      hi2c->XferSize = 1U;
 80018d0:	2201      	movs	r2, #1
 80018d2:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80018d4:	4b43      	ldr	r3, [pc, #268]	@ (80019e4 <HAL_I2C_Mem_Read+0x1a8>)
 80018d6:	9300      	str	r3, [sp, #0]
 80018d8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80018dc:	4631      	mov	r1, r6
 80018de:	4620      	mov	r0, r4
 80018e0:	f7ff fcb6 	bl	8001250 <I2C_TransferConfig>
 80018e4:	e021      	b.n	800192a <HAL_I2C_Mem_Read+0xee>
      __HAL_UNLOCK(hi2c);
 80018e6:	2300      	movs	r3, #0
 80018e8:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 80018ec:	4658      	mov	r0, fp
 80018ee:	e06e      	b.n	80019ce <HAL_I2C_Mem_Read+0x192>
      hi2c->XferSize = hi2c->XferCount;
 80018f0:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80018f2:	b292      	uxth	r2, r2
 80018f4:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80018f6:	4b3b      	ldr	r3, [pc, #236]	@ (80019e4 <HAL_I2C_Mem_Read+0x1a8>)
 80018f8:	9300      	str	r3, [sp, #0]
 80018fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80018fe:	b2d2      	uxtb	r2, r2
 8001900:	4631      	mov	r1, r6
 8001902:	4620      	mov	r0, r4
 8001904:	f7ff fca4 	bl	8001250 <I2C_TransferConfig>
 8001908:	e00f      	b.n	800192a <HAL_I2C_Mem_Read+0xee>
          hi2c->XferSize = hi2c->XferCount;
 800190a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800190c:	b292      	uxth	r2, r2
 800190e:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001910:	2300      	movs	r3, #0
 8001912:	9300      	str	r3, [sp, #0]
 8001914:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001918:	b2d2      	uxtb	r2, r2
 800191a:	4631      	mov	r1, r6
 800191c:	4620      	mov	r0, r4
 800191e:	f7ff fc97 	bl	8001250 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8001922:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001924:	b29b      	uxth	r3, r3
 8001926:	2b00      	cmp	r3, #0
 8001928:	d034      	beq.n	8001994 <HAL_I2C_Mem_Read+0x158>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800192a:	9700      	str	r7, [sp, #0]
 800192c:	462b      	mov	r3, r5
 800192e:	2200      	movs	r2, #0
 8001930:	2104      	movs	r1, #4
 8001932:	4620      	mov	r0, r4
 8001934:	f7ff fd64 	bl	8001400 <I2C_WaitOnFlagUntilTimeout>
 8001938:	2800      	cmp	r0, #0
 800193a:	d14d      	bne.n	80019d8 <HAL_I2C_Mem_Read+0x19c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800193c:	6823      	ldr	r3, [r4, #0]
 800193e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001940:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001942:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8001944:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001946:	3301      	adds	r3, #1
 8001948:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 800194a:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 800194c:	3a01      	subs	r2, #1
 800194e:	b292      	uxth	r2, r2
 8001950:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8001952:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001954:	b29b      	uxth	r3, r3
 8001956:	3b01      	subs	r3, #1
 8001958:	b29b      	uxth	r3, r3
 800195a:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800195c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800195e:	b29b      	uxth	r3, r3
 8001960:	2b00      	cmp	r3, #0
 8001962:	d0de      	beq.n	8001922 <HAL_I2C_Mem_Read+0xe6>
 8001964:	2a00      	cmp	r2, #0
 8001966:	d1dc      	bne.n	8001922 <HAL_I2C_Mem_Read+0xe6>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001968:	9700      	str	r7, [sp, #0]
 800196a:	462b      	mov	r3, r5
 800196c:	2180      	movs	r1, #128	@ 0x80
 800196e:	4620      	mov	r0, r4
 8001970:	f7ff fd46 	bl	8001400 <I2C_WaitOnFlagUntilTimeout>
 8001974:	bb90      	cbnz	r0, 80019dc <HAL_I2C_Mem_Read+0x1a0>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001976:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001978:	b29b      	uxth	r3, r3
 800197a:	2bff      	cmp	r3, #255	@ 0xff
 800197c:	d9c5      	bls.n	800190a <HAL_I2C_Mem_Read+0xce>
          hi2c->XferSize = 1U;
 800197e:	2201      	movs	r2, #1
 8001980:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001982:	2300      	movs	r3, #0
 8001984:	9300      	str	r3, [sp, #0]
 8001986:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800198a:	4631      	mov	r1, r6
 800198c:	4620      	mov	r0, r4
 800198e:	f7ff fc5f 	bl	8001250 <I2C_TransferConfig>
 8001992:	e7c6      	b.n	8001922 <HAL_I2C_Mem_Read+0xe6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001994:	463a      	mov	r2, r7
 8001996:	4629      	mov	r1, r5
 8001998:	4620      	mov	r0, r4
 800199a:	f7ff fde9 	bl	8001570 <I2C_WaitOnSTOPFlagUntilTimeout>
 800199e:	b9f8      	cbnz	r0, 80019e0 <HAL_I2C_Mem_Read+0x1a4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019a0:	6823      	ldr	r3, [r4, #0]
 80019a2:	2220      	movs	r2, #32
 80019a4:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80019a6:	6821      	ldr	r1, [r4, #0]
 80019a8:	684b      	ldr	r3, [r1, #4]
 80019aa:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 80019ae:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 80019b2:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 80019b6:	f023 0301 	bic.w	r3, r3, #1
 80019ba:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80019bc:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80019c0:	2300      	movs	r3, #0
 80019c2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 80019c6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    return HAL_OK;
 80019ca:	e000      	b.n	80019ce <HAL_I2C_Mem_Read+0x192>
    return HAL_BUSY;
 80019cc:	2002      	movs	r0, #2
}
 80019ce:	b003      	add	sp, #12
 80019d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80019d4:	2002      	movs	r0, #2
 80019d6:	e7fa      	b.n	80019ce <HAL_I2C_Mem_Read+0x192>
        return HAL_ERROR;
 80019d8:	2001      	movs	r0, #1
 80019da:	e7f8      	b.n	80019ce <HAL_I2C_Mem_Read+0x192>
          return HAL_ERROR;
 80019dc:	2001      	movs	r0, #1
 80019de:	e7f6      	b.n	80019ce <HAL_I2C_Mem_Read+0x192>
      return HAL_ERROR;
 80019e0:	2001      	movs	r0, #1
 80019e2:	e7f4      	b.n	80019ce <HAL_I2C_Mem_Read+0x192>
 80019e4:	80002400 	.word	0x80002400

080019e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80019e8:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019ea:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 80019ee:	2a20      	cmp	r2, #32
 80019f0:	d123      	bne.n	8001a3a <HAL_I2CEx_ConfigAnalogFilter+0x52>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019f2:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 80019f6:	2a01      	cmp	r2, #1
 80019f8:	d021      	beq.n	8001a3e <HAL_I2CEx_ConfigAnalogFilter+0x56>
 80019fa:	2201      	movs	r2, #1
 80019fc:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a00:	2224      	movs	r2, #36	@ 0x24
 8001a02:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a06:	6800      	ldr	r0, [r0, #0]
 8001a08:	6802      	ldr	r2, [r0, #0]
 8001a0a:	f022 0201 	bic.w	r2, r2, #1
 8001a0e:	6002      	str	r2, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001a10:	6818      	ldr	r0, [r3, #0]
 8001a12:	6802      	ldr	r2, [r0, #0]
 8001a14:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001a18:	6002      	str	r2, [r0, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001a1a:	6818      	ldr	r0, [r3, #0]
 8001a1c:	6802      	ldr	r2, [r0, #0]
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	6002      	str	r2, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a22:	6819      	ldr	r1, [r3, #0]
 8001a24:	680a      	ldr	r2, [r1, #0]
 8001a26:	f042 0201 	orr.w	r2, r2, #1
 8001a2a:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a2c:	2220      	movs	r2, #32
 8001a2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a32:	2000      	movs	r0, #0
 8001a34:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40

    return HAL_OK;
 8001a38:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8001a3a:	2002      	movs	r0, #2
 8001a3c:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8001a3e:	2002      	movs	r0, #2
  }
}
 8001a40:	4770      	bx	lr

08001a42 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001a42:	4603      	mov	r3, r0

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a44:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8001a48:	2a20      	cmp	r2, #32
 8001a4a:	d121      	bne.n	8001a90 <HAL_I2CEx_ConfigDigitalFilter+0x4e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a4c:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8001a50:	2a01      	cmp	r2, #1
 8001a52:	d01f      	beq.n	8001a94 <HAL_I2CEx_ConfigDigitalFilter+0x52>
 8001a54:	2201      	movs	r2, #1
 8001a56:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a5a:	2224      	movs	r2, #36	@ 0x24
 8001a5c:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a60:	6800      	ldr	r0, [r0, #0]
 8001a62:	6802      	ldr	r2, [r0, #0]
 8001a64:	f022 0201 	bic.w	r2, r2, #1
 8001a68:	6002      	str	r2, [r0, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001a6a:	6818      	ldr	r0, [r3, #0]
 8001a6c:	6802      	ldr	r2, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001a6e:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001a72:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001a76:	6002      	str	r2, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a78:	6819      	ldr	r1, [r3, #0]
 8001a7a:	680a      	ldr	r2, [r1, #0]
 8001a7c:	f042 0201 	orr.w	r2, r2, #1
 8001a80:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a82:	2220      	movs	r2, #32
 8001a84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a88:	2000      	movs	r0, #0
 8001a8a:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40

    return HAL_OK;
 8001a8e:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8001a90:	2002      	movs	r0, #2
 8001a92:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8001a94:	2002      	movs	r0, #2
  }
}
 8001a96:	4770      	bx	lr

08001a98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a98:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a9a:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac4 <HAL_MspInit+0x2c>)
 8001a9c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001a9e:	f042 0201 	orr.w	r2, r2, #1
 8001aa2:	661a      	str	r2, [r3, #96]	@ 0x60
 8001aa4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001aa6:	f002 0201 	and.w	r2, r2, #1
 8001aaa:	9200      	str	r2, [sp, #0]
 8001aac:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aae:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001ab0:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001ab4:	659a      	str	r2, [r3, #88]	@ 0x58
 8001ab6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ab8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001abc:	9301      	str	r3, [sp, #4]
 8001abe:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ac0:	b002      	add	sp, #8
 8001ac2:	4770      	bx	lr
 8001ac4:	40021000 	.word	0x40021000

08001ac8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ac8:	b510      	push	{r4, lr}
 8001aca:	b0aa      	sub	sp, #168	@ 0xa8
 8001acc:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ace:	2100      	movs	r1, #0
 8001ad0:	9125      	str	r1, [sp, #148]	@ 0x94
 8001ad2:	9126      	str	r1, [sp, #152]	@ 0x98
 8001ad4:	9127      	str	r1, [sp, #156]	@ 0x9c
 8001ad6:	9128      	str	r1, [sp, #160]	@ 0xa0
 8001ad8:	9129      	str	r1, [sp, #164]	@ 0xa4
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ada:	2288      	movs	r2, #136	@ 0x88
 8001adc:	a803      	add	r0, sp, #12
 8001ade:	f001 fc32 	bl	8003346 <memset>
  if(hi2c->Instance==I2C1)
 8001ae2:	6822      	ldr	r2, [r4, #0]
 8001ae4:	4b18      	ldr	r3, [pc, #96]	@ (8001b48 <HAL_I2C_MspInit+0x80>)
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d001      	beq.n	8001aee <HAL_I2C_MspInit+0x26>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001aea:	b02a      	add	sp, #168	@ 0xa8
 8001aec:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001aee:	2340      	movs	r3, #64	@ 0x40
 8001af0:	9303      	str	r3, [sp, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001af2:	a803      	add	r0, sp, #12
 8001af4:	f000 feb8 	bl	8002868 <HAL_RCCEx_PeriphCLKConfig>
 8001af8:	bb10      	cbnz	r0, 8001b40 <HAL_I2C_MspInit+0x78>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001afa:	4c14      	ldr	r4, [pc, #80]	@ (8001b4c <HAL_I2C_MspInit+0x84>)
 8001afc:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001afe:	f043 0302 	orr.w	r3, r3, #2
 8001b02:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8001b04:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	9301      	str	r3, [sp, #4]
 8001b0c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b0e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001b12:	9325      	str	r3, [sp, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b14:	2312      	movs	r3, #18
 8001b16:	9326      	str	r3, [sp, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	9327      	str	r3, [sp, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	9328      	str	r3, [sp, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b20:	2304      	movs	r3, #4
 8001b22:	9329      	str	r3, [sp, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b24:	a925      	add	r1, sp, #148	@ 0x94
 8001b26:	480a      	ldr	r0, [pc, #40]	@ (8001b50 <HAL_I2C_MspInit+0x88>)
 8001b28:	f7ff fa7c 	bl	8001024 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b2c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001b2e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001b32:	65a3      	str	r3, [r4, #88]	@ 0x58
 8001b34:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001b36:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b3a:	9302      	str	r3, [sp, #8]
 8001b3c:	9b02      	ldr	r3, [sp, #8]
}
 8001b3e:	e7d4      	b.n	8001aea <HAL_I2C_MspInit+0x22>
      Error_Handler();
 8001b40:	f7ff f8ae 	bl	8000ca0 <Error_Handler>
 8001b44:	e7d9      	b.n	8001afa <HAL_I2C_MspInit+0x32>
 8001b46:	bf00      	nop
 8001b48:	40005400 	.word	0x40005400
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	48000400 	.word	0x48000400

08001b54 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b54:	b510      	push	{r4, lr}
 8001b56:	b0aa      	sub	sp, #168	@ 0xa8
 8001b58:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	9125      	str	r1, [sp, #148]	@ 0x94
 8001b5e:	9126      	str	r1, [sp, #152]	@ 0x98
 8001b60:	9127      	str	r1, [sp, #156]	@ 0x9c
 8001b62:	9128      	str	r1, [sp, #160]	@ 0xa0
 8001b64:	9129      	str	r1, [sp, #164]	@ 0xa4
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b66:	2288      	movs	r2, #136	@ 0x88
 8001b68:	a803      	add	r0, sp, #12
 8001b6a:	f001 fbec 	bl	8003346 <memset>
  if(huart->Instance==USART2)
 8001b6e:	6822      	ldr	r2, [r4, #0]
 8001b70:	4b18      	ldr	r3, [pc, #96]	@ (8001bd4 <HAL_UART_MspInit+0x80>)
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d001      	beq.n	8001b7a <HAL_UART_MspInit+0x26>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001b76:	b02a      	add	sp, #168	@ 0xa8
 8001b78:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	9303      	str	r3, [sp, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b7e:	a803      	add	r0, sp, #12
 8001b80:	f000 fe72 	bl	8002868 <HAL_RCCEx_PeriphCLKConfig>
 8001b84:	bb10      	cbnz	r0, 8001bcc <HAL_UART_MspInit+0x78>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b86:	4b14      	ldr	r3, [pc, #80]	@ (8001bd8 <HAL_UART_MspInit+0x84>)
 8001b88:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001b8a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8001b8e:	659a      	str	r2, [r3, #88]	@ 0x58
 8001b90:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001b92:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8001b96:	9201      	str	r2, [sp, #4]
 8001b98:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001b9c:	f042 0201 	orr.w	r2, r2, #1
 8001ba0:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001ba2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ba4:	f003 0301 	and.w	r3, r3, #1
 8001ba8:	9302      	str	r3, [sp, #8]
 8001baa:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001bac:	230c      	movs	r3, #12
 8001bae:	9325      	str	r3, [sp, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	9326      	str	r3, [sp, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	9327      	str	r3, [sp, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	9328      	str	r3, [sp, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bbc:	2307      	movs	r3, #7
 8001bbe:	9329      	str	r3, [sp, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc0:	a925      	add	r1, sp, #148	@ 0x94
 8001bc2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bc6:	f7ff fa2d 	bl	8001024 <HAL_GPIO_Init>
}
 8001bca:	e7d4      	b.n	8001b76 <HAL_UART_MspInit+0x22>
      Error_Handler();
 8001bcc:	f7ff f868 	bl	8000ca0 <Error_Handler>
 8001bd0:	e7d9      	b.n	8001b86 <HAL_UART_MspInit+0x32>
 8001bd2:	bf00      	nop
 8001bd4:	40004400 	.word	0x40004400
 8001bd8:	40021000 	.word	0x40021000

08001bdc <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001bdc:	4b02      	ldr	r3, [pc, #8]	@ (8001be8 <HAL_PWREx_GetVoltageRange+0xc>)
 8001bde:	6818      	ldr	r0, [r3, #0]
#endif
}
 8001be0:	f400 60c0 	and.w	r0, r0, #1536	@ 0x600
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	40007000 	.word	0x40007000

08001bec <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bec:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8001bf0:	d00f      	beq.n	8001c12 <HAL_PWREx_ControlVoltageScaling+0x26>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001bf2:	4b1f      	ldr	r3, [pc, #124]	@ (8001c70 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001bfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bfe:	d034      	beq.n	8001c6a <HAL_PWREx_ControlVoltageScaling+0x7e>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c00:	4a1b      	ldr	r2, [pc, #108]	@ (8001c70 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8001c02:	6813      	ldr	r3, [r2, #0]
 8001c04:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c08:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c0c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001c0e:	2000      	movs	r0, #0
 8001c10:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c12:	4b17      	ldr	r3, [pc, #92]	@ (8001c70 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001c1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001c1e:	d020      	beq.n	8001c62 <HAL_PWREx_ControlVoltageScaling+0x76>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c20:	4a13      	ldr	r2, [pc, #76]	@ (8001c70 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8001c22:	6813      	ldr	r3, [r2, #0]
 8001c24:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c28:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c2c:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c2e:	4b11      	ldr	r3, [pc, #68]	@ (8001c74 <HAL_PWREx_ControlVoltageScaling+0x88>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2232      	movs	r2, #50	@ 0x32
 8001c34:	fb02 f303 	mul.w	r3, r2, r3
 8001c38:	4a0f      	ldr	r2, [pc, #60]	@ (8001c78 <HAL_PWREx_ControlVoltageScaling+0x8c>)
 8001c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c3e:	0c9b      	lsrs	r3, r3, #18
 8001c40:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c42:	e000      	b.n	8001c46 <HAL_PWREx_ControlVoltageScaling+0x5a>
        wait_loop_index--;
 8001c44:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c46:	4a0a      	ldr	r2, [pc, #40]	@ (8001c70 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8001c48:	6952      	ldr	r2, [r2, #20]
 8001c4a:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8001c4e:	d001      	beq.n	8001c54 <HAL_PWREx_ControlVoltageScaling+0x68>
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d1f7      	bne.n	8001c44 <HAL_PWREx_ControlVoltageScaling+0x58>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c54:	4b06      	ldr	r3, [pc, #24]	@ (8001c70 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8001c56:	695b      	ldr	r3, [r3, #20]
 8001c58:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8001c5c:	d103      	bne.n	8001c66 <HAL_PWREx_ControlVoltageScaling+0x7a>
  return HAL_OK;
 8001c5e:	2000      	movs	r0, #0
 8001c60:	4770      	bx	lr
 8001c62:	2000      	movs	r0, #0
 8001c64:	4770      	bx	lr
        return HAL_TIMEOUT;
 8001c66:	2003      	movs	r0, #3
 8001c68:	4770      	bx	lr
  return HAL_OK;
 8001c6a:	2000      	movs	r0, #0
}
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	40007000 	.word	0x40007000
 8001c74:	2000000c 	.word	0x2000000c
 8001c78:	431bde83 	.word	0x431bde83

08001c7c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001c7c:	b530      	push	{r4, r5, lr}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	4604      	mov	r4, r0
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001c82:	4b20      	ldr	r3, [pc, #128]	@ (8001d04 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8001c84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c86:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8001c8a:	d00b      	beq.n	8001ca4 <RCC_SetFlashLatencyFromMSIRange+0x28>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001c8c:	f7ff ffa6 	bl	8001bdc <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c90:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8001c94:	d017      	beq.n	8001cc6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001c96:	2c80      	cmp	r4, #128	@ 0x80
 8001c98:	d81f      	bhi.n	8001cda <RCC_SetFlashLatencyFromMSIRange+0x5e>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001c9a:	d02d      	beq.n	8001cf8 <RCC_SetFlashLatencyFromMSIRange+0x7c>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001c9c:	2c70      	cmp	r4, #112	@ 0x70
 8001c9e:	d02d      	beq.n	8001cfc <RCC_SetFlashLatencyFromMSIRange+0x80>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	e01b      	b.n	8001cdc <RCC_SetFlashLatencyFromMSIRange+0x60>
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ca4:	4d17      	ldr	r5, [pc, #92]	@ (8001d04 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8001ca6:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8001ca8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cac:	65ab      	str	r3, [r5, #88]	@ 0x58
 8001cae:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8001cb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cb4:	9301      	str	r3, [sp, #4]
 8001cb6:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8001cb8:	f7ff ff90 	bl	8001bdc <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8001cbc:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8001cbe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001cc2:	65ab      	str	r3, [r5, #88]	@ 0x58
 8001cc4:	e7e4      	b.n	8001c90 <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 8001cc6:	2c80      	cmp	r4, #128	@ 0x80
 8001cc8:	d903      	bls.n	8001cd2 <RCC_SetFlashLatencyFromMSIRange+0x56>
      if(msirange > RCC_MSIRANGE_10)
 8001cca:	2ca0      	cmp	r4, #160	@ 0xa0
 8001ccc:	d903      	bls.n	8001cd6 <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_2; /* 2WS */
 8001cce:	2102      	movs	r1, #2
 8001cd0:	e004      	b.n	8001cdc <RCC_SetFlashLatencyFromMSIRange+0x60>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	e002      	b.n	8001cdc <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 8001cd6:	2101      	movs	r1, #1
 8001cd8:	e000      	b.n	8001cdc <RCC_SetFlashLatencyFromMSIRange+0x60>
      latency = FLASH_LATENCY_3; /* 3WS */
 8001cda:	2103      	movs	r1, #3
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001cdc:	4a0a      	ldr	r2, [pc, #40]	@ (8001d08 <RCC_SetFlashLatencyFromMSIRange+0x8c>)
 8001cde:	6813      	ldr	r3, [r2, #0]
 8001ce0:	f023 0307 	bic.w	r3, r3, #7
 8001ce4:	430b      	orrs	r3, r1
 8001ce6:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ce8:	6813      	ldr	r3, [r2, #0]
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	428b      	cmp	r3, r1
 8001cf0:	d106      	bne.n	8001d00 <RCC_SetFlashLatencyFromMSIRange+0x84>
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8001cf2:	2000      	movs	r0, #0
}
 8001cf4:	b003      	add	sp, #12
 8001cf6:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_2; /* 2WS */
 8001cf8:	2102      	movs	r1, #2
 8001cfa:	e7ef      	b.n	8001cdc <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 8001cfc:	2101      	movs	r1, #1
 8001cfe:	e7ed      	b.n	8001cdc <RCC_SetFlashLatencyFromMSIRange+0x60>
    return HAL_ERROR;
 8001d00:	2001      	movs	r0, #1
 8001d02:	e7f7      	b.n	8001cf4 <RCC_SetFlashLatencyFromMSIRange+0x78>
 8001d04:	40021000 	.word	0x40021000
 8001d08:	40022000 	.word	0x40022000

08001d0c <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d0c:	4a25      	ldr	r2, [pc, #148]	@ (8001da4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d0e:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d10:	68d2      	ldr	r2, [r2, #12]
 8001d12:	f002 0203 	and.w	r2, r2, #3
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d16:	f013 030c 	ands.w	r3, r3, #12
 8001d1a:	d009      	beq.n	8001d30 <HAL_RCC_GetSysClockFreq+0x24>
 8001d1c:	2b0c      	cmp	r3, #12
 8001d1e:	d005      	beq.n	8001d2c <HAL_RCC_GetSysClockFreq+0x20>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d20:	2b04      	cmp	r3, #4
 8001d22:	d03b      	beq.n	8001d9c <HAL_RCC_GetSysClockFreq+0x90>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d24:	2b08      	cmp	r3, #8
 8001d26:	d03b      	beq.n	8001da0 <HAL_RCC_GetSysClockFreq+0x94>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d28:	2000      	movs	r0, #0
 8001d2a:	e00f      	b.n	8001d4c <HAL_RCC_GetSysClockFreq+0x40>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d2c:	2a01      	cmp	r2, #1
 8001d2e:	d1f7      	bne.n	8001d20 <HAL_RCC_GetSysClockFreq+0x14>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d30:	4a1c      	ldr	r2, [pc, #112]	@ (8001da4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d32:	6812      	ldr	r2, [r2, #0]
 8001d34:	f012 0f08 	tst.w	r2, #8
 8001d38:	d10c      	bne.n	8001d54 <HAL_RCC_GetSysClockFreq+0x48>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d3a:	4a1a      	ldr	r2, [pc, #104]	@ (8001da4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d3c:	f8d2 2094 	ldr.w	r2, [r2, #148]	@ 0x94
 8001d40:	f3c2 2203 	ubfx	r2, r2, #8, #4
    msirange = MSIRangeTable[msirange];
 8001d44:	4918      	ldr	r1, [pc, #96]	@ (8001da8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d46:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d4a:	b113      	cbz	r3, 8001d52 <HAL_RCC_GetSysClockFreq+0x46>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d4c:	2b0c      	cmp	r3, #12
 8001d4e:	d006      	beq.n	8001d5e <HAL_RCC_GetSysClockFreq+0x52>
 8001d50:	2000      	movs	r0, #0
}
 8001d52:	4770      	bx	lr
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d54:	4a13      	ldr	r2, [pc, #76]	@ (8001da4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d56:	6812      	ldr	r2, [r2, #0]
 8001d58:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8001d5c:	e7f2      	b.n	8001d44 <HAL_RCC_GetSysClockFreq+0x38>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d5e:	4b11      	ldr	r3, [pc, #68]	@ (8001da4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d016      	beq.n	8001d98 <HAL_RCC_GetSysClockFreq+0x8c>
 8001d6a:	2b03      	cmp	r3, #3
 8001d6c:	d100      	bne.n	8001d70 <HAL_RCC_GetSysClockFreq+0x64>
      pllvco = HSE_VALUE;
 8001d6e:	480f      	ldr	r0, [pc, #60]	@ (8001dac <HAL_RCC_GetSysClockFreq+0xa0>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d70:	490c      	ldr	r1, [pc, #48]	@ (8001da4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d72:	68ca      	ldr	r2, [r1, #12]
 8001d74:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8001d78:	3201      	adds	r2, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d7a:	68cb      	ldr	r3, [r1, #12]
 8001d7c:	f3c3 2306 	ubfx	r3, r3, #8, #7
 8001d80:	fb00 f303 	mul.w	r3, r0, r3
 8001d84:	fbb3 f3f2 	udiv	r3, r3, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d88:	68c8      	ldr	r0, [r1, #12]
 8001d8a:	f3c0 6041 	ubfx	r0, r0, #25, #2
 8001d8e:	3001      	adds	r0, #1
 8001d90:	0040      	lsls	r0, r0, #1
    sysclockfreq = pllvco / pllr;
 8001d92:	fbb3 f0f0 	udiv	r0, r3, r0
 8001d96:	4770      	bx	lr
    switch (pllsource)
 8001d98:	4805      	ldr	r0, [pc, #20]	@ (8001db0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001d9a:	e7e9      	b.n	8001d70 <HAL_RCC_GetSysClockFreq+0x64>
    sysclockfreq = HSI_VALUE;
 8001d9c:	4804      	ldr	r0, [pc, #16]	@ (8001db0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001d9e:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8001da0:	4802      	ldr	r0, [pc, #8]	@ (8001dac <HAL_RCC_GetSysClockFreq+0xa0>)
 8001da2:	4770      	bx	lr
 8001da4:	40021000 	.word	0x40021000
 8001da8:	08003a10 	.word	0x08003a10
 8001dac:	007a1200 	.word	0x007a1200
 8001db0:	00f42400 	.word	0x00f42400

08001db4 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8001db4:	2800      	cmp	r0, #0
 8001db6:	f000 82f1 	beq.w	800239c <HAL_RCC_OscConfig+0x5e8>
{
 8001dba:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dc0:	4b96      	ldr	r3, [pc, #600]	@ (800201c <HAL_RCC_OscConfig+0x268>)
 8001dc2:	689d      	ldr	r5, [r3, #8]
 8001dc4:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dc8:	68de      	ldr	r6, [r3, #12]
 8001dca:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001dce:	6803      	ldr	r3, [r0, #0]
 8001dd0:	f013 0f10 	tst.w	r3, #16
 8001dd4:	d05a      	beq.n	8001e8c <HAL_RCC_OscConfig+0xd8>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001dd6:	b1e5      	cbz	r5, 8001e12 <HAL_RCC_OscConfig+0x5e>
 8001dd8:	2d0c      	cmp	r5, #12
 8001dda:	d018      	beq.n	8001e0e <HAL_RCC_OscConfig+0x5a>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ddc:	69a3      	ldr	r3, [r4, #24]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	f000 80bb 	beq.w	8001f5a <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_MSI_ENABLE();
 8001de4:	4a8d      	ldr	r2, [pc, #564]	@ (800201c <HAL_RCC_OscConfig+0x268>)
 8001de6:	6813      	ldr	r3, [r2, #0]
 8001de8:	f043 0301 	orr.w	r3, r3, #1
 8001dec:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001dee:	f7ff f895 	bl	8000f1c <HAL_GetTick>
 8001df2:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001df4:	4b89      	ldr	r3, [pc, #548]	@ (800201c <HAL_RCC_OscConfig+0x268>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f013 0f02 	tst.w	r3, #2
 8001dfc:	f040 809a 	bne.w	8001f34 <HAL_RCC_OscConfig+0x180>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e00:	f7ff f88c 	bl	8000f1c <HAL_GetTick>
 8001e04:	1bc0      	subs	r0, r0, r7
 8001e06:	2802      	cmp	r0, #2
 8001e08:	d9f4      	bls.n	8001df4 <HAL_RCC_OscConfig+0x40>
            return HAL_TIMEOUT;
 8001e0a:	2003      	movs	r0, #3
 8001e0c:	e2d1      	b.n	80023b2 <HAL_RCC_OscConfig+0x5fe>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001e0e:	2e01      	cmp	r6, #1
 8001e10:	d1e4      	bne.n	8001ddc <HAL_RCC_OscConfig+0x28>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e12:	4b82      	ldr	r3, [pc, #520]	@ (800201c <HAL_RCC_OscConfig+0x268>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f013 0f02 	tst.w	r3, #2
 8001e1a:	d003      	beq.n	8001e24 <HAL_RCC_OscConfig+0x70>
 8001e1c:	69a3      	ldr	r3, [r4, #24]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	f000 82be 	beq.w	80023a0 <HAL_RCC_OscConfig+0x5ec>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e24:	6a20      	ldr	r0, [r4, #32]
 8001e26:	4b7d      	ldr	r3, [pc, #500]	@ (800201c <HAL_RCC_OscConfig+0x268>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f013 0f08 	tst.w	r3, #8
 8001e2e:	d05b      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x134>
 8001e30:	4b7a      	ldr	r3, [pc, #488]	@ (800201c <HAL_RCC_OscConfig+0x268>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e38:	4298      	cmp	r0, r3
 8001e3a:	d85c      	bhi.n	8001ef6 <HAL_RCC_OscConfig+0x142>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e3c:	4b77      	ldr	r3, [pc, #476]	@ (800201c <HAL_RCC_OscConfig+0x268>)
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	f042 0208 	orr.w	r2, r2, #8
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8001e4c:	6a21      	ldr	r1, [r4, #32]
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e52:	685a      	ldr	r2, [r3, #4]
 8001e54:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8001e58:	69e1      	ldr	r1, [r4, #28]
 8001e5a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001e5e:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e60:	2d00      	cmp	r5, #0
 8001e62:	d060      	beq.n	8001f26 <HAL_RCC_OscConfig+0x172>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e64:	f7ff ff52 	bl	8001d0c <HAL_RCC_GetSysClockFreq>
 8001e68:	4b6c      	ldr	r3, [pc, #432]	@ (800201c <HAL_RCC_OscConfig+0x268>)
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001e70:	4a6b      	ldr	r2, [pc, #428]	@ (8002020 <HAL_RCC_OscConfig+0x26c>)
 8001e72:	5cd3      	ldrb	r3, [r2, r3]
 8001e74:	f003 031f 	and.w	r3, r3, #31
 8001e78:	40d8      	lsrs	r0, r3
 8001e7a:	4b6a      	ldr	r3, [pc, #424]	@ (8002024 <HAL_RCC_OscConfig+0x270>)
 8001e7c:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8001e7e:	4b6a      	ldr	r3, [pc, #424]	@ (8002028 <HAL_RCC_OscConfig+0x274>)
 8001e80:	6818      	ldr	r0, [r3, #0]
 8001e82:	f7ff f801 	bl	8000e88 <HAL_InitTick>
        if(status != HAL_OK)
 8001e86:	2800      	cmp	r0, #0
 8001e88:	f040 8293 	bne.w	80023b2 <HAL_RCC_OscConfig+0x5fe>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e8c:	6823      	ldr	r3, [r4, #0]
 8001e8e:	f013 0f01 	tst.w	r3, #1
 8001e92:	f000 8081 	beq.w	8001f98 <HAL_RCC_OscConfig+0x1e4>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001e96:	2d08      	cmp	r5, #8
 8001e98:	d075      	beq.n	8001f86 <HAL_RCC_OscConfig+0x1d2>
 8001e9a:	2d0c      	cmp	r5, #12
 8001e9c:	d071      	beq.n	8001f82 <HAL_RCC_OscConfig+0x1ce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e9e:	6863      	ldr	r3, [r4, #4]
 8001ea0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ea4:	f000 8097 	beq.w	8001fd6 <HAL_RCC_OscConfig+0x222>
 8001ea8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001eac:	f000 8099 	beq.w	8001fe2 <HAL_RCC_OscConfig+0x22e>
 8001eb0:	4b5a      	ldr	r3, [pc, #360]	@ (800201c <HAL_RCC_OscConfig+0x268>)
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001ec0:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ec2:	6863      	ldr	r3, [r4, #4]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	f000 8099 	beq.w	8001ffc <HAL_RCC_OscConfig+0x248>
        tickstart = HAL_GetTick();
 8001eca:	f7ff f827 	bl	8000f1c <HAL_GetTick>
 8001ece:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ed0:	4b52      	ldr	r3, [pc, #328]	@ (800201c <HAL_RCC_OscConfig+0x268>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001ed8:	d15e      	bne.n	8001f98 <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eda:	f7ff f81f 	bl	8000f1c <HAL_GetTick>
 8001ede:	1bc0      	subs	r0, r0, r7
 8001ee0:	2864      	cmp	r0, #100	@ 0x64
 8001ee2:	d9f5      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x11c>
            return HAL_TIMEOUT;
 8001ee4:	2003      	movs	r0, #3
 8001ee6:	e264      	b.n	80023b2 <HAL_RCC_OscConfig+0x5fe>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ee8:	4b4c      	ldr	r3, [pc, #304]	@ (800201c <HAL_RCC_OscConfig+0x268>)
 8001eea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001eee:	091b      	lsrs	r3, r3, #4
 8001ef0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ef4:	e7a0      	b.n	8001e38 <HAL_RCC_OscConfig+0x84>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ef6:	f7ff fec1 	bl	8001c7c <RCC_SetFlashLatencyFromMSIRange>
 8001efa:	2800      	cmp	r0, #0
 8001efc:	f040 8252 	bne.w	80023a4 <HAL_RCC_OscConfig+0x5f0>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f00:	4b46      	ldr	r3, [pc, #280]	@ (800201c <HAL_RCC_OscConfig+0x268>)
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	f042 0208 	orr.w	r2, r2, #8
 8001f08:	601a      	str	r2, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8001f10:	6a21      	ldr	r1, [r4, #32]
 8001f12:	430a      	orrs	r2, r1
 8001f14:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f16:	685a      	ldr	r2, [r3, #4]
 8001f18:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8001f1c:	69e1      	ldr	r1, [r4, #28]
 8001f1e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001f22:	605a      	str	r2, [r3, #4]
 8001f24:	e79e      	b.n	8001e64 <HAL_RCC_OscConfig+0xb0>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f26:	6a20      	ldr	r0, [r4, #32]
 8001f28:	f7ff fea8 	bl	8001c7c <RCC_SetFlashLatencyFromMSIRange>
 8001f2c:	2800      	cmp	r0, #0
 8001f2e:	d099      	beq.n	8001e64 <HAL_RCC_OscConfig+0xb0>
              return HAL_ERROR;
 8001f30:	2001      	movs	r0, #1
 8001f32:	e23e      	b.n	80023b2 <HAL_RCC_OscConfig+0x5fe>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f34:	4b39      	ldr	r3, [pc, #228]	@ (800201c <HAL_RCC_OscConfig+0x268>)
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	f042 0208 	orr.w	r2, r2, #8
 8001f3c:	601a      	str	r2, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8001f44:	6a21      	ldr	r1, [r4, #32]
 8001f46:	430a      	orrs	r2, r1
 8001f48:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f4a:	685a      	ldr	r2, [r3, #4]
 8001f4c:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8001f50:	69e1      	ldr	r1, [r4, #28]
 8001f52:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001f56:	605a      	str	r2, [r3, #4]
 8001f58:	e798      	b.n	8001e8c <HAL_RCC_OscConfig+0xd8>
        __HAL_RCC_MSI_DISABLE();
 8001f5a:	4a30      	ldr	r2, [pc, #192]	@ (800201c <HAL_RCC_OscConfig+0x268>)
 8001f5c:	6813      	ldr	r3, [r2, #0]
 8001f5e:	f023 0301 	bic.w	r3, r3, #1
 8001f62:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001f64:	f7fe ffda 	bl	8000f1c <HAL_GetTick>
 8001f68:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f6a:	4b2c      	ldr	r3, [pc, #176]	@ (800201c <HAL_RCC_OscConfig+0x268>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f013 0f02 	tst.w	r3, #2
 8001f72:	d08b      	beq.n	8001e8c <HAL_RCC_OscConfig+0xd8>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f74:	f7fe ffd2 	bl	8000f1c <HAL_GetTick>
 8001f78:	1bc0      	subs	r0, r0, r7
 8001f7a:	2802      	cmp	r0, #2
 8001f7c:	d9f5      	bls.n	8001f6a <HAL_RCC_OscConfig+0x1b6>
            return HAL_TIMEOUT;
 8001f7e:	2003      	movs	r0, #3
 8001f80:	e217      	b.n	80023b2 <HAL_RCC_OscConfig+0x5fe>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f82:	2e03      	cmp	r6, #3
 8001f84:	d18b      	bne.n	8001e9e <HAL_RCC_OscConfig+0xea>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f86:	4b25      	ldr	r3, [pc, #148]	@ (800201c <HAL_RCC_OscConfig+0x268>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001f8e:	d003      	beq.n	8001f98 <HAL_RCC_OscConfig+0x1e4>
 8001f90:	6863      	ldr	r3, [r4, #4]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f000 8208 	beq.w	80023a8 <HAL_RCC_OscConfig+0x5f4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f98:	6823      	ldr	r3, [r4, #0]
 8001f9a:	f013 0f02 	tst.w	r3, #2
 8001f9e:	d058      	beq.n	8002052 <HAL_RCC_OscConfig+0x29e>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001fa0:	2d04      	cmp	r5, #4
 8001fa2:	d045      	beq.n	8002030 <HAL_RCC_OscConfig+0x27c>
 8001fa4:	2d0c      	cmp	r5, #12
 8001fa6:	d041      	beq.n	800202c <HAL_RCC_OscConfig+0x278>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fa8:	68e3      	ldr	r3, [r4, #12]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d077      	beq.n	800209e <HAL_RCC_OscConfig+0x2ea>
        __HAL_RCC_HSI_ENABLE();
 8001fae:	4a1b      	ldr	r2, [pc, #108]	@ (800201c <HAL_RCC_OscConfig+0x268>)
 8001fb0:	6813      	ldr	r3, [r2, #0]
 8001fb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fb6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001fb8:	f7fe ffb0 	bl	8000f1c <HAL_GetTick>
 8001fbc:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fbe:	4b17      	ldr	r3, [pc, #92]	@ (800201c <HAL_RCC_OscConfig+0x268>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8001fc6:	d161      	bne.n	800208c <HAL_RCC_OscConfig+0x2d8>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fc8:	f7fe ffa8 	bl	8000f1c <HAL_GetTick>
 8001fcc:	1b80      	subs	r0, r0, r6
 8001fce:	2802      	cmp	r0, #2
 8001fd0:	d9f5      	bls.n	8001fbe <HAL_RCC_OscConfig+0x20a>
            return HAL_TIMEOUT;
 8001fd2:	2003      	movs	r0, #3
 8001fd4:	e1ed      	b.n	80023b2 <HAL_RCC_OscConfig+0x5fe>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fd6:	4a11      	ldr	r2, [pc, #68]	@ (800201c <HAL_RCC_OscConfig+0x268>)
 8001fd8:	6813      	ldr	r3, [r2, #0]
 8001fda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fde:	6013      	str	r3, [r2, #0]
 8001fe0:	e76f      	b.n	8001ec2 <HAL_RCC_OscConfig+0x10e>
 8001fe2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001fe6:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001ff8:	601a      	str	r2, [r3, #0]
 8001ffa:	e762      	b.n	8001ec2 <HAL_RCC_OscConfig+0x10e>
        tickstart = HAL_GetTick();
 8001ffc:	f7fe ff8e 	bl	8000f1c <HAL_GetTick>
 8002000:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002002:	4b06      	ldr	r3, [pc, #24]	@ (800201c <HAL_RCC_OscConfig+0x268>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800200a:	d0c5      	beq.n	8001f98 <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800200c:	f7fe ff86 	bl	8000f1c <HAL_GetTick>
 8002010:	1bc0      	subs	r0, r0, r7
 8002012:	2864      	cmp	r0, #100	@ 0x64
 8002014:	d9f5      	bls.n	8002002 <HAL_RCC_OscConfig+0x24e>
            return HAL_TIMEOUT;
 8002016:	2003      	movs	r0, #3
 8002018:	e1cb      	b.n	80023b2 <HAL_RCC_OscConfig+0x5fe>
 800201a:	bf00      	nop
 800201c:	40021000 	.word	0x40021000
 8002020:	08003a48 	.word	0x08003a48
 8002024:	2000000c 	.word	0x2000000c
 8002028:	20000008 	.word	0x20000008
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800202c:	2e02      	cmp	r6, #2
 800202e:	d1bb      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x1f4>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002030:	4ba3      	ldr	r3, [pc, #652]	@ (80022c0 <HAL_RCC_OscConfig+0x50c>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8002038:	d003      	beq.n	8002042 <HAL_RCC_OscConfig+0x28e>
 800203a:	68e3      	ldr	r3, [r4, #12]
 800203c:	2b00      	cmp	r3, #0
 800203e:	f000 81b5 	beq.w	80023ac <HAL_RCC_OscConfig+0x5f8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002042:	4a9f      	ldr	r2, [pc, #636]	@ (80022c0 <HAL_RCC_OscConfig+0x50c>)
 8002044:	6853      	ldr	r3, [r2, #4]
 8002046:	f023 53f8 	bic.w	r3, r3, #520093696	@ 0x1f000000
 800204a:	6921      	ldr	r1, [r4, #16]
 800204c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002050:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002052:	6823      	ldr	r3, [r4, #0]
 8002054:	f013 0f08 	tst.w	r3, #8
 8002058:	d04c      	beq.n	80020f4 <HAL_RCC_OscConfig+0x340>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800205a:	6963      	ldr	r3, [r4, #20]
 800205c:	b39b      	cbz	r3, 80020c6 <HAL_RCC_OscConfig+0x312>
      __HAL_RCC_LSI_ENABLE();
 800205e:	4a98      	ldr	r2, [pc, #608]	@ (80022c0 <HAL_RCC_OscConfig+0x50c>)
 8002060:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8002064:	f043 0301 	orr.w	r3, r3, #1
 8002068:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      tickstart = HAL_GetTick();
 800206c:	f7fe ff56 	bl	8000f1c <HAL_GetTick>
 8002070:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002072:	4b93      	ldr	r3, [pc, #588]	@ (80022c0 <HAL_RCC_OscConfig+0x50c>)
 8002074:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002078:	f013 0f02 	tst.w	r3, #2
 800207c:	d13a      	bne.n	80020f4 <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800207e:	f7fe ff4d 	bl	8000f1c <HAL_GetTick>
 8002082:	1b80      	subs	r0, r0, r6
 8002084:	2802      	cmp	r0, #2
 8002086:	d9f4      	bls.n	8002072 <HAL_RCC_OscConfig+0x2be>
          return HAL_TIMEOUT;
 8002088:	2003      	movs	r0, #3
 800208a:	e192      	b.n	80023b2 <HAL_RCC_OscConfig+0x5fe>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800208c:	4a8c      	ldr	r2, [pc, #560]	@ (80022c0 <HAL_RCC_OscConfig+0x50c>)
 800208e:	6853      	ldr	r3, [r2, #4]
 8002090:	f023 53f8 	bic.w	r3, r3, #520093696	@ 0x1f000000
 8002094:	6921      	ldr	r1, [r4, #16]
 8002096:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800209a:	6053      	str	r3, [r2, #4]
 800209c:	e7d9      	b.n	8002052 <HAL_RCC_OscConfig+0x29e>
        __HAL_RCC_HSI_DISABLE();
 800209e:	4a88      	ldr	r2, [pc, #544]	@ (80022c0 <HAL_RCC_OscConfig+0x50c>)
 80020a0:	6813      	ldr	r3, [r2, #0]
 80020a2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80020a6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80020a8:	f7fe ff38 	bl	8000f1c <HAL_GetTick>
 80020ac:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020ae:	4b84      	ldr	r3, [pc, #528]	@ (80022c0 <HAL_RCC_OscConfig+0x50c>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 80020b6:	d0cc      	beq.n	8002052 <HAL_RCC_OscConfig+0x29e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020b8:	f7fe ff30 	bl	8000f1c <HAL_GetTick>
 80020bc:	1b80      	subs	r0, r0, r6
 80020be:	2802      	cmp	r0, #2
 80020c0:	d9f5      	bls.n	80020ae <HAL_RCC_OscConfig+0x2fa>
            return HAL_TIMEOUT;
 80020c2:	2003      	movs	r0, #3
 80020c4:	e175      	b.n	80023b2 <HAL_RCC_OscConfig+0x5fe>
      __HAL_RCC_LSI_DISABLE();
 80020c6:	4a7e      	ldr	r2, [pc, #504]	@ (80022c0 <HAL_RCC_OscConfig+0x50c>)
 80020c8:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 80020cc:	f023 0301 	bic.w	r3, r3, #1
 80020d0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      tickstart = HAL_GetTick();
 80020d4:	f7fe ff22 	bl	8000f1c <HAL_GetTick>
 80020d8:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020da:	4b79      	ldr	r3, [pc, #484]	@ (80022c0 <HAL_RCC_OscConfig+0x50c>)
 80020dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020e0:	f013 0f02 	tst.w	r3, #2
 80020e4:	d006      	beq.n	80020f4 <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020e6:	f7fe ff19 	bl	8000f1c <HAL_GetTick>
 80020ea:	1b80      	subs	r0, r0, r6
 80020ec:	2802      	cmp	r0, #2
 80020ee:	d9f4      	bls.n	80020da <HAL_RCC_OscConfig+0x326>
          return HAL_TIMEOUT;
 80020f0:	2003      	movs	r0, #3
 80020f2:	e15e      	b.n	80023b2 <HAL_RCC_OscConfig+0x5fe>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020f4:	6823      	ldr	r3, [r4, #0]
 80020f6:	f013 0f04 	tst.w	r3, #4
 80020fa:	d07a      	beq.n	80021f2 <HAL_RCC_OscConfig+0x43e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80020fc:	4b70      	ldr	r3, [pc, #448]	@ (80022c0 <HAL_RCC_OscConfig+0x50c>)
 80020fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002100:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8002104:	d136      	bne.n	8002174 <HAL_RCC_OscConfig+0x3c0>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002106:	4b6e      	ldr	r3, [pc, #440]	@ (80022c0 <HAL_RCC_OscConfig+0x50c>)
 8002108:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800210a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800210e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002112:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002116:	9301      	str	r3, [sp, #4]
 8002118:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800211a:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800211c:	4b69      	ldr	r3, [pc, #420]	@ (80022c4 <HAL_RCC_OscConfig+0x510>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002124:	d028      	beq.n	8002178 <HAL_RCC_OscConfig+0x3c4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002126:	68a3      	ldr	r3, [r4, #8]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d039      	beq.n	80021a0 <HAL_RCC_OscConfig+0x3ec>
 800212c:	2b05      	cmp	r3, #5
 800212e:	d03f      	beq.n	80021b0 <HAL_RCC_OscConfig+0x3fc>
 8002130:	4b63      	ldr	r3, [pc, #396]	@ (80022c0 <HAL_RCC_OscConfig+0x50c>)
 8002132:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8002136:	f022 0201 	bic.w	r2, r2, #1
 800213a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 800213e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8002142:	f022 0204 	bic.w	r2, r2, #4
 8002146:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800214a:	68a3      	ldr	r3, [r4, #8]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d03d      	beq.n	80021cc <HAL_RCC_OscConfig+0x418>
      tickstart = HAL_GetTick();
 8002150:	f7fe fee4 	bl	8000f1c <HAL_GetTick>
 8002154:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002156:	4b5a      	ldr	r3, [pc, #360]	@ (80022c0 <HAL_RCC_OscConfig+0x50c>)
 8002158:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800215c:	f013 0f02 	tst.w	r3, #2
 8002160:	d146      	bne.n	80021f0 <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002162:	f7fe fedb 	bl	8000f1c <HAL_GetTick>
 8002166:	1bc0      	subs	r0, r0, r7
 8002168:	f241 3388 	movw	r3, #5000	@ 0x1388
 800216c:	4298      	cmp	r0, r3
 800216e:	d9f2      	bls.n	8002156 <HAL_RCC_OscConfig+0x3a2>
          return HAL_TIMEOUT;
 8002170:	2003      	movs	r0, #3
 8002172:	e11e      	b.n	80023b2 <HAL_RCC_OscConfig+0x5fe>
    FlagStatus       pwrclkchanged = RESET;
 8002174:	2600      	movs	r6, #0
 8002176:	e7d1      	b.n	800211c <HAL_RCC_OscConfig+0x368>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002178:	4a52      	ldr	r2, [pc, #328]	@ (80022c4 <HAL_RCC_OscConfig+0x510>)
 800217a:	6813      	ldr	r3, [r2, #0]
 800217c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002180:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002182:	f7fe fecb 	bl	8000f1c <HAL_GetTick>
 8002186:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002188:	4b4e      	ldr	r3, [pc, #312]	@ (80022c4 <HAL_RCC_OscConfig+0x510>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002190:	d1c9      	bne.n	8002126 <HAL_RCC_OscConfig+0x372>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002192:	f7fe fec3 	bl	8000f1c <HAL_GetTick>
 8002196:	1bc0      	subs	r0, r0, r7
 8002198:	2802      	cmp	r0, #2
 800219a:	d9f5      	bls.n	8002188 <HAL_RCC_OscConfig+0x3d4>
          return HAL_TIMEOUT;
 800219c:	2003      	movs	r0, #3
 800219e:	e108      	b.n	80023b2 <HAL_RCC_OscConfig+0x5fe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021a0:	4a47      	ldr	r2, [pc, #284]	@ (80022c0 <HAL_RCC_OscConfig+0x50c>)
 80021a2:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80021a6:	f043 0301 	orr.w	r3, r3, #1
 80021aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021ae:	e7cc      	b.n	800214a <HAL_RCC_OscConfig+0x396>
 80021b0:	4b43      	ldr	r3, [pc, #268]	@ (80022c0 <HAL_RCC_OscConfig+0x50c>)
 80021b2:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80021b6:	f042 0204 	orr.w	r2, r2, #4
 80021ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 80021be:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80021c2:	f042 0201 	orr.w	r2, r2, #1
 80021c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 80021ca:	e7be      	b.n	800214a <HAL_RCC_OscConfig+0x396>
      tickstart = HAL_GetTick();
 80021cc:	f7fe fea6 	bl	8000f1c <HAL_GetTick>
 80021d0:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021d2:	4b3b      	ldr	r3, [pc, #236]	@ (80022c0 <HAL_RCC_OscConfig+0x50c>)
 80021d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021d8:	f013 0f02 	tst.w	r3, #2
 80021dc:	d008      	beq.n	80021f0 <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021de:	f7fe fe9d 	bl	8000f1c <HAL_GetTick>
 80021e2:	1bc0      	subs	r0, r0, r7
 80021e4:	f241 3388 	movw	r3, #5000	@ 0x1388
 80021e8:	4298      	cmp	r0, r3
 80021ea:	d9f2      	bls.n	80021d2 <HAL_RCC_OscConfig+0x41e>
          return HAL_TIMEOUT;
 80021ec:	2003      	movs	r0, #3
 80021ee:	e0e0      	b.n	80023b2 <HAL_RCC_OscConfig+0x5fe>
    if(pwrclkchanged == SET)
 80021f0:	b9ee      	cbnz	r6, 800222e <HAL_RCC_OscConfig+0x47a>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80021f2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f000 80db 	beq.w	80023b0 <HAL_RCC_OscConfig+0x5fc>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d01d      	beq.n	800223a <HAL_RCC_OscConfig+0x486>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021fe:	2d0c      	cmp	r5, #12
 8002200:	f000 80dd 	beq.w	80023be <HAL_RCC_OscConfig+0x60a>
        __HAL_RCC_PLL_DISABLE();
 8002204:	4a2e      	ldr	r2, [pc, #184]	@ (80022c0 <HAL_RCC_OscConfig+0x50c>)
 8002206:	6813      	ldr	r3, [r2, #0]
 8002208:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800220c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800220e:	f7fe fe85 	bl	8000f1c <HAL_GetTick>
 8002212:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002214:	4b2a      	ldr	r3, [pc, #168]	@ (80022c0 <HAL_RCC_OscConfig+0x50c>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800221c:	f000 80b7 	beq.w	800238e <HAL_RCC_OscConfig+0x5da>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002220:	f7fe fe7c 	bl	8000f1c <HAL_GetTick>
 8002224:	1b00      	subs	r0, r0, r4
 8002226:	2802      	cmp	r0, #2
 8002228:	d9f4      	bls.n	8002214 <HAL_RCC_OscConfig+0x460>
            return HAL_TIMEOUT;
 800222a:	2003      	movs	r0, #3
 800222c:	e0c1      	b.n	80023b2 <HAL_RCC_OscConfig+0x5fe>
      __HAL_RCC_PWR_CLK_DISABLE();
 800222e:	4a24      	ldr	r2, [pc, #144]	@ (80022c0 <HAL_RCC_OscConfig+0x50c>)
 8002230:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8002232:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002236:	6593      	str	r3, [r2, #88]	@ 0x58
 8002238:	e7db      	b.n	80021f2 <HAL_RCC_OscConfig+0x43e>
      pll_config = RCC->PLLCFGR;
 800223a:	4b21      	ldr	r3, [pc, #132]	@ (80022c0 <HAL_RCC_OscConfig+0x50c>)
 800223c:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800223e:	f003 0103 	and.w	r1, r3, #3
 8002242:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002244:	4291      	cmp	r1, r2
 8002246:	d00f      	beq.n	8002268 <HAL_RCC_OscConfig+0x4b4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002248:	2d0c      	cmp	r5, #12
 800224a:	f000 80b4 	beq.w	80023b6 <HAL_RCC_OscConfig+0x602>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800224e:	4b1c      	ldr	r3, [pc, #112]	@ (80022c0 <HAL_RCC_OscConfig+0x50c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f013 6f80 	tst.w	r3, #67108864	@ 0x4000000
 8002256:	f040 80b0 	bne.w	80023ba <HAL_RCC_OscConfig+0x606>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800225a:	4b19      	ldr	r3, [pc, #100]	@ (80022c0 <HAL_RCC_OscConfig+0x50c>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8002262:	d031      	beq.n	80022c8 <HAL_RCC_OscConfig+0x514>
            return HAL_ERROR;
 8002264:	2001      	movs	r0, #1
 8002266:	e0a4      	b.n	80023b2 <HAL_RCC_OscConfig+0x5fe>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002268:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800226c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800226e:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002270:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8002274:	d1e8      	bne.n	8002248 <HAL_RCC_OscConfig+0x494>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002276:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800227a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800227c:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8002280:	d1e2      	bne.n	8002248 <HAL_RCC_OscConfig+0x494>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002282:	f403 3100 	and.w	r1, r3, #131072	@ 0x20000
 8002286:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8002288:	3a07      	subs	r2, #7
 800228a:	bf18      	it	ne
 800228c:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800228e:	4291      	cmp	r1, r2
 8002290:	d1da      	bne.n	8002248 <HAL_RCC_OscConfig+0x494>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002292:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 8002296:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8002298:	0852      	lsrs	r2, r2, #1
 800229a:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800229c:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80022a0:	d1d2      	bne.n	8002248 <HAL_RCC_OscConfig+0x494>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80022a2:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 80022a6:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80022a8:	0852      	lsrs	r2, r2, #1
 80022aa:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022ac:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 80022b0:	d1ca      	bne.n	8002248 <HAL_RCC_OscConfig+0x494>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022b2:	4b03      	ldr	r3, [pc, #12]	@ (80022c0 <HAL_RCC_OscConfig+0x50c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80022ba:	d04e      	beq.n	800235a <HAL_RCC_OscConfig+0x5a6>
  return HAL_OK;
 80022bc:	2000      	movs	r0, #0
 80022be:	e078      	b.n	80023b2 <HAL_RCC_OscConfig+0x5fe>
 80022c0:	40021000 	.word	0x40021000
 80022c4:	40007000 	.word	0x40007000
            __HAL_RCC_PLL_DISABLE();
 80022c8:	4a3e      	ldr	r2, [pc, #248]	@ (80023c4 <HAL_RCC_OscConfig+0x610>)
 80022ca:	6813      	ldr	r3, [r2, #0]
 80022cc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80022d0:	6013      	str	r3, [r2, #0]
            tickstart = HAL_GetTick();
 80022d2:	f7fe fe23 	bl	8000f1c <HAL_GetTick>
 80022d6:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022d8:	4b3a      	ldr	r3, [pc, #232]	@ (80023c4 <HAL_RCC_OscConfig+0x610>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80022e0:	d006      	beq.n	80022f0 <HAL_RCC_OscConfig+0x53c>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022e2:	f7fe fe1b 	bl	8000f1c <HAL_GetTick>
 80022e6:	1b40      	subs	r0, r0, r5
 80022e8:	2802      	cmp	r0, #2
 80022ea:	d9f5      	bls.n	80022d8 <HAL_RCC_OscConfig+0x524>
                return HAL_TIMEOUT;
 80022ec:	2003      	movs	r0, #3
 80022ee:	e060      	b.n	80023b2 <HAL_RCC_OscConfig+0x5fe>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022f0:	4a34      	ldr	r2, [pc, #208]	@ (80023c4 <HAL_RCC_OscConfig+0x610>)
 80022f2:	68d3      	ldr	r3, [r2, #12]
 80022f4:	4934      	ldr	r1, [pc, #208]	@ (80023c8 <HAL_RCC_OscConfig+0x614>)
 80022f6:	4019      	ands	r1, r3
 80022f8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80022fa:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80022fc:	3801      	subs	r0, #1
 80022fe:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8002302:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8002304:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002308:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800230a:	0840      	lsrs	r0, r0, #1
 800230c:	3801      	subs	r0, #1
 800230e:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 8002312:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8002314:	0840      	lsrs	r0, r0, #1
 8002316:	3801      	subs	r0, #1
 8002318:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 800231c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800231e:	0900      	lsrs	r0, r0, #4
 8002320:	ea43 4340 	orr.w	r3, r3, r0, lsl #17
 8002324:	4319      	orrs	r1, r3
 8002326:	60d1      	str	r1, [r2, #12]
            __HAL_RCC_PLL_ENABLE();
 8002328:	6813      	ldr	r3, [r2, #0]
 800232a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800232e:	6013      	str	r3, [r2, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002330:	68d3      	ldr	r3, [r2, #12]
 8002332:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002336:	60d3      	str	r3, [r2, #12]
            tickstart = HAL_GetTick();
 8002338:	f7fe fdf0 	bl	8000f1c <HAL_GetTick>
 800233c:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800233e:	4b21      	ldr	r3, [pc, #132]	@ (80023c4 <HAL_RCC_OscConfig+0x610>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002346:	d106      	bne.n	8002356 <HAL_RCC_OscConfig+0x5a2>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002348:	f7fe fde8 	bl	8000f1c <HAL_GetTick>
 800234c:	1b00      	subs	r0, r0, r4
 800234e:	2802      	cmp	r0, #2
 8002350:	d9f5      	bls.n	800233e <HAL_RCC_OscConfig+0x58a>
                return HAL_TIMEOUT;
 8002352:	2003      	movs	r0, #3
 8002354:	e02d      	b.n	80023b2 <HAL_RCC_OscConfig+0x5fe>
  return HAL_OK;
 8002356:	2000      	movs	r0, #0
 8002358:	e02b      	b.n	80023b2 <HAL_RCC_OscConfig+0x5fe>
          __HAL_RCC_PLL_ENABLE();
 800235a:	4b1a      	ldr	r3, [pc, #104]	@ (80023c4 <HAL_RCC_OscConfig+0x610>)
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8002362:	601a      	str	r2, [r3, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002364:	68da      	ldr	r2, [r3, #12]
 8002366:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800236a:	60da      	str	r2, [r3, #12]
          tickstart = HAL_GetTick();
 800236c:	f7fe fdd6 	bl	8000f1c <HAL_GetTick>
 8002370:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002372:	4b14      	ldr	r3, [pc, #80]	@ (80023c4 <HAL_RCC_OscConfig+0x610>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800237a:	d106      	bne.n	800238a <HAL_RCC_OscConfig+0x5d6>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800237c:	f7fe fdce 	bl	8000f1c <HAL_GetTick>
 8002380:	1b03      	subs	r3, r0, r4
 8002382:	2b02      	cmp	r3, #2
 8002384:	d9f5      	bls.n	8002372 <HAL_RCC_OscConfig+0x5be>
              return HAL_TIMEOUT;
 8002386:	2003      	movs	r0, #3
 8002388:	e013      	b.n	80023b2 <HAL_RCC_OscConfig+0x5fe>
  return HAL_OK;
 800238a:	2000      	movs	r0, #0
 800238c:	e011      	b.n	80023b2 <HAL_RCC_OscConfig+0x5fe>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800238e:	4a0d      	ldr	r2, [pc, #52]	@ (80023c4 <HAL_RCC_OscConfig+0x610>)
 8002390:	68d1      	ldr	r1, [r2, #12]
 8002392:	4b0e      	ldr	r3, [pc, #56]	@ (80023cc <HAL_RCC_OscConfig+0x618>)
 8002394:	400b      	ands	r3, r1
 8002396:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8002398:	2000      	movs	r0, #0
 800239a:	e00a      	b.n	80023b2 <HAL_RCC_OscConfig+0x5fe>
    return HAL_ERROR;
 800239c:	2001      	movs	r0, #1
}
 800239e:	4770      	bx	lr
        return HAL_ERROR;
 80023a0:	2001      	movs	r0, #1
 80023a2:	e006      	b.n	80023b2 <HAL_RCC_OscConfig+0x5fe>
            return HAL_ERROR;
 80023a4:	2001      	movs	r0, #1
 80023a6:	e004      	b.n	80023b2 <HAL_RCC_OscConfig+0x5fe>
        return HAL_ERROR;
 80023a8:	2001      	movs	r0, #1
 80023aa:	e002      	b.n	80023b2 <HAL_RCC_OscConfig+0x5fe>
        return HAL_ERROR;
 80023ac:	2001      	movs	r0, #1
 80023ae:	e000      	b.n	80023b2 <HAL_RCC_OscConfig+0x5fe>
  return HAL_OK;
 80023b0:	2000      	movs	r0, #0
}
 80023b2:	b003      	add	sp, #12
 80023b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
          return HAL_ERROR;
 80023b6:	2001      	movs	r0, #1
 80023b8:	e7fb      	b.n	80023b2 <HAL_RCC_OscConfig+0x5fe>
            return HAL_ERROR;
 80023ba:	2001      	movs	r0, #1
 80023bc:	e7f9      	b.n	80023b2 <HAL_RCC_OscConfig+0x5fe>
        return HAL_ERROR;
 80023be:	2001      	movs	r0, #1
 80023c0:	e7f7      	b.n	80023b2 <HAL_RCC_OscConfig+0x5fe>
 80023c2:	bf00      	nop
 80023c4:	40021000 	.word	0x40021000
 80023c8:	f99d808c 	.word	0xf99d808c
 80023cc:	feeefffc 	.word	0xfeeefffc

080023d0 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80023d0:	2800      	cmp	r0, #0
 80023d2:	f000 80af 	beq.w	8002534 <HAL_RCC_ClockConfig+0x164>
{
 80023d6:	b570      	push	{r4, r5, r6, lr}
 80023d8:	460d      	mov	r5, r1
 80023da:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023dc:	4b59      	ldr	r3, [pc, #356]	@ (8002544 <HAL_RCC_ClockConfig+0x174>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0307 	and.w	r3, r3, #7
 80023e4:	428b      	cmp	r3, r1
 80023e6:	d20b      	bcs.n	8002400 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023e8:	4a56      	ldr	r2, [pc, #344]	@ (8002544 <HAL_RCC_ClockConfig+0x174>)
 80023ea:	6813      	ldr	r3, [r2, #0]
 80023ec:	f023 0307 	bic.w	r3, r3, #7
 80023f0:	430b      	orrs	r3, r1
 80023f2:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023f4:	6813      	ldr	r3, [r2, #0]
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	428b      	cmp	r3, r1
 80023fc:	f040 809c 	bne.w	8002538 <HAL_RCC_ClockConfig+0x168>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002400:	6823      	ldr	r3, [r4, #0]
 8002402:	f013 0f02 	tst.w	r3, #2
 8002406:	d00c      	beq.n	8002422 <HAL_RCC_ClockConfig+0x52>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002408:	68a2      	ldr	r2, [r4, #8]
 800240a:	4b4f      	ldr	r3, [pc, #316]	@ (8002548 <HAL_RCC_ClockConfig+0x178>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002412:	429a      	cmp	r2, r3
 8002414:	d905      	bls.n	8002422 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002416:	494c      	ldr	r1, [pc, #304]	@ (8002548 <HAL_RCC_ClockConfig+0x178>)
 8002418:	688b      	ldr	r3, [r1, #8]
 800241a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800241e:	431a      	orrs	r2, r3
 8002420:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002422:	6823      	ldr	r3, [r4, #0]
 8002424:	f013 0f01 	tst.w	r3, #1
 8002428:	d039      	beq.n	800249e <HAL_RCC_ClockConfig+0xce>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800242a:	6863      	ldr	r3, [r4, #4]
 800242c:	2b03      	cmp	r3, #3
 800242e:	d009      	beq.n	8002444 <HAL_RCC_ClockConfig+0x74>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002430:	2b02      	cmp	r3, #2
 8002432:	d026      	beq.n	8002482 <HAL_RCC_ClockConfig+0xb2>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002434:	bb63      	cbnz	r3, 8002490 <HAL_RCC_ClockConfig+0xc0>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002436:	4a44      	ldr	r2, [pc, #272]	@ (8002548 <HAL_RCC_ClockConfig+0x178>)
 8002438:	6812      	ldr	r2, [r2, #0]
 800243a:	f012 0f02 	tst.w	r2, #2
 800243e:	d106      	bne.n	800244e <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 8002440:	2001      	movs	r0, #1
 8002442:	e076      	b.n	8002532 <HAL_RCC_ClockConfig+0x162>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002444:	4a40      	ldr	r2, [pc, #256]	@ (8002548 <HAL_RCC_ClockConfig+0x178>)
 8002446:	6812      	ldr	r2, [r2, #0]
 8002448:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800244c:	d076      	beq.n	800253c <HAL_RCC_ClockConfig+0x16c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800244e:	493e      	ldr	r1, [pc, #248]	@ (8002548 <HAL_RCC_ClockConfig+0x178>)
 8002450:	688a      	ldr	r2, [r1, #8]
 8002452:	f022 0203 	bic.w	r2, r2, #3
 8002456:	4313      	orrs	r3, r2
 8002458:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800245a:	f7fe fd5f 	bl	8000f1c <HAL_GetTick>
 800245e:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002460:	4b39      	ldr	r3, [pc, #228]	@ (8002548 <HAL_RCC_ClockConfig+0x178>)
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f003 030c 	and.w	r3, r3, #12
 8002468:	6862      	ldr	r2, [r4, #4]
 800246a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800246e:	d016      	beq.n	800249e <HAL_RCC_ClockConfig+0xce>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002470:	f7fe fd54 	bl	8000f1c <HAL_GetTick>
 8002474:	1b80      	subs	r0, r0, r6
 8002476:	f241 3388 	movw	r3, #5000	@ 0x1388
 800247a:	4298      	cmp	r0, r3
 800247c:	d9f0      	bls.n	8002460 <HAL_RCC_ClockConfig+0x90>
        return HAL_TIMEOUT;
 800247e:	2003      	movs	r0, #3
 8002480:	e057      	b.n	8002532 <HAL_RCC_ClockConfig+0x162>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002482:	4a31      	ldr	r2, [pc, #196]	@ (8002548 <HAL_RCC_ClockConfig+0x178>)
 8002484:	6812      	ldr	r2, [r2, #0]
 8002486:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 800248a:	d1e0      	bne.n	800244e <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 800248c:	2001      	movs	r0, #1
 800248e:	e050      	b.n	8002532 <HAL_RCC_ClockConfig+0x162>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002490:	4a2d      	ldr	r2, [pc, #180]	@ (8002548 <HAL_RCC_ClockConfig+0x178>)
 8002492:	6812      	ldr	r2, [r2, #0]
 8002494:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8002498:	d1d9      	bne.n	800244e <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 800249a:	2001      	movs	r0, #1
 800249c:	e049      	b.n	8002532 <HAL_RCC_ClockConfig+0x162>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800249e:	6823      	ldr	r3, [r4, #0]
 80024a0:	f013 0f02 	tst.w	r3, #2
 80024a4:	d00c      	beq.n	80024c0 <HAL_RCC_ClockConfig+0xf0>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80024a6:	68a2      	ldr	r2, [r4, #8]
 80024a8:	4b27      	ldr	r3, [pc, #156]	@ (8002548 <HAL_RCC_ClockConfig+0x178>)
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d205      	bcs.n	80024c0 <HAL_RCC_ClockConfig+0xf0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024b4:	4924      	ldr	r1, [pc, #144]	@ (8002548 <HAL_RCC_ClockConfig+0x178>)
 80024b6:	688b      	ldr	r3, [r1, #8]
 80024b8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80024bc:	431a      	orrs	r2, r3
 80024be:	608a      	str	r2, [r1, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024c0:	4b20      	ldr	r3, [pc, #128]	@ (8002544 <HAL_RCC_ClockConfig+0x174>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0307 	and.w	r3, r3, #7
 80024c8:	42ab      	cmp	r3, r5
 80024ca:	d90a      	bls.n	80024e2 <HAL_RCC_ClockConfig+0x112>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024cc:	4a1d      	ldr	r2, [pc, #116]	@ (8002544 <HAL_RCC_ClockConfig+0x174>)
 80024ce:	6813      	ldr	r3, [r2, #0]
 80024d0:	f023 0307 	bic.w	r3, r3, #7
 80024d4:	432b      	orrs	r3, r5
 80024d6:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024d8:	6813      	ldr	r3, [r2, #0]
 80024da:	f003 0307 	and.w	r3, r3, #7
 80024de:	42ab      	cmp	r3, r5
 80024e0:	d12e      	bne.n	8002540 <HAL_RCC_ClockConfig+0x170>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024e2:	6823      	ldr	r3, [r4, #0]
 80024e4:	f013 0f04 	tst.w	r3, #4
 80024e8:	d006      	beq.n	80024f8 <HAL_RCC_ClockConfig+0x128>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024ea:	4a17      	ldr	r2, [pc, #92]	@ (8002548 <HAL_RCC_ClockConfig+0x178>)
 80024ec:	6893      	ldr	r3, [r2, #8]
 80024ee:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80024f2:	68e1      	ldr	r1, [r4, #12]
 80024f4:	430b      	orrs	r3, r1
 80024f6:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024f8:	6823      	ldr	r3, [r4, #0]
 80024fa:	f013 0f08 	tst.w	r3, #8
 80024fe:	d007      	beq.n	8002510 <HAL_RCC_ClockConfig+0x140>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002500:	4a11      	ldr	r2, [pc, #68]	@ (8002548 <HAL_RCC_ClockConfig+0x178>)
 8002502:	6893      	ldr	r3, [r2, #8]
 8002504:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8002508:	6921      	ldr	r1, [r4, #16]
 800250a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800250e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002510:	f7ff fbfc 	bl	8001d0c <HAL_RCC_GetSysClockFreq>
 8002514:	4b0c      	ldr	r3, [pc, #48]	@ (8002548 <HAL_RCC_ClockConfig+0x178>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800251c:	4a0b      	ldr	r2, [pc, #44]	@ (800254c <HAL_RCC_ClockConfig+0x17c>)
 800251e:	5cd3      	ldrb	r3, [r2, r3]
 8002520:	f003 031f 	and.w	r3, r3, #31
 8002524:	40d8      	lsrs	r0, r3
 8002526:	4b0a      	ldr	r3, [pc, #40]	@ (8002550 <HAL_RCC_ClockConfig+0x180>)
 8002528:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 800252a:	4b0a      	ldr	r3, [pc, #40]	@ (8002554 <HAL_RCC_ClockConfig+0x184>)
 800252c:	6818      	ldr	r0, [r3, #0]
 800252e:	f7fe fcab 	bl	8000e88 <HAL_InitTick>
}
 8002532:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002534:	2001      	movs	r0, #1
}
 8002536:	4770      	bx	lr
      return HAL_ERROR;
 8002538:	2001      	movs	r0, #1
 800253a:	e7fa      	b.n	8002532 <HAL_RCC_ClockConfig+0x162>
        return HAL_ERROR;
 800253c:	2001      	movs	r0, #1
 800253e:	e7f8      	b.n	8002532 <HAL_RCC_ClockConfig+0x162>
      return HAL_ERROR;
 8002540:	2001      	movs	r0, #1
 8002542:	e7f6      	b.n	8002532 <HAL_RCC_ClockConfig+0x162>
 8002544:	40022000 	.word	0x40022000
 8002548:	40021000 	.word	0x40021000
 800254c:	08003a48 	.word	0x08003a48
 8002550:	2000000c 	.word	0x2000000c
 8002554:	20000008 	.word	0x20000008

08002558 <HAL_RCC_GetHCLKFreq>:
}
 8002558:	4b01      	ldr	r3, [pc, #4]	@ (8002560 <HAL_RCC_GetHCLKFreq+0x8>)
 800255a:	6818      	ldr	r0, [r3, #0]
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	2000000c 	.word	0x2000000c

08002564 <HAL_RCC_GetPCLK1Freq>:
{
 8002564:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002566:	f7ff fff7 	bl	8002558 <HAL_RCC_GetHCLKFreq>
 800256a:	4b05      	ldr	r3, [pc, #20]	@ (8002580 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002572:	4a04      	ldr	r2, [pc, #16]	@ (8002584 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002574:	5cd3      	ldrb	r3, [r2, r3]
 8002576:	f003 031f 	and.w	r3, r3, #31
}
 800257a:	40d8      	lsrs	r0, r3
 800257c:	bd08      	pop	{r3, pc}
 800257e:	bf00      	nop
 8002580:	40021000 	.word	0x40021000
 8002584:	08003a40 	.word	0x08003a40

08002588 <HAL_RCC_GetPCLK2Freq>:
{
 8002588:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800258a:	f7ff ffe5 	bl	8002558 <HAL_RCC_GetHCLKFreq>
 800258e:	4b05      	ldr	r3, [pc, #20]	@ (80025a4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002596:	4a04      	ldr	r2, [pc, #16]	@ (80025a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002598:	5cd3      	ldrb	r3, [r2, r3]
 800259a:	f003 031f 	and.w	r3, r3, #31
}
 800259e:	40d8      	lsrs	r0, r3
 80025a0:	bd08      	pop	{r3, pc}
 80025a2:	bf00      	nop
 80025a4:	40021000 	.word	0x40021000
 80025a8:	08003a40 	.word	0x08003a40

080025ac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80025ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ae:	4604      	mov	r4, r0
 80025b0:	460d      	mov	r5, r1
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80025b2:	4b59      	ldr	r3, [pc, #356]	@ (8002718 <RCCEx_PLLSAI1_Config+0x16c>)
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	f013 0f03 	tst.w	r3, #3
 80025ba:	d018      	beq.n	80025ee <RCCEx_PLLSAI1_Config+0x42>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80025bc:	4b56      	ldr	r3, [pc, #344]	@ (8002718 <RCCEx_PLLSAI1_Config+0x16c>)
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	f003 0303 	and.w	r3, r3, #3
 80025c4:	6802      	ldr	r2, [r0, #0]
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d002      	beq.n	80025d0 <RCCEx_PLLSAI1_Config+0x24>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80025ca:	2601      	movs	r6, #1
      }
    }
  }

  return status;
}
 80025cc:	4630      	mov	r0, r6
 80025ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 80025d0:	2a00      	cmp	r2, #0
 80025d2:	f000 809d 	beq.w	8002710 <RCCEx_PLLSAI1_Config+0x164>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80025d6:	4b50      	ldr	r3, [pc, #320]	@ (8002718 <RCCEx_PLLSAI1_Config+0x16c>)
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80025de:	3301      	adds	r3, #1
 80025e0:	6842      	ldr	r2, [r0, #4]
       ||
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d001      	beq.n	80025ea <RCCEx_PLLSAI1_Config+0x3e>
      status = HAL_ERROR;
 80025e6:	2601      	movs	r6, #1
 80025e8:	e7f0      	b.n	80025cc <RCCEx_PLLSAI1_Config+0x20>
  HAL_StatusTypeDef status = HAL_OK;
 80025ea:	2600      	movs	r6, #0
 80025ec:	e019      	b.n	8002622 <RCCEx_PLLSAI1_Config+0x76>
    switch(PllSai1->PLLSAI1Source)
 80025ee:	6803      	ldr	r3, [r0, #0]
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d056      	beq.n	80026a2 <RCCEx_PLLSAI1_Config+0xf6>
 80025f4:	2b03      	cmp	r3, #3
 80025f6:	d05b      	beq.n	80026b0 <RCCEx_PLLSAI1_Config+0x104>
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	f040 808b 	bne.w	8002714 <RCCEx_PLLSAI1_Config+0x168>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80025fe:	4a46      	ldr	r2, [pc, #280]	@ (8002718 <RCCEx_PLLSAI1_Config+0x16c>)
 8002600:	6812      	ldr	r2, [r2, #0]
 8002602:	f012 0f02 	tst.w	r2, #2
 8002606:	d05f      	beq.n	80026c8 <RCCEx_PLLSAI1_Config+0x11c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002608:	4843      	ldr	r0, [pc, #268]	@ (8002718 <RCCEx_PLLSAI1_Config+0x16c>)
 800260a:	68c2      	ldr	r2, [r0, #12]
 800260c:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 8002610:	6861      	ldr	r1, [r4, #4]
 8002612:	3901      	subs	r1, #1
 8002614:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8002618:	4313      	orrs	r3, r2
 800261a:	60c3      	str	r3, [r0, #12]
 800261c:	2600      	movs	r6, #0
  if(status == HAL_OK)
 800261e:	2e00      	cmp	r6, #0
 8002620:	d1d4      	bne.n	80025cc <RCCEx_PLLSAI1_Config+0x20>
    __HAL_RCC_PLLSAI1_DISABLE();
 8002622:	4a3d      	ldr	r2, [pc, #244]	@ (8002718 <RCCEx_PLLSAI1_Config+0x16c>)
 8002624:	6813      	ldr	r3, [r2, #0]
 8002626:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800262a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800262c:	f7fe fc76 	bl	8000f1c <HAL_GetTick>
 8002630:	4607      	mov	r7, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002632:	4b39      	ldr	r3, [pc, #228]	@ (8002718 <RCCEx_PLLSAI1_Config+0x16c>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 800263a:	d005      	beq.n	8002648 <RCCEx_PLLSAI1_Config+0x9c>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800263c:	f7fe fc6e 	bl	8000f1c <HAL_GetTick>
 8002640:	1bc3      	subs	r3, r0, r7
 8002642:	2b02      	cmp	r3, #2
 8002644:	d9f5      	bls.n	8002632 <RCCEx_PLLSAI1_Config+0x86>
        status = HAL_TIMEOUT;
 8002646:	2603      	movs	r6, #3
    if(status == HAL_OK)
 8002648:	2e00      	cmp	r6, #0
 800264a:	d1bf      	bne.n	80025cc <RCCEx_PLLSAI1_Config+0x20>
      if(Divider == DIVIDER_P_UPDATE)
 800264c:	2d00      	cmp	r5, #0
 800264e:	d13d      	bne.n	80026cc <RCCEx_PLLSAI1_Config+0x120>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002650:	4931      	ldr	r1, [pc, #196]	@ (8002718 <RCCEx_PLLSAI1_Config+0x16c>)
 8002652:	690b      	ldr	r3, [r1, #16]
 8002654:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002658:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800265c:	68a0      	ldr	r0, [r4, #8]
 800265e:	68e2      	ldr	r2, [r4, #12]
 8002660:	0912      	lsrs	r2, r2, #4
 8002662:	0452      	lsls	r2, r2, #17
 8002664:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002668:	4313      	orrs	r3, r2
 800266a:	610b      	str	r3, [r1, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 800266c:	4a2a      	ldr	r2, [pc, #168]	@ (8002718 <RCCEx_PLLSAI1_Config+0x16c>)
 800266e:	6813      	ldr	r3, [r2, #0]
 8002670:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002674:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002676:	f7fe fc51 	bl	8000f1c <HAL_GetTick>
 800267a:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800267c:	4b26      	ldr	r3, [pc, #152]	@ (8002718 <RCCEx_PLLSAI1_Config+0x16c>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8002684:	d105      	bne.n	8002692 <RCCEx_PLLSAI1_Config+0xe6>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002686:	f7fe fc49 	bl	8000f1c <HAL_GetTick>
 800268a:	1b40      	subs	r0, r0, r5
 800268c:	2802      	cmp	r0, #2
 800268e:	d9f5      	bls.n	800267c <RCCEx_PLLSAI1_Config+0xd0>
          status = HAL_TIMEOUT;
 8002690:	2603      	movs	r6, #3
      if(status == HAL_OK)
 8002692:	2e00      	cmp	r6, #0
 8002694:	d19a      	bne.n	80025cc <RCCEx_PLLSAI1_Config+0x20>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002696:	4a20      	ldr	r2, [pc, #128]	@ (8002718 <RCCEx_PLLSAI1_Config+0x16c>)
 8002698:	6913      	ldr	r3, [r2, #16]
 800269a:	69a1      	ldr	r1, [r4, #24]
 800269c:	430b      	orrs	r3, r1
 800269e:	6113      	str	r3, [r2, #16]
 80026a0:	e794      	b.n	80025cc <RCCEx_PLLSAI1_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80026a2:	4a1d      	ldr	r2, [pc, #116]	@ (8002718 <RCCEx_PLLSAI1_Config+0x16c>)
 80026a4:	6812      	ldr	r2, [r2, #0]
 80026a6:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 80026aa:	d1ad      	bne.n	8002608 <RCCEx_PLLSAI1_Config+0x5c>
 80026ac:	2601      	movs	r6, #1
 80026ae:	e78d      	b.n	80025cc <RCCEx_PLLSAI1_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80026b0:	4a19      	ldr	r2, [pc, #100]	@ (8002718 <RCCEx_PLLSAI1_Config+0x16c>)
 80026b2:	6812      	ldr	r2, [r2, #0]
 80026b4:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 80026b8:	d1a6      	bne.n	8002608 <RCCEx_PLLSAI1_Config+0x5c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80026ba:	4a17      	ldr	r2, [pc, #92]	@ (8002718 <RCCEx_PLLSAI1_Config+0x16c>)
 80026bc:	6812      	ldr	r2, [r2, #0]
 80026be:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 80026c2:	d1a1      	bne.n	8002608 <RCCEx_PLLSAI1_Config+0x5c>
 80026c4:	2601      	movs	r6, #1
 80026c6:	e781      	b.n	80025cc <RCCEx_PLLSAI1_Config+0x20>
        status = HAL_ERROR;
 80026c8:	2601      	movs	r6, #1
 80026ca:	e7a8      	b.n	800261e <RCCEx_PLLSAI1_Config+0x72>
      else if(Divider == DIVIDER_Q_UPDATE)
 80026cc:	2d01      	cmp	r5, #1
 80026ce:	d00f      	beq.n	80026f0 <RCCEx_PLLSAI1_Config+0x144>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026d0:	4811      	ldr	r0, [pc, #68]	@ (8002718 <RCCEx_PLLSAI1_Config+0x16c>)
 80026d2:	6902      	ldr	r2, [r0, #16]
 80026d4:	f022 62c0 	bic.w	r2, r2, #100663296	@ 0x6000000
 80026d8:	f422 42fe 	bic.w	r2, r2, #32512	@ 0x7f00
 80026dc:	68a1      	ldr	r1, [r4, #8]
 80026de:	6963      	ldr	r3, [r4, #20]
 80026e0:	085b      	lsrs	r3, r3, #1
 80026e2:	3b01      	subs	r3, #1
 80026e4:	065b      	lsls	r3, r3, #25
 80026e6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80026ea:	431a      	orrs	r2, r3
 80026ec:	6102      	str	r2, [r0, #16]
 80026ee:	e7bd      	b.n	800266c <RCCEx_PLLSAI1_Config+0xc0>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026f0:	4809      	ldr	r0, [pc, #36]	@ (8002718 <RCCEx_PLLSAI1_Config+0x16c>)
 80026f2:	6902      	ldr	r2, [r0, #16]
 80026f4:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 80026f8:	f422 42fe 	bic.w	r2, r2, #32512	@ 0x7f00
 80026fc:	68a1      	ldr	r1, [r4, #8]
 80026fe:	6923      	ldr	r3, [r4, #16]
 8002700:	085b      	lsrs	r3, r3, #1
 8002702:	3b01      	subs	r3, #1
 8002704:	055b      	lsls	r3, r3, #21
 8002706:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800270a:	431a      	orrs	r2, r3
 800270c:	6102      	str	r2, [r0, #16]
 800270e:	e7ad      	b.n	800266c <RCCEx_PLLSAI1_Config+0xc0>
      status = HAL_ERROR;
 8002710:	2601      	movs	r6, #1
 8002712:	e75b      	b.n	80025cc <RCCEx_PLLSAI1_Config+0x20>
    switch(PllSai1->PLLSAI1Source)
 8002714:	2601      	movs	r6, #1
 8002716:	e759      	b.n	80025cc <RCCEx_PLLSAI1_Config+0x20>
 8002718:	40021000 	.word	0x40021000

0800271c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800271c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800271e:	4604      	mov	r4, r0
 8002720:	460d      	mov	r5, r1
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002722:	4b50      	ldr	r3, [pc, #320]	@ (8002864 <RCCEx_PLLSAI2_Config+0x148>)
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	f013 0f03 	tst.w	r3, #3
 800272a:	d018      	beq.n	800275e <RCCEx_PLLSAI2_Config+0x42>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800272c:	4b4d      	ldr	r3, [pc, #308]	@ (8002864 <RCCEx_PLLSAI2_Config+0x148>)
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	f003 0303 	and.w	r3, r3, #3
 8002734:	6802      	ldr	r2, [r0, #0]
 8002736:	4293      	cmp	r3, r2
 8002738:	d002      	beq.n	8002740 <RCCEx_PLLSAI2_Config+0x24>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800273a:	2601      	movs	r6, #1
      }
    }
  }

  return status;
}
 800273c:	4630      	mov	r0, r6
 800273e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 8002740:	2a00      	cmp	r2, #0
 8002742:	f000 808a 	beq.w	800285a <RCCEx_PLLSAI2_Config+0x13e>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002746:	4b47      	ldr	r3, [pc, #284]	@ (8002864 <RCCEx_PLLSAI2_Config+0x148>)
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800274e:	3301      	adds	r3, #1
 8002750:	6842      	ldr	r2, [r0, #4]
       ||
 8002752:	4293      	cmp	r3, r2
 8002754:	d001      	beq.n	800275a <RCCEx_PLLSAI2_Config+0x3e>
      status = HAL_ERROR;
 8002756:	2601      	movs	r6, #1
 8002758:	e7f0      	b.n	800273c <RCCEx_PLLSAI2_Config+0x20>
  HAL_StatusTypeDef status = HAL_OK;
 800275a:	2600      	movs	r6, #0
 800275c:	e018      	b.n	8002790 <RCCEx_PLLSAI2_Config+0x74>
    switch(PllSai2->PLLSAI2Source)
 800275e:	6803      	ldr	r3, [r0, #0]
 8002760:	2b02      	cmp	r3, #2
 8002762:	d055      	beq.n	8002810 <RCCEx_PLLSAI2_Config+0xf4>
 8002764:	2b03      	cmp	r3, #3
 8002766:	d05a      	beq.n	800281e <RCCEx_PLLSAI2_Config+0x102>
 8002768:	2b01      	cmp	r3, #1
 800276a:	d178      	bne.n	800285e <RCCEx_PLLSAI2_Config+0x142>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800276c:	4a3d      	ldr	r2, [pc, #244]	@ (8002864 <RCCEx_PLLSAI2_Config+0x148>)
 800276e:	6812      	ldr	r2, [r2, #0]
 8002770:	f012 0f02 	tst.w	r2, #2
 8002774:	d05f      	beq.n	8002836 <RCCEx_PLLSAI2_Config+0x11a>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002776:	483b      	ldr	r0, [pc, #236]	@ (8002864 <RCCEx_PLLSAI2_Config+0x148>)
 8002778:	68c2      	ldr	r2, [r0, #12]
 800277a:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 800277e:	6861      	ldr	r1, [r4, #4]
 8002780:	3901      	subs	r1, #1
 8002782:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8002786:	4313      	orrs	r3, r2
 8002788:	60c3      	str	r3, [r0, #12]
 800278a:	2600      	movs	r6, #0
  if(status == HAL_OK)
 800278c:	2e00      	cmp	r6, #0
 800278e:	d1d5      	bne.n	800273c <RCCEx_PLLSAI2_Config+0x20>
    __HAL_RCC_PLLSAI2_DISABLE();
 8002790:	4a34      	ldr	r2, [pc, #208]	@ (8002864 <RCCEx_PLLSAI2_Config+0x148>)
 8002792:	6813      	ldr	r3, [r2, #0]
 8002794:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002798:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800279a:	f7fe fbbf 	bl	8000f1c <HAL_GetTick>
 800279e:	4607      	mov	r7, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80027a0:	4b30      	ldr	r3, [pc, #192]	@ (8002864 <RCCEx_PLLSAI2_Config+0x148>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 80027a8:	d005      	beq.n	80027b6 <RCCEx_PLLSAI2_Config+0x9a>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80027aa:	f7fe fbb7 	bl	8000f1c <HAL_GetTick>
 80027ae:	1bc3      	subs	r3, r0, r7
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d9f5      	bls.n	80027a0 <RCCEx_PLLSAI2_Config+0x84>
        status = HAL_TIMEOUT;
 80027b4:	2603      	movs	r6, #3
    if(status == HAL_OK)
 80027b6:	2e00      	cmp	r6, #0
 80027b8:	d1c0      	bne.n	800273c <RCCEx_PLLSAI2_Config+0x20>
      if(Divider == DIVIDER_P_UPDATE)
 80027ba:	2d00      	cmp	r5, #0
 80027bc:	d13d      	bne.n	800283a <RCCEx_PLLSAI2_Config+0x11e>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80027be:	4929      	ldr	r1, [pc, #164]	@ (8002864 <RCCEx_PLLSAI2_Config+0x148>)
 80027c0:	694b      	ldr	r3, [r1, #20]
 80027c2:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80027c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027ca:	68a0      	ldr	r0, [r4, #8]
 80027cc:	68e2      	ldr	r2, [r4, #12]
 80027ce:	0912      	lsrs	r2, r2, #4
 80027d0:	0452      	lsls	r2, r2, #17
 80027d2:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80027d6:	4313      	orrs	r3, r2
 80027d8:	614b      	str	r3, [r1, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 80027da:	4a22      	ldr	r2, [pc, #136]	@ (8002864 <RCCEx_PLLSAI2_Config+0x148>)
 80027dc:	6813      	ldr	r3, [r2, #0]
 80027de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027e2:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80027e4:	f7fe fb9a 	bl	8000f1c <HAL_GetTick>
 80027e8:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80027ea:	4b1e      	ldr	r3, [pc, #120]	@ (8002864 <RCCEx_PLLSAI2_Config+0x148>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 80027f2:	d105      	bne.n	8002800 <RCCEx_PLLSAI2_Config+0xe4>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80027f4:	f7fe fb92 	bl	8000f1c <HAL_GetTick>
 80027f8:	1b40      	subs	r0, r0, r5
 80027fa:	2802      	cmp	r0, #2
 80027fc:	d9f5      	bls.n	80027ea <RCCEx_PLLSAI2_Config+0xce>
          status = HAL_TIMEOUT;
 80027fe:	2603      	movs	r6, #3
      if(status == HAL_OK)
 8002800:	2e00      	cmp	r6, #0
 8002802:	d19b      	bne.n	800273c <RCCEx_PLLSAI2_Config+0x20>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002804:	4a17      	ldr	r2, [pc, #92]	@ (8002864 <RCCEx_PLLSAI2_Config+0x148>)
 8002806:	6953      	ldr	r3, [r2, #20]
 8002808:	6961      	ldr	r1, [r4, #20]
 800280a:	430b      	orrs	r3, r1
 800280c:	6153      	str	r3, [r2, #20]
 800280e:	e795      	b.n	800273c <RCCEx_PLLSAI2_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002810:	4a14      	ldr	r2, [pc, #80]	@ (8002864 <RCCEx_PLLSAI2_Config+0x148>)
 8002812:	6812      	ldr	r2, [r2, #0]
 8002814:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8002818:	d1ad      	bne.n	8002776 <RCCEx_PLLSAI2_Config+0x5a>
 800281a:	2601      	movs	r6, #1
 800281c:	e78e      	b.n	800273c <RCCEx_PLLSAI2_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800281e:	4a11      	ldr	r2, [pc, #68]	@ (8002864 <RCCEx_PLLSAI2_Config+0x148>)
 8002820:	6812      	ldr	r2, [r2, #0]
 8002822:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8002826:	d1a6      	bne.n	8002776 <RCCEx_PLLSAI2_Config+0x5a>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002828:	4a0e      	ldr	r2, [pc, #56]	@ (8002864 <RCCEx_PLLSAI2_Config+0x148>)
 800282a:	6812      	ldr	r2, [r2, #0]
 800282c:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8002830:	d1a1      	bne.n	8002776 <RCCEx_PLLSAI2_Config+0x5a>
 8002832:	2601      	movs	r6, #1
 8002834:	e782      	b.n	800273c <RCCEx_PLLSAI2_Config+0x20>
        status = HAL_ERROR;
 8002836:	2601      	movs	r6, #1
 8002838:	e7a8      	b.n	800278c <RCCEx_PLLSAI2_Config+0x70>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800283a:	480a      	ldr	r0, [pc, #40]	@ (8002864 <RCCEx_PLLSAI2_Config+0x148>)
 800283c:	6942      	ldr	r2, [r0, #20]
 800283e:	f022 62c0 	bic.w	r2, r2, #100663296	@ 0x6000000
 8002842:	f422 42fe 	bic.w	r2, r2, #32512	@ 0x7f00
 8002846:	68a1      	ldr	r1, [r4, #8]
 8002848:	6923      	ldr	r3, [r4, #16]
 800284a:	085b      	lsrs	r3, r3, #1
 800284c:	3b01      	subs	r3, #1
 800284e:	065b      	lsls	r3, r3, #25
 8002850:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002854:	431a      	orrs	r2, r3
 8002856:	6142      	str	r2, [r0, #20]
 8002858:	e7bf      	b.n	80027da <RCCEx_PLLSAI2_Config+0xbe>
      status = HAL_ERROR;
 800285a:	2601      	movs	r6, #1
 800285c:	e76e      	b.n	800273c <RCCEx_PLLSAI2_Config+0x20>
    switch(PllSai2->PLLSAI2Source)
 800285e:	2601      	movs	r6, #1
 8002860:	e76c      	b.n	800273c <RCCEx_PLLSAI2_Config+0x20>
 8002862:	bf00      	nop
 8002864:	40021000 	.word	0x40021000

08002868 <HAL_RCCEx_PeriphCLKConfig>:
{
 8002868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800286c:	b082      	sub	sp, #8
 800286e:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002870:	6803      	ldr	r3, [r0, #0]
 8002872:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8002876:	d033      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x78>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002878:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 800287a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800287e:	d015      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002880:	d80c      	bhi.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x34>
 8002882:	b323      	cbz	r3, 80028ce <HAL_RCCEx_PeriphCLKConfig+0x66>
 8002884:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002888:	d105      	bne.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x2e>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800288a:	2100      	movs	r1, #0
 800288c:	3020      	adds	r0, #32
 800288e:	f7ff ff45 	bl	800271c <RCCEx_PLLSAI2_Config>
 8002892:	4606      	mov	r6, r0
      break;
 8002894:	e020      	b.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002896:	2701      	movs	r7, #1
 8002898:	463e      	mov	r6, r7
 800289a:	e023      	b.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800289c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80028a0:	d101      	bne.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x3e>
 80028a2:	2600      	movs	r6, #0
 80028a4:	e008      	b.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80028a6:	2701      	movs	r7, #1
 80028a8:	463e      	mov	r6, r7
 80028aa:	e01b      	b.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80028ac:	4a5e      	ldr	r2, [pc, #376]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80028ae:	68d3      	ldr	r3, [r2, #12]
 80028b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028b4:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80028b6:	2600      	movs	r6, #0
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028b8:	4a5b      	ldr	r2, [pc, #364]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80028ba:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80028be:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80028c2:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 80028c4:	430b      	orrs	r3, r1
 80028c6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028ca:	2700      	movs	r7, #0
 80028cc:	e00a      	b.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80028ce:	2100      	movs	r1, #0
 80028d0:	3004      	adds	r0, #4
 80028d2:	f7ff fe6b 	bl	80025ac <RCCEx_PLLSAI1_Config>
 80028d6:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80028d8:	2e00      	cmp	r6, #0
 80028da:	d0ed      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x50>
      status = ret;
 80028dc:	4637      	mov	r7, r6
 80028de:	e001      	b.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028e0:	2700      	movs	r7, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80028e2:	463e      	mov	r6, r7
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80028e4:	6823      	ldr	r3, [r4, #0]
 80028e6:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 80028ea:	d030      	beq.n	800294e <HAL_RCCEx_PeriphCLKConfig+0xe6>
    switch(PeriphClkInit->Sai2ClockSelection)
 80028ec:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 80028ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80028f2:	d01f      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80028f4:	d80d      	bhi.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0xaa>
 80028f6:	b31b      	cbz	r3, 8002940 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 80028f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028fc:	d106      	bne.n	800290c <HAL_RCCEx_PeriphCLKConfig+0xa4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80028fe:	2100      	movs	r1, #0
 8002900:	f104 0020 	add.w	r0, r4, #32
 8002904:	f7ff ff0a 	bl	800271c <RCCEx_PLLSAI2_Config>
 8002908:	4606      	mov	r6, r0
      break;
 800290a:	e005      	b.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    switch(PeriphClkInit->Sai2ClockSelection)
 800290c:	2701      	movs	r7, #1
 800290e:	463e      	mov	r6, r7
 8002910:	e01d      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0xe6>
 8002912:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002916:	d10a      	bne.n	800292e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    if(ret == HAL_OK)
 8002918:	b9c6      	cbnz	r6, 800294c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800291a:	4a43      	ldr	r2, [pc, #268]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800291c:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002920:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8002924:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8002926:	430b      	orrs	r3, r1
 8002928:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800292c:	e00f      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0xe6>
    switch(PeriphClkInit->Sai2ClockSelection)
 800292e:	2701      	movs	r7, #1
 8002930:	463e      	mov	r6, r7
 8002932:	e00c      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0xe6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002934:	4a3c      	ldr	r2, [pc, #240]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002936:	68d3      	ldr	r3, [r2, #12]
 8002938:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800293c:	60d3      	str	r3, [r2, #12]
      break;
 800293e:	e7eb      	b.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002940:	2100      	movs	r1, #0
 8002942:	1d20      	adds	r0, r4, #4
 8002944:	f7ff fe32 	bl	80025ac <RCCEx_PLLSAI1_Config>
 8002948:	4606      	mov	r6, r0
      break;
 800294a:	e7e5      	b.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      status = ret;
 800294c:	4637      	mov	r7, r6
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800294e:	6823      	ldr	r3, [r4, #0]
 8002950:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002954:	d071      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002956:	4b34      	ldr	r3, [pc, #208]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002958:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800295a:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800295e:	d14e      	bne.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x196>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002960:	4b31      	ldr	r3, [pc, #196]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002962:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002964:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002968:	659a      	str	r2, [r3, #88]	@ 0x58
 800296a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800296c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002970:	9301      	str	r3, [sp, #4]
 8002972:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002974:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002978:	4a2c      	ldr	r2, [pc, #176]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800297a:	6813      	ldr	r3, [r2, #0]
 800297c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002980:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002982:	f7fe facb 	bl	8000f1c <HAL_GetTick>
 8002986:	4605      	mov	r5, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002988:	4b28      	ldr	r3, [pc, #160]	@ (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002990:	d105      	bne.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x136>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002992:	f7fe fac3 	bl	8000f1c <HAL_GetTick>
 8002996:	1b40      	subs	r0, r0, r5
 8002998:	2802      	cmp	r0, #2
 800299a:	d9f5      	bls.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x120>
        ret = HAL_TIMEOUT;
 800299c:	2603      	movs	r6, #3
    if(ret == HAL_OK)
 800299e:	2e00      	cmp	r6, #0
 80029a0:	d146      	bne.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80029a2:	4b21      	ldr	r3, [pc, #132]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80029a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80029a8:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 80029ac:	d019      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80029ae:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d012      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x174>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80029b6:	4a1c      	ldr	r2, [pc, #112]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80029b8:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80029bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80029c0:	f8d2 1090 	ldr.w	r1, [r2, #144]	@ 0x90
 80029c4:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 80029c8:	f8c2 1090 	str.w	r1, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029cc:	f8d2 1090 	ldr.w	r1, [r2, #144]	@ 0x90
 80029d0:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 80029d4:	f8c2 1090 	str.w	r1, [r2, #144]	@ 0x90
        RCC->BDCR = tmpregister;
 80029d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80029dc:	f013 0f01 	tst.w	r3, #1
 80029e0:	d110      	bne.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      if(ret == HAL_OK)
 80029e2:	2e00      	cmp	r6, #0
 80029e4:	f040 8127 	bne.w	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029e8:	4a0f      	ldr	r2, [pc, #60]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80029ea:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80029ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029f2:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 80029f6:	430b      	orrs	r3, r1
 80029f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80029fc:	e019      	b.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    FlagStatus       pwrclkchanged = RESET;
 80029fe:	f04f 0800 	mov.w	r8, #0
 8002a02:	e7b9      	b.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x110>
        tickstart = HAL_GetTick();
 8002a04:	f7fe fa8a 	bl	8000f1c <HAL_GetTick>
 8002a08:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a0a:	4b07      	ldr	r3, [pc, #28]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a10:	f013 0f02 	tst.w	r3, #2
 8002a14:	d1e5      	bne.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a16:	f7fe fa81 	bl	8000f1c <HAL_GetTick>
 8002a1a:	1b40      	subs	r0, r0, r5
 8002a1c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002a20:	4298      	cmp	r0, r3
 8002a22:	d9f2      	bls.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
            ret = HAL_TIMEOUT;
 8002a24:	2603      	movs	r6, #3
 8002a26:	e7dc      	b.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002a28:	40021000 	.word	0x40021000
 8002a2c:	40007000 	.word	0x40007000
      status = ret;
 8002a30:	4637      	mov	r7, r6
    if(pwrclkchanged == SET)
 8002a32:	f1b8 0f00 	cmp.w	r8, #0
 8002a36:	f040 8100 	bne.w	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a3a:	6823      	ldr	r3, [r4, #0]
 8002a3c:	f013 0f01 	tst.w	r3, #1
 8002a40:	d008      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a42:	4a9d      	ldr	r2, [pc, #628]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a44:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002a48:	f023 0303 	bic.w	r3, r3, #3
 8002a4c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8002a4e:	430b      	orrs	r3, r1
 8002a50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a54:	6823      	ldr	r3, [r4, #0]
 8002a56:	f013 0f02 	tst.w	r3, #2
 8002a5a:	d008      	beq.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x206>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a5c:	4a96      	ldr	r2, [pc, #600]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a5e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002a62:	f023 030c 	bic.w	r3, r3, #12
 8002a66:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8002a68:	430b      	orrs	r3, r1
 8002a6a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a6e:	6823      	ldr	r3, [r4, #0]
 8002a70:	f013 0f04 	tst.w	r3, #4
 8002a74:	d008      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a76:	4a90      	ldr	r2, [pc, #576]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a78:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002a7c:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002a80:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8002a82:	430b      	orrs	r3, r1
 8002a84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a88:	6823      	ldr	r3, [r4, #0]
 8002a8a:	f013 0f08 	tst.w	r3, #8
 8002a8e:	d008      	beq.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a90:	4a89      	ldr	r2, [pc, #548]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a92:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002a96:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002a9a:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8002a9c:	430b      	orrs	r3, r1
 8002a9e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002aa2:	6823      	ldr	r3, [r4, #0]
 8002aa4:	f013 0f10 	tst.w	r3, #16
 8002aa8:	d008      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x254>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002aaa:	4a83      	ldr	r2, [pc, #524]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002aac:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002ab0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ab4:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8002ab6:	430b      	orrs	r3, r1
 8002ab8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002abc:	6823      	ldr	r3, [r4, #0]
 8002abe:	f013 0f20 	tst.w	r3, #32
 8002ac2:	d008      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ac4:	4a7c      	ldr	r2, [pc, #496]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ac6:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002aca:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002ace:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8002ad0:	430b      	orrs	r3, r1
 8002ad2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ad6:	6823      	ldr	r3, [r4, #0]
 8002ad8:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8002adc:	d008      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x288>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ade:	4a76      	ldr	r2, [pc, #472]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ae0:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002ae4:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 8002ae8:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8002aea:	430b      	orrs	r3, r1
 8002aec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002af0:	6823      	ldr	r3, [r4, #0]
 8002af2:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8002af6:	d008      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002af8:	4a6f      	ldr	r2, [pc, #444]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002afa:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002afe:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8002b02:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8002b04:	430b      	orrs	r3, r1
 8002b06:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b0a:	6823      	ldr	r3, [r4, #0]
 8002b0c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8002b10:	d008      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b12:	4a69      	ldr	r2, [pc, #420]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b14:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002b18:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002b1c:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8002b1e:	430b      	orrs	r3, r1
 8002b20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b24:	6823      	ldr	r3, [r4, #0]
 8002b26:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002b2a:	d008      	beq.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b2c:	4a62      	ldr	r2, [pc, #392]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b2e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002b32:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002b36:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8002b38:	430b      	orrs	r3, r1
 8002b3a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b3e:	6823      	ldr	r3, [r4, #0]
 8002b40:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002b44:	d008      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b46:	4a5c      	ldr	r2, [pc, #368]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b48:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002b4c:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8002b50:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8002b52:	430b      	orrs	r3, r1
 8002b54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b58:	6823      	ldr	r3, [r4, #0]
 8002b5a:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8002b5e:	d00f      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x318>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b60:	4a55      	ldr	r2, [pc, #340]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b62:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002b66:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8002b6a:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 8002b6c:	430b      	orrs	r3, r1
 8002b6e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b72:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8002b74:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b78:	d065      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x3de>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002b7a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002b7e:	d067      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002b80:	6823      	ldr	r3, [r4, #0]
 8002b82:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8002b86:	d00f      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x340>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b88:	4a4b      	ldr	r2, [pc, #300]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b8a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002b8e:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8002b92:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8002b94:	430b      	orrs	r3, r1
 8002b96:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002b9a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8002b9c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ba0:	d05e      	beq.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002ba2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002ba6:	d060      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x402>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ba8:	6823      	ldr	r3, [r4, #0]
 8002baa:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 8002bae:	d00f      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002bb0:	4a41      	ldr	r2, [pc, #260]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002bb2:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002bb6:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8002bba:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8002bbc:	430b      	orrs	r3, r1
 8002bbe:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002bc2:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8002bc4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002bc8:	d057      	beq.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x412>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002bca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002bce:	d059      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002bd0:	6823      	ldr	r3, [r4, #0]
 8002bd2:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8002bd6:	d00f      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x390>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002bd8:	4a37      	ldr	r2, [pc, #220]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002bda:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002bde:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8002be2:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8002be4:	430b      	orrs	r3, r1
 8002be6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002bea:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8002bec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002bf0:	d050      	beq.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x42c>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002bf2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002bf6:	d055      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x43c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002bf8:	6823      	ldr	r3, [r4, #0]
 8002bfa:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8002bfe:	d008      	beq.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002c00:	4a2d      	ldr	r2, [pc, #180]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c02:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002c06:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002c0a:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 8002c0c:	430b      	orrs	r3, r1
 8002c0e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c12:	6823      	ldr	r3, [r4, #0]
 8002c14:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8002c18:	d009      	beq.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x3c6>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002c1a:	4a27      	ldr	r2, [pc, #156]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c1c:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002c20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002c24:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 8002c28:	430b      	orrs	r3, r1
 8002c2a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
}
 8002c2e:	4638      	mov	r0, r7
 8002c30:	b002      	add	sp, #8
 8002c32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = ret;
 8002c36:	4637      	mov	r7, r6
 8002c38:	e6fb      	b.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c3a:	4a1f      	ldr	r2, [pc, #124]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c3c:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8002c3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c42:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c44:	e6f9      	b.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x1d2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c46:	68d3      	ldr	r3, [r2, #12]
 8002c48:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c4c:	60d3      	str	r3, [r2, #12]
 8002c4e:	e797      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x318>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c50:	2101      	movs	r1, #1
 8002c52:	1d20      	adds	r0, r4, #4
 8002c54:	f7ff fcaa 	bl	80025ac <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8002c58:	2800      	cmp	r0, #0
 8002c5a:	d091      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x318>
          status = ret;
 8002c5c:	4607      	mov	r7, r0
 8002c5e:	e78f      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x318>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c60:	68d3      	ldr	r3, [r2, #12]
 8002c62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c66:	60d3      	str	r3, [r2, #12]
 8002c68:	e79e      	b.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x340>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c6a:	2101      	movs	r1, #1
 8002c6c:	1d20      	adds	r0, r4, #4
 8002c6e:	f7ff fc9d 	bl	80025ac <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002c72:	2800      	cmp	r0, #0
 8002c74:	d098      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x340>
        status = ret;
 8002c76:	4607      	mov	r7, r0
 8002c78:	e796      	b.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x340>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c7a:	68d3      	ldr	r3, [r2, #12]
 8002c7c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c80:	60d3      	str	r3, [r2, #12]
 8002c82:	e7a5      	b.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x368>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c84:	2101      	movs	r1, #1
 8002c86:	1d20      	adds	r0, r4, #4
 8002c88:	f7ff fc90 	bl	80025ac <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002c8c:	2800      	cmp	r0, #0
 8002c8e:	d09f      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x368>
        status = ret;
 8002c90:	4607      	mov	r7, r0
 8002c92:	e79d      	b.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x368>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002c94:	2102      	movs	r1, #2
 8002c96:	1d20      	adds	r0, r4, #4
 8002c98:	f7ff fc88 	bl	80025ac <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002c9c:	2800      	cmp	r0, #0
 8002c9e:	d0ab      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x390>
        status = ret;
 8002ca0:	4607      	mov	r7, r0
 8002ca2:	e7a9      	b.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x390>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002ca4:	2102      	movs	r1, #2
 8002ca6:	f104 0020 	add.w	r0, r4, #32
 8002caa:	f7ff fd37 	bl	800271c <RCCEx_PLLSAI2_Config>
      if(ret != HAL_OK)
 8002cae:	2800      	cmp	r0, #0
 8002cb0:	d0a2      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x390>
        status = ret;
 8002cb2:	4607      	mov	r7, r0
 8002cb4:	e7a0      	b.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x390>
 8002cb6:	bf00      	nop
 8002cb8:	40021000 	.word	0x40021000

08002cbc <UART_EndRxTransfer>:
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cbc:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cbe:	e852 3f00 	ldrex	r3, [r2]
 8002cc2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cc6:	e842 3100 	strex	r1, r3, [r2]
 8002cca:	2900      	cmp	r1, #0
 8002ccc:	d1f6      	bne.n	8002cbc <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cce:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cd0:	f102 0308 	add.w	r3, r2, #8
 8002cd4:	e853 3f00 	ldrex	r3, [r3]
 8002cd8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cdc:	3208      	adds	r2, #8
 8002cde:	e842 3100 	strex	r1, r3, [r2]
 8002ce2:	2900      	cmp	r1, #0
 8002ce4:	d1f3      	bne.n	8002cce <UART_EndRxTransfer+0x12>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ce6:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d006      	beq.n	8002cfa <UART_EndRxTransfer+0x3e>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002cec:	2320      	movs	r3, #32
 8002cee:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	6603      	str	r3, [r0, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002cf6:	6683      	str	r3, [r0, #104]	@ 0x68
}
 8002cf8:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cfa:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cfc:	e852 3f00 	ldrex	r3, [r2]
 8002d00:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d04:	e842 3100 	strex	r1, r3, [r2]
 8002d08:	2900      	cmp	r1, #0
 8002d0a:	d1f6      	bne.n	8002cfa <UART_EndRxTransfer+0x3e>
 8002d0c:	e7ee      	b.n	8002cec <UART_EndRxTransfer+0x30>
	...

08002d10 <UART_SetConfig>:
{
 8002d10:	b510      	push	{r4, lr}
 8002d12:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d14:	6883      	ldr	r3, [r0, #8]
 8002d16:	6902      	ldr	r2, [r0, #16]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	6942      	ldr	r2, [r0, #20]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	69c2      	ldr	r2, [r0, #28]
 8002d20:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d22:	6801      	ldr	r1, [r0, #0]
 8002d24:	6808      	ldr	r0, [r1, #0]
 8002d26:	4a8f      	ldr	r2, [pc, #572]	@ (8002f64 <UART_SetConfig+0x254>)
 8002d28:	4002      	ands	r2, r0
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d2e:	6822      	ldr	r2, [r4, #0]
 8002d30:	6853      	ldr	r3, [r2, #4]
 8002d32:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002d36:	68e1      	ldr	r1, [r4, #12]
 8002d38:	430b      	orrs	r3, r1
 8002d3a:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d3c:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002d3e:	6822      	ldr	r2, [r4, #0]
 8002d40:	4b89      	ldr	r3, [pc, #548]	@ (8002f68 <UART_SetConfig+0x258>)
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d001      	beq.n	8002d4a <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 8002d46:	6a23      	ldr	r3, [r4, #32]
 8002d48:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d4a:	6893      	ldr	r3, [r2, #8]
 8002d4c:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8002d50:	430b      	orrs	r3, r1
 8002d52:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d54:	6823      	ldr	r3, [r4, #0]
 8002d56:	4a85      	ldr	r2, [pc, #532]	@ (8002f6c <UART_SetConfig+0x25c>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d010      	beq.n	8002d7e <UART_SetConfig+0x6e>
 8002d5c:	4a84      	ldr	r2, [pc, #528]	@ (8002f70 <UART_SetConfig+0x260>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d021      	beq.n	8002da6 <UART_SetConfig+0x96>
 8002d62:	4a84      	ldr	r2, [pc, #528]	@ (8002f74 <UART_SetConfig+0x264>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d04d      	beq.n	8002e04 <UART_SetConfig+0xf4>
 8002d68:	4a83      	ldr	r2, [pc, #524]	@ (8002f78 <UART_SetConfig+0x268>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d05d      	beq.n	8002e2a <UART_SetConfig+0x11a>
 8002d6e:	4a83      	ldr	r2, [pc, #524]	@ (8002f7c <UART_SetConfig+0x26c>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d06c      	beq.n	8002e4e <UART_SetConfig+0x13e>
 8002d74:	4a7c      	ldr	r2, [pc, #496]	@ (8002f68 <UART_SetConfig+0x258>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d07e      	beq.n	8002e78 <UART_SetConfig+0x168>
 8002d7a:	2210      	movs	r2, #16
 8002d7c:	e02b      	b.n	8002dd6 <UART_SetConfig+0xc6>
 8002d7e:	f502 4258 	add.w	r2, r2, #55296	@ 0xd800
 8002d82:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8002d86:	f002 0203 	and.w	r2, r2, #3
 8002d8a:	2a03      	cmp	r2, #3
 8002d8c:	d809      	bhi.n	8002da2 <UART_SetConfig+0x92>
 8002d8e:	e8df f002 	tbb	[pc, r2]
 8002d92:	0402      	.short	0x0402
 8002d94:	0688      	.short	0x0688
 8002d96:	2201      	movs	r2, #1
 8002d98:	e01d      	b.n	8002dd6 <UART_SetConfig+0xc6>
 8002d9a:	2204      	movs	r2, #4
 8002d9c:	e01b      	b.n	8002dd6 <UART_SetConfig+0xc6>
 8002d9e:	2208      	movs	r2, #8
 8002da0:	e019      	b.n	8002dd6 <UART_SetConfig+0xc6>
 8002da2:	2210      	movs	r2, #16
 8002da4:	e017      	b.n	8002dd6 <UART_SetConfig+0xc6>
 8002da6:	f502 32e6 	add.w	r2, r2, #117760	@ 0x1cc00
 8002daa:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8002dae:	f002 020c 	and.w	r2, r2, #12
 8002db2:	2a0c      	cmp	r2, #12
 8002db4:	d80e      	bhi.n	8002dd4 <UART_SetConfig+0xc4>
 8002db6:	e8df f002 	tbb	[pc, r2]
 8002dba:	0d07      	.short	0x0d07
 8002dbc:	0d090d0d 	.word	0x0d090d0d
 8002dc0:	0d760d0d 	.word	0x0d760d0d
 8002dc4:	0d0d      	.short	0x0d0d
 8002dc6:	0b          	.byte	0x0b
 8002dc7:	00          	.byte	0x00
 8002dc8:	2200      	movs	r2, #0
 8002dca:	e004      	b.n	8002dd6 <UART_SetConfig+0xc6>
 8002dcc:	2204      	movs	r2, #4
 8002dce:	e002      	b.n	8002dd6 <UART_SetConfig+0xc6>
 8002dd0:	2208      	movs	r2, #8
 8002dd2:	e000      	b.n	8002dd6 <UART_SetConfig+0xc6>
 8002dd4:	2210      	movs	r2, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 8002dd6:	4964      	ldr	r1, [pc, #400]	@ (8002f68 <UART_SetConfig+0x258>)
 8002dd8:	428b      	cmp	r3, r1
 8002dda:	f000 8086 	beq.w	8002eea <UART_SetConfig+0x1da>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002dde:	69e0      	ldr	r0, [r4, #28]
 8002de0:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8002de4:	f000 80b2 	beq.w	8002f4c <UART_SetConfig+0x23c>
    switch (clocksource)
 8002de8:	2a08      	cmp	r2, #8
 8002dea:	f200 8119 	bhi.w	8003020 <UART_SetConfig+0x310>
 8002dee:	e8df f012 	tbh	[pc, r2, lsl #1]
 8002df2:	00ed      	.short	0x00ed
 8002df4:	00eb0100 	.word	0x00eb0100
 8002df8:	01030117 	.word	0x01030117
 8002dfc:	01170117 	.word	0x01170117
 8002e00:	01060117 	.word	0x01060117
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e04:	f502 32e4 	add.w	r2, r2, #116736	@ 0x1c800
 8002e08:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8002e0c:	f002 0230 	and.w	r2, r2, #48	@ 0x30
 8002e10:	2a20      	cmp	r2, #32
 8002e12:	d04a      	beq.n	8002eaa <UART_SetConfig+0x19a>
 8002e14:	d805      	bhi.n	8002e22 <UART_SetConfig+0x112>
 8002e16:	2a00      	cmp	r2, #0
 8002e18:	d049      	beq.n	8002eae <UART_SetConfig+0x19e>
 8002e1a:	2a10      	cmp	r2, #16
 8002e1c:	d149      	bne.n	8002eb2 <UART_SetConfig+0x1a2>
 8002e1e:	2204      	movs	r2, #4
 8002e20:	e7d9      	b.n	8002dd6 <UART_SetConfig+0xc6>
 8002e22:	2a30      	cmp	r2, #48	@ 0x30
 8002e24:	d147      	bne.n	8002eb6 <UART_SetConfig+0x1a6>
 8002e26:	2208      	movs	r2, #8
 8002e28:	e7d5      	b.n	8002dd6 <UART_SetConfig+0xc6>
 8002e2a:	f502 32e2 	add.w	r2, r2, #115712	@ 0x1c400
 8002e2e:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8002e32:	f002 02c0 	and.w	r2, r2, #192	@ 0xc0
 8002e36:	2a80      	cmp	r2, #128	@ 0x80
 8002e38:	d03f      	beq.n	8002eba <UART_SetConfig+0x1aa>
 8002e3a:	d804      	bhi.n	8002e46 <UART_SetConfig+0x136>
 8002e3c:	b3fa      	cbz	r2, 8002ebe <UART_SetConfig+0x1ae>
 8002e3e:	2a40      	cmp	r2, #64	@ 0x40
 8002e40:	d13f      	bne.n	8002ec2 <UART_SetConfig+0x1b2>
 8002e42:	2204      	movs	r2, #4
 8002e44:	e7c7      	b.n	8002dd6 <UART_SetConfig+0xc6>
 8002e46:	2ac0      	cmp	r2, #192	@ 0xc0
 8002e48:	d13d      	bne.n	8002ec6 <UART_SetConfig+0x1b6>
 8002e4a:	2208      	movs	r2, #8
 8002e4c:	e7c3      	b.n	8002dd6 <UART_SetConfig+0xc6>
 8002e4e:	f502 32e0 	add.w	r2, r2, #114688	@ 0x1c000
 8002e52:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8002e56:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8002e5a:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 8002e5e:	d034      	beq.n	8002eca <UART_SetConfig+0x1ba>
 8002e60:	d805      	bhi.n	8002e6e <UART_SetConfig+0x15e>
 8002e62:	b3a2      	cbz	r2, 8002ece <UART_SetConfig+0x1be>
 8002e64:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 8002e68:	d133      	bne.n	8002ed2 <UART_SetConfig+0x1c2>
 8002e6a:	2204      	movs	r2, #4
 8002e6c:	e7b3      	b.n	8002dd6 <UART_SetConfig+0xc6>
 8002e6e:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8002e72:	d130      	bne.n	8002ed6 <UART_SetConfig+0x1c6>
 8002e74:	2208      	movs	r2, #8
 8002e76:	e7ae      	b.n	8002dd6 <UART_SetConfig+0xc6>
 8002e78:	f502 32c8 	add.w	r2, r2, #102400	@ 0x19000
 8002e7c:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8002e80:	f402 6240 	and.w	r2, r2, #3072	@ 0xc00
 8002e84:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 8002e88:	d027      	beq.n	8002eda <UART_SetConfig+0x1ca>
 8002e8a:	d805      	bhi.n	8002e98 <UART_SetConfig+0x188>
 8002e8c:	b33a      	cbz	r2, 8002ede <UART_SetConfig+0x1ce>
 8002e8e:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8002e92:	d126      	bne.n	8002ee2 <UART_SetConfig+0x1d2>
 8002e94:	2204      	movs	r2, #4
 8002e96:	e79e      	b.n	8002dd6 <UART_SetConfig+0xc6>
 8002e98:	f5b2 6f40 	cmp.w	r2, #3072	@ 0xc00
 8002e9c:	d123      	bne.n	8002ee6 <UART_SetConfig+0x1d6>
 8002e9e:	2208      	movs	r2, #8
 8002ea0:	e799      	b.n	8002dd6 <UART_SetConfig+0xc6>
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	e797      	b.n	8002dd6 <UART_SetConfig+0xc6>
 8002ea6:	2202      	movs	r2, #2
 8002ea8:	e795      	b.n	8002dd6 <UART_SetConfig+0xc6>
 8002eaa:	2202      	movs	r2, #2
 8002eac:	e793      	b.n	8002dd6 <UART_SetConfig+0xc6>
 8002eae:	2200      	movs	r2, #0
 8002eb0:	e791      	b.n	8002dd6 <UART_SetConfig+0xc6>
 8002eb2:	2210      	movs	r2, #16
 8002eb4:	e78f      	b.n	8002dd6 <UART_SetConfig+0xc6>
 8002eb6:	2210      	movs	r2, #16
 8002eb8:	e78d      	b.n	8002dd6 <UART_SetConfig+0xc6>
 8002eba:	2202      	movs	r2, #2
 8002ebc:	e78b      	b.n	8002dd6 <UART_SetConfig+0xc6>
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	e789      	b.n	8002dd6 <UART_SetConfig+0xc6>
 8002ec2:	2210      	movs	r2, #16
 8002ec4:	e787      	b.n	8002dd6 <UART_SetConfig+0xc6>
 8002ec6:	2210      	movs	r2, #16
 8002ec8:	e785      	b.n	8002dd6 <UART_SetConfig+0xc6>
 8002eca:	2202      	movs	r2, #2
 8002ecc:	e783      	b.n	8002dd6 <UART_SetConfig+0xc6>
 8002ece:	2200      	movs	r2, #0
 8002ed0:	e781      	b.n	8002dd6 <UART_SetConfig+0xc6>
 8002ed2:	2210      	movs	r2, #16
 8002ed4:	e77f      	b.n	8002dd6 <UART_SetConfig+0xc6>
 8002ed6:	2210      	movs	r2, #16
 8002ed8:	e77d      	b.n	8002dd6 <UART_SetConfig+0xc6>
 8002eda:	2202      	movs	r2, #2
 8002edc:	e77b      	b.n	8002dd6 <UART_SetConfig+0xc6>
 8002ede:	2200      	movs	r2, #0
 8002ee0:	e779      	b.n	8002dd6 <UART_SetConfig+0xc6>
 8002ee2:	2210      	movs	r2, #16
 8002ee4:	e777      	b.n	8002dd6 <UART_SetConfig+0xc6>
 8002ee6:	2210      	movs	r2, #16
 8002ee8:	e775      	b.n	8002dd6 <UART_SetConfig+0xc6>
    switch (clocksource)
 8002eea:	2a08      	cmp	r2, #8
 8002eec:	f200 808a 	bhi.w	8003004 <UART_SetConfig+0x2f4>
 8002ef0:	e8df f002 	tbb	[pc, r2]
 8002ef4:	88108808 	.word	0x88108808
 8002ef8:	8888880d 	.word	0x8888880d
 8002efc:	05          	.byte	0x05
 8002efd:	00          	.byte	0x00
 8002efe:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002f02:	e008      	b.n	8002f16 <UART_SetConfig+0x206>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f04:	f7ff fb2e 	bl	8002564 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002f08:	b928      	cbnz	r0, 8002f16 <UART_SetConfig+0x206>
 8002f0a:	2000      	movs	r0, #0
 8002f0c:	e089      	b.n	8003022 <UART_SetConfig+0x312>
        pclk = HAL_RCC_GetSysClockFreq();
 8002f0e:	f7fe fefd 	bl	8001d0c <HAL_RCC_GetSysClockFreq>
        break;
 8002f12:	e7f9      	b.n	8002f08 <UART_SetConfig+0x1f8>
        pclk = (uint32_t) HSI_VALUE;
 8002f14:	481a      	ldr	r0, [pc, #104]	@ (8002f80 <UART_SetConfig+0x270>)
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002f16:	6862      	ldr	r2, [r4, #4]
 8002f18:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8002f1c:	4283      	cmp	r3, r0
 8002f1e:	d873      	bhi.n	8003008 <UART_SetConfig+0x2f8>
 8002f20:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8002f24:	d872      	bhi.n	800300c <UART_SetConfig+0x2fc>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002f26:	0e01      	lsrs	r1, r0, #24
 8002f28:	0200      	lsls	r0, r0, #8
 8002f2a:	0853      	lsrs	r3, r2, #1
 8002f2c:	18c0      	adds	r0, r0, r3
 8002f2e:	f04f 0300 	mov.w	r3, #0
 8002f32:	f141 0100 	adc.w	r1, r1, #0
 8002f36:	f7fd fc5d 	bl	80007f4 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002f3a:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 8002f3e:	4b11      	ldr	r3, [pc, #68]	@ (8002f84 <UART_SetConfig+0x274>)
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d865      	bhi.n	8003010 <UART_SetConfig+0x300>
          huart->Instance->BRR = usartdiv;
 8002f44:	6823      	ldr	r3, [r4, #0]
 8002f46:	60d8      	str	r0, [r3, #12]
 8002f48:	2000      	movs	r0, #0
 8002f4a:	e06a      	b.n	8003022 <UART_SetConfig+0x312>
    switch (clocksource)
 8002f4c:	2a08      	cmp	r2, #8
 8002f4e:	d861      	bhi.n	8003014 <UART_SetConfig+0x304>
 8002f50:	e8df f002 	tbb	[pc, r2]
 8002f54:	6005341a 	.word	0x6005341a
 8002f58:	60606037 	.word	0x60606037
 8002f5c:	1e          	.byte	0x1e
 8002f5d:	00          	.byte	0x00
 8002f5e:	4808      	ldr	r0, [pc, #32]	@ (8002f80 <UART_SetConfig+0x270>)
 8002f60:	e016      	b.n	8002f90 <UART_SetConfig+0x280>
 8002f62:	bf00      	nop
 8002f64:	efff69f3 	.word	0xefff69f3
 8002f68:	40008000 	.word	0x40008000
 8002f6c:	40013800 	.word	0x40013800
 8002f70:	40004400 	.word	0x40004400
 8002f74:	40004800 	.word	0x40004800
 8002f78:	40004c00 	.word	0x40004c00
 8002f7c:	40005000 	.word	0x40005000
 8002f80:	00f42400 	.word	0x00f42400
 8002f84:	000ffcff 	.word	0x000ffcff
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f88:	f7ff faec 	bl	8002564 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002f8c:	2800      	cmp	r0, #0
 8002f8e:	d043      	beq.n	8003018 <UART_SetConfig+0x308>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002f90:	6862      	ldr	r2, [r4, #4]
 8002f92:	0853      	lsrs	r3, r2, #1
 8002f94:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8002f98:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f9c:	f1a3 0110 	sub.w	r1, r3, #16
 8002fa0:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8002fa4:	4291      	cmp	r1, r2
 8002fa6:	d839      	bhi.n	800301c <UART_SetConfig+0x30c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002fa8:	b29a      	uxth	r2, r3
 8002faa:	f022 020f 	bic.w	r2, r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002fae:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8002fb2:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 8002fb4:	6822      	ldr	r2, [r4, #0]
 8002fb6:	60d3      	str	r3, [r2, #12]
 8002fb8:	2000      	movs	r0, #0
 8002fba:	e032      	b.n	8003022 <UART_SetConfig+0x312>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002fbc:	f7ff fae4 	bl	8002588 <HAL_RCC_GetPCLK2Freq>
        break;
 8002fc0:	e7e4      	b.n	8002f8c <UART_SetConfig+0x27c>
        pclk = HAL_RCC_GetSysClockFreq();
 8002fc2:	f7fe fea3 	bl	8001d0c <HAL_RCC_GetSysClockFreq>
        break;
 8002fc6:	e7e1      	b.n	8002f8c <UART_SetConfig+0x27c>
    switch (clocksource)
 8002fc8:	481a      	ldr	r0, [pc, #104]	@ (8003034 <UART_SetConfig+0x324>)
 8002fca:	e002      	b.n	8002fd2 <UART_SetConfig+0x2c2>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fcc:	f7ff faca 	bl	8002564 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002fd0:	b358      	cbz	r0, 800302a <UART_SetConfig+0x31a>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002fd2:	6863      	ldr	r3, [r4, #4]
 8002fd4:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002fd8:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fdc:	f1a0 0210 	sub.w	r2, r0, #16
 8002fe0:	f64f 73ef 	movw	r3, #65519	@ 0xffef
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d822      	bhi.n	800302e <UART_SetConfig+0x31e>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002fe8:	6823      	ldr	r3, [r4, #0]
 8002fea:	b280      	uxth	r0, r0
 8002fec:	60d8      	str	r0, [r3, #12]
 8002fee:	2000      	movs	r0, #0
 8002ff0:	e017      	b.n	8003022 <UART_SetConfig+0x312>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ff2:	f7ff fac9 	bl	8002588 <HAL_RCC_GetPCLK2Freq>
        break;
 8002ff6:	e7eb      	b.n	8002fd0 <UART_SetConfig+0x2c0>
        pclk = HAL_RCC_GetSysClockFreq();
 8002ff8:	f7fe fe88 	bl	8001d0c <HAL_RCC_GetSysClockFreq>
        break;
 8002ffc:	e7e8      	b.n	8002fd0 <UART_SetConfig+0x2c0>
        pclk = (uint32_t) LSE_VALUE;
 8002ffe:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8003002:	e7e6      	b.n	8002fd2 <UART_SetConfig+0x2c2>
    switch (clocksource)
 8003004:	2001      	movs	r0, #1
 8003006:	e00c      	b.n	8003022 <UART_SetConfig+0x312>
        ret = HAL_ERROR;
 8003008:	2001      	movs	r0, #1
 800300a:	e00a      	b.n	8003022 <UART_SetConfig+0x312>
 800300c:	2001      	movs	r0, #1
 800300e:	e008      	b.n	8003022 <UART_SetConfig+0x312>
          ret = HAL_ERROR;
 8003010:	2001      	movs	r0, #1
 8003012:	e006      	b.n	8003022 <UART_SetConfig+0x312>
    switch (clocksource)
 8003014:	2001      	movs	r0, #1
 8003016:	e004      	b.n	8003022 <UART_SetConfig+0x312>
 8003018:	2000      	movs	r0, #0
 800301a:	e002      	b.n	8003022 <UART_SetConfig+0x312>
        ret = HAL_ERROR;
 800301c:	2001      	movs	r0, #1
 800301e:	e000      	b.n	8003022 <UART_SetConfig+0x312>
    switch (clocksource)
 8003020:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8003022:	2300      	movs	r3, #0
 8003024:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 8003026:	66e3      	str	r3, [r4, #108]	@ 0x6c
}
 8003028:	bd10      	pop	{r4, pc}
 800302a:	2000      	movs	r0, #0
 800302c:	e7f9      	b.n	8003022 <UART_SetConfig+0x312>
        ret = HAL_ERROR;
 800302e:	2001      	movs	r0, #1
 8003030:	e7f7      	b.n	8003022 <UART_SetConfig+0x312>
 8003032:	bf00      	nop
 8003034:	00f42400 	.word	0x00f42400

08003038 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003038:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800303a:	f013 0f08 	tst.w	r3, #8
 800303e:	d006      	beq.n	800304e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003040:	6802      	ldr	r2, [r0, #0]
 8003042:	6853      	ldr	r3, [r2, #4]
 8003044:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003048:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 800304a:	430b      	orrs	r3, r1
 800304c:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800304e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8003050:	f013 0f01 	tst.w	r3, #1
 8003054:	d006      	beq.n	8003064 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003056:	6802      	ldr	r2, [r0, #0]
 8003058:	6853      	ldr	r3, [r2, #4]
 800305a:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800305e:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8003060:	430b      	orrs	r3, r1
 8003062:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003064:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8003066:	f013 0f02 	tst.w	r3, #2
 800306a:	d006      	beq.n	800307a <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800306c:	6802      	ldr	r2, [r0, #0]
 800306e:	6853      	ldr	r3, [r2, #4]
 8003070:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003074:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8003076:	430b      	orrs	r3, r1
 8003078:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800307a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800307c:	f013 0f04 	tst.w	r3, #4
 8003080:	d006      	beq.n	8003090 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003082:	6802      	ldr	r2, [r0, #0]
 8003084:	6853      	ldr	r3, [r2, #4]
 8003086:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800308a:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 800308c:	430b      	orrs	r3, r1
 800308e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003090:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8003092:	f013 0f10 	tst.w	r3, #16
 8003096:	d006      	beq.n	80030a6 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003098:	6802      	ldr	r2, [r0, #0]
 800309a:	6893      	ldr	r3, [r2, #8]
 800309c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80030a0:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 80030a2:	430b      	orrs	r3, r1
 80030a4:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80030a6:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80030a8:	f013 0f20 	tst.w	r3, #32
 80030ac:	d006      	beq.n	80030bc <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80030ae:	6802      	ldr	r2, [r0, #0]
 80030b0:	6893      	ldr	r3, [r2, #8]
 80030b2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80030b6:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 80030b8:	430b      	orrs	r3, r1
 80030ba:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80030bc:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80030be:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80030c2:	d00a      	beq.n	80030da <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80030c4:	6802      	ldr	r2, [r0, #0]
 80030c6:	6853      	ldr	r3, [r2, #4]
 80030c8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80030cc:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 80030ce:	430b      	orrs	r3, r1
 80030d0:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80030d2:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80030d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80030d8:	d00b      	beq.n	80030f2 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80030da:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80030dc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80030e0:	d006      	beq.n	80030f0 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80030e2:	6802      	ldr	r2, [r0, #0]
 80030e4:	6853      	ldr	r3, [r2, #4]
 80030e6:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80030ea:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 80030ec:	430b      	orrs	r3, r1
 80030ee:	6053      	str	r3, [r2, #4]
}
 80030f0:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80030f2:	6802      	ldr	r2, [r0, #0]
 80030f4:	6853      	ldr	r3, [r2, #4]
 80030f6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80030fa:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 80030fc:	430b      	orrs	r3, r1
 80030fe:	6053      	str	r3, [r2, #4]
 8003100:	e7eb      	b.n	80030da <UART_AdvFeatureConfig+0xa2>

08003102 <UART_WaitOnFlagUntilTimeout>:
{
 8003102:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003106:	4605      	mov	r5, r0
 8003108:	460e      	mov	r6, r1
 800310a:	4617      	mov	r7, r2
 800310c:	4699      	mov	r9, r3
 800310e:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003112:	682b      	ldr	r3, [r5, #0]
 8003114:	69dc      	ldr	r4, [r3, #28]
 8003116:	ea36 0404 	bics.w	r4, r6, r4
 800311a:	bf0c      	ite	eq
 800311c:	2401      	moveq	r4, #1
 800311e:	2400      	movne	r4, #0
 8003120:	42bc      	cmp	r4, r7
 8003122:	d136      	bne.n	8003192 <UART_WaitOnFlagUntilTimeout+0x90>
    if (Timeout != HAL_MAX_DELAY)
 8003124:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8003128:	d0f3      	beq.n	8003112 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800312a:	f7fd fef7 	bl	8000f1c <HAL_GetTick>
 800312e:	eba0 0009 	sub.w	r0, r0, r9
 8003132:	4540      	cmp	r0, r8
 8003134:	d830      	bhi.n	8003198 <UART_WaitOnFlagUntilTimeout+0x96>
 8003136:	f1b8 0f00 	cmp.w	r8, #0
 800313a:	d02f      	beq.n	800319c <UART_WaitOnFlagUntilTimeout+0x9a>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800313c:	682b      	ldr	r3, [r5, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	f012 0f04 	tst.w	r2, #4
 8003144:	d0e5      	beq.n	8003112 <UART_WaitOnFlagUntilTimeout+0x10>
 8003146:	2e80      	cmp	r6, #128	@ 0x80
 8003148:	d0e3      	beq.n	8003112 <UART_WaitOnFlagUntilTimeout+0x10>
 800314a:	2e40      	cmp	r6, #64	@ 0x40
 800314c:	d0e1      	beq.n	8003112 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800314e:	69da      	ldr	r2, [r3, #28]
 8003150:	f012 0f08 	tst.w	r2, #8
 8003154:	d111      	bne.n	800317a <UART_WaitOnFlagUntilTimeout+0x78>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003156:	69da      	ldr	r2, [r3, #28]
 8003158:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 800315c:	d0d9      	beq.n	8003112 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800315e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003162:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 8003164:	4628      	mov	r0, r5
 8003166:	f7ff fda9 	bl	8002cbc <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800316a:	2320      	movs	r3, #32
 800316c:	f8c5 3084 	str.w	r3, [r5, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 8003170:	2300      	movs	r3, #0
 8003172:	f885 3078 	strb.w	r3, [r5, #120]	@ 0x78
          return HAL_TIMEOUT;
 8003176:	2003      	movs	r0, #3
 8003178:	e00c      	b.n	8003194 <UART_WaitOnFlagUntilTimeout+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800317a:	2408      	movs	r4, #8
 800317c:	621c      	str	r4, [r3, #32]
          UART_EndRxTransfer(huart);
 800317e:	4628      	mov	r0, r5
 8003180:	f7ff fd9c 	bl	8002cbc <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003184:	f8c5 4084 	str.w	r4, [r5, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 8003188:	2300      	movs	r3, #0
 800318a:	f885 3078 	strb.w	r3, [r5, #120]	@ 0x78
          return HAL_ERROR;
 800318e:	2001      	movs	r0, #1
 8003190:	e000      	b.n	8003194 <UART_WaitOnFlagUntilTimeout+0x92>
  return HAL_OK;
 8003192:	2000      	movs	r0, #0
}
 8003194:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8003198:	2003      	movs	r0, #3
 800319a:	e7fb      	b.n	8003194 <UART_WaitOnFlagUntilTimeout+0x92>
 800319c:	2003      	movs	r0, #3
 800319e:	e7f9      	b.n	8003194 <UART_WaitOnFlagUntilTimeout+0x92>

080031a0 <UART_CheckIdleState>:
{
 80031a0:	b530      	push	{r4, r5, lr}
 80031a2:	b083      	sub	sp, #12
 80031a4:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031a6:	2300      	movs	r3, #0
 80031a8:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  tickstart = HAL_GetTick();
 80031ac:	f7fd feb6 	bl	8000f1c <HAL_GetTick>
 80031b0:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80031b2:	6822      	ldr	r2, [r4, #0]
 80031b4:	6812      	ldr	r2, [r2, #0]
 80031b6:	f012 0f08 	tst.w	r2, #8
 80031ba:	d10f      	bne.n	80031dc <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80031bc:	6823      	ldr	r3, [r4, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f013 0f04 	tst.w	r3, #4
 80031c4:	d126      	bne.n	8003214 <UART_CheckIdleState+0x74>
  huart->gState = HAL_UART_STATE_READY;
 80031c6:	2320      	movs	r3, #32
 80031c8:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80031ca:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031ce:	2000      	movs	r0, #0
 80031d0:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80031d2:	6660      	str	r0, [r4, #100]	@ 0x64
  __HAL_UNLOCK(huart);
 80031d4:	f884 0078 	strb.w	r0, [r4, #120]	@ 0x78
}
 80031d8:	b003      	add	sp, #12
 80031da:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031dc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80031e0:	9300      	str	r3, [sp, #0]
 80031e2:	4603      	mov	r3, r0
 80031e4:	2200      	movs	r2, #0
 80031e6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80031ea:	4620      	mov	r0, r4
 80031ec:	f7ff ff89 	bl	8003102 <UART_WaitOnFlagUntilTimeout>
 80031f0:	2800      	cmp	r0, #0
 80031f2:	d0e3      	beq.n	80031bc <UART_CheckIdleState+0x1c>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80031f4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031f6:	e852 3f00 	ldrex	r3, [r2]
 80031fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031fe:	e842 3100 	strex	r1, r3, [r2]
 8003202:	2900      	cmp	r1, #0
 8003204:	d1f6      	bne.n	80031f4 <UART_CheckIdleState+0x54>
      huart->gState = HAL_UART_STATE_READY;
 8003206:	2320      	movs	r3, #32
 8003208:	67e3      	str	r3, [r4, #124]	@ 0x7c
      __HAL_UNLOCK(huart);
 800320a:	2300      	movs	r3, #0
 800320c:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
      return HAL_TIMEOUT;
 8003210:	2003      	movs	r0, #3
 8003212:	e7e1      	b.n	80031d8 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003214:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003218:	9300      	str	r3, [sp, #0]
 800321a:	462b      	mov	r3, r5
 800321c:	2200      	movs	r2, #0
 800321e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003222:	4620      	mov	r0, r4
 8003224:	f7ff ff6d 	bl	8003102 <UART_WaitOnFlagUntilTimeout>
 8003228:	2800      	cmp	r0, #0
 800322a:	d0cc      	beq.n	80031c6 <UART_CheckIdleState+0x26>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800322c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800322e:	e852 3f00 	ldrex	r3, [r2]
 8003232:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003236:	e842 3100 	strex	r1, r3, [r2]
 800323a:	2900      	cmp	r1, #0
 800323c:	d1f6      	bne.n	800322c <UART_CheckIdleState+0x8c>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800323e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003240:	f102 0308 	add.w	r3, r2, #8
 8003244:	e853 3f00 	ldrex	r3, [r3]
 8003248:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800324c:	3208      	adds	r2, #8
 800324e:	e842 3100 	strex	r1, r3, [r2]
 8003252:	2900      	cmp	r1, #0
 8003254:	d1f3      	bne.n	800323e <UART_CheckIdleState+0x9e>
      huart->RxState = HAL_UART_STATE_READY;
 8003256:	2320      	movs	r3, #32
 8003258:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
      __HAL_UNLOCK(huart);
 800325c:	2300      	movs	r3, #0
 800325e:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
      return HAL_TIMEOUT;
 8003262:	2003      	movs	r0, #3
 8003264:	e7b8      	b.n	80031d8 <UART_CheckIdleState+0x38>

08003266 <HAL_UART_Init>:
  if (huart == NULL)
 8003266:	b368      	cbz	r0, 80032c4 <HAL_UART_Init+0x5e>
{
 8003268:	b510      	push	{r4, lr}
 800326a:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800326c:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 800326e:	b303      	cbz	r3, 80032b2 <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8003270:	2324      	movs	r3, #36	@ 0x24
 8003272:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 8003274:	6822      	ldr	r2, [r4, #0]
 8003276:	6813      	ldr	r3, [r2, #0]
 8003278:	f023 0301 	bic.w	r3, r3, #1
 800327c:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800327e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003280:	b9e3      	cbnz	r3, 80032bc <HAL_UART_Init+0x56>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003282:	4620      	mov	r0, r4
 8003284:	f7ff fd44 	bl	8002d10 <UART_SetConfig>
 8003288:	2801      	cmp	r0, #1
 800328a:	d011      	beq.n	80032b0 <HAL_UART_Init+0x4a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800328c:	6822      	ldr	r2, [r4, #0]
 800328e:	6853      	ldr	r3, [r2, #4]
 8003290:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8003294:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003296:	6822      	ldr	r2, [r4, #0]
 8003298:	6893      	ldr	r3, [r2, #8]
 800329a:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 800329e:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80032a0:	6822      	ldr	r2, [r4, #0]
 80032a2:	6813      	ldr	r3, [r2, #0]
 80032a4:	f043 0301 	orr.w	r3, r3, #1
 80032a8:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80032aa:	4620      	mov	r0, r4
 80032ac:	f7ff ff78 	bl	80031a0 <UART_CheckIdleState>
}
 80032b0:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80032b2:	f880 3078 	strb.w	r3, [r0, #120]	@ 0x78
    HAL_UART_MspInit(huart);
 80032b6:	f7fe fc4d 	bl	8001b54 <HAL_UART_MspInit>
 80032ba:	e7d9      	b.n	8003270 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 80032bc:	4620      	mov	r0, r4
 80032be:	f7ff febb 	bl	8003038 <UART_AdvFeatureConfig>
 80032c2:	e7de      	b.n	8003282 <HAL_UART_Init+0x1c>
    return HAL_ERROR;
 80032c4:	2001      	movs	r0, #1
}
 80032c6:	4770      	bx	lr

080032c8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80032c8:	e7fe      	b.n	80032c8 <NMI_Handler>

080032ca <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032ca:	e7fe      	b.n	80032ca <HardFault_Handler>

080032cc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032cc:	e7fe      	b.n	80032cc <MemManage_Handler>

080032ce <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032ce:	e7fe      	b.n	80032ce <BusFault_Handler>

080032d0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032d0:	e7fe      	b.n	80032d0 <UsageFault_Handler>

080032d2 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032d2:	4770      	bx	lr

080032d4 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032d4:	4770      	bx	lr

080032d6 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032d6:	4770      	bx	lr

080032d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032d8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032da:	f7fd fe13 	bl	8000f04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032de:	bd08      	pop	{r3, pc}

080032e0 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80032e0:	4a03      	ldr	r2, [pc, #12]	@ (80032f0 <SystemInit+0x10>)
 80032e2:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80032e6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80032ea:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80032ee:	4770      	bx	lr
 80032f0:	e000ed00 	.word	0xe000ed00

080032f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80032f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800332c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80032f8:	f7ff fff2 	bl	80032e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80032fc:	480c      	ldr	r0, [pc, #48]	@ (8003330 <LoopForever+0x6>)
  ldr r1, =_edata
 80032fe:	490d      	ldr	r1, [pc, #52]	@ (8003334 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003300:	4a0d      	ldr	r2, [pc, #52]	@ (8003338 <LoopForever+0xe>)
  movs r3, #0
 8003302:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003304:	e002      	b.n	800330c <LoopCopyDataInit>

08003306 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003306:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003308:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800330a:	3304      	adds	r3, #4

0800330c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800330c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800330e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003310:	d3f9      	bcc.n	8003306 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003312:	4a0a      	ldr	r2, [pc, #40]	@ (800333c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003314:	4c0a      	ldr	r4, [pc, #40]	@ (8003340 <LoopForever+0x16>)
  movs r3, #0
 8003316:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003318:	e001      	b.n	800331e <LoopFillZerobss>

0800331a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800331a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800331c:	3204      	adds	r2, #4

0800331e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800331e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003320:	d3fb      	bcc.n	800331a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003322:	f000 f81f 	bl	8003364 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003326:	f7fd fd41 	bl	8000dac <main>

0800332a <LoopForever>:

LoopForever:
    b LoopForever
 800332a:	e7fe      	b.n	800332a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800332c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003330:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003334:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8003338:	08003aa8 	.word	0x08003aa8
  ldr r2, =_sbss
 800333c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8003340:	2000030c 	.word	0x2000030c

08003344 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003344:	e7fe      	b.n	8003344 <ADC1_2_IRQHandler>

08003346 <memset>:
 8003346:	4402      	add	r2, r0
 8003348:	4603      	mov	r3, r0
 800334a:	4293      	cmp	r3, r2
 800334c:	d100      	bne.n	8003350 <memset+0xa>
 800334e:	4770      	bx	lr
 8003350:	f803 1b01 	strb.w	r1, [r3], #1
 8003354:	e7f9      	b.n	800334a <memset+0x4>
	...

08003358 <__errno>:
 8003358:	4b01      	ldr	r3, [pc, #4]	@ (8003360 <__errno+0x8>)
 800335a:	6818      	ldr	r0, [r3, #0]
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	20000010 	.word	0x20000010

08003364 <__libc_init_array>:
 8003364:	b570      	push	{r4, r5, r6, lr}
 8003366:	4b0d      	ldr	r3, [pc, #52]	@ (800339c <__libc_init_array+0x38>)
 8003368:	4d0d      	ldr	r5, [pc, #52]	@ (80033a0 <__libc_init_array+0x3c>)
 800336a:	1b5b      	subs	r3, r3, r5
 800336c:	109c      	asrs	r4, r3, #2
 800336e:	2600      	movs	r6, #0
 8003370:	42a6      	cmp	r6, r4
 8003372:	d109      	bne.n	8003388 <__libc_init_array+0x24>
 8003374:	f000 fb3e 	bl	80039f4 <_init>
 8003378:	4d0a      	ldr	r5, [pc, #40]	@ (80033a4 <__libc_init_array+0x40>)
 800337a:	4b0b      	ldr	r3, [pc, #44]	@ (80033a8 <__libc_init_array+0x44>)
 800337c:	1b5b      	subs	r3, r3, r5
 800337e:	109c      	asrs	r4, r3, #2
 8003380:	2600      	movs	r6, #0
 8003382:	42a6      	cmp	r6, r4
 8003384:	d105      	bne.n	8003392 <__libc_init_array+0x2e>
 8003386:	bd70      	pop	{r4, r5, r6, pc}
 8003388:	f855 3b04 	ldr.w	r3, [r5], #4
 800338c:	4798      	blx	r3
 800338e:	3601      	adds	r6, #1
 8003390:	e7ee      	b.n	8003370 <__libc_init_array+0xc>
 8003392:	f855 3b04 	ldr.w	r3, [r5], #4
 8003396:	4798      	blx	r3
 8003398:	3601      	adds	r6, #1
 800339a:	e7f2      	b.n	8003382 <__libc_init_array+0x1e>
 800339c:	08003a98 	.word	0x08003a98
 80033a0:	08003a98 	.word	0x08003a98
 80033a4:	08003a98 	.word	0x08003a98
 80033a8:	08003a9c 	.word	0x08003a9c

080033ac <atan2f>:
 80033ac:	f000 b822 	b.w	80033f4 <__ieee754_atan2f>

080033b0 <sqrtf>:
 80033b0:	b508      	push	{r3, lr}
 80033b2:	ed2d 8b02 	vpush	{d8}
 80033b6:	eeb0 8a40 	vmov.f32	s16, s0
 80033ba:	f000 f8c1 	bl	8003540 <__ieee754_sqrtf>
 80033be:	eeb4 8a48 	vcmp.f32	s16, s16
 80033c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033c6:	d606      	bvs.n	80033d6 <sqrtf+0x26>
 80033c8:	eddf 8a09 	vldr	s17, [pc, #36]	@ 80033f0 <sqrtf+0x40>
 80033cc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80033d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033d4:	d402      	bmi.n	80033dc <sqrtf+0x2c>
 80033d6:	ecbd 8b02 	vpop	{d8}
 80033da:	bd08      	pop	{r3, pc}
 80033dc:	f7ff ffbc 	bl	8003358 <__errno>
 80033e0:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80033e4:	ecbd 8b02 	vpop	{d8}
 80033e8:	2321      	movs	r3, #33	@ 0x21
 80033ea:	6003      	str	r3, [r0, #0]
 80033ec:	bd08      	pop	{r3, pc}
 80033ee:	bf00      	nop
 80033f0:	00000000 	.word	0x00000000

080033f4 <__ieee754_atan2f>:
 80033f4:	b510      	push	{r4, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	edcd 0a01 	vstr	s1, [sp, #4]
 80033fc:	9b01      	ldr	r3, [sp, #4]
 80033fe:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003402:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8003406:	eef0 7a40 	vmov.f32	s15, s0
 800340a:	d830      	bhi.n	800346e <__ieee754_atan2f+0x7a>
 800340c:	ee10 0a10 	vmov	r0, s0
 8003410:	f020 4100 	bic.w	r1, r0, #2147483648	@ 0x80000000
 8003414:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8003418:	d829      	bhi.n	800346e <__ieee754_atan2f+0x7a>
 800341a:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800341e:	d03e      	beq.n	800349e <__ieee754_atan2f+0xaa>
 8003420:	179c      	asrs	r4, r3, #30
 8003422:	f004 0402 	and.w	r4, r4, #2
 8003426:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800342a:	b331      	cbz	r1, 800347a <__ieee754_atan2f+0x86>
 800342c:	b37a      	cbz	r2, 800348e <__ieee754_atan2f+0x9a>
 800342e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8003432:	d03f      	beq.n	80034b4 <__ieee754_atan2f+0xc0>
 8003434:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8003438:	d029      	beq.n	800348e <__ieee754_atan2f+0x9a>
 800343a:	1a89      	subs	r1, r1, r2
 800343c:	f1b1 5ff4 	cmp.w	r1, #511705088	@ 0x1e800000
 8003440:	ea4f 52e1 	mov.w	r2, r1, asr #23
 8003444:	da33      	bge.n	80034ae <__ieee754_atan2f+0xba>
 8003446:	2b00      	cmp	r3, #0
 8003448:	da41      	bge.n	80034ce <__ieee754_atan2f+0xda>
 800344a:	323c      	adds	r2, #60	@ 0x3c
 800344c:	da3f      	bge.n	80034ce <__ieee754_atan2f+0xda>
 800344e:	ed9f 0a33 	vldr	s0, [pc, #204]	@ 800351c <__ieee754_atan2f+0x128>
 8003452:	2c01      	cmp	r4, #1
 8003454:	d04d      	beq.n	80034f2 <__ieee754_atan2f+0xfe>
 8003456:	2c02      	cmp	r4, #2
 8003458:	d042      	beq.n	80034e0 <__ieee754_atan2f+0xec>
 800345a:	b164      	cbz	r4, 8003476 <__ieee754_atan2f+0x82>
 800345c:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8003520 <__ieee754_atan2f+0x12c>
 8003460:	eddf 7a30 	vldr	s15, [pc, #192]	@ 8003524 <__ieee754_atan2f+0x130>
 8003464:	ee30 0a07 	vadd.f32	s0, s0, s14
 8003468:	ee30 0a67 	vsub.f32	s0, s0, s15
 800346c:	e003      	b.n	8003476 <__ieee754_atan2f+0x82>
 800346e:	ed9d 7a01 	vldr	s14, [sp, #4]
 8003472:	ee37 0a27 	vadd.f32	s0, s14, s15
 8003476:	b002      	add	sp, #8
 8003478:	bd10      	pop	{r4, pc}
 800347a:	2c02      	cmp	r4, #2
 800347c:	d00c      	beq.n	8003498 <__ieee754_atan2f+0xa4>
 800347e:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8003528 <__ieee754_atan2f+0x134>
 8003482:	2c03      	cmp	r4, #3
 8003484:	bf08      	it	eq
 8003486:	eeb0 0a47 	vmoveq.f32	s0, s14
 800348a:	b002      	add	sp, #8
 800348c:	bd10      	pop	{r4, pc}
 800348e:	2800      	cmp	r0, #0
 8003490:	db0a      	blt.n	80034a8 <__ieee754_atan2f+0xb4>
 8003492:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 800352c <__ieee754_atan2f+0x138>
 8003496:	e7ee      	b.n	8003476 <__ieee754_atan2f+0x82>
 8003498:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 8003524 <__ieee754_atan2f+0x130>
 800349c:	e7eb      	b.n	8003476 <__ieee754_atan2f+0x82>
 800349e:	b002      	add	sp, #8
 80034a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034a4:	f000 b850 	b.w	8003548 <atanf>
 80034a8:	ed9f 0a21 	vldr	s0, [pc, #132]	@ 8003530 <__ieee754_atan2f+0x13c>
 80034ac:	e7e3      	b.n	8003476 <__ieee754_atan2f+0x82>
 80034ae:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 800352c <__ieee754_atan2f+0x138>
 80034b2:	e7ce      	b.n	8003452 <__ieee754_atan2f+0x5e>
 80034b4:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80034b8:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 80034bc:	d020      	beq.n	8003500 <__ieee754_atan2f+0x10c>
 80034be:	2c02      	cmp	r4, #2
 80034c0:	d826      	bhi.n	8003510 <__ieee754_atan2f+0x11c>
 80034c2:	4b1c      	ldr	r3, [pc, #112]	@ (8003534 <__ieee754_atan2f+0x140>)
 80034c4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80034c8:	ed93 0a00 	vldr	s0, [r3]
 80034cc:	e7d3      	b.n	8003476 <__ieee754_atan2f+0x82>
 80034ce:	ed9d 7a01 	vldr	s14, [sp, #4]
 80034d2:	ee87 0a87 	vdiv.f32	s0, s15, s14
 80034d6:	f000 f909 	bl	80036ec <fabsf>
 80034da:	f000 f835 	bl	8003548 <atanf>
 80034de:	e7b8      	b.n	8003452 <__ieee754_atan2f+0x5e>
 80034e0:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8003520 <__ieee754_atan2f+0x12c>
 80034e4:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 8003524 <__ieee754_atan2f+0x130>
 80034e8:	ee30 0a07 	vadd.f32	s0, s0, s14
 80034ec:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80034f0:	e7c1      	b.n	8003476 <__ieee754_atan2f+0x82>
 80034f2:	ee10 3a10 	vmov	r3, s0
 80034f6:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80034fa:	ee00 3a10 	vmov	s0, r3
 80034fe:	e7ba      	b.n	8003476 <__ieee754_atan2f+0x82>
 8003500:	2c02      	cmp	r4, #2
 8003502:	d808      	bhi.n	8003516 <__ieee754_atan2f+0x122>
 8003504:	4b0c      	ldr	r3, [pc, #48]	@ (8003538 <__ieee754_atan2f+0x144>)
 8003506:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800350a:	ed93 0a00 	vldr	s0, [r3]
 800350e:	e7b2      	b.n	8003476 <__ieee754_atan2f+0x82>
 8003510:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 800351c <__ieee754_atan2f+0x128>
 8003514:	e7af      	b.n	8003476 <__ieee754_atan2f+0x82>
 8003516:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 800353c <__ieee754_atan2f+0x148>
 800351a:	e7ac      	b.n	8003476 <__ieee754_atan2f+0x82>
 800351c:	00000000 	.word	0x00000000
 8003520:	33bbbd2e 	.word	0x33bbbd2e
 8003524:	40490fdb 	.word	0x40490fdb
 8003528:	c0490fdb 	.word	0xc0490fdb
 800352c:	3fc90fdb 	.word	0x3fc90fdb
 8003530:	bfc90fdb 	.word	0xbfc90fdb
 8003534:	08003a58 	.word	0x08003a58
 8003538:	08003a64 	.word	0x08003a64
 800353c:	3f490fdb 	.word	0x3f490fdb

08003540 <__ieee754_sqrtf>:
 8003540:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop

08003548 <atanf>:
 8003548:	b538      	push	{r3, r4, r5, lr}
 800354a:	ee10 5a10 	vmov	r5, s0
 800354e:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8003552:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8003556:	eef0 7a40 	vmov.f32	s15, s0
 800355a:	d307      	bcc.n	800356c <atanf+0x24>
 800355c:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8003560:	d855      	bhi.n	800360e <atanf+0xc6>
 8003562:	2d00      	cmp	r5, #0
 8003564:	dd77      	ble.n	8003656 <atanf+0x10e>
 8003566:	ed9f 0a4e 	vldr	s0, [pc, #312]	@ 80036a0 <atanf+0x158>
 800356a:	bd38      	pop	{r3, r4, r5, pc}
 800356c:	4b4d      	ldr	r3, [pc, #308]	@ (80036a4 <atanf+0x15c>)
 800356e:	429c      	cmp	r4, r3
 8003570:	d85c      	bhi.n	800362c <atanf+0xe4>
 8003572:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8003576:	d34d      	bcc.n	8003614 <atanf+0xcc>
 8003578:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800357c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8003580:	ed9f 5a49 	vldr	s10, [pc, #292]	@ 80036a8 <atanf+0x160>
 8003584:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 80036ac <atanf+0x164>
 8003588:	eddf 5a49 	vldr	s11, [pc, #292]	@ 80036b0 <atanf+0x168>
 800358c:	eddf 4a49 	vldr	s9, [pc, #292]	@ 80036b4 <atanf+0x16c>
 8003590:	ee66 6a06 	vmul.f32	s13, s12, s12
 8003594:	1c5a      	adds	r2, r3, #1
 8003596:	eea6 7a85 	vfma.f32	s14, s13, s10
 800359a:	eee6 4aa5 	vfma.f32	s9, s13, s11
 800359e:	ed9f 5a46 	vldr	s10, [pc, #280]	@ 80036b8 <atanf+0x170>
 80035a2:	eddf 5a46 	vldr	s11, [pc, #280]	@ 80036bc <atanf+0x174>
 80035a6:	eea7 5a26 	vfma.f32	s10, s14, s13
 80035aa:	eee4 5aa6 	vfma.f32	s11, s9, s13
 80035ae:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 80036c0 <atanf+0x178>
 80035b2:	eddf 4a44 	vldr	s9, [pc, #272]	@ 80036c4 <atanf+0x17c>
 80035b6:	eea5 7a26 	vfma.f32	s14, s10, s13
 80035ba:	eee5 4aa6 	vfma.f32	s9, s11, s13
 80035be:	ed9f 5a42 	vldr	s10, [pc, #264]	@ 80036c8 <atanf+0x180>
 80035c2:	eddf 5a42 	vldr	s11, [pc, #264]	@ 80036cc <atanf+0x184>
 80035c6:	eea7 5a26 	vfma.f32	s10, s14, s13
 80035ca:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 80036d0 <atanf+0x188>
 80035ce:	eea4 7aa6 	vfma.f32	s14, s9, s13
 80035d2:	eee5 5a26 	vfma.f32	s11, s10, s13
 80035d6:	ee27 7a26 	vmul.f32	s14, s14, s13
 80035da:	eea5 7a86 	vfma.f32	s14, s11, s12
 80035de:	ee27 7a87 	vmul.f32	s14, s15, s14
 80035e2:	d03b      	beq.n	800365c <atanf+0x114>
 80035e4:	493b      	ldr	r1, [pc, #236]	@ (80036d4 <atanf+0x18c>)
 80035e6:	4a3c      	ldr	r2, [pc, #240]	@ (80036d8 <atanf+0x190>)
 80035e8:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80035ec:	edd1 6a00 	vldr	s13, [r1]
 80035f0:	ee37 7a66 	vsub.f32	s14, s14, s13
 80035f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80035f8:	edd3 6a00 	vldr	s13, [r3]
 80035fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003600:	2d00      	cmp	r5, #0
 8003602:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8003606:	dab0      	bge.n	800356a <atanf+0x22>
 8003608:	eeb1 0a40 	vneg.f32	s0, s0
 800360c:	bd38      	pop	{r3, r4, r5, pc}
 800360e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8003612:	bd38      	pop	{r3, r4, r5, pc}
 8003614:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80036dc <atanf+0x194>
 8003618:	ee30 7a07 	vadd.f32	s14, s0, s14
 800361c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003620:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8003624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003628:	dda6      	ble.n	8003578 <atanf+0x30>
 800362a:	bd38      	pop	{r3, r4, r5, pc}
 800362c:	f000 f85e 	bl	80036ec <fabsf>
 8003630:	4b2b      	ldr	r3, [pc, #172]	@ (80036e0 <atanf+0x198>)
 8003632:	429c      	cmp	r4, r3
 8003634:	d815      	bhi.n	8003662 <atanf+0x11a>
 8003636:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800363a:	429c      	cmp	r4, r3
 800363c:	d826      	bhi.n	800368c <atanf+0x144>
 800363e:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8003642:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8003646:	eea0 7a27 	vfma.f32	s14, s0, s15
 800364a:	2300      	movs	r3, #0
 800364c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8003650:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8003654:	e792      	b.n	800357c <atanf+0x34>
 8003656:	ed9f 0a23 	vldr	s0, [pc, #140]	@ 80036e4 <atanf+0x19c>
 800365a:	bd38      	pop	{r3, r4, r5, pc}
 800365c:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8003660:	bd38      	pop	{r3, r4, r5, pc}
 8003662:	4b21      	ldr	r3, [pc, #132]	@ (80036e8 <atanf+0x1a0>)
 8003664:	429c      	cmp	r4, r3
 8003666:	d80b      	bhi.n	8003680 <atanf+0x138>
 8003668:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800366c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003670:	eea0 7a27 	vfma.f32	s14, s0, s15
 8003674:	2302      	movs	r3, #2
 8003676:	ee30 0a67 	vsub.f32	s0, s0, s15
 800367a:	eec0 7a07 	vdiv.f32	s15, s0, s14
 800367e:	e77d      	b.n	800357c <atanf+0x34>
 8003680:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8003684:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8003688:	2303      	movs	r3, #3
 800368a:	e777      	b.n	800357c <atanf+0x34>
 800368c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8003690:	ee30 7a67 	vsub.f32	s14, s0, s15
 8003694:	ee30 0a27 	vadd.f32	s0, s0, s15
 8003698:	2301      	movs	r3, #1
 800369a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800369e:	e76d      	b.n	800357c <atanf+0x34>
 80036a0:	3fc90fdb 	.word	0x3fc90fdb
 80036a4:	3edfffff 	.word	0x3edfffff
 80036a8:	3c8569d7 	.word	0x3c8569d7
 80036ac:	3d4bda59 	.word	0x3d4bda59
 80036b0:	bd15a221 	.word	0xbd15a221
 80036b4:	bd6ef16b 	.word	0xbd6ef16b
 80036b8:	3d886b35 	.word	0x3d886b35
 80036bc:	bd9d8795 	.word	0xbd9d8795
 80036c0:	3dba2e6e 	.word	0x3dba2e6e
 80036c4:	bde38e38 	.word	0xbde38e38
 80036c8:	3e124925 	.word	0x3e124925
 80036cc:	3eaaaaab 	.word	0x3eaaaaab
 80036d0:	be4ccccd 	.word	0xbe4ccccd
 80036d4:	08003a70 	.word	0x08003a70
 80036d8:	08003a80 	.word	0x08003a80
 80036dc:	7149f2ca 	.word	0x7149f2ca
 80036e0:	3f97ffff 	.word	0x3f97ffff
 80036e4:	bfc90fdb 	.word	0xbfc90fdb
 80036e8:	401bffff 	.word	0x401bffff

080036ec <fabsf>:
 80036ec:	ee10 3a10 	vmov	r3, s0
 80036f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80036f4:	ee00 3a10 	vmov	s0, r3
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop

080036fc <__udivmoddi4>:
 80036fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003700:	9d08      	ldr	r5, [sp, #32]
 8003702:	460f      	mov	r7, r1
 8003704:	4604      	mov	r4, r0
 8003706:	468c      	mov	ip, r1
 8003708:	2b00      	cmp	r3, #0
 800370a:	d148      	bne.n	800379e <__udivmoddi4+0xa2>
 800370c:	428a      	cmp	r2, r1
 800370e:	4616      	mov	r6, r2
 8003710:	d961      	bls.n	80037d6 <__udivmoddi4+0xda>
 8003712:	fab2 f382 	clz	r3, r2
 8003716:	b14b      	cbz	r3, 800372c <__udivmoddi4+0x30>
 8003718:	f1c3 0220 	rsb	r2, r3, #32
 800371c:	fa01 fc03 	lsl.w	ip, r1, r3
 8003720:	fa20 f202 	lsr.w	r2, r0, r2
 8003724:	409e      	lsls	r6, r3
 8003726:	ea42 0c0c 	orr.w	ip, r2, ip
 800372a:	409c      	lsls	r4, r3
 800372c:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 8003730:	b2b7      	uxth	r7, r6
 8003732:	fbbc f1fe 	udiv	r1, ip, lr
 8003736:	0c22      	lsrs	r2, r4, #16
 8003738:	fb0e cc11 	mls	ip, lr, r1, ip
 800373c:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8003740:	fb01 f007 	mul.w	r0, r1, r7
 8003744:	4290      	cmp	r0, r2
 8003746:	d909      	bls.n	800375c <__udivmoddi4+0x60>
 8003748:	18b2      	adds	r2, r6, r2
 800374a:	f101 3cff 	add.w	ip, r1, #4294967295	@ 0xffffffff
 800374e:	f080 80ee 	bcs.w	800392e <__udivmoddi4+0x232>
 8003752:	4290      	cmp	r0, r2
 8003754:	f240 80eb 	bls.w	800392e <__udivmoddi4+0x232>
 8003758:	3902      	subs	r1, #2
 800375a:	4432      	add	r2, r6
 800375c:	1a12      	subs	r2, r2, r0
 800375e:	b2a4      	uxth	r4, r4
 8003760:	fbb2 f0fe 	udiv	r0, r2, lr
 8003764:	fb0e 2210 	mls	r2, lr, r0, r2
 8003768:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800376c:	fb00 f707 	mul.w	r7, r0, r7
 8003770:	42a7      	cmp	r7, r4
 8003772:	d909      	bls.n	8003788 <__udivmoddi4+0x8c>
 8003774:	1934      	adds	r4, r6, r4
 8003776:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 800377a:	f080 80da 	bcs.w	8003932 <__udivmoddi4+0x236>
 800377e:	42a7      	cmp	r7, r4
 8003780:	f240 80d7 	bls.w	8003932 <__udivmoddi4+0x236>
 8003784:	4434      	add	r4, r6
 8003786:	3802      	subs	r0, #2
 8003788:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800378c:	1be4      	subs	r4, r4, r7
 800378e:	2100      	movs	r1, #0
 8003790:	b11d      	cbz	r5, 800379a <__udivmoddi4+0x9e>
 8003792:	40dc      	lsrs	r4, r3
 8003794:	2300      	movs	r3, #0
 8003796:	e9c5 4300 	strd	r4, r3, [r5]
 800379a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800379e:	428b      	cmp	r3, r1
 80037a0:	d906      	bls.n	80037b0 <__udivmoddi4+0xb4>
 80037a2:	b10d      	cbz	r5, 80037a8 <__udivmoddi4+0xac>
 80037a4:	e9c5 0100 	strd	r0, r1, [r5]
 80037a8:	2100      	movs	r1, #0
 80037aa:	4608      	mov	r0, r1
 80037ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037b0:	fab3 f183 	clz	r1, r3
 80037b4:	2900      	cmp	r1, #0
 80037b6:	d148      	bne.n	800384a <__udivmoddi4+0x14e>
 80037b8:	42bb      	cmp	r3, r7
 80037ba:	d302      	bcc.n	80037c2 <__udivmoddi4+0xc6>
 80037bc:	4282      	cmp	r2, r0
 80037be:	f200 8107 	bhi.w	80039d0 <__udivmoddi4+0x2d4>
 80037c2:	1a84      	subs	r4, r0, r2
 80037c4:	eb67 0203 	sbc.w	r2, r7, r3
 80037c8:	2001      	movs	r0, #1
 80037ca:	4694      	mov	ip, r2
 80037cc:	2d00      	cmp	r5, #0
 80037ce:	d0e4      	beq.n	800379a <__udivmoddi4+0x9e>
 80037d0:	e9c5 4c00 	strd	r4, ip, [r5]
 80037d4:	e7e1      	b.n	800379a <__udivmoddi4+0x9e>
 80037d6:	2a00      	cmp	r2, #0
 80037d8:	f000 8092 	beq.w	8003900 <__udivmoddi4+0x204>
 80037dc:	fab2 f382 	clz	r3, r2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f040 80a8 	bne.w	8003936 <__udivmoddi4+0x23a>
 80037e6:	1a8a      	subs	r2, r1, r2
 80037e8:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 80037ec:	fa1f fc86 	uxth.w	ip, r6
 80037f0:	2101      	movs	r1, #1
 80037f2:	0c20      	lsrs	r0, r4, #16
 80037f4:	fbb2 f7fe 	udiv	r7, r2, lr
 80037f8:	fb0e 2217 	mls	r2, lr, r7, r2
 80037fc:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 8003800:	fb0c f007 	mul.w	r0, ip, r7
 8003804:	4290      	cmp	r0, r2
 8003806:	d907      	bls.n	8003818 <__udivmoddi4+0x11c>
 8003808:	18b2      	adds	r2, r6, r2
 800380a:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800380e:	d202      	bcs.n	8003816 <__udivmoddi4+0x11a>
 8003810:	4290      	cmp	r0, r2
 8003812:	f200 80e2 	bhi.w	80039da <__udivmoddi4+0x2de>
 8003816:	4647      	mov	r7, r8
 8003818:	1a12      	subs	r2, r2, r0
 800381a:	b2a4      	uxth	r4, r4
 800381c:	fbb2 f0fe 	udiv	r0, r2, lr
 8003820:	fb0e 2210 	mls	r2, lr, r0, r2
 8003824:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8003828:	fb0c fc00 	mul.w	ip, ip, r0
 800382c:	45a4      	cmp	ip, r4
 800382e:	d907      	bls.n	8003840 <__udivmoddi4+0x144>
 8003830:	1934      	adds	r4, r6, r4
 8003832:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8003836:	d202      	bcs.n	800383e <__udivmoddi4+0x142>
 8003838:	45a4      	cmp	ip, r4
 800383a:	f200 80cb 	bhi.w	80039d4 <__udivmoddi4+0x2d8>
 800383e:	4610      	mov	r0, r2
 8003840:	eba4 040c 	sub.w	r4, r4, ip
 8003844:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8003848:	e7a2      	b.n	8003790 <__udivmoddi4+0x94>
 800384a:	f1c1 0620 	rsb	r6, r1, #32
 800384e:	408b      	lsls	r3, r1
 8003850:	fa22 fc06 	lsr.w	ip, r2, r6
 8003854:	ea4c 0c03 	orr.w	ip, ip, r3
 8003858:	fa07 f401 	lsl.w	r4, r7, r1
 800385c:	fa20 f306 	lsr.w	r3, r0, r6
 8003860:	40f7      	lsrs	r7, r6
 8003862:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8003866:	4323      	orrs	r3, r4
 8003868:	fa00 f801 	lsl.w	r8, r0, r1
 800386c:	fa1f fe8c 	uxth.w	lr, ip
 8003870:	fbb7 f0f9 	udiv	r0, r7, r9
 8003874:	0c1c      	lsrs	r4, r3, #16
 8003876:	fb09 7710 	mls	r7, r9, r0, r7
 800387a:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
 800387e:	fb00 f70e 	mul.w	r7, r0, lr
 8003882:	42a7      	cmp	r7, r4
 8003884:	fa02 f201 	lsl.w	r2, r2, r1
 8003888:	d90a      	bls.n	80038a0 <__udivmoddi4+0x1a4>
 800388a:	eb1c 0404 	adds.w	r4, ip, r4
 800388e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8003892:	f080 809b 	bcs.w	80039cc <__udivmoddi4+0x2d0>
 8003896:	42a7      	cmp	r7, r4
 8003898:	f240 8098 	bls.w	80039cc <__udivmoddi4+0x2d0>
 800389c:	3802      	subs	r0, #2
 800389e:	4464      	add	r4, ip
 80038a0:	1be4      	subs	r4, r4, r7
 80038a2:	b29f      	uxth	r7, r3
 80038a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80038a8:	fb09 4413 	mls	r4, r9, r3, r4
 80038ac:	ea47 4404 	orr.w	r4, r7, r4, lsl #16
 80038b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80038b4:	45a6      	cmp	lr, r4
 80038b6:	d909      	bls.n	80038cc <__udivmoddi4+0x1d0>
 80038b8:	eb1c 0404 	adds.w	r4, ip, r4
 80038bc:	f103 37ff 	add.w	r7, r3, #4294967295	@ 0xffffffff
 80038c0:	f080 8082 	bcs.w	80039c8 <__udivmoddi4+0x2cc>
 80038c4:	45a6      	cmp	lr, r4
 80038c6:	d97f      	bls.n	80039c8 <__udivmoddi4+0x2cc>
 80038c8:	3b02      	subs	r3, #2
 80038ca:	4464      	add	r4, ip
 80038cc:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80038d0:	eba4 040e 	sub.w	r4, r4, lr
 80038d4:	fba0 e702 	umull	lr, r7, r0, r2
 80038d8:	42bc      	cmp	r4, r7
 80038da:	4673      	mov	r3, lr
 80038dc:	46b9      	mov	r9, r7
 80038de:	d363      	bcc.n	80039a8 <__udivmoddi4+0x2ac>
 80038e0:	d060      	beq.n	80039a4 <__udivmoddi4+0x2a8>
 80038e2:	b15d      	cbz	r5, 80038fc <__udivmoddi4+0x200>
 80038e4:	ebb8 0203 	subs.w	r2, r8, r3
 80038e8:	eb64 0409 	sbc.w	r4, r4, r9
 80038ec:	fa04 f606 	lsl.w	r6, r4, r6
 80038f0:	fa22 f301 	lsr.w	r3, r2, r1
 80038f4:	431e      	orrs	r6, r3
 80038f6:	40cc      	lsrs	r4, r1
 80038f8:	e9c5 6400 	strd	r6, r4, [r5]
 80038fc:	2100      	movs	r1, #0
 80038fe:	e74c      	b.n	800379a <__udivmoddi4+0x9e>
 8003900:	0862      	lsrs	r2, r4, #1
 8003902:	0848      	lsrs	r0, r1, #1
 8003904:	ea42 71c1 	orr.w	r1, r2, r1, lsl #31
 8003908:	0c0b      	lsrs	r3, r1, #16
 800390a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800390e:	b28a      	uxth	r2, r1
 8003910:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003914:	fbb3 f1f6 	udiv	r1, r3, r6
 8003918:	07e4      	lsls	r4, r4, #31
 800391a:	46b4      	mov	ip, r6
 800391c:	4637      	mov	r7, r6
 800391e:	46b6      	mov	lr, r6
 8003920:	231f      	movs	r3, #31
 8003922:	fbb0 f0f6 	udiv	r0, r0, r6
 8003926:	1bd2      	subs	r2, r2, r7
 8003928:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800392c:	e761      	b.n	80037f2 <__udivmoddi4+0xf6>
 800392e:	4661      	mov	r1, ip
 8003930:	e714      	b.n	800375c <__udivmoddi4+0x60>
 8003932:	4610      	mov	r0, r2
 8003934:	e728      	b.n	8003788 <__udivmoddi4+0x8c>
 8003936:	f1c3 0120 	rsb	r1, r3, #32
 800393a:	fa20 f201 	lsr.w	r2, r0, r1
 800393e:	409e      	lsls	r6, r3
 8003940:	fa27 f101 	lsr.w	r1, r7, r1
 8003944:	409f      	lsls	r7, r3
 8003946:	433a      	orrs	r2, r7
 8003948:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 800394c:	fa1f fc86 	uxth.w	ip, r6
 8003950:	fbb1 f7fe 	udiv	r7, r1, lr
 8003954:	fb0e 1017 	mls	r0, lr, r7, r1
 8003958:	0c11      	lsrs	r1, r2, #16
 800395a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800395e:	fb07 f80c 	mul.w	r8, r7, ip
 8003962:	4588      	cmp	r8, r1
 8003964:	fa04 f403 	lsl.w	r4, r4, r3
 8003968:	d93a      	bls.n	80039e0 <__udivmoddi4+0x2e4>
 800396a:	1871      	adds	r1, r6, r1
 800396c:	f107 30ff 	add.w	r0, r7, #4294967295	@ 0xffffffff
 8003970:	d201      	bcs.n	8003976 <__udivmoddi4+0x27a>
 8003972:	4588      	cmp	r8, r1
 8003974:	d81f      	bhi.n	80039b6 <__udivmoddi4+0x2ba>
 8003976:	eba1 0108 	sub.w	r1, r1, r8
 800397a:	fbb1 f8fe 	udiv	r8, r1, lr
 800397e:	fb08 f70c 	mul.w	r7, r8, ip
 8003982:	fb0e 1118 	mls	r1, lr, r8, r1
 8003986:	b292      	uxth	r2, r2
 8003988:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800398c:	42ba      	cmp	r2, r7
 800398e:	d22f      	bcs.n	80039f0 <__udivmoddi4+0x2f4>
 8003990:	18b2      	adds	r2, r6, r2
 8003992:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 8003996:	d2c6      	bcs.n	8003926 <__udivmoddi4+0x22a>
 8003998:	42ba      	cmp	r2, r7
 800399a:	d2c4      	bcs.n	8003926 <__udivmoddi4+0x22a>
 800399c:	f1a8 0102 	sub.w	r1, r8, #2
 80039a0:	4432      	add	r2, r6
 80039a2:	e7c0      	b.n	8003926 <__udivmoddi4+0x22a>
 80039a4:	45f0      	cmp	r8, lr
 80039a6:	d29c      	bcs.n	80038e2 <__udivmoddi4+0x1e6>
 80039a8:	ebbe 0302 	subs.w	r3, lr, r2
 80039ac:	eb67 070c 	sbc.w	r7, r7, ip
 80039b0:	3801      	subs	r0, #1
 80039b2:	46b9      	mov	r9, r7
 80039b4:	e795      	b.n	80038e2 <__udivmoddi4+0x1e6>
 80039b6:	eba6 0808 	sub.w	r8, r6, r8
 80039ba:	4441      	add	r1, r8
 80039bc:	1eb8      	subs	r0, r7, #2
 80039be:	fbb1 f8fe 	udiv	r8, r1, lr
 80039c2:	fb08 f70c 	mul.w	r7, r8, ip
 80039c6:	e7dc      	b.n	8003982 <__udivmoddi4+0x286>
 80039c8:	463b      	mov	r3, r7
 80039ca:	e77f      	b.n	80038cc <__udivmoddi4+0x1d0>
 80039cc:	4650      	mov	r0, sl
 80039ce:	e767      	b.n	80038a0 <__udivmoddi4+0x1a4>
 80039d0:	4608      	mov	r0, r1
 80039d2:	e6fb      	b.n	80037cc <__udivmoddi4+0xd0>
 80039d4:	4434      	add	r4, r6
 80039d6:	3802      	subs	r0, #2
 80039d8:	e732      	b.n	8003840 <__udivmoddi4+0x144>
 80039da:	3f02      	subs	r7, #2
 80039dc:	4432      	add	r2, r6
 80039de:	e71b      	b.n	8003818 <__udivmoddi4+0x11c>
 80039e0:	eba1 0108 	sub.w	r1, r1, r8
 80039e4:	4638      	mov	r0, r7
 80039e6:	fbb1 f8fe 	udiv	r8, r1, lr
 80039ea:	fb08 f70c 	mul.w	r7, r8, ip
 80039ee:	e7c8      	b.n	8003982 <__udivmoddi4+0x286>
 80039f0:	4641      	mov	r1, r8
 80039f2:	e798      	b.n	8003926 <__udivmoddi4+0x22a>

080039f4 <_init>:
 80039f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039f6:	bf00      	nop
 80039f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039fa:	bc08      	pop	{r3}
 80039fc:	469e      	mov	lr, r3
 80039fe:	4770      	bx	lr

08003a00 <_fini>:
 8003a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a02:	bf00      	nop
 8003a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a06:	bc08      	pop	{r3}
 8003a08:	469e      	mov	lr, r3
 8003a0a:	4770      	bx	lr
 8003a0c:	0000      	movs	r0, r0
	...
