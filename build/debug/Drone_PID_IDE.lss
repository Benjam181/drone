
build/debug/Drone_PID_IDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004620  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  080047b0  080047b0  000057b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004890  08004890  00006060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004890  08004890  00005890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004898  08004898  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08004898  08004898  00005898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  080048a0  080048a0  000058a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080048a8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000458  20000060  08004908  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004b8  08004908  000064b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .comment      00000038  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013101  00000000  00000000  000060c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002262  00000000  00000000  000191c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 000098ec  00000000  00000000  0001b42b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000c38  00000000  00000000  00024d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000095f  00000000  00000000  00025950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fccf  00000000  00000000  000262af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00003fe5  00000000  00000000  00035f7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001f80  00000000  00000000  00039f64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  0003bee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <strlen>:
 8000190:	4603      	mov	r3, r0
 8000192:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000196:	2a00      	cmp	r2, #0
 8000198:	d1fb      	bne.n	8000192 <strlen+0x2>
 800019a:	1a18      	subs	r0, r3, r0
 800019c:	3801      	subs	r0, #1
 800019e:	4770      	bx	lr

080001a0 <memchr>:
 80001a0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001a4:	2a10      	cmp	r2, #16
 80001a6:	db2b      	blt.n	8000200 <memchr+0x60>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	d008      	beq.n	80001c0 <memchr+0x20>
 80001ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001b2:	3a01      	subs	r2, #1
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d02d      	beq.n	8000214 <memchr+0x74>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	b342      	cbz	r2, 8000210 <memchr+0x70>
 80001be:	d1f6      	bne.n	80001ae <memchr+0xe>
 80001c0:	b4f0      	push	{r4, r5, r6, r7}
 80001c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ca:	f022 0407 	bic.w	r4, r2, #7
 80001ce:	f07f 0700 	mvns.w	r7, #0
 80001d2:	2300      	movs	r3, #0
 80001d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001d8:	3c08      	subs	r4, #8
 80001da:	ea85 0501 	eor.w	r5, r5, r1
 80001de:	ea86 0601 	eor.w	r6, r6, r1
 80001e2:	fa85 f547 	uadd8	r5, r5, r7
 80001e6:	faa3 f587 	sel	r5, r3, r7
 80001ea:	fa86 f647 	uadd8	r6, r6, r7
 80001ee:	faa5 f687 	sel	r6, r5, r7
 80001f2:	b98e      	cbnz	r6, 8000218 <memchr+0x78>
 80001f4:	d1ee      	bne.n	80001d4 <memchr+0x34>
 80001f6:	bcf0      	pop	{r4, r5, r6, r7}
 80001f8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001fc:	f002 0207 	and.w	r2, r2, #7
 8000200:	b132      	cbz	r2, 8000210 <memchr+0x70>
 8000202:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000206:	3a01      	subs	r2, #1
 8000208:	ea83 0301 	eor.w	r3, r3, r1
 800020c:	b113      	cbz	r3, 8000214 <memchr+0x74>
 800020e:	d1f8      	bne.n	8000202 <memchr+0x62>
 8000210:	2000      	movs	r0, #0
 8000212:	4770      	bx	lr
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr
 8000218:	2d00      	cmp	r5, #0
 800021a:	bf06      	itte	eq
 800021c:	4635      	moveq	r5, r6
 800021e:	3803      	subeq	r0, #3
 8000220:	3807      	subne	r0, #7
 8000222:	f015 0f01 	tst.w	r5, #1
 8000226:	d107      	bne.n	8000238 <memchr+0x98>
 8000228:	3001      	adds	r0, #1
 800022a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800022e:	bf02      	ittt	eq
 8000230:	3001      	addeq	r0, #1
 8000232:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000236:	3001      	addeq	r0, #1
 8000238:	bcf0      	pop	{r4, r5, r6, r7}
 800023a:	3801      	subs	r0, #1
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop

08000240 <__aeabi_dmul>:
 8000240:	b570      	push	{r4, r5, r6, lr}
 8000242:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000246:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800024a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800024e:	bf1d      	ittte	ne
 8000250:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000254:	ea94 0f0c 	teqne	r4, ip
 8000258:	ea95 0f0c 	teqne	r5, ip
 800025c:	f000 f8de 	bleq	800041c <__aeabi_dmul+0x1dc>
 8000260:	442c      	add	r4, r5
 8000262:	ea81 0603 	eor.w	r6, r1, r3
 8000266:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800026a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800026e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000272:	bf18      	it	ne
 8000274:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000278:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800027c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000280:	d038      	beq.n	80002f4 <__aeabi_dmul+0xb4>
 8000282:	fba0 ce02 	umull	ip, lr, r0, r2
 8000286:	f04f 0500 	mov.w	r5, #0
 800028a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800028e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000292:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000296:	f04f 0600 	mov.w	r6, #0
 800029a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800029e:	f09c 0f00 	teq	ip, #0
 80002a2:	bf18      	it	ne
 80002a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002b4:	d204      	bcs.n	80002c0 <__aeabi_dmul+0x80>
 80002b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ba:	416d      	adcs	r5, r5
 80002bc:	eb46 0606 	adc.w	r6, r6, r6
 80002c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002d8:	bf88      	it	hi
 80002da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002de:	d81e      	bhi.n	800031e <__aeabi_dmul+0xde>
 80002e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	bd70      	pop	{r4, r5, r6, pc}
 80002f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002f8:	ea46 0101 	orr.w	r1, r6, r1
 80002fc:	ea40 0002 	orr.w	r0, r0, r2
 8000300:	ea81 0103 	eor.w	r1, r1, r3
 8000304:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000308:	bfc2      	ittt	gt
 800030a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800030e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000312:	bd70      	popgt	{r4, r5, r6, pc}
 8000314:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000318:	f04f 0e00 	mov.w	lr, #0
 800031c:	3c01      	subs	r4, #1
 800031e:	f300 80ab 	bgt.w	8000478 <__aeabi_dmul+0x238>
 8000322:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000326:	bfde      	ittt	le
 8000328:	2000      	movle	r0, #0
 800032a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800032e:	bd70      	pople	{r4, r5, r6, pc}
 8000330:	f1c4 0400 	rsb	r4, r4, #0
 8000334:	3c20      	subs	r4, #32
 8000336:	da35      	bge.n	80003a4 <__aeabi_dmul+0x164>
 8000338:	340c      	adds	r4, #12
 800033a:	dc1b      	bgt.n	8000374 <__aeabi_dmul+0x134>
 800033c:	f104 0414 	add.w	r4, r4, #20
 8000340:	f1c4 0520 	rsb	r5, r4, #32
 8000344:	fa00 f305 	lsl.w	r3, r0, r5
 8000348:	fa20 f004 	lsr.w	r0, r0, r4
 800034c:	fa01 f205 	lsl.w	r2, r1, r5
 8000350:	ea40 0002 	orr.w	r0, r0, r2
 8000354:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000358:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800035c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000360:	fa21 f604 	lsr.w	r6, r1, r4
 8000364:	eb42 0106 	adc.w	r1, r2, r6
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f1c4 040c 	rsb	r4, r4, #12
 8000378:	f1c4 0520 	rsb	r5, r4, #32
 800037c:	fa00 f304 	lsl.w	r3, r0, r4
 8000380:	fa20 f005 	lsr.w	r0, r0, r5
 8000384:	fa01 f204 	lsl.w	r2, r1, r4
 8000388:	ea40 0002 	orr.w	r0, r0, r2
 800038c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000390:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000394:	f141 0100 	adc.w	r1, r1, #0
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 0520 	rsb	r5, r4, #32
 80003a8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80003b0:	fa20 f304 	lsr.w	r3, r0, r4
 80003b4:	fa01 f205 	lsl.w	r2, r1, r5
 80003b8:	ea43 0302 	orr.w	r3, r3, r2
 80003bc:	fa21 f004 	lsr.w	r0, r1, r4
 80003c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c4:	fa21 f204 	lsr.w	r2, r1, r4
 80003c8:	ea20 0002 	bic.w	r0, r0, r2
 80003cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003d4:	bf08      	it	eq
 80003d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003da:	bd70      	pop	{r4, r5, r6, pc}
 80003dc:	f094 0f00 	teq	r4, #0
 80003e0:	d10f      	bne.n	8000402 <__aeabi_dmul+0x1c2>
 80003e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003e6:	0040      	lsls	r0, r0, #1
 80003e8:	eb41 0101 	adc.w	r1, r1, r1
 80003ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003f0:	bf08      	it	eq
 80003f2:	3c01      	subeq	r4, #1
 80003f4:	d0f7      	beq.n	80003e6 <__aeabi_dmul+0x1a6>
 80003f6:	ea41 0106 	orr.w	r1, r1, r6
 80003fa:	f095 0f00 	teq	r5, #0
 80003fe:	bf18      	it	ne
 8000400:	4770      	bxne	lr
 8000402:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000406:	0052      	lsls	r2, r2, #1
 8000408:	eb43 0303 	adc.w	r3, r3, r3
 800040c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000410:	bf08      	it	eq
 8000412:	3d01      	subeq	r5, #1
 8000414:	d0f7      	beq.n	8000406 <__aeabi_dmul+0x1c6>
 8000416:	ea43 0306 	orr.w	r3, r3, r6
 800041a:	4770      	bx	lr
 800041c:	ea94 0f0c 	teq	r4, ip
 8000420:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000424:	bf18      	it	ne
 8000426:	ea95 0f0c 	teqne	r5, ip
 800042a:	d00c      	beq.n	8000446 <__aeabi_dmul+0x206>
 800042c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000430:	bf18      	it	ne
 8000432:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000436:	d1d1      	bne.n	80003dc <__aeabi_dmul+0x19c>
 8000438:	ea81 0103 	eor.w	r1, r1, r3
 800043c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000440:	f04f 0000 	mov.w	r0, #0
 8000444:	bd70      	pop	{r4, r5, r6, pc}
 8000446:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800044a:	bf06      	itte	eq
 800044c:	4610      	moveq	r0, r2
 800044e:	4619      	moveq	r1, r3
 8000450:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000454:	d019      	beq.n	800048a <__aeabi_dmul+0x24a>
 8000456:	ea94 0f0c 	teq	r4, ip
 800045a:	d102      	bne.n	8000462 <__aeabi_dmul+0x222>
 800045c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000460:	d113      	bne.n	800048a <__aeabi_dmul+0x24a>
 8000462:	ea95 0f0c 	teq	r5, ip
 8000466:	d105      	bne.n	8000474 <__aeabi_dmul+0x234>
 8000468:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800046c:	bf1c      	itt	ne
 800046e:	4610      	movne	r0, r2
 8000470:	4619      	movne	r1, r3
 8000472:	d10a      	bne.n	800048a <__aeabi_dmul+0x24a>
 8000474:	ea81 0103 	eor.w	r1, r1, r3
 8000478:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800047c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd70      	pop	{r4, r5, r6, pc}
 800048a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800048e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000492:	bd70      	pop	{r4, r5, r6, pc}

08000494 <__aeabi_drsub>:
 8000494:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000498:	e002      	b.n	80004a0 <__adddf3>
 800049a:	bf00      	nop

0800049c <__aeabi_dsub>:
 800049c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004a0 <__adddf3>:
 80004a0:	b530      	push	{r4, r5, lr}
 80004a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004aa:	ea94 0f05 	teq	r4, r5
 80004ae:	bf08      	it	eq
 80004b0:	ea90 0f02 	teqeq	r0, r2
 80004b4:	bf1f      	itttt	ne
 80004b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c6:	f000 80e2 	beq.w	800068e <__adddf3+0x1ee>
 80004ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004d2:	bfb8      	it	lt
 80004d4:	426d      	neglt	r5, r5
 80004d6:	dd0c      	ble.n	80004f2 <__adddf3+0x52>
 80004d8:	442c      	add	r4, r5
 80004da:	ea80 0202 	eor.w	r2, r0, r2
 80004de:	ea81 0303 	eor.w	r3, r1, r3
 80004e2:	ea82 0000 	eor.w	r0, r2, r0
 80004e6:	ea83 0101 	eor.w	r1, r3, r1
 80004ea:	ea80 0202 	eor.w	r2, r0, r2
 80004ee:	ea81 0303 	eor.w	r3, r1, r3
 80004f2:	2d36      	cmp	r5, #54	@ 0x36
 80004f4:	bf88      	it	hi
 80004f6:	bd30      	pophi	{r4, r5, pc}
 80004f8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000500:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000504:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000508:	d002      	beq.n	8000510 <__adddf3+0x70>
 800050a:	4240      	negs	r0, r0
 800050c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000510:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000514:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000518:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800051c:	d002      	beq.n	8000524 <__adddf3+0x84>
 800051e:	4252      	negs	r2, r2
 8000520:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000524:	ea94 0f05 	teq	r4, r5
 8000528:	f000 80a7 	beq.w	800067a <__adddf3+0x1da>
 800052c:	f1a4 0401 	sub.w	r4, r4, #1
 8000530:	f1d5 0e20 	rsbs	lr, r5, #32
 8000534:	db0d      	blt.n	8000552 <__adddf3+0xb2>
 8000536:	fa02 fc0e 	lsl.w	ip, r2, lr
 800053a:	fa22 f205 	lsr.w	r2, r2, r5
 800053e:	1880      	adds	r0, r0, r2
 8000540:	f141 0100 	adc.w	r1, r1, #0
 8000544:	fa03 f20e 	lsl.w	r2, r3, lr
 8000548:	1880      	adds	r0, r0, r2
 800054a:	fa43 f305 	asr.w	r3, r3, r5
 800054e:	4159      	adcs	r1, r3
 8000550:	e00e      	b.n	8000570 <__adddf3+0xd0>
 8000552:	f1a5 0520 	sub.w	r5, r5, #32
 8000556:	f10e 0e20 	add.w	lr, lr, #32
 800055a:	2a01      	cmp	r2, #1
 800055c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000560:	bf28      	it	cs
 8000562:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000566:	fa43 f305 	asr.w	r3, r3, r5
 800056a:	18c0      	adds	r0, r0, r3
 800056c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	d507      	bpl.n	8000586 <__adddf3+0xe6>
 8000576:	f04f 0e00 	mov.w	lr, #0
 800057a:	f1dc 0c00 	rsbs	ip, ip, #0
 800057e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000582:	eb6e 0101 	sbc.w	r1, lr, r1
 8000586:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800058a:	d31b      	bcc.n	80005c4 <__adddf3+0x124>
 800058c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000590:	d30c      	bcc.n	80005ac <__adddf3+0x10c>
 8000592:	0849      	lsrs	r1, r1, #1
 8000594:	ea5f 0030 	movs.w	r0, r0, rrx
 8000598:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800059c:	f104 0401 	add.w	r4, r4, #1
 80005a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005a4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005a8:	f080 809a 	bcs.w	80006e0 <__adddf3+0x240>
 80005ac:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005b0:	bf08      	it	eq
 80005b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005b6:	f150 0000 	adcs.w	r0, r0, #0
 80005ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005be:	ea41 0105 	orr.w	r1, r1, r5
 80005c2:	bd30      	pop	{r4, r5, pc}
 80005c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005c8:	4140      	adcs	r0, r0
 80005ca:	eb41 0101 	adc.w	r1, r1, r1
 80005ce:	3c01      	subs	r4, #1
 80005d0:	bf28      	it	cs
 80005d2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80005d6:	d2e9      	bcs.n	80005ac <__adddf3+0x10c>
 80005d8:	f091 0f00 	teq	r1, #0
 80005dc:	bf04      	itt	eq
 80005de:	4601      	moveq	r1, r0
 80005e0:	2000      	moveq	r0, #0
 80005e2:	fab1 f381 	clz	r3, r1
 80005e6:	bf08      	it	eq
 80005e8:	3320      	addeq	r3, #32
 80005ea:	f1a3 030b 	sub.w	r3, r3, #11
 80005ee:	f1b3 0220 	subs.w	r2, r3, #32
 80005f2:	da0c      	bge.n	800060e <__adddf3+0x16e>
 80005f4:	320c      	adds	r2, #12
 80005f6:	dd08      	ble.n	800060a <__adddf3+0x16a>
 80005f8:	f102 0c14 	add.w	ip, r2, #20
 80005fc:	f1c2 020c 	rsb	r2, r2, #12
 8000600:	fa01 f00c 	lsl.w	r0, r1, ip
 8000604:	fa21 f102 	lsr.w	r1, r1, r2
 8000608:	e00c      	b.n	8000624 <__adddf3+0x184>
 800060a:	f102 0214 	add.w	r2, r2, #20
 800060e:	bfd8      	it	le
 8000610:	f1c2 0c20 	rsble	ip, r2, #32
 8000614:	fa01 f102 	lsl.w	r1, r1, r2
 8000618:	fa20 fc0c 	lsr.w	ip, r0, ip
 800061c:	bfdc      	itt	le
 800061e:	ea41 010c 	orrle.w	r1, r1, ip
 8000622:	4090      	lslle	r0, r2
 8000624:	1ae4      	subs	r4, r4, r3
 8000626:	bfa2      	ittt	ge
 8000628:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800062c:	4329      	orrge	r1, r5
 800062e:	bd30      	popge	{r4, r5, pc}
 8000630:	ea6f 0404 	mvn.w	r4, r4
 8000634:	3c1f      	subs	r4, #31
 8000636:	da1c      	bge.n	8000672 <__adddf3+0x1d2>
 8000638:	340c      	adds	r4, #12
 800063a:	dc0e      	bgt.n	800065a <__adddf3+0x1ba>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0220 	rsb	r2, r4, #32
 8000644:	fa20 f004 	lsr.w	r0, r0, r4
 8000648:	fa01 f302 	lsl.w	r3, r1, r2
 800064c:	ea40 0003 	orr.w	r0, r0, r3
 8000650:	fa21 f304 	lsr.w	r3, r1, r4
 8000654:	ea45 0103 	orr.w	r1, r5, r3
 8000658:	bd30      	pop	{r4, r5, pc}
 800065a:	f1c4 040c 	rsb	r4, r4, #12
 800065e:	f1c4 0220 	rsb	r2, r4, #32
 8000662:	fa20 f002 	lsr.w	r0, r0, r2
 8000666:	fa01 f304 	lsl.w	r3, r1, r4
 800066a:	ea40 0003 	orr.w	r0, r0, r3
 800066e:	4629      	mov	r1, r5
 8000670:	bd30      	pop	{r4, r5, pc}
 8000672:	fa21 f004 	lsr.w	r0, r1, r4
 8000676:	4629      	mov	r1, r5
 8000678:	bd30      	pop	{r4, r5, pc}
 800067a:	f094 0f00 	teq	r4, #0
 800067e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000682:	bf06      	itte	eq
 8000684:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000688:	3401      	addeq	r4, #1
 800068a:	3d01      	subne	r5, #1
 800068c:	e74e      	b.n	800052c <__adddf3+0x8c>
 800068e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000692:	bf18      	it	ne
 8000694:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000698:	d029      	beq.n	80006ee <__adddf3+0x24e>
 800069a:	ea94 0f05 	teq	r4, r5
 800069e:	bf08      	it	eq
 80006a0:	ea90 0f02 	teqeq	r0, r2
 80006a4:	d005      	beq.n	80006b2 <__adddf3+0x212>
 80006a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006aa:	bf04      	itt	eq
 80006ac:	4619      	moveq	r1, r3
 80006ae:	4610      	moveq	r0, r2
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	ea91 0f03 	teq	r1, r3
 80006b6:	bf1e      	ittt	ne
 80006b8:	2100      	movne	r1, #0
 80006ba:	2000      	movne	r0, #0
 80006bc:	bd30      	popne	{r4, r5, pc}
 80006be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006c2:	d105      	bne.n	80006d0 <__adddf3+0x230>
 80006c4:	0040      	lsls	r0, r0, #1
 80006c6:	4149      	adcs	r1, r1
 80006c8:	bf28      	it	cs
 80006ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006ce:	bd30      	pop	{r4, r5, pc}
 80006d0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80006d4:	bf3c      	itt	cc
 80006d6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006da:	bd30      	popcc	{r4, r5, pc}
 80006dc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006e0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006e4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	bd30      	pop	{r4, r5, pc}
 80006ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006f2:	bf1a      	itte	ne
 80006f4:	4619      	movne	r1, r3
 80006f6:	4610      	movne	r0, r2
 80006f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006fc:	bf1c      	itt	ne
 80006fe:	460b      	movne	r3, r1
 8000700:	4602      	movne	r2, r0
 8000702:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000706:	bf06      	itte	eq
 8000708:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800070c:	ea91 0f03 	teqeq	r1, r3
 8000710:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000714:	bd30      	pop	{r4, r5, pc}
 8000716:	bf00      	nop

08000718 <__aeabi_ui2d>:
 8000718:	f090 0f00 	teq	r0, #0
 800071c:	bf04      	itt	eq
 800071e:	2100      	moveq	r1, #0
 8000720:	4770      	bxeq	lr
 8000722:	b530      	push	{r4, r5, lr}
 8000724:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000728:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800072c:	f04f 0500 	mov.w	r5, #0
 8000730:	f04f 0100 	mov.w	r1, #0
 8000734:	e750      	b.n	80005d8 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_i2d>:
 8000738:	f090 0f00 	teq	r0, #0
 800073c:	bf04      	itt	eq
 800073e:	2100      	moveq	r1, #0
 8000740:	4770      	bxeq	lr
 8000742:	b530      	push	{r4, r5, lr}
 8000744:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000748:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800074c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000750:	bf48      	it	mi
 8000752:	4240      	negmi	r0, r0
 8000754:	f04f 0100 	mov.w	r1, #0
 8000758:	e73e      	b.n	80005d8 <__adddf3+0x138>
 800075a:	bf00      	nop

0800075c <__aeabi_f2d>:
 800075c:	0042      	lsls	r2, r0, #1
 800075e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000762:	ea4f 0131 	mov.w	r1, r1, rrx
 8000766:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800076a:	bf1f      	itttt	ne
 800076c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000770:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000774:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000778:	4770      	bxne	lr
 800077a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800077e:	bf08      	it	eq
 8000780:	4770      	bxeq	lr
 8000782:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000786:	bf04      	itt	eq
 8000788:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800078c:	4770      	bxeq	lr
 800078e:	b530      	push	{r4, r5, lr}
 8000790:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000794:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000798:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	e71c      	b.n	80005d8 <__adddf3+0x138>
 800079e:	bf00      	nop

080007a0 <__aeabi_ul2d>:
 80007a0:	ea50 0201 	orrs.w	r2, r0, r1
 80007a4:	bf08      	it	eq
 80007a6:	4770      	bxeq	lr
 80007a8:	b530      	push	{r4, r5, lr}
 80007aa:	f04f 0500 	mov.w	r5, #0
 80007ae:	e00a      	b.n	80007c6 <__aeabi_l2d+0x16>

080007b0 <__aeabi_l2d>:
 80007b0:	ea50 0201 	orrs.w	r2, r0, r1
 80007b4:	bf08      	it	eq
 80007b6:	4770      	bxeq	lr
 80007b8:	b530      	push	{r4, r5, lr}
 80007ba:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007be:	d502      	bpl.n	80007c6 <__aeabi_l2d+0x16>
 80007c0:	4240      	negs	r0, r0
 80007c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007c6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007ca:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007d2:	f43f aed8 	beq.w	8000586 <__adddf3+0xe6>
 80007d6:	f04f 0203 	mov.w	r2, #3
 80007da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007de:	bf18      	it	ne
 80007e0:	3203      	addne	r2, #3
 80007e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007e6:	bf18      	it	ne
 80007e8:	3203      	addne	r2, #3
 80007ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007ee:	f1c2 0320 	rsb	r3, r2, #32
 80007f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80007f6:	fa20 f002 	lsr.w	r0, r0, r2
 80007fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80007fe:	ea40 000e 	orr.w	r0, r0, lr
 8000802:	fa21 f102 	lsr.w	r1, r1, r2
 8000806:	4414      	add	r4, r2
 8000808:	e6bd      	b.n	8000586 <__adddf3+0xe6>
 800080a:	bf00      	nop

0800080c <__aeabi_d2f>:
 800080c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000810:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000814:	bf24      	itt	cs
 8000816:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800081a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800081e:	d90d      	bls.n	800083c <__aeabi_d2f+0x30>
 8000820:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000824:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000828:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800082c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000830:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000834:	bf08      	it	eq
 8000836:	f020 0001 	biceq.w	r0, r0, #1
 800083a:	4770      	bx	lr
 800083c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000840:	d121      	bne.n	8000886 <__aeabi_d2f+0x7a>
 8000842:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000846:	bfbc      	itt	lt
 8000848:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800084c:	4770      	bxlt	lr
 800084e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000852:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000856:	f1c2 0218 	rsb	r2, r2, #24
 800085a:	f1c2 0c20 	rsb	ip, r2, #32
 800085e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000862:	fa20 f002 	lsr.w	r0, r0, r2
 8000866:	bf18      	it	ne
 8000868:	f040 0001 	orrne.w	r0, r0, #1
 800086c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000870:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000874:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000878:	ea40 000c 	orr.w	r0, r0, ip
 800087c:	fa23 f302 	lsr.w	r3, r3, r2
 8000880:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000884:	e7cc      	b.n	8000820 <__aeabi_d2f+0x14>
 8000886:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800088a:	d107      	bne.n	800089c <__aeabi_d2f+0x90>
 800088c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000890:	bf1e      	ittt	ne
 8000892:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000896:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800089a:	4770      	bxne	lr
 800089c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80008a0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80008a4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop

080008ac <__aeabi_uldivmod>:
 80008ac:	b953      	cbnz	r3, 80008c4 <__aeabi_uldivmod+0x18>
 80008ae:	b94a      	cbnz	r2, 80008c4 <__aeabi_uldivmod+0x18>
 80008b0:	2900      	cmp	r1, #0
 80008b2:	bf08      	it	eq
 80008b4:	2800      	cmpeq	r0, #0
 80008b6:	bf1c      	itt	ne
 80008b8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80008bc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80008c0:	f000 b80c 	b.w	80008dc <__aeabi_idiv0>
 80008c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008cc:	f003 fde8 	bl	80044a0 <__udivmoddi4>
 80008d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008d8:	b004      	add	sp, #16
 80008da:	4770      	bx	lr

080008dc <__aeabi_idiv0>:
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop

080008e0 <__do_global_dtors_aux>:
 80008e0:	b510      	push	{r4, lr}
 80008e2:	4c05      	ldr	r4, [pc, #20]	@ (80008f8 <__do_global_dtors_aux+0x18>)
 80008e4:	7823      	ldrb	r3, [r4, #0]
 80008e6:	b933      	cbnz	r3, 80008f6 <__do_global_dtors_aux+0x16>
 80008e8:	4b04      	ldr	r3, [pc, #16]	@ (80008fc <__do_global_dtors_aux+0x1c>)
 80008ea:	b113      	cbz	r3, 80008f2 <__do_global_dtors_aux+0x12>
 80008ec:	4804      	ldr	r0, [pc, #16]	@ (8000900 <__do_global_dtors_aux+0x20>)
 80008ee:	f3af 8000 	nop.w
 80008f2:	2301      	movs	r3, #1
 80008f4:	7023      	strb	r3, [r4, #0]
 80008f6:	bd10      	pop	{r4, pc}
 80008f8:	20000060 	.word	0x20000060
 80008fc:	00000000 	.word	0x00000000
 8000900:	08004798 	.word	0x08004798

08000904 <frame_dummy>:
 8000904:	b508      	push	{r3, lr}
 8000906:	4b03      	ldr	r3, [pc, #12]	@ (8000914 <frame_dummy+0x10>)
 8000908:	b11b      	cbz	r3, 8000912 <frame_dummy+0xe>
 800090a:	4903      	ldr	r1, [pc, #12]	@ (8000918 <frame_dummy+0x14>)
 800090c:	4803      	ldr	r0, [pc, #12]	@ (800091c <frame_dummy+0x18>)
 800090e:	f3af 8000 	nop.w
 8000912:	bd08      	pop	{r3, pc}
 8000914:	00000000 	.word	0x00000000
 8000918:	20000064 	.word	0x20000064
 800091c:	08004798 	.word	0x08004798

08000920 <PID_Init>:
#include "PID.h"

void PID_Init(PID *pid, float kp, float ki, float kd, float dt) {
    pid->kp = kp;
 8000920:	ed80 0a00 	vstr	s0, [r0]
    pid->ki = ki;
 8000924:	edc0 0a01 	vstr	s1, [r0, #4]
    pid->kd = kd;
 8000928:	ed80 1a02 	vstr	s2, [r0, #8]
    pid->dt = dt;
 800092c:	edc0 1a03 	vstr	s3, [r0, #12]
    pid->integral = 0.0f;
 8000930:	2300      	movs	r3, #0
 8000932:	6103      	str	r3, [r0, #16]
    pid->previous_error = 0.0f;
 8000934:	6143      	str	r3, [r0, #20]
    pid->anti_windup = 100.0f; // Initialize anti-windup term
 8000936:	4b01      	ldr	r3, [pc, #4]	@ (800093c <PID_Init+0x1c>)
 8000938:	6183      	str	r3, [r0, #24]
}
 800093a:	4770      	bx	lr
 800093c:	42c80000 	.word	0x42c80000

08000940 <PID_Compute>:

float PID_Compute(PID *pid, float setpoint, float measured_value) {
    // Calculate error
    float error = setpoint - measured_value;
 8000940:	ee70 0a60 	vsub.f32	s1, s0, s1

    // Proportional term
    float proportional = pid->kp * error;
 8000944:	edd0 6a00 	vldr	s13, [r0]
 8000948:	ee66 6aa0 	vmul.f32	s13, s13, s1

    // Integral term
    pid->integral += pid->ki * error * pid->dt;
 800094c:	ed90 7a04 	vldr	s14, [r0, #16]
 8000950:	edd0 7a01 	vldr	s15, [r0, #4]
 8000954:	ee67 7aa0 	vmul.f32	s15, s15, s1
 8000958:	ed90 6a03 	vldr	s12, [r0, #12]
 800095c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8000960:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000964:	edc0 7a04 	vstr	s15, [r0, #16]

    // Anti-windup
    if (pid->integral > pid->anti_windup) {
 8000968:	ed90 7a06 	vldr	s14, [r0, #24]
 800096c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000974:	dd14      	ble.n	80009a0 <PID_Compute+0x60>
        pid->integral = pid->anti_windup;
 8000976:	ed80 7a04 	vstr	s14, [r0, #16]
    } else if (pid->integral < -pid->anti_windup) {
        pid->integral = -pid->anti_windup;
    }

    // Derivative term
    float derivative = pid->kd * (error - pid->previous_error) / pid->dt;
 800097a:	edd0 7a02 	vldr	s15, [r0, #8]
 800097e:	ed90 7a05 	vldr	s14, [r0, #20]
 8000982:	ee30 7ac7 	vsub.f32	s14, s1, s14
 8000986:	ee67 7a87 	vmul.f32	s15, s15, s14
 800098a:	ee87 0a86 	vdiv.f32	s0, s15, s12

    // Update previous error
    pid->previous_error = error;
 800098e:	edc0 0a05 	vstr	s1, [r0, #20]

    // Compute output
    return proportional + pid->integral + derivative;
 8000992:	edd0 7a04 	vldr	s15, [r0, #16]
 8000996:	ee77 7aa6 	vadd.f32	s15, s15, s13
}
 800099a:	ee37 0a80 	vadd.f32	s0, s15, s0
 800099e:	4770      	bx	lr
    } else if (pid->integral < -pid->anti_windup) {
 80009a0:	eeb1 7a47 	vneg.f32	s14, s14
 80009a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80009a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009ac:	d5e5      	bpl.n	800097a <PID_Compute+0x3a>
        pid->integral = -pid->anti_windup;
 80009ae:	ed80 7a04 	vstr	s14, [r0, #16]
 80009b2:	e7e2      	b.n	800097a <PID_Compute+0x3a>

080009b4 <Accelerometer_Init>:
 * and ensures it is ready for operation.
 *
 * @note This function should be called before attempting to read data from the accelerometer.
 */
void Accelerometer_Init(I2C_HandleTypeDef *hi2c)
{
 80009b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80009b8:	b086      	sub	sp, #24
 80009ba:	4604      	mov	r4, r0
    uint8_t data = 0;
 80009bc:	2300      	movs	r3, #0
 80009be:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8_t check;
    // Read WHO_AM_I register (0x75) to check if the device is connected
    HAL_I2C_Mem_Read(hi2c, MPU6050_ADDR, 0x75, 1, &check, 1, 1000);
 80009c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009c6:	9302      	str	r3, [sp, #8]
 80009c8:	2301      	movs	r3, #1
 80009ca:	9301      	str	r3, [sp, #4]
 80009cc:	f10d 0216 	add.w	r2, sp, #22
 80009d0:	9200      	str	r2, [sp, #0]
 80009d2:	2275      	movs	r2, #117	@ 0x75
 80009d4:	21d0      	movs	r1, #208	@ 0xd0
 80009d6:	f001 f907 	bl	8001be8 <HAL_I2C_Mem_Read>
    if (check != 0x68) {
 80009da:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80009de:	2b68      	cmp	r3, #104	@ 0x68
 80009e0:	d002      	beq.n	80009e8 <Accelerometer_Init+0x34>
    data = 0x00; // ±2g full scale
    HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, 0x1C, 1, &data, 1, 1000);
    // set Gyroscopic configuration in GYRO_CONFIG Register (0x1B)
    data = 0x00; // ±250°/s full scale
    HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, 0x1B, 1, &data, 1, 1000);
}
 80009e2:	b006      	add	sp, #24
 80009e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, 0x6B, 1, &data, 1, 1000);
 80009e8:	f44f 777a 	mov.w	r7, #1000	@ 0x3e8
 80009ec:	9702      	str	r7, [sp, #8]
 80009ee:	2501      	movs	r5, #1
 80009f0:	9501      	str	r5, [sp, #4]
 80009f2:	f10d 0617 	add.w	r6, sp, #23
 80009f6:	9600      	str	r6, [sp, #0]
 80009f8:	462b      	mov	r3, r5
 80009fa:	226b      	movs	r2, #107	@ 0x6b
 80009fc:	21d0      	movs	r1, #208	@ 0xd0
 80009fe:	4620      	mov	r0, r4
 8000a00:	f001 f81f 	bl	8001a42 <HAL_I2C_Mem_Write>
    data = 0x07; // 1000 Hz / (1 + 7) = 125 Hz
 8000a04:	2307      	movs	r3, #7
 8000a06:	f88d 3017 	strb.w	r3, [sp, #23]
    HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, 0x19, 1, &data, 1, 1000);
 8000a0a:	9702      	str	r7, [sp, #8]
 8000a0c:	9501      	str	r5, [sp, #4]
 8000a0e:	9600      	str	r6, [sp, #0]
 8000a10:	462b      	mov	r3, r5
 8000a12:	2219      	movs	r2, #25
 8000a14:	21d0      	movs	r1, #208	@ 0xd0
 8000a16:	4620      	mov	r0, r4
 8000a18:	f001 f813 	bl	8001a42 <HAL_I2C_Mem_Write>
    data = 0x00; // ±2g full scale
 8000a1c:	f04f 0800 	mov.w	r8, #0
 8000a20:	f88d 8017 	strb.w	r8, [sp, #23]
    HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, 0x1C, 1, &data, 1, 1000);
 8000a24:	9702      	str	r7, [sp, #8]
 8000a26:	9501      	str	r5, [sp, #4]
 8000a28:	9600      	str	r6, [sp, #0]
 8000a2a:	462b      	mov	r3, r5
 8000a2c:	221c      	movs	r2, #28
 8000a2e:	21d0      	movs	r1, #208	@ 0xd0
 8000a30:	4620      	mov	r0, r4
 8000a32:	f001 f806 	bl	8001a42 <HAL_I2C_Mem_Write>
    data = 0x00; // ±250°/s full scale
 8000a36:	f88d 8017 	strb.w	r8, [sp, #23]
    HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, 0x1B, 1, &data, 1, 1000);
 8000a3a:	9702      	str	r7, [sp, #8]
 8000a3c:	9501      	str	r5, [sp, #4]
 8000a3e:	9600      	str	r6, [sp, #0]
 8000a40:	462b      	mov	r3, r5
 8000a42:	221b      	movs	r2, #27
 8000a44:	21d0      	movs	r1, #208	@ 0xd0
 8000a46:	4620      	mov	r0, r4
 8000a48:	f000 fffb 	bl	8001a42 <HAL_I2C_Mem_Write>
 8000a4c:	e7c9      	b.n	80009e2 <Accelerometer_Init+0x2e>
	...

08000a50 <Accelerometer_Read>:
 * acceleration information.
 *
 * @return int Returns 0 on success, or a negative error code on failure.
 */
void Accelerometer_Read(I2C_HandleTypeDef *hi2c, AccelData *accel_data, GyroData *gyro_data)
{    
 8000a50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000a54:	b087      	sub	sp, #28
 8000a56:	4606      	mov	r6, r0
 8000a58:	460d      	mov	r5, r1
 8000a5a:	4614      	mov	r4, r2
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from ACCEL_XOUT_H (0x3B) Register
    HAL_I2C_Mem_Read(hi2c, MPU6050_ADDR, 0x3B, 1, Rec_Data, 6, 1000);
 8000a5c:	f44f 797a 	mov.w	r9, #1000	@ 0x3e8
 8000a60:	f8cd 9008 	str.w	r9, [sp, #8]
 8000a64:	f04f 0806 	mov.w	r8, #6
 8000a68:	f8cd 8004 	str.w	r8, [sp, #4]
 8000a6c:	af04      	add	r7, sp, #16
 8000a6e:	9700      	str	r7, [sp, #0]
 8000a70:	2301      	movs	r3, #1
 8000a72:	223b      	movs	r2, #59	@ 0x3b
 8000a74:	21d0      	movs	r1, #208	@ 0xd0
 8000a76:	f001 f8b7 	bl	8001be8 <HAL_I2C_Mem_Read>
    // Convert the data to 16-bit signed integers
    accel_data->x = (int16_t)((Rec_Data[0] << 8) | Rec_Data[1]);
 8000a7a:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8000a7e:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8000a82:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000a86:	b21b      	sxth	r3, r3
 8000a88:	ee07 3a90 	vmov	s15, r3
 8000a8c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000a90:	edc5 6a00 	vstr	s13, [r5]
    accel_data->y = (int16_t)((Rec_Data[2] << 8) | Rec_Data[3]);
 8000a94:	f89d 2012 	ldrb.w	r2, [sp, #18]
 8000a98:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8000a9c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000aa0:	b21b      	sxth	r3, r3
 8000aa2:	ee07 3a90 	vmov	s15, r3
 8000aa6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000aaa:	ed85 7a01 	vstr	s14, [r5, #4]
    accel_data->z = (int16_t)((Rec_Data[4] << 8) | Rec_Data[5]);
 8000aae:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8000ab2:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8000ab6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000aba:	b21b      	sxth	r3, r3
 8000abc:	ee07 3a90 	vmov	s15, r3
 8000ac0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ac4:	edc5 7a02 	vstr	s15, [r5, #8]
    // Convert raw value to g-force
    accel_data->x = (float)accel_data->x / 16384.0f; // For ±2g full scale
 8000ac8:	ed9f 6a28 	vldr	s12, [pc, #160]	@ 8000b6c <Accelerometer_Read+0x11c>
 8000acc:	ee66 6a86 	vmul.f32	s13, s13, s12
 8000ad0:	edc5 6a00 	vstr	s13, [r5]
    accel_data->y = (float)accel_data->y / 16384.0f; 
 8000ad4:	ee27 7a06 	vmul.f32	s14, s14, s12
 8000ad8:	ed85 7a01 	vstr	s14, [r5, #4]
    accel_data->z = (float)accel_data->z / 16384.0f;
 8000adc:	ee67 7a86 	vmul.f32	s15, s15, s12
 8000ae0:	edc5 7a02 	vstr	s15, [r5, #8]

    // Read 6 BYTES of data starting from GYRO_XOUT_H (0x43) Register
    HAL_I2C_Mem_Read(hi2c, MPU6050_ADDR, 0x43, 1, Rec_Data, 6, 1000);
 8000ae4:	f8cd 9008 	str.w	r9, [sp, #8]
 8000ae8:	f8cd 8004 	str.w	r8, [sp, #4]
 8000aec:	9700      	str	r7, [sp, #0]
 8000aee:	2301      	movs	r3, #1
 8000af0:	2243      	movs	r2, #67	@ 0x43
 8000af2:	21d0      	movs	r1, #208	@ 0xd0
 8000af4:	4630      	mov	r0, r6
 8000af6:	f001 f877 	bl	8001be8 <HAL_I2C_Mem_Read>
    // Convert the data to 16-bit signed integers
    gyro_data->x = (int16_t)((Rec_Data[0] << 8) | Rec_Data[1]);
 8000afa:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8000afe:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8000b02:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000b06:	b21b      	sxth	r3, r3
 8000b08:	ee07 3a90 	vmov	s15, r3
 8000b0c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000b10:	edc4 6a00 	vstr	s13, [r4]
    gyro_data->y = (int16_t)((Rec_Data[2] << 8) | Rec_Data[3]);
 8000b14:	f89d 2012 	ldrb.w	r2, [sp, #18]
 8000b18:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8000b1c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000b20:	b21b      	sxth	r3, r3
 8000b22:	ee07 3a90 	vmov	s15, r3
 8000b26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b2a:	ed84 7a01 	vstr	s14, [r4, #4]
    gyro_data->z = (int16_t)((Rec_Data[4] << 8) | Rec_Data[5]);
 8000b2e:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8000b32:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8000b36:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000b3a:	b21b      	sxth	r3, r3
 8000b3c:	ee07 3a90 	vmov	s15, r3
 8000b40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b44:	edc4 7a02 	vstr	s15, [r4, #8]
    // Convert raw value to degrees per second
    gyro_data->x = (float)gyro_data->x / 131.0f; // For ±250°/s full scale
 8000b48:	ed9f 6a09 	vldr	s12, [pc, #36]	@ 8000b70 <Accelerometer_Read+0x120>
 8000b4c:	eec6 5a86 	vdiv.f32	s11, s13, s12
 8000b50:	edc4 5a00 	vstr	s11, [r4]
    gyro_data->y = (float)gyro_data->y / 131.0f;
 8000b54:	eec7 6a06 	vdiv.f32	s13, s14, s12
 8000b58:	edc4 6a01 	vstr	s13, [r4, #4]
    gyro_data->z = (float)gyro_data->z / 131.0f; 
 8000b5c:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8000b60:	ed84 7a02 	vstr	s14, [r4, #8]
}
 8000b64:	b007      	add	sp, #28
 8000b66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000b6a:	bf00      	nop
 8000b6c:	38800000 	.word	0x38800000
 8000b70:	43030000 	.word	0x43030000
 8000b74:	00000000 	.word	0x00000000

08000b78 <angles_from_accel>:
 *
 * @param accel_data Structure containing accelerometer data (x, y, z).
 * @param pitch Pointer to store the calculated pitch angle (in degrees).
 * @param roll Pointer to store the calculated roll angle (in degrees).
 */
void angles_from_accel(AccelData accel_data, float *pitch, float *roll) {
 8000b78:	b530      	push	{r4, r5, lr}
 8000b7a:	ed2d 8b04 	vpush	{d8-d9}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	eeb0 9a40 	vmov.f32	s18, s0
 8000b84:	eeb0 8a60 	vmov.f32	s16, s1
 8000b88:	4605      	mov	r5, r0
 8000b8a:	460c      	mov	r4, r1
 8000b8c:	ed8d 0a01 	vstr	s0, [sp, #4]
 8000b90:	edcd 0a02 	vstr	s1, [sp, #8]
 8000b94:	ed8d 1a03 	vstr	s2, [sp, #12]
    *pitch = atan2f(accel_data.y, sqrtf(accel_data.x * accel_data.x + accel_data.z * accel_data.z)) * (180.0f / M_PI);
 8000b98:	ee20 0a00 	vmul.f32	s0, s0, s0
 8000b9c:	ee61 8a01 	vmul.f32	s17, s2, s2
 8000ba0:	ee30 0a28 	vadd.f32	s0, s0, s17
 8000ba4:	f003 fad6 	bl	8004154 <sqrtf>
 8000ba8:	eef0 0a40 	vmov.f32	s1, s0
 8000bac:	eeb0 0a48 	vmov.f32	s0, s16
 8000bb0:	f003 face 	bl	8004150 <atan2f>
 8000bb4:	ee10 0a10 	vmov	r0, s0
 8000bb8:	f7ff fdd0 	bl	800075c <__aeabi_f2d>
 8000bbc:	a312      	add	r3, pc, #72	@ (adr r3, 8000c08 <angles_from_accel+0x90>)
 8000bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bc2:	f7ff fb3d 	bl	8000240 <__aeabi_dmul>
 8000bc6:	f7ff fe21 	bl	800080c <__aeabi_d2f>
 8000bca:	6028      	str	r0, [r5, #0]
    *roll = atan2f(-accel_data.x, sqrtf(accel_data.y * accel_data.y + accel_data.z * accel_data.z)) * (180.0f / M_PI);
 8000bcc:	ee28 8a08 	vmul.f32	s16, s16, s16
 8000bd0:	ee38 0a88 	vadd.f32	s0, s17, s16
 8000bd4:	f003 fabe 	bl	8004154 <sqrtf>
 8000bd8:	eef0 0a40 	vmov.f32	s1, s0
 8000bdc:	eeb1 0a49 	vneg.f32	s0, s18
 8000be0:	f003 fab6 	bl	8004150 <atan2f>
 8000be4:	ee10 0a10 	vmov	r0, s0
 8000be8:	f7ff fdb8 	bl	800075c <__aeabi_f2d>
 8000bec:	a306      	add	r3, pc, #24	@ (adr r3, 8000c08 <angles_from_accel+0x90>)
 8000bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bf2:	f7ff fb25 	bl	8000240 <__aeabi_dmul>
 8000bf6:	f7ff fe09 	bl	800080c <__aeabi_d2f>
 8000bfa:	6020      	str	r0, [r4, #0]
}
 8000bfc:	b005      	add	sp, #20
 8000bfe:	ecbd 8b04 	vpop	{d8-d9}
 8000c02:	bd30      	pop	{r4, r5, pc}
 8000c04:	f3af 8000 	nop.w
 8000c08:	1a63c1f8 	.word	0x1a63c1f8
 8000c0c:	404ca5dc 	.word	0x404ca5dc

08000c10 <angles_rate_from_gyro>:
 *
 * @param gyro_data Structure containing gyroscope data (x, y, z).
 * @param pitch_rate Pointer to store the calculated pitch rate (in degrees per second).
 * @param roll_rate Pointer to store the calculated roll rate (in degrees per second).
 */
void angles_rate_from_gyro(GyroData gyro_data, float *pitch_rate, float *roll_rate) {
 8000c10:	b084      	sub	sp, #16
 8000c12:	ed8d 0a01 	vstr	s0, [sp, #4]
 8000c16:	edcd 0a02 	vstr	s1, [sp, #8]
 8000c1a:	ed8d 1a03 	vstr	s2, [sp, #12]
    *pitch_rate = gyro_data.y; // Gyro Y-axis for pitch rate
 8000c1e:	edc0 0a00 	vstr	s1, [r0]
    *roll_rate = gyro_data.x;  // Gyro X-axis for roll rate
 8000c22:	ed81 0a00 	vstr	s0, [r1]
}
 8000c26:	b004      	add	sp, #16
 8000c28:	4770      	bx	lr

08000c2a <yaw_from_gyro>:

void yaw_from_gyro(GyroData gyro_data, float *yaw, float dt) {
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	ed8d 0a01 	vstr	s0, [sp, #4]
 8000c30:	edcd 0a02 	vstr	s1, [sp, #8]
 8000c34:	ed8d 1a03 	vstr	s2, [sp, #12]
    // Integrate the gyroscope Z-axis data to get yaw angle
    *yaw += gyro_data.z * dt; // Gyro Z-axis for yaw rate
 8000c38:	edd0 7a00 	vldr	s15, [r0]
 8000c3c:	ee21 1a21 	vmul.f32	s2, s2, s3
 8000c40:	ee77 7a81 	vadd.f32	s15, s15, s2
 8000c44:	edc0 7a00 	vstr	s15, [r0]
}
 8000c48:	b004      	add	sp, #16
 8000c4a:	4770      	bx	lr

08000c4c <Kalman_Init>:
 * @param init_covariance Initial estimate of the error covariance.
 * @param process_noise Process noise covariance (Q).
 * @param measurement_noise Measurement noise covariance (R).
 */
void Kalman_Init(Kalman_t *kalman_x, Kalman_t *kalman_y)
{
 8000c4c:	b500      	push	{lr}
    // Initialize Kalman filter parameters for X, Y, and Z axes
    kalman_x->angle = 0.0f;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	6003      	str	r3, [r0, #0]
    kalman_x->bias = 0.0f;
 8000c52:	6043      	str	r3, [r0, #4]
    kalman_x->rate = 0.0f;
 8000c54:	6083      	str	r3, [r0, #8]
    kalman_x->P[0][0] = 1.0f; // P[0][0]
 8000c56:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000c5a:	60c2      	str	r2, [r0, #12]
    kalman_x->P[0][1] = 0.0f; // P[0][1]
 8000c5c:	6103      	str	r3, [r0, #16]
    kalman_x->P[1][0] = 0.0f; // P[1][0]
 8000c5e:	6143      	str	r3, [r0, #20]
    kalman_x->P[1][1] = 1.0f; // P[1][1]
 8000c60:	6182      	str	r2, [r0, #24]
    kalman_x->Q_angle = 0.001f; // Process noise covariance for angle
 8000c62:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8000c98 <Kalman_Init+0x4c>
 8000c66:	edc0 7a07 	vstr	s15, [r0, #28]
    kalman_x->Q_bias = 0.003f; // Process noise covariance for bias
 8000c6a:	f8df e030 	ldr.w	lr, [pc, #48]	@ 8000c9c <Kalman_Init+0x50>
 8000c6e:	f8c0 e020 	str.w	lr, [r0, #32]
    kalman_x->R_measure = 0.03f; // Measurement noise covariance
 8000c72:	f8df c02c 	ldr.w	ip, [pc, #44]	@ 8000ca0 <Kalman_Init+0x54>
 8000c76:	f8c0 c024 	str.w	ip, [r0, #36]	@ 0x24

    kalman_y->angle = 0.0f;
 8000c7a:	600b      	str	r3, [r1, #0]
    kalman_y->bias = 0.0f;
 8000c7c:	604b      	str	r3, [r1, #4]
    kalman_y->rate = 0.0f;
 8000c7e:	608b      	str	r3, [r1, #8]
    kalman_y->P[0][0] = 1.0f;
 8000c80:	60ca      	str	r2, [r1, #12]
    kalman_y->P[0][1] = 0.0f;
 8000c82:	610b      	str	r3, [r1, #16]
    kalman_y->P[1][0] = 0.0f;
 8000c84:	614b      	str	r3, [r1, #20]
    kalman_y->P[1][1] = 1.0f;
 8000c86:	618a      	str	r2, [r1, #24]
    kalman_y->Q_angle = 0.001f;
 8000c88:	edc1 7a07 	vstr	s15, [r1, #28]
    kalman_y->Q_bias = 0.003f;
 8000c8c:	f8c1 e020 	str.w	lr, [r1, #32]
    kalman_y->R_measure = 0.03f;
 8000c90:	f8c1 c024 	str.w	ip, [r1, #36]	@ 0x24
}
 8000c94:	f85d fb04 	ldr.w	pc, [sp], #4
 8000c98:	3a83126f 	.word	0x3a83126f
 8000c9c:	3b449ba6 	.word	0x3b449ba6
 8000ca0:	3cf5c28f 	.word	0x3cf5c28f

08000ca4 <Kalman_GetAngle>:
 * @param gyro_rate Angular rate measured from the gyroscope (in degrees per second).
 * @param dt Time interval since the last update (in seconds).
 */
void Kalman_GetAngle(Kalman_t *kalman, float acc_angle, float gyro_rate, float dt) {
    // 1. Prediction
    kalman->rate = gyro_rate - kalman->bias;
 8000ca4:	edd0 4a01 	vldr	s9, [r0, #4]
 8000ca8:	ee70 0ae4 	vsub.f32	s1, s1, s9
 8000cac:	edc0 0a02 	vstr	s1, [r0, #8]
    kalman->angle += dt * kalman->rate;
 8000cb0:	ed90 5a00 	vldr	s10, [r0]
 8000cb4:	ee60 0a81 	vmul.f32	s1, s1, s2
 8000cb8:	ee35 5a20 	vadd.f32	s10, s10, s1
 8000cbc:	ed80 5a00 	vstr	s10, [r0]

    // state covariance update
    kalman->P[0][0] += dt * (dt*kalman->P[1][1] - kalman->P[0][1] - kalman->P[1][0] + kalman->Q_angle);
 8000cc0:	edd0 7a03 	vldr	s15, [r0, #12]
 8000cc4:	ed90 6a06 	vldr	s12, [r0, #24]
 8000cc8:	ee26 4a01 	vmul.f32	s8, s12, s2
 8000ccc:	ed90 7a04 	vldr	s14, [r0, #16]
 8000cd0:	ee74 5a47 	vsub.f32	s11, s8, s14
 8000cd4:	edd0 6a05 	vldr	s13, [r0, #20]
 8000cd8:	ee75 5ae6 	vsub.f32	s11, s11, s13
 8000cdc:	edd0 3a07 	vldr	s7, [r0, #28]
 8000ce0:	ee75 5aa3 	vadd.f32	s11, s11, s7
 8000ce4:	ee65 5a81 	vmul.f32	s11, s11, s2
 8000ce8:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8000cec:	edc0 7a03 	vstr	s15, [r0, #12]
    kalman->P[0][1] -= dt * kalman->P[1][1];
 8000cf0:	ee37 7a44 	vsub.f32	s14, s14, s8
 8000cf4:	ed80 7a04 	vstr	s14, [r0, #16]
    kalman->P[1][0] -= dt * kalman->P[1][1];
 8000cf8:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8000cfc:	edc0 6a05 	vstr	s13, [r0, #20]
    kalman->P[1][1] += kalman->Q_bias * dt;
 8000d00:	edd0 5a08 	vldr	s11, [r0, #32]
 8000d04:	ee65 5a81 	vmul.f32	s11, s11, s2
 8000d08:	ee36 6a25 	vadd.f32	s12, s12, s11
 8000d0c:	ed80 6a06 	vstr	s12, [r0, #24]

    // 2. update
    float y = acc_angle - kalman->angle; // innovation
 8000d10:	ee30 0a45 	vsub.f32	s0, s0, s10
    float S = kalman->P[0][0] + kalman->R_measure; // incertitude innovation
 8000d14:	ed90 4a09 	vldr	s8, [r0, #36]	@ 0x24
 8000d18:	ee37 4a84 	vadd.f32	s8, s15, s8
    float K0 = kalman->P[0][0] / S;
 8000d1c:	eec7 5a84 	vdiv.f32	s11, s15, s8
    float K1 = kalman->P[1][0] / S;
 8000d20:	eec6 3a84 	vdiv.f32	s7, s13, s8

    // state update
    kalman->angle += K0 * y;
 8000d24:	ee20 4a25 	vmul.f32	s8, s0, s11
 8000d28:	ee35 5a04 	vadd.f32	s10, s10, s8
 8000d2c:	ed80 5a00 	vstr	s10, [r0]
    kalman->bias  += K1 * y;
 8000d30:	ee20 0a23 	vmul.f32	s0, s0, s7
 8000d34:	ee74 4a80 	vadd.f32	s9, s9, s0
 8000d38:	edc0 4a01 	vstr	s9, [r0, #4]

    // state covariance update
    float P00_temp = kalman->P[0][0];
    float P01_temp = kalman->P[0][1];

    kalman->P[0][0] -= K0 * P00_temp;
 8000d3c:	ee27 5aa5 	vmul.f32	s10, s15, s11
 8000d40:	ee37 5ac5 	vsub.f32	s10, s15, s10
 8000d44:	ed80 5a03 	vstr	s10, [r0, #12]
    kalman->P[0][1] -= K0 * P01_temp;
 8000d48:	ee67 5a25 	vmul.f32	s11, s14, s11
 8000d4c:	ee77 5a65 	vsub.f32	s11, s14, s11
 8000d50:	edc0 5a04 	vstr	s11, [r0, #16]
    kalman->P[1][0] -= K1 * P00_temp;
 8000d54:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8000d58:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000d5c:	edc0 6a05 	vstr	s13, [r0, #20]
    kalman->P[1][1] -= K1 * P01_temp;
 8000d60:	ee27 7a23 	vmul.f32	s14, s14, s7
 8000d64:	ee36 6a47 	vsub.f32	s12, s12, s14
 8000d68:	ed80 6a06 	vstr	s12, [r0, #24]
}
 8000d6c:	4770      	bx	lr
	...

08000d70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d70:	b530      	push	{r4, r5, lr}
 8000d72:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d74:	ad05      	add	r5, sp, #20
 8000d76:	2400      	movs	r4, #0
 8000d78:	9405      	str	r4, [sp, #20]
 8000d7a:	9406      	str	r4, [sp, #24]
 8000d7c:	9407      	str	r4, [sp, #28]
 8000d7e:	9408      	str	r4, [sp, #32]
 8000d80:	9409      	str	r4, [sp, #36]	@ 0x24
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d82:	4b21      	ldr	r3, [pc, #132]	@ (8000e08 <MX_GPIO_Init+0x98>)
 8000d84:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000d86:	f042 0204 	orr.w	r2, r2, #4
 8000d8a:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000d8c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000d8e:	f002 0204 	and.w	r2, r2, #4
 8000d92:	9201      	str	r2, [sp, #4]
 8000d94:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d96:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000d98:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000d9c:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000d9e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000da0:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000da4:	9202      	str	r2, [sp, #8]
 8000da6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000daa:	f042 0201 	orr.w	r2, r2, #1
 8000dae:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000db0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000db2:	f002 0201 	and.w	r2, r2, #1
 8000db6:	9203      	str	r2, [sp, #12]
 8000db8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000dbc:	f042 0202 	orr.w	r2, r2, #2
 8000dc0:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000dc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dc4:	f003 0302 	and.w	r3, r3, #2
 8000dc8:	9304      	str	r3, [sp, #16]
 8000dca:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000dcc:	4622      	mov	r2, r4
 8000dce:	2120      	movs	r1, #32
 8000dd0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dd4:	f000 fbfc 	bl	80015d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000dd8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ddc:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000dde:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000de2:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000de6:	4629      	mov	r1, r5
 8000de8:	4808      	ldr	r0, [pc, #32]	@ (8000e0c <MX_GPIO_Init+0x9c>)
 8000dea:	f000 faf1 	bl	80013d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000dee:	2320      	movs	r3, #32
 8000df0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df2:	2301      	movs	r3, #1
 8000df4:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df8:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000dfa:	4629      	mov	r1, r5
 8000dfc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e00:	f000 fae6 	bl	80013d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000e04:	b00b      	add	sp, #44	@ 0x2c
 8000e06:	bd30      	pop	{r4, r5, pc}
 8000e08:	40021000 	.word	0x40021000
 8000e0c:	48000800 	.word	0x48000800

08000e10 <log_data_uart>:
    ITM_SendChar(*ptr++);
  }
  return len;
}

void log_data_uart() {
 8000e10:	b530      	push	{r4, r5, lr}
 8000e12:	b091      	sub	sp, #68	@ 0x44
    sprintf(tx_buffer, "%lu,%f,%f,%f,%f,%.2f,%.2f,%.2f,%.2f\n",
 8000e14:	4b21      	ldr	r3, [pc, #132]	@ (8000e9c <log_data_uart+0x8c>)
 8000e16:	681d      	ldr	r5, [r3, #0]
 8000e18:	4c21      	ldr	r4, [pc, #132]	@ (8000ea0 <log_data_uart+0x90>)
 8000e1a:	4b22      	ldr	r3, [pc, #136]	@ (8000ea4 <log_data_uart+0x94>)
 8000e1c:	6818      	ldr	r0, [r3, #0]
 8000e1e:	f7ff fc9d 	bl	800075c <__aeabi_f2d>
 8000e22:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8000e26:	4b20      	ldr	r3, [pc, #128]	@ (8000ea8 <log_data_uart+0x98>)
 8000e28:	6818      	ldr	r0, [r3, #0]
 8000e2a:	f7ff fc97 	bl	800075c <__aeabi_f2d>
 8000e2e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8000e32:	4b1e      	ldr	r3, [pc, #120]	@ (8000eac <log_data_uart+0x9c>)
 8000e34:	6818      	ldr	r0, [r3, #0]
 8000e36:	f7ff fc91 	bl	800075c <__aeabi_f2d>
 8000e3a:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8000e3e:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb0 <log_data_uart+0xa0>)
 8000e40:	6818      	ldr	r0, [r3, #0]
 8000e42:	f7ff fc8b 	bl	800075c <__aeabi_f2d>
 8000e46:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8000e4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000eb4 <log_data_uart+0xa4>)
 8000e4c:	6818      	ldr	r0, [r3, #0]
 8000e4e:	f7ff fc85 	bl	800075c <__aeabi_f2d>
 8000e52:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8000e56:	4b18      	ldr	r3, [pc, #96]	@ (8000eb8 <log_data_uart+0xa8>)
 8000e58:	6818      	ldr	r0, [r3, #0]
 8000e5a:	f7ff fc7f 	bl	800075c <__aeabi_f2d>
 8000e5e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8000e62:	4b16      	ldr	r3, [pc, #88]	@ (8000ebc <log_data_uart+0xac>)
 8000e64:	6818      	ldr	r0, [r3, #0]
 8000e66:	f7ff fc79 	bl	800075c <__aeabi_f2d>
 8000e6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8000e6e:	4b14      	ldr	r3, [pc, #80]	@ (8000ec0 <log_data_uart+0xb0>)
 8000e70:	6818      	ldr	r0, [r3, #0]
 8000e72:	f7ff fc73 	bl	800075c <__aeabi_f2d>
 8000e76:	e9cd 0100 	strd	r0, r1, [sp]
 8000e7a:	462a      	mov	r2, r5
 8000e7c:	4911      	ldr	r1, [pc, #68]	@ (8000ec4 <log_data_uart+0xb4>)
 8000e7e:	4620      	mov	r0, r4
 8000e80:	f002 fcc0 	bl	8003804 <siprintf>
        timestamp, M1, M2, M3, M4, u_pitch, u_roll, u_yaw, u_thrust);

    HAL_UART_Transmit(&huart2, (uint8_t*)tx_buffer, strlen(tx_buffer), HAL_MAX_DELAY);
 8000e84:	4620      	mov	r0, r4
 8000e86:	f7ff f983 	bl	8000190 <strlen>
 8000e8a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e8e:	b282      	uxth	r2, r0
 8000e90:	4621      	mov	r1, r4
 8000e92:	480d      	ldr	r0, [pc, #52]	@ (8000ec8 <log_data_uart+0xb8>)
 8000e94:	f002 fb5a 	bl	800354c <HAL_UART_Transmit>
}
 8000e98:	b011      	add	sp, #68	@ 0x44
 8000e9a:	bd30      	pop	{r4, r5, pc}
 8000e9c:	2000007c 	.word	0x2000007c
 8000ea0:	20000080 	.word	0x20000080
 8000ea4:	2000018c 	.word	0x2000018c
 8000ea8:	20000180 	.word	0x20000180
 8000eac:	20000184 	.word	0x20000184
 8000eb0:	20000188 	.word	0x20000188
 8000eb4:	20000190 	.word	0x20000190
 8000eb8:	20000194 	.word	0x20000194
 8000ebc:	20000198 	.word	0x20000198
 8000ec0:	2000019c 	.word	0x2000019c
 8000ec4:	080047b0 	.word	0x080047b0
 8000ec8:	2000028c 	.word	0x2000028c

08000ecc <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ecc:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ece:	e7fe      	b.n	8000ece <Error_Handler+0x2>

08000ed0 <MX_USART2_UART_Init>:
{
 8000ed0:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 8000ed2:	480b      	ldr	r0, [pc, #44]	@ (8000f00 <MX_USART2_UART_Init+0x30>)
 8000ed4:	4b0b      	ldr	r3, [pc, #44]	@ (8000f04 <MX_USART2_UART_Init+0x34>)
 8000ed6:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8000ed8:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000edc:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ee2:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ee4:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ee6:	220c      	movs	r2, #12
 8000ee8:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eea:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eec:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eee:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ef0:	6243      	str	r3, [r0, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ef2:	f002 fbf2 	bl	80036da <HAL_UART_Init>
 8000ef6:	b900      	cbnz	r0, 8000efa <MX_USART2_UART_Init+0x2a>
}
 8000ef8:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000efa:	f7ff ffe7 	bl	8000ecc <Error_Handler>
 8000efe:	bf00      	nop
 8000f00:	2000028c 	.word	0x2000028c
 8000f04:	40004400 	.word	0x40004400

08000f08 <MX_I2C1_Init>:
{
 8000f08:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 8000f0a:	4811      	ldr	r0, [pc, #68]	@ (8000f50 <MX_I2C1_Init+0x48>)
 8000f0c:	4b11      	ldr	r3, [pc, #68]	@ (8000f54 <MX_I2C1_Init+0x4c>)
 8000f0e:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 8000f10:	4b11      	ldr	r3, [pc, #68]	@ (8000f58 <MX_I2C1_Init+0x50>)
 8000f12:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f18:	2201      	movs	r2, #1
 8000f1a:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f1c:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f1e:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f20:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f22:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f24:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f26:	f000 fd28 	bl	800197a <HAL_I2C_Init>
 8000f2a:	b950      	cbnz	r0, 8000f42 <MX_I2C1_Init+0x3a>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	4808      	ldr	r0, [pc, #32]	@ (8000f50 <MX_I2C1_Init+0x48>)
 8000f30:	f000 ff30 	bl	8001d94 <HAL_I2CEx_ConfigAnalogFilter>
 8000f34:	b938      	cbnz	r0, 8000f46 <MX_I2C1_Init+0x3e>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f36:	2100      	movs	r1, #0
 8000f38:	4805      	ldr	r0, [pc, #20]	@ (8000f50 <MX_I2C1_Init+0x48>)
 8000f3a:	f000 ff58 	bl	8001dee <HAL_I2CEx_ConfigDigitalFilter>
 8000f3e:	b920      	cbnz	r0, 8000f4a <MX_I2C1_Init+0x42>
}
 8000f40:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000f42:	f7ff ffc3 	bl	8000ecc <Error_Handler>
    Error_Handler();
 8000f46:	f7ff ffc1 	bl	8000ecc <Error_Handler>
    Error_Handler();
 8000f4a:	f7ff ffbf 	bl	8000ecc <Error_Handler>
 8000f4e:	bf00      	nop
 8000f50:	20000314 	.word	0x20000314
 8000f54:	40005400 	.word	0x40005400
 8000f58:	10d19ce4 	.word	0x10d19ce4

08000f5c <SystemClock_Config>:
{
 8000f5c:	b500      	push	{lr}
 8000f5e:	b097      	sub	sp, #92	@ 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f60:	2244      	movs	r2, #68	@ 0x44
 8000f62:	2100      	movs	r1, #0
 8000f64:	a805      	add	r0, sp, #20
 8000f66:	f002 fc6f 	bl	8003848 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	9300      	str	r3, [sp, #0]
 8000f6e:	9301      	str	r3, [sp, #4]
 8000f70:	9302      	str	r3, [sp, #8]
 8000f72:	9303      	str	r3, [sp, #12]
 8000f74:	9304      	str	r3, [sp, #16]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f76:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000f7a:	f001 f80d 	bl	8001f98 <HAL_PWREx_ControlVoltageScaling>
 8000f7e:	bb20      	cbnz	r0, 8000fca <SystemClock_Config+0x6e>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f80:	2302      	movs	r3, #2
 8000f82:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f84:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f88:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f8a:	2210      	movs	r2, #16
 8000f8c:	9209      	str	r2, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f8e:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f90:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f92:	2201      	movs	r2, #1
 8000f94:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000f96:	220a      	movs	r2, #10
 8000f98:	9212      	str	r2, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f9a:	2207      	movs	r2, #7
 8000f9c:	9213      	str	r2, [sp, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f9e:	9314      	str	r3, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000fa0:	9315      	str	r3, [sp, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fa2:	a805      	add	r0, sp, #20
 8000fa4:	f001 f8dc 	bl	8002160 <HAL_RCC_OscConfig>
 8000fa8:	b988      	cbnz	r0, 8000fce <SystemClock_Config+0x72>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000faa:	230f      	movs	r3, #15
 8000fac:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fb6:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fb8:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000fba:	2104      	movs	r1, #4
 8000fbc:	4668      	mov	r0, sp
 8000fbe:	f001 fbdd 	bl	800277c <HAL_RCC_ClockConfig>
 8000fc2:	b930      	cbnz	r0, 8000fd2 <SystemClock_Config+0x76>
}
 8000fc4:	b017      	add	sp, #92	@ 0x5c
 8000fc6:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000fca:	f7ff ff7f 	bl	8000ecc <Error_Handler>
    Error_Handler();
 8000fce:	f7ff ff7d 	bl	8000ecc <Error_Handler>
    Error_Handler();
 8000fd2:	f7ff ff7b 	bl	8000ecc <Error_Handler>
	...

08000fd8 <main>:
{
 8000fd8:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
  HAL_Init();
 8000fdc:	f000 f952 	bl	8001284 <HAL_Init>
  Accelerometer_Init(&hi2c1); // Initialize the accelerometer
 8000fe0:	4878      	ldr	r0, [pc, #480]	@ (80011c4 <main+0x1ec>)
 8000fe2:	f7ff fce7 	bl	80009b4 <Accelerometer_Init>
  Kalman_Init(&kalman_pitch, &kalman_roll); // Initialize Kalman filters for x, y, z axes
 8000fe6:	4978      	ldr	r1, [pc, #480]	@ (80011c8 <main+0x1f0>)
 8000fe8:	4878      	ldr	r0, [pc, #480]	@ (80011cc <main+0x1f4>)
 8000fea:	f7ff fe2f 	bl	8000c4c <Kalman_Init>
  PID_Init(&pid_pitch, 1.0f, 0.1f, 0.01f, dt); // Initialize PID for pitch
 8000fee:	4c78      	ldr	r4, [pc, #480]	@ (80011d0 <main+0x1f8>)
 8000ff0:	eddf 8a78 	vldr	s17, [pc, #480]	@ 80011d4 <main+0x1fc>
 8000ff4:	ed9f 8a78 	vldr	s16, [pc, #480]	@ 80011d8 <main+0x200>
 8000ff8:	edd4 1a00 	vldr	s3, [r4]
 8000ffc:	eeb0 1a68 	vmov.f32	s2, s17
 8001000:	eef0 0a48 	vmov.f32	s1, s16
 8001004:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001008:	4874      	ldr	r0, [pc, #464]	@ (80011dc <main+0x204>)
 800100a:	f7ff fc89 	bl	8000920 <PID_Init>
  PID_Init(&pid_roll, 1.0f, 0.1f, 0.01f, dt); // Initialize PID for roll
 800100e:	edd4 1a00 	vldr	s3, [r4]
 8001012:	eeb0 1a68 	vmov.f32	s2, s17
 8001016:	eef0 0a48 	vmov.f32	s1, s16
 800101a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800101e:	4870      	ldr	r0, [pc, #448]	@ (80011e0 <main+0x208>)
 8001020:	f7ff fc7e 	bl	8000920 <PID_Init>
  PID_Init(&pid_thrust, 1.0f, 0.1f, 0.01f, dt); // Initialize PID for thrust
 8001024:	edd4 1a00 	vldr	s3, [r4]
 8001028:	eeb0 1a68 	vmov.f32	s2, s17
 800102c:	eef0 0a48 	vmov.f32	s1, s16
 8001030:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001034:	486b      	ldr	r0, [pc, #428]	@ (80011e4 <main+0x20c>)
 8001036:	f7ff fc73 	bl	8000920 <PID_Init>
  PID_Init(&pid_yaw, 1.0f, 0.1f, 0.01f, dt); // Initialize PID for yaw (if needed)
 800103a:	edd4 1a00 	vldr	s3, [r4]
 800103e:	eeb0 1a68 	vmov.f32	s2, s17
 8001042:	eef0 0a48 	vmov.f32	s1, s16
 8001046:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800104a:	4867      	ldr	r0, [pc, #412]	@ (80011e8 <main+0x210>)
 800104c:	f7ff fc68 	bl	8000920 <PID_Init>
  timestamp = 0;
 8001050:	4b66      	ldr	r3, [pc, #408]	@ (80011ec <main+0x214>)
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
  SystemClock_Config();
 8001056:	f7ff ff81 	bl	8000f5c <SystemClock_Config>
  MX_GPIO_Init();
 800105a:	f7ff fe89 	bl	8000d70 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800105e:	f7ff ff37 	bl	8000ed0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001062:	f7ff ff51 	bl	8000f08 <MX_I2C1_Init>
    LD2_GPIO_Port->ODR ^= LD2_Pin; // Toggle the LED
 8001066:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800106a:	6953      	ldr	r3, [r2, #20]
 800106c:	f083 0320 	eor.w	r3, r3, #32
 8001070:	6153      	str	r3, [r2, #20]
    Accelerometer_Read(&hi2c1, &accel_data, &gyro_data); // Read accelerometer and gyro data
 8001072:	4c5f      	ldr	r4, [pc, #380]	@ (80011f0 <main+0x218>)
 8001074:	4d5f      	ldr	r5, [pc, #380]	@ (80011f4 <main+0x21c>)
 8001076:	4622      	mov	r2, r4
 8001078:	4629      	mov	r1, r5
 800107a:	4852      	ldr	r0, [pc, #328]	@ (80011c4 <main+0x1ec>)
 800107c:	f7ff fce8 	bl	8000a50 <Accelerometer_Read>
    angles_from_accel(accel_data, &pitch_calc, &roll_calc); // Calculate pitch and roll from accelerometer data
 8001080:	4f5d      	ldr	r7, [pc, #372]	@ (80011f8 <main+0x220>)
 8001082:	f8df 91a0 	ldr.w	r9, [pc, #416]	@ 8001224 <main+0x24c>
 8001086:	4639      	mov	r1, r7
 8001088:	4648      	mov	r0, r9
 800108a:	ed95 0a00 	vldr	s0, [r5]
 800108e:	edd5 0a01 	vldr	s1, [r5, #4]
 8001092:	ed95 1a02 	vldr	s2, [r5, #8]
 8001096:	f7ff fd6f 	bl	8000b78 <angles_from_accel>
    angles_rate_from_gyro(gyro_data, &pitch_rate_calc, &roll_rate_calc); // Calculate pitch and roll rates from gyro data
 800109a:	f8df 818c 	ldr.w	r8, [pc, #396]	@ 8001228 <main+0x250>
 800109e:	f8df b18c 	ldr.w	fp, [pc, #396]	@ 800122c <main+0x254>
 80010a2:	4641      	mov	r1, r8
 80010a4:	4658      	mov	r0, fp
 80010a6:	ed94 0a00 	vldr	s0, [r4]
 80010aa:	edd4 0a01 	vldr	s1, [r4, #4]
 80010ae:	ed94 1a02 	vldr	s2, [r4, #8]
 80010b2:	f7ff fdad 	bl	8000c10 <angles_rate_from_gyro>
    Kalman_GetAngle(&kalman_pitch, pitch_calc, pitch_rate_calc, dt);
 80010b6:	4e46      	ldr	r6, [pc, #280]	@ (80011d0 <main+0x1f8>)
 80010b8:	f8df a110 	ldr.w	sl, [pc, #272]	@ 80011cc <main+0x1f4>
 80010bc:	ed96 1a00 	vldr	s2, [r6]
 80010c0:	eddb 0a00 	vldr	s1, [fp]
 80010c4:	ed99 0a00 	vldr	s0, [r9]
 80010c8:	4650      	mov	r0, sl
 80010ca:	f7ff fdeb 	bl	8000ca4 <Kalman_GetAngle>
    Kalman_GetAngle(&kalman_roll, roll_calc, roll_rate_calc, dt);
 80010ce:	f8df 90f8 	ldr.w	r9, [pc, #248]	@ 80011c8 <main+0x1f0>
 80010d2:	ed96 1a00 	vldr	s2, [r6]
 80010d6:	edd8 0a00 	vldr	s1, [r8]
 80010da:	ed97 0a00 	vldr	s0, [r7]
 80010de:	4648      	mov	r0, r9
 80010e0:	f7ff fde0 	bl	8000ca4 <Kalman_GetAngle>
    yaw_from_gyro(gyro_data, &yaw_angle, dt); // Calculate yaw angle from gyro data
 80010e4:	f8df 8148 	ldr.w	r8, [pc, #328]	@ 8001230 <main+0x258>
 80010e8:	edd6 1a00 	vldr	s3, [r6]
 80010ec:	4640      	mov	r0, r8
 80010ee:	ed94 0a00 	vldr	s0, [r4]
 80010f2:	edd4 0a01 	vldr	s1, [r4, #4]
 80010f6:	ed94 1a02 	vldr	s2, [r4, #8]
 80010fa:	f7ff fd96 	bl	8000c2a <yaw_from_gyro>
    u_thrust = PID_Compute(&pid_thrust, accel_data.z, 0.0f);
 80010fe:	ed9f 8a3f 	vldr	s16, [pc, #252]	@ 80011fc <main+0x224>
 8001102:	eef0 0a48 	vmov.f32	s1, s16
 8001106:	ed95 0a02 	vldr	s0, [r5, #8]
 800110a:	4836      	ldr	r0, [pc, #216]	@ (80011e4 <main+0x20c>)
 800110c:	f7ff fc18 	bl	8000940 <PID_Compute>
 8001110:	4f3b      	ldr	r7, [pc, #236]	@ (8001200 <main+0x228>)
 8001112:	ed87 0a00 	vstr	s0, [r7]
    u_pitch = PID_Compute(&pid_pitch, kalman_pitch.angle, 0.0f); // Target angle is 0 for level flight
 8001116:	eef0 0a48 	vmov.f32	s1, s16
 800111a:	ed9a 0a00 	vldr	s0, [sl]
 800111e:	482f      	ldr	r0, [pc, #188]	@ (80011dc <main+0x204>)
 8001120:	f7ff fc0e 	bl	8000940 <PID_Compute>
 8001124:	4d37      	ldr	r5, [pc, #220]	@ (8001204 <main+0x22c>)
 8001126:	ed85 0a00 	vstr	s0, [r5]
    u_roll = PID_Compute(&pid_roll, kalman_roll.angle, 0.0f); // Target angle is 0 for level flight
 800112a:	eef0 0a48 	vmov.f32	s1, s16
 800112e:	ed99 0a00 	vldr	s0, [r9]
 8001132:	482b      	ldr	r0, [pc, #172]	@ (80011e0 <main+0x208>)
 8001134:	f7ff fc04 	bl	8000940 <PID_Compute>
 8001138:	4c33      	ldr	r4, [pc, #204]	@ (8001208 <main+0x230>)
 800113a:	ed84 0a00 	vstr	s0, [r4]
    u_yaw = PID_Compute(&pid_yaw, yaw_angle, 0.0f); // Assuming yaw control is not implemented, set target to 0
 800113e:	eef0 0a48 	vmov.f32	s1, s16
 8001142:	ed98 0a00 	vldr	s0, [r8]
 8001146:	4828      	ldr	r0, [pc, #160]	@ (80011e8 <main+0x210>)
 8001148:	f7ff fbfa 	bl	8000940 <PID_Compute>
 800114c:	4b2f      	ldr	r3, [pc, #188]	@ (800120c <main+0x234>)
 800114e:	ed83 0a00 	vstr	s0, [r3]
    M1 = u_thrust - u_pitch - u_roll - u_yaw; // Motor 1 control signal CW
 8001152:	edd7 6a00 	vldr	s13, [r7]
 8001156:	edd5 5a00 	vldr	s11, [r5]
 800115a:	ee36 7ae5 	vsub.f32	s14, s13, s11
 800115e:	edd4 7a00 	vldr	s15, [r4]
 8001162:	ee37 6a67 	vsub.f32	s12, s14, s15
 8001166:	ee36 6a40 	vsub.f32	s12, s12, s0
 800116a:	4b29      	ldr	r3, [pc, #164]	@ (8001210 <main+0x238>)
 800116c:	ed83 6a00 	vstr	s12, [r3]
    M2 = u_thrust - u_pitch + u_roll + u_yaw; // Motor 2 control signal CCW
 8001170:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001174:	ee30 7a07 	vadd.f32	s14, s0, s14
 8001178:	4b26      	ldr	r3, [pc, #152]	@ (8001214 <main+0x23c>)
 800117a:	ed83 7a00 	vstr	s14, [r3]
    M3 = u_thrust + u_pitch - u_roll + u_yaw; // Motor 3 control signal CCW
 800117e:	ee36 7aa5 	vadd.f32	s14, s13, s11
 8001182:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001186:	ee70 6a26 	vadd.f32	s13, s0, s13
 800118a:	4b23      	ldr	r3, [pc, #140]	@ (8001218 <main+0x240>)
 800118c:	edc3 6a00 	vstr	s13, [r3]
    M4 = u_thrust + u_pitch + u_roll - u_yaw; // Motor 4 control signal CW
 8001190:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001194:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8001198:	4b20      	ldr	r3, [pc, #128]	@ (800121c <main+0x244>)
 800119a:	ed83 0a00 	vstr	s0, [r3]
    log_data_uart(); // Log data to UART
 800119e:	f7ff fe37 	bl	8000e10 <log_data_uart>
    timestamp++; 
 80011a2:	4a12      	ldr	r2, [pc, #72]	@ (80011ec <main+0x214>)
 80011a4:	6813      	ldr	r3, [r2, #0]
 80011a6:	3301      	adds	r3, #1
 80011a8:	6013      	str	r3, [r2, #0]
    HAL_Delay(dt * 1000); // Delay for the time step
 80011aa:	edd6 7a00 	vldr	s15, [r6]
 80011ae:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8001220 <main+0x248>
 80011b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011ba:	ee17 0a90 	vmov	r0, s15
 80011be:	f000 f889 	bl	80012d4 <HAL_Delay>
  while (1)
 80011c2:	e750      	b.n	8001066 <main+0x8e>
 80011c4:	20000314 	.word	0x20000314
 80011c8:	20000224 	.word	0x20000224
 80011cc:	2000024c 	.word	0x2000024c
 80011d0:	20000000 	.word	0x20000000
 80011d4:	3c23d70a 	.word	0x3c23d70a
 80011d8:	3dcccccd 	.word	0x3dcccccd
 80011dc:	200001d8 	.word	0x200001d8
 80011e0:	200001bc 	.word	0x200001bc
 80011e4:	200001f4 	.word	0x200001f4
 80011e8:	200001a0 	.word	0x200001a0
 80011ec:	2000007c 	.word	0x2000007c
 80011f0:	20000274 	.word	0x20000274
 80011f4:	20000280 	.word	0x20000280
 80011f8:	2000021c 	.word	0x2000021c
 80011fc:	00000000 	.word	0x00000000
 8001200:	2000018c 	.word	0x2000018c
 8001204:	20000188 	.word	0x20000188
 8001208:	20000184 	.word	0x20000184
 800120c:	20000180 	.word	0x20000180
 8001210:	2000019c 	.word	0x2000019c
 8001214:	20000198 	.word	0x20000198
 8001218:	20000194 	.word	0x20000194
 800121c:	20000190 	.word	0x20000190
 8001220:	447a0000 	.word	0x447a0000
 8001224:	20000220 	.word	0x20000220
 8001228:	20000214 	.word	0x20000214
 800122c:	20000218 	.word	0x20000218
 8001230:	20000210 	.word	0x20000210

08001234 <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001234:	4b10      	ldr	r3, [pc, #64]	@ (8001278 <HAL_InitTick+0x44>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	b90b      	cbnz	r3, 800123e <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 800123a:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 800123c:	4770      	bx	lr
{
 800123e:	b510      	push	{r4, lr}
 8001240:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001242:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001246:	fbb0 f3f3 	udiv	r3, r0, r3
 800124a:	4a0c      	ldr	r2, [pc, #48]	@ (800127c <HAL_InitTick+0x48>)
 800124c:	6810      	ldr	r0, [r2, #0]
 800124e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001252:	f000 f8a9 	bl	80013a8 <HAL_SYSTICK_Config>
 8001256:	b968      	cbnz	r0, 8001274 <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001258:	2c0f      	cmp	r4, #15
 800125a:	d901      	bls.n	8001260 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 800125c:	2001      	movs	r0, #1
 800125e:	e00a      	b.n	8001276 <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001260:	2200      	movs	r2, #0
 8001262:	4621      	mov	r1, r4
 8001264:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001268:	f000 f88e 	bl	8001388 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800126c:	4b04      	ldr	r3, [pc, #16]	@ (8001280 <HAL_InitTick+0x4c>)
 800126e:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8001270:	2000      	movs	r0, #0
 8001272:	e000      	b.n	8001276 <HAL_InitTick+0x42>
      status = HAL_ERROR;
 8001274:	2001      	movs	r0, #1
}
 8001276:	bd10      	pop	{r4, pc}
 8001278:	20000004 	.word	0x20000004
 800127c:	2000000c 	.word	0x2000000c
 8001280:	20000008 	.word	0x20000008

08001284 <HAL_Init>:
{
 8001284:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001286:	4a09      	ldr	r2, [pc, #36]	@ (80012ac <HAL_Init+0x28>)
 8001288:	6813      	ldr	r3, [r2, #0]
 800128a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800128e:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001290:	2003      	movs	r0, #3
 8001292:	f000 f867 	bl	8001364 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001296:	2000      	movs	r0, #0
 8001298:	f7ff ffcc 	bl	8001234 <HAL_InitTick>
 800129c:	b110      	cbz	r0, 80012a4 <HAL_Init+0x20>
    status = HAL_ERROR;
 800129e:	2401      	movs	r4, #1
}
 80012a0:	4620      	mov	r0, r4
 80012a2:	bd10      	pop	{r4, pc}
 80012a4:	4604      	mov	r4, r0
    HAL_MspInit();
 80012a6:	f000 fdcd 	bl	8001e44 <HAL_MspInit>
 80012aa:	e7f9      	b.n	80012a0 <HAL_Init+0x1c>
 80012ac:	40022000 	.word	0x40022000

080012b0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80012b0:	4b03      	ldr	r3, [pc, #12]	@ (80012c0 <HAL_IncTick+0x10>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	4a03      	ldr	r2, [pc, #12]	@ (80012c4 <HAL_IncTick+0x14>)
 80012b6:	6811      	ldr	r1, [r2, #0]
 80012b8:	440b      	add	r3, r1
 80012ba:	6013      	str	r3, [r2, #0]
}
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	20000004 	.word	0x20000004
 80012c4:	20000368 	.word	0x20000368

080012c8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80012c8:	4b01      	ldr	r3, [pc, #4]	@ (80012d0 <HAL_GetTick+0x8>)
 80012ca:	6818      	ldr	r0, [r3, #0]
}
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	20000368 	.word	0x20000368

080012d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012d4:	b538      	push	{r3, r4, r5, lr}
 80012d6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80012d8:	f7ff fff6 	bl	80012c8 <HAL_GetTick>
 80012dc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012de:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 80012e2:	d002      	beq.n	80012ea <HAL_Delay+0x16>
  {
    wait += (uint32_t)uwTickFreq;
 80012e4:	4b04      	ldr	r3, [pc, #16]	@ (80012f8 <HAL_Delay+0x24>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012ea:	f7ff ffed 	bl	80012c8 <HAL_GetTick>
 80012ee:	1b40      	subs	r0, r0, r5
 80012f0:	42a0      	cmp	r0, r4
 80012f2:	d3fa      	bcc.n	80012ea <HAL_Delay+0x16>
  {
  }
}
 80012f4:	bd38      	pop	{r3, r4, r5, pc}
 80012f6:	bf00      	nop
 80012f8:	20000004 	.word	0x20000004

080012fc <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80012fc:	2800      	cmp	r0, #0
 80012fe:	db08      	blt.n	8001312 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001300:	0109      	lsls	r1, r1, #4
 8001302:	b2c9      	uxtb	r1, r1
 8001304:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8001308:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 800130c:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8001310:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001312:	f000 000f 	and.w	r0, r0, #15
 8001316:	0109      	lsls	r1, r1, #4
 8001318:	b2c9      	uxtb	r1, r1
 800131a:	4b01      	ldr	r3, [pc, #4]	@ (8001320 <__NVIC_SetPriority+0x24>)
 800131c:	5419      	strb	r1, [r3, r0]
  }
}
 800131e:	4770      	bx	lr
 8001320:	e000ed14 	.word	0xe000ed14

08001324 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001324:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001326:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800132a:	f1c0 0c07 	rsb	ip, r0, #7
 800132e:	f1bc 0f04 	cmp.w	ip, #4
 8001332:	bf28      	it	cs
 8001334:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001338:	1d03      	adds	r3, r0, #4
 800133a:	2b06      	cmp	r3, #6
 800133c:	d90f      	bls.n	800135e <NVIC_EncodePriority+0x3a>
 800133e:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001340:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8001344:	fa0e f00c 	lsl.w	r0, lr, ip
 8001348:	ea21 0100 	bic.w	r1, r1, r0
 800134c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800134e:	fa0e fe03 	lsl.w	lr, lr, r3
 8001352:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8001356:	ea41 0002 	orr.w	r0, r1, r2
 800135a:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800135e:	2300      	movs	r3, #0
 8001360:	e7ee      	b.n	8001340 <NVIC_EncodePriority+0x1c>
	...

08001364 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001364:	4a07      	ldr	r2, [pc, #28]	@ (8001384 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001366:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001368:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800136c:	041b      	lsls	r3, r3, #16
 800136e:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001370:	0200      	lsls	r0, r0, #8
 8001372:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001376:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001378:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800137c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001380:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001382:	4770      	bx	lr
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001388:	b510      	push	{r4, lr}
 800138a:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800138c:	4b05      	ldr	r3, [pc, #20]	@ (80013a4 <HAL_NVIC_SetPriority+0x1c>)
 800138e:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001390:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8001394:	f7ff ffc6 	bl	8001324 <NVIC_EncodePriority>
 8001398:	4601      	mov	r1, r0
 800139a:	4620      	mov	r0, r4
 800139c:	f7ff ffae 	bl	80012fc <__NVIC_SetPriority>
}
 80013a0:	bd10      	pop	{r4, pc}
 80013a2:	bf00      	nop
 80013a4:	e000ed00 	.word	0xe000ed00

080013a8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013a8:	3801      	subs	r0, #1
 80013aa:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80013ae:	d20b      	bcs.n	80013c8 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013b0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80013b4:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b6:	4a05      	ldr	r2, [pc, #20]	@ (80013cc <HAL_SYSTICK_Config+0x24>)
 80013b8:	21f0      	movs	r1, #240	@ 0xf0
 80013ba:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013be:	2000      	movs	r0, #0
 80013c0:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013c2:	2207      	movs	r2, #7
 80013c4:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013c6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80013c8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80013ca:	4770      	bx	lr
 80013cc:	e000ed00 	.word	0xe000ed00

080013d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013d2:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 80013d4:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013d6:	e06b      	b.n	80014b0 <HAL_GPIO_Init+0xe0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013d8:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80013da:	005e      	lsls	r6, r3, #1
 80013dc:	2403      	movs	r4, #3
 80013de:	40b4      	lsls	r4, r6
 80013e0:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013e4:	68cc      	ldr	r4, [r1, #12]
 80013e6:	40b4      	lsls	r4, r6
 80013e8:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 80013ea:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013ec:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013ee:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013f2:	684c      	ldr	r4, [r1, #4]
 80013f4:	f3c4 1400 	ubfx	r4, r4, #4, #1
 80013f8:	409c      	lsls	r4, r3
 80013fa:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 80013fc:	6044      	str	r4, [r0, #4]
 80013fe:	e069      	b.n	80014d4 <HAL_GPIO_Init+0x104>

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001400:	6ac5      	ldr	r5, [r0, #44]	@ 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001402:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001406:	f3c4 04c0 	ubfx	r4, r4, #3, #1
 800140a:	409c      	lsls	r4, r3
 800140c:	432c      	orrs	r4, r5
        GPIOx->ASCR = temp;
 800140e:	62c4      	str	r4, [r0, #44]	@ 0x2c
 8001410:	e066      	b.n	80014e0 <HAL_GPIO_Init+0x110>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001412:	08dd      	lsrs	r5, r3, #3
 8001414:	3508      	adds	r5, #8
 8001416:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800141a:	f003 0c07 	and.w	ip, r3, #7
 800141e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001422:	f04f 0e0f 	mov.w	lr, #15
 8001426:	fa0e fe0c 	lsl.w	lr, lr, ip
 800142a:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800142e:	690c      	ldr	r4, [r1, #16]
 8001430:	fa04 f40c 	lsl.w	r4, r4, ip
 8001434:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 8001438:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 800143c:	e067      	b.n	800150e <HAL_GPIO_Init+0x13e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800143e:	2406      	movs	r4, #6
 8001440:	e000      	b.n	8001444 <HAL_GPIO_Init+0x74>
 8001442:	2400      	movs	r4, #0
 8001444:	fa04 f40e 	lsl.w	r4, r4, lr
 8001448:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 800144a:	f10c 0c02 	add.w	ip, ip, #2
 800144e:	4d5c      	ldr	r5, [pc, #368]	@ (80015c0 <HAL_GPIO_Init+0x1f0>)
 8001450:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001454:	4c5b      	ldr	r4, [pc, #364]	@ (80015c4 <HAL_GPIO_Init+0x1f4>)
 8001456:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 8001458:	43d4      	mvns	r4, r2
 800145a:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800145e:	684f      	ldr	r7, [r1, #4]
 8001460:	f417 1f80 	tst.w	r7, #1048576	@ 0x100000
 8001464:	d001      	beq.n	800146a <HAL_GPIO_Init+0x9a>
        {
          temp |= iocurrent;
 8001466:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 800146a:	4d56      	ldr	r5, [pc, #344]	@ (80015c4 <HAL_GPIO_Init+0x1f4>)
 800146c:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 800146e:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 8001470:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001474:	684f      	ldr	r7, [r1, #4]
 8001476:	f417 1f00 	tst.w	r7, #2097152	@ 0x200000
 800147a:	d001      	beq.n	8001480 <HAL_GPIO_Init+0xb0>
        {
          temp |= iocurrent;
 800147c:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8001480:	4d50      	ldr	r5, [pc, #320]	@ (80015c4 <HAL_GPIO_Init+0x1f4>)
 8001482:	60ee      	str	r6, [r5, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001484:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8001486:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800148a:	684f      	ldr	r7, [r1, #4]
 800148c:	f417 3f00 	tst.w	r7, #131072	@ 0x20000
 8001490:	d001      	beq.n	8001496 <HAL_GPIO_Init+0xc6>
        {
          temp |= iocurrent;
 8001492:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 8001496:	4d4b      	ldr	r5, [pc, #300]	@ (80015c4 <HAL_GPIO_Init+0x1f4>)
 8001498:	606e      	str	r6, [r5, #4]

        temp = EXTI->IMR1;
 800149a:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 800149c:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800149e:	684e      	ldr	r6, [r1, #4]
 80014a0:	f416 3f80 	tst.w	r6, #65536	@ 0x10000
 80014a4:	d001      	beq.n	80014aa <HAL_GPIO_Init+0xda>
        {
          temp |= iocurrent;
 80014a6:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->IMR1 = temp;
 80014aa:	4a46      	ldr	r2, [pc, #280]	@ (80015c4 <HAL_GPIO_Init+0x1f4>)
 80014ac:	6014      	str	r4, [r2, #0]
      }
    }

    position++;
 80014ae:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014b0:	680a      	ldr	r2, [r1, #0]
 80014b2:	fa32 f403 	lsrs.w	r4, r2, r3
 80014b6:	f000 8081 	beq.w	80015bc <HAL_GPIO_Init+0x1ec>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014ba:	f04f 0c01 	mov.w	ip, #1
 80014be:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 80014c2:	ea1c 0202 	ands.w	r2, ip, r2
 80014c6:	d0f2      	beq.n	80014ae <HAL_GPIO_Init+0xde>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014c8:	684c      	ldr	r4, [r1, #4]
 80014ca:	f004 0403 	and.w	r4, r4, #3
 80014ce:	3c01      	subs	r4, #1
 80014d0:	2c01      	cmp	r4, #1
 80014d2:	d981      	bls.n	80013d8 <HAL_GPIO_Init+0x8>
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80014d4:	684c      	ldr	r4, [r1, #4]
 80014d6:	f004 0e03 	and.w	lr, r4, #3
 80014da:	f1be 0f03 	cmp.w	lr, #3
 80014de:	d08f      	beq.n	8001400 <HAL_GPIO_Init+0x30>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014e0:	684c      	ldr	r4, [r1, #4]
 80014e2:	f004 0403 	and.w	r4, r4, #3
 80014e6:	2c03      	cmp	r4, #3
 80014e8:	d00c      	beq.n	8001504 <HAL_GPIO_Init+0x134>
        temp = GPIOx->PUPDR;
 80014ea:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014ec:	005d      	lsls	r5, r3, #1
 80014ee:	f04f 0c03 	mov.w	ip, #3
 80014f2:	fa0c fc05 	lsl.w	ip, ip, r5
 80014f6:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014fa:	688c      	ldr	r4, [r1, #8]
 80014fc:	40ac      	lsls	r4, r5
 80014fe:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 8001502:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001504:	684c      	ldr	r4, [r1, #4]
 8001506:	f004 0403 	and.w	r4, r4, #3
 800150a:	2c02      	cmp	r4, #2
 800150c:	d081      	beq.n	8001412 <HAL_GPIO_Init+0x42>
      temp = GPIOx->MODER;
 800150e:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001510:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001514:	f04f 0c03 	mov.w	ip, #3
 8001518:	fa0c fc0e 	lsl.w	ip, ip, lr
 800151c:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001520:	684c      	ldr	r4, [r1, #4]
 8001522:	f004 0403 	and.w	r4, r4, #3
 8001526:	fa04 f40e 	lsl.w	r4, r4, lr
 800152a:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 800152e:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001530:	684c      	ldr	r4, [r1, #4]
 8001532:	f414 3f40 	tst.w	r4, #196608	@ 0x30000
 8001536:	d0ba      	beq.n	80014ae <HAL_GPIO_Init+0xde>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001538:	4c23      	ldr	r4, [pc, #140]	@ (80015c8 <HAL_GPIO_Init+0x1f8>)
 800153a:	6e25      	ldr	r5, [r4, #96]	@ 0x60
 800153c:	f045 0501 	orr.w	r5, r5, #1
 8001540:	6625      	str	r5, [r4, #96]	@ 0x60
 8001542:	6e24      	ldr	r4, [r4, #96]	@ 0x60
 8001544:	f004 0401 	and.w	r4, r4, #1
 8001548:	9401      	str	r4, [sp, #4]
 800154a:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 800154c:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8001550:	f10c 0502 	add.w	r5, ip, #2
 8001554:	4c1a      	ldr	r4, [pc, #104]	@ (80015c0 <HAL_GPIO_Init+0x1f0>)
 8001556:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800155a:	f003 0e03 	and.w	lr, r3, #3
 800155e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001562:	240f      	movs	r4, #15
 8001564:	fa04 f40e 	lsl.w	r4, r4, lr
 8001568:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800156c:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
 8001570:	f43f af67 	beq.w	8001442 <HAL_GPIO_Init+0x72>
 8001574:	4c15      	ldr	r4, [pc, #84]	@ (80015cc <HAL_GPIO_Init+0x1fc>)
 8001576:	42a0      	cmp	r0, r4
 8001578:	d016      	beq.n	80015a8 <HAL_GPIO_Init+0x1d8>
 800157a:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800157e:	42a0      	cmp	r0, r4
 8001580:	d014      	beq.n	80015ac <HAL_GPIO_Init+0x1dc>
 8001582:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001586:	42a0      	cmp	r0, r4
 8001588:	d012      	beq.n	80015b0 <HAL_GPIO_Init+0x1e0>
 800158a:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800158e:	42a0      	cmp	r0, r4
 8001590:	d010      	beq.n	80015b4 <HAL_GPIO_Init+0x1e4>
 8001592:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001596:	42a0      	cmp	r0, r4
 8001598:	d00e      	beq.n	80015b8 <HAL_GPIO_Init+0x1e8>
 800159a:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800159e:	42a0      	cmp	r0, r4
 80015a0:	f43f af4d 	beq.w	800143e <HAL_GPIO_Init+0x6e>
 80015a4:	2407      	movs	r4, #7
 80015a6:	e74d      	b.n	8001444 <HAL_GPIO_Init+0x74>
 80015a8:	2401      	movs	r4, #1
 80015aa:	e74b      	b.n	8001444 <HAL_GPIO_Init+0x74>
 80015ac:	2402      	movs	r4, #2
 80015ae:	e749      	b.n	8001444 <HAL_GPIO_Init+0x74>
 80015b0:	2403      	movs	r4, #3
 80015b2:	e747      	b.n	8001444 <HAL_GPIO_Init+0x74>
 80015b4:	2404      	movs	r4, #4
 80015b6:	e745      	b.n	8001444 <HAL_GPIO_Init+0x74>
 80015b8:	2405      	movs	r4, #5
 80015ba:	e743      	b.n	8001444 <HAL_GPIO_Init+0x74>
  }
}
 80015bc:	b003      	add	sp, #12
 80015be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015c0:	40010000 	.word	0x40010000
 80015c4:	40010400 	.word	0x40010400
 80015c8:	40021000 	.word	0x40021000
 80015cc:	48000400 	.word	0x48000400

080015d0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015d0:	b10a      	cbz	r2, 80015d6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015d2:	6181      	str	r1, [r0, #24]
 80015d4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015d6:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 80015d8:	4770      	bx	lr

080015da <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80015da:	6803      	ldr	r3, [r0, #0]
 80015dc:	699a      	ldr	r2, [r3, #24]
 80015de:	f012 0f02 	tst.w	r2, #2
 80015e2:	d001      	beq.n	80015e8 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 80015e4:	2200      	movs	r2, #0
 80015e6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80015e8:	6803      	ldr	r3, [r0, #0]
 80015ea:	699a      	ldr	r2, [r3, #24]
 80015ec:	f012 0f01 	tst.w	r2, #1
 80015f0:	d103      	bne.n	80015fa <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80015f2:	699a      	ldr	r2, [r3, #24]
 80015f4:	f042 0201 	orr.w	r2, r2, #1
 80015f8:	619a      	str	r2, [r3, #24]
  }
}
 80015fa:	4770      	bx	lr

080015fc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80015fc:	b410      	push	{r4}
 80015fe:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001600:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8001604:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001608:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800160a:	4321      	orrs	r1, r4
 800160c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001610:	6802      	ldr	r2, [r0, #0]
 8001612:	6853      	ldr	r3, [r2, #4]
 8001614:	0d64      	lsrs	r4, r4, #21
 8001616:	f404 6480 	and.w	r4, r4, #1024	@ 0x400
 800161a:	f044 747f 	orr.w	r4, r4, #66846720	@ 0x3fc0000
 800161e:	f444 3458 	orr.w	r4, r4, #221184	@ 0x36000
 8001622:	f444 747f 	orr.w	r4, r4, #1020	@ 0x3fc
 8001626:	f044 0403 	orr.w	r4, r4, #3
 800162a:	ea23 0304 	bic.w	r3, r3, r4
 800162e:	430b      	orrs	r3, r1
 8001630:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001632:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001636:	4770      	bx	lr

08001638 <I2C_IsErrorOccurred>:
{
 8001638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800163c:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 800163e:	6803      	ldr	r3, [r0, #0]
 8001640:	699e      	ldr	r6, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001642:	f016 0610 	ands.w	r6, r6, #16
 8001646:	d07c      	beq.n	8001742 <I2C_IsErrorOccurred+0x10a>
 8001648:	460d      	mov	r5, r1
 800164a:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800164c:	2210      	movs	r2, #16
 800164e:	61da      	str	r2, [r3, #28]
  uint32_t error_code = 0;
 8001650:	2600      	movs	r6, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001652:	4637      	mov	r7, r6
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001654:	6823      	ldr	r3, [r4, #0]
 8001656:	6998      	ldr	r0, [r3, #24]
 8001658:	f010 0f20 	tst.w	r0, #32
 800165c:	d130      	bne.n	80016c0 <I2C_IsErrorOccurred+0x88>
 800165e:	bb7f      	cbnz	r7, 80016c0 <I2C_IsErrorOccurred+0x88>
      if (Timeout != HAL_MAX_DELAY)
 8001660:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8001664:	d0f6      	beq.n	8001654 <I2C_IsErrorOccurred+0x1c>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001666:	f7ff fe2f 	bl	80012c8 <HAL_GetTick>
 800166a:	eba0 0008 	sub.w	r0, r0, r8
 800166e:	42a8      	cmp	r0, r5
 8001670:	d801      	bhi.n	8001676 <I2C_IsErrorOccurred+0x3e>
 8001672:	2d00      	cmp	r5, #0
 8001674:	d1ee      	bne.n	8001654 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001676:	6821      	ldr	r1, [r4, #0]
 8001678:	684b      	ldr	r3, [r1, #4]
 800167a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          tmp2 = hi2c->Mode;
 800167e:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 8001682:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001684:	6988      	ldr	r0, [r1, #24]
 8001686:	f410 4f00 	tst.w	r0, #32768	@ 0x8000
 800168a:	d002      	beq.n	8001692 <I2C_IsErrorOccurred+0x5a>
 800168c:	b90b      	cbnz	r3, 8001692 <I2C_IsErrorOccurred+0x5a>
              (tmp1 != I2C_CR2_STOP) && \
 800168e:	2a20      	cmp	r2, #32
 8001690:	d10e      	bne.n	80016b0 <I2C_IsErrorOccurred+0x78>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001692:	6823      	ldr	r3, [r4, #0]
 8001694:	699b      	ldr	r3, [r3, #24]
 8001696:	f013 0f20 	tst.w	r3, #32
 800169a:	d1db      	bne.n	8001654 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800169c:	f7ff fe14 	bl	80012c8 <HAL_GetTick>
 80016a0:	eba0 0008 	sub.w	r0, r0, r8
 80016a4:	2819      	cmp	r0, #25
 80016a6:	d9f4      	bls.n	8001692 <I2C_IsErrorOccurred+0x5a>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80016a8:	f046 0620 	orr.w	r6, r6, #32
              status = HAL_ERROR;
 80016ac:	2701      	movs	r7, #1
              break;
 80016ae:	e7d1      	b.n	8001654 <I2C_IsErrorOccurred+0x1c>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80016b0:	684b      	ldr	r3, [r1, #4]
 80016b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016b6:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 80016b8:	f7ff fe06 	bl	80012c8 <HAL_GetTick>
 80016bc:	4680      	mov	r8, r0
 80016be:	e7e8      	b.n	8001692 <I2C_IsErrorOccurred+0x5a>
    if (status == HAL_OK)
 80016c0:	b90f      	cbnz	r7, 80016c6 <I2C_IsErrorOccurred+0x8e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80016c2:	2220      	movs	r2, #32
 80016c4:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 80016c6:	f046 0604 	orr.w	r6, r6, #4
    status = HAL_ERROR;
 80016ca:	2501      	movs	r5, #1
  itflag = hi2c->Instance->ISR;
 80016cc:	6822      	ldr	r2, [r4, #0]
 80016ce:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80016d0:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80016d4:	d005      	beq.n	80016e2 <I2C_IsErrorOccurred+0xaa>
    error_code |= HAL_I2C_ERROR_BERR;
 80016d6:	f046 0601 	orr.w	r6, r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80016da:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016de:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 80016e0:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80016e2:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 80016e6:	d006      	beq.n	80016f6 <I2C_IsErrorOccurred+0xbe>
    error_code |= HAL_I2C_ERROR_OVR;
 80016e8:	f046 0608 	orr.w	r6, r6, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80016ec:	6822      	ldr	r2, [r4, #0]
 80016ee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80016f2:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 80016f4:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80016f6:	f413 7f00 	tst.w	r3, #512	@ 0x200
 80016fa:	d024      	beq.n	8001746 <I2C_IsErrorOccurred+0x10e>
    error_code |= HAL_I2C_ERROR_ARLO;
 80016fc:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001700:	6823      	ldr	r3, [r4, #0]
 8001702:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001706:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 8001708:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 800170a:	4620      	mov	r0, r4
 800170c:	f7ff ff65 	bl	80015da <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8001710:	6822      	ldr	r2, [r4, #0]
 8001712:	6853      	ldr	r3, [r2, #4]
 8001714:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8001718:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 800171c:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8001720:	f023 0301 	bic.w	r3, r3, #1
 8001724:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8001726:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001728:	4333      	orrs	r3, r6
 800172a:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800172c:	2320      	movs	r3, #32
 800172e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001732:	2300      	movs	r3, #0
 8001734:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 8001738:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800173c:	4628      	mov	r0, r5
 800173e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8001742:	2500      	movs	r5, #0
 8001744:	e7c2      	b.n	80016cc <I2C_IsErrorOccurred+0x94>
  if (status != HAL_OK)
 8001746:	2d00      	cmp	r5, #0
 8001748:	d0f8      	beq.n	800173c <I2C_IsErrorOccurred+0x104>
 800174a:	e7de      	b.n	800170a <I2C_IsErrorOccurred+0xd2>

0800174c <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800174c:	b570      	push	{r4, r5, r6, lr}
 800174e:	4604      	mov	r4, r0
 8001750:	460d      	mov	r5, r1
 8001752:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001754:	6823      	ldr	r3, [r4, #0]
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	f013 0f02 	tst.w	r3, #2
 800175c:	d122      	bne.n	80017a4 <I2C_WaitOnTXISFlagUntilTimeout+0x58>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800175e:	4632      	mov	r2, r6
 8001760:	4629      	mov	r1, r5
 8001762:	4620      	mov	r0, r4
 8001764:	f7ff ff68 	bl	8001638 <I2C_IsErrorOccurred>
 8001768:	b9f0      	cbnz	r0, 80017a8 <I2C_WaitOnTXISFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 800176a:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 800176e:	d0f1      	beq.n	8001754 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001770:	f7ff fdaa 	bl	80012c8 <HAL_GetTick>
 8001774:	1b80      	subs	r0, r0, r6
 8001776:	42a8      	cmp	r0, r5
 8001778:	d801      	bhi.n	800177e <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 800177a:	2d00      	cmp	r5, #0
 800177c:	d1ea      	bne.n	8001754 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800177e:	6823      	ldr	r3, [r4, #0]
 8001780:	699b      	ldr	r3, [r3, #24]
 8001782:	f013 0f02 	tst.w	r3, #2
 8001786:	d1e5      	bne.n	8001754 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001788:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800178a:	f043 0320 	orr.w	r3, r3, #32
 800178e:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001790:	2320      	movs	r3, #32
 8001792:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001796:	2300      	movs	r3, #0
 8001798:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 800179c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
          return HAL_ERROR;
 80017a0:	2001      	movs	r0, #1
 80017a2:	e000      	b.n	80017a6 <I2C_WaitOnTXISFlagUntilTimeout+0x5a>
  return HAL_OK;
 80017a4:	2000      	movs	r0, #0
}
 80017a6:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80017a8:	2001      	movs	r0, #1
 80017aa:	e7fc      	b.n	80017a6 <I2C_WaitOnTXISFlagUntilTimeout+0x5a>

080017ac <I2C_WaitOnFlagUntilTimeout>:
{
 80017ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80017b0:	4605      	mov	r5, r0
 80017b2:	4688      	mov	r8, r1
 80017b4:	4617      	mov	r7, r2
 80017b6:	461e      	mov	r6, r3
 80017b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80017bc:	682b      	ldr	r3, [r5, #0]
 80017be:	699c      	ldr	r4, [r3, #24]
 80017c0:	ea38 0404 	bics.w	r4, r8, r4
 80017c4:	bf0c      	ite	eq
 80017c6:	2301      	moveq	r3, #1
 80017c8:	2300      	movne	r3, #0
 80017ca:	42bb      	cmp	r3, r7
 80017cc:	d127      	bne.n	800181e <I2C_WaitOnFlagUntilTimeout+0x72>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80017ce:	464a      	mov	r2, r9
 80017d0:	4631      	mov	r1, r6
 80017d2:	4628      	mov	r0, r5
 80017d4:	f7ff ff30 	bl	8001638 <I2C_IsErrorOccurred>
 80017d8:	bb20      	cbnz	r0, 8001824 <I2C_WaitOnFlagUntilTimeout+0x78>
    if (Timeout != HAL_MAX_DELAY)
 80017da:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 80017de:	d0ed      	beq.n	80017bc <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017e0:	f7ff fd72 	bl	80012c8 <HAL_GetTick>
 80017e4:	eba0 0009 	sub.w	r0, r0, r9
 80017e8:	42b0      	cmp	r0, r6
 80017ea:	d801      	bhi.n	80017f0 <I2C_WaitOnFlagUntilTimeout+0x44>
 80017ec:	2e00      	cmp	r6, #0
 80017ee:	d1e5      	bne.n	80017bc <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80017f0:	682b      	ldr	r3, [r5, #0]
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	ea38 0303 	bics.w	r3, r8, r3
 80017f8:	bf0c      	ite	eq
 80017fa:	2301      	moveq	r3, #1
 80017fc:	2300      	movne	r3, #0
 80017fe:	42bb      	cmp	r3, r7
 8001800:	d1dc      	bne.n	80017bc <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001802:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8001804:	f043 0320 	orr.w	r3, r3, #32
 8001808:	646b      	str	r3, [r5, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800180a:	2320      	movs	r3, #32
 800180c:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001810:	2300      	movs	r3, #0
 8001812:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 8001816:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
          return HAL_ERROR;
 800181a:	2001      	movs	r0, #1
 800181c:	e000      	b.n	8001820 <I2C_WaitOnFlagUntilTimeout+0x74>
  return HAL_OK;
 800181e:	2000      	movs	r0, #0
}
 8001820:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return HAL_ERROR;
 8001824:	2001      	movs	r0, #1
 8001826:	e7fb      	b.n	8001820 <I2C_WaitOnFlagUntilTimeout+0x74>

08001828 <I2C_RequestMemoryWrite>:
{
 8001828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800182c:	b082      	sub	sp, #8
 800182e:	4604      	mov	r4, r0
 8001830:	4690      	mov	r8, r2
 8001832:	461d      	mov	r5, r3
 8001834:	9e08      	ldr	r6, [sp, #32]
 8001836:	9f09      	ldr	r7, [sp, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001838:	4b19      	ldr	r3, [pc, #100]	@ (80018a0 <I2C_RequestMemoryWrite+0x78>)
 800183a:	9300      	str	r3, [sp, #0]
 800183c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001840:	b2ea      	uxtb	r2, r5
 8001842:	f7ff fedb 	bl	80015fc <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001846:	463a      	mov	r2, r7
 8001848:	4631      	mov	r1, r6
 800184a:	4620      	mov	r0, r4
 800184c:	f7ff ff7e 	bl	800174c <I2C_WaitOnTXISFlagUntilTimeout>
 8001850:	b9f8      	cbnz	r0, 8001892 <I2C_RequestMemoryWrite+0x6a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001852:	2d01      	cmp	r5, #1
 8001854:	d10e      	bne.n	8001874 <I2C_RequestMemoryWrite+0x4c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001856:	6823      	ldr	r3, [r4, #0]
 8001858:	fa5f f288 	uxtb.w	r2, r8
 800185c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800185e:	9700      	str	r7, [sp, #0]
 8001860:	4633      	mov	r3, r6
 8001862:	2200      	movs	r2, #0
 8001864:	2180      	movs	r1, #128	@ 0x80
 8001866:	4620      	mov	r0, r4
 8001868:	f7ff ffa0 	bl	80017ac <I2C_WaitOnFlagUntilTimeout>
 800186c:	b9a8      	cbnz	r0, 800189a <I2C_RequestMemoryWrite+0x72>
}
 800186e:	b002      	add	sp, #8
 8001870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001874:	6823      	ldr	r3, [r4, #0]
 8001876:	ea4f 2218 	mov.w	r2, r8, lsr #8
 800187a:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800187c:	463a      	mov	r2, r7
 800187e:	4631      	mov	r1, r6
 8001880:	4620      	mov	r0, r4
 8001882:	f7ff ff63 	bl	800174c <I2C_WaitOnTXISFlagUntilTimeout>
 8001886:	b930      	cbnz	r0, 8001896 <I2C_RequestMemoryWrite+0x6e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001888:	6823      	ldr	r3, [r4, #0]
 800188a:	fa5f f288 	uxtb.w	r2, r8
 800188e:	629a      	str	r2, [r3, #40]	@ 0x28
 8001890:	e7e5      	b.n	800185e <I2C_RequestMemoryWrite+0x36>
    return HAL_ERROR;
 8001892:	2001      	movs	r0, #1
 8001894:	e7eb      	b.n	800186e <I2C_RequestMemoryWrite+0x46>
      return HAL_ERROR;
 8001896:	2001      	movs	r0, #1
 8001898:	e7e9      	b.n	800186e <I2C_RequestMemoryWrite+0x46>
    return HAL_ERROR;
 800189a:	2001      	movs	r0, #1
 800189c:	e7e7      	b.n	800186e <I2C_RequestMemoryWrite+0x46>
 800189e:	bf00      	nop
 80018a0:	80002000 	.word	0x80002000

080018a4 <I2C_RequestMemoryRead>:
{
 80018a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018a8:	b082      	sub	sp, #8
 80018aa:	4604      	mov	r4, r0
 80018ac:	4690      	mov	r8, r2
 80018ae:	461d      	mov	r5, r3
 80018b0:	9e08      	ldr	r6, [sp, #32]
 80018b2:	9f09      	ldr	r7, [sp, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80018b4:	4b18      	ldr	r3, [pc, #96]	@ (8001918 <I2C_RequestMemoryRead+0x74>)
 80018b6:	9300      	str	r3, [sp, #0]
 80018b8:	2300      	movs	r3, #0
 80018ba:	b2ea      	uxtb	r2, r5
 80018bc:	f7ff fe9e 	bl	80015fc <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018c0:	463a      	mov	r2, r7
 80018c2:	4631      	mov	r1, r6
 80018c4:	4620      	mov	r0, r4
 80018c6:	f7ff ff41 	bl	800174c <I2C_WaitOnTXISFlagUntilTimeout>
 80018ca:	b9f8      	cbnz	r0, 800190c <I2C_RequestMemoryRead+0x68>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80018cc:	2d01      	cmp	r5, #1
 80018ce:	d10e      	bne.n	80018ee <I2C_RequestMemoryRead+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80018d0:	6823      	ldr	r3, [r4, #0]
 80018d2:	fa5f f288 	uxtb.w	r2, r8
 80018d6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80018d8:	9700      	str	r7, [sp, #0]
 80018da:	4633      	mov	r3, r6
 80018dc:	2200      	movs	r2, #0
 80018de:	2140      	movs	r1, #64	@ 0x40
 80018e0:	4620      	mov	r0, r4
 80018e2:	f7ff ff63 	bl	80017ac <I2C_WaitOnFlagUntilTimeout>
 80018e6:	b9a8      	cbnz	r0, 8001914 <I2C_RequestMemoryRead+0x70>
}
 80018e8:	b002      	add	sp, #8
 80018ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80018ee:	6823      	ldr	r3, [r4, #0]
 80018f0:	ea4f 2218 	mov.w	r2, r8, lsr #8
 80018f4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018f6:	463a      	mov	r2, r7
 80018f8:	4631      	mov	r1, r6
 80018fa:	4620      	mov	r0, r4
 80018fc:	f7ff ff26 	bl	800174c <I2C_WaitOnTXISFlagUntilTimeout>
 8001900:	b930      	cbnz	r0, 8001910 <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001902:	6823      	ldr	r3, [r4, #0]
 8001904:	fa5f f288 	uxtb.w	r2, r8
 8001908:	629a      	str	r2, [r3, #40]	@ 0x28
 800190a:	e7e5      	b.n	80018d8 <I2C_RequestMemoryRead+0x34>
    return HAL_ERROR;
 800190c:	2001      	movs	r0, #1
 800190e:	e7eb      	b.n	80018e8 <I2C_RequestMemoryRead+0x44>
      return HAL_ERROR;
 8001910:	2001      	movs	r0, #1
 8001912:	e7e9      	b.n	80018e8 <I2C_RequestMemoryRead+0x44>
    return HAL_ERROR;
 8001914:	2001      	movs	r0, #1
 8001916:	e7e7      	b.n	80018e8 <I2C_RequestMemoryRead+0x44>
 8001918:	80002000 	.word	0x80002000

0800191c <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800191c:	b570      	push	{r4, r5, r6, lr}
 800191e:	4604      	mov	r4, r0
 8001920:	460d      	mov	r5, r1
 8001922:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001924:	e004      	b.n	8001930 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001926:	6823      	ldr	r3, [r4, #0]
 8001928:	699b      	ldr	r3, [r3, #24]
 800192a:	f013 0f20 	tst.w	r3, #32
 800192e:	d012      	beq.n	8001956 <I2C_WaitOnSTOPFlagUntilTimeout+0x3a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001930:	6823      	ldr	r3, [r4, #0]
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	f013 0f20 	tst.w	r3, #32
 8001938:	d11b      	bne.n	8001972 <I2C_WaitOnSTOPFlagUntilTimeout+0x56>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800193a:	4632      	mov	r2, r6
 800193c:	4629      	mov	r1, r5
 800193e:	4620      	mov	r0, r4
 8001940:	f7ff fe7a 	bl	8001638 <I2C_IsErrorOccurred>
 8001944:	b9b8      	cbnz	r0, 8001976 <I2C_WaitOnSTOPFlagUntilTimeout+0x5a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001946:	f7ff fcbf 	bl	80012c8 <HAL_GetTick>
 800194a:	1b80      	subs	r0, r0, r6
 800194c:	42a8      	cmp	r0, r5
 800194e:	d8ea      	bhi.n	8001926 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
 8001950:	2d00      	cmp	r5, #0
 8001952:	d1ed      	bne.n	8001930 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
 8001954:	e7e7      	b.n	8001926 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001956:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001958:	f043 0320 	orr.w	r3, r3, #32
 800195c:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800195e:	2320      	movs	r3, #32
 8001960:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001964:	2300      	movs	r3, #0
 8001966:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 800196a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return HAL_ERROR;
 800196e:	2001      	movs	r0, #1
 8001970:	e000      	b.n	8001974 <I2C_WaitOnSTOPFlagUntilTimeout+0x58>
  return HAL_OK;
 8001972:	2000      	movs	r0, #0
}
 8001974:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001976:	2001      	movs	r0, #1
 8001978:	e7fc      	b.n	8001974 <I2C_WaitOnSTOPFlagUntilTimeout+0x58>

0800197a <HAL_I2C_Init>:
  if (hi2c == NULL)
 800197a:	2800      	cmp	r0, #0
 800197c:	d05f      	beq.n	8001a3e <HAL_I2C_Init+0xc4>
{
 800197e:	b510      	push	{r4, lr}
 8001980:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001982:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8001986:	2b00      	cmp	r3, #0
 8001988:	d048      	beq.n	8001a1c <HAL_I2C_Init+0xa2>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800198a:	2324      	movs	r3, #36	@ 0x24
 800198c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8001990:	6822      	ldr	r2, [r4, #0]
 8001992:	6813      	ldr	r3, [r2, #0]
 8001994:	f023 0301 	bic.w	r3, r3, #1
 8001998:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800199a:	6863      	ldr	r3, [r4, #4]
 800199c:	6822      	ldr	r2, [r4, #0]
 800199e:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 80019a2:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80019a4:	6822      	ldr	r2, [r4, #0]
 80019a6:	6893      	ldr	r3, [r2, #8]
 80019a8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80019ac:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80019ae:	68e3      	ldr	r3, [r4, #12]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d038      	beq.n	8001a26 <HAL_I2C_Init+0xac>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80019b4:	68a3      	ldr	r3, [r4, #8]
 80019b6:	6822      	ldr	r2, [r4, #0]
 80019b8:	f443 4304 	orr.w	r3, r3, #33792	@ 0x8400
 80019bc:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80019be:	68e3      	ldr	r3, [r4, #12]
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d036      	beq.n	8001a32 <HAL_I2C_Init+0xb8>
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80019c4:	6822      	ldr	r2, [r4, #0]
 80019c6:	6853      	ldr	r3, [r2, #4]
 80019c8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80019cc:	6053      	str	r3, [r2, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80019ce:	6822      	ldr	r2, [r4, #0]
 80019d0:	6853      	ldr	r3, [r2, #4]
 80019d2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80019d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80019da:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80019dc:	6822      	ldr	r2, [r4, #0]
 80019de:	68d3      	ldr	r3, [r2, #12]
 80019e0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80019e4:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019e6:	6923      	ldr	r3, [r4, #16]
 80019e8:	6962      	ldr	r2, [r4, #20]
 80019ea:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80019ec:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019ee:	6822      	ldr	r2, [r4, #0]
 80019f0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80019f4:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80019f6:	69e3      	ldr	r3, [r4, #28]
 80019f8:	6a21      	ldr	r1, [r4, #32]
 80019fa:	6822      	ldr	r2, [r4, #0]
 80019fc:	430b      	orrs	r3, r1
 80019fe:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001a00:	6822      	ldr	r2, [r4, #0]
 8001a02:	6813      	ldr	r3, [r2, #0]
 8001a04:	f043 0301 	orr.w	r3, r3, #1
 8001a08:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a0a:	2000      	movs	r0, #0
 8001a0c:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001a0e:	2320      	movs	r3, #32
 8001a10:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a14:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a16:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 8001a1a:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001a1c:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 8001a20:	f000 fa28 	bl	8001e74 <HAL_I2C_MspInit>
 8001a24:	e7b1      	b.n	800198a <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001a26:	68a3      	ldr	r3, [r4, #8]
 8001a28:	6822      	ldr	r2, [r4, #0]
 8001a2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a2e:	6093      	str	r3, [r2, #8]
 8001a30:	e7c5      	b.n	80019be <HAL_I2C_Init+0x44>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001a32:	6822      	ldr	r2, [r4, #0]
 8001a34:	6853      	ldr	r3, [r2, #4]
 8001a36:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001a3a:	6053      	str	r3, [r2, #4]
 8001a3c:	e7c7      	b.n	80019ce <HAL_I2C_Init+0x54>
    return HAL_ERROR;
 8001a3e:	2001      	movs	r0, #1
}
 8001a40:	4770      	bx	lr

08001a42 <HAL_I2C_Mem_Write>:
{
 8001a42:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a46:	b083      	sub	sp, #12
 8001a48:	460e      	mov	r6, r1
 8001a4a:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 8001a4e:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a50:	f890 1041 	ldrb.w	r1, [r0, #65]	@ 0x41
 8001a54:	2920      	cmp	r1, #32
 8001a56:	f040 80bb 	bne.w	8001bd0 <HAL_I2C_Mem_Write+0x18e>
 8001a5a:	4604      	mov	r4, r0
 8001a5c:	4691      	mov	r9, r2
 8001a5e:	4698      	mov	r8, r3
    if ((pData == NULL) || (Size == 0U))
 8001a60:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8001a62:	b1cb      	cbz	r3, 8001a98 <HAL_I2C_Mem_Write+0x56>
 8001a64:	f1ba 0f00 	cmp.w	sl, #0
 8001a68:	d016      	beq.n	8001a98 <HAL_I2C_Mem_Write+0x56>
    __HAL_LOCK(hi2c);
 8001a6a:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	f000 80b2 	beq.w	8001bd8 <HAL_I2C_Mem_Write+0x196>
 8001a74:	f04f 0b01 	mov.w	fp, #1
 8001a78:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8001a7c:	f7ff fc24 	bl	80012c8 <HAL_GetTick>
 8001a80:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a82:	9000      	str	r0, [sp, #0]
 8001a84:	2319      	movs	r3, #25
 8001a86:	465a      	mov	r2, fp
 8001a88:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a8c:	4620      	mov	r0, r4
 8001a8e:	f7ff fe8d 	bl	80017ac <I2C_WaitOnFlagUntilTimeout>
 8001a92:	b130      	cbz	r0, 8001aa2 <HAL_I2C_Mem_Write+0x60>
      return HAL_ERROR;
 8001a94:	2001      	movs	r0, #1
 8001a96:	e09c      	b.n	8001bd2 <HAL_I2C_Mem_Write+0x190>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001a98:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a9c:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8001a9e:	2001      	movs	r0, #1
 8001aa0:	e097      	b.n	8001bd2 <HAL_I2C_Mem_Write+0x190>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001aa2:	2321      	movs	r3, #33	@ 0x21
 8001aa4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001aa8:	2340      	movs	r3, #64	@ 0x40
 8001aaa:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 8001ab2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8001ab4:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001ab6:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001aba:	6363      	str	r3, [r4, #52]	@ 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001abc:	9701      	str	r7, [sp, #4]
 8001abe:	9500      	str	r5, [sp, #0]
 8001ac0:	4643      	mov	r3, r8
 8001ac2:	464a      	mov	r2, r9
 8001ac4:	4631      	mov	r1, r6
 8001ac6:	4620      	mov	r0, r4
 8001ac8:	f7ff feae 	bl	8001828 <I2C_RequestMemoryWrite>
 8001acc:	b970      	cbnz	r0, 8001aec <HAL_I2C_Mem_Write+0xaa>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ace:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	2bff      	cmp	r3, #255	@ 0xff
 8001ad4:	d90f      	bls.n	8001af6 <HAL_I2C_Mem_Write+0xb4>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ad6:	22ff      	movs	r2, #255	@ 0xff
 8001ad8:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001ada:	2300      	movs	r3, #0
 8001adc:	9300      	str	r3, [sp, #0]
 8001ade:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001ae2:	4631      	mov	r1, r6
 8001ae4:	4620      	mov	r0, r4
 8001ae6:	f7ff fd89 	bl	80015fc <I2C_TransferConfig>
 8001aea:	e021      	b.n	8001b30 <HAL_I2C_Mem_Write+0xee>
      __HAL_UNLOCK(hi2c);
 8001aec:	2300      	movs	r3, #0
 8001aee:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8001af2:	4658      	mov	r0, fp
 8001af4:	e06d      	b.n	8001bd2 <HAL_I2C_Mem_Write+0x190>
      hi2c->XferSize = hi2c->XferCount;
 8001af6:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8001af8:	b292      	uxth	r2, r2
 8001afa:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001afc:	2300      	movs	r3, #0
 8001afe:	9300      	str	r3, [sp, #0]
 8001b00:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b04:	b2d2      	uxtb	r2, r2
 8001b06:	4631      	mov	r1, r6
 8001b08:	4620      	mov	r0, r4
 8001b0a:	f7ff fd77 	bl	80015fc <I2C_TransferConfig>
 8001b0e:	e00f      	b.n	8001b30 <HAL_I2C_Mem_Write+0xee>
          hi2c->XferSize = hi2c->XferCount;
 8001b10:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8001b12:	b292      	uxth	r2, r2
 8001b14:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b16:	2300      	movs	r3, #0
 8001b18:	9300      	str	r3, [sp, #0]
 8001b1a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b1e:	b2d2      	uxtb	r2, r2
 8001b20:	4631      	mov	r1, r6
 8001b22:	4620      	mov	r0, r4
 8001b24:	f7ff fd6a 	bl	80015fc <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8001b28:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d033      	beq.n	8001b98 <HAL_I2C_Mem_Write+0x156>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b30:	463a      	mov	r2, r7
 8001b32:	4629      	mov	r1, r5
 8001b34:	4620      	mov	r0, r4
 8001b36:	f7ff fe09 	bl	800174c <I2C_WaitOnTXISFlagUntilTimeout>
 8001b3a:	2800      	cmp	r0, #0
 8001b3c:	d14e      	bne.n	8001bdc <HAL_I2C_Mem_Write+0x19a>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001b3e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001b40:	6823      	ldr	r3, [r4, #0]
 8001b42:	7812      	ldrb	r2, [r2, #0]
 8001b44:	629a      	str	r2, [r3, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8001b46:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001b48:	3301      	adds	r3, #1
 8001b4a:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8001b4c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	3b01      	subs	r3, #1
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8001b56:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8001b58:	3b01      	subs	r3, #1
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b5e:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8001b60:	b292      	uxth	r2, r2
 8001b62:	2a00      	cmp	r2, #0
 8001b64:	d0e0      	beq.n	8001b28 <HAL_I2C_Mem_Write+0xe6>
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d1de      	bne.n	8001b28 <HAL_I2C_Mem_Write+0xe6>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b6a:	9700      	str	r7, [sp, #0]
 8001b6c:	462b      	mov	r3, r5
 8001b6e:	2200      	movs	r2, #0
 8001b70:	2180      	movs	r1, #128	@ 0x80
 8001b72:	4620      	mov	r0, r4
 8001b74:	f7ff fe1a 	bl	80017ac <I2C_WaitOnFlagUntilTimeout>
 8001b78:	bb90      	cbnz	r0, 8001be0 <HAL_I2C_Mem_Write+0x19e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b7a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	2bff      	cmp	r3, #255	@ 0xff
 8001b80:	d9c6      	bls.n	8001b10 <HAL_I2C_Mem_Write+0xce>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b82:	22ff      	movs	r2, #255	@ 0xff
 8001b84:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b86:	2300      	movs	r3, #0
 8001b88:	9300      	str	r3, [sp, #0]
 8001b8a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001b8e:	4631      	mov	r1, r6
 8001b90:	4620      	mov	r0, r4
 8001b92:	f7ff fd33 	bl	80015fc <I2C_TransferConfig>
 8001b96:	e7c7      	b.n	8001b28 <HAL_I2C_Mem_Write+0xe6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b98:	463a      	mov	r2, r7
 8001b9a:	4629      	mov	r1, r5
 8001b9c:	4620      	mov	r0, r4
 8001b9e:	f7ff febd 	bl	800191c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001ba2:	b9f8      	cbnz	r0, 8001be4 <HAL_I2C_Mem_Write+0x1a2>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ba4:	6823      	ldr	r3, [r4, #0]
 8001ba6:	2220      	movs	r2, #32
 8001ba8:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001baa:	6821      	ldr	r1, [r4, #0]
 8001bac:	684b      	ldr	r3, [r1, #4]
 8001bae:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8001bb2:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 8001bb6:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8001bba:	f023 0301 	bic.w	r3, r3, #1
 8001bbe:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001bc0:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 8001bca:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    return HAL_OK;
 8001bce:	e000      	b.n	8001bd2 <HAL_I2C_Mem_Write+0x190>
    return HAL_BUSY;
 8001bd0:	2002      	movs	r0, #2
}
 8001bd2:	b003      	add	sp, #12
 8001bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8001bd8:	2002      	movs	r0, #2
 8001bda:	e7fa      	b.n	8001bd2 <HAL_I2C_Mem_Write+0x190>
        return HAL_ERROR;
 8001bdc:	2001      	movs	r0, #1
 8001bde:	e7f8      	b.n	8001bd2 <HAL_I2C_Mem_Write+0x190>
          return HAL_ERROR;
 8001be0:	2001      	movs	r0, #1
 8001be2:	e7f6      	b.n	8001bd2 <HAL_I2C_Mem_Write+0x190>
      return HAL_ERROR;
 8001be4:	2001      	movs	r0, #1
 8001be6:	e7f4      	b.n	8001bd2 <HAL_I2C_Mem_Write+0x190>

08001be8 <HAL_I2C_Mem_Read>:
{
 8001be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bec:	b083      	sub	sp, #12
 8001bee:	460e      	mov	r6, r1
 8001bf0:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 8001bf4:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bf6:	f890 1041 	ldrb.w	r1, [r0, #65]	@ 0x41
 8001bfa:	2920      	cmp	r1, #32
 8001bfc:	f040 80bc 	bne.w	8001d78 <HAL_I2C_Mem_Read+0x190>
 8001c00:	4604      	mov	r4, r0
 8001c02:	4691      	mov	r9, r2
 8001c04:	4698      	mov	r8, r3
    if ((pData == NULL) || (Size == 0U))
 8001c06:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8001c08:	b1cb      	cbz	r3, 8001c3e <HAL_I2C_Mem_Read+0x56>
 8001c0a:	f1ba 0f00 	cmp.w	sl, #0
 8001c0e:	d016      	beq.n	8001c3e <HAL_I2C_Mem_Read+0x56>
    __HAL_LOCK(hi2c);
 8001c10:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	f000 80b3 	beq.w	8001d80 <HAL_I2C_Mem_Read+0x198>
 8001c1a:	f04f 0b01 	mov.w	fp, #1
 8001c1e:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8001c22:	f7ff fb51 	bl	80012c8 <HAL_GetTick>
 8001c26:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001c28:	9000      	str	r0, [sp, #0]
 8001c2a:	2319      	movs	r3, #25
 8001c2c:	465a      	mov	r2, fp
 8001c2e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c32:	4620      	mov	r0, r4
 8001c34:	f7ff fdba 	bl	80017ac <I2C_WaitOnFlagUntilTimeout>
 8001c38:	b130      	cbz	r0, 8001c48 <HAL_I2C_Mem_Read+0x60>
      return HAL_ERROR;
 8001c3a:	2001      	movs	r0, #1
 8001c3c:	e09d      	b.n	8001d7a <HAL_I2C_Mem_Read+0x192>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001c3e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c42:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8001c44:	2001      	movs	r0, #1
 8001c46:	e098      	b.n	8001d7a <HAL_I2C_Mem_Read+0x192>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001c48:	2322      	movs	r3, #34	@ 0x22
 8001c4a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001c4e:	2340      	movs	r3, #64	@ 0x40
 8001c50:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c54:	2300      	movs	r3, #0
 8001c56:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 8001c58:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8001c5a:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001c5c:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001c60:	6363      	str	r3, [r4, #52]	@ 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001c62:	9701      	str	r7, [sp, #4]
 8001c64:	9500      	str	r5, [sp, #0]
 8001c66:	4643      	mov	r3, r8
 8001c68:	464a      	mov	r2, r9
 8001c6a:	4631      	mov	r1, r6
 8001c6c:	4620      	mov	r0, r4
 8001c6e:	f7ff fe19 	bl	80018a4 <I2C_RequestMemoryRead>
 8001c72:	b970      	cbnz	r0, 8001c92 <HAL_I2C_Mem_Read+0xaa>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c74:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	2bff      	cmp	r3, #255	@ 0xff
 8001c7a:	d90f      	bls.n	8001c9c <HAL_I2C_Mem_Read+0xb4>
      hi2c->XferSize = 1U;
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c80:	4b43      	ldr	r3, [pc, #268]	@ (8001d90 <HAL_I2C_Mem_Read+0x1a8>)
 8001c82:	9300      	str	r3, [sp, #0]
 8001c84:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001c88:	4631      	mov	r1, r6
 8001c8a:	4620      	mov	r0, r4
 8001c8c:	f7ff fcb6 	bl	80015fc <I2C_TransferConfig>
 8001c90:	e021      	b.n	8001cd6 <HAL_I2C_Mem_Read+0xee>
      __HAL_UNLOCK(hi2c);
 8001c92:	2300      	movs	r3, #0
 8001c94:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8001c98:	4658      	mov	r0, fp
 8001c9a:	e06e      	b.n	8001d7a <HAL_I2C_Mem_Read+0x192>
      hi2c->XferSize = hi2c->XferCount;
 8001c9c:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8001c9e:	b292      	uxth	r2, r2
 8001ca0:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ca2:	4b3b      	ldr	r3, [pc, #236]	@ (8001d90 <HAL_I2C_Mem_Read+0x1a8>)
 8001ca4:	9300      	str	r3, [sp, #0]
 8001ca6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001caa:	b2d2      	uxtb	r2, r2
 8001cac:	4631      	mov	r1, r6
 8001cae:	4620      	mov	r0, r4
 8001cb0:	f7ff fca4 	bl	80015fc <I2C_TransferConfig>
 8001cb4:	e00f      	b.n	8001cd6 <HAL_I2C_Mem_Read+0xee>
          hi2c->XferSize = hi2c->XferCount;
 8001cb6:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8001cb8:	b292      	uxth	r2, r2
 8001cba:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	9300      	str	r3, [sp, #0]
 8001cc0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001cc4:	b2d2      	uxtb	r2, r2
 8001cc6:	4631      	mov	r1, r6
 8001cc8:	4620      	mov	r0, r4
 8001cca:	f7ff fc97 	bl	80015fc <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8001cce:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d034      	beq.n	8001d40 <HAL_I2C_Mem_Read+0x158>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001cd6:	9700      	str	r7, [sp, #0]
 8001cd8:	462b      	mov	r3, r5
 8001cda:	2200      	movs	r2, #0
 8001cdc:	2104      	movs	r1, #4
 8001cde:	4620      	mov	r0, r4
 8001ce0:	f7ff fd64 	bl	80017ac <I2C_WaitOnFlagUntilTimeout>
 8001ce4:	2800      	cmp	r0, #0
 8001ce6:	d14d      	bne.n	8001d84 <HAL_I2C_Mem_Read+0x19c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001ce8:	6823      	ldr	r3, [r4, #0]
 8001cea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001cec:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001cee:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8001cf0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8001cf6:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 8001cf8:	3a01      	subs	r2, #1
 8001cfa:	b292      	uxth	r2, r2
 8001cfc:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8001cfe:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	3b01      	subs	r3, #1
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001d08:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d0de      	beq.n	8001cce <HAL_I2C_Mem_Read+0xe6>
 8001d10:	2a00      	cmp	r2, #0
 8001d12:	d1dc      	bne.n	8001cce <HAL_I2C_Mem_Read+0xe6>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001d14:	9700      	str	r7, [sp, #0]
 8001d16:	462b      	mov	r3, r5
 8001d18:	2180      	movs	r1, #128	@ 0x80
 8001d1a:	4620      	mov	r0, r4
 8001d1c:	f7ff fd46 	bl	80017ac <I2C_WaitOnFlagUntilTimeout>
 8001d20:	bb90      	cbnz	r0, 8001d88 <HAL_I2C_Mem_Read+0x1a0>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d22:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	2bff      	cmp	r3, #255	@ 0xff
 8001d28:	d9c5      	bls.n	8001cb6 <HAL_I2C_Mem_Read+0xce>
          hi2c->XferSize = 1U;
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001d2e:	2300      	movs	r3, #0
 8001d30:	9300      	str	r3, [sp, #0]
 8001d32:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001d36:	4631      	mov	r1, r6
 8001d38:	4620      	mov	r0, r4
 8001d3a:	f7ff fc5f 	bl	80015fc <I2C_TransferConfig>
 8001d3e:	e7c6      	b.n	8001cce <HAL_I2C_Mem_Read+0xe6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d40:	463a      	mov	r2, r7
 8001d42:	4629      	mov	r1, r5
 8001d44:	4620      	mov	r0, r4
 8001d46:	f7ff fde9 	bl	800191c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d4a:	b9f8      	cbnz	r0, 8001d8c <HAL_I2C_Mem_Read+0x1a4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d4c:	6823      	ldr	r3, [r4, #0]
 8001d4e:	2220      	movs	r2, #32
 8001d50:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001d52:	6821      	ldr	r1, [r4, #0]
 8001d54:	684b      	ldr	r3, [r1, #4]
 8001d56:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8001d5a:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 8001d5e:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8001d62:	f023 0301 	bic.w	r3, r3, #1
 8001d66:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001d68:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 8001d72:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    return HAL_OK;
 8001d76:	e000      	b.n	8001d7a <HAL_I2C_Mem_Read+0x192>
    return HAL_BUSY;
 8001d78:	2002      	movs	r0, #2
}
 8001d7a:	b003      	add	sp, #12
 8001d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8001d80:	2002      	movs	r0, #2
 8001d82:	e7fa      	b.n	8001d7a <HAL_I2C_Mem_Read+0x192>
        return HAL_ERROR;
 8001d84:	2001      	movs	r0, #1
 8001d86:	e7f8      	b.n	8001d7a <HAL_I2C_Mem_Read+0x192>
          return HAL_ERROR;
 8001d88:	2001      	movs	r0, #1
 8001d8a:	e7f6      	b.n	8001d7a <HAL_I2C_Mem_Read+0x192>
      return HAL_ERROR;
 8001d8c:	2001      	movs	r0, #1
 8001d8e:	e7f4      	b.n	8001d7a <HAL_I2C_Mem_Read+0x192>
 8001d90:	80002400 	.word	0x80002400

08001d94 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001d94:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d96:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8001d9a:	2a20      	cmp	r2, #32
 8001d9c:	d123      	bne.n	8001de6 <HAL_I2CEx_ConfigAnalogFilter+0x52>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d9e:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8001da2:	2a01      	cmp	r2, #1
 8001da4:	d021      	beq.n	8001dea <HAL_I2CEx_ConfigAnalogFilter+0x56>
 8001da6:	2201      	movs	r2, #1
 8001da8:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001dac:	2224      	movs	r2, #36	@ 0x24
 8001dae:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001db2:	6800      	ldr	r0, [r0, #0]
 8001db4:	6802      	ldr	r2, [r0, #0]
 8001db6:	f022 0201 	bic.w	r2, r2, #1
 8001dba:	6002      	str	r2, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001dbc:	6818      	ldr	r0, [r3, #0]
 8001dbe:	6802      	ldr	r2, [r0, #0]
 8001dc0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001dc4:	6002      	str	r2, [r0, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001dc6:	6818      	ldr	r0, [r3, #0]
 8001dc8:	6802      	ldr	r2, [r0, #0]
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	6002      	str	r2, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001dce:	6819      	ldr	r1, [r3, #0]
 8001dd0:	680a      	ldr	r2, [r1, #0]
 8001dd2:	f042 0201 	orr.w	r2, r2, #1
 8001dd6:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dd8:	2220      	movs	r2, #32
 8001dda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dde:	2000      	movs	r0, #0
 8001de0:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40

    return HAL_OK;
 8001de4:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8001de6:	2002      	movs	r0, #2
 8001de8:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8001dea:	2002      	movs	r0, #2
  }
}
 8001dec:	4770      	bx	lr

08001dee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001dee:	4603      	mov	r3, r0

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001df0:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8001df4:	2a20      	cmp	r2, #32
 8001df6:	d121      	bne.n	8001e3c <HAL_I2CEx_ConfigDigitalFilter+0x4e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001df8:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8001dfc:	2a01      	cmp	r2, #1
 8001dfe:	d01f      	beq.n	8001e40 <HAL_I2CEx_ConfigDigitalFilter+0x52>
 8001e00:	2201      	movs	r2, #1
 8001e02:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e06:	2224      	movs	r2, #36	@ 0x24
 8001e08:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e0c:	6800      	ldr	r0, [r0, #0]
 8001e0e:	6802      	ldr	r2, [r0, #0]
 8001e10:	f022 0201 	bic.w	r2, r2, #1
 8001e14:	6002      	str	r2, [r0, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001e16:	6818      	ldr	r0, [r3, #0]
 8001e18:	6802      	ldr	r2, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001e1a:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001e1e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001e22:	6002      	str	r2, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e24:	6819      	ldr	r1, [r3, #0]
 8001e26:	680a      	ldr	r2, [r1, #0]
 8001e28:	f042 0201 	orr.w	r2, r2, #1
 8001e2c:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e2e:	2220      	movs	r2, #32
 8001e30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e34:	2000      	movs	r0, #0
 8001e36:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40

    return HAL_OK;
 8001e3a:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8001e3c:	2002      	movs	r0, #2
 8001e3e:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8001e40:	2002      	movs	r0, #2
  }
}
 8001e42:	4770      	bx	lr

08001e44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e44:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e46:	4b0a      	ldr	r3, [pc, #40]	@ (8001e70 <HAL_MspInit+0x2c>)
 8001e48:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001e4a:	f042 0201 	orr.w	r2, r2, #1
 8001e4e:	661a      	str	r2, [r3, #96]	@ 0x60
 8001e50:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001e52:	f002 0201 	and.w	r2, r2, #1
 8001e56:	9200      	str	r2, [sp, #0]
 8001e58:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e5a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001e5c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001e60:	659a      	str	r2, [r3, #88]	@ 0x58
 8001e62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e68:	9301      	str	r3, [sp, #4]
 8001e6a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e6c:	b002      	add	sp, #8
 8001e6e:	4770      	bx	lr
 8001e70:	40021000 	.word	0x40021000

08001e74 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e74:	b510      	push	{r4, lr}
 8001e76:	b0aa      	sub	sp, #168	@ 0xa8
 8001e78:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	9125      	str	r1, [sp, #148]	@ 0x94
 8001e7e:	9126      	str	r1, [sp, #152]	@ 0x98
 8001e80:	9127      	str	r1, [sp, #156]	@ 0x9c
 8001e82:	9128      	str	r1, [sp, #160]	@ 0xa0
 8001e84:	9129      	str	r1, [sp, #164]	@ 0xa4
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e86:	2288      	movs	r2, #136	@ 0x88
 8001e88:	a803      	add	r0, sp, #12
 8001e8a:	f001 fcdd 	bl	8003848 <memset>
  if(hi2c->Instance==I2C1)
 8001e8e:	6822      	ldr	r2, [r4, #0]
 8001e90:	4b18      	ldr	r3, [pc, #96]	@ (8001ef4 <HAL_I2C_MspInit+0x80>)
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d001      	beq.n	8001e9a <HAL_I2C_MspInit+0x26>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001e96:	b02a      	add	sp, #168	@ 0xa8
 8001e98:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001e9a:	2340      	movs	r3, #64	@ 0x40
 8001e9c:	9303      	str	r3, [sp, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e9e:	a803      	add	r0, sp, #12
 8001ea0:	f000 feb8 	bl	8002c14 <HAL_RCCEx_PeriphCLKConfig>
 8001ea4:	bb10      	cbnz	r0, 8001eec <HAL_I2C_MspInit+0x78>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ea6:	4c14      	ldr	r4, [pc, #80]	@ (8001ef8 <HAL_I2C_MspInit+0x84>)
 8001ea8:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001eaa:	f043 0302 	orr.w	r3, r3, #2
 8001eae:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8001eb0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	9301      	str	r3, [sp, #4]
 8001eb8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001eba:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001ebe:	9325      	str	r3, [sp, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ec0:	2312      	movs	r3, #18
 8001ec2:	9326      	str	r3, [sp, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	9327      	str	r3, [sp, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	9328      	str	r3, [sp, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ecc:	2304      	movs	r3, #4
 8001ece:	9329      	str	r3, [sp, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ed0:	a925      	add	r1, sp, #148	@ 0x94
 8001ed2:	480a      	ldr	r0, [pc, #40]	@ (8001efc <HAL_I2C_MspInit+0x88>)
 8001ed4:	f7ff fa7c 	bl	80013d0 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ed8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001eda:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001ede:	65a3      	str	r3, [r4, #88]	@ 0x58
 8001ee0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001ee2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ee6:	9302      	str	r3, [sp, #8]
 8001ee8:	9b02      	ldr	r3, [sp, #8]
}
 8001eea:	e7d4      	b.n	8001e96 <HAL_I2C_MspInit+0x22>
      Error_Handler();
 8001eec:	f7fe ffee 	bl	8000ecc <Error_Handler>
 8001ef0:	e7d9      	b.n	8001ea6 <HAL_I2C_MspInit+0x32>
 8001ef2:	bf00      	nop
 8001ef4:	40005400 	.word	0x40005400
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	48000400 	.word	0x48000400

08001f00 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f00:	b510      	push	{r4, lr}
 8001f02:	b0aa      	sub	sp, #168	@ 0xa8
 8001f04:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f06:	2100      	movs	r1, #0
 8001f08:	9125      	str	r1, [sp, #148]	@ 0x94
 8001f0a:	9126      	str	r1, [sp, #152]	@ 0x98
 8001f0c:	9127      	str	r1, [sp, #156]	@ 0x9c
 8001f0e:	9128      	str	r1, [sp, #160]	@ 0xa0
 8001f10:	9129      	str	r1, [sp, #164]	@ 0xa4
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f12:	2288      	movs	r2, #136	@ 0x88
 8001f14:	a803      	add	r0, sp, #12
 8001f16:	f001 fc97 	bl	8003848 <memset>
  if(huart->Instance==USART2)
 8001f1a:	6822      	ldr	r2, [r4, #0]
 8001f1c:	4b18      	ldr	r3, [pc, #96]	@ (8001f80 <HAL_UART_MspInit+0x80>)
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d001      	beq.n	8001f26 <HAL_UART_MspInit+0x26>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001f22:	b02a      	add	sp, #168	@ 0xa8
 8001f24:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001f26:	2302      	movs	r3, #2
 8001f28:	9303      	str	r3, [sp, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f2a:	a803      	add	r0, sp, #12
 8001f2c:	f000 fe72 	bl	8002c14 <HAL_RCCEx_PeriphCLKConfig>
 8001f30:	bb10      	cbnz	r0, 8001f78 <HAL_UART_MspInit+0x78>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f32:	4b14      	ldr	r3, [pc, #80]	@ (8001f84 <HAL_UART_MspInit+0x84>)
 8001f34:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001f36:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8001f3a:	659a      	str	r2, [r3, #88]	@ 0x58
 8001f3c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001f3e:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8001f42:	9201      	str	r2, [sp, #4]
 8001f44:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f46:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001f48:	f042 0201 	orr.w	r2, r2, #1
 8001f4c:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001f4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f50:	f003 0301 	and.w	r3, r3, #1
 8001f54:	9302      	str	r3, [sp, #8]
 8001f56:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f58:	230c      	movs	r3, #12
 8001f5a:	9325      	str	r3, [sp, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	9326      	str	r3, [sp, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f60:	2300      	movs	r3, #0
 8001f62:	9327      	str	r3, [sp, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f64:	2303      	movs	r3, #3
 8001f66:	9328      	str	r3, [sp, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f68:	2307      	movs	r3, #7
 8001f6a:	9329      	str	r3, [sp, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f6c:	a925      	add	r1, sp, #148	@ 0x94
 8001f6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f72:	f7ff fa2d 	bl	80013d0 <HAL_GPIO_Init>
}
 8001f76:	e7d4      	b.n	8001f22 <HAL_UART_MspInit+0x22>
      Error_Handler();
 8001f78:	f7fe ffa8 	bl	8000ecc <Error_Handler>
 8001f7c:	e7d9      	b.n	8001f32 <HAL_UART_MspInit+0x32>
 8001f7e:	bf00      	nop
 8001f80:	40004400 	.word	0x40004400
 8001f84:	40021000 	.word	0x40021000

08001f88 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001f88:	4b02      	ldr	r3, [pc, #8]	@ (8001f94 <HAL_PWREx_GetVoltageRange+0xc>)
 8001f8a:	6818      	ldr	r0, [r3, #0]
#endif
}
 8001f8c:	f400 60c0 	and.w	r0, r0, #1536	@ 0x600
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	40007000 	.word	0x40007000

08001f98 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f98:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8001f9c:	d00f      	beq.n	8001fbe <HAL_PWREx_ControlVoltageScaling+0x26>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f9e:	4b1f      	ldr	r3, [pc, #124]	@ (800201c <HAL_PWREx_ControlVoltageScaling+0x84>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001fa6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001faa:	d034      	beq.n	8002016 <HAL_PWREx_ControlVoltageScaling+0x7e>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001fac:	4a1b      	ldr	r2, [pc, #108]	@ (800201c <HAL_PWREx_ControlVoltageScaling+0x84>)
 8001fae:	6813      	ldr	r3, [r2, #0]
 8001fb0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001fb4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fb8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001fba:	2000      	movs	r0, #0
 8001fbc:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fbe:	4b17      	ldr	r3, [pc, #92]	@ (800201c <HAL_PWREx_ControlVoltageScaling+0x84>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001fc6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001fca:	d020      	beq.n	800200e <HAL_PWREx_ControlVoltageScaling+0x76>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fcc:	4a13      	ldr	r2, [pc, #76]	@ (800201c <HAL_PWREx_ControlVoltageScaling+0x84>)
 8001fce:	6813      	ldr	r3, [r2, #0]
 8001fd0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001fd4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fd8:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001fda:	4b11      	ldr	r3, [pc, #68]	@ (8002020 <HAL_PWREx_ControlVoltageScaling+0x88>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2232      	movs	r2, #50	@ 0x32
 8001fe0:	fb02 f303 	mul.w	r3, r2, r3
 8001fe4:	4a0f      	ldr	r2, [pc, #60]	@ (8002024 <HAL_PWREx_ControlVoltageScaling+0x8c>)
 8001fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fea:	0c9b      	lsrs	r3, r3, #18
 8001fec:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fee:	e000      	b.n	8001ff2 <HAL_PWREx_ControlVoltageScaling+0x5a>
        wait_loop_index--;
 8001ff0:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ff2:	4a0a      	ldr	r2, [pc, #40]	@ (800201c <HAL_PWREx_ControlVoltageScaling+0x84>)
 8001ff4:	6952      	ldr	r2, [r2, #20]
 8001ff6:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8001ffa:	d001      	beq.n	8002000 <HAL_PWREx_ControlVoltageScaling+0x68>
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d1f7      	bne.n	8001ff0 <HAL_PWREx_ControlVoltageScaling+0x58>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002000:	4b06      	ldr	r3, [pc, #24]	@ (800201c <HAL_PWREx_ControlVoltageScaling+0x84>)
 8002002:	695b      	ldr	r3, [r3, #20]
 8002004:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8002008:	d103      	bne.n	8002012 <HAL_PWREx_ControlVoltageScaling+0x7a>
  return HAL_OK;
 800200a:	2000      	movs	r0, #0
 800200c:	4770      	bx	lr
 800200e:	2000      	movs	r0, #0
 8002010:	4770      	bx	lr
        return HAL_TIMEOUT;
 8002012:	2003      	movs	r0, #3
 8002014:	4770      	bx	lr
  return HAL_OK;
 8002016:	2000      	movs	r0, #0
}
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	40007000 	.word	0x40007000
 8002020:	2000000c 	.word	0x2000000c
 8002024:	431bde83 	.word	0x431bde83

08002028 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002028:	b530      	push	{r4, r5, lr}
 800202a:	b083      	sub	sp, #12
 800202c:	4604      	mov	r4, r0
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800202e:	4b20      	ldr	r3, [pc, #128]	@ (80020b0 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8002030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002032:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8002036:	d00b      	beq.n	8002050 <RCC_SetFlashLatencyFromMSIRange+0x28>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002038:	f7ff ffa6 	bl	8001f88 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800203c:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8002040:	d017      	beq.n	8002072 <RCC_SetFlashLatencyFromMSIRange+0x4a>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002042:	2c80      	cmp	r4, #128	@ 0x80
 8002044:	d81f      	bhi.n	8002086 <RCC_SetFlashLatencyFromMSIRange+0x5e>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002046:	d02d      	beq.n	80020a4 <RCC_SetFlashLatencyFromMSIRange+0x7c>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002048:	2c70      	cmp	r4, #112	@ 0x70
 800204a:	d02d      	beq.n	80020a8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800204c:	2100      	movs	r1, #0
 800204e:	e01b      	b.n	8002088 <RCC_SetFlashLatencyFromMSIRange+0x60>
    __HAL_RCC_PWR_CLK_ENABLE();
 8002050:	4d17      	ldr	r5, [pc, #92]	@ (80020b0 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8002052:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8002054:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002058:	65ab      	str	r3, [r5, #88]	@ 0x58
 800205a:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 800205c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002060:	9301      	str	r3, [sp, #4]
 8002062:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8002064:	f7ff ff90 	bl	8001f88 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8002068:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 800206a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800206e:	65ab      	str	r3, [r5, #88]	@ 0x58
 8002070:	e7e4      	b.n	800203c <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 8002072:	2c80      	cmp	r4, #128	@ 0x80
 8002074:	d903      	bls.n	800207e <RCC_SetFlashLatencyFromMSIRange+0x56>
      if(msirange > RCC_MSIRANGE_10)
 8002076:	2ca0      	cmp	r4, #160	@ 0xa0
 8002078:	d903      	bls.n	8002082 <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_2; /* 2WS */
 800207a:	2102      	movs	r1, #2
 800207c:	e004      	b.n	8002088 <RCC_SetFlashLatencyFromMSIRange+0x60>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800207e:	2100      	movs	r1, #0
 8002080:	e002      	b.n	8002088 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 8002082:	2101      	movs	r1, #1
 8002084:	e000      	b.n	8002088 <RCC_SetFlashLatencyFromMSIRange+0x60>
      latency = FLASH_LATENCY_3; /* 3WS */
 8002086:	2103      	movs	r1, #3
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002088:	4a0a      	ldr	r2, [pc, #40]	@ (80020b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>)
 800208a:	6813      	ldr	r3, [r2, #0]
 800208c:	f023 0307 	bic.w	r3, r3, #7
 8002090:	430b      	orrs	r3, r1
 8002092:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002094:	6813      	ldr	r3, [r2, #0]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	428b      	cmp	r3, r1
 800209c:	d106      	bne.n	80020ac <RCC_SetFlashLatencyFromMSIRange+0x84>
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800209e:	2000      	movs	r0, #0
}
 80020a0:	b003      	add	sp, #12
 80020a2:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_2; /* 2WS */
 80020a4:	2102      	movs	r1, #2
 80020a6:	e7ef      	b.n	8002088 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 80020a8:	2101      	movs	r1, #1
 80020aa:	e7ed      	b.n	8002088 <RCC_SetFlashLatencyFromMSIRange+0x60>
    return HAL_ERROR;
 80020ac:	2001      	movs	r0, #1
 80020ae:	e7f7      	b.n	80020a0 <RCC_SetFlashLatencyFromMSIRange+0x78>
 80020b0:	40021000 	.word	0x40021000
 80020b4:	40022000 	.word	0x40022000

080020b8 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020b8:	4a25      	ldr	r2, [pc, #148]	@ (8002150 <HAL_RCC_GetSysClockFreq+0x98>)
 80020ba:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020bc:	68d2      	ldr	r2, [r2, #12]
 80020be:	f002 0203 	and.w	r2, r2, #3
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020c2:	f013 030c 	ands.w	r3, r3, #12
 80020c6:	d009      	beq.n	80020dc <HAL_RCC_GetSysClockFreq+0x24>
 80020c8:	2b0c      	cmp	r3, #12
 80020ca:	d005      	beq.n	80020d8 <HAL_RCC_GetSysClockFreq+0x20>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80020cc:	2b04      	cmp	r3, #4
 80020ce:	d03b      	beq.n	8002148 <HAL_RCC_GetSysClockFreq+0x90>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80020d0:	2b08      	cmp	r3, #8
 80020d2:	d03b      	beq.n	800214c <HAL_RCC_GetSysClockFreq+0x94>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80020d4:	2000      	movs	r0, #0
 80020d6:	e00f      	b.n	80020f8 <HAL_RCC_GetSysClockFreq+0x40>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80020d8:	2a01      	cmp	r2, #1
 80020da:	d1f7      	bne.n	80020cc <HAL_RCC_GetSysClockFreq+0x14>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80020dc:	4a1c      	ldr	r2, [pc, #112]	@ (8002150 <HAL_RCC_GetSysClockFreq+0x98>)
 80020de:	6812      	ldr	r2, [r2, #0]
 80020e0:	f012 0f08 	tst.w	r2, #8
 80020e4:	d10c      	bne.n	8002100 <HAL_RCC_GetSysClockFreq+0x48>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80020e6:	4a1a      	ldr	r2, [pc, #104]	@ (8002150 <HAL_RCC_GetSysClockFreq+0x98>)
 80020e8:	f8d2 2094 	ldr.w	r2, [r2, #148]	@ 0x94
 80020ec:	f3c2 2203 	ubfx	r2, r2, #8, #4
    msirange = MSIRangeTable[msirange];
 80020f0:	4918      	ldr	r1, [pc, #96]	@ (8002154 <HAL_RCC_GetSysClockFreq+0x9c>)
 80020f2:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020f6:	b113      	cbz	r3, 80020fe <HAL_RCC_GetSysClockFreq+0x46>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80020f8:	2b0c      	cmp	r3, #12
 80020fa:	d006      	beq.n	800210a <HAL_RCC_GetSysClockFreq+0x52>
 80020fc:	2000      	movs	r0, #0
}
 80020fe:	4770      	bx	lr
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002100:	4a13      	ldr	r2, [pc, #76]	@ (8002150 <HAL_RCC_GetSysClockFreq+0x98>)
 8002102:	6812      	ldr	r2, [r2, #0]
 8002104:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8002108:	e7f2      	b.n	80020f0 <HAL_RCC_GetSysClockFreq+0x38>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800210a:	4b11      	ldr	r3, [pc, #68]	@ (8002150 <HAL_RCC_GetSysClockFreq+0x98>)
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8002112:	2b02      	cmp	r3, #2
 8002114:	d016      	beq.n	8002144 <HAL_RCC_GetSysClockFreq+0x8c>
 8002116:	2b03      	cmp	r3, #3
 8002118:	d100      	bne.n	800211c <HAL_RCC_GetSysClockFreq+0x64>
      pllvco = HSE_VALUE;
 800211a:	480f      	ldr	r0, [pc, #60]	@ (8002158 <HAL_RCC_GetSysClockFreq+0xa0>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800211c:	490c      	ldr	r1, [pc, #48]	@ (8002150 <HAL_RCC_GetSysClockFreq+0x98>)
 800211e:	68ca      	ldr	r2, [r1, #12]
 8002120:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8002124:	3201      	adds	r2, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002126:	68cb      	ldr	r3, [r1, #12]
 8002128:	f3c3 2306 	ubfx	r3, r3, #8, #7
 800212c:	fb00 f303 	mul.w	r3, r0, r3
 8002130:	fbb3 f3f2 	udiv	r3, r3, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002134:	68c8      	ldr	r0, [r1, #12]
 8002136:	f3c0 6041 	ubfx	r0, r0, #25, #2
 800213a:	3001      	adds	r0, #1
 800213c:	0040      	lsls	r0, r0, #1
    sysclockfreq = pllvco / pllr;
 800213e:	fbb3 f0f0 	udiv	r0, r3, r0
 8002142:	4770      	bx	lr
    switch (pllsource)
 8002144:	4805      	ldr	r0, [pc, #20]	@ (800215c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002146:	e7e9      	b.n	800211c <HAL_RCC_GetSysClockFreq+0x64>
    sysclockfreq = HSI_VALUE;
 8002148:	4804      	ldr	r0, [pc, #16]	@ (800215c <HAL_RCC_GetSysClockFreq+0xa4>)
 800214a:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 800214c:	4802      	ldr	r0, [pc, #8]	@ (8002158 <HAL_RCC_GetSysClockFreq+0xa0>)
 800214e:	4770      	bx	lr
 8002150:	40021000 	.word	0x40021000
 8002154:	080047d8 	.word	0x080047d8
 8002158:	007a1200 	.word	0x007a1200
 800215c:	00f42400 	.word	0x00f42400

08002160 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8002160:	2800      	cmp	r0, #0
 8002162:	f000 82f1 	beq.w	8002748 <HAL_RCC_OscConfig+0x5e8>
{
 8002166:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002168:	b083      	sub	sp, #12
 800216a:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800216c:	4b96      	ldr	r3, [pc, #600]	@ (80023c8 <HAL_RCC_OscConfig+0x268>)
 800216e:	689d      	ldr	r5, [r3, #8]
 8002170:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002174:	68de      	ldr	r6, [r3, #12]
 8002176:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800217a:	6803      	ldr	r3, [r0, #0]
 800217c:	f013 0f10 	tst.w	r3, #16
 8002180:	d05a      	beq.n	8002238 <HAL_RCC_OscConfig+0xd8>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002182:	b1e5      	cbz	r5, 80021be <HAL_RCC_OscConfig+0x5e>
 8002184:	2d0c      	cmp	r5, #12
 8002186:	d018      	beq.n	80021ba <HAL_RCC_OscConfig+0x5a>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002188:	69a3      	ldr	r3, [r4, #24]
 800218a:	2b00      	cmp	r3, #0
 800218c:	f000 80bb 	beq.w	8002306 <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_MSI_ENABLE();
 8002190:	4a8d      	ldr	r2, [pc, #564]	@ (80023c8 <HAL_RCC_OscConfig+0x268>)
 8002192:	6813      	ldr	r3, [r2, #0]
 8002194:	f043 0301 	orr.w	r3, r3, #1
 8002198:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800219a:	f7ff f895 	bl	80012c8 <HAL_GetTick>
 800219e:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021a0:	4b89      	ldr	r3, [pc, #548]	@ (80023c8 <HAL_RCC_OscConfig+0x268>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f013 0f02 	tst.w	r3, #2
 80021a8:	f040 809a 	bne.w	80022e0 <HAL_RCC_OscConfig+0x180>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021ac:	f7ff f88c 	bl	80012c8 <HAL_GetTick>
 80021b0:	1bc0      	subs	r0, r0, r7
 80021b2:	2802      	cmp	r0, #2
 80021b4:	d9f4      	bls.n	80021a0 <HAL_RCC_OscConfig+0x40>
            return HAL_TIMEOUT;
 80021b6:	2003      	movs	r0, #3
 80021b8:	e2d1      	b.n	800275e <HAL_RCC_OscConfig+0x5fe>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80021ba:	2e01      	cmp	r6, #1
 80021bc:	d1e4      	bne.n	8002188 <HAL_RCC_OscConfig+0x28>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021be:	4b82      	ldr	r3, [pc, #520]	@ (80023c8 <HAL_RCC_OscConfig+0x268>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f013 0f02 	tst.w	r3, #2
 80021c6:	d003      	beq.n	80021d0 <HAL_RCC_OscConfig+0x70>
 80021c8:	69a3      	ldr	r3, [r4, #24]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	f000 82be 	beq.w	800274c <HAL_RCC_OscConfig+0x5ec>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80021d0:	6a20      	ldr	r0, [r4, #32]
 80021d2:	4b7d      	ldr	r3, [pc, #500]	@ (80023c8 <HAL_RCC_OscConfig+0x268>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f013 0f08 	tst.w	r3, #8
 80021da:	d05b      	beq.n	8002294 <HAL_RCC_OscConfig+0x134>
 80021dc:	4b7a      	ldr	r3, [pc, #488]	@ (80023c8 <HAL_RCC_OscConfig+0x268>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021e4:	4298      	cmp	r0, r3
 80021e6:	d85c      	bhi.n	80022a2 <HAL_RCC_OscConfig+0x142>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021e8:	4b77      	ldr	r3, [pc, #476]	@ (80023c8 <HAL_RCC_OscConfig+0x268>)
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	f042 0208 	orr.w	r2, r2, #8
 80021f0:	601a      	str	r2, [r3, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80021f8:	6a21      	ldr	r1, [r4, #32]
 80021fa:	430a      	orrs	r2, r1
 80021fc:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021fe:	685a      	ldr	r2, [r3, #4]
 8002200:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8002204:	69e1      	ldr	r1, [r4, #28]
 8002206:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800220a:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800220c:	2d00      	cmp	r5, #0
 800220e:	d060      	beq.n	80022d2 <HAL_RCC_OscConfig+0x172>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002210:	f7ff ff52 	bl	80020b8 <HAL_RCC_GetSysClockFreq>
 8002214:	4b6c      	ldr	r3, [pc, #432]	@ (80023c8 <HAL_RCC_OscConfig+0x268>)
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800221c:	4a6b      	ldr	r2, [pc, #428]	@ (80023cc <HAL_RCC_OscConfig+0x26c>)
 800221e:	5cd3      	ldrb	r3, [r2, r3]
 8002220:	f003 031f 	and.w	r3, r3, #31
 8002224:	40d8      	lsrs	r0, r3
 8002226:	4b6a      	ldr	r3, [pc, #424]	@ (80023d0 <HAL_RCC_OscConfig+0x270>)
 8002228:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 800222a:	4b6a      	ldr	r3, [pc, #424]	@ (80023d4 <HAL_RCC_OscConfig+0x274>)
 800222c:	6818      	ldr	r0, [r3, #0]
 800222e:	f7ff f801 	bl	8001234 <HAL_InitTick>
        if(status != HAL_OK)
 8002232:	2800      	cmp	r0, #0
 8002234:	f040 8293 	bne.w	800275e <HAL_RCC_OscConfig+0x5fe>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002238:	6823      	ldr	r3, [r4, #0]
 800223a:	f013 0f01 	tst.w	r3, #1
 800223e:	f000 8081 	beq.w	8002344 <HAL_RCC_OscConfig+0x1e4>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002242:	2d08      	cmp	r5, #8
 8002244:	d075      	beq.n	8002332 <HAL_RCC_OscConfig+0x1d2>
 8002246:	2d0c      	cmp	r5, #12
 8002248:	d071      	beq.n	800232e <HAL_RCC_OscConfig+0x1ce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800224a:	6863      	ldr	r3, [r4, #4]
 800224c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002250:	f000 8097 	beq.w	8002382 <HAL_RCC_OscConfig+0x222>
 8002254:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002258:	f000 8099 	beq.w	800238e <HAL_RCC_OscConfig+0x22e>
 800225c:	4b5a      	ldr	r3, [pc, #360]	@ (80023c8 <HAL_RCC_OscConfig+0x268>)
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002264:	601a      	str	r2, [r3, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800226c:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800226e:	6863      	ldr	r3, [r4, #4]
 8002270:	2b00      	cmp	r3, #0
 8002272:	f000 8099 	beq.w	80023a8 <HAL_RCC_OscConfig+0x248>
        tickstart = HAL_GetTick();
 8002276:	f7ff f827 	bl	80012c8 <HAL_GetTick>
 800227a:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800227c:	4b52      	ldr	r3, [pc, #328]	@ (80023c8 <HAL_RCC_OscConfig+0x268>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002284:	d15e      	bne.n	8002344 <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002286:	f7ff f81f 	bl	80012c8 <HAL_GetTick>
 800228a:	1bc0      	subs	r0, r0, r7
 800228c:	2864      	cmp	r0, #100	@ 0x64
 800228e:	d9f5      	bls.n	800227c <HAL_RCC_OscConfig+0x11c>
            return HAL_TIMEOUT;
 8002290:	2003      	movs	r0, #3
 8002292:	e264      	b.n	800275e <HAL_RCC_OscConfig+0x5fe>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002294:	4b4c      	ldr	r3, [pc, #304]	@ (80023c8 <HAL_RCC_OscConfig+0x268>)
 8002296:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800229a:	091b      	lsrs	r3, r3, #4
 800229c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80022a0:	e7a0      	b.n	80021e4 <HAL_RCC_OscConfig+0x84>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022a2:	f7ff fec1 	bl	8002028 <RCC_SetFlashLatencyFromMSIRange>
 80022a6:	2800      	cmp	r0, #0
 80022a8:	f040 8252 	bne.w	8002750 <HAL_RCC_OscConfig+0x5f0>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022ac:	4b46      	ldr	r3, [pc, #280]	@ (80023c8 <HAL_RCC_OscConfig+0x268>)
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	f042 0208 	orr.w	r2, r2, #8
 80022b4:	601a      	str	r2, [r3, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80022bc:	6a21      	ldr	r1, [r4, #32]
 80022be:	430a      	orrs	r2, r1
 80022c0:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022c2:	685a      	ldr	r2, [r3, #4]
 80022c4:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 80022c8:	69e1      	ldr	r1, [r4, #28]
 80022ca:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80022ce:	605a      	str	r2, [r3, #4]
 80022d0:	e79e      	b.n	8002210 <HAL_RCC_OscConfig+0xb0>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022d2:	6a20      	ldr	r0, [r4, #32]
 80022d4:	f7ff fea8 	bl	8002028 <RCC_SetFlashLatencyFromMSIRange>
 80022d8:	2800      	cmp	r0, #0
 80022da:	d099      	beq.n	8002210 <HAL_RCC_OscConfig+0xb0>
              return HAL_ERROR;
 80022dc:	2001      	movs	r0, #1
 80022de:	e23e      	b.n	800275e <HAL_RCC_OscConfig+0x5fe>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022e0:	4b39      	ldr	r3, [pc, #228]	@ (80023c8 <HAL_RCC_OscConfig+0x268>)
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	f042 0208 	orr.w	r2, r2, #8
 80022e8:	601a      	str	r2, [r3, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80022f0:	6a21      	ldr	r1, [r4, #32]
 80022f2:	430a      	orrs	r2, r1
 80022f4:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022f6:	685a      	ldr	r2, [r3, #4]
 80022f8:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 80022fc:	69e1      	ldr	r1, [r4, #28]
 80022fe:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002302:	605a      	str	r2, [r3, #4]
 8002304:	e798      	b.n	8002238 <HAL_RCC_OscConfig+0xd8>
        __HAL_RCC_MSI_DISABLE();
 8002306:	4a30      	ldr	r2, [pc, #192]	@ (80023c8 <HAL_RCC_OscConfig+0x268>)
 8002308:	6813      	ldr	r3, [r2, #0]
 800230a:	f023 0301 	bic.w	r3, r3, #1
 800230e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002310:	f7fe ffda 	bl	80012c8 <HAL_GetTick>
 8002314:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002316:	4b2c      	ldr	r3, [pc, #176]	@ (80023c8 <HAL_RCC_OscConfig+0x268>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f013 0f02 	tst.w	r3, #2
 800231e:	d08b      	beq.n	8002238 <HAL_RCC_OscConfig+0xd8>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002320:	f7fe ffd2 	bl	80012c8 <HAL_GetTick>
 8002324:	1bc0      	subs	r0, r0, r7
 8002326:	2802      	cmp	r0, #2
 8002328:	d9f5      	bls.n	8002316 <HAL_RCC_OscConfig+0x1b6>
            return HAL_TIMEOUT;
 800232a:	2003      	movs	r0, #3
 800232c:	e217      	b.n	800275e <HAL_RCC_OscConfig+0x5fe>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800232e:	2e03      	cmp	r6, #3
 8002330:	d18b      	bne.n	800224a <HAL_RCC_OscConfig+0xea>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002332:	4b25      	ldr	r3, [pc, #148]	@ (80023c8 <HAL_RCC_OscConfig+0x268>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800233a:	d003      	beq.n	8002344 <HAL_RCC_OscConfig+0x1e4>
 800233c:	6863      	ldr	r3, [r4, #4]
 800233e:	2b00      	cmp	r3, #0
 8002340:	f000 8208 	beq.w	8002754 <HAL_RCC_OscConfig+0x5f4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002344:	6823      	ldr	r3, [r4, #0]
 8002346:	f013 0f02 	tst.w	r3, #2
 800234a:	d058      	beq.n	80023fe <HAL_RCC_OscConfig+0x29e>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800234c:	2d04      	cmp	r5, #4
 800234e:	d045      	beq.n	80023dc <HAL_RCC_OscConfig+0x27c>
 8002350:	2d0c      	cmp	r5, #12
 8002352:	d041      	beq.n	80023d8 <HAL_RCC_OscConfig+0x278>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002354:	68e3      	ldr	r3, [r4, #12]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d077      	beq.n	800244a <HAL_RCC_OscConfig+0x2ea>
        __HAL_RCC_HSI_ENABLE();
 800235a:	4a1b      	ldr	r2, [pc, #108]	@ (80023c8 <HAL_RCC_OscConfig+0x268>)
 800235c:	6813      	ldr	r3, [r2, #0]
 800235e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002362:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002364:	f7fe ffb0 	bl	80012c8 <HAL_GetTick>
 8002368:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800236a:	4b17      	ldr	r3, [pc, #92]	@ (80023c8 <HAL_RCC_OscConfig+0x268>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8002372:	d161      	bne.n	8002438 <HAL_RCC_OscConfig+0x2d8>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002374:	f7fe ffa8 	bl	80012c8 <HAL_GetTick>
 8002378:	1b80      	subs	r0, r0, r6
 800237a:	2802      	cmp	r0, #2
 800237c:	d9f5      	bls.n	800236a <HAL_RCC_OscConfig+0x20a>
            return HAL_TIMEOUT;
 800237e:	2003      	movs	r0, #3
 8002380:	e1ed      	b.n	800275e <HAL_RCC_OscConfig+0x5fe>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002382:	4a11      	ldr	r2, [pc, #68]	@ (80023c8 <HAL_RCC_OscConfig+0x268>)
 8002384:	6813      	ldr	r3, [r2, #0]
 8002386:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800238a:	6013      	str	r3, [r2, #0]
 800238c:	e76f      	b.n	800226e <HAL_RCC_OscConfig+0x10e>
 800238e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002392:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800239c:	601a      	str	r2, [r3, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80023a4:	601a      	str	r2, [r3, #0]
 80023a6:	e762      	b.n	800226e <HAL_RCC_OscConfig+0x10e>
        tickstart = HAL_GetTick();
 80023a8:	f7fe ff8e 	bl	80012c8 <HAL_GetTick>
 80023ac:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023ae:	4b06      	ldr	r3, [pc, #24]	@ (80023c8 <HAL_RCC_OscConfig+0x268>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80023b6:	d0c5      	beq.n	8002344 <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023b8:	f7fe ff86 	bl	80012c8 <HAL_GetTick>
 80023bc:	1bc0      	subs	r0, r0, r7
 80023be:	2864      	cmp	r0, #100	@ 0x64
 80023c0:	d9f5      	bls.n	80023ae <HAL_RCC_OscConfig+0x24e>
            return HAL_TIMEOUT;
 80023c2:	2003      	movs	r0, #3
 80023c4:	e1cb      	b.n	800275e <HAL_RCC_OscConfig+0x5fe>
 80023c6:	bf00      	nop
 80023c8:	40021000 	.word	0x40021000
 80023cc:	08004810 	.word	0x08004810
 80023d0:	2000000c 	.word	0x2000000c
 80023d4:	20000008 	.word	0x20000008
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80023d8:	2e02      	cmp	r6, #2
 80023da:	d1bb      	bne.n	8002354 <HAL_RCC_OscConfig+0x1f4>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023dc:	4ba3      	ldr	r3, [pc, #652]	@ (800266c <HAL_RCC_OscConfig+0x50c>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 80023e4:	d003      	beq.n	80023ee <HAL_RCC_OscConfig+0x28e>
 80023e6:	68e3      	ldr	r3, [r4, #12]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f000 81b5 	beq.w	8002758 <HAL_RCC_OscConfig+0x5f8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ee:	4a9f      	ldr	r2, [pc, #636]	@ (800266c <HAL_RCC_OscConfig+0x50c>)
 80023f0:	6853      	ldr	r3, [r2, #4]
 80023f2:	f023 53f8 	bic.w	r3, r3, #520093696	@ 0x1f000000
 80023f6:	6921      	ldr	r1, [r4, #16]
 80023f8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80023fc:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023fe:	6823      	ldr	r3, [r4, #0]
 8002400:	f013 0f08 	tst.w	r3, #8
 8002404:	d04c      	beq.n	80024a0 <HAL_RCC_OscConfig+0x340>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002406:	6963      	ldr	r3, [r4, #20]
 8002408:	b39b      	cbz	r3, 8002472 <HAL_RCC_OscConfig+0x312>
      __HAL_RCC_LSI_ENABLE();
 800240a:	4a98      	ldr	r2, [pc, #608]	@ (800266c <HAL_RCC_OscConfig+0x50c>)
 800240c:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8002410:	f043 0301 	orr.w	r3, r3, #1
 8002414:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8002418:	f7fe ff56 	bl	80012c8 <HAL_GetTick>
 800241c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800241e:	4b93      	ldr	r3, [pc, #588]	@ (800266c <HAL_RCC_OscConfig+0x50c>)
 8002420:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002424:	f013 0f02 	tst.w	r3, #2
 8002428:	d13a      	bne.n	80024a0 <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800242a:	f7fe ff4d 	bl	80012c8 <HAL_GetTick>
 800242e:	1b80      	subs	r0, r0, r6
 8002430:	2802      	cmp	r0, #2
 8002432:	d9f4      	bls.n	800241e <HAL_RCC_OscConfig+0x2be>
          return HAL_TIMEOUT;
 8002434:	2003      	movs	r0, #3
 8002436:	e192      	b.n	800275e <HAL_RCC_OscConfig+0x5fe>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002438:	4a8c      	ldr	r2, [pc, #560]	@ (800266c <HAL_RCC_OscConfig+0x50c>)
 800243a:	6853      	ldr	r3, [r2, #4]
 800243c:	f023 53f8 	bic.w	r3, r3, #520093696	@ 0x1f000000
 8002440:	6921      	ldr	r1, [r4, #16]
 8002442:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002446:	6053      	str	r3, [r2, #4]
 8002448:	e7d9      	b.n	80023fe <HAL_RCC_OscConfig+0x29e>
        __HAL_RCC_HSI_DISABLE();
 800244a:	4a88      	ldr	r2, [pc, #544]	@ (800266c <HAL_RCC_OscConfig+0x50c>)
 800244c:	6813      	ldr	r3, [r2, #0]
 800244e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002452:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002454:	f7fe ff38 	bl	80012c8 <HAL_GetTick>
 8002458:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800245a:	4b84      	ldr	r3, [pc, #528]	@ (800266c <HAL_RCC_OscConfig+0x50c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8002462:	d0cc      	beq.n	80023fe <HAL_RCC_OscConfig+0x29e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002464:	f7fe ff30 	bl	80012c8 <HAL_GetTick>
 8002468:	1b80      	subs	r0, r0, r6
 800246a:	2802      	cmp	r0, #2
 800246c:	d9f5      	bls.n	800245a <HAL_RCC_OscConfig+0x2fa>
            return HAL_TIMEOUT;
 800246e:	2003      	movs	r0, #3
 8002470:	e175      	b.n	800275e <HAL_RCC_OscConfig+0x5fe>
      __HAL_RCC_LSI_DISABLE();
 8002472:	4a7e      	ldr	r2, [pc, #504]	@ (800266c <HAL_RCC_OscConfig+0x50c>)
 8002474:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8002478:	f023 0301 	bic.w	r3, r3, #1
 800247c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8002480:	f7fe ff22 	bl	80012c8 <HAL_GetTick>
 8002484:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002486:	4b79      	ldr	r3, [pc, #484]	@ (800266c <HAL_RCC_OscConfig+0x50c>)
 8002488:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800248c:	f013 0f02 	tst.w	r3, #2
 8002490:	d006      	beq.n	80024a0 <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002492:	f7fe ff19 	bl	80012c8 <HAL_GetTick>
 8002496:	1b80      	subs	r0, r0, r6
 8002498:	2802      	cmp	r0, #2
 800249a:	d9f4      	bls.n	8002486 <HAL_RCC_OscConfig+0x326>
          return HAL_TIMEOUT;
 800249c:	2003      	movs	r0, #3
 800249e:	e15e      	b.n	800275e <HAL_RCC_OscConfig+0x5fe>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024a0:	6823      	ldr	r3, [r4, #0]
 80024a2:	f013 0f04 	tst.w	r3, #4
 80024a6:	d07a      	beq.n	800259e <HAL_RCC_OscConfig+0x43e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80024a8:	4b70      	ldr	r3, [pc, #448]	@ (800266c <HAL_RCC_OscConfig+0x50c>)
 80024aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ac:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80024b0:	d136      	bne.n	8002520 <HAL_RCC_OscConfig+0x3c0>
      __HAL_RCC_PWR_CLK_ENABLE();
 80024b2:	4b6e      	ldr	r3, [pc, #440]	@ (800266c <HAL_RCC_OscConfig+0x50c>)
 80024b4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80024b6:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80024ba:	659a      	str	r2, [r3, #88]	@ 0x58
 80024bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024c2:	9301      	str	r3, [sp, #4]
 80024c4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80024c6:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024c8:	4b69      	ldr	r3, [pc, #420]	@ (8002670 <HAL_RCC_OscConfig+0x510>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80024d0:	d028      	beq.n	8002524 <HAL_RCC_OscConfig+0x3c4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024d2:	68a3      	ldr	r3, [r4, #8]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d039      	beq.n	800254c <HAL_RCC_OscConfig+0x3ec>
 80024d8:	2b05      	cmp	r3, #5
 80024da:	d03f      	beq.n	800255c <HAL_RCC_OscConfig+0x3fc>
 80024dc:	4b63      	ldr	r3, [pc, #396]	@ (800266c <HAL_RCC_OscConfig+0x50c>)
 80024de:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80024e2:	f022 0201 	bic.w	r2, r2, #1
 80024e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 80024ea:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80024ee:	f022 0204 	bic.w	r2, r2, #4
 80024f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024f6:	68a3      	ldr	r3, [r4, #8]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d03d      	beq.n	8002578 <HAL_RCC_OscConfig+0x418>
      tickstart = HAL_GetTick();
 80024fc:	f7fe fee4 	bl	80012c8 <HAL_GetTick>
 8002500:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002502:	4b5a      	ldr	r3, [pc, #360]	@ (800266c <HAL_RCC_OscConfig+0x50c>)
 8002504:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002508:	f013 0f02 	tst.w	r3, #2
 800250c:	d146      	bne.n	800259c <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800250e:	f7fe fedb 	bl	80012c8 <HAL_GetTick>
 8002512:	1bc0      	subs	r0, r0, r7
 8002514:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002518:	4298      	cmp	r0, r3
 800251a:	d9f2      	bls.n	8002502 <HAL_RCC_OscConfig+0x3a2>
          return HAL_TIMEOUT;
 800251c:	2003      	movs	r0, #3
 800251e:	e11e      	b.n	800275e <HAL_RCC_OscConfig+0x5fe>
    FlagStatus       pwrclkchanged = RESET;
 8002520:	2600      	movs	r6, #0
 8002522:	e7d1      	b.n	80024c8 <HAL_RCC_OscConfig+0x368>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002524:	4a52      	ldr	r2, [pc, #328]	@ (8002670 <HAL_RCC_OscConfig+0x510>)
 8002526:	6813      	ldr	r3, [r2, #0]
 8002528:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800252c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800252e:	f7fe fecb 	bl	80012c8 <HAL_GetTick>
 8002532:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002534:	4b4e      	ldr	r3, [pc, #312]	@ (8002670 <HAL_RCC_OscConfig+0x510>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800253c:	d1c9      	bne.n	80024d2 <HAL_RCC_OscConfig+0x372>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800253e:	f7fe fec3 	bl	80012c8 <HAL_GetTick>
 8002542:	1bc0      	subs	r0, r0, r7
 8002544:	2802      	cmp	r0, #2
 8002546:	d9f5      	bls.n	8002534 <HAL_RCC_OscConfig+0x3d4>
          return HAL_TIMEOUT;
 8002548:	2003      	movs	r0, #3
 800254a:	e108      	b.n	800275e <HAL_RCC_OscConfig+0x5fe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800254c:	4a47      	ldr	r2, [pc, #284]	@ (800266c <HAL_RCC_OscConfig+0x50c>)
 800254e:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8002552:	f043 0301 	orr.w	r3, r3, #1
 8002556:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800255a:	e7cc      	b.n	80024f6 <HAL_RCC_OscConfig+0x396>
 800255c:	4b43      	ldr	r3, [pc, #268]	@ (800266c <HAL_RCC_OscConfig+0x50c>)
 800255e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8002562:	f042 0204 	orr.w	r2, r2, #4
 8002566:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 800256a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800256e:	f042 0201 	orr.w	r2, r2, #1
 8002572:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8002576:	e7be      	b.n	80024f6 <HAL_RCC_OscConfig+0x396>
      tickstart = HAL_GetTick();
 8002578:	f7fe fea6 	bl	80012c8 <HAL_GetTick>
 800257c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800257e:	4b3b      	ldr	r3, [pc, #236]	@ (800266c <HAL_RCC_OscConfig+0x50c>)
 8002580:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002584:	f013 0f02 	tst.w	r3, #2
 8002588:	d008      	beq.n	800259c <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800258a:	f7fe fe9d 	bl	80012c8 <HAL_GetTick>
 800258e:	1bc0      	subs	r0, r0, r7
 8002590:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002594:	4298      	cmp	r0, r3
 8002596:	d9f2      	bls.n	800257e <HAL_RCC_OscConfig+0x41e>
          return HAL_TIMEOUT;
 8002598:	2003      	movs	r0, #3
 800259a:	e0e0      	b.n	800275e <HAL_RCC_OscConfig+0x5fe>
    if(pwrclkchanged == SET)
 800259c:	b9ee      	cbnz	r6, 80025da <HAL_RCC_OscConfig+0x47a>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800259e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f000 80db 	beq.w	800275c <HAL_RCC_OscConfig+0x5fc>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d01d      	beq.n	80025e6 <HAL_RCC_OscConfig+0x486>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025aa:	2d0c      	cmp	r5, #12
 80025ac:	f000 80dd 	beq.w	800276a <HAL_RCC_OscConfig+0x60a>
        __HAL_RCC_PLL_DISABLE();
 80025b0:	4a2e      	ldr	r2, [pc, #184]	@ (800266c <HAL_RCC_OscConfig+0x50c>)
 80025b2:	6813      	ldr	r3, [r2, #0]
 80025b4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80025b8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80025ba:	f7fe fe85 	bl	80012c8 <HAL_GetTick>
 80025be:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025c0:	4b2a      	ldr	r3, [pc, #168]	@ (800266c <HAL_RCC_OscConfig+0x50c>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80025c8:	f000 80b7 	beq.w	800273a <HAL_RCC_OscConfig+0x5da>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025cc:	f7fe fe7c 	bl	80012c8 <HAL_GetTick>
 80025d0:	1b00      	subs	r0, r0, r4
 80025d2:	2802      	cmp	r0, #2
 80025d4:	d9f4      	bls.n	80025c0 <HAL_RCC_OscConfig+0x460>
            return HAL_TIMEOUT;
 80025d6:	2003      	movs	r0, #3
 80025d8:	e0c1      	b.n	800275e <HAL_RCC_OscConfig+0x5fe>
      __HAL_RCC_PWR_CLK_DISABLE();
 80025da:	4a24      	ldr	r2, [pc, #144]	@ (800266c <HAL_RCC_OscConfig+0x50c>)
 80025dc:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80025de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80025e4:	e7db      	b.n	800259e <HAL_RCC_OscConfig+0x43e>
      pll_config = RCC->PLLCFGR;
 80025e6:	4b21      	ldr	r3, [pc, #132]	@ (800266c <HAL_RCC_OscConfig+0x50c>)
 80025e8:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ea:	f003 0103 	and.w	r1, r3, #3
 80025ee:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80025f0:	4291      	cmp	r1, r2
 80025f2:	d00f      	beq.n	8002614 <HAL_RCC_OscConfig+0x4b4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025f4:	2d0c      	cmp	r5, #12
 80025f6:	f000 80b4 	beq.w	8002762 <HAL_RCC_OscConfig+0x602>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80025fa:	4b1c      	ldr	r3, [pc, #112]	@ (800266c <HAL_RCC_OscConfig+0x50c>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f013 6f80 	tst.w	r3, #67108864	@ 0x4000000
 8002602:	f040 80b0 	bne.w	8002766 <HAL_RCC_OscConfig+0x606>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002606:	4b19      	ldr	r3, [pc, #100]	@ (800266c <HAL_RCC_OscConfig+0x50c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800260e:	d031      	beq.n	8002674 <HAL_RCC_OscConfig+0x514>
            return HAL_ERROR;
 8002610:	2001      	movs	r0, #1
 8002612:	e0a4      	b.n	800275e <HAL_RCC_OscConfig+0x5fe>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002614:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002618:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800261a:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800261c:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8002620:	d1e8      	bne.n	80025f4 <HAL_RCC_OscConfig+0x494>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002622:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002626:	6b61      	ldr	r1, [r4, #52]	@ 0x34
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002628:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 800262c:	d1e2      	bne.n	80025f4 <HAL_RCC_OscConfig+0x494>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800262e:	f403 3100 	and.w	r1, r3, #131072	@ 0x20000
 8002632:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8002634:	3a07      	subs	r2, #7
 8002636:	bf18      	it	ne
 8002638:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800263a:	4291      	cmp	r1, r2
 800263c:	d1da      	bne.n	80025f4 <HAL_RCC_OscConfig+0x494>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800263e:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 8002642:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8002644:	0852      	lsrs	r2, r2, #1
 8002646:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002648:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 800264c:	d1d2      	bne.n	80025f4 <HAL_RCC_OscConfig+0x494>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800264e:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 8002652:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002654:	0852      	lsrs	r2, r2, #1
 8002656:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002658:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 800265c:	d1ca      	bne.n	80025f4 <HAL_RCC_OscConfig+0x494>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800265e:	4b03      	ldr	r3, [pc, #12]	@ (800266c <HAL_RCC_OscConfig+0x50c>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002666:	d04e      	beq.n	8002706 <HAL_RCC_OscConfig+0x5a6>
  return HAL_OK;
 8002668:	2000      	movs	r0, #0
 800266a:	e078      	b.n	800275e <HAL_RCC_OscConfig+0x5fe>
 800266c:	40021000 	.word	0x40021000
 8002670:	40007000 	.word	0x40007000
            __HAL_RCC_PLL_DISABLE();
 8002674:	4a3e      	ldr	r2, [pc, #248]	@ (8002770 <HAL_RCC_OscConfig+0x610>)
 8002676:	6813      	ldr	r3, [r2, #0]
 8002678:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800267c:	6013      	str	r3, [r2, #0]
            tickstart = HAL_GetTick();
 800267e:	f7fe fe23 	bl	80012c8 <HAL_GetTick>
 8002682:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002684:	4b3a      	ldr	r3, [pc, #232]	@ (8002770 <HAL_RCC_OscConfig+0x610>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800268c:	d006      	beq.n	800269c <HAL_RCC_OscConfig+0x53c>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800268e:	f7fe fe1b 	bl	80012c8 <HAL_GetTick>
 8002692:	1b40      	subs	r0, r0, r5
 8002694:	2802      	cmp	r0, #2
 8002696:	d9f5      	bls.n	8002684 <HAL_RCC_OscConfig+0x524>
                return HAL_TIMEOUT;
 8002698:	2003      	movs	r0, #3
 800269a:	e060      	b.n	800275e <HAL_RCC_OscConfig+0x5fe>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800269c:	4a34      	ldr	r2, [pc, #208]	@ (8002770 <HAL_RCC_OscConfig+0x610>)
 800269e:	68d3      	ldr	r3, [r2, #12]
 80026a0:	4934      	ldr	r1, [pc, #208]	@ (8002774 <HAL_RCC_OscConfig+0x614>)
 80026a2:	4019      	ands	r1, r3
 80026a4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80026a6:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80026a8:	3801      	subs	r0, #1
 80026aa:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 80026ae:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80026b0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80026b4:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80026b6:	0840      	lsrs	r0, r0, #1
 80026b8:	3801      	subs	r0, #1
 80026ba:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 80026be:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80026c0:	0840      	lsrs	r0, r0, #1
 80026c2:	3801      	subs	r0, #1
 80026c4:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 80026c8:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80026ca:	0900      	lsrs	r0, r0, #4
 80026cc:	ea43 4340 	orr.w	r3, r3, r0, lsl #17
 80026d0:	4319      	orrs	r1, r3
 80026d2:	60d1      	str	r1, [r2, #12]
            __HAL_RCC_PLL_ENABLE();
 80026d4:	6813      	ldr	r3, [r2, #0]
 80026d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80026da:	6013      	str	r3, [r2, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026dc:	68d3      	ldr	r3, [r2, #12]
 80026de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80026e2:	60d3      	str	r3, [r2, #12]
            tickstart = HAL_GetTick();
 80026e4:	f7fe fdf0 	bl	80012c8 <HAL_GetTick>
 80026e8:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026ea:	4b21      	ldr	r3, [pc, #132]	@ (8002770 <HAL_RCC_OscConfig+0x610>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80026f2:	d106      	bne.n	8002702 <HAL_RCC_OscConfig+0x5a2>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026f4:	f7fe fde8 	bl	80012c8 <HAL_GetTick>
 80026f8:	1b00      	subs	r0, r0, r4
 80026fa:	2802      	cmp	r0, #2
 80026fc:	d9f5      	bls.n	80026ea <HAL_RCC_OscConfig+0x58a>
                return HAL_TIMEOUT;
 80026fe:	2003      	movs	r0, #3
 8002700:	e02d      	b.n	800275e <HAL_RCC_OscConfig+0x5fe>
  return HAL_OK;
 8002702:	2000      	movs	r0, #0
 8002704:	e02b      	b.n	800275e <HAL_RCC_OscConfig+0x5fe>
          __HAL_RCC_PLL_ENABLE();
 8002706:	4b1a      	ldr	r3, [pc, #104]	@ (8002770 <HAL_RCC_OscConfig+0x610>)
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800270e:	601a      	str	r2, [r3, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002710:	68da      	ldr	r2, [r3, #12]
 8002712:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8002716:	60da      	str	r2, [r3, #12]
          tickstart = HAL_GetTick();
 8002718:	f7fe fdd6 	bl	80012c8 <HAL_GetTick>
 800271c:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800271e:	4b14      	ldr	r3, [pc, #80]	@ (8002770 <HAL_RCC_OscConfig+0x610>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002726:	d106      	bne.n	8002736 <HAL_RCC_OscConfig+0x5d6>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002728:	f7fe fdce 	bl	80012c8 <HAL_GetTick>
 800272c:	1b03      	subs	r3, r0, r4
 800272e:	2b02      	cmp	r3, #2
 8002730:	d9f5      	bls.n	800271e <HAL_RCC_OscConfig+0x5be>
              return HAL_TIMEOUT;
 8002732:	2003      	movs	r0, #3
 8002734:	e013      	b.n	800275e <HAL_RCC_OscConfig+0x5fe>
  return HAL_OK;
 8002736:	2000      	movs	r0, #0
 8002738:	e011      	b.n	800275e <HAL_RCC_OscConfig+0x5fe>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800273a:	4a0d      	ldr	r2, [pc, #52]	@ (8002770 <HAL_RCC_OscConfig+0x610>)
 800273c:	68d1      	ldr	r1, [r2, #12]
 800273e:	4b0e      	ldr	r3, [pc, #56]	@ (8002778 <HAL_RCC_OscConfig+0x618>)
 8002740:	400b      	ands	r3, r1
 8002742:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8002744:	2000      	movs	r0, #0
 8002746:	e00a      	b.n	800275e <HAL_RCC_OscConfig+0x5fe>
    return HAL_ERROR;
 8002748:	2001      	movs	r0, #1
}
 800274a:	4770      	bx	lr
        return HAL_ERROR;
 800274c:	2001      	movs	r0, #1
 800274e:	e006      	b.n	800275e <HAL_RCC_OscConfig+0x5fe>
            return HAL_ERROR;
 8002750:	2001      	movs	r0, #1
 8002752:	e004      	b.n	800275e <HAL_RCC_OscConfig+0x5fe>
        return HAL_ERROR;
 8002754:	2001      	movs	r0, #1
 8002756:	e002      	b.n	800275e <HAL_RCC_OscConfig+0x5fe>
        return HAL_ERROR;
 8002758:	2001      	movs	r0, #1
 800275a:	e000      	b.n	800275e <HAL_RCC_OscConfig+0x5fe>
  return HAL_OK;
 800275c:	2000      	movs	r0, #0
}
 800275e:	b003      	add	sp, #12
 8002760:	bdf0      	pop	{r4, r5, r6, r7, pc}
          return HAL_ERROR;
 8002762:	2001      	movs	r0, #1
 8002764:	e7fb      	b.n	800275e <HAL_RCC_OscConfig+0x5fe>
            return HAL_ERROR;
 8002766:	2001      	movs	r0, #1
 8002768:	e7f9      	b.n	800275e <HAL_RCC_OscConfig+0x5fe>
        return HAL_ERROR;
 800276a:	2001      	movs	r0, #1
 800276c:	e7f7      	b.n	800275e <HAL_RCC_OscConfig+0x5fe>
 800276e:	bf00      	nop
 8002770:	40021000 	.word	0x40021000
 8002774:	f99d808c 	.word	0xf99d808c
 8002778:	feeefffc 	.word	0xfeeefffc

0800277c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800277c:	2800      	cmp	r0, #0
 800277e:	f000 80af 	beq.w	80028e0 <HAL_RCC_ClockConfig+0x164>
{
 8002782:	b570      	push	{r4, r5, r6, lr}
 8002784:	460d      	mov	r5, r1
 8002786:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002788:	4b59      	ldr	r3, [pc, #356]	@ (80028f0 <HAL_RCC_ClockConfig+0x174>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0307 	and.w	r3, r3, #7
 8002790:	428b      	cmp	r3, r1
 8002792:	d20b      	bcs.n	80027ac <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002794:	4a56      	ldr	r2, [pc, #344]	@ (80028f0 <HAL_RCC_ClockConfig+0x174>)
 8002796:	6813      	ldr	r3, [r2, #0]
 8002798:	f023 0307 	bic.w	r3, r3, #7
 800279c:	430b      	orrs	r3, r1
 800279e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027a0:	6813      	ldr	r3, [r2, #0]
 80027a2:	f003 0307 	and.w	r3, r3, #7
 80027a6:	428b      	cmp	r3, r1
 80027a8:	f040 809c 	bne.w	80028e4 <HAL_RCC_ClockConfig+0x168>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027ac:	6823      	ldr	r3, [r4, #0]
 80027ae:	f013 0f02 	tst.w	r3, #2
 80027b2:	d00c      	beq.n	80027ce <HAL_RCC_ClockConfig+0x52>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80027b4:	68a2      	ldr	r2, [r4, #8]
 80027b6:	4b4f      	ldr	r3, [pc, #316]	@ (80028f4 <HAL_RCC_ClockConfig+0x178>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027be:	429a      	cmp	r2, r3
 80027c0:	d905      	bls.n	80027ce <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027c2:	494c      	ldr	r1, [pc, #304]	@ (80028f4 <HAL_RCC_ClockConfig+0x178>)
 80027c4:	688b      	ldr	r3, [r1, #8]
 80027c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80027ca:	431a      	orrs	r2, r3
 80027cc:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027ce:	6823      	ldr	r3, [r4, #0]
 80027d0:	f013 0f01 	tst.w	r3, #1
 80027d4:	d039      	beq.n	800284a <HAL_RCC_ClockConfig+0xce>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027d6:	6863      	ldr	r3, [r4, #4]
 80027d8:	2b03      	cmp	r3, #3
 80027da:	d009      	beq.n	80027f0 <HAL_RCC_ClockConfig+0x74>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d026      	beq.n	800282e <HAL_RCC_ClockConfig+0xb2>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80027e0:	bb63      	cbnz	r3, 800283c <HAL_RCC_ClockConfig+0xc0>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027e2:	4a44      	ldr	r2, [pc, #272]	@ (80028f4 <HAL_RCC_ClockConfig+0x178>)
 80027e4:	6812      	ldr	r2, [r2, #0]
 80027e6:	f012 0f02 	tst.w	r2, #2
 80027ea:	d106      	bne.n	80027fa <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 80027ec:	2001      	movs	r0, #1
 80027ee:	e076      	b.n	80028de <HAL_RCC_ClockConfig+0x162>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027f0:	4a40      	ldr	r2, [pc, #256]	@ (80028f4 <HAL_RCC_ClockConfig+0x178>)
 80027f2:	6812      	ldr	r2, [r2, #0]
 80027f4:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 80027f8:	d076      	beq.n	80028e8 <HAL_RCC_ClockConfig+0x16c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027fa:	493e      	ldr	r1, [pc, #248]	@ (80028f4 <HAL_RCC_ClockConfig+0x178>)
 80027fc:	688a      	ldr	r2, [r1, #8]
 80027fe:	f022 0203 	bic.w	r2, r2, #3
 8002802:	4313      	orrs	r3, r2
 8002804:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002806:	f7fe fd5f 	bl	80012c8 <HAL_GetTick>
 800280a:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800280c:	4b39      	ldr	r3, [pc, #228]	@ (80028f4 <HAL_RCC_ClockConfig+0x178>)
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f003 030c 	and.w	r3, r3, #12
 8002814:	6862      	ldr	r2, [r4, #4]
 8002816:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800281a:	d016      	beq.n	800284a <HAL_RCC_ClockConfig+0xce>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800281c:	f7fe fd54 	bl	80012c8 <HAL_GetTick>
 8002820:	1b80      	subs	r0, r0, r6
 8002822:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002826:	4298      	cmp	r0, r3
 8002828:	d9f0      	bls.n	800280c <HAL_RCC_ClockConfig+0x90>
        return HAL_TIMEOUT;
 800282a:	2003      	movs	r0, #3
 800282c:	e057      	b.n	80028de <HAL_RCC_ClockConfig+0x162>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800282e:	4a31      	ldr	r2, [pc, #196]	@ (80028f4 <HAL_RCC_ClockConfig+0x178>)
 8002830:	6812      	ldr	r2, [r2, #0]
 8002832:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8002836:	d1e0      	bne.n	80027fa <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 8002838:	2001      	movs	r0, #1
 800283a:	e050      	b.n	80028de <HAL_RCC_ClockConfig+0x162>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800283c:	4a2d      	ldr	r2, [pc, #180]	@ (80028f4 <HAL_RCC_ClockConfig+0x178>)
 800283e:	6812      	ldr	r2, [r2, #0]
 8002840:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8002844:	d1d9      	bne.n	80027fa <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 8002846:	2001      	movs	r0, #1
 8002848:	e049      	b.n	80028de <HAL_RCC_ClockConfig+0x162>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800284a:	6823      	ldr	r3, [r4, #0]
 800284c:	f013 0f02 	tst.w	r3, #2
 8002850:	d00c      	beq.n	800286c <HAL_RCC_ClockConfig+0xf0>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002852:	68a2      	ldr	r2, [r4, #8]
 8002854:	4b27      	ldr	r3, [pc, #156]	@ (80028f4 <HAL_RCC_ClockConfig+0x178>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800285c:	429a      	cmp	r2, r3
 800285e:	d205      	bcs.n	800286c <HAL_RCC_ClockConfig+0xf0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002860:	4924      	ldr	r1, [pc, #144]	@ (80028f4 <HAL_RCC_ClockConfig+0x178>)
 8002862:	688b      	ldr	r3, [r1, #8]
 8002864:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002868:	431a      	orrs	r2, r3
 800286a:	608a      	str	r2, [r1, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800286c:	4b20      	ldr	r3, [pc, #128]	@ (80028f0 <HAL_RCC_ClockConfig+0x174>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0307 	and.w	r3, r3, #7
 8002874:	42ab      	cmp	r3, r5
 8002876:	d90a      	bls.n	800288e <HAL_RCC_ClockConfig+0x112>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002878:	4a1d      	ldr	r2, [pc, #116]	@ (80028f0 <HAL_RCC_ClockConfig+0x174>)
 800287a:	6813      	ldr	r3, [r2, #0]
 800287c:	f023 0307 	bic.w	r3, r3, #7
 8002880:	432b      	orrs	r3, r5
 8002882:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002884:	6813      	ldr	r3, [r2, #0]
 8002886:	f003 0307 	and.w	r3, r3, #7
 800288a:	42ab      	cmp	r3, r5
 800288c:	d12e      	bne.n	80028ec <HAL_RCC_ClockConfig+0x170>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800288e:	6823      	ldr	r3, [r4, #0]
 8002890:	f013 0f04 	tst.w	r3, #4
 8002894:	d006      	beq.n	80028a4 <HAL_RCC_ClockConfig+0x128>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002896:	4a17      	ldr	r2, [pc, #92]	@ (80028f4 <HAL_RCC_ClockConfig+0x178>)
 8002898:	6893      	ldr	r3, [r2, #8]
 800289a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800289e:	68e1      	ldr	r1, [r4, #12]
 80028a0:	430b      	orrs	r3, r1
 80028a2:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028a4:	6823      	ldr	r3, [r4, #0]
 80028a6:	f013 0f08 	tst.w	r3, #8
 80028aa:	d007      	beq.n	80028bc <HAL_RCC_ClockConfig+0x140>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028ac:	4a11      	ldr	r2, [pc, #68]	@ (80028f4 <HAL_RCC_ClockConfig+0x178>)
 80028ae:	6893      	ldr	r3, [r2, #8]
 80028b0:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 80028b4:	6921      	ldr	r1, [r4, #16]
 80028b6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80028ba:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028bc:	f7ff fbfc 	bl	80020b8 <HAL_RCC_GetSysClockFreq>
 80028c0:	4b0c      	ldr	r3, [pc, #48]	@ (80028f4 <HAL_RCC_ClockConfig+0x178>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80028c8:	4a0b      	ldr	r2, [pc, #44]	@ (80028f8 <HAL_RCC_ClockConfig+0x17c>)
 80028ca:	5cd3      	ldrb	r3, [r2, r3]
 80028cc:	f003 031f 	and.w	r3, r3, #31
 80028d0:	40d8      	lsrs	r0, r3
 80028d2:	4b0a      	ldr	r3, [pc, #40]	@ (80028fc <HAL_RCC_ClockConfig+0x180>)
 80028d4:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 80028d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002900 <HAL_RCC_ClockConfig+0x184>)
 80028d8:	6818      	ldr	r0, [r3, #0]
 80028da:	f7fe fcab 	bl	8001234 <HAL_InitTick>
}
 80028de:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80028e0:	2001      	movs	r0, #1
}
 80028e2:	4770      	bx	lr
      return HAL_ERROR;
 80028e4:	2001      	movs	r0, #1
 80028e6:	e7fa      	b.n	80028de <HAL_RCC_ClockConfig+0x162>
        return HAL_ERROR;
 80028e8:	2001      	movs	r0, #1
 80028ea:	e7f8      	b.n	80028de <HAL_RCC_ClockConfig+0x162>
      return HAL_ERROR;
 80028ec:	2001      	movs	r0, #1
 80028ee:	e7f6      	b.n	80028de <HAL_RCC_ClockConfig+0x162>
 80028f0:	40022000 	.word	0x40022000
 80028f4:	40021000 	.word	0x40021000
 80028f8:	08004810 	.word	0x08004810
 80028fc:	2000000c 	.word	0x2000000c
 8002900:	20000008 	.word	0x20000008

08002904 <HAL_RCC_GetHCLKFreq>:
}
 8002904:	4b01      	ldr	r3, [pc, #4]	@ (800290c <HAL_RCC_GetHCLKFreq+0x8>)
 8002906:	6818      	ldr	r0, [r3, #0]
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	2000000c 	.word	0x2000000c

08002910 <HAL_RCC_GetPCLK1Freq>:
{
 8002910:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002912:	f7ff fff7 	bl	8002904 <HAL_RCC_GetHCLKFreq>
 8002916:	4b05      	ldr	r3, [pc, #20]	@ (800292c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800291e:	4a04      	ldr	r2, [pc, #16]	@ (8002930 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002920:	5cd3      	ldrb	r3, [r2, r3]
 8002922:	f003 031f 	and.w	r3, r3, #31
}
 8002926:	40d8      	lsrs	r0, r3
 8002928:	bd08      	pop	{r3, pc}
 800292a:	bf00      	nop
 800292c:	40021000 	.word	0x40021000
 8002930:	08004808 	.word	0x08004808

08002934 <HAL_RCC_GetPCLK2Freq>:
{
 8002934:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002936:	f7ff ffe5 	bl	8002904 <HAL_RCC_GetHCLKFreq>
 800293a:	4b05      	ldr	r3, [pc, #20]	@ (8002950 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002942:	4a04      	ldr	r2, [pc, #16]	@ (8002954 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002944:	5cd3      	ldrb	r3, [r2, r3]
 8002946:	f003 031f 	and.w	r3, r3, #31
}
 800294a:	40d8      	lsrs	r0, r3
 800294c:	bd08      	pop	{r3, pc}
 800294e:	bf00      	nop
 8002950:	40021000 	.word	0x40021000
 8002954:	08004808 	.word	0x08004808

08002958 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800295a:	4604      	mov	r4, r0
 800295c:	460d      	mov	r5, r1
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800295e:	4b59      	ldr	r3, [pc, #356]	@ (8002ac4 <RCCEx_PLLSAI1_Config+0x16c>)
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	f013 0f03 	tst.w	r3, #3
 8002966:	d018      	beq.n	800299a <RCCEx_PLLSAI1_Config+0x42>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002968:	4b56      	ldr	r3, [pc, #344]	@ (8002ac4 <RCCEx_PLLSAI1_Config+0x16c>)
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	f003 0303 	and.w	r3, r3, #3
 8002970:	6802      	ldr	r2, [r0, #0]
 8002972:	4293      	cmp	r3, r2
 8002974:	d002      	beq.n	800297c <RCCEx_PLLSAI1_Config+0x24>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8002976:	2601      	movs	r6, #1
      }
    }
  }

  return status;
}
 8002978:	4630      	mov	r0, r6
 800297a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 800297c:	2a00      	cmp	r2, #0
 800297e:	f000 809d 	beq.w	8002abc <RCCEx_PLLSAI1_Config+0x164>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002982:	4b50      	ldr	r3, [pc, #320]	@ (8002ac4 <RCCEx_PLLSAI1_Config+0x16c>)
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800298a:	3301      	adds	r3, #1
 800298c:	6842      	ldr	r2, [r0, #4]
       ||
 800298e:	4293      	cmp	r3, r2
 8002990:	d001      	beq.n	8002996 <RCCEx_PLLSAI1_Config+0x3e>
      status = HAL_ERROR;
 8002992:	2601      	movs	r6, #1
 8002994:	e7f0      	b.n	8002978 <RCCEx_PLLSAI1_Config+0x20>
  HAL_StatusTypeDef status = HAL_OK;
 8002996:	2600      	movs	r6, #0
 8002998:	e019      	b.n	80029ce <RCCEx_PLLSAI1_Config+0x76>
    switch(PllSai1->PLLSAI1Source)
 800299a:	6803      	ldr	r3, [r0, #0]
 800299c:	2b02      	cmp	r3, #2
 800299e:	d056      	beq.n	8002a4e <RCCEx_PLLSAI1_Config+0xf6>
 80029a0:	2b03      	cmp	r3, #3
 80029a2:	d05b      	beq.n	8002a5c <RCCEx_PLLSAI1_Config+0x104>
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	f040 808b 	bne.w	8002ac0 <RCCEx_PLLSAI1_Config+0x168>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80029aa:	4a46      	ldr	r2, [pc, #280]	@ (8002ac4 <RCCEx_PLLSAI1_Config+0x16c>)
 80029ac:	6812      	ldr	r2, [r2, #0]
 80029ae:	f012 0f02 	tst.w	r2, #2
 80029b2:	d05f      	beq.n	8002a74 <RCCEx_PLLSAI1_Config+0x11c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80029b4:	4843      	ldr	r0, [pc, #268]	@ (8002ac4 <RCCEx_PLLSAI1_Config+0x16c>)
 80029b6:	68c2      	ldr	r2, [r0, #12]
 80029b8:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 80029bc:	6861      	ldr	r1, [r4, #4]
 80029be:	3901      	subs	r1, #1
 80029c0:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80029c4:	4313      	orrs	r3, r2
 80029c6:	60c3      	str	r3, [r0, #12]
 80029c8:	2600      	movs	r6, #0
  if(status == HAL_OK)
 80029ca:	2e00      	cmp	r6, #0
 80029cc:	d1d4      	bne.n	8002978 <RCCEx_PLLSAI1_Config+0x20>
    __HAL_RCC_PLLSAI1_DISABLE();
 80029ce:	4a3d      	ldr	r2, [pc, #244]	@ (8002ac4 <RCCEx_PLLSAI1_Config+0x16c>)
 80029d0:	6813      	ldr	r3, [r2, #0]
 80029d2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80029d6:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80029d8:	f7fe fc76 	bl	80012c8 <HAL_GetTick>
 80029dc:	4607      	mov	r7, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80029de:	4b39      	ldr	r3, [pc, #228]	@ (8002ac4 <RCCEx_PLLSAI1_Config+0x16c>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 80029e6:	d005      	beq.n	80029f4 <RCCEx_PLLSAI1_Config+0x9c>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029e8:	f7fe fc6e 	bl	80012c8 <HAL_GetTick>
 80029ec:	1bc3      	subs	r3, r0, r7
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d9f5      	bls.n	80029de <RCCEx_PLLSAI1_Config+0x86>
        status = HAL_TIMEOUT;
 80029f2:	2603      	movs	r6, #3
    if(status == HAL_OK)
 80029f4:	2e00      	cmp	r6, #0
 80029f6:	d1bf      	bne.n	8002978 <RCCEx_PLLSAI1_Config+0x20>
      if(Divider == DIVIDER_P_UPDATE)
 80029f8:	2d00      	cmp	r5, #0
 80029fa:	d13d      	bne.n	8002a78 <RCCEx_PLLSAI1_Config+0x120>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029fc:	4931      	ldr	r1, [pc, #196]	@ (8002ac4 <RCCEx_PLLSAI1_Config+0x16c>)
 80029fe:	690b      	ldr	r3, [r1, #16]
 8002a00:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002a04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a08:	68a0      	ldr	r0, [r4, #8]
 8002a0a:	68e2      	ldr	r2, [r4, #12]
 8002a0c:	0912      	lsrs	r2, r2, #4
 8002a0e:	0452      	lsls	r2, r2, #17
 8002a10:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002a14:	4313      	orrs	r3, r2
 8002a16:	610b      	str	r3, [r1, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8002a18:	4a2a      	ldr	r2, [pc, #168]	@ (8002ac4 <RCCEx_PLLSAI1_Config+0x16c>)
 8002a1a:	6813      	ldr	r3, [r2, #0]
 8002a1c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002a20:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002a22:	f7fe fc51 	bl	80012c8 <HAL_GetTick>
 8002a26:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a28:	4b26      	ldr	r3, [pc, #152]	@ (8002ac4 <RCCEx_PLLSAI1_Config+0x16c>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8002a30:	d105      	bne.n	8002a3e <RCCEx_PLLSAI1_Config+0xe6>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a32:	f7fe fc49 	bl	80012c8 <HAL_GetTick>
 8002a36:	1b40      	subs	r0, r0, r5
 8002a38:	2802      	cmp	r0, #2
 8002a3a:	d9f5      	bls.n	8002a28 <RCCEx_PLLSAI1_Config+0xd0>
          status = HAL_TIMEOUT;
 8002a3c:	2603      	movs	r6, #3
      if(status == HAL_OK)
 8002a3e:	2e00      	cmp	r6, #0
 8002a40:	d19a      	bne.n	8002978 <RCCEx_PLLSAI1_Config+0x20>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002a42:	4a20      	ldr	r2, [pc, #128]	@ (8002ac4 <RCCEx_PLLSAI1_Config+0x16c>)
 8002a44:	6913      	ldr	r3, [r2, #16]
 8002a46:	69a1      	ldr	r1, [r4, #24]
 8002a48:	430b      	orrs	r3, r1
 8002a4a:	6113      	str	r3, [r2, #16]
 8002a4c:	e794      	b.n	8002978 <RCCEx_PLLSAI1_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a4e:	4a1d      	ldr	r2, [pc, #116]	@ (8002ac4 <RCCEx_PLLSAI1_Config+0x16c>)
 8002a50:	6812      	ldr	r2, [r2, #0]
 8002a52:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8002a56:	d1ad      	bne.n	80029b4 <RCCEx_PLLSAI1_Config+0x5c>
 8002a58:	2601      	movs	r6, #1
 8002a5a:	e78d      	b.n	8002978 <RCCEx_PLLSAI1_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a5c:	4a19      	ldr	r2, [pc, #100]	@ (8002ac4 <RCCEx_PLLSAI1_Config+0x16c>)
 8002a5e:	6812      	ldr	r2, [r2, #0]
 8002a60:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8002a64:	d1a6      	bne.n	80029b4 <RCCEx_PLLSAI1_Config+0x5c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a66:	4a17      	ldr	r2, [pc, #92]	@ (8002ac4 <RCCEx_PLLSAI1_Config+0x16c>)
 8002a68:	6812      	ldr	r2, [r2, #0]
 8002a6a:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8002a6e:	d1a1      	bne.n	80029b4 <RCCEx_PLLSAI1_Config+0x5c>
 8002a70:	2601      	movs	r6, #1
 8002a72:	e781      	b.n	8002978 <RCCEx_PLLSAI1_Config+0x20>
        status = HAL_ERROR;
 8002a74:	2601      	movs	r6, #1
 8002a76:	e7a8      	b.n	80029ca <RCCEx_PLLSAI1_Config+0x72>
      else if(Divider == DIVIDER_Q_UPDATE)
 8002a78:	2d01      	cmp	r5, #1
 8002a7a:	d00f      	beq.n	8002a9c <RCCEx_PLLSAI1_Config+0x144>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a7c:	4811      	ldr	r0, [pc, #68]	@ (8002ac4 <RCCEx_PLLSAI1_Config+0x16c>)
 8002a7e:	6902      	ldr	r2, [r0, #16]
 8002a80:	f022 62c0 	bic.w	r2, r2, #100663296	@ 0x6000000
 8002a84:	f422 42fe 	bic.w	r2, r2, #32512	@ 0x7f00
 8002a88:	68a1      	ldr	r1, [r4, #8]
 8002a8a:	6963      	ldr	r3, [r4, #20]
 8002a8c:	085b      	lsrs	r3, r3, #1
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	065b      	lsls	r3, r3, #25
 8002a92:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002a96:	431a      	orrs	r2, r3
 8002a98:	6102      	str	r2, [r0, #16]
 8002a9a:	e7bd      	b.n	8002a18 <RCCEx_PLLSAI1_Config+0xc0>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a9c:	4809      	ldr	r0, [pc, #36]	@ (8002ac4 <RCCEx_PLLSAI1_Config+0x16c>)
 8002a9e:	6902      	ldr	r2, [r0, #16]
 8002aa0:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 8002aa4:	f422 42fe 	bic.w	r2, r2, #32512	@ 0x7f00
 8002aa8:	68a1      	ldr	r1, [r4, #8]
 8002aaa:	6923      	ldr	r3, [r4, #16]
 8002aac:	085b      	lsrs	r3, r3, #1
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	055b      	lsls	r3, r3, #21
 8002ab2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	6102      	str	r2, [r0, #16]
 8002aba:	e7ad      	b.n	8002a18 <RCCEx_PLLSAI1_Config+0xc0>
      status = HAL_ERROR;
 8002abc:	2601      	movs	r6, #1
 8002abe:	e75b      	b.n	8002978 <RCCEx_PLLSAI1_Config+0x20>
    switch(PllSai1->PLLSAI1Source)
 8002ac0:	2601      	movs	r6, #1
 8002ac2:	e759      	b.n	8002978 <RCCEx_PLLSAI1_Config+0x20>
 8002ac4:	40021000 	.word	0x40021000

08002ac8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aca:	4604      	mov	r4, r0
 8002acc:	460d      	mov	r5, r1
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ace:	4b50      	ldr	r3, [pc, #320]	@ (8002c10 <RCCEx_PLLSAI2_Config+0x148>)
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	f013 0f03 	tst.w	r3, #3
 8002ad6:	d018      	beq.n	8002b0a <RCCEx_PLLSAI2_Config+0x42>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002ad8:	4b4d      	ldr	r3, [pc, #308]	@ (8002c10 <RCCEx_PLLSAI2_Config+0x148>)
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	f003 0303 	and.w	r3, r3, #3
 8002ae0:	6802      	ldr	r2, [r0, #0]
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d002      	beq.n	8002aec <RCCEx_PLLSAI2_Config+0x24>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8002ae6:	2601      	movs	r6, #1
      }
    }
  }

  return status;
}
 8002ae8:	4630      	mov	r0, r6
 8002aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 8002aec:	2a00      	cmp	r2, #0
 8002aee:	f000 808a 	beq.w	8002c06 <RCCEx_PLLSAI2_Config+0x13e>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002af2:	4b47      	ldr	r3, [pc, #284]	@ (8002c10 <RCCEx_PLLSAI2_Config+0x148>)
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002afa:	3301      	adds	r3, #1
 8002afc:	6842      	ldr	r2, [r0, #4]
       ||
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d001      	beq.n	8002b06 <RCCEx_PLLSAI2_Config+0x3e>
      status = HAL_ERROR;
 8002b02:	2601      	movs	r6, #1
 8002b04:	e7f0      	b.n	8002ae8 <RCCEx_PLLSAI2_Config+0x20>
  HAL_StatusTypeDef status = HAL_OK;
 8002b06:	2600      	movs	r6, #0
 8002b08:	e018      	b.n	8002b3c <RCCEx_PLLSAI2_Config+0x74>
    switch(PllSai2->PLLSAI2Source)
 8002b0a:	6803      	ldr	r3, [r0, #0]
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d055      	beq.n	8002bbc <RCCEx_PLLSAI2_Config+0xf4>
 8002b10:	2b03      	cmp	r3, #3
 8002b12:	d05a      	beq.n	8002bca <RCCEx_PLLSAI2_Config+0x102>
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d178      	bne.n	8002c0a <RCCEx_PLLSAI2_Config+0x142>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b18:	4a3d      	ldr	r2, [pc, #244]	@ (8002c10 <RCCEx_PLLSAI2_Config+0x148>)
 8002b1a:	6812      	ldr	r2, [r2, #0]
 8002b1c:	f012 0f02 	tst.w	r2, #2
 8002b20:	d05f      	beq.n	8002be2 <RCCEx_PLLSAI2_Config+0x11a>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b22:	483b      	ldr	r0, [pc, #236]	@ (8002c10 <RCCEx_PLLSAI2_Config+0x148>)
 8002b24:	68c2      	ldr	r2, [r0, #12]
 8002b26:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 8002b2a:	6861      	ldr	r1, [r4, #4]
 8002b2c:	3901      	subs	r1, #1
 8002b2e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8002b32:	4313      	orrs	r3, r2
 8002b34:	60c3      	str	r3, [r0, #12]
 8002b36:	2600      	movs	r6, #0
  if(status == HAL_OK)
 8002b38:	2e00      	cmp	r6, #0
 8002b3a:	d1d5      	bne.n	8002ae8 <RCCEx_PLLSAI2_Config+0x20>
    __HAL_RCC_PLLSAI2_DISABLE();
 8002b3c:	4a34      	ldr	r2, [pc, #208]	@ (8002c10 <RCCEx_PLLSAI2_Config+0x148>)
 8002b3e:	6813      	ldr	r3, [r2, #0]
 8002b40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b44:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002b46:	f7fe fbbf 	bl	80012c8 <HAL_GetTick>
 8002b4a:	4607      	mov	r7, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b4c:	4b30      	ldr	r3, [pc, #192]	@ (8002c10 <RCCEx_PLLSAI2_Config+0x148>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 8002b54:	d005      	beq.n	8002b62 <RCCEx_PLLSAI2_Config+0x9a>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b56:	f7fe fbb7 	bl	80012c8 <HAL_GetTick>
 8002b5a:	1bc3      	subs	r3, r0, r7
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d9f5      	bls.n	8002b4c <RCCEx_PLLSAI2_Config+0x84>
        status = HAL_TIMEOUT;
 8002b60:	2603      	movs	r6, #3
    if(status == HAL_OK)
 8002b62:	2e00      	cmp	r6, #0
 8002b64:	d1c0      	bne.n	8002ae8 <RCCEx_PLLSAI2_Config+0x20>
      if(Divider == DIVIDER_P_UPDATE)
 8002b66:	2d00      	cmp	r5, #0
 8002b68:	d13d      	bne.n	8002be6 <RCCEx_PLLSAI2_Config+0x11e>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b6a:	4929      	ldr	r1, [pc, #164]	@ (8002c10 <RCCEx_PLLSAI2_Config+0x148>)
 8002b6c:	694b      	ldr	r3, [r1, #20]
 8002b6e:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002b72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b76:	68a0      	ldr	r0, [r4, #8]
 8002b78:	68e2      	ldr	r2, [r4, #12]
 8002b7a:	0912      	lsrs	r2, r2, #4
 8002b7c:	0452      	lsls	r2, r2, #17
 8002b7e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002b82:	4313      	orrs	r3, r2
 8002b84:	614b      	str	r3, [r1, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 8002b86:	4a22      	ldr	r2, [pc, #136]	@ (8002c10 <RCCEx_PLLSAI2_Config+0x148>)
 8002b88:	6813      	ldr	r3, [r2, #0]
 8002b8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b8e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002b90:	f7fe fb9a 	bl	80012c8 <HAL_GetTick>
 8002b94:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b96:	4b1e      	ldr	r3, [pc, #120]	@ (8002c10 <RCCEx_PLLSAI2_Config+0x148>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 8002b9e:	d105      	bne.n	8002bac <RCCEx_PLLSAI2_Config+0xe4>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ba0:	f7fe fb92 	bl	80012c8 <HAL_GetTick>
 8002ba4:	1b40      	subs	r0, r0, r5
 8002ba6:	2802      	cmp	r0, #2
 8002ba8:	d9f5      	bls.n	8002b96 <RCCEx_PLLSAI2_Config+0xce>
          status = HAL_TIMEOUT;
 8002baa:	2603      	movs	r6, #3
      if(status == HAL_OK)
 8002bac:	2e00      	cmp	r6, #0
 8002bae:	d19b      	bne.n	8002ae8 <RCCEx_PLLSAI2_Config+0x20>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002bb0:	4a17      	ldr	r2, [pc, #92]	@ (8002c10 <RCCEx_PLLSAI2_Config+0x148>)
 8002bb2:	6953      	ldr	r3, [r2, #20]
 8002bb4:	6961      	ldr	r1, [r4, #20]
 8002bb6:	430b      	orrs	r3, r1
 8002bb8:	6153      	str	r3, [r2, #20]
 8002bba:	e795      	b.n	8002ae8 <RCCEx_PLLSAI2_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002bbc:	4a14      	ldr	r2, [pc, #80]	@ (8002c10 <RCCEx_PLLSAI2_Config+0x148>)
 8002bbe:	6812      	ldr	r2, [r2, #0]
 8002bc0:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8002bc4:	d1ad      	bne.n	8002b22 <RCCEx_PLLSAI2_Config+0x5a>
 8002bc6:	2601      	movs	r6, #1
 8002bc8:	e78e      	b.n	8002ae8 <RCCEx_PLLSAI2_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002bca:	4a11      	ldr	r2, [pc, #68]	@ (8002c10 <RCCEx_PLLSAI2_Config+0x148>)
 8002bcc:	6812      	ldr	r2, [r2, #0]
 8002bce:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8002bd2:	d1a6      	bne.n	8002b22 <RCCEx_PLLSAI2_Config+0x5a>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002bd4:	4a0e      	ldr	r2, [pc, #56]	@ (8002c10 <RCCEx_PLLSAI2_Config+0x148>)
 8002bd6:	6812      	ldr	r2, [r2, #0]
 8002bd8:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8002bdc:	d1a1      	bne.n	8002b22 <RCCEx_PLLSAI2_Config+0x5a>
 8002bde:	2601      	movs	r6, #1
 8002be0:	e782      	b.n	8002ae8 <RCCEx_PLLSAI2_Config+0x20>
        status = HAL_ERROR;
 8002be2:	2601      	movs	r6, #1
 8002be4:	e7a8      	b.n	8002b38 <RCCEx_PLLSAI2_Config+0x70>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002be6:	480a      	ldr	r0, [pc, #40]	@ (8002c10 <RCCEx_PLLSAI2_Config+0x148>)
 8002be8:	6942      	ldr	r2, [r0, #20]
 8002bea:	f022 62c0 	bic.w	r2, r2, #100663296	@ 0x6000000
 8002bee:	f422 42fe 	bic.w	r2, r2, #32512	@ 0x7f00
 8002bf2:	68a1      	ldr	r1, [r4, #8]
 8002bf4:	6923      	ldr	r3, [r4, #16]
 8002bf6:	085b      	lsrs	r3, r3, #1
 8002bf8:	3b01      	subs	r3, #1
 8002bfa:	065b      	lsls	r3, r3, #25
 8002bfc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002c00:	431a      	orrs	r2, r3
 8002c02:	6142      	str	r2, [r0, #20]
 8002c04:	e7bf      	b.n	8002b86 <RCCEx_PLLSAI2_Config+0xbe>
      status = HAL_ERROR;
 8002c06:	2601      	movs	r6, #1
 8002c08:	e76e      	b.n	8002ae8 <RCCEx_PLLSAI2_Config+0x20>
    switch(PllSai2->PLLSAI2Source)
 8002c0a:	2601      	movs	r6, #1
 8002c0c:	e76c      	b.n	8002ae8 <RCCEx_PLLSAI2_Config+0x20>
 8002c0e:	bf00      	nop
 8002c10:	40021000 	.word	0x40021000

08002c14 <HAL_RCCEx_PeriphCLKConfig>:
{
 8002c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c18:	b082      	sub	sp, #8
 8002c1a:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002c1c:	6803      	ldr	r3, [r0, #0]
 8002c1e:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8002c22:	d033      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x78>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002c24:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 8002c26:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002c2a:	d015      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002c2c:	d80c      	bhi.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8002c2e:	b323      	cbz	r3, 8002c7a <HAL_RCCEx_PeriphCLKConfig+0x66>
 8002c30:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c34:	d105      	bne.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x2e>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002c36:	2100      	movs	r1, #0
 8002c38:	3020      	adds	r0, #32
 8002c3a:	f7ff ff45 	bl	8002ac8 <RCCEx_PLLSAI2_Config>
 8002c3e:	4606      	mov	r6, r0
      break;
 8002c40:	e020      	b.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002c42:	2701      	movs	r7, #1
 8002c44:	463e      	mov	r6, r7
 8002c46:	e023      	b.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002c48:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002c4c:	d101      	bne.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x3e>
 8002c4e:	2600      	movs	r6, #0
 8002c50:	e008      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002c52:	2701      	movs	r7, #1
 8002c54:	463e      	mov	r6, r7
 8002c56:	e01b      	b.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002c58:	4a5e      	ldr	r2, [pc, #376]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002c5a:	68d3      	ldr	r3, [r2, #12]
 8002c5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c60:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c62:	2600      	movs	r6, #0
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c64:	4a5b      	ldr	r2, [pc, #364]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002c66:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002c6a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002c6e:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8002c70:	430b      	orrs	r3, r1
 8002c72:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c76:	2700      	movs	r7, #0
 8002c78:	e00a      	b.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c7a:	2100      	movs	r1, #0
 8002c7c:	3004      	adds	r0, #4
 8002c7e:	f7ff fe6b 	bl	8002958 <RCCEx_PLLSAI1_Config>
 8002c82:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8002c84:	2e00      	cmp	r6, #0
 8002c86:	d0ed      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x50>
      status = ret;
 8002c88:	4637      	mov	r7, r6
 8002c8a:	e001      	b.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c8c:	2700      	movs	r7, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c8e:	463e      	mov	r6, r7
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002c90:	6823      	ldr	r3, [r4, #0]
 8002c92:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8002c96:	d030      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0xe6>
    switch(PeriphClkInit->Sai2ClockSelection)
 8002c98:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8002c9a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002c9e:	d01f      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002ca0:	d80d      	bhi.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0xaa>
 8002ca2:	b31b      	cbz	r3, 8002cec <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8002ca4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ca8:	d106      	bne.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002caa:	2100      	movs	r1, #0
 8002cac:	f104 0020 	add.w	r0, r4, #32
 8002cb0:	f7ff ff0a 	bl	8002ac8 <RCCEx_PLLSAI2_Config>
 8002cb4:	4606      	mov	r6, r0
      break;
 8002cb6:	e005      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    switch(PeriphClkInit->Sai2ClockSelection)
 8002cb8:	2701      	movs	r7, #1
 8002cba:	463e      	mov	r6, r7
 8002cbc:	e01d      	b.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0xe6>
 8002cbe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002cc2:	d10a      	bne.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0xc6>
    if(ret == HAL_OK)
 8002cc4:	b9c6      	cbnz	r6, 8002cf8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002cc6:	4a43      	ldr	r2, [pc, #268]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002cc8:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002ccc:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8002cd0:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8002cd2:	430b      	orrs	r3, r1
 8002cd4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8002cd8:	e00f      	b.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0xe6>
    switch(PeriphClkInit->Sai2ClockSelection)
 8002cda:	2701      	movs	r7, #1
 8002cdc:	463e      	mov	r6, r7
 8002cde:	e00c      	b.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0xe6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ce0:	4a3c      	ldr	r2, [pc, #240]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002ce2:	68d3      	ldr	r3, [r2, #12]
 8002ce4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ce8:	60d3      	str	r3, [r2, #12]
      break;
 8002cea:	e7eb      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002cec:	2100      	movs	r1, #0
 8002cee:	1d20      	adds	r0, r4, #4
 8002cf0:	f7ff fe32 	bl	8002958 <RCCEx_PLLSAI1_Config>
 8002cf4:	4606      	mov	r6, r0
      break;
 8002cf6:	e7e5      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      status = ret;
 8002cf8:	4637      	mov	r7, r6
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002cfa:	6823      	ldr	r3, [r4, #0]
 8002cfc:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002d00:	d071      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d02:	4b34      	ldr	r3, [pc, #208]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002d04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d06:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8002d0a:	d14e      	bne.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x196>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d0c:	4b31      	ldr	r3, [pc, #196]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002d0e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002d10:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002d14:	659a      	str	r2, [r3, #88]	@ 0x58
 8002d16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d1c:	9301      	str	r3, [sp, #4]
 8002d1e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002d20:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d24:	4a2c      	ldr	r2, [pc, #176]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002d26:	6813      	ldr	r3, [r2, #0]
 8002d28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d2c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002d2e:	f7fe facb 	bl	80012c8 <HAL_GetTick>
 8002d32:	4605      	mov	r5, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d34:	4b28      	ldr	r3, [pc, #160]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002d3c:	d105      	bne.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x136>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d3e:	f7fe fac3 	bl	80012c8 <HAL_GetTick>
 8002d42:	1b40      	subs	r0, r0, r5
 8002d44:	2802      	cmp	r0, #2
 8002d46:	d9f5      	bls.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x120>
        ret = HAL_TIMEOUT;
 8002d48:	2603      	movs	r6, #3
    if(ret == HAL_OK)
 8002d4a:	2e00      	cmp	r6, #0
 8002d4c:	d146      	bne.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d4e:	4b21      	ldr	r3, [pc, #132]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d54:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8002d58:	d019      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002d5a:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d012      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x174>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d62:	4a1c      	ldr	r2, [pc, #112]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002d64:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8002d68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d6c:	f8d2 1090 	ldr.w	r1, [r2, #144]	@ 0x90
 8002d70:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 8002d74:	f8c2 1090 	str.w	r1, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d78:	f8d2 1090 	ldr.w	r1, [r2, #144]	@ 0x90
 8002d7c:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8002d80:	f8c2 1090 	str.w	r1, [r2, #144]	@ 0x90
        RCC->BDCR = tmpregister;
 8002d84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d88:	f013 0f01 	tst.w	r3, #1
 8002d8c:	d110      	bne.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      if(ret == HAL_OK)
 8002d8e:	2e00      	cmp	r6, #0
 8002d90:	f040 8127 	bne.w	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d94:	4a0f      	ldr	r2, [pc, #60]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002d96:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8002d9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d9e:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 8002da2:	430b      	orrs	r3, r1
 8002da4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002da8:	e019      	b.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    FlagStatus       pwrclkchanged = RESET;
 8002daa:	f04f 0800 	mov.w	r8, #0
 8002dae:	e7b9      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x110>
        tickstart = HAL_GetTick();
 8002db0:	f7fe fa8a 	bl	80012c8 <HAL_GetTick>
 8002db4:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002db6:	4b07      	ldr	r3, [pc, #28]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dbc:	f013 0f02 	tst.w	r3, #2
 8002dc0:	d1e5      	bne.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dc2:	f7fe fa81 	bl	80012c8 <HAL_GetTick>
 8002dc6:	1b40      	subs	r0, r0, r5
 8002dc8:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002dcc:	4298      	cmp	r0, r3
 8002dce:	d9f2      	bls.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
            ret = HAL_TIMEOUT;
 8002dd0:	2603      	movs	r6, #3
 8002dd2:	e7dc      	b.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002dd4:	40021000 	.word	0x40021000
 8002dd8:	40007000 	.word	0x40007000
      status = ret;
 8002ddc:	4637      	mov	r7, r6
    if(pwrclkchanged == SET)
 8002dde:	f1b8 0f00 	cmp.w	r8, #0
 8002de2:	f040 8100 	bne.w	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002de6:	6823      	ldr	r3, [r4, #0]
 8002de8:	f013 0f01 	tst.w	r3, #1
 8002dec:	d008      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002dee:	4a9d      	ldr	r2, [pc, #628]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002df0:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002df4:	f023 0303 	bic.w	r3, r3, #3
 8002df8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8002dfa:	430b      	orrs	r3, r1
 8002dfc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e00:	6823      	ldr	r3, [r4, #0]
 8002e02:	f013 0f02 	tst.w	r3, #2
 8002e06:	d008      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x206>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e08:	4a96      	ldr	r2, [pc, #600]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e0a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002e0e:	f023 030c 	bic.w	r3, r3, #12
 8002e12:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8002e14:	430b      	orrs	r3, r1
 8002e16:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e1a:	6823      	ldr	r3, [r4, #0]
 8002e1c:	f013 0f04 	tst.w	r3, #4
 8002e20:	d008      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e22:	4a90      	ldr	r2, [pc, #576]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e24:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002e28:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002e2c:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8002e2e:	430b      	orrs	r3, r1
 8002e30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e34:	6823      	ldr	r3, [r4, #0]
 8002e36:	f013 0f08 	tst.w	r3, #8
 8002e3a:	d008      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x23a>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e3c:	4a89      	ldr	r2, [pc, #548]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e3e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002e42:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002e46:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8002e48:	430b      	orrs	r3, r1
 8002e4a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e4e:	6823      	ldr	r3, [r4, #0]
 8002e50:	f013 0f10 	tst.w	r3, #16
 8002e54:	d008      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x254>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e56:	4a83      	ldr	r2, [pc, #524]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e58:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002e5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e60:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8002e62:	430b      	orrs	r3, r1
 8002e64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e68:	6823      	ldr	r3, [r4, #0]
 8002e6a:	f013 0f20 	tst.w	r3, #32
 8002e6e:	d008      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e70:	4a7c      	ldr	r2, [pc, #496]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e72:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002e76:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002e7a:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8002e7c:	430b      	orrs	r3, r1
 8002e7e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e82:	6823      	ldr	r3, [r4, #0]
 8002e84:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8002e88:	d008      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x288>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e8a:	4a76      	ldr	r2, [pc, #472]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e8c:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002e90:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 8002e94:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8002e96:	430b      	orrs	r3, r1
 8002e98:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002e9c:	6823      	ldr	r3, [r4, #0]
 8002e9e:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8002ea2:	d008      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ea4:	4a6f      	ldr	r2, [pc, #444]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ea6:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002eaa:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8002eae:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8002eb0:	430b      	orrs	r3, r1
 8002eb2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002eb6:	6823      	ldr	r3, [r4, #0]
 8002eb8:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8002ebc:	d008      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ebe:	4a69      	ldr	r2, [pc, #420]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ec0:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002ec4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002ec8:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8002eca:	430b      	orrs	r3, r1
 8002ecc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ed0:	6823      	ldr	r3, [r4, #0]
 8002ed2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002ed6:	d008      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ed8:	4a62      	ldr	r2, [pc, #392]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002eda:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002ede:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002ee2:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8002ee4:	430b      	orrs	r3, r1
 8002ee6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002eea:	6823      	ldr	r3, [r4, #0]
 8002eec:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002ef0:	d008      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ef2:	4a5c      	ldr	r2, [pc, #368]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ef4:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002ef8:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8002efc:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8002efe:	430b      	orrs	r3, r1
 8002f00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f04:	6823      	ldr	r3, [r4, #0]
 8002f06:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8002f0a:	d00f      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x318>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f0c:	4a55      	ldr	r2, [pc, #340]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f0e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002f12:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8002f16:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 8002f18:	430b      	orrs	r3, r1
 8002f1a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f1e:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8002f20:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f24:	d065      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002f26:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002f2a:	d067      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002f2c:	6823      	ldr	r3, [r4, #0]
 8002f2e:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8002f32:	d00f      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x340>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f34:	4a4b      	ldr	r2, [pc, #300]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f36:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002f3a:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8002f3e:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8002f40:	430b      	orrs	r3, r1
 8002f42:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002f46:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8002f48:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f4c:	d05e      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002f4e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002f52:	d060      	beq.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x402>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f54:	6823      	ldr	r3, [r4, #0]
 8002f56:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 8002f5a:	d00f      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x368>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f5c:	4a41      	ldr	r2, [pc, #260]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f5e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002f62:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8002f66:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8002f68:	430b      	orrs	r3, r1
 8002f6a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f6e:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8002f70:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f74:	d057      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x412>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002f76:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002f7a:	d059      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f7c:	6823      	ldr	r3, [r4, #0]
 8002f7e:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8002f82:	d00f      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x390>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f84:	4a37      	ldr	r2, [pc, #220]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f86:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002f8a:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8002f8e:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8002f90:	430b      	orrs	r3, r1
 8002f92:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002f96:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8002f98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002f9c:	d050      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x42c>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002f9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002fa2:	d055      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x43c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002fa4:	6823      	ldr	r3, [r4, #0]
 8002fa6:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8002faa:	d008      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x3aa>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002fac:	4a2d      	ldr	r2, [pc, #180]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002fae:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002fb2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002fb6:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 8002fb8:	430b      	orrs	r3, r1
 8002fba:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002fbe:	6823      	ldr	r3, [r4, #0]
 8002fc0:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8002fc4:	d009      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x3c6>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002fc6:	4a27      	ldr	r2, [pc, #156]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002fc8:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002fcc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002fd0:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 8002fd4:	430b      	orrs	r3, r1
 8002fd6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
}
 8002fda:	4638      	mov	r0, r7
 8002fdc:	b002      	add	sp, #8
 8002fde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = ret;
 8002fe2:	4637      	mov	r7, r6
 8002fe4:	e6fb      	b.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fe6:	4a1f      	ldr	r2, [pc, #124]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002fe8:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8002fea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fee:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ff0:	e6f9      	b.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ff2:	68d3      	ldr	r3, [r2, #12]
 8002ff4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ff8:	60d3      	str	r3, [r2, #12]
 8002ffa:	e797      	b.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x318>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ffc:	2101      	movs	r1, #1
 8002ffe:	1d20      	adds	r0, r4, #4
 8003000:	f7ff fcaa 	bl	8002958 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8003004:	2800      	cmp	r0, #0
 8003006:	d091      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x318>
          status = ret;
 8003008:	4607      	mov	r7, r0
 800300a:	e78f      	b.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x318>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800300c:	68d3      	ldr	r3, [r2, #12]
 800300e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003012:	60d3      	str	r3, [r2, #12]
 8003014:	e79e      	b.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x340>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003016:	2101      	movs	r1, #1
 8003018:	1d20      	adds	r0, r4, #4
 800301a:	f7ff fc9d 	bl	8002958 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800301e:	2800      	cmp	r0, #0
 8003020:	d098      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x340>
        status = ret;
 8003022:	4607      	mov	r7, r0
 8003024:	e796      	b.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x340>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003026:	68d3      	ldr	r3, [r2, #12]
 8003028:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800302c:	60d3      	str	r3, [r2, #12]
 800302e:	e7a5      	b.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x368>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003030:	2101      	movs	r1, #1
 8003032:	1d20      	adds	r0, r4, #4
 8003034:	f7ff fc90 	bl	8002958 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8003038:	2800      	cmp	r0, #0
 800303a:	d09f      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x368>
        status = ret;
 800303c:	4607      	mov	r7, r0
 800303e:	e79d      	b.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x368>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003040:	2102      	movs	r1, #2
 8003042:	1d20      	adds	r0, r4, #4
 8003044:	f7ff fc88 	bl	8002958 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8003048:	2800      	cmp	r0, #0
 800304a:	d0ab      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x390>
        status = ret;
 800304c:	4607      	mov	r7, r0
 800304e:	e7a9      	b.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x390>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003050:	2102      	movs	r1, #2
 8003052:	f104 0020 	add.w	r0, r4, #32
 8003056:	f7ff fd37 	bl	8002ac8 <RCCEx_PLLSAI2_Config>
      if(ret != HAL_OK)
 800305a:	2800      	cmp	r0, #0
 800305c:	d0a2      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x390>
        status = ret;
 800305e:	4607      	mov	r7, r0
 8003060:	e7a0      	b.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x390>
 8003062:	bf00      	nop
 8003064:	40021000 	.word	0x40021000

08003068 <UART_EndRxTransfer>:
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003068:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800306a:	e852 3f00 	ldrex	r3, [r2]
 800306e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003072:	e842 3100 	strex	r1, r3, [r2]
 8003076:	2900      	cmp	r1, #0
 8003078:	d1f6      	bne.n	8003068 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800307a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800307c:	f102 0308 	add.w	r3, r2, #8
 8003080:	e853 3f00 	ldrex	r3, [r3]
 8003084:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003088:	3208      	adds	r2, #8
 800308a:	e842 3100 	strex	r1, r3, [r2]
 800308e:	2900      	cmp	r1, #0
 8003090:	d1f3      	bne.n	800307a <UART_EndRxTransfer+0x12>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003092:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8003094:	2b01      	cmp	r3, #1
 8003096:	d006      	beq.n	80030a6 <UART_EndRxTransfer+0x3e>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003098:	2320      	movs	r3, #32
 800309a:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800309e:	2300      	movs	r3, #0
 80030a0:	6603      	str	r3, [r0, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80030a2:	6683      	str	r3, [r0, #104]	@ 0x68
}
 80030a4:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030a6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030a8:	e852 3f00 	ldrex	r3, [r2]
 80030ac:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030b0:	e842 3100 	strex	r1, r3, [r2]
 80030b4:	2900      	cmp	r1, #0
 80030b6:	d1f6      	bne.n	80030a6 <UART_EndRxTransfer+0x3e>
 80030b8:	e7ee      	b.n	8003098 <UART_EndRxTransfer+0x30>
	...

080030bc <UART_SetConfig>:
{
 80030bc:	b510      	push	{r4, lr}
 80030be:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030c0:	6883      	ldr	r3, [r0, #8]
 80030c2:	6902      	ldr	r2, [r0, #16]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	6942      	ldr	r2, [r0, #20]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	69c2      	ldr	r2, [r0, #28]
 80030cc:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030ce:	6801      	ldr	r1, [r0, #0]
 80030d0:	6808      	ldr	r0, [r1, #0]
 80030d2:	4a8f      	ldr	r2, [pc, #572]	@ (8003310 <UART_SetConfig+0x254>)
 80030d4:	4002      	ands	r2, r0
 80030d6:	431a      	orrs	r2, r3
 80030d8:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030da:	6822      	ldr	r2, [r4, #0]
 80030dc:	6853      	ldr	r3, [r2, #4]
 80030de:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80030e2:	68e1      	ldr	r1, [r4, #12]
 80030e4:	430b      	orrs	r3, r1
 80030e6:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030e8:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80030ea:	6822      	ldr	r2, [r4, #0]
 80030ec:	4b89      	ldr	r3, [pc, #548]	@ (8003314 <UART_SetConfig+0x258>)
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d001      	beq.n	80030f6 <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 80030f2:	6a23      	ldr	r3, [r4, #32]
 80030f4:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030f6:	6893      	ldr	r3, [r2, #8]
 80030f8:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80030fc:	430b      	orrs	r3, r1
 80030fe:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003100:	6823      	ldr	r3, [r4, #0]
 8003102:	4a85      	ldr	r2, [pc, #532]	@ (8003318 <UART_SetConfig+0x25c>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d010      	beq.n	800312a <UART_SetConfig+0x6e>
 8003108:	4a84      	ldr	r2, [pc, #528]	@ (800331c <UART_SetConfig+0x260>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d021      	beq.n	8003152 <UART_SetConfig+0x96>
 800310e:	4a84      	ldr	r2, [pc, #528]	@ (8003320 <UART_SetConfig+0x264>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d04d      	beq.n	80031b0 <UART_SetConfig+0xf4>
 8003114:	4a83      	ldr	r2, [pc, #524]	@ (8003324 <UART_SetConfig+0x268>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d05d      	beq.n	80031d6 <UART_SetConfig+0x11a>
 800311a:	4a83      	ldr	r2, [pc, #524]	@ (8003328 <UART_SetConfig+0x26c>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d06c      	beq.n	80031fa <UART_SetConfig+0x13e>
 8003120:	4a7c      	ldr	r2, [pc, #496]	@ (8003314 <UART_SetConfig+0x258>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d07e      	beq.n	8003224 <UART_SetConfig+0x168>
 8003126:	2210      	movs	r2, #16
 8003128:	e02b      	b.n	8003182 <UART_SetConfig+0xc6>
 800312a:	f502 4258 	add.w	r2, r2, #55296	@ 0xd800
 800312e:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8003132:	f002 0203 	and.w	r2, r2, #3
 8003136:	2a03      	cmp	r2, #3
 8003138:	d809      	bhi.n	800314e <UART_SetConfig+0x92>
 800313a:	e8df f002 	tbb	[pc, r2]
 800313e:	0402      	.short	0x0402
 8003140:	0688      	.short	0x0688
 8003142:	2201      	movs	r2, #1
 8003144:	e01d      	b.n	8003182 <UART_SetConfig+0xc6>
 8003146:	2204      	movs	r2, #4
 8003148:	e01b      	b.n	8003182 <UART_SetConfig+0xc6>
 800314a:	2208      	movs	r2, #8
 800314c:	e019      	b.n	8003182 <UART_SetConfig+0xc6>
 800314e:	2210      	movs	r2, #16
 8003150:	e017      	b.n	8003182 <UART_SetConfig+0xc6>
 8003152:	f502 32e6 	add.w	r2, r2, #117760	@ 0x1cc00
 8003156:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 800315a:	f002 020c 	and.w	r2, r2, #12
 800315e:	2a0c      	cmp	r2, #12
 8003160:	d80e      	bhi.n	8003180 <UART_SetConfig+0xc4>
 8003162:	e8df f002 	tbb	[pc, r2]
 8003166:	0d07      	.short	0x0d07
 8003168:	0d090d0d 	.word	0x0d090d0d
 800316c:	0d760d0d 	.word	0x0d760d0d
 8003170:	0d0d      	.short	0x0d0d
 8003172:	0b          	.byte	0x0b
 8003173:	00          	.byte	0x00
 8003174:	2200      	movs	r2, #0
 8003176:	e004      	b.n	8003182 <UART_SetConfig+0xc6>
 8003178:	2204      	movs	r2, #4
 800317a:	e002      	b.n	8003182 <UART_SetConfig+0xc6>
 800317c:	2208      	movs	r2, #8
 800317e:	e000      	b.n	8003182 <UART_SetConfig+0xc6>
 8003180:	2210      	movs	r2, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 8003182:	4964      	ldr	r1, [pc, #400]	@ (8003314 <UART_SetConfig+0x258>)
 8003184:	428b      	cmp	r3, r1
 8003186:	f000 8086 	beq.w	8003296 <UART_SetConfig+0x1da>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800318a:	69e0      	ldr	r0, [r4, #28]
 800318c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8003190:	f000 80b2 	beq.w	80032f8 <UART_SetConfig+0x23c>
    switch (clocksource)
 8003194:	2a08      	cmp	r2, #8
 8003196:	f200 8119 	bhi.w	80033cc <UART_SetConfig+0x310>
 800319a:	e8df f012 	tbh	[pc, r2, lsl #1]
 800319e:	00ed      	.short	0x00ed
 80031a0:	00eb0100 	.word	0x00eb0100
 80031a4:	01030117 	.word	0x01030117
 80031a8:	01170117 	.word	0x01170117
 80031ac:	01060117 	.word	0x01060117
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031b0:	f502 32e4 	add.w	r2, r2, #116736	@ 0x1c800
 80031b4:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 80031b8:	f002 0230 	and.w	r2, r2, #48	@ 0x30
 80031bc:	2a20      	cmp	r2, #32
 80031be:	d04a      	beq.n	8003256 <UART_SetConfig+0x19a>
 80031c0:	d805      	bhi.n	80031ce <UART_SetConfig+0x112>
 80031c2:	2a00      	cmp	r2, #0
 80031c4:	d049      	beq.n	800325a <UART_SetConfig+0x19e>
 80031c6:	2a10      	cmp	r2, #16
 80031c8:	d149      	bne.n	800325e <UART_SetConfig+0x1a2>
 80031ca:	2204      	movs	r2, #4
 80031cc:	e7d9      	b.n	8003182 <UART_SetConfig+0xc6>
 80031ce:	2a30      	cmp	r2, #48	@ 0x30
 80031d0:	d147      	bne.n	8003262 <UART_SetConfig+0x1a6>
 80031d2:	2208      	movs	r2, #8
 80031d4:	e7d5      	b.n	8003182 <UART_SetConfig+0xc6>
 80031d6:	f502 32e2 	add.w	r2, r2, #115712	@ 0x1c400
 80031da:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 80031de:	f002 02c0 	and.w	r2, r2, #192	@ 0xc0
 80031e2:	2a80      	cmp	r2, #128	@ 0x80
 80031e4:	d03f      	beq.n	8003266 <UART_SetConfig+0x1aa>
 80031e6:	d804      	bhi.n	80031f2 <UART_SetConfig+0x136>
 80031e8:	b3fa      	cbz	r2, 800326a <UART_SetConfig+0x1ae>
 80031ea:	2a40      	cmp	r2, #64	@ 0x40
 80031ec:	d13f      	bne.n	800326e <UART_SetConfig+0x1b2>
 80031ee:	2204      	movs	r2, #4
 80031f0:	e7c7      	b.n	8003182 <UART_SetConfig+0xc6>
 80031f2:	2ac0      	cmp	r2, #192	@ 0xc0
 80031f4:	d13d      	bne.n	8003272 <UART_SetConfig+0x1b6>
 80031f6:	2208      	movs	r2, #8
 80031f8:	e7c3      	b.n	8003182 <UART_SetConfig+0xc6>
 80031fa:	f502 32e0 	add.w	r2, r2, #114688	@ 0x1c000
 80031fe:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8003202:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8003206:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 800320a:	d034      	beq.n	8003276 <UART_SetConfig+0x1ba>
 800320c:	d805      	bhi.n	800321a <UART_SetConfig+0x15e>
 800320e:	b3a2      	cbz	r2, 800327a <UART_SetConfig+0x1be>
 8003210:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 8003214:	d133      	bne.n	800327e <UART_SetConfig+0x1c2>
 8003216:	2204      	movs	r2, #4
 8003218:	e7b3      	b.n	8003182 <UART_SetConfig+0xc6>
 800321a:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 800321e:	d130      	bne.n	8003282 <UART_SetConfig+0x1c6>
 8003220:	2208      	movs	r2, #8
 8003222:	e7ae      	b.n	8003182 <UART_SetConfig+0xc6>
 8003224:	f502 32c8 	add.w	r2, r2, #102400	@ 0x19000
 8003228:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 800322c:	f402 6240 	and.w	r2, r2, #3072	@ 0xc00
 8003230:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 8003234:	d027      	beq.n	8003286 <UART_SetConfig+0x1ca>
 8003236:	d805      	bhi.n	8003244 <UART_SetConfig+0x188>
 8003238:	b33a      	cbz	r2, 800328a <UART_SetConfig+0x1ce>
 800323a:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800323e:	d126      	bne.n	800328e <UART_SetConfig+0x1d2>
 8003240:	2204      	movs	r2, #4
 8003242:	e79e      	b.n	8003182 <UART_SetConfig+0xc6>
 8003244:	f5b2 6f40 	cmp.w	r2, #3072	@ 0xc00
 8003248:	d123      	bne.n	8003292 <UART_SetConfig+0x1d6>
 800324a:	2208      	movs	r2, #8
 800324c:	e799      	b.n	8003182 <UART_SetConfig+0xc6>
 800324e:	2202      	movs	r2, #2
 8003250:	e797      	b.n	8003182 <UART_SetConfig+0xc6>
 8003252:	2202      	movs	r2, #2
 8003254:	e795      	b.n	8003182 <UART_SetConfig+0xc6>
 8003256:	2202      	movs	r2, #2
 8003258:	e793      	b.n	8003182 <UART_SetConfig+0xc6>
 800325a:	2200      	movs	r2, #0
 800325c:	e791      	b.n	8003182 <UART_SetConfig+0xc6>
 800325e:	2210      	movs	r2, #16
 8003260:	e78f      	b.n	8003182 <UART_SetConfig+0xc6>
 8003262:	2210      	movs	r2, #16
 8003264:	e78d      	b.n	8003182 <UART_SetConfig+0xc6>
 8003266:	2202      	movs	r2, #2
 8003268:	e78b      	b.n	8003182 <UART_SetConfig+0xc6>
 800326a:	2200      	movs	r2, #0
 800326c:	e789      	b.n	8003182 <UART_SetConfig+0xc6>
 800326e:	2210      	movs	r2, #16
 8003270:	e787      	b.n	8003182 <UART_SetConfig+0xc6>
 8003272:	2210      	movs	r2, #16
 8003274:	e785      	b.n	8003182 <UART_SetConfig+0xc6>
 8003276:	2202      	movs	r2, #2
 8003278:	e783      	b.n	8003182 <UART_SetConfig+0xc6>
 800327a:	2200      	movs	r2, #0
 800327c:	e781      	b.n	8003182 <UART_SetConfig+0xc6>
 800327e:	2210      	movs	r2, #16
 8003280:	e77f      	b.n	8003182 <UART_SetConfig+0xc6>
 8003282:	2210      	movs	r2, #16
 8003284:	e77d      	b.n	8003182 <UART_SetConfig+0xc6>
 8003286:	2202      	movs	r2, #2
 8003288:	e77b      	b.n	8003182 <UART_SetConfig+0xc6>
 800328a:	2200      	movs	r2, #0
 800328c:	e779      	b.n	8003182 <UART_SetConfig+0xc6>
 800328e:	2210      	movs	r2, #16
 8003290:	e777      	b.n	8003182 <UART_SetConfig+0xc6>
 8003292:	2210      	movs	r2, #16
 8003294:	e775      	b.n	8003182 <UART_SetConfig+0xc6>
    switch (clocksource)
 8003296:	2a08      	cmp	r2, #8
 8003298:	f200 808a 	bhi.w	80033b0 <UART_SetConfig+0x2f4>
 800329c:	e8df f002 	tbb	[pc, r2]
 80032a0:	88108808 	.word	0x88108808
 80032a4:	8888880d 	.word	0x8888880d
 80032a8:	05          	.byte	0x05
 80032a9:	00          	.byte	0x00
 80032aa:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80032ae:	e008      	b.n	80032c2 <UART_SetConfig+0x206>
        pclk = HAL_RCC_GetPCLK1Freq();
 80032b0:	f7ff fb2e 	bl	8002910 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80032b4:	b928      	cbnz	r0, 80032c2 <UART_SetConfig+0x206>
 80032b6:	2000      	movs	r0, #0
 80032b8:	e089      	b.n	80033ce <UART_SetConfig+0x312>
        pclk = HAL_RCC_GetSysClockFreq();
 80032ba:	f7fe fefd 	bl	80020b8 <HAL_RCC_GetSysClockFreq>
        break;
 80032be:	e7f9      	b.n	80032b4 <UART_SetConfig+0x1f8>
        pclk = (uint32_t) HSI_VALUE;
 80032c0:	481a      	ldr	r0, [pc, #104]	@ (800332c <UART_SetConfig+0x270>)
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80032c2:	6862      	ldr	r2, [r4, #4]
 80032c4:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 80032c8:	4283      	cmp	r3, r0
 80032ca:	d873      	bhi.n	80033b4 <UART_SetConfig+0x2f8>
 80032cc:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 80032d0:	d872      	bhi.n	80033b8 <UART_SetConfig+0x2fc>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80032d2:	0e01      	lsrs	r1, r0, #24
 80032d4:	0200      	lsls	r0, r0, #8
 80032d6:	0853      	lsrs	r3, r2, #1
 80032d8:	18c0      	adds	r0, r0, r3
 80032da:	f04f 0300 	mov.w	r3, #0
 80032de:	f141 0100 	adc.w	r1, r1, #0
 80032e2:	f7fd fae3 	bl	80008ac <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80032e6:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 80032ea:	4b11      	ldr	r3, [pc, #68]	@ (8003330 <UART_SetConfig+0x274>)
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d865      	bhi.n	80033bc <UART_SetConfig+0x300>
          huart->Instance->BRR = usartdiv;
 80032f0:	6823      	ldr	r3, [r4, #0]
 80032f2:	60d8      	str	r0, [r3, #12]
 80032f4:	2000      	movs	r0, #0
 80032f6:	e06a      	b.n	80033ce <UART_SetConfig+0x312>
    switch (clocksource)
 80032f8:	2a08      	cmp	r2, #8
 80032fa:	d861      	bhi.n	80033c0 <UART_SetConfig+0x304>
 80032fc:	e8df f002 	tbb	[pc, r2]
 8003300:	6005341a 	.word	0x6005341a
 8003304:	60606037 	.word	0x60606037
 8003308:	1e          	.byte	0x1e
 8003309:	00          	.byte	0x00
 800330a:	4808      	ldr	r0, [pc, #32]	@ (800332c <UART_SetConfig+0x270>)
 800330c:	e016      	b.n	800333c <UART_SetConfig+0x280>
 800330e:	bf00      	nop
 8003310:	efff69f3 	.word	0xefff69f3
 8003314:	40008000 	.word	0x40008000
 8003318:	40013800 	.word	0x40013800
 800331c:	40004400 	.word	0x40004400
 8003320:	40004800 	.word	0x40004800
 8003324:	40004c00 	.word	0x40004c00
 8003328:	40005000 	.word	0x40005000
 800332c:	00f42400 	.word	0x00f42400
 8003330:	000ffcff 	.word	0x000ffcff
        pclk = HAL_RCC_GetPCLK1Freq();
 8003334:	f7ff faec 	bl	8002910 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003338:	2800      	cmp	r0, #0
 800333a:	d043      	beq.n	80033c4 <UART_SetConfig+0x308>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800333c:	6862      	ldr	r2, [r4, #4]
 800333e:	0853      	lsrs	r3, r2, #1
 8003340:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8003344:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003348:	f1a3 0110 	sub.w	r1, r3, #16
 800334c:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8003350:	4291      	cmp	r1, r2
 8003352:	d839      	bhi.n	80033c8 <UART_SetConfig+0x30c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003354:	b29a      	uxth	r2, r3
 8003356:	f022 020f 	bic.w	r2, r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800335a:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800335e:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 8003360:	6822      	ldr	r2, [r4, #0]
 8003362:	60d3      	str	r3, [r2, #12]
 8003364:	2000      	movs	r0, #0
 8003366:	e032      	b.n	80033ce <UART_SetConfig+0x312>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003368:	f7ff fae4 	bl	8002934 <HAL_RCC_GetPCLK2Freq>
        break;
 800336c:	e7e4      	b.n	8003338 <UART_SetConfig+0x27c>
        pclk = HAL_RCC_GetSysClockFreq();
 800336e:	f7fe fea3 	bl	80020b8 <HAL_RCC_GetSysClockFreq>
        break;
 8003372:	e7e1      	b.n	8003338 <UART_SetConfig+0x27c>
    switch (clocksource)
 8003374:	481a      	ldr	r0, [pc, #104]	@ (80033e0 <UART_SetConfig+0x324>)
 8003376:	e002      	b.n	800337e <UART_SetConfig+0x2c2>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003378:	f7ff faca 	bl	8002910 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800337c:	b358      	cbz	r0, 80033d6 <UART_SetConfig+0x31a>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800337e:	6863      	ldr	r3, [r4, #4]
 8003380:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8003384:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003388:	f1a0 0210 	sub.w	r2, r0, #16
 800338c:	f64f 73ef 	movw	r3, #65519	@ 0xffef
 8003390:	429a      	cmp	r2, r3
 8003392:	d822      	bhi.n	80033da <UART_SetConfig+0x31e>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003394:	6823      	ldr	r3, [r4, #0]
 8003396:	b280      	uxth	r0, r0
 8003398:	60d8      	str	r0, [r3, #12]
 800339a:	2000      	movs	r0, #0
 800339c:	e017      	b.n	80033ce <UART_SetConfig+0x312>
        pclk = HAL_RCC_GetPCLK2Freq();
 800339e:	f7ff fac9 	bl	8002934 <HAL_RCC_GetPCLK2Freq>
        break;
 80033a2:	e7eb      	b.n	800337c <UART_SetConfig+0x2c0>
        pclk = HAL_RCC_GetSysClockFreq();
 80033a4:	f7fe fe88 	bl	80020b8 <HAL_RCC_GetSysClockFreq>
        break;
 80033a8:	e7e8      	b.n	800337c <UART_SetConfig+0x2c0>
        pclk = (uint32_t) LSE_VALUE;
 80033aa:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80033ae:	e7e6      	b.n	800337e <UART_SetConfig+0x2c2>
    switch (clocksource)
 80033b0:	2001      	movs	r0, #1
 80033b2:	e00c      	b.n	80033ce <UART_SetConfig+0x312>
        ret = HAL_ERROR;
 80033b4:	2001      	movs	r0, #1
 80033b6:	e00a      	b.n	80033ce <UART_SetConfig+0x312>
 80033b8:	2001      	movs	r0, #1
 80033ba:	e008      	b.n	80033ce <UART_SetConfig+0x312>
          ret = HAL_ERROR;
 80033bc:	2001      	movs	r0, #1
 80033be:	e006      	b.n	80033ce <UART_SetConfig+0x312>
    switch (clocksource)
 80033c0:	2001      	movs	r0, #1
 80033c2:	e004      	b.n	80033ce <UART_SetConfig+0x312>
 80033c4:	2000      	movs	r0, #0
 80033c6:	e002      	b.n	80033ce <UART_SetConfig+0x312>
        ret = HAL_ERROR;
 80033c8:	2001      	movs	r0, #1
 80033ca:	e000      	b.n	80033ce <UART_SetConfig+0x312>
    switch (clocksource)
 80033cc:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 80033ce:	2300      	movs	r3, #0
 80033d0:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 80033d2:	66e3      	str	r3, [r4, #108]	@ 0x6c
}
 80033d4:	bd10      	pop	{r4, pc}
 80033d6:	2000      	movs	r0, #0
 80033d8:	e7f9      	b.n	80033ce <UART_SetConfig+0x312>
        ret = HAL_ERROR;
 80033da:	2001      	movs	r0, #1
 80033dc:	e7f7      	b.n	80033ce <UART_SetConfig+0x312>
 80033de:	bf00      	nop
 80033e0:	00f42400 	.word	0x00f42400

080033e4 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033e4:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80033e6:	f013 0f08 	tst.w	r3, #8
 80033ea:	d006      	beq.n	80033fa <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033ec:	6802      	ldr	r2, [r0, #0]
 80033ee:	6853      	ldr	r3, [r2, #4]
 80033f0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80033f4:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 80033f6:	430b      	orrs	r3, r1
 80033f8:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80033fa:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80033fc:	f013 0f01 	tst.w	r3, #1
 8003400:	d006      	beq.n	8003410 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003402:	6802      	ldr	r2, [r0, #0]
 8003404:	6853      	ldr	r3, [r2, #4]
 8003406:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800340a:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800340c:	430b      	orrs	r3, r1
 800340e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003410:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8003412:	f013 0f02 	tst.w	r3, #2
 8003416:	d006      	beq.n	8003426 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003418:	6802      	ldr	r2, [r0, #0]
 800341a:	6853      	ldr	r3, [r2, #4]
 800341c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003420:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8003422:	430b      	orrs	r3, r1
 8003424:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003426:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8003428:	f013 0f04 	tst.w	r3, #4
 800342c:	d006      	beq.n	800343c <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800342e:	6802      	ldr	r2, [r0, #0]
 8003430:	6853      	ldr	r3, [r2, #4]
 8003432:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003436:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8003438:	430b      	orrs	r3, r1
 800343a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800343c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800343e:	f013 0f10 	tst.w	r3, #16
 8003442:	d006      	beq.n	8003452 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003444:	6802      	ldr	r2, [r0, #0]
 8003446:	6893      	ldr	r3, [r2, #8]
 8003448:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800344c:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 800344e:	430b      	orrs	r3, r1
 8003450:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003452:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8003454:	f013 0f20 	tst.w	r3, #32
 8003458:	d006      	beq.n	8003468 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800345a:	6802      	ldr	r2, [r0, #0]
 800345c:	6893      	ldr	r3, [r2, #8]
 800345e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003462:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8003464:	430b      	orrs	r3, r1
 8003466:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003468:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800346a:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800346e:	d00a      	beq.n	8003486 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003470:	6802      	ldr	r2, [r0, #0]
 8003472:	6853      	ldr	r3, [r2, #4]
 8003474:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003478:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 800347a:	430b      	orrs	r3, r1
 800347c:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800347e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8003480:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003484:	d00b      	beq.n	800349e <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003486:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8003488:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800348c:	d006      	beq.n	800349c <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800348e:	6802      	ldr	r2, [r0, #0]
 8003490:	6853      	ldr	r3, [r2, #4]
 8003492:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8003496:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8003498:	430b      	orrs	r3, r1
 800349a:	6053      	str	r3, [r2, #4]
}
 800349c:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800349e:	6802      	ldr	r2, [r0, #0]
 80034a0:	6853      	ldr	r3, [r2, #4]
 80034a2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80034a6:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 80034a8:	430b      	orrs	r3, r1
 80034aa:	6053      	str	r3, [r2, #4]
 80034ac:	e7eb      	b.n	8003486 <UART_AdvFeatureConfig+0xa2>

080034ae <UART_WaitOnFlagUntilTimeout>:
{
 80034ae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034b2:	4605      	mov	r5, r0
 80034b4:	460e      	mov	r6, r1
 80034b6:	4617      	mov	r7, r2
 80034b8:	4699      	mov	r9, r3
 80034ba:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034be:	682b      	ldr	r3, [r5, #0]
 80034c0:	69dc      	ldr	r4, [r3, #28]
 80034c2:	ea36 0404 	bics.w	r4, r6, r4
 80034c6:	bf0c      	ite	eq
 80034c8:	2401      	moveq	r4, #1
 80034ca:	2400      	movne	r4, #0
 80034cc:	42bc      	cmp	r4, r7
 80034ce:	d136      	bne.n	800353e <UART_WaitOnFlagUntilTimeout+0x90>
    if (Timeout != HAL_MAX_DELAY)
 80034d0:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 80034d4:	d0f3      	beq.n	80034be <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034d6:	f7fd fef7 	bl	80012c8 <HAL_GetTick>
 80034da:	eba0 0009 	sub.w	r0, r0, r9
 80034de:	4540      	cmp	r0, r8
 80034e0:	d830      	bhi.n	8003544 <UART_WaitOnFlagUntilTimeout+0x96>
 80034e2:	f1b8 0f00 	cmp.w	r8, #0
 80034e6:	d02f      	beq.n	8003548 <UART_WaitOnFlagUntilTimeout+0x9a>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80034e8:	682b      	ldr	r3, [r5, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	f012 0f04 	tst.w	r2, #4
 80034f0:	d0e5      	beq.n	80034be <UART_WaitOnFlagUntilTimeout+0x10>
 80034f2:	2e80      	cmp	r6, #128	@ 0x80
 80034f4:	d0e3      	beq.n	80034be <UART_WaitOnFlagUntilTimeout+0x10>
 80034f6:	2e40      	cmp	r6, #64	@ 0x40
 80034f8:	d0e1      	beq.n	80034be <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80034fa:	69da      	ldr	r2, [r3, #28]
 80034fc:	f012 0f08 	tst.w	r2, #8
 8003500:	d111      	bne.n	8003526 <UART_WaitOnFlagUntilTimeout+0x78>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003502:	69da      	ldr	r2, [r3, #28]
 8003504:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 8003508:	d0d9      	beq.n	80034be <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800350a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800350e:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 8003510:	4628      	mov	r0, r5
 8003512:	f7ff fda9 	bl	8003068 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003516:	2320      	movs	r3, #32
 8003518:	f8c5 3084 	str.w	r3, [r5, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 800351c:	2300      	movs	r3, #0
 800351e:	f885 3078 	strb.w	r3, [r5, #120]	@ 0x78
          return HAL_TIMEOUT;
 8003522:	2003      	movs	r0, #3
 8003524:	e00c      	b.n	8003540 <UART_WaitOnFlagUntilTimeout+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003526:	2408      	movs	r4, #8
 8003528:	621c      	str	r4, [r3, #32]
          UART_EndRxTransfer(huart);
 800352a:	4628      	mov	r0, r5
 800352c:	f7ff fd9c 	bl	8003068 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003530:	f8c5 4084 	str.w	r4, [r5, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 8003534:	2300      	movs	r3, #0
 8003536:	f885 3078 	strb.w	r3, [r5, #120]	@ 0x78
          return HAL_ERROR;
 800353a:	2001      	movs	r0, #1
 800353c:	e000      	b.n	8003540 <UART_WaitOnFlagUntilTimeout+0x92>
  return HAL_OK;
 800353e:	2000      	movs	r0, #0
}
 8003540:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8003544:	2003      	movs	r0, #3
 8003546:	e7fb      	b.n	8003540 <UART_WaitOnFlagUntilTimeout+0x92>
 8003548:	2003      	movs	r0, #3
 800354a:	e7f9      	b.n	8003540 <UART_WaitOnFlagUntilTimeout+0x92>

0800354c <HAL_UART_Transmit>:
{
 800354c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003550:	b082      	sub	sp, #8
 8003552:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8003554:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8003556:	2b20      	cmp	r3, #32
 8003558:	d156      	bne.n	8003608 <HAL_UART_Transmit+0xbc>
 800355a:	4604      	mov	r4, r0
 800355c:	460d      	mov	r5, r1
 800355e:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8003560:	2900      	cmp	r1, #0
 8003562:	d055      	beq.n	8003610 <HAL_UART_Transmit+0xc4>
 8003564:	b90a      	cbnz	r2, 800356a <HAL_UART_Transmit+0x1e>
      return  HAL_ERROR;
 8003566:	2001      	movs	r0, #1
 8003568:	e04f      	b.n	800360a <HAL_UART_Transmit+0xbe>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800356a:	2300      	movs	r3, #0
 800356c:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003570:	2321      	movs	r3, #33	@ 0x21
 8003572:	67c3      	str	r3, [r0, #124]	@ 0x7c
    tickstart = HAL_GetTick();
 8003574:	f7fd fea8 	bl	80012c8 <HAL_GetTick>
 8003578:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 800357a:	f8a4 8050 	strh.w	r8, [r4, #80]	@ 0x50
    huart->TxXferCount = Size;
 800357e:	f8a4 8052 	strh.w	r8, [r4, #82]	@ 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003582:	68a3      	ldr	r3, [r4, #8]
 8003584:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003588:	d002      	beq.n	8003590 <HAL_UART_Transmit+0x44>
      pdata16bits = NULL;
 800358a:	f04f 0800 	mov.w	r8, #0
 800358e:	e015      	b.n	80035bc <HAL_UART_Transmit+0x70>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003590:	6923      	ldr	r3, [r4, #16]
 8003592:	b33b      	cbz	r3, 80035e4 <HAL_UART_Transmit+0x98>
      pdata16bits = NULL;
 8003594:	f04f 0800 	mov.w	r8, #0
 8003598:	e010      	b.n	80035bc <HAL_UART_Transmit+0x70>
        huart->gState = HAL_UART_STATE_READY;
 800359a:	2320      	movs	r3, #32
 800359c:	67e3      	str	r3, [r4, #124]	@ 0x7c
        return HAL_TIMEOUT;
 800359e:	2003      	movs	r0, #3
 80035a0:	e033      	b.n	800360a <HAL_UART_Transmit+0xbe>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035a2:	f838 3b02 	ldrh.w	r3, [r8], #2
 80035a6:	6822      	ldr	r2, [r4, #0]
 80035a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035ac:	8513      	strh	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 80035ae:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
 80035b2:	b292      	uxth	r2, r2
 80035b4:	3a01      	subs	r2, #1
 80035b6:	b292      	uxth	r2, r2
 80035b8:	f8a4 2052 	strh.w	r2, [r4, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80035bc:	f8b4 3052 	ldrh.w	r3, [r4, #82]	@ 0x52
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	b193      	cbz	r3, 80035ea <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035c4:	9600      	str	r6, [sp, #0]
 80035c6:	463b      	mov	r3, r7
 80035c8:	2200      	movs	r2, #0
 80035ca:	2180      	movs	r1, #128	@ 0x80
 80035cc:	4620      	mov	r0, r4
 80035ce:	f7ff ff6e 	bl	80034ae <UART_WaitOnFlagUntilTimeout>
 80035d2:	2800      	cmp	r0, #0
 80035d4:	d1e1      	bne.n	800359a <HAL_UART_Transmit+0x4e>
      if (pdata8bits == NULL)
 80035d6:	2d00      	cmp	r5, #0
 80035d8:	d0e3      	beq.n	80035a2 <HAL_UART_Transmit+0x56>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80035da:	f815 2b01 	ldrb.w	r2, [r5], #1
 80035de:	6823      	ldr	r3, [r4, #0]
 80035e0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80035e2:	e7e4      	b.n	80035ae <HAL_UART_Transmit+0x62>
      pdata16bits = (const uint16_t *) pData;
 80035e4:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 80035e6:	2500      	movs	r5, #0
 80035e8:	e7e8      	b.n	80035bc <HAL_UART_Transmit+0x70>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035ea:	9600      	str	r6, [sp, #0]
 80035ec:	463b      	mov	r3, r7
 80035ee:	2200      	movs	r2, #0
 80035f0:	2140      	movs	r1, #64	@ 0x40
 80035f2:	4620      	mov	r0, r4
 80035f4:	f7ff ff5b 	bl	80034ae <UART_WaitOnFlagUntilTimeout>
 80035f8:	b910      	cbnz	r0, 8003600 <HAL_UART_Transmit+0xb4>
    huart->gState = HAL_UART_STATE_READY;
 80035fa:	2320      	movs	r3, #32
 80035fc:	67e3      	str	r3, [r4, #124]	@ 0x7c
    return HAL_OK;
 80035fe:	e004      	b.n	800360a <HAL_UART_Transmit+0xbe>
      huart->gState = HAL_UART_STATE_READY;
 8003600:	2320      	movs	r3, #32
 8003602:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 8003604:	2003      	movs	r0, #3
 8003606:	e000      	b.n	800360a <HAL_UART_Transmit+0xbe>
    return HAL_BUSY;
 8003608:	2002      	movs	r0, #2
}
 800360a:	b002      	add	sp, #8
 800360c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8003610:	2001      	movs	r0, #1
 8003612:	e7fa      	b.n	800360a <HAL_UART_Transmit+0xbe>

08003614 <UART_CheckIdleState>:
{
 8003614:	b530      	push	{r4, r5, lr}
 8003616:	b083      	sub	sp, #12
 8003618:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800361a:	2300      	movs	r3, #0
 800361c:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  tickstart = HAL_GetTick();
 8003620:	f7fd fe52 	bl	80012c8 <HAL_GetTick>
 8003624:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003626:	6822      	ldr	r2, [r4, #0]
 8003628:	6812      	ldr	r2, [r2, #0]
 800362a:	f012 0f08 	tst.w	r2, #8
 800362e:	d10f      	bne.n	8003650 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003630:	6823      	ldr	r3, [r4, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f013 0f04 	tst.w	r3, #4
 8003638:	d126      	bne.n	8003688 <UART_CheckIdleState+0x74>
  huart->gState = HAL_UART_STATE_READY;
 800363a:	2320      	movs	r3, #32
 800363c:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800363e:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003642:	2000      	movs	r0, #0
 8003644:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003646:	6660      	str	r0, [r4, #100]	@ 0x64
  __HAL_UNLOCK(huart);
 8003648:	f884 0078 	strb.w	r0, [r4, #120]	@ 0x78
}
 800364c:	b003      	add	sp, #12
 800364e:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003650:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003654:	9300      	str	r3, [sp, #0]
 8003656:	4603      	mov	r3, r0
 8003658:	2200      	movs	r2, #0
 800365a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800365e:	4620      	mov	r0, r4
 8003660:	f7ff ff25 	bl	80034ae <UART_WaitOnFlagUntilTimeout>
 8003664:	2800      	cmp	r0, #0
 8003666:	d0e3      	beq.n	8003630 <UART_CheckIdleState+0x1c>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003668:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800366a:	e852 3f00 	ldrex	r3, [r2]
 800366e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003672:	e842 3100 	strex	r1, r3, [r2]
 8003676:	2900      	cmp	r1, #0
 8003678:	d1f6      	bne.n	8003668 <UART_CheckIdleState+0x54>
      huart->gState = HAL_UART_STATE_READY;
 800367a:	2320      	movs	r3, #32
 800367c:	67e3      	str	r3, [r4, #124]	@ 0x7c
      __HAL_UNLOCK(huart);
 800367e:	2300      	movs	r3, #0
 8003680:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
      return HAL_TIMEOUT;
 8003684:	2003      	movs	r0, #3
 8003686:	e7e1      	b.n	800364c <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003688:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800368c:	9300      	str	r3, [sp, #0]
 800368e:	462b      	mov	r3, r5
 8003690:	2200      	movs	r2, #0
 8003692:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003696:	4620      	mov	r0, r4
 8003698:	f7ff ff09 	bl	80034ae <UART_WaitOnFlagUntilTimeout>
 800369c:	2800      	cmp	r0, #0
 800369e:	d0cc      	beq.n	800363a <UART_CheckIdleState+0x26>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036a0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a2:	e852 3f00 	ldrex	r3, [r2]
 80036a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036aa:	e842 3100 	strex	r1, r3, [r2]
 80036ae:	2900      	cmp	r1, #0
 80036b0:	d1f6      	bne.n	80036a0 <UART_CheckIdleState+0x8c>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036b2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b4:	f102 0308 	add.w	r3, r2, #8
 80036b8:	e853 3f00 	ldrex	r3, [r3]
 80036bc:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c0:	3208      	adds	r2, #8
 80036c2:	e842 3100 	strex	r1, r3, [r2]
 80036c6:	2900      	cmp	r1, #0
 80036c8:	d1f3      	bne.n	80036b2 <UART_CheckIdleState+0x9e>
      huart->RxState = HAL_UART_STATE_READY;
 80036ca:	2320      	movs	r3, #32
 80036cc:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
      __HAL_UNLOCK(huart);
 80036d0:	2300      	movs	r3, #0
 80036d2:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
      return HAL_TIMEOUT;
 80036d6:	2003      	movs	r0, #3
 80036d8:	e7b8      	b.n	800364c <UART_CheckIdleState+0x38>

080036da <HAL_UART_Init>:
  if (huart == NULL)
 80036da:	b368      	cbz	r0, 8003738 <HAL_UART_Init+0x5e>
{
 80036dc:	b510      	push	{r4, lr}
 80036de:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80036e0:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 80036e2:	b303      	cbz	r3, 8003726 <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 80036e4:	2324      	movs	r3, #36	@ 0x24
 80036e6:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 80036e8:	6822      	ldr	r2, [r4, #0]
 80036ea:	6813      	ldr	r3, [r2, #0]
 80036ec:	f023 0301 	bic.w	r3, r3, #1
 80036f0:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80036f2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80036f4:	b9e3      	cbnz	r3, 8003730 <HAL_UART_Init+0x56>
  if (UART_SetConfig(huart) == HAL_ERROR)
 80036f6:	4620      	mov	r0, r4
 80036f8:	f7ff fce0 	bl	80030bc <UART_SetConfig>
 80036fc:	2801      	cmp	r0, #1
 80036fe:	d011      	beq.n	8003724 <HAL_UART_Init+0x4a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003700:	6822      	ldr	r2, [r4, #0]
 8003702:	6853      	ldr	r3, [r2, #4]
 8003704:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8003708:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800370a:	6822      	ldr	r2, [r4, #0]
 800370c:	6893      	ldr	r3, [r2, #8]
 800370e:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8003712:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8003714:	6822      	ldr	r2, [r4, #0]
 8003716:	6813      	ldr	r3, [r2, #0]
 8003718:	f043 0301 	orr.w	r3, r3, #1
 800371c:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800371e:	4620      	mov	r0, r4
 8003720:	f7ff ff78 	bl	8003614 <UART_CheckIdleState>
}
 8003724:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8003726:	f880 3078 	strb.w	r3, [r0, #120]	@ 0x78
    HAL_UART_MspInit(huart);
 800372a:	f7fe fbe9 	bl	8001f00 <HAL_UART_MspInit>
 800372e:	e7d9      	b.n	80036e4 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 8003730:	4620      	mov	r0, r4
 8003732:	f7ff fe57 	bl	80033e4 <UART_AdvFeatureConfig>
 8003736:	e7de      	b.n	80036f6 <HAL_UART_Init+0x1c>
    return HAL_ERROR;
 8003738:	2001      	movs	r0, #1
}
 800373a:	4770      	bx	lr

0800373c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800373c:	e7fe      	b.n	800373c <NMI_Handler>

0800373e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800373e:	e7fe      	b.n	800373e <HardFault_Handler>

08003740 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003740:	e7fe      	b.n	8003740 <MemManage_Handler>

08003742 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003742:	e7fe      	b.n	8003742 <BusFault_Handler>

08003744 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003744:	e7fe      	b.n	8003744 <UsageFault_Handler>

08003746 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003746:	4770      	bx	lr

08003748 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003748:	4770      	bx	lr

0800374a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800374a:	4770      	bx	lr

0800374c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800374c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800374e:	f7fd fdaf 	bl	80012b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003752:	bd08      	pop	{r3, pc}

08003754 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003754:	b510      	push	{r4, lr}
 8003756:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003758:	4a0c      	ldr	r2, [pc, #48]	@ (800378c <_sbrk+0x38>)
 800375a:	490d      	ldr	r1, [pc, #52]	@ (8003790 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800375c:	480d      	ldr	r0, [pc, #52]	@ (8003794 <_sbrk+0x40>)
 800375e:	6800      	ldr	r0, [r0, #0]
 8003760:	b140      	cbz	r0, 8003774 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003762:	480c      	ldr	r0, [pc, #48]	@ (8003794 <_sbrk+0x40>)
 8003764:	6800      	ldr	r0, [r0, #0]
 8003766:	4403      	add	r3, r0
 8003768:	1a52      	subs	r2, r2, r1
 800376a:	4293      	cmp	r3, r2
 800376c:	d806      	bhi.n	800377c <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800376e:	4a09      	ldr	r2, [pc, #36]	@ (8003794 <_sbrk+0x40>)
 8003770:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8003772:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8003774:	4807      	ldr	r0, [pc, #28]	@ (8003794 <_sbrk+0x40>)
 8003776:	4c08      	ldr	r4, [pc, #32]	@ (8003798 <_sbrk+0x44>)
 8003778:	6004      	str	r4, [r0, #0]
 800377a:	e7f2      	b.n	8003762 <_sbrk+0xe>
    errno = ENOMEM;
 800377c:	f000 f86c 	bl	8003858 <__errno>
 8003780:	230c      	movs	r3, #12
 8003782:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8003784:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003788:	e7f3      	b.n	8003772 <_sbrk+0x1e>
 800378a:	bf00      	nop
 800378c:	20018000 	.word	0x20018000
 8003790:	00000400 	.word	0x00000400
 8003794:	2000036c 	.word	0x2000036c
 8003798:	200004b8 	.word	0x200004b8

0800379c <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800379c:	4a03      	ldr	r2, [pc, #12]	@ (80037ac <SystemInit+0x10>)
 800379e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80037a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80037a6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80037aa:	4770      	bx	lr
 80037ac:	e000ed00 	.word	0xe000ed00

080037b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80037b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80037e8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80037b4:	f7ff fff2 	bl	800379c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80037b8:	480c      	ldr	r0, [pc, #48]	@ (80037ec <LoopForever+0x6>)
  ldr r1, =_edata
 80037ba:	490d      	ldr	r1, [pc, #52]	@ (80037f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80037bc:	4a0d      	ldr	r2, [pc, #52]	@ (80037f4 <LoopForever+0xe>)
  movs r3, #0
 80037be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80037c0:	e002      	b.n	80037c8 <LoopCopyDataInit>

080037c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80037c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037c6:	3304      	adds	r3, #4

080037c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037cc:	d3f9      	bcc.n	80037c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037ce:	4a0a      	ldr	r2, [pc, #40]	@ (80037f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80037d0:	4c0a      	ldr	r4, [pc, #40]	@ (80037fc <LoopForever+0x16>)
  movs r3, #0
 80037d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037d4:	e001      	b.n	80037da <LoopFillZerobss>

080037d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037d8:	3204      	adds	r2, #4

080037da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037dc:	d3fb      	bcc.n	80037d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80037de:	f000 f841 	bl	8003864 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80037e2:	f7fd fbf9 	bl	8000fd8 <main>

080037e6 <LoopForever>:

LoopForever:
    b LoopForever
 80037e6:	e7fe      	b.n	80037e6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80037e8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80037ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037f0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80037f4:	080048a8 	.word	0x080048a8
  ldr r2, =_sbss
 80037f8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80037fc:	200004b8 	.word	0x200004b8

08003800 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003800:	e7fe      	b.n	8003800 <ADC1_2_IRQHandler>
	...

08003804 <siprintf>:
 8003804:	b40e      	push	{r1, r2, r3}
 8003806:	b510      	push	{r4, lr}
 8003808:	b09d      	sub	sp, #116	@ 0x74
 800380a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800380c:	9002      	str	r0, [sp, #8]
 800380e:	9006      	str	r0, [sp, #24]
 8003810:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003814:	480a      	ldr	r0, [pc, #40]	@ (8003840 <siprintf+0x3c>)
 8003816:	9107      	str	r1, [sp, #28]
 8003818:	9104      	str	r1, [sp, #16]
 800381a:	490a      	ldr	r1, [pc, #40]	@ (8003844 <siprintf+0x40>)
 800381c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003820:	9105      	str	r1, [sp, #20]
 8003822:	2400      	movs	r4, #0
 8003824:	a902      	add	r1, sp, #8
 8003826:	6800      	ldr	r0, [r0, #0]
 8003828:	9301      	str	r3, [sp, #4]
 800382a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800382c:	f000 f8a0 	bl	8003970 <_svfiprintf_r>
 8003830:	9b02      	ldr	r3, [sp, #8]
 8003832:	701c      	strb	r4, [r3, #0]
 8003834:	b01d      	add	sp, #116	@ 0x74
 8003836:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800383a:	b003      	add	sp, #12
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	20000010 	.word	0x20000010
 8003844:	ffff0208 	.word	0xffff0208

08003848 <memset>:
 8003848:	4402      	add	r2, r0
 800384a:	4603      	mov	r3, r0
 800384c:	4293      	cmp	r3, r2
 800384e:	d100      	bne.n	8003852 <memset+0xa>
 8003850:	4770      	bx	lr
 8003852:	f803 1b01 	strb.w	r1, [r3], #1
 8003856:	e7f9      	b.n	800384c <memset+0x4>

08003858 <__errno>:
 8003858:	4b01      	ldr	r3, [pc, #4]	@ (8003860 <__errno+0x8>)
 800385a:	6818      	ldr	r0, [r3, #0]
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	20000010 	.word	0x20000010

08003864 <__libc_init_array>:
 8003864:	b570      	push	{r4, r5, r6, lr}
 8003866:	4b0d      	ldr	r3, [pc, #52]	@ (800389c <__libc_init_array+0x38>)
 8003868:	4d0d      	ldr	r5, [pc, #52]	@ (80038a0 <__libc_init_array+0x3c>)
 800386a:	1b5b      	subs	r3, r3, r5
 800386c:	109c      	asrs	r4, r3, #2
 800386e:	2600      	movs	r6, #0
 8003870:	42a6      	cmp	r6, r4
 8003872:	d109      	bne.n	8003888 <__libc_init_array+0x24>
 8003874:	f000 ff90 	bl	8004798 <_init>
 8003878:	4d0a      	ldr	r5, [pc, #40]	@ (80038a4 <__libc_init_array+0x40>)
 800387a:	4b0b      	ldr	r3, [pc, #44]	@ (80038a8 <__libc_init_array+0x44>)
 800387c:	1b5b      	subs	r3, r3, r5
 800387e:	109c      	asrs	r4, r3, #2
 8003880:	2600      	movs	r6, #0
 8003882:	42a6      	cmp	r6, r4
 8003884:	d105      	bne.n	8003892 <__libc_init_array+0x2e>
 8003886:	bd70      	pop	{r4, r5, r6, pc}
 8003888:	f855 3b04 	ldr.w	r3, [r5], #4
 800388c:	4798      	blx	r3
 800388e:	3601      	adds	r6, #1
 8003890:	e7ee      	b.n	8003870 <__libc_init_array+0xc>
 8003892:	f855 3b04 	ldr.w	r3, [r5], #4
 8003896:	4798      	blx	r3
 8003898:	3601      	adds	r6, #1
 800389a:	e7f2      	b.n	8003882 <__libc_init_array+0x1e>
 800389c:	08004898 	.word	0x08004898
 80038a0:	08004898 	.word	0x08004898
 80038a4:	08004898 	.word	0x08004898
 80038a8:	0800489c 	.word	0x0800489c

080038ac <__retarget_lock_acquire_recursive>:
 80038ac:	4770      	bx	lr

080038ae <__retarget_lock_release_recursive>:
 80038ae:	4770      	bx	lr

080038b0 <__ssputs_r>:
 80038b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038b4:	688e      	ldr	r6, [r1, #8]
 80038b6:	461f      	mov	r7, r3
 80038b8:	42be      	cmp	r6, r7
 80038ba:	4682      	mov	sl, r0
 80038bc:	460c      	mov	r4, r1
 80038be:	4690      	mov	r8, r2
 80038c0:	4633      	mov	r3, r6
 80038c2:	d853      	bhi.n	800396c <__ssputs_r+0xbc>
 80038c4:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 80038c8:	f410 6f90 	tst.w	r0, #1152	@ 0x480
 80038cc:	d02b      	beq.n	8003926 <__ssputs_r+0x76>
 80038ce:	6965      	ldr	r5, [r4, #20]
 80038d0:	6823      	ldr	r3, [r4, #0]
 80038d2:	6909      	ldr	r1, [r1, #16]
 80038d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80038d8:	eba3 0901 	sub.w	r9, r3, r1
 80038dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80038e0:	1c7b      	adds	r3, r7, #1
 80038e2:	106d      	asrs	r5, r5, #1
 80038e4:	444b      	add	r3, r9
 80038e6:	42ab      	cmp	r3, r5
 80038e8:	462a      	mov	r2, r5
 80038ea:	bf84      	itt	hi
 80038ec:	461d      	movhi	r5, r3
 80038ee:	462a      	movhi	r2, r5
 80038f0:	0543      	lsls	r3, r0, #21
 80038f2:	d527      	bpl.n	8003944 <__ssputs_r+0x94>
 80038f4:	4611      	mov	r1, r2
 80038f6:	4650      	mov	r0, sl
 80038f8:	f000 f958 	bl	8003bac <_malloc_r>
 80038fc:	4606      	mov	r6, r0
 80038fe:	b358      	cbz	r0, 8003958 <__ssputs_r+0xa8>
 8003900:	6921      	ldr	r1, [r4, #16]
 8003902:	464a      	mov	r2, r9
 8003904:	f000 fbc4 	bl	8004090 <memcpy>
 8003908:	89a3      	ldrh	r3, [r4, #12]
 800390a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800390e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003912:	81a3      	strh	r3, [r4, #12]
 8003914:	6126      	str	r6, [r4, #16]
 8003916:	6165      	str	r5, [r4, #20]
 8003918:	444e      	add	r6, r9
 800391a:	eba5 0509 	sub.w	r5, r5, r9
 800391e:	6026      	str	r6, [r4, #0]
 8003920:	60a5      	str	r5, [r4, #8]
 8003922:	463e      	mov	r6, r7
 8003924:	463b      	mov	r3, r7
 8003926:	461f      	mov	r7, r3
 8003928:	6820      	ldr	r0, [r4, #0]
 800392a:	463a      	mov	r2, r7
 800392c:	4641      	mov	r1, r8
 800392e:	f000 fb85 	bl	800403c <memmove>
 8003932:	68a3      	ldr	r3, [r4, #8]
 8003934:	1b9b      	subs	r3, r3, r6
 8003936:	60a3      	str	r3, [r4, #8]
 8003938:	6823      	ldr	r3, [r4, #0]
 800393a:	443b      	add	r3, r7
 800393c:	6023      	str	r3, [r4, #0]
 800393e:	2000      	movs	r0, #0
 8003940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003944:	4650      	mov	r0, sl
 8003946:	f000 fb4b 	bl	8003fe0 <_realloc_r>
 800394a:	4606      	mov	r6, r0
 800394c:	2800      	cmp	r0, #0
 800394e:	d1e1      	bne.n	8003914 <__ssputs_r+0x64>
 8003950:	6921      	ldr	r1, [r4, #16]
 8003952:	4650      	mov	r0, sl
 8003954:	f000 fbaa 	bl	80040ac <_free_r>
 8003958:	230c      	movs	r3, #12
 800395a:	f8ca 3000 	str.w	r3, [sl]
 800395e:	89a3      	ldrh	r3, [r4, #12]
 8003960:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003964:	81a3      	strh	r3, [r4, #12]
 8003966:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800396a:	e7e9      	b.n	8003940 <__ssputs_r+0x90>
 800396c:	463e      	mov	r6, r7
 800396e:	e7db      	b.n	8003928 <__ssputs_r+0x78>

08003970 <_svfiprintf_r>:
 8003970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003974:	4698      	mov	r8, r3
 8003976:	898b      	ldrh	r3, [r1, #12]
 8003978:	061b      	lsls	r3, r3, #24
 800397a:	b09d      	sub	sp, #116	@ 0x74
 800397c:	4607      	mov	r7, r0
 800397e:	460d      	mov	r5, r1
 8003980:	4614      	mov	r4, r2
 8003982:	d510      	bpl.n	80039a6 <_svfiprintf_r+0x36>
 8003984:	690b      	ldr	r3, [r1, #16]
 8003986:	b973      	cbnz	r3, 80039a6 <_svfiprintf_r+0x36>
 8003988:	2140      	movs	r1, #64	@ 0x40
 800398a:	f000 f90f 	bl	8003bac <_malloc_r>
 800398e:	6028      	str	r0, [r5, #0]
 8003990:	6128      	str	r0, [r5, #16]
 8003992:	b930      	cbnz	r0, 80039a2 <_svfiprintf_r+0x32>
 8003994:	230c      	movs	r3, #12
 8003996:	603b      	str	r3, [r7, #0]
 8003998:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800399c:	b01d      	add	sp, #116	@ 0x74
 800399e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039a2:	2340      	movs	r3, #64	@ 0x40
 80039a4:	616b      	str	r3, [r5, #20]
 80039a6:	2300      	movs	r3, #0
 80039a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80039aa:	2320      	movs	r3, #32
 80039ac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80039b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80039b4:	2330      	movs	r3, #48	@ 0x30
 80039b6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003b54 <_svfiprintf_r+0x1e4>
 80039ba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80039be:	f04f 0901 	mov.w	r9, #1
 80039c2:	4623      	mov	r3, r4
 80039c4:	469a      	mov	sl, r3
 80039c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80039ca:	b10a      	cbz	r2, 80039d0 <_svfiprintf_r+0x60>
 80039cc:	2a25      	cmp	r2, #37	@ 0x25
 80039ce:	d1f9      	bne.n	80039c4 <_svfiprintf_r+0x54>
 80039d0:	ebba 0b04 	subs.w	fp, sl, r4
 80039d4:	d00b      	beq.n	80039ee <_svfiprintf_r+0x7e>
 80039d6:	465b      	mov	r3, fp
 80039d8:	4622      	mov	r2, r4
 80039da:	4629      	mov	r1, r5
 80039dc:	4638      	mov	r0, r7
 80039de:	f7ff ff67 	bl	80038b0 <__ssputs_r>
 80039e2:	3001      	adds	r0, #1
 80039e4:	f000 80a7 	beq.w	8003b36 <_svfiprintf_r+0x1c6>
 80039e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80039ea:	445a      	add	r2, fp
 80039ec:	9209      	str	r2, [sp, #36]	@ 0x24
 80039ee:	f89a 3000 	ldrb.w	r3, [sl]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	f000 809f 	beq.w	8003b36 <_svfiprintf_r+0x1c6>
 80039f8:	2300      	movs	r3, #0
 80039fa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80039fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a02:	f10a 0a01 	add.w	sl, sl, #1
 8003a06:	9304      	str	r3, [sp, #16]
 8003a08:	9307      	str	r3, [sp, #28]
 8003a0a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003a0e:	931a      	str	r3, [sp, #104]	@ 0x68
 8003a10:	4654      	mov	r4, sl
 8003a12:	2205      	movs	r2, #5
 8003a14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a18:	484e      	ldr	r0, [pc, #312]	@ (8003b54 <_svfiprintf_r+0x1e4>)
 8003a1a:	f7fc fbc1 	bl	80001a0 <memchr>
 8003a1e:	9a04      	ldr	r2, [sp, #16]
 8003a20:	b9d8      	cbnz	r0, 8003a5a <_svfiprintf_r+0xea>
 8003a22:	06d0      	lsls	r0, r2, #27
 8003a24:	bf44      	itt	mi
 8003a26:	2320      	movmi	r3, #32
 8003a28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003a2c:	0711      	lsls	r1, r2, #28
 8003a2e:	bf44      	itt	mi
 8003a30:	232b      	movmi	r3, #43	@ 0x2b
 8003a32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003a36:	f89a 3000 	ldrb.w	r3, [sl]
 8003a3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a3c:	d015      	beq.n	8003a6a <_svfiprintf_r+0xfa>
 8003a3e:	9a07      	ldr	r2, [sp, #28]
 8003a40:	4654      	mov	r4, sl
 8003a42:	2000      	movs	r0, #0
 8003a44:	f04f 0c0a 	mov.w	ip, #10
 8003a48:	4621      	mov	r1, r4
 8003a4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a4e:	3b30      	subs	r3, #48	@ 0x30
 8003a50:	2b09      	cmp	r3, #9
 8003a52:	d94b      	bls.n	8003aec <_svfiprintf_r+0x17c>
 8003a54:	b1b0      	cbz	r0, 8003a84 <_svfiprintf_r+0x114>
 8003a56:	9207      	str	r2, [sp, #28]
 8003a58:	e014      	b.n	8003a84 <_svfiprintf_r+0x114>
 8003a5a:	eba0 0308 	sub.w	r3, r0, r8
 8003a5e:	fa09 f303 	lsl.w	r3, r9, r3
 8003a62:	4313      	orrs	r3, r2
 8003a64:	9304      	str	r3, [sp, #16]
 8003a66:	46a2      	mov	sl, r4
 8003a68:	e7d2      	b.n	8003a10 <_svfiprintf_r+0xa0>
 8003a6a:	9b03      	ldr	r3, [sp, #12]
 8003a6c:	1d19      	adds	r1, r3, #4
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	9103      	str	r1, [sp, #12]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	bfbb      	ittet	lt
 8003a76:	425b      	neglt	r3, r3
 8003a78:	f042 0202 	orrlt.w	r2, r2, #2
 8003a7c:	9307      	strge	r3, [sp, #28]
 8003a7e:	9307      	strlt	r3, [sp, #28]
 8003a80:	bfb8      	it	lt
 8003a82:	9204      	strlt	r2, [sp, #16]
 8003a84:	7823      	ldrb	r3, [r4, #0]
 8003a86:	2b2e      	cmp	r3, #46	@ 0x2e
 8003a88:	d10a      	bne.n	8003aa0 <_svfiprintf_r+0x130>
 8003a8a:	7863      	ldrb	r3, [r4, #1]
 8003a8c:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a8e:	d132      	bne.n	8003af6 <_svfiprintf_r+0x186>
 8003a90:	9b03      	ldr	r3, [sp, #12]
 8003a92:	1d1a      	adds	r2, r3, #4
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	9203      	str	r2, [sp, #12]
 8003a98:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003a9c:	3402      	adds	r4, #2
 8003a9e:	9305      	str	r3, [sp, #20]
 8003aa0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003b64 <_svfiprintf_r+0x1f4>
 8003aa4:	7821      	ldrb	r1, [r4, #0]
 8003aa6:	2203      	movs	r2, #3
 8003aa8:	4650      	mov	r0, sl
 8003aaa:	f7fc fb79 	bl	80001a0 <memchr>
 8003aae:	b138      	cbz	r0, 8003ac0 <_svfiprintf_r+0x150>
 8003ab0:	9b04      	ldr	r3, [sp, #16]
 8003ab2:	eba0 000a 	sub.w	r0, r0, sl
 8003ab6:	2240      	movs	r2, #64	@ 0x40
 8003ab8:	4082      	lsls	r2, r0
 8003aba:	4313      	orrs	r3, r2
 8003abc:	3401      	adds	r4, #1
 8003abe:	9304      	str	r3, [sp, #16]
 8003ac0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ac4:	4824      	ldr	r0, [pc, #144]	@ (8003b58 <_svfiprintf_r+0x1e8>)
 8003ac6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003aca:	2206      	movs	r2, #6
 8003acc:	f7fc fb68 	bl	80001a0 <memchr>
 8003ad0:	2800      	cmp	r0, #0
 8003ad2:	d036      	beq.n	8003b42 <_svfiprintf_r+0x1d2>
 8003ad4:	4b21      	ldr	r3, [pc, #132]	@ (8003b5c <_svfiprintf_r+0x1ec>)
 8003ad6:	bb1b      	cbnz	r3, 8003b20 <_svfiprintf_r+0x1b0>
 8003ad8:	9b03      	ldr	r3, [sp, #12]
 8003ada:	3307      	adds	r3, #7
 8003adc:	f023 0307 	bic.w	r3, r3, #7
 8003ae0:	3308      	adds	r3, #8
 8003ae2:	9303      	str	r3, [sp, #12]
 8003ae4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ae6:	4433      	add	r3, r6
 8003ae8:	9309      	str	r3, [sp, #36]	@ 0x24
 8003aea:	e76a      	b.n	80039c2 <_svfiprintf_r+0x52>
 8003aec:	fb0c 3202 	mla	r2, ip, r2, r3
 8003af0:	460c      	mov	r4, r1
 8003af2:	2001      	movs	r0, #1
 8003af4:	e7a8      	b.n	8003a48 <_svfiprintf_r+0xd8>
 8003af6:	2300      	movs	r3, #0
 8003af8:	3401      	adds	r4, #1
 8003afa:	9305      	str	r3, [sp, #20]
 8003afc:	4619      	mov	r1, r3
 8003afe:	f04f 0c0a 	mov.w	ip, #10
 8003b02:	4620      	mov	r0, r4
 8003b04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b08:	3a30      	subs	r2, #48	@ 0x30
 8003b0a:	2a09      	cmp	r2, #9
 8003b0c:	d903      	bls.n	8003b16 <_svfiprintf_r+0x1a6>
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d0c6      	beq.n	8003aa0 <_svfiprintf_r+0x130>
 8003b12:	9105      	str	r1, [sp, #20]
 8003b14:	e7c4      	b.n	8003aa0 <_svfiprintf_r+0x130>
 8003b16:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b1a:	4604      	mov	r4, r0
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e7f0      	b.n	8003b02 <_svfiprintf_r+0x192>
 8003b20:	ab03      	add	r3, sp, #12
 8003b22:	9300      	str	r3, [sp, #0]
 8003b24:	462a      	mov	r2, r5
 8003b26:	4b0e      	ldr	r3, [pc, #56]	@ (8003b60 <_svfiprintf_r+0x1f0>)
 8003b28:	a904      	add	r1, sp, #16
 8003b2a:	4638      	mov	r0, r7
 8003b2c:	f3af 8000 	nop.w
 8003b30:	1c42      	adds	r2, r0, #1
 8003b32:	4606      	mov	r6, r0
 8003b34:	d1d6      	bne.n	8003ae4 <_svfiprintf_r+0x174>
 8003b36:	89ab      	ldrh	r3, [r5, #12]
 8003b38:	065b      	lsls	r3, r3, #25
 8003b3a:	f53f af2d 	bmi.w	8003998 <_svfiprintf_r+0x28>
 8003b3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003b40:	e72c      	b.n	800399c <_svfiprintf_r+0x2c>
 8003b42:	ab03      	add	r3, sp, #12
 8003b44:	9300      	str	r3, [sp, #0]
 8003b46:	462a      	mov	r2, r5
 8003b48:	4b05      	ldr	r3, [pc, #20]	@ (8003b60 <_svfiprintf_r+0x1f0>)
 8003b4a:	a904      	add	r1, sp, #16
 8003b4c:	4638      	mov	r0, r7
 8003b4e:	f000 f91b 	bl	8003d88 <_printf_i>
 8003b52:	e7ed      	b.n	8003b30 <_svfiprintf_r+0x1c0>
 8003b54:	08004820 	.word	0x08004820
 8003b58:	0800482a 	.word	0x0800482a
 8003b5c:	00000000 	.word	0x00000000
 8003b60:	080038b1 	.word	0x080038b1
 8003b64:	08004826 	.word	0x08004826

08003b68 <sbrk_aligned>:
 8003b68:	b570      	push	{r4, r5, r6, lr}
 8003b6a:	4e0f      	ldr	r6, [pc, #60]	@ (8003ba8 <sbrk_aligned+0x40>)
 8003b6c:	460c      	mov	r4, r1
 8003b6e:	6831      	ldr	r1, [r6, #0]
 8003b70:	4605      	mov	r5, r0
 8003b72:	b911      	cbnz	r1, 8003b7a <sbrk_aligned+0x12>
 8003b74:	f000 fa7c 	bl	8004070 <_sbrk_r>
 8003b78:	6030      	str	r0, [r6, #0]
 8003b7a:	4621      	mov	r1, r4
 8003b7c:	4628      	mov	r0, r5
 8003b7e:	f000 fa77 	bl	8004070 <_sbrk_r>
 8003b82:	1c43      	adds	r3, r0, #1
 8003b84:	d103      	bne.n	8003b8e <sbrk_aligned+0x26>
 8003b86:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003b8a:	4620      	mov	r0, r4
 8003b8c:	bd70      	pop	{r4, r5, r6, pc}
 8003b8e:	1cc4      	adds	r4, r0, #3
 8003b90:	f024 0403 	bic.w	r4, r4, #3
 8003b94:	42a0      	cmp	r0, r4
 8003b96:	d0f8      	beq.n	8003b8a <sbrk_aligned+0x22>
 8003b98:	1a21      	subs	r1, r4, r0
 8003b9a:	4628      	mov	r0, r5
 8003b9c:	f000 fa68 	bl	8004070 <_sbrk_r>
 8003ba0:	3001      	adds	r0, #1
 8003ba2:	d1f2      	bne.n	8003b8a <sbrk_aligned+0x22>
 8003ba4:	e7ef      	b.n	8003b86 <sbrk_aligned+0x1e>
 8003ba6:	bf00      	nop
 8003ba8:	200004ac 	.word	0x200004ac

08003bac <_malloc_r>:
 8003bac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003bb0:	1ccd      	adds	r5, r1, #3
 8003bb2:	f025 0503 	bic.w	r5, r5, #3
 8003bb6:	3508      	adds	r5, #8
 8003bb8:	2d0c      	cmp	r5, #12
 8003bba:	bf38      	it	cc
 8003bbc:	250c      	movcc	r5, #12
 8003bbe:	2d00      	cmp	r5, #0
 8003bc0:	4606      	mov	r6, r0
 8003bc2:	db01      	blt.n	8003bc8 <_malloc_r+0x1c>
 8003bc4:	42a9      	cmp	r1, r5
 8003bc6:	d904      	bls.n	8003bd2 <_malloc_r+0x26>
 8003bc8:	230c      	movs	r3, #12
 8003bca:	6033      	str	r3, [r6, #0]
 8003bcc:	2000      	movs	r0, #0
 8003bce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003bd2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003ca8 <_malloc_r+0xfc>
 8003bd6:	f000 f9f7 	bl	8003fc8 <__malloc_lock>
 8003bda:	f8d8 3000 	ldr.w	r3, [r8]
 8003bde:	461c      	mov	r4, r3
 8003be0:	bb44      	cbnz	r4, 8003c34 <_malloc_r+0x88>
 8003be2:	4629      	mov	r1, r5
 8003be4:	4630      	mov	r0, r6
 8003be6:	f7ff ffbf 	bl	8003b68 <sbrk_aligned>
 8003bea:	1c43      	adds	r3, r0, #1
 8003bec:	4604      	mov	r4, r0
 8003bee:	d158      	bne.n	8003ca2 <_malloc_r+0xf6>
 8003bf0:	f8d8 4000 	ldr.w	r4, [r8]
 8003bf4:	4627      	mov	r7, r4
 8003bf6:	2f00      	cmp	r7, #0
 8003bf8:	d143      	bne.n	8003c82 <_malloc_r+0xd6>
 8003bfa:	2c00      	cmp	r4, #0
 8003bfc:	d04b      	beq.n	8003c96 <_malloc_r+0xea>
 8003bfe:	6823      	ldr	r3, [r4, #0]
 8003c00:	4639      	mov	r1, r7
 8003c02:	4630      	mov	r0, r6
 8003c04:	eb04 0903 	add.w	r9, r4, r3
 8003c08:	f000 fa32 	bl	8004070 <_sbrk_r>
 8003c0c:	4581      	cmp	r9, r0
 8003c0e:	d142      	bne.n	8003c96 <_malloc_r+0xea>
 8003c10:	6821      	ldr	r1, [r4, #0]
 8003c12:	1a6d      	subs	r5, r5, r1
 8003c14:	4629      	mov	r1, r5
 8003c16:	4630      	mov	r0, r6
 8003c18:	f7ff ffa6 	bl	8003b68 <sbrk_aligned>
 8003c1c:	3001      	adds	r0, #1
 8003c1e:	d03a      	beq.n	8003c96 <_malloc_r+0xea>
 8003c20:	6823      	ldr	r3, [r4, #0]
 8003c22:	442b      	add	r3, r5
 8003c24:	6023      	str	r3, [r4, #0]
 8003c26:	f8d8 3000 	ldr.w	r3, [r8]
 8003c2a:	685a      	ldr	r2, [r3, #4]
 8003c2c:	bb62      	cbnz	r2, 8003c88 <_malloc_r+0xdc>
 8003c2e:	f8c8 7000 	str.w	r7, [r8]
 8003c32:	e00f      	b.n	8003c54 <_malloc_r+0xa8>
 8003c34:	6822      	ldr	r2, [r4, #0]
 8003c36:	1b52      	subs	r2, r2, r5
 8003c38:	d420      	bmi.n	8003c7c <_malloc_r+0xd0>
 8003c3a:	2a0b      	cmp	r2, #11
 8003c3c:	d917      	bls.n	8003c6e <_malloc_r+0xc2>
 8003c3e:	1961      	adds	r1, r4, r5
 8003c40:	42a3      	cmp	r3, r4
 8003c42:	6025      	str	r5, [r4, #0]
 8003c44:	bf18      	it	ne
 8003c46:	6059      	strne	r1, [r3, #4]
 8003c48:	6863      	ldr	r3, [r4, #4]
 8003c4a:	bf08      	it	eq
 8003c4c:	f8c8 1000 	streq.w	r1, [r8]
 8003c50:	5162      	str	r2, [r4, r5]
 8003c52:	604b      	str	r3, [r1, #4]
 8003c54:	4630      	mov	r0, r6
 8003c56:	f000 f9bd 	bl	8003fd4 <__malloc_unlock>
 8003c5a:	f104 000b 	add.w	r0, r4, #11
 8003c5e:	1d23      	adds	r3, r4, #4
 8003c60:	f020 0007 	bic.w	r0, r0, #7
 8003c64:	1ac2      	subs	r2, r0, r3
 8003c66:	bf1c      	itt	ne
 8003c68:	1a1b      	subne	r3, r3, r0
 8003c6a:	50a3      	strne	r3, [r4, r2]
 8003c6c:	e7af      	b.n	8003bce <_malloc_r+0x22>
 8003c6e:	6862      	ldr	r2, [r4, #4]
 8003c70:	42a3      	cmp	r3, r4
 8003c72:	bf0c      	ite	eq
 8003c74:	f8c8 2000 	streq.w	r2, [r8]
 8003c78:	605a      	strne	r2, [r3, #4]
 8003c7a:	e7eb      	b.n	8003c54 <_malloc_r+0xa8>
 8003c7c:	4623      	mov	r3, r4
 8003c7e:	6864      	ldr	r4, [r4, #4]
 8003c80:	e7ae      	b.n	8003be0 <_malloc_r+0x34>
 8003c82:	463c      	mov	r4, r7
 8003c84:	687f      	ldr	r7, [r7, #4]
 8003c86:	e7b6      	b.n	8003bf6 <_malloc_r+0x4a>
 8003c88:	461a      	mov	r2, r3
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	42a3      	cmp	r3, r4
 8003c8e:	d1fb      	bne.n	8003c88 <_malloc_r+0xdc>
 8003c90:	2300      	movs	r3, #0
 8003c92:	6053      	str	r3, [r2, #4]
 8003c94:	e7de      	b.n	8003c54 <_malloc_r+0xa8>
 8003c96:	230c      	movs	r3, #12
 8003c98:	6033      	str	r3, [r6, #0]
 8003c9a:	4630      	mov	r0, r6
 8003c9c:	f000 f99a 	bl	8003fd4 <__malloc_unlock>
 8003ca0:	e794      	b.n	8003bcc <_malloc_r+0x20>
 8003ca2:	6005      	str	r5, [r0, #0]
 8003ca4:	e7d6      	b.n	8003c54 <_malloc_r+0xa8>
 8003ca6:	bf00      	nop
 8003ca8:	200004b0 	.word	0x200004b0

08003cac <_printf_common>:
 8003cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cb0:	4616      	mov	r6, r2
 8003cb2:	4698      	mov	r8, r3
 8003cb4:	688a      	ldr	r2, [r1, #8]
 8003cb6:	690b      	ldr	r3, [r1, #16]
 8003cb8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	bfb8      	it	lt
 8003cc0:	4613      	movlt	r3, r2
 8003cc2:	6033      	str	r3, [r6, #0]
 8003cc4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003cc8:	4607      	mov	r7, r0
 8003cca:	460c      	mov	r4, r1
 8003ccc:	b10a      	cbz	r2, 8003cd2 <_printf_common+0x26>
 8003cce:	3301      	adds	r3, #1
 8003cd0:	6033      	str	r3, [r6, #0]
 8003cd2:	6823      	ldr	r3, [r4, #0]
 8003cd4:	0699      	lsls	r1, r3, #26
 8003cd6:	bf42      	ittt	mi
 8003cd8:	6833      	ldrmi	r3, [r6, #0]
 8003cda:	3302      	addmi	r3, #2
 8003cdc:	6033      	strmi	r3, [r6, #0]
 8003cde:	6825      	ldr	r5, [r4, #0]
 8003ce0:	f015 0506 	ands.w	r5, r5, #6
 8003ce4:	d106      	bne.n	8003cf4 <_printf_common+0x48>
 8003ce6:	f104 0a19 	add.w	sl, r4, #25
 8003cea:	68e3      	ldr	r3, [r4, #12]
 8003cec:	6832      	ldr	r2, [r6, #0]
 8003cee:	1a9b      	subs	r3, r3, r2
 8003cf0:	42ab      	cmp	r3, r5
 8003cf2:	dc26      	bgt.n	8003d42 <_printf_common+0x96>
 8003cf4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003cf8:	6822      	ldr	r2, [r4, #0]
 8003cfa:	3b00      	subs	r3, #0
 8003cfc:	bf18      	it	ne
 8003cfe:	2301      	movne	r3, #1
 8003d00:	0692      	lsls	r2, r2, #26
 8003d02:	d42b      	bmi.n	8003d5c <_printf_common+0xb0>
 8003d04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003d08:	4641      	mov	r1, r8
 8003d0a:	4638      	mov	r0, r7
 8003d0c:	47c8      	blx	r9
 8003d0e:	3001      	adds	r0, #1
 8003d10:	d01e      	beq.n	8003d50 <_printf_common+0xa4>
 8003d12:	6823      	ldr	r3, [r4, #0]
 8003d14:	6922      	ldr	r2, [r4, #16]
 8003d16:	f003 0306 	and.w	r3, r3, #6
 8003d1a:	2b04      	cmp	r3, #4
 8003d1c:	bf02      	ittt	eq
 8003d1e:	68e5      	ldreq	r5, [r4, #12]
 8003d20:	6833      	ldreq	r3, [r6, #0]
 8003d22:	1aed      	subeq	r5, r5, r3
 8003d24:	68a3      	ldr	r3, [r4, #8]
 8003d26:	bf0c      	ite	eq
 8003d28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d2c:	2500      	movne	r5, #0
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	bfc4      	itt	gt
 8003d32:	1a9b      	subgt	r3, r3, r2
 8003d34:	18ed      	addgt	r5, r5, r3
 8003d36:	2600      	movs	r6, #0
 8003d38:	341a      	adds	r4, #26
 8003d3a:	42b5      	cmp	r5, r6
 8003d3c:	d11a      	bne.n	8003d74 <_printf_common+0xc8>
 8003d3e:	2000      	movs	r0, #0
 8003d40:	e008      	b.n	8003d54 <_printf_common+0xa8>
 8003d42:	2301      	movs	r3, #1
 8003d44:	4652      	mov	r2, sl
 8003d46:	4641      	mov	r1, r8
 8003d48:	4638      	mov	r0, r7
 8003d4a:	47c8      	blx	r9
 8003d4c:	3001      	adds	r0, #1
 8003d4e:	d103      	bne.n	8003d58 <_printf_common+0xac>
 8003d50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d58:	3501      	adds	r5, #1
 8003d5a:	e7c6      	b.n	8003cea <_printf_common+0x3e>
 8003d5c:	18e1      	adds	r1, r4, r3
 8003d5e:	1c5a      	adds	r2, r3, #1
 8003d60:	2030      	movs	r0, #48	@ 0x30
 8003d62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003d66:	4422      	add	r2, r4
 8003d68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003d6c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003d70:	3302      	adds	r3, #2
 8003d72:	e7c7      	b.n	8003d04 <_printf_common+0x58>
 8003d74:	2301      	movs	r3, #1
 8003d76:	4622      	mov	r2, r4
 8003d78:	4641      	mov	r1, r8
 8003d7a:	4638      	mov	r0, r7
 8003d7c:	47c8      	blx	r9
 8003d7e:	3001      	adds	r0, #1
 8003d80:	d0e6      	beq.n	8003d50 <_printf_common+0xa4>
 8003d82:	3601      	adds	r6, #1
 8003d84:	e7d9      	b.n	8003d3a <_printf_common+0x8e>
	...

08003d88 <_printf_i>:
 8003d88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d8c:	7e0f      	ldrb	r7, [r1, #24]
 8003d8e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003d90:	2f78      	cmp	r7, #120	@ 0x78
 8003d92:	4691      	mov	r9, r2
 8003d94:	4680      	mov	r8, r0
 8003d96:	460c      	mov	r4, r1
 8003d98:	469a      	mov	sl, r3
 8003d9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003d9e:	d807      	bhi.n	8003db0 <_printf_i+0x28>
 8003da0:	2f62      	cmp	r7, #98	@ 0x62
 8003da2:	d80a      	bhi.n	8003dba <_printf_i+0x32>
 8003da4:	2f00      	cmp	r7, #0
 8003da6:	f000 80d2 	beq.w	8003f4e <_printf_i+0x1c6>
 8003daa:	2f58      	cmp	r7, #88	@ 0x58
 8003dac:	f000 80b7 	beq.w	8003f1e <_printf_i+0x196>
 8003db0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003db4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003db8:	e03a      	b.n	8003e30 <_printf_i+0xa8>
 8003dba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003dbe:	2b15      	cmp	r3, #21
 8003dc0:	d8f6      	bhi.n	8003db0 <_printf_i+0x28>
 8003dc2:	a101      	add	r1, pc, #4	@ (adr r1, 8003dc8 <_printf_i+0x40>)
 8003dc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003dc8:	08003e21 	.word	0x08003e21
 8003dcc:	08003e35 	.word	0x08003e35
 8003dd0:	08003db1 	.word	0x08003db1
 8003dd4:	08003db1 	.word	0x08003db1
 8003dd8:	08003db1 	.word	0x08003db1
 8003ddc:	08003db1 	.word	0x08003db1
 8003de0:	08003e35 	.word	0x08003e35
 8003de4:	08003db1 	.word	0x08003db1
 8003de8:	08003db1 	.word	0x08003db1
 8003dec:	08003db1 	.word	0x08003db1
 8003df0:	08003db1 	.word	0x08003db1
 8003df4:	08003f35 	.word	0x08003f35
 8003df8:	08003e5f 	.word	0x08003e5f
 8003dfc:	08003eeb 	.word	0x08003eeb
 8003e00:	08003db1 	.word	0x08003db1
 8003e04:	08003db1 	.word	0x08003db1
 8003e08:	08003f57 	.word	0x08003f57
 8003e0c:	08003db1 	.word	0x08003db1
 8003e10:	08003e5f 	.word	0x08003e5f
 8003e14:	08003db1 	.word	0x08003db1
 8003e18:	08003db1 	.word	0x08003db1
 8003e1c:	08003ef3 	.word	0x08003ef3
 8003e20:	6833      	ldr	r3, [r6, #0]
 8003e22:	1d1a      	adds	r2, r3, #4
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	6032      	str	r2, [r6, #0]
 8003e28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003e2c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003e30:	2301      	movs	r3, #1
 8003e32:	e09d      	b.n	8003f70 <_printf_i+0x1e8>
 8003e34:	6833      	ldr	r3, [r6, #0]
 8003e36:	6820      	ldr	r0, [r4, #0]
 8003e38:	1d19      	adds	r1, r3, #4
 8003e3a:	6031      	str	r1, [r6, #0]
 8003e3c:	0606      	lsls	r6, r0, #24
 8003e3e:	d501      	bpl.n	8003e44 <_printf_i+0xbc>
 8003e40:	681d      	ldr	r5, [r3, #0]
 8003e42:	e003      	b.n	8003e4c <_printf_i+0xc4>
 8003e44:	0645      	lsls	r5, r0, #25
 8003e46:	d5fb      	bpl.n	8003e40 <_printf_i+0xb8>
 8003e48:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003e4c:	2d00      	cmp	r5, #0
 8003e4e:	da03      	bge.n	8003e58 <_printf_i+0xd0>
 8003e50:	232d      	movs	r3, #45	@ 0x2d
 8003e52:	426d      	negs	r5, r5
 8003e54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e58:	4859      	ldr	r0, [pc, #356]	@ (8003fc0 <_printf_i+0x238>)
 8003e5a:	230a      	movs	r3, #10
 8003e5c:	e010      	b.n	8003e80 <_printf_i+0xf8>
 8003e5e:	6821      	ldr	r1, [r4, #0]
 8003e60:	6833      	ldr	r3, [r6, #0]
 8003e62:	0608      	lsls	r0, r1, #24
 8003e64:	f853 5b04 	ldr.w	r5, [r3], #4
 8003e68:	d402      	bmi.n	8003e70 <_printf_i+0xe8>
 8003e6a:	0649      	lsls	r1, r1, #25
 8003e6c:	bf48      	it	mi
 8003e6e:	b2ad      	uxthmi	r5, r5
 8003e70:	2f6f      	cmp	r7, #111	@ 0x6f
 8003e72:	4853      	ldr	r0, [pc, #332]	@ (8003fc0 <_printf_i+0x238>)
 8003e74:	6033      	str	r3, [r6, #0]
 8003e76:	d159      	bne.n	8003f2c <_printf_i+0x1a4>
 8003e78:	2308      	movs	r3, #8
 8003e7a:	2100      	movs	r1, #0
 8003e7c:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003e80:	6866      	ldr	r6, [r4, #4]
 8003e82:	60a6      	str	r6, [r4, #8]
 8003e84:	2e00      	cmp	r6, #0
 8003e86:	db05      	blt.n	8003e94 <_printf_i+0x10c>
 8003e88:	6821      	ldr	r1, [r4, #0]
 8003e8a:	432e      	orrs	r6, r5
 8003e8c:	f021 0104 	bic.w	r1, r1, #4
 8003e90:	6021      	str	r1, [r4, #0]
 8003e92:	d04d      	beq.n	8003f30 <_printf_i+0x1a8>
 8003e94:	4616      	mov	r6, r2
 8003e96:	fbb5 f1f3 	udiv	r1, r5, r3
 8003e9a:	fb03 5711 	mls	r7, r3, r1, r5
 8003e9e:	5dc7      	ldrb	r7, [r0, r7]
 8003ea0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003ea4:	462f      	mov	r7, r5
 8003ea6:	42bb      	cmp	r3, r7
 8003ea8:	460d      	mov	r5, r1
 8003eaa:	d9f4      	bls.n	8003e96 <_printf_i+0x10e>
 8003eac:	2b08      	cmp	r3, #8
 8003eae:	d10b      	bne.n	8003ec8 <_printf_i+0x140>
 8003eb0:	6823      	ldr	r3, [r4, #0]
 8003eb2:	07df      	lsls	r7, r3, #31
 8003eb4:	d508      	bpl.n	8003ec8 <_printf_i+0x140>
 8003eb6:	6923      	ldr	r3, [r4, #16]
 8003eb8:	6861      	ldr	r1, [r4, #4]
 8003eba:	4299      	cmp	r1, r3
 8003ebc:	bfde      	ittt	le
 8003ebe:	2330      	movle	r3, #48	@ 0x30
 8003ec0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003ec4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003ec8:	1b92      	subs	r2, r2, r6
 8003eca:	6122      	str	r2, [r4, #16]
 8003ecc:	f8cd a000 	str.w	sl, [sp]
 8003ed0:	464b      	mov	r3, r9
 8003ed2:	aa03      	add	r2, sp, #12
 8003ed4:	4621      	mov	r1, r4
 8003ed6:	4640      	mov	r0, r8
 8003ed8:	f7ff fee8 	bl	8003cac <_printf_common>
 8003edc:	3001      	adds	r0, #1
 8003ede:	d14c      	bne.n	8003f7a <_printf_i+0x1f2>
 8003ee0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003ee4:	b004      	add	sp, #16
 8003ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003eea:	6823      	ldr	r3, [r4, #0]
 8003eec:	f043 0320 	orr.w	r3, r3, #32
 8003ef0:	6023      	str	r3, [r4, #0]
 8003ef2:	4834      	ldr	r0, [pc, #208]	@ (8003fc4 <_printf_i+0x23c>)
 8003ef4:	2778      	movs	r7, #120	@ 0x78
 8003ef6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003efa:	6823      	ldr	r3, [r4, #0]
 8003efc:	6831      	ldr	r1, [r6, #0]
 8003efe:	061f      	lsls	r7, r3, #24
 8003f00:	f851 5b04 	ldr.w	r5, [r1], #4
 8003f04:	d402      	bmi.n	8003f0c <_printf_i+0x184>
 8003f06:	065f      	lsls	r7, r3, #25
 8003f08:	bf48      	it	mi
 8003f0a:	b2ad      	uxthmi	r5, r5
 8003f0c:	6031      	str	r1, [r6, #0]
 8003f0e:	07d9      	lsls	r1, r3, #31
 8003f10:	bf44      	itt	mi
 8003f12:	f043 0320 	orrmi.w	r3, r3, #32
 8003f16:	6023      	strmi	r3, [r4, #0]
 8003f18:	b11d      	cbz	r5, 8003f22 <_printf_i+0x19a>
 8003f1a:	2310      	movs	r3, #16
 8003f1c:	e7ad      	b.n	8003e7a <_printf_i+0xf2>
 8003f1e:	4828      	ldr	r0, [pc, #160]	@ (8003fc0 <_printf_i+0x238>)
 8003f20:	e7e9      	b.n	8003ef6 <_printf_i+0x16e>
 8003f22:	6823      	ldr	r3, [r4, #0]
 8003f24:	f023 0320 	bic.w	r3, r3, #32
 8003f28:	6023      	str	r3, [r4, #0]
 8003f2a:	e7f6      	b.n	8003f1a <_printf_i+0x192>
 8003f2c:	230a      	movs	r3, #10
 8003f2e:	e7a4      	b.n	8003e7a <_printf_i+0xf2>
 8003f30:	4616      	mov	r6, r2
 8003f32:	e7bb      	b.n	8003eac <_printf_i+0x124>
 8003f34:	6833      	ldr	r3, [r6, #0]
 8003f36:	6825      	ldr	r5, [r4, #0]
 8003f38:	6961      	ldr	r1, [r4, #20]
 8003f3a:	1d18      	adds	r0, r3, #4
 8003f3c:	6030      	str	r0, [r6, #0]
 8003f3e:	062e      	lsls	r6, r5, #24
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	d501      	bpl.n	8003f48 <_printf_i+0x1c0>
 8003f44:	6019      	str	r1, [r3, #0]
 8003f46:	e002      	b.n	8003f4e <_printf_i+0x1c6>
 8003f48:	0668      	lsls	r0, r5, #25
 8003f4a:	d5fb      	bpl.n	8003f44 <_printf_i+0x1bc>
 8003f4c:	8019      	strh	r1, [r3, #0]
 8003f4e:	2300      	movs	r3, #0
 8003f50:	6123      	str	r3, [r4, #16]
 8003f52:	4616      	mov	r6, r2
 8003f54:	e7ba      	b.n	8003ecc <_printf_i+0x144>
 8003f56:	6833      	ldr	r3, [r6, #0]
 8003f58:	1d1a      	adds	r2, r3, #4
 8003f5a:	6032      	str	r2, [r6, #0]
 8003f5c:	681e      	ldr	r6, [r3, #0]
 8003f5e:	6862      	ldr	r2, [r4, #4]
 8003f60:	2100      	movs	r1, #0
 8003f62:	4630      	mov	r0, r6
 8003f64:	f7fc f91c 	bl	80001a0 <memchr>
 8003f68:	b108      	cbz	r0, 8003f6e <_printf_i+0x1e6>
 8003f6a:	1b80      	subs	r0, r0, r6
 8003f6c:	6060      	str	r0, [r4, #4]
 8003f6e:	6863      	ldr	r3, [r4, #4]
 8003f70:	6123      	str	r3, [r4, #16]
 8003f72:	2300      	movs	r3, #0
 8003f74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f78:	e7a8      	b.n	8003ecc <_printf_i+0x144>
 8003f7a:	6923      	ldr	r3, [r4, #16]
 8003f7c:	4632      	mov	r2, r6
 8003f7e:	4649      	mov	r1, r9
 8003f80:	4640      	mov	r0, r8
 8003f82:	47d0      	blx	sl
 8003f84:	3001      	adds	r0, #1
 8003f86:	d0ab      	beq.n	8003ee0 <_printf_i+0x158>
 8003f88:	6823      	ldr	r3, [r4, #0]
 8003f8a:	079b      	lsls	r3, r3, #30
 8003f8c:	d413      	bmi.n	8003fb6 <_printf_i+0x22e>
 8003f8e:	68e0      	ldr	r0, [r4, #12]
 8003f90:	9b03      	ldr	r3, [sp, #12]
 8003f92:	4298      	cmp	r0, r3
 8003f94:	bfb8      	it	lt
 8003f96:	4618      	movlt	r0, r3
 8003f98:	e7a4      	b.n	8003ee4 <_printf_i+0x15c>
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	4632      	mov	r2, r6
 8003f9e:	4649      	mov	r1, r9
 8003fa0:	4640      	mov	r0, r8
 8003fa2:	47d0      	blx	sl
 8003fa4:	3001      	adds	r0, #1
 8003fa6:	d09b      	beq.n	8003ee0 <_printf_i+0x158>
 8003fa8:	3501      	adds	r5, #1
 8003faa:	68e3      	ldr	r3, [r4, #12]
 8003fac:	9903      	ldr	r1, [sp, #12]
 8003fae:	1a5b      	subs	r3, r3, r1
 8003fb0:	42ab      	cmp	r3, r5
 8003fb2:	dcf2      	bgt.n	8003f9a <_printf_i+0x212>
 8003fb4:	e7eb      	b.n	8003f8e <_printf_i+0x206>
 8003fb6:	2500      	movs	r5, #0
 8003fb8:	f104 0619 	add.w	r6, r4, #25
 8003fbc:	e7f5      	b.n	8003faa <_printf_i+0x222>
 8003fbe:	bf00      	nop
 8003fc0:	08004831 	.word	0x08004831
 8003fc4:	08004842 	.word	0x08004842

08003fc8 <__malloc_lock>:
 8003fc8:	4801      	ldr	r0, [pc, #4]	@ (8003fd0 <__malloc_lock+0x8>)
 8003fca:	f7ff bc6f 	b.w	80038ac <__retarget_lock_acquire_recursive>
 8003fce:	bf00      	nop
 8003fd0:	200004a8 	.word	0x200004a8

08003fd4 <__malloc_unlock>:
 8003fd4:	4801      	ldr	r0, [pc, #4]	@ (8003fdc <__malloc_unlock+0x8>)
 8003fd6:	f7ff bc6a 	b.w	80038ae <__retarget_lock_release_recursive>
 8003fda:	bf00      	nop
 8003fdc:	200004a8 	.word	0x200004a8

08003fe0 <_realloc_r>:
 8003fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fe4:	4607      	mov	r7, r0
 8003fe6:	4614      	mov	r4, r2
 8003fe8:	460d      	mov	r5, r1
 8003fea:	b921      	cbnz	r1, 8003ff6 <_realloc_r+0x16>
 8003fec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ff0:	4611      	mov	r1, r2
 8003ff2:	f7ff bddb 	b.w	8003bac <_malloc_r>
 8003ff6:	b92a      	cbnz	r2, 8004004 <_realloc_r+0x24>
 8003ff8:	f000 f858 	bl	80040ac <_free_r>
 8003ffc:	4625      	mov	r5, r4
 8003ffe:	4628      	mov	r0, r5
 8004000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004004:	f000 f89c 	bl	8004140 <_malloc_usable_size_r>
 8004008:	4284      	cmp	r4, r0
 800400a:	4606      	mov	r6, r0
 800400c:	d802      	bhi.n	8004014 <_realloc_r+0x34>
 800400e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004012:	d8f4      	bhi.n	8003ffe <_realloc_r+0x1e>
 8004014:	4621      	mov	r1, r4
 8004016:	4638      	mov	r0, r7
 8004018:	f7ff fdc8 	bl	8003bac <_malloc_r>
 800401c:	4680      	mov	r8, r0
 800401e:	b908      	cbnz	r0, 8004024 <_realloc_r+0x44>
 8004020:	4645      	mov	r5, r8
 8004022:	e7ec      	b.n	8003ffe <_realloc_r+0x1e>
 8004024:	42b4      	cmp	r4, r6
 8004026:	4622      	mov	r2, r4
 8004028:	4629      	mov	r1, r5
 800402a:	bf28      	it	cs
 800402c:	4632      	movcs	r2, r6
 800402e:	f000 f82f 	bl	8004090 <memcpy>
 8004032:	4629      	mov	r1, r5
 8004034:	4638      	mov	r0, r7
 8004036:	f000 f839 	bl	80040ac <_free_r>
 800403a:	e7f1      	b.n	8004020 <_realloc_r+0x40>

0800403c <memmove>:
 800403c:	4288      	cmp	r0, r1
 800403e:	b510      	push	{r4, lr}
 8004040:	eb01 0402 	add.w	r4, r1, r2
 8004044:	d902      	bls.n	800404c <memmove+0x10>
 8004046:	4284      	cmp	r4, r0
 8004048:	4623      	mov	r3, r4
 800404a:	d807      	bhi.n	800405c <memmove+0x20>
 800404c:	1e43      	subs	r3, r0, #1
 800404e:	42a1      	cmp	r1, r4
 8004050:	d007      	beq.n	8004062 <memmove+0x26>
 8004052:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004056:	f803 2f01 	strb.w	r2, [r3, #1]!
 800405a:	e7f8      	b.n	800404e <memmove+0x12>
 800405c:	4402      	add	r2, r0
 800405e:	4282      	cmp	r2, r0
 8004060:	d100      	bne.n	8004064 <memmove+0x28>
 8004062:	bd10      	pop	{r4, pc}
 8004064:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8004068:	f802 1d01 	strb.w	r1, [r2, #-1]!
 800406c:	e7f7      	b.n	800405e <memmove+0x22>
	...

08004070 <_sbrk_r>:
 8004070:	b538      	push	{r3, r4, r5, lr}
 8004072:	4d06      	ldr	r5, [pc, #24]	@ (800408c <_sbrk_r+0x1c>)
 8004074:	2300      	movs	r3, #0
 8004076:	4604      	mov	r4, r0
 8004078:	4608      	mov	r0, r1
 800407a:	602b      	str	r3, [r5, #0]
 800407c:	f7ff fb6a 	bl	8003754 <_sbrk>
 8004080:	1c43      	adds	r3, r0, #1
 8004082:	d102      	bne.n	800408a <_sbrk_r+0x1a>
 8004084:	682b      	ldr	r3, [r5, #0]
 8004086:	b103      	cbz	r3, 800408a <_sbrk_r+0x1a>
 8004088:	6023      	str	r3, [r4, #0]
 800408a:	bd38      	pop	{r3, r4, r5, pc}
 800408c:	200004b4 	.word	0x200004b4

08004090 <memcpy>:
 8004090:	440a      	add	r2, r1
 8004092:	4291      	cmp	r1, r2
 8004094:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004098:	d100      	bne.n	800409c <memcpy+0xc>
 800409a:	4770      	bx	lr
 800409c:	b510      	push	{r4, lr}
 800409e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80040a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80040a6:	4291      	cmp	r1, r2
 80040a8:	d1f9      	bne.n	800409e <memcpy+0xe>
 80040aa:	bd10      	pop	{r4, pc}

080040ac <_free_r>:
 80040ac:	b538      	push	{r3, r4, r5, lr}
 80040ae:	4605      	mov	r5, r0
 80040b0:	2900      	cmp	r1, #0
 80040b2:	d041      	beq.n	8004138 <_free_r+0x8c>
 80040b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040b8:	1f0c      	subs	r4, r1, #4
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	bfb8      	it	lt
 80040be:	18e4      	addlt	r4, r4, r3
 80040c0:	f7ff ff82 	bl	8003fc8 <__malloc_lock>
 80040c4:	4a1d      	ldr	r2, [pc, #116]	@ (800413c <_free_r+0x90>)
 80040c6:	6813      	ldr	r3, [r2, #0]
 80040c8:	b933      	cbnz	r3, 80040d8 <_free_r+0x2c>
 80040ca:	6063      	str	r3, [r4, #4]
 80040cc:	6014      	str	r4, [r2, #0]
 80040ce:	4628      	mov	r0, r5
 80040d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80040d4:	f7ff bf7e 	b.w	8003fd4 <__malloc_unlock>
 80040d8:	42a3      	cmp	r3, r4
 80040da:	d908      	bls.n	80040ee <_free_r+0x42>
 80040dc:	6820      	ldr	r0, [r4, #0]
 80040de:	1821      	adds	r1, r4, r0
 80040e0:	428b      	cmp	r3, r1
 80040e2:	bf01      	itttt	eq
 80040e4:	6819      	ldreq	r1, [r3, #0]
 80040e6:	685b      	ldreq	r3, [r3, #4]
 80040e8:	1809      	addeq	r1, r1, r0
 80040ea:	6021      	streq	r1, [r4, #0]
 80040ec:	e7ed      	b.n	80040ca <_free_r+0x1e>
 80040ee:	461a      	mov	r2, r3
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	b10b      	cbz	r3, 80040f8 <_free_r+0x4c>
 80040f4:	42a3      	cmp	r3, r4
 80040f6:	d9fa      	bls.n	80040ee <_free_r+0x42>
 80040f8:	6811      	ldr	r1, [r2, #0]
 80040fa:	1850      	adds	r0, r2, r1
 80040fc:	42a0      	cmp	r0, r4
 80040fe:	d10b      	bne.n	8004118 <_free_r+0x6c>
 8004100:	6820      	ldr	r0, [r4, #0]
 8004102:	4401      	add	r1, r0
 8004104:	1850      	adds	r0, r2, r1
 8004106:	4283      	cmp	r3, r0
 8004108:	6011      	str	r1, [r2, #0]
 800410a:	d1e0      	bne.n	80040ce <_free_r+0x22>
 800410c:	6818      	ldr	r0, [r3, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	6053      	str	r3, [r2, #4]
 8004112:	4408      	add	r0, r1
 8004114:	6010      	str	r0, [r2, #0]
 8004116:	e7da      	b.n	80040ce <_free_r+0x22>
 8004118:	d902      	bls.n	8004120 <_free_r+0x74>
 800411a:	230c      	movs	r3, #12
 800411c:	602b      	str	r3, [r5, #0]
 800411e:	e7d6      	b.n	80040ce <_free_r+0x22>
 8004120:	6820      	ldr	r0, [r4, #0]
 8004122:	1821      	adds	r1, r4, r0
 8004124:	428b      	cmp	r3, r1
 8004126:	bf04      	itt	eq
 8004128:	6819      	ldreq	r1, [r3, #0]
 800412a:	685b      	ldreq	r3, [r3, #4]
 800412c:	6063      	str	r3, [r4, #4]
 800412e:	bf04      	itt	eq
 8004130:	1809      	addeq	r1, r1, r0
 8004132:	6021      	streq	r1, [r4, #0]
 8004134:	6054      	str	r4, [r2, #4]
 8004136:	e7ca      	b.n	80040ce <_free_r+0x22>
 8004138:	bd38      	pop	{r3, r4, r5, pc}
 800413a:	bf00      	nop
 800413c:	200004b0 	.word	0x200004b0

08004140 <_malloc_usable_size_r>:
 8004140:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004144:	1f18      	subs	r0, r3, #4
 8004146:	2b00      	cmp	r3, #0
 8004148:	bfbc      	itt	lt
 800414a:	580b      	ldrlt	r3, [r1, r0]
 800414c:	18c0      	addlt	r0, r0, r3
 800414e:	4770      	bx	lr

08004150 <atan2f>:
 8004150:	f000 b822 	b.w	8004198 <__ieee754_atan2f>

08004154 <sqrtf>:
 8004154:	b508      	push	{r3, lr}
 8004156:	ed2d 8b02 	vpush	{d8}
 800415a:	eeb0 8a40 	vmov.f32	s16, s0
 800415e:	f000 f8c1 	bl	80042e4 <__ieee754_sqrtf>
 8004162:	eeb4 8a48 	vcmp.f32	s16, s16
 8004166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800416a:	d606      	bvs.n	800417a <sqrtf+0x26>
 800416c:	eddf 8a09 	vldr	s17, [pc, #36]	@ 8004194 <sqrtf+0x40>
 8004170:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8004174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004178:	d402      	bmi.n	8004180 <sqrtf+0x2c>
 800417a:	ecbd 8b02 	vpop	{d8}
 800417e:	bd08      	pop	{r3, pc}
 8004180:	f7ff fb6a 	bl	8003858 <__errno>
 8004184:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8004188:	ecbd 8b02 	vpop	{d8}
 800418c:	2321      	movs	r3, #33	@ 0x21
 800418e:	6003      	str	r3, [r0, #0]
 8004190:	bd08      	pop	{r3, pc}
 8004192:	bf00      	nop
 8004194:	00000000 	.word	0x00000000

08004198 <__ieee754_atan2f>:
 8004198:	b510      	push	{r4, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	edcd 0a01 	vstr	s1, [sp, #4]
 80041a0:	9b01      	ldr	r3, [sp, #4]
 80041a2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80041a6:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80041aa:	eef0 7a40 	vmov.f32	s15, s0
 80041ae:	d830      	bhi.n	8004212 <__ieee754_atan2f+0x7a>
 80041b0:	ee10 0a10 	vmov	r0, s0
 80041b4:	f020 4100 	bic.w	r1, r0, #2147483648	@ 0x80000000
 80041b8:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80041bc:	d829      	bhi.n	8004212 <__ieee754_atan2f+0x7a>
 80041be:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 80041c2:	d03e      	beq.n	8004242 <__ieee754_atan2f+0xaa>
 80041c4:	179c      	asrs	r4, r3, #30
 80041c6:	f004 0402 	and.w	r4, r4, #2
 80041ca:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80041ce:	b331      	cbz	r1, 800421e <__ieee754_atan2f+0x86>
 80041d0:	b37a      	cbz	r2, 8004232 <__ieee754_atan2f+0x9a>
 80041d2:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80041d6:	d03f      	beq.n	8004258 <__ieee754_atan2f+0xc0>
 80041d8:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80041dc:	d029      	beq.n	8004232 <__ieee754_atan2f+0x9a>
 80041de:	1a89      	subs	r1, r1, r2
 80041e0:	f1b1 5ff4 	cmp.w	r1, #511705088	@ 0x1e800000
 80041e4:	ea4f 52e1 	mov.w	r2, r1, asr #23
 80041e8:	da33      	bge.n	8004252 <__ieee754_atan2f+0xba>
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	da41      	bge.n	8004272 <__ieee754_atan2f+0xda>
 80041ee:	323c      	adds	r2, #60	@ 0x3c
 80041f0:	da3f      	bge.n	8004272 <__ieee754_atan2f+0xda>
 80041f2:	ed9f 0a33 	vldr	s0, [pc, #204]	@ 80042c0 <__ieee754_atan2f+0x128>
 80041f6:	2c01      	cmp	r4, #1
 80041f8:	d04d      	beq.n	8004296 <__ieee754_atan2f+0xfe>
 80041fa:	2c02      	cmp	r4, #2
 80041fc:	d042      	beq.n	8004284 <__ieee754_atan2f+0xec>
 80041fe:	b164      	cbz	r4, 800421a <__ieee754_atan2f+0x82>
 8004200:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80042c4 <__ieee754_atan2f+0x12c>
 8004204:	eddf 7a30 	vldr	s15, [pc, #192]	@ 80042c8 <__ieee754_atan2f+0x130>
 8004208:	ee30 0a07 	vadd.f32	s0, s0, s14
 800420c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004210:	e003      	b.n	800421a <__ieee754_atan2f+0x82>
 8004212:	ed9d 7a01 	vldr	s14, [sp, #4]
 8004216:	ee37 0a27 	vadd.f32	s0, s14, s15
 800421a:	b002      	add	sp, #8
 800421c:	bd10      	pop	{r4, pc}
 800421e:	2c02      	cmp	r4, #2
 8004220:	d00c      	beq.n	800423c <__ieee754_atan2f+0xa4>
 8004222:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80042cc <__ieee754_atan2f+0x134>
 8004226:	2c03      	cmp	r4, #3
 8004228:	bf08      	it	eq
 800422a:	eeb0 0a47 	vmoveq.f32	s0, s14
 800422e:	b002      	add	sp, #8
 8004230:	bd10      	pop	{r4, pc}
 8004232:	2800      	cmp	r0, #0
 8004234:	db0a      	blt.n	800424c <__ieee754_atan2f+0xb4>
 8004236:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 80042d0 <__ieee754_atan2f+0x138>
 800423a:	e7ee      	b.n	800421a <__ieee754_atan2f+0x82>
 800423c:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 80042c8 <__ieee754_atan2f+0x130>
 8004240:	e7eb      	b.n	800421a <__ieee754_atan2f+0x82>
 8004242:	b002      	add	sp, #8
 8004244:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004248:	f000 b850 	b.w	80042ec <atanf>
 800424c:	ed9f 0a21 	vldr	s0, [pc, #132]	@ 80042d4 <__ieee754_atan2f+0x13c>
 8004250:	e7e3      	b.n	800421a <__ieee754_atan2f+0x82>
 8004252:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 80042d0 <__ieee754_atan2f+0x138>
 8004256:	e7ce      	b.n	80041f6 <__ieee754_atan2f+0x5e>
 8004258:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800425c:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 8004260:	d020      	beq.n	80042a4 <__ieee754_atan2f+0x10c>
 8004262:	2c02      	cmp	r4, #2
 8004264:	d826      	bhi.n	80042b4 <__ieee754_atan2f+0x11c>
 8004266:	4b1c      	ldr	r3, [pc, #112]	@ (80042d8 <__ieee754_atan2f+0x140>)
 8004268:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800426c:	ed93 0a00 	vldr	s0, [r3]
 8004270:	e7d3      	b.n	800421a <__ieee754_atan2f+0x82>
 8004272:	ed9d 7a01 	vldr	s14, [sp, #4]
 8004276:	ee87 0a87 	vdiv.f32	s0, s15, s14
 800427a:	f000 f909 	bl	8004490 <fabsf>
 800427e:	f000 f835 	bl	80042ec <atanf>
 8004282:	e7b8      	b.n	80041f6 <__ieee754_atan2f+0x5e>
 8004284:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80042c4 <__ieee754_atan2f+0x12c>
 8004288:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 80042c8 <__ieee754_atan2f+0x130>
 800428c:	ee30 0a07 	vadd.f32	s0, s0, s14
 8004290:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8004294:	e7c1      	b.n	800421a <__ieee754_atan2f+0x82>
 8004296:	ee10 3a10 	vmov	r3, s0
 800429a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800429e:	ee00 3a10 	vmov	s0, r3
 80042a2:	e7ba      	b.n	800421a <__ieee754_atan2f+0x82>
 80042a4:	2c02      	cmp	r4, #2
 80042a6:	d808      	bhi.n	80042ba <__ieee754_atan2f+0x122>
 80042a8:	4b0c      	ldr	r3, [pc, #48]	@ (80042dc <__ieee754_atan2f+0x144>)
 80042aa:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80042ae:	ed93 0a00 	vldr	s0, [r3]
 80042b2:	e7b2      	b.n	800421a <__ieee754_atan2f+0x82>
 80042b4:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 80042c0 <__ieee754_atan2f+0x128>
 80042b8:	e7af      	b.n	800421a <__ieee754_atan2f+0x82>
 80042ba:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 80042e0 <__ieee754_atan2f+0x148>
 80042be:	e7ac      	b.n	800421a <__ieee754_atan2f+0x82>
 80042c0:	00000000 	.word	0x00000000
 80042c4:	33bbbd2e 	.word	0x33bbbd2e
 80042c8:	40490fdb 	.word	0x40490fdb
 80042cc:	c0490fdb 	.word	0xc0490fdb
 80042d0:	3fc90fdb 	.word	0x3fc90fdb
 80042d4:	bfc90fdb 	.word	0xbfc90fdb
 80042d8:	08004854 	.word	0x08004854
 80042dc:	08004860 	.word	0x08004860
 80042e0:	3f490fdb 	.word	0x3f490fdb

080042e4 <__ieee754_sqrtf>:
 80042e4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop

080042ec <atanf>:
 80042ec:	b538      	push	{r3, r4, r5, lr}
 80042ee:	ee10 5a10 	vmov	r5, s0
 80042f2:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 80042f6:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 80042fa:	eef0 7a40 	vmov.f32	s15, s0
 80042fe:	d307      	bcc.n	8004310 <atanf+0x24>
 8004300:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8004304:	d855      	bhi.n	80043b2 <atanf+0xc6>
 8004306:	2d00      	cmp	r5, #0
 8004308:	dd77      	ble.n	80043fa <atanf+0x10e>
 800430a:	ed9f 0a4e 	vldr	s0, [pc, #312]	@ 8004444 <atanf+0x158>
 800430e:	bd38      	pop	{r3, r4, r5, pc}
 8004310:	4b4d      	ldr	r3, [pc, #308]	@ (8004448 <atanf+0x15c>)
 8004312:	429c      	cmp	r4, r3
 8004314:	d85c      	bhi.n	80043d0 <atanf+0xe4>
 8004316:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800431a:	d34d      	bcc.n	80043b8 <atanf+0xcc>
 800431c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004320:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8004324:	ed9f 5a49 	vldr	s10, [pc, #292]	@ 800444c <atanf+0x160>
 8004328:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8004450 <atanf+0x164>
 800432c:	eddf 5a49 	vldr	s11, [pc, #292]	@ 8004454 <atanf+0x168>
 8004330:	eddf 4a49 	vldr	s9, [pc, #292]	@ 8004458 <atanf+0x16c>
 8004334:	ee66 6a06 	vmul.f32	s13, s12, s12
 8004338:	1c5a      	adds	r2, r3, #1
 800433a:	eea6 7a85 	vfma.f32	s14, s13, s10
 800433e:	eee6 4aa5 	vfma.f32	s9, s13, s11
 8004342:	ed9f 5a46 	vldr	s10, [pc, #280]	@ 800445c <atanf+0x170>
 8004346:	eddf 5a46 	vldr	s11, [pc, #280]	@ 8004460 <atanf+0x174>
 800434a:	eea7 5a26 	vfma.f32	s10, s14, s13
 800434e:	eee4 5aa6 	vfma.f32	s11, s9, s13
 8004352:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8004464 <atanf+0x178>
 8004356:	eddf 4a44 	vldr	s9, [pc, #272]	@ 8004468 <atanf+0x17c>
 800435a:	eea5 7a26 	vfma.f32	s14, s10, s13
 800435e:	eee5 4aa6 	vfma.f32	s9, s11, s13
 8004362:	ed9f 5a42 	vldr	s10, [pc, #264]	@ 800446c <atanf+0x180>
 8004366:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8004470 <atanf+0x184>
 800436a:	eea7 5a26 	vfma.f32	s10, s14, s13
 800436e:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8004474 <atanf+0x188>
 8004372:	eea4 7aa6 	vfma.f32	s14, s9, s13
 8004376:	eee5 5a26 	vfma.f32	s11, s10, s13
 800437a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800437e:	eea5 7a86 	vfma.f32	s14, s11, s12
 8004382:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004386:	d03b      	beq.n	8004400 <atanf+0x114>
 8004388:	493b      	ldr	r1, [pc, #236]	@ (8004478 <atanf+0x18c>)
 800438a:	4a3c      	ldr	r2, [pc, #240]	@ (800447c <atanf+0x190>)
 800438c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8004390:	edd1 6a00 	vldr	s13, [r1]
 8004394:	ee37 7a66 	vsub.f32	s14, s14, s13
 8004398:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800439c:	edd3 6a00 	vldr	s13, [r3]
 80043a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80043a4:	2d00      	cmp	r5, #0
 80043a6:	ee36 0ac7 	vsub.f32	s0, s13, s14
 80043aa:	dab0      	bge.n	800430e <atanf+0x22>
 80043ac:	eeb1 0a40 	vneg.f32	s0, s0
 80043b0:	bd38      	pop	{r3, r4, r5, pc}
 80043b2:	ee30 0a00 	vadd.f32	s0, s0, s0
 80043b6:	bd38      	pop	{r3, r4, r5, pc}
 80043b8:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8004480 <atanf+0x194>
 80043bc:	ee30 7a07 	vadd.f32	s14, s0, s14
 80043c0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043c4:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80043c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043cc:	dda6      	ble.n	800431c <atanf+0x30>
 80043ce:	bd38      	pop	{r3, r4, r5, pc}
 80043d0:	f000 f85e 	bl	8004490 <fabsf>
 80043d4:	4b2b      	ldr	r3, [pc, #172]	@ (8004484 <atanf+0x198>)
 80043d6:	429c      	cmp	r4, r3
 80043d8:	d815      	bhi.n	8004406 <atanf+0x11a>
 80043da:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 80043de:	429c      	cmp	r4, r3
 80043e0:	d826      	bhi.n	8004430 <atanf+0x144>
 80043e2:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 80043e6:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80043ea:	eea0 7a27 	vfma.f32	s14, s0, s15
 80043ee:	2300      	movs	r3, #0
 80043f0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80043f4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80043f8:	e792      	b.n	8004320 <atanf+0x34>
 80043fa:	ed9f 0a23 	vldr	s0, [pc, #140]	@ 8004488 <atanf+0x19c>
 80043fe:	bd38      	pop	{r3, r4, r5, pc}
 8004400:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8004404:	bd38      	pop	{r3, r4, r5, pc}
 8004406:	4b21      	ldr	r3, [pc, #132]	@ (800448c <atanf+0x1a0>)
 8004408:	429c      	cmp	r4, r3
 800440a:	d80b      	bhi.n	8004424 <atanf+0x138>
 800440c:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8004410:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004414:	eea0 7a27 	vfma.f32	s14, s0, s15
 8004418:	2302      	movs	r3, #2
 800441a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800441e:	eec0 7a07 	vdiv.f32	s15, s0, s14
 8004422:	e77d      	b.n	8004320 <atanf+0x34>
 8004424:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8004428:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800442c:	2303      	movs	r3, #3
 800442e:	e777      	b.n	8004320 <atanf+0x34>
 8004430:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8004434:	ee30 7a67 	vsub.f32	s14, s0, s15
 8004438:	ee30 0a27 	vadd.f32	s0, s0, s15
 800443c:	2301      	movs	r3, #1
 800443e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8004442:	e76d      	b.n	8004320 <atanf+0x34>
 8004444:	3fc90fdb 	.word	0x3fc90fdb
 8004448:	3edfffff 	.word	0x3edfffff
 800444c:	3c8569d7 	.word	0x3c8569d7
 8004450:	3d4bda59 	.word	0x3d4bda59
 8004454:	bd15a221 	.word	0xbd15a221
 8004458:	bd6ef16b 	.word	0xbd6ef16b
 800445c:	3d886b35 	.word	0x3d886b35
 8004460:	bd9d8795 	.word	0xbd9d8795
 8004464:	3dba2e6e 	.word	0x3dba2e6e
 8004468:	bde38e38 	.word	0xbde38e38
 800446c:	3e124925 	.word	0x3e124925
 8004470:	3eaaaaab 	.word	0x3eaaaaab
 8004474:	be4ccccd 	.word	0xbe4ccccd
 8004478:	0800486c 	.word	0x0800486c
 800447c:	0800487c 	.word	0x0800487c
 8004480:	7149f2ca 	.word	0x7149f2ca
 8004484:	3f97ffff 	.word	0x3f97ffff
 8004488:	bfc90fdb 	.word	0xbfc90fdb
 800448c:	401bffff 	.word	0x401bffff

08004490 <fabsf>:
 8004490:	ee10 3a10 	vmov	r3, s0
 8004494:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004498:	ee00 3a10 	vmov	s0, r3
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop

080044a0 <__udivmoddi4>:
 80044a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044a4:	9d08      	ldr	r5, [sp, #32]
 80044a6:	460f      	mov	r7, r1
 80044a8:	4604      	mov	r4, r0
 80044aa:	468c      	mov	ip, r1
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d148      	bne.n	8004542 <__udivmoddi4+0xa2>
 80044b0:	428a      	cmp	r2, r1
 80044b2:	4616      	mov	r6, r2
 80044b4:	d961      	bls.n	800457a <__udivmoddi4+0xda>
 80044b6:	fab2 f382 	clz	r3, r2
 80044ba:	b14b      	cbz	r3, 80044d0 <__udivmoddi4+0x30>
 80044bc:	f1c3 0220 	rsb	r2, r3, #32
 80044c0:	fa01 fc03 	lsl.w	ip, r1, r3
 80044c4:	fa20 f202 	lsr.w	r2, r0, r2
 80044c8:	409e      	lsls	r6, r3
 80044ca:	ea42 0c0c 	orr.w	ip, r2, ip
 80044ce:	409c      	lsls	r4, r3
 80044d0:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 80044d4:	b2b7      	uxth	r7, r6
 80044d6:	fbbc f1fe 	udiv	r1, ip, lr
 80044da:	0c22      	lsrs	r2, r4, #16
 80044dc:	fb0e cc11 	mls	ip, lr, r1, ip
 80044e0:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 80044e4:	fb01 f007 	mul.w	r0, r1, r7
 80044e8:	4290      	cmp	r0, r2
 80044ea:	d909      	bls.n	8004500 <__udivmoddi4+0x60>
 80044ec:	18b2      	adds	r2, r6, r2
 80044ee:	f101 3cff 	add.w	ip, r1, #4294967295	@ 0xffffffff
 80044f2:	f080 80ee 	bcs.w	80046d2 <__udivmoddi4+0x232>
 80044f6:	4290      	cmp	r0, r2
 80044f8:	f240 80eb 	bls.w	80046d2 <__udivmoddi4+0x232>
 80044fc:	3902      	subs	r1, #2
 80044fe:	4432      	add	r2, r6
 8004500:	1a12      	subs	r2, r2, r0
 8004502:	b2a4      	uxth	r4, r4
 8004504:	fbb2 f0fe 	udiv	r0, r2, lr
 8004508:	fb0e 2210 	mls	r2, lr, r0, r2
 800450c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8004510:	fb00 f707 	mul.w	r7, r0, r7
 8004514:	42a7      	cmp	r7, r4
 8004516:	d909      	bls.n	800452c <__udivmoddi4+0x8c>
 8004518:	1934      	adds	r4, r6, r4
 800451a:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 800451e:	f080 80da 	bcs.w	80046d6 <__udivmoddi4+0x236>
 8004522:	42a7      	cmp	r7, r4
 8004524:	f240 80d7 	bls.w	80046d6 <__udivmoddi4+0x236>
 8004528:	4434      	add	r4, r6
 800452a:	3802      	subs	r0, #2
 800452c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8004530:	1be4      	subs	r4, r4, r7
 8004532:	2100      	movs	r1, #0
 8004534:	b11d      	cbz	r5, 800453e <__udivmoddi4+0x9e>
 8004536:	40dc      	lsrs	r4, r3
 8004538:	2300      	movs	r3, #0
 800453a:	e9c5 4300 	strd	r4, r3, [r5]
 800453e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004542:	428b      	cmp	r3, r1
 8004544:	d906      	bls.n	8004554 <__udivmoddi4+0xb4>
 8004546:	b10d      	cbz	r5, 800454c <__udivmoddi4+0xac>
 8004548:	e9c5 0100 	strd	r0, r1, [r5]
 800454c:	2100      	movs	r1, #0
 800454e:	4608      	mov	r0, r1
 8004550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004554:	fab3 f183 	clz	r1, r3
 8004558:	2900      	cmp	r1, #0
 800455a:	d148      	bne.n	80045ee <__udivmoddi4+0x14e>
 800455c:	42bb      	cmp	r3, r7
 800455e:	d302      	bcc.n	8004566 <__udivmoddi4+0xc6>
 8004560:	4282      	cmp	r2, r0
 8004562:	f200 8107 	bhi.w	8004774 <__udivmoddi4+0x2d4>
 8004566:	1a84      	subs	r4, r0, r2
 8004568:	eb67 0203 	sbc.w	r2, r7, r3
 800456c:	2001      	movs	r0, #1
 800456e:	4694      	mov	ip, r2
 8004570:	2d00      	cmp	r5, #0
 8004572:	d0e4      	beq.n	800453e <__udivmoddi4+0x9e>
 8004574:	e9c5 4c00 	strd	r4, ip, [r5]
 8004578:	e7e1      	b.n	800453e <__udivmoddi4+0x9e>
 800457a:	2a00      	cmp	r2, #0
 800457c:	f000 8092 	beq.w	80046a4 <__udivmoddi4+0x204>
 8004580:	fab2 f382 	clz	r3, r2
 8004584:	2b00      	cmp	r3, #0
 8004586:	f040 80a8 	bne.w	80046da <__udivmoddi4+0x23a>
 800458a:	1a8a      	subs	r2, r1, r2
 800458c:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 8004590:	fa1f fc86 	uxth.w	ip, r6
 8004594:	2101      	movs	r1, #1
 8004596:	0c20      	lsrs	r0, r4, #16
 8004598:	fbb2 f7fe 	udiv	r7, r2, lr
 800459c:	fb0e 2217 	mls	r2, lr, r7, r2
 80045a0:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 80045a4:	fb0c f007 	mul.w	r0, ip, r7
 80045a8:	4290      	cmp	r0, r2
 80045aa:	d907      	bls.n	80045bc <__udivmoddi4+0x11c>
 80045ac:	18b2      	adds	r2, r6, r2
 80045ae:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 80045b2:	d202      	bcs.n	80045ba <__udivmoddi4+0x11a>
 80045b4:	4290      	cmp	r0, r2
 80045b6:	f200 80e2 	bhi.w	800477e <__udivmoddi4+0x2de>
 80045ba:	4647      	mov	r7, r8
 80045bc:	1a12      	subs	r2, r2, r0
 80045be:	b2a4      	uxth	r4, r4
 80045c0:	fbb2 f0fe 	udiv	r0, r2, lr
 80045c4:	fb0e 2210 	mls	r2, lr, r0, r2
 80045c8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80045cc:	fb0c fc00 	mul.w	ip, ip, r0
 80045d0:	45a4      	cmp	ip, r4
 80045d2:	d907      	bls.n	80045e4 <__udivmoddi4+0x144>
 80045d4:	1934      	adds	r4, r6, r4
 80045d6:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80045da:	d202      	bcs.n	80045e2 <__udivmoddi4+0x142>
 80045dc:	45a4      	cmp	ip, r4
 80045de:	f200 80cb 	bhi.w	8004778 <__udivmoddi4+0x2d8>
 80045e2:	4610      	mov	r0, r2
 80045e4:	eba4 040c 	sub.w	r4, r4, ip
 80045e8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80045ec:	e7a2      	b.n	8004534 <__udivmoddi4+0x94>
 80045ee:	f1c1 0620 	rsb	r6, r1, #32
 80045f2:	408b      	lsls	r3, r1
 80045f4:	fa22 fc06 	lsr.w	ip, r2, r6
 80045f8:	ea4c 0c03 	orr.w	ip, ip, r3
 80045fc:	fa07 f401 	lsl.w	r4, r7, r1
 8004600:	fa20 f306 	lsr.w	r3, r0, r6
 8004604:	40f7      	lsrs	r7, r6
 8004606:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800460a:	4323      	orrs	r3, r4
 800460c:	fa00 f801 	lsl.w	r8, r0, r1
 8004610:	fa1f fe8c 	uxth.w	lr, ip
 8004614:	fbb7 f0f9 	udiv	r0, r7, r9
 8004618:	0c1c      	lsrs	r4, r3, #16
 800461a:	fb09 7710 	mls	r7, r9, r0, r7
 800461e:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
 8004622:	fb00 f70e 	mul.w	r7, r0, lr
 8004626:	42a7      	cmp	r7, r4
 8004628:	fa02 f201 	lsl.w	r2, r2, r1
 800462c:	d90a      	bls.n	8004644 <__udivmoddi4+0x1a4>
 800462e:	eb1c 0404 	adds.w	r4, ip, r4
 8004632:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8004636:	f080 809b 	bcs.w	8004770 <__udivmoddi4+0x2d0>
 800463a:	42a7      	cmp	r7, r4
 800463c:	f240 8098 	bls.w	8004770 <__udivmoddi4+0x2d0>
 8004640:	3802      	subs	r0, #2
 8004642:	4464      	add	r4, ip
 8004644:	1be4      	subs	r4, r4, r7
 8004646:	b29f      	uxth	r7, r3
 8004648:	fbb4 f3f9 	udiv	r3, r4, r9
 800464c:	fb09 4413 	mls	r4, r9, r3, r4
 8004650:	ea47 4404 	orr.w	r4, r7, r4, lsl #16
 8004654:	fb03 fe0e 	mul.w	lr, r3, lr
 8004658:	45a6      	cmp	lr, r4
 800465a:	d909      	bls.n	8004670 <__udivmoddi4+0x1d0>
 800465c:	eb1c 0404 	adds.w	r4, ip, r4
 8004660:	f103 37ff 	add.w	r7, r3, #4294967295	@ 0xffffffff
 8004664:	f080 8082 	bcs.w	800476c <__udivmoddi4+0x2cc>
 8004668:	45a6      	cmp	lr, r4
 800466a:	d97f      	bls.n	800476c <__udivmoddi4+0x2cc>
 800466c:	3b02      	subs	r3, #2
 800466e:	4464      	add	r4, ip
 8004670:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8004674:	eba4 040e 	sub.w	r4, r4, lr
 8004678:	fba0 e702 	umull	lr, r7, r0, r2
 800467c:	42bc      	cmp	r4, r7
 800467e:	4673      	mov	r3, lr
 8004680:	46b9      	mov	r9, r7
 8004682:	d363      	bcc.n	800474c <__udivmoddi4+0x2ac>
 8004684:	d060      	beq.n	8004748 <__udivmoddi4+0x2a8>
 8004686:	b15d      	cbz	r5, 80046a0 <__udivmoddi4+0x200>
 8004688:	ebb8 0203 	subs.w	r2, r8, r3
 800468c:	eb64 0409 	sbc.w	r4, r4, r9
 8004690:	fa04 f606 	lsl.w	r6, r4, r6
 8004694:	fa22 f301 	lsr.w	r3, r2, r1
 8004698:	431e      	orrs	r6, r3
 800469a:	40cc      	lsrs	r4, r1
 800469c:	e9c5 6400 	strd	r6, r4, [r5]
 80046a0:	2100      	movs	r1, #0
 80046a2:	e74c      	b.n	800453e <__udivmoddi4+0x9e>
 80046a4:	0862      	lsrs	r2, r4, #1
 80046a6:	0848      	lsrs	r0, r1, #1
 80046a8:	ea42 71c1 	orr.w	r1, r2, r1, lsl #31
 80046ac:	0c0b      	lsrs	r3, r1, #16
 80046ae:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80046b2:	b28a      	uxth	r2, r1
 80046b4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80046b8:	fbb3 f1f6 	udiv	r1, r3, r6
 80046bc:	07e4      	lsls	r4, r4, #31
 80046be:	46b4      	mov	ip, r6
 80046c0:	4637      	mov	r7, r6
 80046c2:	46b6      	mov	lr, r6
 80046c4:	231f      	movs	r3, #31
 80046c6:	fbb0 f0f6 	udiv	r0, r0, r6
 80046ca:	1bd2      	subs	r2, r2, r7
 80046cc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80046d0:	e761      	b.n	8004596 <__udivmoddi4+0xf6>
 80046d2:	4661      	mov	r1, ip
 80046d4:	e714      	b.n	8004500 <__udivmoddi4+0x60>
 80046d6:	4610      	mov	r0, r2
 80046d8:	e728      	b.n	800452c <__udivmoddi4+0x8c>
 80046da:	f1c3 0120 	rsb	r1, r3, #32
 80046de:	fa20 f201 	lsr.w	r2, r0, r1
 80046e2:	409e      	lsls	r6, r3
 80046e4:	fa27 f101 	lsr.w	r1, r7, r1
 80046e8:	409f      	lsls	r7, r3
 80046ea:	433a      	orrs	r2, r7
 80046ec:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 80046f0:	fa1f fc86 	uxth.w	ip, r6
 80046f4:	fbb1 f7fe 	udiv	r7, r1, lr
 80046f8:	fb0e 1017 	mls	r0, lr, r7, r1
 80046fc:	0c11      	lsrs	r1, r2, #16
 80046fe:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004702:	fb07 f80c 	mul.w	r8, r7, ip
 8004706:	4588      	cmp	r8, r1
 8004708:	fa04 f403 	lsl.w	r4, r4, r3
 800470c:	d93a      	bls.n	8004784 <__udivmoddi4+0x2e4>
 800470e:	1871      	adds	r1, r6, r1
 8004710:	f107 30ff 	add.w	r0, r7, #4294967295	@ 0xffffffff
 8004714:	d201      	bcs.n	800471a <__udivmoddi4+0x27a>
 8004716:	4588      	cmp	r8, r1
 8004718:	d81f      	bhi.n	800475a <__udivmoddi4+0x2ba>
 800471a:	eba1 0108 	sub.w	r1, r1, r8
 800471e:	fbb1 f8fe 	udiv	r8, r1, lr
 8004722:	fb08 f70c 	mul.w	r7, r8, ip
 8004726:	fb0e 1118 	mls	r1, lr, r8, r1
 800472a:	b292      	uxth	r2, r2
 800472c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004730:	42ba      	cmp	r2, r7
 8004732:	d22f      	bcs.n	8004794 <__udivmoddi4+0x2f4>
 8004734:	18b2      	adds	r2, r6, r2
 8004736:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 800473a:	d2c6      	bcs.n	80046ca <__udivmoddi4+0x22a>
 800473c:	42ba      	cmp	r2, r7
 800473e:	d2c4      	bcs.n	80046ca <__udivmoddi4+0x22a>
 8004740:	f1a8 0102 	sub.w	r1, r8, #2
 8004744:	4432      	add	r2, r6
 8004746:	e7c0      	b.n	80046ca <__udivmoddi4+0x22a>
 8004748:	45f0      	cmp	r8, lr
 800474a:	d29c      	bcs.n	8004686 <__udivmoddi4+0x1e6>
 800474c:	ebbe 0302 	subs.w	r3, lr, r2
 8004750:	eb67 070c 	sbc.w	r7, r7, ip
 8004754:	3801      	subs	r0, #1
 8004756:	46b9      	mov	r9, r7
 8004758:	e795      	b.n	8004686 <__udivmoddi4+0x1e6>
 800475a:	eba6 0808 	sub.w	r8, r6, r8
 800475e:	4441      	add	r1, r8
 8004760:	1eb8      	subs	r0, r7, #2
 8004762:	fbb1 f8fe 	udiv	r8, r1, lr
 8004766:	fb08 f70c 	mul.w	r7, r8, ip
 800476a:	e7dc      	b.n	8004726 <__udivmoddi4+0x286>
 800476c:	463b      	mov	r3, r7
 800476e:	e77f      	b.n	8004670 <__udivmoddi4+0x1d0>
 8004770:	4650      	mov	r0, sl
 8004772:	e767      	b.n	8004644 <__udivmoddi4+0x1a4>
 8004774:	4608      	mov	r0, r1
 8004776:	e6fb      	b.n	8004570 <__udivmoddi4+0xd0>
 8004778:	4434      	add	r4, r6
 800477a:	3802      	subs	r0, #2
 800477c:	e732      	b.n	80045e4 <__udivmoddi4+0x144>
 800477e:	3f02      	subs	r7, #2
 8004780:	4432      	add	r2, r6
 8004782:	e71b      	b.n	80045bc <__udivmoddi4+0x11c>
 8004784:	eba1 0108 	sub.w	r1, r1, r8
 8004788:	4638      	mov	r0, r7
 800478a:	fbb1 f8fe 	udiv	r8, r1, lr
 800478e:	fb08 f70c 	mul.w	r7, r8, ip
 8004792:	e7c8      	b.n	8004726 <__udivmoddi4+0x286>
 8004794:	4641      	mov	r1, r8
 8004796:	e798      	b.n	80046ca <__udivmoddi4+0x22a>

08004798 <_init>:
 8004798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800479a:	bf00      	nop
 800479c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800479e:	bc08      	pop	{r3}
 80047a0:	469e      	mov	lr, r3
 80047a2:	4770      	bx	lr

080047a4 <_fini>:
 80047a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047a6:	bf00      	nop
 80047a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047aa:	bc08      	pop	{r3}
 80047ac:	469e      	mov	lr, r3
 80047ae:	4770      	bx	lr
