
build/debug/Drone_PID_IDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004858  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  080049e8  080049e8  000059e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ad8  08004ad8  00006070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004ad8  08004ad8  00005ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ae0  08004ae0  00006070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08004ae0  08004ae0  00005ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  08004ae8  08004ae8  00005ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08004af0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ec  20000070  08004b60  00006070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000035c  08004b60  0000635c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006070  2**0
                  CONTENTS, READONLY
 12 .comment      00000038  00000000  00000000  000060a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013269  00000000  00000000  000060d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022fd  00000000  00000000  00019341  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00009b37  00000000  00000000  0001b63e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000c90  00000000  00000000  00025178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000009a1  00000000  00000000  00025e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fe9d  00000000  00000000  000267a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000040cb  00000000  00000000  00036646  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002078  00000000  00000000  0003a714  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  0003c78c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_dmul>:
 8000230:	b570      	push	{r4, r5, r6, lr}
 8000232:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000236:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800023a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800023e:	bf1d      	ittte	ne
 8000240:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000244:	ea94 0f0c 	teqne	r4, ip
 8000248:	ea95 0f0c 	teqne	r5, ip
 800024c:	f000 f8de 	bleq	800040c <__aeabi_dmul+0x1dc>
 8000250:	442c      	add	r4, r5
 8000252:	ea81 0603 	eor.w	r6, r1, r3
 8000256:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800025a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800025e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000262:	bf18      	it	ne
 8000264:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000268:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800026c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000270:	d038      	beq.n	80002e4 <__aeabi_dmul+0xb4>
 8000272:	fba0 ce02 	umull	ip, lr, r0, r2
 8000276:	f04f 0500 	mov.w	r5, #0
 800027a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800027e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000282:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000286:	f04f 0600 	mov.w	r6, #0
 800028a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800028e:	f09c 0f00 	teq	ip, #0
 8000292:	bf18      	it	ne
 8000294:	f04e 0e01 	orrne.w	lr, lr, #1
 8000298:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800029c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002a0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002a4:	d204      	bcs.n	80002b0 <__aeabi_dmul+0x80>
 80002a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002aa:	416d      	adcs	r5, r5
 80002ac:	eb46 0606 	adc.w	r6, r6, r6
 80002b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002c4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002c8:	bf88      	it	hi
 80002ca:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002ce:	d81e      	bhi.n	800030e <__aeabi_dmul+0xde>
 80002d0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002d4:	bf08      	it	eq
 80002d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002da:	f150 0000 	adcs.w	r0, r0, #0
 80002de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002e2:	bd70      	pop	{r4, r5, r6, pc}
 80002e4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002e8:	ea46 0101 	orr.w	r1, r6, r1
 80002ec:	ea40 0002 	orr.w	r0, r0, r2
 80002f0:	ea81 0103 	eor.w	r1, r1, r3
 80002f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002f8:	bfc2      	ittt	gt
 80002fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000302:	bd70      	popgt	{r4, r5, r6, pc}
 8000304:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000308:	f04f 0e00 	mov.w	lr, #0
 800030c:	3c01      	subs	r4, #1
 800030e:	f300 80ab 	bgt.w	8000468 <__aeabi_dmul+0x238>
 8000312:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000316:	bfde      	ittt	le
 8000318:	2000      	movle	r0, #0
 800031a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800031e:	bd70      	pople	{r4, r5, r6, pc}
 8000320:	f1c4 0400 	rsb	r4, r4, #0
 8000324:	3c20      	subs	r4, #32
 8000326:	da35      	bge.n	8000394 <__aeabi_dmul+0x164>
 8000328:	340c      	adds	r4, #12
 800032a:	dc1b      	bgt.n	8000364 <__aeabi_dmul+0x134>
 800032c:	f104 0414 	add.w	r4, r4, #20
 8000330:	f1c4 0520 	rsb	r5, r4, #32
 8000334:	fa00 f305 	lsl.w	r3, r0, r5
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea40 0002 	orr.w	r0, r0, r2
 8000344:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000348:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800034c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000350:	fa21 f604 	lsr.w	r6, r1, r4
 8000354:	eb42 0106 	adc.w	r1, r2, r6
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f1c4 040c 	rsb	r4, r4, #12
 8000368:	f1c4 0520 	rsb	r5, r4, #32
 800036c:	fa00 f304 	lsl.w	r3, r0, r4
 8000370:	fa20 f005 	lsr.w	r0, r0, r5
 8000374:	fa01 f204 	lsl.w	r2, r1, r4
 8000378:	ea40 0002 	orr.w	r0, r0, r2
 800037c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000380:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000384:	f141 0100 	adc.w	r1, r1, #0
 8000388:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800038c:	bf08      	it	eq
 800038e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000392:	bd70      	pop	{r4, r5, r6, pc}
 8000394:	f1c4 0520 	rsb	r5, r4, #32
 8000398:	fa00 f205 	lsl.w	r2, r0, r5
 800039c:	ea4e 0e02 	orr.w	lr, lr, r2
 80003a0:	fa20 f304 	lsr.w	r3, r0, r4
 80003a4:	fa01 f205 	lsl.w	r2, r1, r5
 80003a8:	ea43 0302 	orr.w	r3, r3, r2
 80003ac:	fa21 f004 	lsr.w	r0, r1, r4
 80003b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	fa21 f204 	lsr.w	r2, r1, r4
 80003b8:	ea20 0002 	bic.w	r0, r0, r2
 80003bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003c4:	bf08      	it	eq
 80003c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003ca:	bd70      	pop	{r4, r5, r6, pc}
 80003cc:	f094 0f00 	teq	r4, #0
 80003d0:	d10f      	bne.n	80003f2 <__aeabi_dmul+0x1c2>
 80003d2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003d6:	0040      	lsls	r0, r0, #1
 80003d8:	eb41 0101 	adc.w	r1, r1, r1
 80003dc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003e0:	bf08      	it	eq
 80003e2:	3c01      	subeq	r4, #1
 80003e4:	d0f7      	beq.n	80003d6 <__aeabi_dmul+0x1a6>
 80003e6:	ea41 0106 	orr.w	r1, r1, r6
 80003ea:	f095 0f00 	teq	r5, #0
 80003ee:	bf18      	it	ne
 80003f0:	4770      	bxne	lr
 80003f2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003f6:	0052      	lsls	r2, r2, #1
 80003f8:	eb43 0303 	adc.w	r3, r3, r3
 80003fc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000400:	bf08      	it	eq
 8000402:	3d01      	subeq	r5, #1
 8000404:	d0f7      	beq.n	80003f6 <__aeabi_dmul+0x1c6>
 8000406:	ea43 0306 	orr.w	r3, r3, r6
 800040a:	4770      	bx	lr
 800040c:	ea94 0f0c 	teq	r4, ip
 8000410:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000414:	bf18      	it	ne
 8000416:	ea95 0f0c 	teqne	r5, ip
 800041a:	d00c      	beq.n	8000436 <__aeabi_dmul+0x206>
 800041c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000420:	bf18      	it	ne
 8000422:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000426:	d1d1      	bne.n	80003cc <__aeabi_dmul+0x19c>
 8000428:	ea81 0103 	eor.w	r1, r1, r3
 800042c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000430:	f04f 0000 	mov.w	r0, #0
 8000434:	bd70      	pop	{r4, r5, r6, pc}
 8000436:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800043a:	bf06      	itte	eq
 800043c:	4610      	moveq	r0, r2
 800043e:	4619      	moveq	r1, r3
 8000440:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000444:	d019      	beq.n	800047a <__aeabi_dmul+0x24a>
 8000446:	ea94 0f0c 	teq	r4, ip
 800044a:	d102      	bne.n	8000452 <__aeabi_dmul+0x222>
 800044c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000450:	d113      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000452:	ea95 0f0c 	teq	r5, ip
 8000456:	d105      	bne.n	8000464 <__aeabi_dmul+0x234>
 8000458:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800045c:	bf1c      	itt	ne
 800045e:	4610      	movne	r0, r2
 8000460:	4619      	movne	r1, r3
 8000462:	d10a      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000464:	ea81 0103 	eor.w	r1, r1, r3
 8000468:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800046c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd70      	pop	{r4, r5, r6, pc}
 800047a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800047e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000482:	bd70      	pop	{r4, r5, r6, pc}

08000484 <__aeabi_drsub>:
 8000484:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000488:	e002      	b.n	8000490 <__adddf3>
 800048a:	bf00      	nop

0800048c <__aeabi_dsub>:
 800048c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000490 <__adddf3>:
 8000490:	b530      	push	{r4, r5, lr}
 8000492:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000496:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	bf1f      	itttt	ne
 80004a6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004aa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004b2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b6:	f000 80e2 	beq.w	800067e <__adddf3+0x1ee>
 80004ba:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004be:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004c2:	bfb8      	it	lt
 80004c4:	426d      	neglt	r5, r5
 80004c6:	dd0c      	ble.n	80004e2 <__adddf3+0x52>
 80004c8:	442c      	add	r4, r5
 80004ca:	ea80 0202 	eor.w	r2, r0, r2
 80004ce:	ea81 0303 	eor.w	r3, r1, r3
 80004d2:	ea82 0000 	eor.w	r0, r2, r0
 80004d6:	ea83 0101 	eor.w	r1, r3, r1
 80004da:	ea80 0202 	eor.w	r2, r0, r2
 80004de:	ea81 0303 	eor.w	r3, r1, r3
 80004e2:	2d36      	cmp	r5, #54	@ 0x36
 80004e4:	bf88      	it	hi
 80004e6:	bd30      	pophi	{r4, r5, pc}
 80004e8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004f0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004f4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004f8:	d002      	beq.n	8000500 <__adddf3+0x70>
 80004fa:	4240      	negs	r0, r0
 80004fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000500:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000504:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000508:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800050c:	d002      	beq.n	8000514 <__adddf3+0x84>
 800050e:	4252      	negs	r2, r2
 8000510:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000514:	ea94 0f05 	teq	r4, r5
 8000518:	f000 80a7 	beq.w	800066a <__adddf3+0x1da>
 800051c:	f1a4 0401 	sub.w	r4, r4, #1
 8000520:	f1d5 0e20 	rsbs	lr, r5, #32
 8000524:	db0d      	blt.n	8000542 <__adddf3+0xb2>
 8000526:	fa02 fc0e 	lsl.w	ip, r2, lr
 800052a:	fa22 f205 	lsr.w	r2, r2, r5
 800052e:	1880      	adds	r0, r0, r2
 8000530:	f141 0100 	adc.w	r1, r1, #0
 8000534:	fa03 f20e 	lsl.w	r2, r3, lr
 8000538:	1880      	adds	r0, r0, r2
 800053a:	fa43 f305 	asr.w	r3, r3, r5
 800053e:	4159      	adcs	r1, r3
 8000540:	e00e      	b.n	8000560 <__adddf3+0xd0>
 8000542:	f1a5 0520 	sub.w	r5, r5, #32
 8000546:	f10e 0e20 	add.w	lr, lr, #32
 800054a:	2a01      	cmp	r2, #1
 800054c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000550:	bf28      	it	cs
 8000552:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000556:	fa43 f305 	asr.w	r3, r3, r5
 800055a:	18c0      	adds	r0, r0, r3
 800055c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000560:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000564:	d507      	bpl.n	8000576 <__adddf3+0xe6>
 8000566:	f04f 0e00 	mov.w	lr, #0
 800056a:	f1dc 0c00 	rsbs	ip, ip, #0
 800056e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000572:	eb6e 0101 	sbc.w	r1, lr, r1
 8000576:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800057a:	d31b      	bcc.n	80005b4 <__adddf3+0x124>
 800057c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000580:	d30c      	bcc.n	800059c <__adddf3+0x10c>
 8000582:	0849      	lsrs	r1, r1, #1
 8000584:	ea5f 0030 	movs.w	r0, r0, rrx
 8000588:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800058c:	f104 0401 	add.w	r4, r4, #1
 8000590:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000594:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000598:	f080 809a 	bcs.w	80006d0 <__adddf3+0x240>
 800059c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005a0:	bf08      	it	eq
 80005a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005a6:	f150 0000 	adcs.w	r0, r0, #0
 80005aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ae:	ea41 0105 	orr.w	r1, r1, r5
 80005b2:	bd30      	pop	{r4, r5, pc}
 80005b4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005b8:	4140      	adcs	r0, r0
 80005ba:	eb41 0101 	adc.w	r1, r1, r1
 80005be:	3c01      	subs	r4, #1
 80005c0:	bf28      	it	cs
 80005c2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80005c6:	d2e9      	bcs.n	800059c <__adddf3+0x10c>
 80005c8:	f091 0f00 	teq	r1, #0
 80005cc:	bf04      	itt	eq
 80005ce:	4601      	moveq	r1, r0
 80005d0:	2000      	moveq	r0, #0
 80005d2:	fab1 f381 	clz	r3, r1
 80005d6:	bf08      	it	eq
 80005d8:	3320      	addeq	r3, #32
 80005da:	f1a3 030b 	sub.w	r3, r3, #11
 80005de:	f1b3 0220 	subs.w	r2, r3, #32
 80005e2:	da0c      	bge.n	80005fe <__adddf3+0x16e>
 80005e4:	320c      	adds	r2, #12
 80005e6:	dd08      	ble.n	80005fa <__adddf3+0x16a>
 80005e8:	f102 0c14 	add.w	ip, r2, #20
 80005ec:	f1c2 020c 	rsb	r2, r2, #12
 80005f0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005f4:	fa21 f102 	lsr.w	r1, r1, r2
 80005f8:	e00c      	b.n	8000614 <__adddf3+0x184>
 80005fa:	f102 0214 	add.w	r2, r2, #20
 80005fe:	bfd8      	it	le
 8000600:	f1c2 0c20 	rsble	ip, r2, #32
 8000604:	fa01 f102 	lsl.w	r1, r1, r2
 8000608:	fa20 fc0c 	lsr.w	ip, r0, ip
 800060c:	bfdc      	itt	le
 800060e:	ea41 010c 	orrle.w	r1, r1, ip
 8000612:	4090      	lslle	r0, r2
 8000614:	1ae4      	subs	r4, r4, r3
 8000616:	bfa2      	ittt	ge
 8000618:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800061c:	4329      	orrge	r1, r5
 800061e:	bd30      	popge	{r4, r5, pc}
 8000620:	ea6f 0404 	mvn.w	r4, r4
 8000624:	3c1f      	subs	r4, #31
 8000626:	da1c      	bge.n	8000662 <__adddf3+0x1d2>
 8000628:	340c      	adds	r4, #12
 800062a:	dc0e      	bgt.n	800064a <__adddf3+0x1ba>
 800062c:	f104 0414 	add.w	r4, r4, #20
 8000630:	f1c4 0220 	rsb	r2, r4, #32
 8000634:	fa20 f004 	lsr.w	r0, r0, r4
 8000638:	fa01 f302 	lsl.w	r3, r1, r2
 800063c:	ea40 0003 	orr.w	r0, r0, r3
 8000640:	fa21 f304 	lsr.w	r3, r1, r4
 8000644:	ea45 0103 	orr.w	r1, r5, r3
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	f1c4 040c 	rsb	r4, r4, #12
 800064e:	f1c4 0220 	rsb	r2, r4, #32
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 f304 	lsl.w	r3, r1, r4
 800065a:	ea40 0003 	orr.w	r0, r0, r3
 800065e:	4629      	mov	r1, r5
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	fa21 f004 	lsr.w	r0, r1, r4
 8000666:	4629      	mov	r1, r5
 8000668:	bd30      	pop	{r4, r5, pc}
 800066a:	f094 0f00 	teq	r4, #0
 800066e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000672:	bf06      	itte	eq
 8000674:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000678:	3401      	addeq	r4, #1
 800067a:	3d01      	subne	r5, #1
 800067c:	e74e      	b.n	800051c <__adddf3+0x8c>
 800067e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000682:	bf18      	it	ne
 8000684:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000688:	d029      	beq.n	80006de <__adddf3+0x24e>
 800068a:	ea94 0f05 	teq	r4, r5
 800068e:	bf08      	it	eq
 8000690:	ea90 0f02 	teqeq	r0, r2
 8000694:	d005      	beq.n	80006a2 <__adddf3+0x212>
 8000696:	ea54 0c00 	orrs.w	ip, r4, r0
 800069a:	bf04      	itt	eq
 800069c:	4619      	moveq	r1, r3
 800069e:	4610      	moveq	r0, r2
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	ea91 0f03 	teq	r1, r3
 80006a6:	bf1e      	ittt	ne
 80006a8:	2100      	movne	r1, #0
 80006aa:	2000      	movne	r0, #0
 80006ac:	bd30      	popne	{r4, r5, pc}
 80006ae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006b2:	d105      	bne.n	80006c0 <__adddf3+0x230>
 80006b4:	0040      	lsls	r0, r0, #1
 80006b6:	4149      	adcs	r1, r1
 80006b8:	bf28      	it	cs
 80006ba:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006be:	bd30      	pop	{r4, r5, pc}
 80006c0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80006c4:	bf3c      	itt	cc
 80006c6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006ca:	bd30      	popcc	{r4, r5, pc}
 80006cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006d0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006d4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf1a      	itte	ne
 80006e4:	4619      	movne	r1, r3
 80006e6:	4610      	movne	r0, r2
 80006e8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006ec:	bf1c      	itt	ne
 80006ee:	460b      	movne	r3, r1
 80006f0:	4602      	movne	r2, r0
 80006f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006f6:	bf06      	itte	eq
 80006f8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006fc:	ea91 0f03 	teqeq	r1, r3
 8000700:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000704:	bd30      	pop	{r4, r5, pc}
 8000706:	bf00      	nop

08000708 <__aeabi_ui2d>:
 8000708:	f090 0f00 	teq	r0, #0
 800070c:	bf04      	itt	eq
 800070e:	2100      	moveq	r1, #0
 8000710:	4770      	bxeq	lr
 8000712:	b530      	push	{r4, r5, lr}
 8000714:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000718:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800071c:	f04f 0500 	mov.w	r5, #0
 8000720:	f04f 0100 	mov.w	r1, #0
 8000724:	e750      	b.n	80005c8 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_i2d>:
 8000728:	f090 0f00 	teq	r0, #0
 800072c:	bf04      	itt	eq
 800072e:	2100      	moveq	r1, #0
 8000730:	4770      	bxeq	lr
 8000732:	b530      	push	{r4, r5, lr}
 8000734:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000738:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800073c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000740:	bf48      	it	mi
 8000742:	4240      	negmi	r0, r0
 8000744:	f04f 0100 	mov.w	r1, #0
 8000748:	e73e      	b.n	80005c8 <__adddf3+0x138>
 800074a:	bf00      	nop

0800074c <__aeabi_f2d>:
 800074c:	0042      	lsls	r2, r0, #1
 800074e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000752:	ea4f 0131 	mov.w	r1, r1, rrx
 8000756:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800075a:	bf1f      	itttt	ne
 800075c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000760:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000764:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000768:	4770      	bxne	lr
 800076a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800076e:	bf08      	it	eq
 8000770:	4770      	bxeq	lr
 8000772:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000776:	bf04      	itt	eq
 8000778:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800077c:	4770      	bxeq	lr
 800077e:	b530      	push	{r4, r5, lr}
 8000780:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000784:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000788:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	e71c      	b.n	80005c8 <__adddf3+0x138>
 800078e:	bf00      	nop

08000790 <__aeabi_ul2d>:
 8000790:	ea50 0201 	orrs.w	r2, r0, r1
 8000794:	bf08      	it	eq
 8000796:	4770      	bxeq	lr
 8000798:	b530      	push	{r4, r5, lr}
 800079a:	f04f 0500 	mov.w	r5, #0
 800079e:	e00a      	b.n	80007b6 <__aeabi_l2d+0x16>

080007a0 <__aeabi_l2d>:
 80007a0:	ea50 0201 	orrs.w	r2, r0, r1
 80007a4:	bf08      	it	eq
 80007a6:	4770      	bxeq	lr
 80007a8:	b530      	push	{r4, r5, lr}
 80007aa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007ae:	d502      	bpl.n	80007b6 <__aeabi_l2d+0x16>
 80007b0:	4240      	negs	r0, r0
 80007b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007ba:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007be:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007c2:	f43f aed8 	beq.w	8000576 <__adddf3+0xe6>
 80007c6:	f04f 0203 	mov.w	r2, #3
 80007ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ce:	bf18      	it	ne
 80007d0:	3203      	addne	r2, #3
 80007d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007d6:	bf18      	it	ne
 80007d8:	3203      	addne	r2, #3
 80007da:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007de:	f1c2 0320 	rsb	r3, r2, #32
 80007e2:	fa00 fc03 	lsl.w	ip, r0, r3
 80007e6:	fa20 f002 	lsr.w	r0, r0, r2
 80007ea:	fa01 fe03 	lsl.w	lr, r1, r3
 80007ee:	ea40 000e 	orr.w	r0, r0, lr
 80007f2:	fa21 f102 	lsr.w	r1, r1, r2
 80007f6:	4414      	add	r4, r2
 80007f8:	e6bd      	b.n	8000576 <__adddf3+0xe6>
 80007fa:	bf00      	nop

080007fc <__aeabi_d2f>:
 80007fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000800:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000804:	bf24      	itt	cs
 8000806:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800080a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800080e:	d90d      	bls.n	800082c <__aeabi_d2f+0x30>
 8000810:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000814:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000818:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800081c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000820:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000824:	bf08      	it	eq
 8000826:	f020 0001 	biceq.w	r0, r0, #1
 800082a:	4770      	bx	lr
 800082c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000830:	d121      	bne.n	8000876 <__aeabi_d2f+0x7a>
 8000832:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000836:	bfbc      	itt	lt
 8000838:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800083c:	4770      	bxlt	lr
 800083e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000842:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000846:	f1c2 0218 	rsb	r2, r2, #24
 800084a:	f1c2 0c20 	rsb	ip, r2, #32
 800084e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000852:	fa20 f002 	lsr.w	r0, r0, r2
 8000856:	bf18      	it	ne
 8000858:	f040 0001 	orrne.w	r0, r0, #1
 800085c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000860:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000864:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000868:	ea40 000c 	orr.w	r0, r0, ip
 800086c:	fa23 f302 	lsr.w	r3, r3, r2
 8000870:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000874:	e7cc      	b.n	8000810 <__aeabi_d2f+0x14>
 8000876:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800087a:	d107      	bne.n	800088c <__aeabi_d2f+0x90>
 800087c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000880:	bf1e      	ittt	ne
 8000882:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000886:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800088a:	4770      	bxne	lr
 800088c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000890:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000894:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop

0800089c <__aeabi_uldivmod>:
 800089c:	b953      	cbnz	r3, 80008b4 <__aeabi_uldivmod+0x18>
 800089e:	b94a      	cbnz	r2, 80008b4 <__aeabi_uldivmod+0x18>
 80008a0:	2900      	cmp	r1, #0
 80008a2:	bf08      	it	eq
 80008a4:	2800      	cmpeq	r0, #0
 80008a6:	bf1c      	itt	ne
 80008a8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80008ac:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80008b0:	f000 b80c 	b.w	80008cc <__aeabi_idiv0>
 80008b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008bc:	f003 ff0c 	bl	80046d8 <__udivmoddi4>
 80008c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008c8:	b004      	add	sp, #16
 80008ca:	4770      	bx	lr

080008cc <__aeabi_idiv0>:
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop

080008d0 <__do_global_dtors_aux>:
 80008d0:	b510      	push	{r4, lr}
 80008d2:	4c05      	ldr	r4, [pc, #20]	@ (80008e8 <__do_global_dtors_aux+0x18>)
 80008d4:	7823      	ldrb	r3, [r4, #0]
 80008d6:	b933      	cbnz	r3, 80008e6 <__do_global_dtors_aux+0x16>
 80008d8:	4b04      	ldr	r3, [pc, #16]	@ (80008ec <__do_global_dtors_aux+0x1c>)
 80008da:	b113      	cbz	r3, 80008e2 <__do_global_dtors_aux+0x12>
 80008dc:	4804      	ldr	r0, [pc, #16]	@ (80008f0 <__do_global_dtors_aux+0x20>)
 80008de:	f3af 8000 	nop.w
 80008e2:	2301      	movs	r3, #1
 80008e4:	7023      	strb	r3, [r4, #0]
 80008e6:	bd10      	pop	{r4, pc}
 80008e8:	20000070 	.word	0x20000070
 80008ec:	00000000 	.word	0x00000000
 80008f0:	080049d0 	.word	0x080049d0

080008f4 <frame_dummy>:
 80008f4:	b508      	push	{r3, lr}
 80008f6:	4b03      	ldr	r3, [pc, #12]	@ (8000904 <frame_dummy+0x10>)
 80008f8:	b11b      	cbz	r3, 8000902 <frame_dummy+0xe>
 80008fa:	4903      	ldr	r1, [pc, #12]	@ (8000908 <frame_dummy+0x14>)
 80008fc:	4803      	ldr	r0, [pc, #12]	@ (800090c <frame_dummy+0x18>)
 80008fe:	f3af 8000 	nop.w
 8000902:	bd08      	pop	{r3, pc}
 8000904:	00000000 	.word	0x00000000
 8000908:	20000074 	.word	0x20000074
 800090c:	080049d0 	.word	0x080049d0

08000910 <Accelerometer_Init>:
 * and ensures it is ready for operation.
 *
 * @note This function should be called before attempting to read data from the accelerometer.
 */
void Accelerometer_Init(I2C_HandleTypeDef *hi2c)
{
 8000910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000914:	b086      	sub	sp, #24
 8000916:	4604      	mov	r4, r0
    uint8_t data = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8_t check;
    // Read WHO_AM_I register (0x75) to check if the device is connected
    HAL_I2C_Mem_Read(hi2c, MPU6050_ADDR, 0x75, 1, &check, 1, 1000);
 800091e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000922:	9302      	str	r3, [sp, #8]
 8000924:	2301      	movs	r3, #1
 8000926:	9301      	str	r3, [sp, #4]
 8000928:	f10d 0216 	add.w	r2, sp, #22
 800092c:	9200      	str	r2, [sp, #0]
 800092e:	2275      	movs	r2, #117	@ 0x75
 8000930:	21d0      	movs	r1, #208	@ 0xd0
 8000932:	f001 f83b 	bl	80019ac <HAL_I2C_Mem_Read>
    if (check != 0x68) {
 8000936:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800093a:	2b68      	cmp	r3, #104	@ 0x68
 800093c:	d002      	beq.n	8000944 <Accelerometer_Init+0x34>
    data = 0x00; // ±2g full scale
    HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, 0x1C, 1, &data, 1, 1000);
    // set Gyroscopic configuration in GYRO_CONFIG Register (0x1B)
    data = 0x00; // ±250°/s full scale
    HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, 0x1B, 1, &data, 1, 1000);
}
 800093e:	b006      	add	sp, #24
 8000940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, 0x6B, 1, &data, 1, 1000);
 8000944:	f44f 777a 	mov.w	r7, #1000	@ 0x3e8
 8000948:	9702      	str	r7, [sp, #8]
 800094a:	2501      	movs	r5, #1
 800094c:	9501      	str	r5, [sp, #4]
 800094e:	f10d 0617 	add.w	r6, sp, #23
 8000952:	9600      	str	r6, [sp, #0]
 8000954:	462b      	mov	r3, r5
 8000956:	226b      	movs	r2, #107	@ 0x6b
 8000958:	21d0      	movs	r1, #208	@ 0xd0
 800095a:	4620      	mov	r0, r4
 800095c:	f000 ff53 	bl	8001806 <HAL_I2C_Mem_Write>
    data = 0x07; // 1000 Hz / (1 + 7) = 125 Hz
 8000960:	2307      	movs	r3, #7
 8000962:	f88d 3017 	strb.w	r3, [sp, #23]
    HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, 0x19, 1, &data, 1, 1000);
 8000966:	9702      	str	r7, [sp, #8]
 8000968:	9501      	str	r5, [sp, #4]
 800096a:	9600      	str	r6, [sp, #0]
 800096c:	462b      	mov	r3, r5
 800096e:	2219      	movs	r2, #25
 8000970:	21d0      	movs	r1, #208	@ 0xd0
 8000972:	4620      	mov	r0, r4
 8000974:	f000 ff47 	bl	8001806 <HAL_I2C_Mem_Write>
    data = 0x00; // ±2g full scale
 8000978:	f04f 0800 	mov.w	r8, #0
 800097c:	f88d 8017 	strb.w	r8, [sp, #23]
    HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, 0x1C, 1, &data, 1, 1000);
 8000980:	9702      	str	r7, [sp, #8]
 8000982:	9501      	str	r5, [sp, #4]
 8000984:	9600      	str	r6, [sp, #0]
 8000986:	462b      	mov	r3, r5
 8000988:	221c      	movs	r2, #28
 800098a:	21d0      	movs	r1, #208	@ 0xd0
 800098c:	4620      	mov	r0, r4
 800098e:	f000 ff3a 	bl	8001806 <HAL_I2C_Mem_Write>
    data = 0x00; // ±250°/s full scale
 8000992:	f88d 8017 	strb.w	r8, [sp, #23]
    HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, 0x1B, 1, &data, 1, 1000);
 8000996:	9702      	str	r7, [sp, #8]
 8000998:	9501      	str	r5, [sp, #4]
 800099a:	9600      	str	r6, [sp, #0]
 800099c:	462b      	mov	r3, r5
 800099e:	221b      	movs	r2, #27
 80009a0:	21d0      	movs	r1, #208	@ 0xd0
 80009a2:	4620      	mov	r0, r4
 80009a4:	f000 ff2f 	bl	8001806 <HAL_I2C_Mem_Write>
 80009a8:	e7c9      	b.n	800093e <Accelerometer_Init+0x2e>
	...

080009ac <Accelerometer_Read>:
 * acceleration information.
 *
 * @return int Returns 0 on success, or a negative error code on failure.
 */
void Accelerometer_Read(I2C_HandleTypeDef *hi2c, AccelData *accel_data, GyroData *gyro_data)
{    
 80009ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80009b0:	b087      	sub	sp, #28
 80009b2:	4606      	mov	r6, r0
 80009b4:	460d      	mov	r5, r1
 80009b6:	4614      	mov	r4, r2
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from ACCEL_XOUT_H (0x3B) Register
    HAL_I2C_Mem_Read(hi2c, MPU6050_ADDR, 0x3B, 1, Rec_Data, 6, 1000);
 80009b8:	f44f 797a 	mov.w	r9, #1000	@ 0x3e8
 80009bc:	f8cd 9008 	str.w	r9, [sp, #8]
 80009c0:	f04f 0806 	mov.w	r8, #6
 80009c4:	f8cd 8004 	str.w	r8, [sp, #4]
 80009c8:	af04      	add	r7, sp, #16
 80009ca:	9700      	str	r7, [sp, #0]
 80009cc:	2301      	movs	r3, #1
 80009ce:	223b      	movs	r2, #59	@ 0x3b
 80009d0:	21d0      	movs	r1, #208	@ 0xd0
 80009d2:	f000 ffeb 	bl	80019ac <HAL_I2C_Mem_Read>
    // Convert the data to 16-bit signed integers
    accel_data->x = (int16_t)((Rec_Data[0] << 8) | Rec_Data[1]);
 80009d6:	f89d 2010 	ldrb.w	r2, [sp, #16]
 80009da:	f89d 3011 	ldrb.w	r3, [sp, #17]
 80009de:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80009e2:	b21b      	sxth	r3, r3
 80009e4:	ee07 3a90 	vmov	s15, r3
 80009e8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80009ec:	edc5 6a00 	vstr	s13, [r5]
    accel_data->y = (int16_t)((Rec_Data[2] << 8) | Rec_Data[3]);
 80009f0:	f89d 2012 	ldrb.w	r2, [sp, #18]
 80009f4:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80009f8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80009fc:	b21b      	sxth	r3, r3
 80009fe:	ee07 3a90 	vmov	s15, r3
 8000a02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a06:	ed85 7a01 	vstr	s14, [r5, #4]
    accel_data->z = (int16_t)((Rec_Data[4] << 8) | Rec_Data[5]);
 8000a0a:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8000a0e:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8000a12:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000a16:	b21b      	sxth	r3, r3
 8000a18:	ee07 3a90 	vmov	s15, r3
 8000a1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a20:	edc5 7a02 	vstr	s15, [r5, #8]
    // Convert raw value to g-force
    accel_data->x = (float)accel_data->x / 16384.0f; // For ±2g full scale
 8000a24:	ed9f 6a28 	vldr	s12, [pc, #160]	@ 8000ac8 <Accelerometer_Read+0x11c>
 8000a28:	ee66 6a86 	vmul.f32	s13, s13, s12
 8000a2c:	edc5 6a00 	vstr	s13, [r5]
    accel_data->y = (float)accel_data->y / 16384.0f; 
 8000a30:	ee27 7a06 	vmul.f32	s14, s14, s12
 8000a34:	ed85 7a01 	vstr	s14, [r5, #4]
    accel_data->z = (float)accel_data->z / 16384.0f;
 8000a38:	ee67 7a86 	vmul.f32	s15, s15, s12
 8000a3c:	edc5 7a02 	vstr	s15, [r5, #8]

    // Read 6 BYTES of data starting from GYRO_XOUT_H (0x43) Register
    HAL_I2C_Mem_Read(hi2c, MPU6050_ADDR, 0x43, 1, Rec_Data, 6, 1000);
 8000a40:	f8cd 9008 	str.w	r9, [sp, #8]
 8000a44:	f8cd 8004 	str.w	r8, [sp, #4]
 8000a48:	9700      	str	r7, [sp, #0]
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	2243      	movs	r2, #67	@ 0x43
 8000a4e:	21d0      	movs	r1, #208	@ 0xd0
 8000a50:	4630      	mov	r0, r6
 8000a52:	f000 ffab 	bl	80019ac <HAL_I2C_Mem_Read>
    // Convert the data to 16-bit signed integers
    gyro_data->x = (int16_t)((Rec_Data[0] << 8) | Rec_Data[1]);
 8000a56:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8000a5a:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8000a5e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000a62:	b21b      	sxth	r3, r3
 8000a64:	ee07 3a90 	vmov	s15, r3
 8000a68:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000a6c:	edc4 6a00 	vstr	s13, [r4]
    gyro_data->y = (int16_t)((Rec_Data[2] << 8) | Rec_Data[3]);
 8000a70:	f89d 2012 	ldrb.w	r2, [sp, #18]
 8000a74:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8000a78:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000a7c:	b21b      	sxth	r3, r3
 8000a7e:	ee07 3a90 	vmov	s15, r3
 8000a82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a86:	ed84 7a01 	vstr	s14, [r4, #4]
    gyro_data->z = (int16_t)((Rec_Data[4] << 8) | Rec_Data[5]);
 8000a8a:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8000a8e:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8000a92:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000a96:	b21b      	sxth	r3, r3
 8000a98:	ee07 3a90 	vmov	s15, r3
 8000a9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000aa0:	edc4 7a02 	vstr	s15, [r4, #8]
    // Convert raw value to degrees per second
    gyro_data->x = (float)gyro_data->x / 131.0f; // For ±250°/s full scale
 8000aa4:	ed9f 6a09 	vldr	s12, [pc, #36]	@ 8000acc <Accelerometer_Read+0x120>
 8000aa8:	eec6 5a86 	vdiv.f32	s11, s13, s12
 8000aac:	edc4 5a00 	vstr	s11, [r4]
    gyro_data->y = (float)gyro_data->y / 131.0f;
 8000ab0:	eec7 6a06 	vdiv.f32	s13, s14, s12
 8000ab4:	edc4 6a01 	vstr	s13, [r4, #4]
    gyro_data->z = (float)gyro_data->z / 131.0f; 
 8000ab8:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8000abc:	ed84 7a02 	vstr	s14, [r4, #8]
}
 8000ac0:	b007      	add	sp, #28
 8000ac2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000ac6:	bf00      	nop
 8000ac8:	38800000 	.word	0x38800000
 8000acc:	43030000 	.word	0x43030000

08000ad0 <angles_from_accel>:
 *
 * @param accel_data Structure containing accelerometer data (x, y, z).
 * @param pitch Pointer to store the calculated pitch angle (in degrees).
 * @param roll Pointer to store the calculated roll angle (in degrees).
 */
void angles_from_accel(AccelData accel_data, float *pitch, float *roll) {
 8000ad0:	b530      	push	{r4, r5, lr}
 8000ad2:	ed2d 8b04 	vpush	{d8-d9}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	eeb0 9a40 	vmov.f32	s18, s0
 8000adc:	eeb0 8a60 	vmov.f32	s16, s1
 8000ae0:	4605      	mov	r5, r0
 8000ae2:	460c      	mov	r4, r1
 8000ae4:	ed8d 0a01 	vstr	s0, [sp, #4]
 8000ae8:	edcd 0a02 	vstr	s1, [sp, #8]
 8000aec:	ed8d 1a03 	vstr	s2, [sp, #12]
    *pitch = atan2f(accel_data.y, sqrtf(accel_data.x * accel_data.x + accel_data.z * accel_data.z)) * (180.0f / M_PI);
 8000af0:	ee20 0a00 	vmul.f32	s0, s0, s0
 8000af4:	ee61 8a01 	vmul.f32	s17, s2, s2
 8000af8:	ee30 0a28 	vadd.f32	s0, s0, s17
 8000afc:	f003 fc46 	bl	800438c <sqrtf>
 8000b00:	eef0 0a40 	vmov.f32	s1, s0
 8000b04:	eeb0 0a48 	vmov.f32	s0, s16
 8000b08:	f003 fc3e 	bl	8004388 <atan2f>
 8000b0c:	ee10 0a10 	vmov	r0, s0
 8000b10:	f7ff fe1c 	bl	800074c <__aeabi_f2d>
 8000b14:	a312      	add	r3, pc, #72	@ (adr r3, 8000b60 <angles_from_accel+0x90>)
 8000b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b1a:	f7ff fb89 	bl	8000230 <__aeabi_dmul>
 8000b1e:	f7ff fe6d 	bl	80007fc <__aeabi_d2f>
 8000b22:	6028      	str	r0, [r5, #0]
    *roll = atan2f(-accel_data.x, sqrtf(accel_data.y * accel_data.y + accel_data.z * accel_data.z)) * (180.0f / M_PI);
 8000b24:	ee28 8a08 	vmul.f32	s16, s16, s16
 8000b28:	ee38 0a88 	vadd.f32	s0, s17, s16
 8000b2c:	f003 fc2e 	bl	800438c <sqrtf>
 8000b30:	eef0 0a40 	vmov.f32	s1, s0
 8000b34:	eeb1 0a49 	vneg.f32	s0, s18
 8000b38:	f003 fc26 	bl	8004388 <atan2f>
 8000b3c:	ee10 0a10 	vmov	r0, s0
 8000b40:	f7ff fe04 	bl	800074c <__aeabi_f2d>
 8000b44:	a306      	add	r3, pc, #24	@ (adr r3, 8000b60 <angles_from_accel+0x90>)
 8000b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b4a:	f7ff fb71 	bl	8000230 <__aeabi_dmul>
 8000b4e:	f7ff fe55 	bl	80007fc <__aeabi_d2f>
 8000b52:	6020      	str	r0, [r4, #0]
}
 8000b54:	b005      	add	sp, #20
 8000b56:	ecbd 8b04 	vpop	{d8-d9}
 8000b5a:	bd30      	pop	{r4, r5, pc}
 8000b5c:	f3af 8000 	nop.w
 8000b60:	1a63c1f8 	.word	0x1a63c1f8
 8000b64:	404ca5dc 	.word	0x404ca5dc

08000b68 <angles_rate_from_gyro>:
 *
 * @param gyro_data Structure containing gyroscope data (x, y, z).
 * @param pitch_rate Pointer to store the calculated pitch rate (in degrees per second).
 * @param roll_rate Pointer to store the calculated roll rate (in degrees per second).
 */
void angles_rate_from_gyro(GyroData gyro_data, float *pitch_rate, float *roll_rate) {
 8000b68:	b084      	sub	sp, #16
 8000b6a:	ed8d 0a01 	vstr	s0, [sp, #4]
 8000b6e:	edcd 0a02 	vstr	s1, [sp, #8]
 8000b72:	ed8d 1a03 	vstr	s2, [sp, #12]
    *pitch_rate = gyro_data.y; // Gyro Y-axis for pitch rate
 8000b76:	edc0 0a00 	vstr	s1, [r0]
    *roll_rate = gyro_data.x;  // Gyro X-axis for roll rate
 8000b7a:	ed81 0a00 	vstr	s0, [r1]
}
 8000b7e:	b004      	add	sp, #16
 8000b80:	4770      	bx	lr
	...

08000b84 <Kalman_Init>:
 * @param init_covariance Initial estimate of the error covariance.
 * @param process_noise Process noise covariance (Q).
 * @param measurement_noise Measurement noise covariance (R).
 */
void Kalman_Init(Kalman_t *kalman_x, Kalman_t *kalman_y, Kalman_t *kalman_z)
{
 8000b84:	b500      	push	{lr}
    // Initialize Kalman filter parameters for X, Y, and Z axes
    kalman_x->angle = 0.0f;
 8000b86:	2300      	movs	r3, #0
 8000b88:	6003      	str	r3, [r0, #0]
    kalman_x->bias = 0.0f;
 8000b8a:	6043      	str	r3, [r0, #4]
    kalman_x->rate = 0.0f;
 8000b8c:	6083      	str	r3, [r0, #8]
    kalman_x->P[0][0] = 1.0f; // P[0][0]
 8000b8e:	f04f 5c7e 	mov.w	ip, #1065353216	@ 0x3f800000
 8000b92:	f8c0 c00c 	str.w	ip, [r0, #12]
    kalman_x->P[0][1] = 0.0f; // P[0][1]
 8000b96:	6103      	str	r3, [r0, #16]
    kalman_x->P[1][0] = 0.0f; // P[1][0]
 8000b98:	6143      	str	r3, [r0, #20]
    kalman_x->P[1][1] = 1.0f; // P[1][1]
 8000b9a:	f8c0 c018 	str.w	ip, [r0, #24]
    kalman_x->Q_angle = 0.001f; // Process noise covariance for angle
 8000b9e:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8000bf8 <Kalman_Init+0x74>
 8000ba2:	ed80 7a07 	vstr	s14, [r0, #28]
    kalman_x->Q_bias = 0.003f; // Process noise covariance for bias
 8000ba6:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8000bfc <Kalman_Init+0x78>
 8000baa:	edc0 7a08 	vstr	s15, [r0, #32]
    kalman_x->R_measure = 0.03f; // Measurement noise covariance
 8000bae:	f8df e050 	ldr.w	lr, [pc, #80]	@ 8000c00 <Kalman_Init+0x7c>
 8000bb2:	f8c0 e024 	str.w	lr, [r0, #36]	@ 0x24

    kalman_y->angle = 0.0f;
 8000bb6:	600b      	str	r3, [r1, #0]
    kalman_y->bias = 0.0f;
 8000bb8:	604b      	str	r3, [r1, #4]
    kalman_y->rate = 0.0f;
 8000bba:	608b      	str	r3, [r1, #8]
    kalman_y->P[0][0] = 1.0f;
 8000bbc:	f8c1 c00c 	str.w	ip, [r1, #12]
    kalman_y->P[0][1] = 0.0f;
 8000bc0:	610b      	str	r3, [r1, #16]
    kalman_y->P[1][0] = 0.0f;
 8000bc2:	614b      	str	r3, [r1, #20]
    kalman_y->P[1][1] = 1.0f;
 8000bc4:	f8c1 c018 	str.w	ip, [r1, #24]
    kalman_y->Q_angle = 0.001f;
 8000bc8:	ed81 7a07 	vstr	s14, [r1, #28]
    kalman_y->Q_bias = 0.003f;
 8000bcc:	edc1 7a08 	vstr	s15, [r1, #32]
    kalman_y->R_measure = 0.03f;
 8000bd0:	f8c1 e024 	str.w	lr, [r1, #36]	@ 0x24

    kalman_z->angle = 0.0f;
 8000bd4:	6013      	str	r3, [r2, #0]
    kalman_z->bias = 0.0f;
 8000bd6:	6053      	str	r3, [r2, #4]
    kalman_z->rate = 0.0f;
 8000bd8:	6093      	str	r3, [r2, #8]
    kalman_z->P[0][0] = 1.0f;
 8000bda:	f8c2 c00c 	str.w	ip, [r2, #12]
    kalman_z->P[0][1] = 0.0f;
 8000bde:	6113      	str	r3, [r2, #16]
    kalman_z->P[1][0] = 0.0f;
 8000be0:	6153      	str	r3, [r2, #20]
    kalman_z->P[1][1] = 1.0f;
 8000be2:	f8c2 c018 	str.w	ip, [r2, #24]
    kalman_z->Q_angle = 0.001f;
 8000be6:	ed82 7a07 	vstr	s14, [r2, #28]
    kalman_z->Q_bias = 0.003f;
 8000bea:	edc2 7a08 	vstr	s15, [r2, #32]
    kalman_z->R_measure = 0.03f;
 8000bee:	f8c2 e024 	str.w	lr, [r2, #36]	@ 0x24
}
 8000bf2:	f85d fb04 	ldr.w	pc, [sp], #4
 8000bf6:	bf00      	nop
 8000bf8:	3a83126f 	.word	0x3a83126f
 8000bfc:	3b449ba6 	.word	0x3b449ba6
 8000c00:	3cf5c28f 	.word	0x3cf5c28f

08000c04 <Kalman_GetAngle>:
 * @param gyro_rate Angular rate measured from the gyroscope (in degrees per second).
 * @param dt Time interval since the last update (in seconds).
 */
void Kalman_GetAngle(Kalman_t *kalman, float acc_angle, float gyro_rate, float dt) {
    // 1. Prediction
    kalman->rate = gyro_rate - kalman->bias;
 8000c04:	edd0 4a01 	vldr	s9, [r0, #4]
 8000c08:	ee70 0ae4 	vsub.f32	s1, s1, s9
 8000c0c:	edc0 0a02 	vstr	s1, [r0, #8]
    kalman->angle += dt * kalman->rate;
 8000c10:	ed90 5a00 	vldr	s10, [r0]
 8000c14:	ee60 0a81 	vmul.f32	s1, s1, s2
 8000c18:	ee35 5a20 	vadd.f32	s10, s10, s1
 8000c1c:	ed80 5a00 	vstr	s10, [r0]

    // state covariance update
    kalman->P[0][0] += dt * (dt*kalman->P[1][1] - kalman->P[0][1] - kalman->P[1][0] + kalman->Q_angle);
 8000c20:	edd0 7a03 	vldr	s15, [r0, #12]
 8000c24:	ed90 6a06 	vldr	s12, [r0, #24]
 8000c28:	ee26 4a01 	vmul.f32	s8, s12, s2
 8000c2c:	ed90 7a04 	vldr	s14, [r0, #16]
 8000c30:	ee74 5a47 	vsub.f32	s11, s8, s14
 8000c34:	edd0 6a05 	vldr	s13, [r0, #20]
 8000c38:	ee75 5ae6 	vsub.f32	s11, s11, s13
 8000c3c:	edd0 3a07 	vldr	s7, [r0, #28]
 8000c40:	ee75 5aa3 	vadd.f32	s11, s11, s7
 8000c44:	ee65 5a81 	vmul.f32	s11, s11, s2
 8000c48:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8000c4c:	edc0 7a03 	vstr	s15, [r0, #12]
    kalman->P[0][1] -= dt * kalman->P[1][1];
 8000c50:	ee37 7a44 	vsub.f32	s14, s14, s8
 8000c54:	ed80 7a04 	vstr	s14, [r0, #16]
    kalman->P[1][0] -= dt * kalman->P[1][1];
 8000c58:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8000c5c:	edc0 6a05 	vstr	s13, [r0, #20]
    kalman->P[1][1] += kalman->Q_bias * dt;
 8000c60:	edd0 5a08 	vldr	s11, [r0, #32]
 8000c64:	ee65 5a81 	vmul.f32	s11, s11, s2
 8000c68:	ee36 6a25 	vadd.f32	s12, s12, s11
 8000c6c:	ed80 6a06 	vstr	s12, [r0, #24]

    // 2. update
    float y = acc_angle - kalman->angle; // innovation
 8000c70:	ee30 0a45 	vsub.f32	s0, s0, s10
    float S = kalman->P[0][0] + kalman->R_measure; // incertitude innovation
 8000c74:	ed90 4a09 	vldr	s8, [r0, #36]	@ 0x24
 8000c78:	ee37 4a84 	vadd.f32	s8, s15, s8
    float K0 = kalman->P[0][0] / S;
 8000c7c:	eec7 5a84 	vdiv.f32	s11, s15, s8
    float K1 = kalman->P[1][0] / S;
 8000c80:	eec6 3a84 	vdiv.f32	s7, s13, s8

    // state update
    kalman->angle += K0 * y;
 8000c84:	ee20 4a25 	vmul.f32	s8, s0, s11
 8000c88:	ee35 5a04 	vadd.f32	s10, s10, s8
 8000c8c:	ed80 5a00 	vstr	s10, [r0]
    kalman->bias  += K1 * y;
 8000c90:	ee20 0a23 	vmul.f32	s0, s0, s7
 8000c94:	ee74 4a80 	vadd.f32	s9, s9, s0
 8000c98:	edc0 4a01 	vstr	s9, [r0, #4]

    // state covariance update
    float P00_temp = kalman->P[0][0];
    float P01_temp = kalman->P[0][1];

    kalman->P[0][0] -= K0 * P00_temp;
 8000c9c:	ee27 5aa5 	vmul.f32	s10, s15, s11
 8000ca0:	ee37 5ac5 	vsub.f32	s10, s15, s10
 8000ca4:	ed80 5a03 	vstr	s10, [r0, #12]
    kalman->P[0][1] -= K0 * P01_temp;
 8000ca8:	ee67 5a25 	vmul.f32	s11, s14, s11
 8000cac:	ee77 5a65 	vsub.f32	s11, s14, s11
 8000cb0:	edc0 5a04 	vstr	s11, [r0, #16]
    kalman->P[1][0] -= K1 * P00_temp;
 8000cb4:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8000cb8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000cbc:	edc0 6a05 	vstr	s13, [r0, #20]
    kalman->P[1][1] -= K1 * P01_temp;
 8000cc0:	ee27 7a23 	vmul.f32	s14, s14, s7
 8000cc4:	ee36 6a47 	vsub.f32	s12, s12, s14
 8000cc8:	ed80 6a06 	vstr	s12, [r0, #24]
}
 8000ccc:	4770      	bx	lr

08000cce <ITM_SendChar>:
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000cce:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000cd2:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000cd6:	f013 0f01 	tst.w	r3, #1
 8000cda:	d011      	beq.n	8000d00 <ITM_SendChar+0x32>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000cdc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ce0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ce4:	f013 0f01 	tst.w	r3, #1
 8000ce8:	d101      	bne.n	8000cee <ITM_SendChar+0x20>
 8000cea:	4770      	bx	lr
  {
    while (ITM->PORT[0U].u32 == 0UL)
    {
      __NOP();
 8000cec:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000cee:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d0f9      	beq.n	8000cec <ITM_SendChar+0x1e>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000cf8:	b2c3      	uxtb	r3, r0
 8000cfa:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000cfe:	7013      	strb	r3, [r2, #0]
  }
  return (ch);
}
 8000d00:	4770      	bx	lr
	...

08000d04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d04:	b530      	push	{r4, r5, lr}
 8000d06:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d08:	ad05      	add	r5, sp, #20
 8000d0a:	2400      	movs	r4, #0
 8000d0c:	9405      	str	r4, [sp, #20]
 8000d0e:	9406      	str	r4, [sp, #24]
 8000d10:	9407      	str	r4, [sp, #28]
 8000d12:	9408      	str	r4, [sp, #32]
 8000d14:	9409      	str	r4, [sp, #36]	@ 0x24
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d16:	4b21      	ldr	r3, [pc, #132]	@ (8000d9c <MX_GPIO_Init+0x98>)
 8000d18:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000d1a:	f042 0204 	orr.w	r2, r2, #4
 8000d1e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000d20:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000d22:	f002 0204 	and.w	r2, r2, #4
 8000d26:	9201      	str	r2, [sp, #4]
 8000d28:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d2a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000d2c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000d30:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000d32:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000d34:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000d38:	9202      	str	r2, [sp, #8]
 8000d3a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000d3e:	f042 0201 	orr.w	r2, r2, #1
 8000d42:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000d44:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000d46:	f002 0201 	and.w	r2, r2, #1
 8000d4a:	9203      	str	r2, [sp, #12]
 8000d4c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d4e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000d50:	f042 0202 	orr.w	r2, r2, #2
 8000d54:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000d56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d58:	f003 0302 	and.w	r3, r3, #2
 8000d5c:	9304      	str	r3, [sp, #16]
 8000d5e:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d60:	4622      	mov	r2, r4
 8000d62:	2120      	movs	r1, #32
 8000d64:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d68:	f000 fb14 	bl	8001394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d6c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d70:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d72:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000d76:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d7a:	4629      	mov	r1, r5
 8000d7c:	4808      	ldr	r0, [pc, #32]	@ (8000da0 <MX_GPIO_Init+0x9c>)
 8000d7e:	f000 fa09 	bl	8001194 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d82:	2320      	movs	r3, #32
 8000d84:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d86:	2301      	movs	r3, #1
 8000d88:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d8e:	4629      	mov	r1, r5
 8000d90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d94:	f000 f9fe 	bl	8001194 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000d98:	b00b      	add	sp, #44	@ 0x2c
 8000d9a:	bd30      	pop	{r4, r5, pc}
 8000d9c:	40021000 	.word	0x40021000
 8000da0:	48000800 	.word	0x48000800

08000da4 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8000da4:	b570      	push	{r4, r5, r6, lr}
 8000da6:	460c      	mov	r4, r1
 8000da8:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000daa:	2500      	movs	r5, #0
 8000dac:	e004      	b.n	8000db8 <_write+0x14>
  {
    ITM_SendChar(*ptr++);
 8000dae:	f814 0b01 	ldrb.w	r0, [r4], #1
 8000db2:	f7ff ff8c 	bl	8000cce <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db6:	3501      	adds	r5, #1
 8000db8:	42b5      	cmp	r5, r6
 8000dba:	dbf8      	blt.n	8000dae <_write+0xa>
  }
  return len;
}
 8000dbc:	4630      	mov	r0, r6
 8000dbe:	bd70      	pop	{r4, r5, r6, pc}

08000dc0 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dc2:	e7fe      	b.n	8000dc2 <Error_Handler+0x2>

08000dc4 <MX_USART2_UART_Init>:
{
 8000dc4:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 8000dc6:	480b      	ldr	r0, [pc, #44]	@ (8000df4 <MX_USART2_UART_Init+0x30>)
 8000dc8:	4b0b      	ldr	r3, [pc, #44]	@ (8000df8 <MX_USART2_UART_Init+0x34>)
 8000dca:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8000dcc:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000dd0:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dd6:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dd8:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dda:	220c      	movs	r2, #12
 8000ddc:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dde:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000de0:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000de2:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000de4:	6243      	str	r3, [r0, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000de6:	f002 faf6 	bl	80033d6 <HAL_UART_Init>
 8000dea:	b900      	cbnz	r0, 8000dee <MX_USART2_UART_Init+0x2a>
}
 8000dec:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000dee:	f7ff ffe7 	bl	8000dc0 <Error_Handler>
 8000df2:	bf00      	nop
 8000df4:	2000012c 	.word	0x2000012c
 8000df8:	40004400 	.word	0x40004400

08000dfc <MX_I2C1_Init>:
{
 8000dfc:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 8000dfe:	4811      	ldr	r0, [pc, #68]	@ (8000e44 <MX_I2C1_Init+0x48>)
 8000e00:	4b11      	ldr	r3, [pc, #68]	@ (8000e48 <MX_I2C1_Init+0x4c>)
 8000e02:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 8000e04:	4b11      	ldr	r3, [pc, #68]	@ (8000e4c <MX_I2C1_Init+0x50>)
 8000e06:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e10:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e12:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e14:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e16:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e18:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e1a:	f000 fc90 	bl	800173e <HAL_I2C_Init>
 8000e1e:	b950      	cbnz	r0, 8000e36 <MX_I2C1_Init+0x3a>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e20:	2100      	movs	r1, #0
 8000e22:	4808      	ldr	r0, [pc, #32]	@ (8000e44 <MX_I2C1_Init+0x48>)
 8000e24:	f000 fe98 	bl	8001b58 <HAL_I2CEx_ConfigAnalogFilter>
 8000e28:	b938      	cbnz	r0, 8000e3a <MX_I2C1_Init+0x3e>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	4805      	ldr	r0, [pc, #20]	@ (8000e44 <MX_I2C1_Init+0x48>)
 8000e2e:	f000 fec0 	bl	8001bb2 <HAL_I2CEx_ConfigDigitalFilter>
 8000e32:	b920      	cbnz	r0, 8000e3e <MX_I2C1_Init+0x42>
}
 8000e34:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000e36:	f7ff ffc3 	bl	8000dc0 <Error_Handler>
    Error_Handler();
 8000e3a:	f7ff ffc1 	bl	8000dc0 <Error_Handler>
    Error_Handler();
 8000e3e:	f7ff ffbf 	bl	8000dc0 <Error_Handler>
 8000e42:	bf00      	nop
 8000e44:	200001b4 	.word	0x200001b4
 8000e48:	40005400 	.word	0x40005400
 8000e4c:	10d19ce4 	.word	0x10d19ce4

08000e50 <SystemClock_Config>:
{
 8000e50:	b500      	push	{lr}
 8000e52:	b097      	sub	sp, #92	@ 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e54:	2244      	movs	r2, #68	@ 0x44
 8000e56:	2100      	movs	r1, #0
 8000e58:	a805      	add	r0, sp, #20
 8000e5a:	f002 fc43 	bl	80036e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e5e:	2300      	movs	r3, #0
 8000e60:	9300      	str	r3, [sp, #0]
 8000e62:	9301      	str	r3, [sp, #4]
 8000e64:	9302      	str	r3, [sp, #8]
 8000e66:	9303      	str	r3, [sp, #12]
 8000e68:	9304      	str	r3, [sp, #16]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e6a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000e6e:	f000 ff75 	bl	8001d5c <HAL_PWREx_ControlVoltageScaling>
 8000e72:	bb20      	cbnz	r0, 8000ebe <SystemClock_Config+0x6e>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e74:	2302      	movs	r3, #2
 8000e76:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e78:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e7c:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e7e:	2210      	movs	r2, #16
 8000e80:	9209      	str	r2, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e82:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e84:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e86:	2201      	movs	r2, #1
 8000e88:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000e8a:	220a      	movs	r2, #10
 8000e8c:	9212      	str	r2, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000e8e:	2207      	movs	r2, #7
 8000e90:	9213      	str	r2, [sp, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e92:	9314      	str	r3, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e94:	9315      	str	r3, [sp, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e96:	a805      	add	r0, sp, #20
 8000e98:	f001 f844 	bl	8001f24 <HAL_RCC_OscConfig>
 8000e9c:	b988      	cbnz	r0, 8000ec2 <SystemClock_Config+0x72>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e9e:	230f      	movs	r3, #15
 8000ea0:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000eaa:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eac:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000eae:	2104      	movs	r1, #4
 8000eb0:	4668      	mov	r0, sp
 8000eb2:	f001 fb45 	bl	8002540 <HAL_RCC_ClockConfig>
 8000eb6:	b930      	cbnz	r0, 8000ec6 <SystemClock_Config+0x76>
}
 8000eb8:	b017      	add	sp, #92	@ 0x5c
 8000eba:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000ebe:	f7ff ff7f 	bl	8000dc0 <Error_Handler>
    Error_Handler();
 8000ec2:	f7ff ff7d 	bl	8000dc0 <Error_Handler>
    Error_Handler();
 8000ec6:	f7ff ff7b 	bl	8000dc0 <Error_Handler>
	...

08000ecc <main>:
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
  HAL_Init();
 8000ed0:	f000 f8ba 	bl	8001048 <HAL_Init>
  Accelerometer_Init(&hi2c1); // Initialize the accelerometer
 8000ed4:	483b      	ldr	r0, [pc, #236]	@ (8000fc4 <main+0xf8>)
 8000ed6:	f7ff fd1b 	bl	8000910 <Accelerometer_Init>
  Kalman_Init(&kalman_pitch, &kalman_roll, &kalman_yaw); // Initialize Kalman filters for x, y, z axes
 8000eda:	4a3b      	ldr	r2, [pc, #236]	@ (8000fc8 <main+0xfc>)
 8000edc:	493b      	ldr	r1, [pc, #236]	@ (8000fcc <main+0x100>)
 8000ede:	483c      	ldr	r0, [pc, #240]	@ (8000fd0 <main+0x104>)
 8000ee0:	f7ff fe50 	bl	8000b84 <Kalman_Init>
  SystemClock_Config();
 8000ee4:	f7ff ffb4 	bl	8000e50 <SystemClock_Config>
  MX_GPIO_Init();
 8000ee8:	f7ff ff0c 	bl	8000d04 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000eec:	f7ff ff6a 	bl	8000dc4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000ef0:	f7ff ff84 	bl	8000dfc <MX_I2C1_Init>
    LD2_GPIO_Port->ODR ^= LD2_Pin; // Toggle the LED
 8000ef4:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000ef8:	6953      	ldr	r3, [r2, #20]
 8000efa:	f083 0320 	eor.w	r3, r3, #32
 8000efe:	6153      	str	r3, [r2, #20]
    Accelerometer_Read(&hi2c1, &accel_data, &gyro_data); // Read accelerometer and gyro data
 8000f00:	4c34      	ldr	r4, [pc, #208]	@ (8000fd4 <main+0x108>)
 8000f02:	4d35      	ldr	r5, [pc, #212]	@ (8000fd8 <main+0x10c>)
 8000f04:	4622      	mov	r2, r4
 8000f06:	4629      	mov	r1, r5
 8000f08:	482e      	ldr	r0, [pc, #184]	@ (8000fc4 <main+0xf8>)
 8000f0a:	f7ff fd4f 	bl	80009ac <Accelerometer_Read>
    angles_from_accel(accel_data, &pitch_calc, &roll_calc); // Calculate pitch and roll from accelerometer data
 8000f0e:	4f33      	ldr	r7, [pc, #204]	@ (8000fdc <main+0x110>)
 8000f10:	4e33      	ldr	r6, [pc, #204]	@ (8000fe0 <main+0x114>)
 8000f12:	4639      	mov	r1, r7
 8000f14:	4630      	mov	r0, r6
 8000f16:	ed95 0a00 	vldr	s0, [r5]
 8000f1a:	edd5 0a01 	vldr	s1, [r5, #4]
 8000f1e:	ed95 1a02 	vldr	s2, [r5, #8]
 8000f22:	f7ff fdd5 	bl	8000ad0 <angles_from_accel>
    angles_rate_from_gyro(gyro_data, &pitch_rate_calc, &roll_rate_calc); // Calculate pitch and roll rates from gyro data
 8000f26:	f8df 80c8 	ldr.w	r8, [pc, #200]	@ 8000ff0 <main+0x124>
 8000f2a:	f8df 90c8 	ldr.w	r9, [pc, #200]	@ 8000ff4 <main+0x128>
 8000f2e:	4641      	mov	r1, r8
 8000f30:	4648      	mov	r0, r9
 8000f32:	ed94 0a00 	vldr	s0, [r4]
 8000f36:	edd4 0a01 	vldr	s1, [r4, #4]
 8000f3a:	ed94 1a02 	vldr	s2, [r4, #8]
 8000f3e:	f7ff fe13 	bl	8000b68 <angles_rate_from_gyro>
    Kalman_GetAngle(&kalman_pitch, pitch_calc, pitch_rate_calc, dt);
 8000f42:	4c28      	ldr	r4, [pc, #160]	@ (8000fe4 <main+0x118>)
 8000f44:	4d22      	ldr	r5, [pc, #136]	@ (8000fd0 <main+0x104>)
 8000f46:	ed94 1a00 	vldr	s2, [r4]
 8000f4a:	edd9 0a00 	vldr	s1, [r9]
 8000f4e:	ed96 0a00 	vldr	s0, [r6]
 8000f52:	4628      	mov	r0, r5
 8000f54:	f7ff fe56 	bl	8000c04 <Kalman_GetAngle>
    Kalman_GetAngle(&kalman_roll, roll_calc, roll_rate_calc, dt);
 8000f58:	4e1c      	ldr	r6, [pc, #112]	@ (8000fcc <main+0x100>)
 8000f5a:	ed94 1a00 	vldr	s2, [r4]
 8000f5e:	edd8 0a00 	vldr	s1, [r8]
 8000f62:	ed97 0a00 	vldr	s0, [r7]
 8000f66:	4630      	mov	r0, r6
 8000f68:	f7ff fe4c 	bl	8000c04 <Kalman_GetAngle>
           kalman_pitch.angle, kalman_roll.angle,
 8000f6c:	f8d6 8000 	ldr.w	r8, [r6]
           kalman_pitch.rate, kalman_roll.rate);
 8000f70:	f8d5 9008 	ldr.w	r9, [r5, #8]
 8000f74:	f8d6 a008 	ldr.w	sl, [r6, #8]
    printf("Pitch: %.2f, Roll: %.2f, Pitch Rate: %.2f, Roll Rate: %.2f\n",
 8000f78:	6828      	ldr	r0, [r5, #0]
 8000f7a:	f7ff fbe7 	bl	800074c <__aeabi_f2d>
 8000f7e:	4606      	mov	r6, r0
 8000f80:	460f      	mov	r7, r1
 8000f82:	4650      	mov	r0, sl
 8000f84:	f7ff fbe2 	bl	800074c <__aeabi_f2d>
 8000f88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8000f8c:	4648      	mov	r0, r9
 8000f8e:	f7ff fbdd 	bl	800074c <__aeabi_f2d>
 8000f92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8000f96:	4640      	mov	r0, r8
 8000f98:	f7ff fbd8 	bl	800074c <__aeabi_f2d>
 8000f9c:	e9cd 0100 	strd	r0, r1, [sp]
 8000fa0:	4632      	mov	r2, r6
 8000fa2:	463b      	mov	r3, r7
 8000fa4:	4810      	ldr	r0, [pc, #64]	@ (8000fe8 <main+0x11c>)
 8000fa6:	f002 fb8b 	bl	80036c0 <iprintf>
    HAL_Delay(dt * 1000); // Delay for the time step
 8000faa:	edd4 7a00 	vldr	s15, [r4]
 8000fae:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8000fec <main+0x120>
 8000fb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fba:	ee17 0a90 	vmov	r0, s15
 8000fbe:	f000 f86b 	bl	8001098 <HAL_Delay>
  while (1)
 8000fc2:	e797      	b.n	8000ef4 <main+0x28>
 8000fc4:	200001b4 	.word	0x200001b4
 8000fc8:	2000009c 	.word	0x2000009c
 8000fcc:	200000c4 	.word	0x200000c4
 8000fd0:	200000ec 	.word	0x200000ec
 8000fd4:	20000114 	.word	0x20000114
 8000fd8:	20000120 	.word	0x20000120
 8000fdc:	20000094 	.word	0x20000094
 8000fe0:	20000098 	.word	0x20000098
 8000fe4:	20000000 	.word	0x20000000
 8000fe8:	080049e8 	.word	0x080049e8
 8000fec:	447a0000 	.word	0x447a0000
 8000ff0:	2000008c 	.word	0x2000008c
 8000ff4:	20000090 	.word	0x20000090

08000ff8 <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ff8:	4b10      	ldr	r3, [pc, #64]	@ (800103c <HAL_InitTick+0x44>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	b90b      	cbnz	r3, 8001002 <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ffe:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8001000:	4770      	bx	lr
{
 8001002:	b510      	push	{r4, lr}
 8001004:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001006:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800100a:	fbb0 f3f3 	udiv	r3, r0, r3
 800100e:	4a0c      	ldr	r2, [pc, #48]	@ (8001040 <HAL_InitTick+0x48>)
 8001010:	6810      	ldr	r0, [r2, #0]
 8001012:	fbb0 f0f3 	udiv	r0, r0, r3
 8001016:	f000 f8a9 	bl	800116c <HAL_SYSTICK_Config>
 800101a:	b968      	cbnz	r0, 8001038 <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800101c:	2c0f      	cmp	r4, #15
 800101e:	d901      	bls.n	8001024 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 8001020:	2001      	movs	r0, #1
 8001022:	e00a      	b.n	800103a <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001024:	2200      	movs	r2, #0
 8001026:	4621      	mov	r1, r4
 8001028:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800102c:	f000 f88e 	bl	800114c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001030:	4b04      	ldr	r3, [pc, #16]	@ (8001044 <HAL_InitTick+0x4c>)
 8001032:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8001034:	2000      	movs	r0, #0
 8001036:	e000      	b.n	800103a <HAL_InitTick+0x42>
      status = HAL_ERROR;
 8001038:	2001      	movs	r0, #1
}
 800103a:	bd10      	pop	{r4, pc}
 800103c:	20000004 	.word	0x20000004
 8001040:	2000000c 	.word	0x2000000c
 8001044:	20000008 	.word	0x20000008

08001048 <HAL_Init>:
{
 8001048:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800104a:	4a09      	ldr	r2, [pc, #36]	@ (8001070 <HAL_Init+0x28>)
 800104c:	6813      	ldr	r3, [r2, #0]
 800104e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001052:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001054:	2003      	movs	r0, #3
 8001056:	f000 f867 	bl	8001128 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800105a:	2000      	movs	r0, #0
 800105c:	f7ff ffcc 	bl	8000ff8 <HAL_InitTick>
 8001060:	b110      	cbz	r0, 8001068 <HAL_Init+0x20>
    status = HAL_ERROR;
 8001062:	2401      	movs	r4, #1
}
 8001064:	4620      	mov	r0, r4
 8001066:	bd10      	pop	{r4, pc}
 8001068:	4604      	mov	r4, r0
    HAL_MspInit();
 800106a:	f000 fdcd 	bl	8001c08 <HAL_MspInit>
 800106e:	e7f9      	b.n	8001064 <HAL_Init+0x1c>
 8001070:	40022000 	.word	0x40022000

08001074 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001074:	4b03      	ldr	r3, [pc, #12]	@ (8001084 <HAL_IncTick+0x10>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	4a03      	ldr	r2, [pc, #12]	@ (8001088 <HAL_IncTick+0x14>)
 800107a:	6811      	ldr	r1, [r2, #0]
 800107c:	440b      	add	r3, r1
 800107e:	6013      	str	r3, [r2, #0]
}
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	20000004 	.word	0x20000004
 8001088:	20000208 	.word	0x20000208

0800108c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800108c:	4b01      	ldr	r3, [pc, #4]	@ (8001094 <HAL_GetTick+0x8>)
 800108e:	6818      	ldr	r0, [r3, #0]
}
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	20000208 	.word	0x20000208

08001098 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001098:	b538      	push	{r3, r4, r5, lr}
 800109a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800109c:	f7ff fff6 	bl	800108c <HAL_GetTick>
 80010a0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010a2:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 80010a6:	d002      	beq.n	80010ae <HAL_Delay+0x16>
  {
    wait += (uint32_t)uwTickFreq;
 80010a8:	4b04      	ldr	r3, [pc, #16]	@ (80010bc <HAL_Delay+0x24>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010ae:	f7ff ffed 	bl	800108c <HAL_GetTick>
 80010b2:	1b40      	subs	r0, r0, r5
 80010b4:	42a0      	cmp	r0, r4
 80010b6:	d3fa      	bcc.n	80010ae <HAL_Delay+0x16>
  {
  }
}
 80010b8:	bd38      	pop	{r3, r4, r5, pc}
 80010ba:	bf00      	nop
 80010bc:	20000004 	.word	0x20000004

080010c0 <__NVIC_SetPriority>:
  if ((int32_t)(IRQn) >= 0)
 80010c0:	2800      	cmp	r0, #0
 80010c2:	db08      	blt.n	80010d6 <__NVIC_SetPriority+0x16>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c4:	0109      	lsls	r1, r1, #4
 80010c6:	b2c9      	uxtb	r1, r1
 80010c8:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 80010cc:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 80010d0:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 80010d4:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d6:	f000 000f 	and.w	r0, r0, #15
 80010da:	0109      	lsls	r1, r1, #4
 80010dc:	b2c9      	uxtb	r1, r1
 80010de:	4b01      	ldr	r3, [pc, #4]	@ (80010e4 <__NVIC_SetPriority+0x24>)
 80010e0:	5419      	strb	r1, [r3, r0]
}
 80010e2:	4770      	bx	lr
 80010e4:	e000ed14 	.word	0xe000ed14

080010e8 <NVIC_EncodePriority>:
{
 80010e8:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010ea:	f000 0007 	and.w	r0, r0, #7
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010ee:	f1c0 0c07 	rsb	ip, r0, #7
 80010f2:	f1bc 0f04 	cmp.w	ip, #4
 80010f6:	bf28      	it	cs
 80010f8:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010fc:	1d03      	adds	r3, r0, #4
 80010fe:	2b06      	cmp	r3, #6
 8001100:	d90f      	bls.n	8001122 <NVIC_EncodePriority+0x3a>
 8001102:	1ec3      	subs	r3, r0, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001104:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8001108:	fa0e f00c 	lsl.w	r0, lr, ip
 800110c:	ea21 0100 	bic.w	r1, r1, r0
 8001110:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001112:	fa0e fe03 	lsl.w	lr, lr, r3
 8001116:	ea22 020e 	bic.w	r2, r2, lr
}
 800111a:	ea41 0002 	orr.w	r0, r1, r2
 800111e:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001122:	2300      	movs	r3, #0
 8001124:	e7ee      	b.n	8001104 <NVIC_EncodePriority+0x1c>
	...

08001128 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001128:	4a07      	ldr	r2, [pc, #28]	@ (8001148 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800112a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800112c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001130:	041b      	lsls	r3, r3, #16
 8001132:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001134:	0200      	lsls	r0, r0, #8
 8001136:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800113a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 800113c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001140:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001144:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001146:	4770      	bx	lr
 8001148:	e000ed00 	.word	0xe000ed00

0800114c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800114c:	b510      	push	{r4, lr}
 800114e:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001150:	4b05      	ldr	r3, [pc, #20]	@ (8001168 <HAL_NVIC_SetPriority+0x1c>)
 8001152:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001154:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8001158:	f7ff ffc6 	bl	80010e8 <NVIC_EncodePriority>
 800115c:	4601      	mov	r1, r0
 800115e:	4620      	mov	r0, r4
 8001160:	f7ff ffae 	bl	80010c0 <__NVIC_SetPriority>
}
 8001164:	bd10      	pop	{r4, pc}
 8001166:	bf00      	nop
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <HAL_SYSTICK_Config>:
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800116c:	3801      	subs	r0, #1
 800116e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8001172:	d20b      	bcs.n	800118c <HAL_SYSTICK_Config+0x20>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001174:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001178:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117a:	4a05      	ldr	r2, [pc, #20]	@ (8001190 <HAL_SYSTICK_Config+0x24>)
 800117c:	21f0      	movs	r1, #240	@ 0xf0
 800117e:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001182:	2000      	movs	r0, #0
 8001184:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001186:	2207      	movs	r2, #7
 8001188:	611a      	str	r2, [r3, #16]
  return (0UL);                                                     /* Function successful */
 800118a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800118c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800118e:	4770      	bx	lr
 8001190:	e000ed00 	.word	0xe000ed00

08001194 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001194:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001196:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 8001198:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800119a:	e06b      	b.n	8001274 <HAL_GPIO_Init+0xe0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800119c:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800119e:	005e      	lsls	r6, r3, #1
 80011a0:	2403      	movs	r4, #3
 80011a2:	40b4      	lsls	r4, r6
 80011a4:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011a8:	68cc      	ldr	r4, [r1, #12]
 80011aa:	40b4      	lsls	r4, r6
 80011ac:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 80011ae:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011b0:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011b2:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011b6:	684c      	ldr	r4, [r1, #4]
 80011b8:	f3c4 1400 	ubfx	r4, r4, #4, #1
 80011bc:	409c      	lsls	r4, r3
 80011be:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 80011c0:	6044      	str	r4, [r0, #4]
 80011c2:	e069      	b.n	8001298 <HAL_GPIO_Init+0x104>

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80011c4:	6ac5      	ldr	r5, [r0, #44]	@ 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80011c6:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80011ca:	f3c4 04c0 	ubfx	r4, r4, #3, #1
 80011ce:	409c      	lsls	r4, r3
 80011d0:	432c      	orrs	r4, r5
        GPIOx->ASCR = temp;
 80011d2:	62c4      	str	r4, [r0, #44]	@ 0x2c
 80011d4:	e066      	b.n	80012a4 <HAL_GPIO_Init+0x110>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011d6:	08dd      	lsrs	r5, r3, #3
 80011d8:	3508      	adds	r5, #8
 80011da:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011de:	f003 0c07 	and.w	ip, r3, #7
 80011e2:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80011e6:	f04f 0e0f 	mov.w	lr, #15
 80011ea:	fa0e fe0c 	lsl.w	lr, lr, ip
 80011ee:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011f2:	690c      	ldr	r4, [r1, #16]
 80011f4:	fa04 f40c 	lsl.w	r4, r4, ip
 80011f8:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 80011fc:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8001200:	e067      	b.n	80012d2 <HAL_GPIO_Init+0x13e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001202:	2406      	movs	r4, #6
 8001204:	e000      	b.n	8001208 <HAL_GPIO_Init+0x74>
 8001206:	2400      	movs	r4, #0
 8001208:	fa04 f40e 	lsl.w	r4, r4, lr
 800120c:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 800120e:	f10c 0c02 	add.w	ip, ip, #2
 8001212:	4d5c      	ldr	r5, [pc, #368]	@ (8001384 <HAL_GPIO_Init+0x1f0>)
 8001214:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001218:	4c5b      	ldr	r4, [pc, #364]	@ (8001388 <HAL_GPIO_Init+0x1f4>)
 800121a:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 800121c:	43d4      	mvns	r4, r2
 800121e:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001222:	684f      	ldr	r7, [r1, #4]
 8001224:	f417 1f80 	tst.w	r7, #1048576	@ 0x100000
 8001228:	d001      	beq.n	800122e <HAL_GPIO_Init+0x9a>
        {
          temp |= iocurrent;
 800122a:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 800122e:	4d56      	ldr	r5, [pc, #344]	@ (8001388 <HAL_GPIO_Init+0x1f4>)
 8001230:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 8001232:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 8001234:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001238:	684f      	ldr	r7, [r1, #4]
 800123a:	f417 1f00 	tst.w	r7, #2097152	@ 0x200000
 800123e:	d001      	beq.n	8001244 <HAL_GPIO_Init+0xb0>
        {
          temp |= iocurrent;
 8001240:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8001244:	4d50      	ldr	r5, [pc, #320]	@ (8001388 <HAL_GPIO_Init+0x1f4>)
 8001246:	60ee      	str	r6, [r5, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001248:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 800124a:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800124e:	684f      	ldr	r7, [r1, #4]
 8001250:	f417 3f00 	tst.w	r7, #131072	@ 0x20000
 8001254:	d001      	beq.n	800125a <HAL_GPIO_Init+0xc6>
        {
          temp |= iocurrent;
 8001256:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 800125a:	4d4b      	ldr	r5, [pc, #300]	@ (8001388 <HAL_GPIO_Init+0x1f4>)
 800125c:	606e      	str	r6, [r5, #4]

        temp = EXTI->IMR1;
 800125e:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 8001260:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001262:	684e      	ldr	r6, [r1, #4]
 8001264:	f416 3f80 	tst.w	r6, #65536	@ 0x10000
 8001268:	d001      	beq.n	800126e <HAL_GPIO_Init+0xda>
        {
          temp |= iocurrent;
 800126a:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->IMR1 = temp;
 800126e:	4a46      	ldr	r2, [pc, #280]	@ (8001388 <HAL_GPIO_Init+0x1f4>)
 8001270:	6014      	str	r4, [r2, #0]
      }
    }

    position++;
 8001272:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001274:	680a      	ldr	r2, [r1, #0]
 8001276:	fa32 f403 	lsrs.w	r4, r2, r3
 800127a:	f000 8081 	beq.w	8001380 <HAL_GPIO_Init+0x1ec>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800127e:	f04f 0c01 	mov.w	ip, #1
 8001282:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 8001286:	ea1c 0202 	ands.w	r2, ip, r2
 800128a:	d0f2      	beq.n	8001272 <HAL_GPIO_Init+0xde>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800128c:	684c      	ldr	r4, [r1, #4]
 800128e:	f004 0403 	and.w	r4, r4, #3
 8001292:	3c01      	subs	r4, #1
 8001294:	2c01      	cmp	r4, #1
 8001296:	d981      	bls.n	800119c <HAL_GPIO_Init+0x8>
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001298:	684c      	ldr	r4, [r1, #4]
 800129a:	f004 0e03 	and.w	lr, r4, #3
 800129e:	f1be 0f03 	cmp.w	lr, #3
 80012a2:	d08f      	beq.n	80011c4 <HAL_GPIO_Init+0x30>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012a4:	684c      	ldr	r4, [r1, #4]
 80012a6:	f004 0403 	and.w	r4, r4, #3
 80012aa:	2c03      	cmp	r4, #3
 80012ac:	d00c      	beq.n	80012c8 <HAL_GPIO_Init+0x134>
        temp = GPIOx->PUPDR;
 80012ae:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012b0:	005d      	lsls	r5, r3, #1
 80012b2:	f04f 0c03 	mov.w	ip, #3
 80012b6:	fa0c fc05 	lsl.w	ip, ip, r5
 80012ba:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012be:	688c      	ldr	r4, [r1, #8]
 80012c0:	40ac      	lsls	r4, r5
 80012c2:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 80012c6:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012c8:	684c      	ldr	r4, [r1, #4]
 80012ca:	f004 0403 	and.w	r4, r4, #3
 80012ce:	2c02      	cmp	r4, #2
 80012d0:	d081      	beq.n	80011d6 <HAL_GPIO_Init+0x42>
      temp = GPIOx->MODER;
 80012d2:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80012d4:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80012d8:	f04f 0c03 	mov.w	ip, #3
 80012dc:	fa0c fc0e 	lsl.w	ip, ip, lr
 80012e0:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012e4:	684c      	ldr	r4, [r1, #4]
 80012e6:	f004 0403 	and.w	r4, r4, #3
 80012ea:	fa04 f40e 	lsl.w	r4, r4, lr
 80012ee:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 80012f2:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012f4:	684c      	ldr	r4, [r1, #4]
 80012f6:	f414 3f40 	tst.w	r4, #196608	@ 0x30000
 80012fa:	d0ba      	beq.n	8001272 <HAL_GPIO_Init+0xde>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012fc:	4c23      	ldr	r4, [pc, #140]	@ (800138c <HAL_GPIO_Init+0x1f8>)
 80012fe:	6e25      	ldr	r5, [r4, #96]	@ 0x60
 8001300:	f045 0501 	orr.w	r5, r5, #1
 8001304:	6625      	str	r5, [r4, #96]	@ 0x60
 8001306:	6e24      	ldr	r4, [r4, #96]	@ 0x60
 8001308:	f004 0401 	and.w	r4, r4, #1
 800130c:	9401      	str	r4, [sp, #4]
 800130e:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001310:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8001314:	f10c 0502 	add.w	r5, ip, #2
 8001318:	4c1a      	ldr	r4, [pc, #104]	@ (8001384 <HAL_GPIO_Init+0x1f0>)
 800131a:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800131e:	f003 0e03 	and.w	lr, r3, #3
 8001322:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001326:	240f      	movs	r4, #15
 8001328:	fa04 f40e 	lsl.w	r4, r4, lr
 800132c:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001330:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
 8001334:	f43f af67 	beq.w	8001206 <HAL_GPIO_Init+0x72>
 8001338:	4c15      	ldr	r4, [pc, #84]	@ (8001390 <HAL_GPIO_Init+0x1fc>)
 800133a:	42a0      	cmp	r0, r4
 800133c:	d016      	beq.n	800136c <HAL_GPIO_Init+0x1d8>
 800133e:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001342:	42a0      	cmp	r0, r4
 8001344:	d014      	beq.n	8001370 <HAL_GPIO_Init+0x1dc>
 8001346:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800134a:	42a0      	cmp	r0, r4
 800134c:	d012      	beq.n	8001374 <HAL_GPIO_Init+0x1e0>
 800134e:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001352:	42a0      	cmp	r0, r4
 8001354:	d010      	beq.n	8001378 <HAL_GPIO_Init+0x1e4>
 8001356:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800135a:	42a0      	cmp	r0, r4
 800135c:	d00e      	beq.n	800137c <HAL_GPIO_Init+0x1e8>
 800135e:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001362:	42a0      	cmp	r0, r4
 8001364:	f43f af4d 	beq.w	8001202 <HAL_GPIO_Init+0x6e>
 8001368:	2407      	movs	r4, #7
 800136a:	e74d      	b.n	8001208 <HAL_GPIO_Init+0x74>
 800136c:	2401      	movs	r4, #1
 800136e:	e74b      	b.n	8001208 <HAL_GPIO_Init+0x74>
 8001370:	2402      	movs	r4, #2
 8001372:	e749      	b.n	8001208 <HAL_GPIO_Init+0x74>
 8001374:	2403      	movs	r4, #3
 8001376:	e747      	b.n	8001208 <HAL_GPIO_Init+0x74>
 8001378:	2404      	movs	r4, #4
 800137a:	e745      	b.n	8001208 <HAL_GPIO_Init+0x74>
 800137c:	2405      	movs	r4, #5
 800137e:	e743      	b.n	8001208 <HAL_GPIO_Init+0x74>
  }
}
 8001380:	b003      	add	sp, #12
 8001382:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001384:	40010000 	.word	0x40010000
 8001388:	40010400 	.word	0x40010400
 800138c:	40021000 	.word	0x40021000
 8001390:	48000400 	.word	0x48000400

08001394 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001394:	b10a      	cbz	r2, 800139a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001396:	6181      	str	r1, [r0, #24]
 8001398:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800139a:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 800139c:	4770      	bx	lr

0800139e <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800139e:	6803      	ldr	r3, [r0, #0]
 80013a0:	699a      	ldr	r2, [r3, #24]
 80013a2:	f012 0f02 	tst.w	r2, #2
 80013a6:	d001      	beq.n	80013ac <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 80013a8:	2200      	movs	r2, #0
 80013aa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80013ac:	6803      	ldr	r3, [r0, #0]
 80013ae:	699a      	ldr	r2, [r3, #24]
 80013b0:	f012 0f01 	tst.w	r2, #1
 80013b4:	d103      	bne.n	80013be <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80013b6:	699a      	ldr	r2, [r3, #24]
 80013b8:	f042 0201 	orr.w	r2, r2, #1
 80013bc:	619a      	str	r2, [r3, #24]
  }
}
 80013be:	4770      	bx	lr

080013c0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80013c0:	b410      	push	{r4}
 80013c2:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80013c4:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80013c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80013cc:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80013ce:	4321      	orrs	r1, r4
 80013d0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80013d4:	6802      	ldr	r2, [r0, #0]
 80013d6:	6853      	ldr	r3, [r2, #4]
 80013d8:	0d64      	lsrs	r4, r4, #21
 80013da:	f404 6480 	and.w	r4, r4, #1024	@ 0x400
 80013de:	f044 747f 	orr.w	r4, r4, #66846720	@ 0x3fc0000
 80013e2:	f444 3458 	orr.w	r4, r4, #221184	@ 0x36000
 80013e6:	f444 747f 	orr.w	r4, r4, #1020	@ 0x3fc
 80013ea:	f044 0403 	orr.w	r4, r4, #3
 80013ee:	ea23 0304 	bic.w	r3, r3, r4
 80013f2:	430b      	orrs	r3, r1
 80013f4:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80013f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <I2C_IsErrorOccurred>:
{
 80013fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001400:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 8001402:	6803      	ldr	r3, [r0, #0]
 8001404:	699e      	ldr	r6, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001406:	f016 0610 	ands.w	r6, r6, #16
 800140a:	d07c      	beq.n	8001506 <I2C_IsErrorOccurred+0x10a>
 800140c:	460d      	mov	r5, r1
 800140e:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001410:	2210      	movs	r2, #16
 8001412:	61da      	str	r2, [r3, #28]
  uint32_t error_code = 0;
 8001414:	2600      	movs	r6, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001416:	4637      	mov	r7, r6
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001418:	6823      	ldr	r3, [r4, #0]
 800141a:	6998      	ldr	r0, [r3, #24]
 800141c:	f010 0f20 	tst.w	r0, #32
 8001420:	d130      	bne.n	8001484 <I2C_IsErrorOccurred+0x88>
 8001422:	bb7f      	cbnz	r7, 8001484 <I2C_IsErrorOccurred+0x88>
      if (Timeout != HAL_MAX_DELAY)
 8001424:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8001428:	d0f6      	beq.n	8001418 <I2C_IsErrorOccurred+0x1c>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800142a:	f7ff fe2f 	bl	800108c <HAL_GetTick>
 800142e:	eba0 0008 	sub.w	r0, r0, r8
 8001432:	42a8      	cmp	r0, r5
 8001434:	d801      	bhi.n	800143a <I2C_IsErrorOccurred+0x3e>
 8001436:	2d00      	cmp	r5, #0
 8001438:	d1ee      	bne.n	8001418 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800143a:	6821      	ldr	r1, [r4, #0]
 800143c:	684b      	ldr	r3, [r1, #4]
 800143e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          tmp2 = hi2c->Mode;
 8001442:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 8001446:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001448:	6988      	ldr	r0, [r1, #24]
 800144a:	f410 4f00 	tst.w	r0, #32768	@ 0x8000
 800144e:	d002      	beq.n	8001456 <I2C_IsErrorOccurred+0x5a>
 8001450:	b90b      	cbnz	r3, 8001456 <I2C_IsErrorOccurred+0x5a>
              (tmp1 != I2C_CR2_STOP) && \
 8001452:	2a20      	cmp	r2, #32
 8001454:	d10e      	bne.n	8001474 <I2C_IsErrorOccurred+0x78>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001456:	6823      	ldr	r3, [r4, #0]
 8001458:	699b      	ldr	r3, [r3, #24]
 800145a:	f013 0f20 	tst.w	r3, #32
 800145e:	d1db      	bne.n	8001418 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001460:	f7ff fe14 	bl	800108c <HAL_GetTick>
 8001464:	eba0 0008 	sub.w	r0, r0, r8
 8001468:	2819      	cmp	r0, #25
 800146a:	d9f4      	bls.n	8001456 <I2C_IsErrorOccurred+0x5a>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800146c:	f046 0620 	orr.w	r6, r6, #32
              status = HAL_ERROR;
 8001470:	2701      	movs	r7, #1
              break;
 8001472:	e7d1      	b.n	8001418 <I2C_IsErrorOccurred+0x1c>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001474:	684b      	ldr	r3, [r1, #4]
 8001476:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800147a:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 800147c:	f7ff fe06 	bl	800108c <HAL_GetTick>
 8001480:	4680      	mov	r8, r0
 8001482:	e7e8      	b.n	8001456 <I2C_IsErrorOccurred+0x5a>
    if (status == HAL_OK)
 8001484:	b90f      	cbnz	r7, 800148a <I2C_IsErrorOccurred+0x8e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001486:	2220      	movs	r2, #32
 8001488:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 800148a:	f046 0604 	orr.w	r6, r6, #4
    status = HAL_ERROR;
 800148e:	2501      	movs	r5, #1
  itflag = hi2c->Instance->ISR;
 8001490:	6822      	ldr	r2, [r4, #0]
 8001492:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001494:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001498:	d005      	beq.n	80014a6 <I2C_IsErrorOccurred+0xaa>
    error_code |= HAL_I2C_ERROR_BERR;
 800149a:	f046 0601 	orr.w	r6, r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800149e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80014a2:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 80014a4:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80014a6:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 80014aa:	d006      	beq.n	80014ba <I2C_IsErrorOccurred+0xbe>
    error_code |= HAL_I2C_ERROR_OVR;
 80014ac:	f046 0608 	orr.w	r6, r6, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80014b0:	6822      	ldr	r2, [r4, #0]
 80014b2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80014b6:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 80014b8:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80014ba:	f413 7f00 	tst.w	r3, #512	@ 0x200
 80014be:	d024      	beq.n	800150a <I2C_IsErrorOccurred+0x10e>
    error_code |= HAL_I2C_ERROR_ARLO;
 80014c0:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80014c4:	6823      	ldr	r3, [r4, #0]
 80014c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014ca:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 80014cc:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 80014ce:	4620      	mov	r0, r4
 80014d0:	f7ff ff65 	bl	800139e <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80014d4:	6822      	ldr	r2, [r4, #0]
 80014d6:	6853      	ldr	r3, [r2, #4]
 80014d8:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 80014dc:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 80014e0:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 80014e4:	f023 0301 	bic.w	r3, r3, #1
 80014e8:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 80014ea:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80014ec:	4333      	orrs	r3, r6
 80014ee:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80014f0:	2320      	movs	r3, #32
 80014f2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80014f6:	2300      	movs	r3, #0
 80014f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 80014fc:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 8001500:	4628      	mov	r0, r5
 8001502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8001506:	2500      	movs	r5, #0
 8001508:	e7c2      	b.n	8001490 <I2C_IsErrorOccurred+0x94>
  if (status != HAL_OK)
 800150a:	2d00      	cmp	r5, #0
 800150c:	d0f8      	beq.n	8001500 <I2C_IsErrorOccurred+0x104>
 800150e:	e7de      	b.n	80014ce <I2C_IsErrorOccurred+0xd2>

08001510 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8001510:	b570      	push	{r4, r5, r6, lr}
 8001512:	4604      	mov	r4, r0
 8001514:	460d      	mov	r5, r1
 8001516:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001518:	6823      	ldr	r3, [r4, #0]
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	f013 0f02 	tst.w	r3, #2
 8001520:	d122      	bne.n	8001568 <I2C_WaitOnTXISFlagUntilTimeout+0x58>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001522:	4632      	mov	r2, r6
 8001524:	4629      	mov	r1, r5
 8001526:	4620      	mov	r0, r4
 8001528:	f7ff ff68 	bl	80013fc <I2C_IsErrorOccurred>
 800152c:	b9f0      	cbnz	r0, 800156c <I2C_WaitOnTXISFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 800152e:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8001532:	d0f1      	beq.n	8001518 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001534:	f7ff fdaa 	bl	800108c <HAL_GetTick>
 8001538:	1b80      	subs	r0, r0, r6
 800153a:	42a8      	cmp	r0, r5
 800153c:	d801      	bhi.n	8001542 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 800153e:	2d00      	cmp	r5, #0
 8001540:	d1ea      	bne.n	8001518 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001542:	6823      	ldr	r3, [r4, #0]
 8001544:	699b      	ldr	r3, [r3, #24]
 8001546:	f013 0f02 	tst.w	r3, #2
 800154a:	d1e5      	bne.n	8001518 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800154c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800154e:	f043 0320 	orr.w	r3, r3, #32
 8001552:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001554:	2320      	movs	r3, #32
 8001556:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800155a:	2300      	movs	r3, #0
 800155c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 8001560:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
          return HAL_ERROR;
 8001564:	2001      	movs	r0, #1
 8001566:	e000      	b.n	800156a <I2C_WaitOnTXISFlagUntilTimeout+0x5a>
  return HAL_OK;
 8001568:	2000      	movs	r0, #0
}
 800156a:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800156c:	2001      	movs	r0, #1
 800156e:	e7fc      	b.n	800156a <I2C_WaitOnTXISFlagUntilTimeout+0x5a>

08001570 <I2C_WaitOnFlagUntilTimeout>:
{
 8001570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001574:	4605      	mov	r5, r0
 8001576:	4688      	mov	r8, r1
 8001578:	4617      	mov	r7, r2
 800157a:	461e      	mov	r6, r3
 800157c:	f8dd 9020 	ldr.w	r9, [sp, #32]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001580:	682b      	ldr	r3, [r5, #0]
 8001582:	699c      	ldr	r4, [r3, #24]
 8001584:	ea38 0404 	bics.w	r4, r8, r4
 8001588:	bf0c      	ite	eq
 800158a:	2301      	moveq	r3, #1
 800158c:	2300      	movne	r3, #0
 800158e:	42bb      	cmp	r3, r7
 8001590:	d127      	bne.n	80015e2 <I2C_WaitOnFlagUntilTimeout+0x72>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001592:	464a      	mov	r2, r9
 8001594:	4631      	mov	r1, r6
 8001596:	4628      	mov	r0, r5
 8001598:	f7ff ff30 	bl	80013fc <I2C_IsErrorOccurred>
 800159c:	bb20      	cbnz	r0, 80015e8 <I2C_WaitOnFlagUntilTimeout+0x78>
    if (Timeout != HAL_MAX_DELAY)
 800159e:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 80015a2:	d0ed      	beq.n	8001580 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015a4:	f7ff fd72 	bl	800108c <HAL_GetTick>
 80015a8:	eba0 0009 	sub.w	r0, r0, r9
 80015ac:	42b0      	cmp	r0, r6
 80015ae:	d801      	bhi.n	80015b4 <I2C_WaitOnFlagUntilTimeout+0x44>
 80015b0:	2e00      	cmp	r6, #0
 80015b2:	d1e5      	bne.n	8001580 <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80015b4:	682b      	ldr	r3, [r5, #0]
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	ea38 0303 	bics.w	r3, r8, r3
 80015bc:	bf0c      	ite	eq
 80015be:	2301      	moveq	r3, #1
 80015c0:	2300      	movne	r3, #0
 80015c2:	42bb      	cmp	r3, r7
 80015c4:	d1dc      	bne.n	8001580 <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015c6:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 80015c8:	f043 0320 	orr.w	r3, r3, #32
 80015cc:	646b      	str	r3, [r5, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80015ce:	2320      	movs	r3, #32
 80015d0:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80015d4:	2300      	movs	r3, #0
 80015d6:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 80015da:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
          return HAL_ERROR;
 80015de:	2001      	movs	r0, #1
 80015e0:	e000      	b.n	80015e4 <I2C_WaitOnFlagUntilTimeout+0x74>
  return HAL_OK;
 80015e2:	2000      	movs	r0, #0
}
 80015e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return HAL_ERROR;
 80015e8:	2001      	movs	r0, #1
 80015ea:	e7fb      	b.n	80015e4 <I2C_WaitOnFlagUntilTimeout+0x74>

080015ec <I2C_RequestMemoryWrite>:
{
 80015ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015f0:	b082      	sub	sp, #8
 80015f2:	4604      	mov	r4, r0
 80015f4:	4690      	mov	r8, r2
 80015f6:	461d      	mov	r5, r3
 80015f8:	9e08      	ldr	r6, [sp, #32]
 80015fa:	9f09      	ldr	r7, [sp, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80015fc:	4b19      	ldr	r3, [pc, #100]	@ (8001664 <I2C_RequestMemoryWrite+0x78>)
 80015fe:	9300      	str	r3, [sp, #0]
 8001600:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001604:	b2ea      	uxtb	r2, r5
 8001606:	f7ff fedb 	bl	80013c0 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800160a:	463a      	mov	r2, r7
 800160c:	4631      	mov	r1, r6
 800160e:	4620      	mov	r0, r4
 8001610:	f7ff ff7e 	bl	8001510 <I2C_WaitOnTXISFlagUntilTimeout>
 8001614:	b9f8      	cbnz	r0, 8001656 <I2C_RequestMemoryWrite+0x6a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001616:	2d01      	cmp	r5, #1
 8001618:	d10e      	bne.n	8001638 <I2C_RequestMemoryWrite+0x4c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800161a:	6823      	ldr	r3, [r4, #0]
 800161c:	fa5f f288 	uxtb.w	r2, r8
 8001620:	629a      	str	r2, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001622:	9700      	str	r7, [sp, #0]
 8001624:	4633      	mov	r3, r6
 8001626:	2200      	movs	r2, #0
 8001628:	2180      	movs	r1, #128	@ 0x80
 800162a:	4620      	mov	r0, r4
 800162c:	f7ff ffa0 	bl	8001570 <I2C_WaitOnFlagUntilTimeout>
 8001630:	b9a8      	cbnz	r0, 800165e <I2C_RequestMemoryWrite+0x72>
}
 8001632:	b002      	add	sp, #8
 8001634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001638:	6823      	ldr	r3, [r4, #0]
 800163a:	ea4f 2218 	mov.w	r2, r8, lsr #8
 800163e:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001640:	463a      	mov	r2, r7
 8001642:	4631      	mov	r1, r6
 8001644:	4620      	mov	r0, r4
 8001646:	f7ff ff63 	bl	8001510 <I2C_WaitOnTXISFlagUntilTimeout>
 800164a:	b930      	cbnz	r0, 800165a <I2C_RequestMemoryWrite+0x6e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800164c:	6823      	ldr	r3, [r4, #0]
 800164e:	fa5f f288 	uxtb.w	r2, r8
 8001652:	629a      	str	r2, [r3, #40]	@ 0x28
 8001654:	e7e5      	b.n	8001622 <I2C_RequestMemoryWrite+0x36>
    return HAL_ERROR;
 8001656:	2001      	movs	r0, #1
 8001658:	e7eb      	b.n	8001632 <I2C_RequestMemoryWrite+0x46>
      return HAL_ERROR;
 800165a:	2001      	movs	r0, #1
 800165c:	e7e9      	b.n	8001632 <I2C_RequestMemoryWrite+0x46>
    return HAL_ERROR;
 800165e:	2001      	movs	r0, #1
 8001660:	e7e7      	b.n	8001632 <I2C_RequestMemoryWrite+0x46>
 8001662:	bf00      	nop
 8001664:	80002000 	.word	0x80002000

08001668 <I2C_RequestMemoryRead>:
{
 8001668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800166c:	b082      	sub	sp, #8
 800166e:	4604      	mov	r4, r0
 8001670:	4690      	mov	r8, r2
 8001672:	461d      	mov	r5, r3
 8001674:	9e08      	ldr	r6, [sp, #32]
 8001676:	9f09      	ldr	r7, [sp, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001678:	4b18      	ldr	r3, [pc, #96]	@ (80016dc <I2C_RequestMemoryRead+0x74>)
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	2300      	movs	r3, #0
 800167e:	b2ea      	uxtb	r2, r5
 8001680:	f7ff fe9e 	bl	80013c0 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001684:	463a      	mov	r2, r7
 8001686:	4631      	mov	r1, r6
 8001688:	4620      	mov	r0, r4
 800168a:	f7ff ff41 	bl	8001510 <I2C_WaitOnTXISFlagUntilTimeout>
 800168e:	b9f8      	cbnz	r0, 80016d0 <I2C_RequestMemoryRead+0x68>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001690:	2d01      	cmp	r5, #1
 8001692:	d10e      	bne.n	80016b2 <I2C_RequestMemoryRead+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001694:	6823      	ldr	r3, [r4, #0]
 8001696:	fa5f f288 	uxtb.w	r2, r8
 800169a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800169c:	9700      	str	r7, [sp, #0]
 800169e:	4633      	mov	r3, r6
 80016a0:	2200      	movs	r2, #0
 80016a2:	2140      	movs	r1, #64	@ 0x40
 80016a4:	4620      	mov	r0, r4
 80016a6:	f7ff ff63 	bl	8001570 <I2C_WaitOnFlagUntilTimeout>
 80016aa:	b9a8      	cbnz	r0, 80016d8 <I2C_RequestMemoryRead+0x70>
}
 80016ac:	b002      	add	sp, #8
 80016ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80016b2:	6823      	ldr	r3, [r4, #0]
 80016b4:	ea4f 2218 	mov.w	r2, r8, lsr #8
 80016b8:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80016ba:	463a      	mov	r2, r7
 80016bc:	4631      	mov	r1, r6
 80016be:	4620      	mov	r0, r4
 80016c0:	f7ff ff26 	bl	8001510 <I2C_WaitOnTXISFlagUntilTimeout>
 80016c4:	b930      	cbnz	r0, 80016d4 <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80016c6:	6823      	ldr	r3, [r4, #0]
 80016c8:	fa5f f288 	uxtb.w	r2, r8
 80016cc:	629a      	str	r2, [r3, #40]	@ 0x28
 80016ce:	e7e5      	b.n	800169c <I2C_RequestMemoryRead+0x34>
    return HAL_ERROR;
 80016d0:	2001      	movs	r0, #1
 80016d2:	e7eb      	b.n	80016ac <I2C_RequestMemoryRead+0x44>
      return HAL_ERROR;
 80016d4:	2001      	movs	r0, #1
 80016d6:	e7e9      	b.n	80016ac <I2C_RequestMemoryRead+0x44>
    return HAL_ERROR;
 80016d8:	2001      	movs	r0, #1
 80016da:	e7e7      	b.n	80016ac <I2C_RequestMemoryRead+0x44>
 80016dc:	80002000 	.word	0x80002000

080016e0 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80016e0:	b570      	push	{r4, r5, r6, lr}
 80016e2:	4604      	mov	r4, r0
 80016e4:	460d      	mov	r5, r1
 80016e6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016e8:	e004      	b.n	80016f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80016ea:	6823      	ldr	r3, [r4, #0]
 80016ec:	699b      	ldr	r3, [r3, #24]
 80016ee:	f013 0f20 	tst.w	r3, #32
 80016f2:	d012      	beq.n	800171a <I2C_WaitOnSTOPFlagUntilTimeout+0x3a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016f4:	6823      	ldr	r3, [r4, #0]
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	f013 0f20 	tst.w	r3, #32
 80016fc:	d11b      	bne.n	8001736 <I2C_WaitOnSTOPFlagUntilTimeout+0x56>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80016fe:	4632      	mov	r2, r6
 8001700:	4629      	mov	r1, r5
 8001702:	4620      	mov	r0, r4
 8001704:	f7ff fe7a 	bl	80013fc <I2C_IsErrorOccurred>
 8001708:	b9b8      	cbnz	r0, 800173a <I2C_WaitOnSTOPFlagUntilTimeout+0x5a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800170a:	f7ff fcbf 	bl	800108c <HAL_GetTick>
 800170e:	1b80      	subs	r0, r0, r6
 8001710:	42a8      	cmp	r0, r5
 8001712:	d8ea      	bhi.n	80016ea <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
 8001714:	2d00      	cmp	r5, #0
 8001716:	d1ed      	bne.n	80016f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
 8001718:	e7e7      	b.n	80016ea <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800171a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800171c:	f043 0320 	orr.w	r3, r3, #32
 8001720:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001722:	2320      	movs	r3, #32
 8001724:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001728:	2300      	movs	r3, #0
 800172a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 800172e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return HAL_ERROR;
 8001732:	2001      	movs	r0, #1
 8001734:	e000      	b.n	8001738 <I2C_WaitOnSTOPFlagUntilTimeout+0x58>
  return HAL_OK;
 8001736:	2000      	movs	r0, #0
}
 8001738:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800173a:	2001      	movs	r0, #1
 800173c:	e7fc      	b.n	8001738 <I2C_WaitOnSTOPFlagUntilTimeout+0x58>

0800173e <HAL_I2C_Init>:
  if (hi2c == NULL)
 800173e:	2800      	cmp	r0, #0
 8001740:	d05f      	beq.n	8001802 <HAL_I2C_Init+0xc4>
{
 8001742:	b510      	push	{r4, lr}
 8001744:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001746:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800174a:	2b00      	cmp	r3, #0
 800174c:	d048      	beq.n	80017e0 <HAL_I2C_Init+0xa2>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800174e:	2324      	movs	r3, #36	@ 0x24
 8001750:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8001754:	6822      	ldr	r2, [r4, #0]
 8001756:	6813      	ldr	r3, [r2, #0]
 8001758:	f023 0301 	bic.w	r3, r3, #1
 800175c:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800175e:	6863      	ldr	r3, [r4, #4]
 8001760:	6822      	ldr	r2, [r4, #0]
 8001762:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8001766:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001768:	6822      	ldr	r2, [r4, #0]
 800176a:	6893      	ldr	r3, [r2, #8]
 800176c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001770:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001772:	68e3      	ldr	r3, [r4, #12]
 8001774:	2b01      	cmp	r3, #1
 8001776:	d038      	beq.n	80017ea <HAL_I2C_Init+0xac>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001778:	68a3      	ldr	r3, [r4, #8]
 800177a:	6822      	ldr	r2, [r4, #0]
 800177c:	f443 4304 	orr.w	r3, r3, #33792	@ 0x8400
 8001780:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001782:	68e3      	ldr	r3, [r4, #12]
 8001784:	2b02      	cmp	r3, #2
 8001786:	d036      	beq.n	80017f6 <HAL_I2C_Init+0xb8>
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001788:	6822      	ldr	r2, [r4, #0]
 800178a:	6853      	ldr	r3, [r2, #4]
 800178c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001790:	6053      	str	r3, [r2, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001792:	6822      	ldr	r2, [r4, #0]
 8001794:	6853      	ldr	r3, [r2, #4]
 8001796:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800179a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800179e:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80017a0:	6822      	ldr	r2, [r4, #0]
 80017a2:	68d3      	ldr	r3, [r2, #12]
 80017a4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80017a8:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80017aa:	6923      	ldr	r3, [r4, #16]
 80017ac:	6962      	ldr	r2, [r4, #20]
 80017ae:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80017b0:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80017b2:	6822      	ldr	r2, [r4, #0]
 80017b4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80017b8:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80017ba:	69e3      	ldr	r3, [r4, #28]
 80017bc:	6a21      	ldr	r1, [r4, #32]
 80017be:	6822      	ldr	r2, [r4, #0]
 80017c0:	430b      	orrs	r3, r1
 80017c2:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 80017c4:	6822      	ldr	r2, [r4, #0]
 80017c6:	6813      	ldr	r3, [r2, #0]
 80017c8:	f043 0301 	orr.w	r3, r3, #1
 80017cc:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017ce:	2000      	movs	r0, #0
 80017d0:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80017d2:	2320      	movs	r3, #32
 80017d4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80017d8:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017da:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 80017de:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80017e0:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 80017e4:	f000 fa28 	bl	8001c38 <HAL_I2C_MspInit>
 80017e8:	e7b1      	b.n	800174e <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80017ea:	68a3      	ldr	r3, [r4, #8]
 80017ec:	6822      	ldr	r2, [r4, #0]
 80017ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80017f2:	6093      	str	r3, [r2, #8]
 80017f4:	e7c5      	b.n	8001782 <HAL_I2C_Init+0x44>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80017f6:	6822      	ldr	r2, [r4, #0]
 80017f8:	6853      	ldr	r3, [r2, #4]
 80017fa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80017fe:	6053      	str	r3, [r2, #4]
 8001800:	e7c7      	b.n	8001792 <HAL_I2C_Init+0x54>
    return HAL_ERROR;
 8001802:	2001      	movs	r0, #1
}
 8001804:	4770      	bx	lr

08001806 <HAL_I2C_Mem_Write>:
{
 8001806:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800180a:	b083      	sub	sp, #12
 800180c:	460e      	mov	r6, r1
 800180e:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 8001812:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001814:	f890 1041 	ldrb.w	r1, [r0, #65]	@ 0x41
 8001818:	2920      	cmp	r1, #32
 800181a:	f040 80bb 	bne.w	8001994 <HAL_I2C_Mem_Write+0x18e>
 800181e:	4604      	mov	r4, r0
 8001820:	4691      	mov	r9, r2
 8001822:	4698      	mov	r8, r3
    if ((pData == NULL) || (Size == 0U))
 8001824:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8001826:	b1cb      	cbz	r3, 800185c <HAL_I2C_Mem_Write+0x56>
 8001828:	f1ba 0f00 	cmp.w	sl, #0
 800182c:	d016      	beq.n	800185c <HAL_I2C_Mem_Write+0x56>
    __HAL_LOCK(hi2c);
 800182e:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8001832:	2b01      	cmp	r3, #1
 8001834:	f000 80b2 	beq.w	800199c <HAL_I2C_Mem_Write+0x196>
 8001838:	f04f 0b01 	mov.w	fp, #1
 800183c:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8001840:	f7ff fc24 	bl	800108c <HAL_GetTick>
 8001844:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001846:	9000      	str	r0, [sp, #0]
 8001848:	2319      	movs	r3, #25
 800184a:	465a      	mov	r2, fp
 800184c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001850:	4620      	mov	r0, r4
 8001852:	f7ff fe8d 	bl	8001570 <I2C_WaitOnFlagUntilTimeout>
 8001856:	b130      	cbz	r0, 8001866 <HAL_I2C_Mem_Write+0x60>
      return HAL_ERROR;
 8001858:	2001      	movs	r0, #1
 800185a:	e09c      	b.n	8001996 <HAL_I2C_Mem_Write+0x190>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800185c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001860:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8001862:	2001      	movs	r0, #1
 8001864:	e097      	b.n	8001996 <HAL_I2C_Mem_Write+0x190>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001866:	2321      	movs	r3, #33	@ 0x21
 8001868:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800186c:	2340      	movs	r3, #64	@ 0x40
 800186e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001872:	2300      	movs	r3, #0
 8001874:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 8001876:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8001878:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 800187a:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800187e:	6363      	str	r3, [r4, #52]	@ 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001880:	9701      	str	r7, [sp, #4]
 8001882:	9500      	str	r5, [sp, #0]
 8001884:	4643      	mov	r3, r8
 8001886:	464a      	mov	r2, r9
 8001888:	4631      	mov	r1, r6
 800188a:	4620      	mov	r0, r4
 800188c:	f7ff feae 	bl	80015ec <I2C_RequestMemoryWrite>
 8001890:	b970      	cbnz	r0, 80018b0 <HAL_I2C_Mem_Write+0xaa>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001892:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001894:	b29b      	uxth	r3, r3
 8001896:	2bff      	cmp	r3, #255	@ 0xff
 8001898:	d90f      	bls.n	80018ba <HAL_I2C_Mem_Write+0xb4>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800189a:	22ff      	movs	r2, #255	@ 0xff
 800189c:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800189e:	2300      	movs	r3, #0
 80018a0:	9300      	str	r3, [sp, #0]
 80018a2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80018a6:	4631      	mov	r1, r6
 80018a8:	4620      	mov	r0, r4
 80018aa:	f7ff fd89 	bl	80013c0 <I2C_TransferConfig>
 80018ae:	e021      	b.n	80018f4 <HAL_I2C_Mem_Write+0xee>
      __HAL_UNLOCK(hi2c);
 80018b0:	2300      	movs	r3, #0
 80018b2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 80018b6:	4658      	mov	r0, fp
 80018b8:	e06d      	b.n	8001996 <HAL_I2C_Mem_Write+0x190>
      hi2c->XferSize = hi2c->XferCount;
 80018ba:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80018bc:	b292      	uxth	r2, r2
 80018be:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80018c0:	2300      	movs	r3, #0
 80018c2:	9300      	str	r3, [sp, #0]
 80018c4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80018c8:	b2d2      	uxtb	r2, r2
 80018ca:	4631      	mov	r1, r6
 80018cc:	4620      	mov	r0, r4
 80018ce:	f7ff fd77 	bl	80013c0 <I2C_TransferConfig>
 80018d2:	e00f      	b.n	80018f4 <HAL_I2C_Mem_Write+0xee>
          hi2c->XferSize = hi2c->XferCount;
 80018d4:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80018d6:	b292      	uxth	r2, r2
 80018d8:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80018da:	2300      	movs	r3, #0
 80018dc:	9300      	str	r3, [sp, #0]
 80018de:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80018e2:	b2d2      	uxtb	r2, r2
 80018e4:	4631      	mov	r1, r6
 80018e6:	4620      	mov	r0, r4
 80018e8:	f7ff fd6a 	bl	80013c0 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 80018ec:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d033      	beq.n	800195c <HAL_I2C_Mem_Write+0x156>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018f4:	463a      	mov	r2, r7
 80018f6:	4629      	mov	r1, r5
 80018f8:	4620      	mov	r0, r4
 80018fa:	f7ff fe09 	bl	8001510 <I2C_WaitOnTXISFlagUntilTimeout>
 80018fe:	2800      	cmp	r0, #0
 8001900:	d14e      	bne.n	80019a0 <HAL_I2C_Mem_Write+0x19a>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001902:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001904:	6823      	ldr	r3, [r4, #0]
 8001906:	7812      	ldrb	r2, [r2, #0]
 8001908:	629a      	str	r2, [r3, #40]	@ 0x28
      hi2c->pBuffPtr++;
 800190a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800190c:	3301      	adds	r3, #1
 800190e:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8001910:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001912:	b29b      	uxth	r3, r3
 8001914:	3b01      	subs	r3, #1
 8001916:	b29b      	uxth	r3, r3
 8001918:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800191a:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800191c:	3b01      	subs	r3, #1
 800191e:	b29b      	uxth	r3, r3
 8001920:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001922:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8001924:	b292      	uxth	r2, r2
 8001926:	2a00      	cmp	r2, #0
 8001928:	d0e0      	beq.n	80018ec <HAL_I2C_Mem_Write+0xe6>
 800192a:	2b00      	cmp	r3, #0
 800192c:	d1de      	bne.n	80018ec <HAL_I2C_Mem_Write+0xe6>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800192e:	9700      	str	r7, [sp, #0]
 8001930:	462b      	mov	r3, r5
 8001932:	2200      	movs	r2, #0
 8001934:	2180      	movs	r1, #128	@ 0x80
 8001936:	4620      	mov	r0, r4
 8001938:	f7ff fe1a 	bl	8001570 <I2C_WaitOnFlagUntilTimeout>
 800193c:	bb90      	cbnz	r0, 80019a4 <HAL_I2C_Mem_Write+0x19e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800193e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001940:	b29b      	uxth	r3, r3
 8001942:	2bff      	cmp	r3, #255	@ 0xff
 8001944:	d9c6      	bls.n	80018d4 <HAL_I2C_Mem_Write+0xce>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001946:	22ff      	movs	r2, #255	@ 0xff
 8001948:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800194a:	2300      	movs	r3, #0
 800194c:	9300      	str	r3, [sp, #0]
 800194e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001952:	4631      	mov	r1, r6
 8001954:	4620      	mov	r0, r4
 8001956:	f7ff fd33 	bl	80013c0 <I2C_TransferConfig>
 800195a:	e7c7      	b.n	80018ec <HAL_I2C_Mem_Write+0xe6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800195c:	463a      	mov	r2, r7
 800195e:	4629      	mov	r1, r5
 8001960:	4620      	mov	r0, r4
 8001962:	f7ff febd 	bl	80016e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001966:	b9f8      	cbnz	r0, 80019a8 <HAL_I2C_Mem_Write+0x1a2>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001968:	6823      	ldr	r3, [r4, #0]
 800196a:	2220      	movs	r2, #32
 800196c:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800196e:	6821      	ldr	r1, [r4, #0]
 8001970:	684b      	ldr	r3, [r1, #4]
 8001972:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8001976:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 800197a:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 800197e:	f023 0301 	bic.w	r3, r3, #1
 8001982:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001984:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001988:	2300      	movs	r3, #0
 800198a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 800198e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    return HAL_OK;
 8001992:	e000      	b.n	8001996 <HAL_I2C_Mem_Write+0x190>
    return HAL_BUSY;
 8001994:	2002      	movs	r0, #2
}
 8001996:	b003      	add	sp, #12
 8001998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800199c:	2002      	movs	r0, #2
 800199e:	e7fa      	b.n	8001996 <HAL_I2C_Mem_Write+0x190>
        return HAL_ERROR;
 80019a0:	2001      	movs	r0, #1
 80019a2:	e7f8      	b.n	8001996 <HAL_I2C_Mem_Write+0x190>
          return HAL_ERROR;
 80019a4:	2001      	movs	r0, #1
 80019a6:	e7f6      	b.n	8001996 <HAL_I2C_Mem_Write+0x190>
      return HAL_ERROR;
 80019a8:	2001      	movs	r0, #1
 80019aa:	e7f4      	b.n	8001996 <HAL_I2C_Mem_Write+0x190>

080019ac <HAL_I2C_Mem_Read>:
{
 80019ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019b0:	b083      	sub	sp, #12
 80019b2:	460e      	mov	r6, r1
 80019b4:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 80019b8:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 80019ba:	f890 1041 	ldrb.w	r1, [r0, #65]	@ 0x41
 80019be:	2920      	cmp	r1, #32
 80019c0:	f040 80bc 	bne.w	8001b3c <HAL_I2C_Mem_Read+0x190>
 80019c4:	4604      	mov	r4, r0
 80019c6:	4691      	mov	r9, r2
 80019c8:	4698      	mov	r8, r3
    if ((pData == NULL) || (Size == 0U))
 80019ca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80019cc:	b1cb      	cbz	r3, 8001a02 <HAL_I2C_Mem_Read+0x56>
 80019ce:	f1ba 0f00 	cmp.w	sl, #0
 80019d2:	d016      	beq.n	8001a02 <HAL_I2C_Mem_Read+0x56>
    __HAL_LOCK(hi2c);
 80019d4:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80019d8:	2b01      	cmp	r3, #1
 80019da:	f000 80b3 	beq.w	8001b44 <HAL_I2C_Mem_Read+0x198>
 80019de:	f04f 0b01 	mov.w	fp, #1
 80019e2:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 80019e6:	f7ff fb51 	bl	800108c <HAL_GetTick>
 80019ea:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80019ec:	9000      	str	r0, [sp, #0]
 80019ee:	2319      	movs	r3, #25
 80019f0:	465a      	mov	r2, fp
 80019f2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019f6:	4620      	mov	r0, r4
 80019f8:	f7ff fdba 	bl	8001570 <I2C_WaitOnFlagUntilTimeout>
 80019fc:	b130      	cbz	r0, 8001a0c <HAL_I2C_Mem_Read+0x60>
      return HAL_ERROR;
 80019fe:	2001      	movs	r0, #1
 8001a00:	e09d      	b.n	8001b3e <HAL_I2C_Mem_Read+0x192>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001a02:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a06:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8001a08:	2001      	movs	r0, #1
 8001a0a:	e098      	b.n	8001b3e <HAL_I2C_Mem_Read+0x192>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001a0c:	2322      	movs	r3, #34	@ 0x22
 8001a0e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a12:	2340      	movs	r3, #64	@ 0x40
 8001a14:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 8001a1c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8001a1e:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001a20:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001a24:	6363      	str	r3, [r4, #52]	@ 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001a26:	9701      	str	r7, [sp, #4]
 8001a28:	9500      	str	r5, [sp, #0]
 8001a2a:	4643      	mov	r3, r8
 8001a2c:	464a      	mov	r2, r9
 8001a2e:	4631      	mov	r1, r6
 8001a30:	4620      	mov	r0, r4
 8001a32:	f7ff fe19 	bl	8001668 <I2C_RequestMemoryRead>
 8001a36:	b970      	cbnz	r0, 8001a56 <HAL_I2C_Mem_Read+0xaa>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a38:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	2bff      	cmp	r3, #255	@ 0xff
 8001a3e:	d90f      	bls.n	8001a60 <HAL_I2C_Mem_Read+0xb4>
      hi2c->XferSize = 1U;
 8001a40:	2201      	movs	r2, #1
 8001a42:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a44:	4b43      	ldr	r3, [pc, #268]	@ (8001b54 <HAL_I2C_Mem_Read+0x1a8>)
 8001a46:	9300      	str	r3, [sp, #0]
 8001a48:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001a4c:	4631      	mov	r1, r6
 8001a4e:	4620      	mov	r0, r4
 8001a50:	f7ff fcb6 	bl	80013c0 <I2C_TransferConfig>
 8001a54:	e021      	b.n	8001a9a <HAL_I2C_Mem_Read+0xee>
      __HAL_UNLOCK(hi2c);
 8001a56:	2300      	movs	r3, #0
 8001a58:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8001a5c:	4658      	mov	r0, fp
 8001a5e:	e06e      	b.n	8001b3e <HAL_I2C_Mem_Read+0x192>
      hi2c->XferSize = hi2c->XferCount;
 8001a60:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8001a62:	b292      	uxth	r2, r2
 8001a64:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a66:	4b3b      	ldr	r3, [pc, #236]	@ (8001b54 <HAL_I2C_Mem_Read+0x1a8>)
 8001a68:	9300      	str	r3, [sp, #0]
 8001a6a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a6e:	b2d2      	uxtb	r2, r2
 8001a70:	4631      	mov	r1, r6
 8001a72:	4620      	mov	r0, r4
 8001a74:	f7ff fca4 	bl	80013c0 <I2C_TransferConfig>
 8001a78:	e00f      	b.n	8001a9a <HAL_I2C_Mem_Read+0xee>
          hi2c->XferSize = hi2c->XferCount;
 8001a7a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8001a7c:	b292      	uxth	r2, r2
 8001a7e:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a80:	2300      	movs	r3, #0
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a88:	b2d2      	uxtb	r2, r2
 8001a8a:	4631      	mov	r1, r6
 8001a8c:	4620      	mov	r0, r4
 8001a8e:	f7ff fc97 	bl	80013c0 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8001a92:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d034      	beq.n	8001b04 <HAL_I2C_Mem_Read+0x158>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001a9a:	9700      	str	r7, [sp, #0]
 8001a9c:	462b      	mov	r3, r5
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	2104      	movs	r1, #4
 8001aa2:	4620      	mov	r0, r4
 8001aa4:	f7ff fd64 	bl	8001570 <I2C_WaitOnFlagUntilTimeout>
 8001aa8:	2800      	cmp	r0, #0
 8001aaa:	d14d      	bne.n	8001b48 <HAL_I2C_Mem_Read+0x19c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001aac:	6823      	ldr	r3, [r4, #0]
 8001aae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ab0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001ab2:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8001ab4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8001aba:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 8001abc:	3a01      	subs	r2, #1
 8001abe:	b292      	uxth	r2, r2
 8001ac0:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8001ac2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001acc:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d0de      	beq.n	8001a92 <HAL_I2C_Mem_Read+0xe6>
 8001ad4:	2a00      	cmp	r2, #0
 8001ad6:	d1dc      	bne.n	8001a92 <HAL_I2C_Mem_Read+0xe6>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ad8:	9700      	str	r7, [sp, #0]
 8001ada:	462b      	mov	r3, r5
 8001adc:	2180      	movs	r1, #128	@ 0x80
 8001ade:	4620      	mov	r0, r4
 8001ae0:	f7ff fd46 	bl	8001570 <I2C_WaitOnFlagUntilTimeout>
 8001ae4:	bb90      	cbnz	r0, 8001b4c <HAL_I2C_Mem_Read+0x1a0>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ae6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	2bff      	cmp	r3, #255	@ 0xff
 8001aec:	d9c5      	bls.n	8001a7a <HAL_I2C_Mem_Read+0xce>
          hi2c->XferSize = 1U;
 8001aee:	2201      	movs	r2, #1
 8001af0:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001af2:	2300      	movs	r3, #0
 8001af4:	9300      	str	r3, [sp, #0]
 8001af6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001afa:	4631      	mov	r1, r6
 8001afc:	4620      	mov	r0, r4
 8001afe:	f7ff fc5f 	bl	80013c0 <I2C_TransferConfig>
 8001b02:	e7c6      	b.n	8001a92 <HAL_I2C_Mem_Read+0xe6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b04:	463a      	mov	r2, r7
 8001b06:	4629      	mov	r1, r5
 8001b08:	4620      	mov	r0, r4
 8001b0a:	f7ff fde9 	bl	80016e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001b0e:	b9f8      	cbnz	r0, 8001b50 <HAL_I2C_Mem_Read+0x1a4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b10:	6823      	ldr	r3, [r4, #0]
 8001b12:	2220      	movs	r2, #32
 8001b14:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001b16:	6821      	ldr	r1, [r4, #0]
 8001b18:	684b      	ldr	r3, [r1, #4]
 8001b1a:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8001b1e:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 8001b22:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8001b26:	f023 0301 	bic.w	r3, r3, #1
 8001b2a:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001b2c:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001b30:	2300      	movs	r3, #0
 8001b32:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 8001b36:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    return HAL_OK;
 8001b3a:	e000      	b.n	8001b3e <HAL_I2C_Mem_Read+0x192>
    return HAL_BUSY;
 8001b3c:	2002      	movs	r0, #2
}
 8001b3e:	b003      	add	sp, #12
 8001b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8001b44:	2002      	movs	r0, #2
 8001b46:	e7fa      	b.n	8001b3e <HAL_I2C_Mem_Read+0x192>
        return HAL_ERROR;
 8001b48:	2001      	movs	r0, #1
 8001b4a:	e7f8      	b.n	8001b3e <HAL_I2C_Mem_Read+0x192>
          return HAL_ERROR;
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	e7f6      	b.n	8001b3e <HAL_I2C_Mem_Read+0x192>
      return HAL_ERROR;
 8001b50:	2001      	movs	r0, #1
 8001b52:	e7f4      	b.n	8001b3e <HAL_I2C_Mem_Read+0x192>
 8001b54:	80002400 	.word	0x80002400

08001b58 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001b58:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b5a:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8001b5e:	2a20      	cmp	r2, #32
 8001b60:	d123      	bne.n	8001baa <HAL_I2CEx_ConfigAnalogFilter+0x52>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b62:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8001b66:	2a01      	cmp	r2, #1
 8001b68:	d021      	beq.n	8001bae <HAL_I2CEx_ConfigAnalogFilter+0x56>
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b70:	2224      	movs	r2, #36	@ 0x24
 8001b72:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b76:	6800      	ldr	r0, [r0, #0]
 8001b78:	6802      	ldr	r2, [r0, #0]
 8001b7a:	f022 0201 	bic.w	r2, r2, #1
 8001b7e:	6002      	str	r2, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001b80:	6818      	ldr	r0, [r3, #0]
 8001b82:	6802      	ldr	r2, [r0, #0]
 8001b84:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001b88:	6002      	str	r2, [r0, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001b8a:	6818      	ldr	r0, [r3, #0]
 8001b8c:	6802      	ldr	r2, [r0, #0]
 8001b8e:	430a      	orrs	r2, r1
 8001b90:	6002      	str	r2, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b92:	6819      	ldr	r1, [r3, #0]
 8001b94:	680a      	ldr	r2, [r1, #0]
 8001b96:	f042 0201 	orr.w	r2, r2, #1
 8001b9a:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b9c:	2220      	movs	r2, #32
 8001b9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ba2:	2000      	movs	r0, #0
 8001ba4:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40

    return HAL_OK;
 8001ba8:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8001baa:	2002      	movs	r0, #2
 8001bac:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8001bae:	2002      	movs	r0, #2
  }
}
 8001bb0:	4770      	bx	lr

08001bb2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001bb2:	4603      	mov	r3, r0

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bb4:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8001bb8:	2a20      	cmp	r2, #32
 8001bba:	d121      	bne.n	8001c00 <HAL_I2CEx_ConfigDigitalFilter+0x4e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bbc:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8001bc0:	2a01      	cmp	r2, #1
 8001bc2:	d01f      	beq.n	8001c04 <HAL_I2CEx_ConfigDigitalFilter+0x52>
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001bca:	2224      	movs	r2, #36	@ 0x24
 8001bcc:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001bd0:	6800      	ldr	r0, [r0, #0]
 8001bd2:	6802      	ldr	r2, [r0, #0]
 8001bd4:	f022 0201 	bic.w	r2, r2, #1
 8001bd8:	6002      	str	r2, [r0, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001bda:	6818      	ldr	r0, [r3, #0]
 8001bdc:	6802      	ldr	r2, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001bde:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001be2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001be6:	6002      	str	r2, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001be8:	6819      	ldr	r1, [r3, #0]
 8001bea:	680a      	ldr	r2, [r1, #0]
 8001bec:	f042 0201 	orr.w	r2, r2, #1
 8001bf0:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bf2:	2220      	movs	r2, #32
 8001bf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bf8:	2000      	movs	r0, #0
 8001bfa:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40

    return HAL_OK;
 8001bfe:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8001c00:	2002      	movs	r0, #2
 8001c02:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8001c04:	2002      	movs	r0, #2
  }
}
 8001c06:	4770      	bx	lr

08001c08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c08:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c34 <HAL_MspInit+0x2c>)
 8001c0c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001c0e:	f042 0201 	orr.w	r2, r2, #1
 8001c12:	661a      	str	r2, [r3, #96]	@ 0x60
 8001c14:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001c16:	f002 0201 	and.w	r2, r2, #1
 8001c1a:	9200      	str	r2, [sp, #0]
 8001c1c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c1e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001c20:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001c24:	659a      	str	r2, [r3, #88]	@ 0x58
 8001c26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c2c:	9301      	str	r3, [sp, #4]
 8001c2e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c30:	b002      	add	sp, #8
 8001c32:	4770      	bx	lr
 8001c34:	40021000 	.word	0x40021000

08001c38 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c38:	b510      	push	{r4, lr}
 8001c3a:	b0aa      	sub	sp, #168	@ 0xa8
 8001c3c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c3e:	2100      	movs	r1, #0
 8001c40:	9125      	str	r1, [sp, #148]	@ 0x94
 8001c42:	9126      	str	r1, [sp, #152]	@ 0x98
 8001c44:	9127      	str	r1, [sp, #156]	@ 0x9c
 8001c46:	9128      	str	r1, [sp, #160]	@ 0xa0
 8001c48:	9129      	str	r1, [sp, #164]	@ 0xa4
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c4a:	2288      	movs	r2, #136	@ 0x88
 8001c4c:	a803      	add	r0, sp, #12
 8001c4e:	f001 fd49 	bl	80036e4 <memset>
  if(hi2c->Instance==I2C1)
 8001c52:	6822      	ldr	r2, [r4, #0]
 8001c54:	4b18      	ldr	r3, [pc, #96]	@ (8001cb8 <HAL_I2C_MspInit+0x80>)
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d001      	beq.n	8001c5e <HAL_I2C_MspInit+0x26>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001c5a:	b02a      	add	sp, #168	@ 0xa8
 8001c5c:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001c5e:	2340      	movs	r3, #64	@ 0x40
 8001c60:	9303      	str	r3, [sp, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c62:	a803      	add	r0, sp, #12
 8001c64:	f000 feb8 	bl	80029d8 <HAL_RCCEx_PeriphCLKConfig>
 8001c68:	bb10      	cbnz	r0, 8001cb0 <HAL_I2C_MspInit+0x78>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c6a:	4c14      	ldr	r4, [pc, #80]	@ (8001cbc <HAL_I2C_MspInit+0x84>)
 8001c6c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001c6e:	f043 0302 	orr.w	r3, r3, #2
 8001c72:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8001c74:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	9301      	str	r3, [sp, #4]
 8001c7c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c7e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001c82:	9325      	str	r3, [sp, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c84:	2312      	movs	r3, #18
 8001c86:	9326      	str	r3, [sp, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	9327      	str	r3, [sp, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	9328      	str	r3, [sp, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c90:	2304      	movs	r3, #4
 8001c92:	9329      	str	r3, [sp, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c94:	a925      	add	r1, sp, #148	@ 0x94
 8001c96:	480a      	ldr	r0, [pc, #40]	@ (8001cc0 <HAL_I2C_MspInit+0x88>)
 8001c98:	f7ff fa7c 	bl	8001194 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c9c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001c9e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001ca2:	65a3      	str	r3, [r4, #88]	@ 0x58
 8001ca4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001ca6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001caa:	9302      	str	r3, [sp, #8]
 8001cac:	9b02      	ldr	r3, [sp, #8]
}
 8001cae:	e7d4      	b.n	8001c5a <HAL_I2C_MspInit+0x22>
      Error_Handler();
 8001cb0:	f7ff f886 	bl	8000dc0 <Error_Handler>
 8001cb4:	e7d9      	b.n	8001c6a <HAL_I2C_MspInit+0x32>
 8001cb6:	bf00      	nop
 8001cb8:	40005400 	.word	0x40005400
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	48000400 	.word	0x48000400

08001cc4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cc4:	b510      	push	{r4, lr}
 8001cc6:	b0aa      	sub	sp, #168	@ 0xa8
 8001cc8:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cca:	2100      	movs	r1, #0
 8001ccc:	9125      	str	r1, [sp, #148]	@ 0x94
 8001cce:	9126      	str	r1, [sp, #152]	@ 0x98
 8001cd0:	9127      	str	r1, [sp, #156]	@ 0x9c
 8001cd2:	9128      	str	r1, [sp, #160]	@ 0xa0
 8001cd4:	9129      	str	r1, [sp, #164]	@ 0xa4
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cd6:	2288      	movs	r2, #136	@ 0x88
 8001cd8:	a803      	add	r0, sp, #12
 8001cda:	f001 fd03 	bl	80036e4 <memset>
  if(huart->Instance==USART2)
 8001cde:	6822      	ldr	r2, [r4, #0]
 8001ce0:	4b18      	ldr	r3, [pc, #96]	@ (8001d44 <HAL_UART_MspInit+0x80>)
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d001      	beq.n	8001cea <HAL_UART_MspInit+0x26>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001ce6:	b02a      	add	sp, #168	@ 0xa8
 8001ce8:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001cea:	2302      	movs	r3, #2
 8001cec:	9303      	str	r3, [sp, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cee:	a803      	add	r0, sp, #12
 8001cf0:	f000 fe72 	bl	80029d8 <HAL_RCCEx_PeriphCLKConfig>
 8001cf4:	bb10      	cbnz	r0, 8001d3c <HAL_UART_MspInit+0x78>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cf6:	4b14      	ldr	r3, [pc, #80]	@ (8001d48 <HAL_UART_MspInit+0x84>)
 8001cf8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001cfa:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8001cfe:	659a      	str	r2, [r3, #88]	@ 0x58
 8001d00:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001d02:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8001d06:	9201      	str	r2, [sp, #4]
 8001d08:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d0a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001d0c:	f042 0201 	orr.w	r2, r2, #1
 8001d10:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001d12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d14:	f003 0301 	and.w	r3, r3, #1
 8001d18:	9302      	str	r3, [sp, #8]
 8001d1a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d1c:	230c      	movs	r3, #12
 8001d1e:	9325      	str	r3, [sp, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d20:	2302      	movs	r3, #2
 8001d22:	9326      	str	r3, [sp, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d24:	2300      	movs	r3, #0
 8001d26:	9327      	str	r3, [sp, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	9328      	str	r3, [sp, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d2c:	2307      	movs	r3, #7
 8001d2e:	9329      	str	r3, [sp, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d30:	a925      	add	r1, sp, #148	@ 0x94
 8001d32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d36:	f7ff fa2d 	bl	8001194 <HAL_GPIO_Init>
}
 8001d3a:	e7d4      	b.n	8001ce6 <HAL_UART_MspInit+0x22>
      Error_Handler();
 8001d3c:	f7ff f840 	bl	8000dc0 <Error_Handler>
 8001d40:	e7d9      	b.n	8001cf6 <HAL_UART_MspInit+0x32>
 8001d42:	bf00      	nop
 8001d44:	40004400 	.word	0x40004400
 8001d48:	40021000 	.word	0x40021000

08001d4c <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001d4c:	4b02      	ldr	r3, [pc, #8]	@ (8001d58 <HAL_PWREx_GetVoltageRange+0xc>)
 8001d4e:	6818      	ldr	r0, [r3, #0]
#endif
}
 8001d50:	f400 60c0 	and.w	r0, r0, #1536	@ 0x600
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	40007000 	.word	0x40007000

08001d5c <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d5c:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8001d60:	d00f      	beq.n	8001d82 <HAL_PWREx_ControlVoltageScaling+0x26>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d62:	4b1f      	ldr	r3, [pc, #124]	@ (8001de0 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001d6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d6e:	d034      	beq.n	8001dda <HAL_PWREx_ControlVoltageScaling+0x7e>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d70:	4a1b      	ldr	r2, [pc, #108]	@ (8001de0 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8001d72:	6813      	ldr	r3, [r2, #0]
 8001d74:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001d78:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d7c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001d7e:	2000      	movs	r0, #0
 8001d80:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d82:	4b17      	ldr	r3, [pc, #92]	@ (8001de0 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001d8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d8e:	d020      	beq.n	8001dd2 <HAL_PWREx_ControlVoltageScaling+0x76>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d90:	4a13      	ldr	r2, [pc, #76]	@ (8001de0 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8001d92:	6813      	ldr	r3, [r2, #0]
 8001d94:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001d98:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d9c:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d9e:	4b11      	ldr	r3, [pc, #68]	@ (8001de4 <HAL_PWREx_ControlVoltageScaling+0x88>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2232      	movs	r2, #50	@ 0x32
 8001da4:	fb02 f303 	mul.w	r3, r2, r3
 8001da8:	4a0f      	ldr	r2, [pc, #60]	@ (8001de8 <HAL_PWREx_ControlVoltageScaling+0x8c>)
 8001daa:	fba2 2303 	umull	r2, r3, r2, r3
 8001dae:	0c9b      	lsrs	r3, r3, #18
 8001db0:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001db2:	e000      	b.n	8001db6 <HAL_PWREx_ControlVoltageScaling+0x5a>
        wait_loop_index--;
 8001db4:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001db6:	4a0a      	ldr	r2, [pc, #40]	@ (8001de0 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8001db8:	6952      	ldr	r2, [r2, #20]
 8001dba:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8001dbe:	d001      	beq.n	8001dc4 <HAL_PWREx_ControlVoltageScaling+0x68>
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d1f7      	bne.n	8001db4 <HAL_PWREx_ControlVoltageScaling+0x58>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001dc4:	4b06      	ldr	r3, [pc, #24]	@ (8001de0 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8001dc6:	695b      	ldr	r3, [r3, #20]
 8001dc8:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8001dcc:	d103      	bne.n	8001dd6 <HAL_PWREx_ControlVoltageScaling+0x7a>
  return HAL_OK;
 8001dce:	2000      	movs	r0, #0
 8001dd0:	4770      	bx	lr
 8001dd2:	2000      	movs	r0, #0
 8001dd4:	4770      	bx	lr
        return HAL_TIMEOUT;
 8001dd6:	2003      	movs	r0, #3
 8001dd8:	4770      	bx	lr
  return HAL_OK;
 8001dda:	2000      	movs	r0, #0
}
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	40007000 	.word	0x40007000
 8001de4:	2000000c 	.word	0x2000000c
 8001de8:	431bde83 	.word	0x431bde83

08001dec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001dec:	b530      	push	{r4, r5, lr}
 8001dee:	b083      	sub	sp, #12
 8001df0:	4604      	mov	r4, r0
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001df2:	4b20      	ldr	r3, [pc, #128]	@ (8001e74 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8001df4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001df6:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8001dfa:	d00b      	beq.n	8001e14 <RCC_SetFlashLatencyFromMSIRange+0x28>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001dfc:	f7ff ffa6 	bl	8001d4c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e00:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8001e04:	d017      	beq.n	8001e36 <RCC_SetFlashLatencyFromMSIRange+0x4a>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e06:	2c80      	cmp	r4, #128	@ 0x80
 8001e08:	d81f      	bhi.n	8001e4a <RCC_SetFlashLatencyFromMSIRange+0x5e>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001e0a:	d02d      	beq.n	8001e68 <RCC_SetFlashLatencyFromMSIRange+0x7c>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e0c:	2c70      	cmp	r4, #112	@ 0x70
 8001e0e:	d02d      	beq.n	8001e6c <RCC_SetFlashLatencyFromMSIRange+0x80>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e10:	2100      	movs	r1, #0
 8001e12:	e01b      	b.n	8001e4c <RCC_SetFlashLatencyFromMSIRange+0x60>
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e14:	4d17      	ldr	r5, [pc, #92]	@ (8001e74 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8001e16:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8001e18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e1c:	65ab      	str	r3, [r5, #88]	@ 0x58
 8001e1e:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8001e20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e24:	9301      	str	r3, [sp, #4]
 8001e26:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8001e28:	f7ff ff90 	bl	8001d4c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e2c:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8001e2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e32:	65ab      	str	r3, [r5, #88]	@ 0x58
 8001e34:	e7e4      	b.n	8001e00 <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 8001e36:	2c80      	cmp	r4, #128	@ 0x80
 8001e38:	d903      	bls.n	8001e42 <RCC_SetFlashLatencyFromMSIRange+0x56>
      if(msirange > RCC_MSIRANGE_10)
 8001e3a:	2ca0      	cmp	r4, #160	@ 0xa0
 8001e3c:	d903      	bls.n	8001e46 <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e3e:	2102      	movs	r1, #2
 8001e40:	e004      	b.n	8001e4c <RCC_SetFlashLatencyFromMSIRange+0x60>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e42:	2100      	movs	r1, #0
 8001e44:	e002      	b.n	8001e4c <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e46:	2101      	movs	r1, #1
 8001e48:	e000      	b.n	8001e4c <RCC_SetFlashLatencyFromMSIRange+0x60>
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e4a:	2103      	movs	r1, #3
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e4c:	4a0a      	ldr	r2, [pc, #40]	@ (8001e78 <RCC_SetFlashLatencyFromMSIRange+0x8c>)
 8001e4e:	6813      	ldr	r3, [r2, #0]
 8001e50:	f023 0307 	bic.w	r3, r3, #7
 8001e54:	430b      	orrs	r3, r1
 8001e56:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e58:	6813      	ldr	r3, [r2, #0]
 8001e5a:	f003 0307 	and.w	r3, r3, #7
 8001e5e:	428b      	cmp	r3, r1
 8001e60:	d106      	bne.n	8001e70 <RCC_SetFlashLatencyFromMSIRange+0x84>
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8001e62:	2000      	movs	r0, #0
}
 8001e64:	b003      	add	sp, #12
 8001e66:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e68:	2102      	movs	r1, #2
 8001e6a:	e7ef      	b.n	8001e4c <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e6c:	2101      	movs	r1, #1
 8001e6e:	e7ed      	b.n	8001e4c <RCC_SetFlashLatencyFromMSIRange+0x60>
    return HAL_ERROR;
 8001e70:	2001      	movs	r0, #1
 8001e72:	e7f7      	b.n	8001e64 <RCC_SetFlashLatencyFromMSIRange+0x78>
 8001e74:	40021000 	.word	0x40021000
 8001e78:	40022000 	.word	0x40022000

08001e7c <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e7c:	4a25      	ldr	r2, [pc, #148]	@ (8001f14 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e7e:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e80:	68d2      	ldr	r2, [r2, #12]
 8001e82:	f002 0203 	and.w	r2, r2, #3
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e86:	f013 030c 	ands.w	r3, r3, #12
 8001e8a:	d009      	beq.n	8001ea0 <HAL_RCC_GetSysClockFreq+0x24>
 8001e8c:	2b0c      	cmp	r3, #12
 8001e8e:	d005      	beq.n	8001e9c <HAL_RCC_GetSysClockFreq+0x20>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e90:	2b04      	cmp	r3, #4
 8001e92:	d03b      	beq.n	8001f0c <HAL_RCC_GetSysClockFreq+0x90>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e94:	2b08      	cmp	r3, #8
 8001e96:	d03b      	beq.n	8001f10 <HAL_RCC_GetSysClockFreq+0x94>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001e98:	2000      	movs	r0, #0
 8001e9a:	e00f      	b.n	8001ebc <HAL_RCC_GetSysClockFreq+0x40>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e9c:	2a01      	cmp	r2, #1
 8001e9e:	d1f7      	bne.n	8001e90 <HAL_RCC_GetSysClockFreq+0x14>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ea0:	4a1c      	ldr	r2, [pc, #112]	@ (8001f14 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ea2:	6812      	ldr	r2, [r2, #0]
 8001ea4:	f012 0f08 	tst.w	r2, #8
 8001ea8:	d10c      	bne.n	8001ec4 <HAL_RCC_GetSysClockFreq+0x48>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001eaa:	4a1a      	ldr	r2, [pc, #104]	@ (8001f14 <HAL_RCC_GetSysClockFreq+0x98>)
 8001eac:	f8d2 2094 	ldr.w	r2, [r2, #148]	@ 0x94
 8001eb0:	f3c2 2203 	ubfx	r2, r2, #8, #4
    msirange = MSIRangeTable[msirange];
 8001eb4:	4918      	ldr	r1, [pc, #96]	@ (8001f18 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001eb6:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001eba:	b113      	cbz	r3, 8001ec2 <HAL_RCC_GetSysClockFreq+0x46>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ebc:	2b0c      	cmp	r3, #12
 8001ebe:	d006      	beq.n	8001ece <HAL_RCC_GetSysClockFreq+0x52>
 8001ec0:	2000      	movs	r0, #0
}
 8001ec2:	4770      	bx	lr
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ec4:	4a13      	ldr	r2, [pc, #76]	@ (8001f14 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ec6:	6812      	ldr	r2, [r2, #0]
 8001ec8:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8001ecc:	e7f2      	b.n	8001eb4 <HAL_RCC_GetSysClockFreq+0x38>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ece:	4b11      	ldr	r3, [pc, #68]	@ (8001f14 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d016      	beq.n	8001f08 <HAL_RCC_GetSysClockFreq+0x8c>
 8001eda:	2b03      	cmp	r3, #3
 8001edc:	d100      	bne.n	8001ee0 <HAL_RCC_GetSysClockFreq+0x64>
      pllvco = HSE_VALUE;
 8001ede:	480f      	ldr	r0, [pc, #60]	@ (8001f1c <HAL_RCC_GetSysClockFreq+0xa0>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ee0:	490c      	ldr	r1, [pc, #48]	@ (8001f14 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ee2:	68ca      	ldr	r2, [r1, #12]
 8001ee4:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8001ee8:	3201      	adds	r2, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001eea:	68cb      	ldr	r3, [r1, #12]
 8001eec:	f3c3 2306 	ubfx	r3, r3, #8, #7
 8001ef0:	fb00 f303 	mul.w	r3, r0, r3
 8001ef4:	fbb3 f3f2 	udiv	r3, r3, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ef8:	68c8      	ldr	r0, [r1, #12]
 8001efa:	f3c0 6041 	ubfx	r0, r0, #25, #2
 8001efe:	3001      	adds	r0, #1
 8001f00:	0040      	lsls	r0, r0, #1
    sysclockfreq = pllvco / pllr;
 8001f02:	fbb3 f0f0 	udiv	r0, r3, r0
 8001f06:	4770      	bx	lr
    switch (pllsource)
 8001f08:	4805      	ldr	r0, [pc, #20]	@ (8001f20 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f0a:	e7e9      	b.n	8001ee0 <HAL_RCC_GetSysClockFreq+0x64>
    sysclockfreq = HSI_VALUE;
 8001f0c:	4804      	ldr	r0, [pc, #16]	@ (8001f20 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f0e:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8001f10:	4802      	ldr	r0, [pc, #8]	@ (8001f1c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f12:	4770      	bx	lr
 8001f14:	40021000 	.word	0x40021000
 8001f18:	08004a24 	.word	0x08004a24
 8001f1c:	007a1200 	.word	0x007a1200
 8001f20:	00f42400 	.word	0x00f42400

08001f24 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8001f24:	2800      	cmp	r0, #0
 8001f26:	f000 82f1 	beq.w	800250c <HAL_RCC_OscConfig+0x5e8>
{
 8001f2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f2c:	b083      	sub	sp, #12
 8001f2e:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f30:	4b96      	ldr	r3, [pc, #600]	@ (800218c <HAL_RCC_OscConfig+0x268>)
 8001f32:	689d      	ldr	r5, [r3, #8]
 8001f34:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f38:	68de      	ldr	r6, [r3, #12]
 8001f3a:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f3e:	6803      	ldr	r3, [r0, #0]
 8001f40:	f013 0f10 	tst.w	r3, #16
 8001f44:	d05a      	beq.n	8001ffc <HAL_RCC_OscConfig+0xd8>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f46:	b1e5      	cbz	r5, 8001f82 <HAL_RCC_OscConfig+0x5e>
 8001f48:	2d0c      	cmp	r5, #12
 8001f4a:	d018      	beq.n	8001f7e <HAL_RCC_OscConfig+0x5a>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f4c:	69a3      	ldr	r3, [r4, #24]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	f000 80bb 	beq.w	80020ca <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_MSI_ENABLE();
 8001f54:	4a8d      	ldr	r2, [pc, #564]	@ (800218c <HAL_RCC_OscConfig+0x268>)
 8001f56:	6813      	ldr	r3, [r2, #0]
 8001f58:	f043 0301 	orr.w	r3, r3, #1
 8001f5c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001f5e:	f7ff f895 	bl	800108c <HAL_GetTick>
 8001f62:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f64:	4b89      	ldr	r3, [pc, #548]	@ (800218c <HAL_RCC_OscConfig+0x268>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f013 0f02 	tst.w	r3, #2
 8001f6c:	f040 809a 	bne.w	80020a4 <HAL_RCC_OscConfig+0x180>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f70:	f7ff f88c 	bl	800108c <HAL_GetTick>
 8001f74:	1bc0      	subs	r0, r0, r7
 8001f76:	2802      	cmp	r0, #2
 8001f78:	d9f4      	bls.n	8001f64 <HAL_RCC_OscConfig+0x40>
            return HAL_TIMEOUT;
 8001f7a:	2003      	movs	r0, #3
 8001f7c:	e2d1      	b.n	8002522 <HAL_RCC_OscConfig+0x5fe>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f7e:	2e01      	cmp	r6, #1
 8001f80:	d1e4      	bne.n	8001f4c <HAL_RCC_OscConfig+0x28>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f82:	4b82      	ldr	r3, [pc, #520]	@ (800218c <HAL_RCC_OscConfig+0x268>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f013 0f02 	tst.w	r3, #2
 8001f8a:	d003      	beq.n	8001f94 <HAL_RCC_OscConfig+0x70>
 8001f8c:	69a3      	ldr	r3, [r4, #24]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f000 82be 	beq.w	8002510 <HAL_RCC_OscConfig+0x5ec>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f94:	6a20      	ldr	r0, [r4, #32]
 8001f96:	4b7d      	ldr	r3, [pc, #500]	@ (800218c <HAL_RCC_OscConfig+0x268>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f013 0f08 	tst.w	r3, #8
 8001f9e:	d05b      	beq.n	8002058 <HAL_RCC_OscConfig+0x134>
 8001fa0:	4b7a      	ldr	r3, [pc, #488]	@ (800218c <HAL_RCC_OscConfig+0x268>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001fa8:	4298      	cmp	r0, r3
 8001faa:	d85c      	bhi.n	8002066 <HAL_RCC_OscConfig+0x142>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fac:	4b77      	ldr	r3, [pc, #476]	@ (800218c <HAL_RCC_OscConfig+0x268>)
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	f042 0208 	orr.w	r2, r2, #8
 8001fb4:	601a      	str	r2, [r3, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8001fbc:	6a21      	ldr	r1, [r4, #32]
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fc2:	685a      	ldr	r2, [r3, #4]
 8001fc4:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8001fc8:	69e1      	ldr	r1, [r4, #28]
 8001fca:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001fce:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fd0:	2d00      	cmp	r5, #0
 8001fd2:	d060      	beq.n	8002096 <HAL_RCC_OscConfig+0x172>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fd4:	f7ff ff52 	bl	8001e7c <HAL_RCC_GetSysClockFreq>
 8001fd8:	4b6c      	ldr	r3, [pc, #432]	@ (800218c <HAL_RCC_OscConfig+0x268>)
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001fe0:	4a6b      	ldr	r2, [pc, #428]	@ (8002190 <HAL_RCC_OscConfig+0x26c>)
 8001fe2:	5cd3      	ldrb	r3, [r2, r3]
 8001fe4:	f003 031f 	and.w	r3, r3, #31
 8001fe8:	40d8      	lsrs	r0, r3
 8001fea:	4b6a      	ldr	r3, [pc, #424]	@ (8002194 <HAL_RCC_OscConfig+0x270>)
 8001fec:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8001fee:	4b6a      	ldr	r3, [pc, #424]	@ (8002198 <HAL_RCC_OscConfig+0x274>)
 8001ff0:	6818      	ldr	r0, [r3, #0]
 8001ff2:	f7ff f801 	bl	8000ff8 <HAL_InitTick>
        if(status != HAL_OK)
 8001ff6:	2800      	cmp	r0, #0
 8001ff8:	f040 8293 	bne.w	8002522 <HAL_RCC_OscConfig+0x5fe>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ffc:	6823      	ldr	r3, [r4, #0]
 8001ffe:	f013 0f01 	tst.w	r3, #1
 8002002:	f000 8081 	beq.w	8002108 <HAL_RCC_OscConfig+0x1e4>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002006:	2d08      	cmp	r5, #8
 8002008:	d075      	beq.n	80020f6 <HAL_RCC_OscConfig+0x1d2>
 800200a:	2d0c      	cmp	r5, #12
 800200c:	d071      	beq.n	80020f2 <HAL_RCC_OscConfig+0x1ce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800200e:	6863      	ldr	r3, [r4, #4]
 8002010:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002014:	f000 8097 	beq.w	8002146 <HAL_RCC_OscConfig+0x222>
 8002018:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800201c:	f000 8099 	beq.w	8002152 <HAL_RCC_OscConfig+0x22e>
 8002020:	4b5a      	ldr	r3, [pc, #360]	@ (800218c <HAL_RCC_OscConfig+0x268>)
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002030:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002032:	6863      	ldr	r3, [r4, #4]
 8002034:	2b00      	cmp	r3, #0
 8002036:	f000 8099 	beq.w	800216c <HAL_RCC_OscConfig+0x248>
        tickstart = HAL_GetTick();
 800203a:	f7ff f827 	bl	800108c <HAL_GetTick>
 800203e:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002040:	4b52      	ldr	r3, [pc, #328]	@ (800218c <HAL_RCC_OscConfig+0x268>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002048:	d15e      	bne.n	8002108 <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800204a:	f7ff f81f 	bl	800108c <HAL_GetTick>
 800204e:	1bc0      	subs	r0, r0, r7
 8002050:	2864      	cmp	r0, #100	@ 0x64
 8002052:	d9f5      	bls.n	8002040 <HAL_RCC_OscConfig+0x11c>
            return HAL_TIMEOUT;
 8002054:	2003      	movs	r0, #3
 8002056:	e264      	b.n	8002522 <HAL_RCC_OscConfig+0x5fe>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002058:	4b4c      	ldr	r3, [pc, #304]	@ (800218c <HAL_RCC_OscConfig+0x268>)
 800205a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800205e:	091b      	lsrs	r3, r3, #4
 8002060:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002064:	e7a0      	b.n	8001fa8 <HAL_RCC_OscConfig+0x84>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002066:	f7ff fec1 	bl	8001dec <RCC_SetFlashLatencyFromMSIRange>
 800206a:	2800      	cmp	r0, #0
 800206c:	f040 8252 	bne.w	8002514 <HAL_RCC_OscConfig+0x5f0>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002070:	4b46      	ldr	r3, [pc, #280]	@ (800218c <HAL_RCC_OscConfig+0x268>)
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	f042 0208 	orr.w	r2, r2, #8
 8002078:	601a      	str	r2, [r3, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8002080:	6a21      	ldr	r1, [r4, #32]
 8002082:	430a      	orrs	r2, r1
 8002084:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002086:	685a      	ldr	r2, [r3, #4]
 8002088:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800208c:	69e1      	ldr	r1, [r4, #28]
 800208e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002092:	605a      	str	r2, [r3, #4]
 8002094:	e79e      	b.n	8001fd4 <HAL_RCC_OscConfig+0xb0>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002096:	6a20      	ldr	r0, [r4, #32]
 8002098:	f7ff fea8 	bl	8001dec <RCC_SetFlashLatencyFromMSIRange>
 800209c:	2800      	cmp	r0, #0
 800209e:	d099      	beq.n	8001fd4 <HAL_RCC_OscConfig+0xb0>
              return HAL_ERROR;
 80020a0:	2001      	movs	r0, #1
 80020a2:	e23e      	b.n	8002522 <HAL_RCC_OscConfig+0x5fe>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020a4:	4b39      	ldr	r3, [pc, #228]	@ (800218c <HAL_RCC_OscConfig+0x268>)
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	f042 0208 	orr.w	r2, r2, #8
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80020b4:	6a21      	ldr	r1, [r4, #32]
 80020b6:	430a      	orrs	r2, r1
 80020b8:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020ba:	685a      	ldr	r2, [r3, #4]
 80020bc:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 80020c0:	69e1      	ldr	r1, [r4, #28]
 80020c2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80020c6:	605a      	str	r2, [r3, #4]
 80020c8:	e798      	b.n	8001ffc <HAL_RCC_OscConfig+0xd8>
        __HAL_RCC_MSI_DISABLE();
 80020ca:	4a30      	ldr	r2, [pc, #192]	@ (800218c <HAL_RCC_OscConfig+0x268>)
 80020cc:	6813      	ldr	r3, [r2, #0]
 80020ce:	f023 0301 	bic.w	r3, r3, #1
 80020d2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80020d4:	f7fe ffda 	bl	800108c <HAL_GetTick>
 80020d8:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020da:	4b2c      	ldr	r3, [pc, #176]	@ (800218c <HAL_RCC_OscConfig+0x268>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f013 0f02 	tst.w	r3, #2
 80020e2:	d08b      	beq.n	8001ffc <HAL_RCC_OscConfig+0xd8>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020e4:	f7fe ffd2 	bl	800108c <HAL_GetTick>
 80020e8:	1bc0      	subs	r0, r0, r7
 80020ea:	2802      	cmp	r0, #2
 80020ec:	d9f5      	bls.n	80020da <HAL_RCC_OscConfig+0x1b6>
            return HAL_TIMEOUT;
 80020ee:	2003      	movs	r0, #3
 80020f0:	e217      	b.n	8002522 <HAL_RCC_OscConfig+0x5fe>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80020f2:	2e03      	cmp	r6, #3
 80020f4:	d18b      	bne.n	800200e <HAL_RCC_OscConfig+0xea>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020f6:	4b25      	ldr	r3, [pc, #148]	@ (800218c <HAL_RCC_OscConfig+0x268>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80020fe:	d003      	beq.n	8002108 <HAL_RCC_OscConfig+0x1e4>
 8002100:	6863      	ldr	r3, [r4, #4]
 8002102:	2b00      	cmp	r3, #0
 8002104:	f000 8208 	beq.w	8002518 <HAL_RCC_OscConfig+0x5f4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002108:	6823      	ldr	r3, [r4, #0]
 800210a:	f013 0f02 	tst.w	r3, #2
 800210e:	d058      	beq.n	80021c2 <HAL_RCC_OscConfig+0x29e>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002110:	2d04      	cmp	r5, #4
 8002112:	d045      	beq.n	80021a0 <HAL_RCC_OscConfig+0x27c>
 8002114:	2d0c      	cmp	r5, #12
 8002116:	d041      	beq.n	800219c <HAL_RCC_OscConfig+0x278>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002118:	68e3      	ldr	r3, [r4, #12]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d077      	beq.n	800220e <HAL_RCC_OscConfig+0x2ea>
        __HAL_RCC_HSI_ENABLE();
 800211e:	4a1b      	ldr	r2, [pc, #108]	@ (800218c <HAL_RCC_OscConfig+0x268>)
 8002120:	6813      	ldr	r3, [r2, #0]
 8002122:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002126:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002128:	f7fe ffb0 	bl	800108c <HAL_GetTick>
 800212c:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800212e:	4b17      	ldr	r3, [pc, #92]	@ (800218c <HAL_RCC_OscConfig+0x268>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8002136:	d161      	bne.n	80021fc <HAL_RCC_OscConfig+0x2d8>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002138:	f7fe ffa8 	bl	800108c <HAL_GetTick>
 800213c:	1b80      	subs	r0, r0, r6
 800213e:	2802      	cmp	r0, #2
 8002140:	d9f5      	bls.n	800212e <HAL_RCC_OscConfig+0x20a>
            return HAL_TIMEOUT;
 8002142:	2003      	movs	r0, #3
 8002144:	e1ed      	b.n	8002522 <HAL_RCC_OscConfig+0x5fe>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002146:	4a11      	ldr	r2, [pc, #68]	@ (800218c <HAL_RCC_OscConfig+0x268>)
 8002148:	6813      	ldr	r3, [r2, #0]
 800214a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800214e:	6013      	str	r3, [r2, #0]
 8002150:	e76f      	b.n	8002032 <HAL_RCC_OscConfig+0x10e>
 8002152:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002156:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002160:	601a      	str	r2, [r3, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	e762      	b.n	8002032 <HAL_RCC_OscConfig+0x10e>
        tickstart = HAL_GetTick();
 800216c:	f7fe ff8e 	bl	800108c <HAL_GetTick>
 8002170:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002172:	4b06      	ldr	r3, [pc, #24]	@ (800218c <HAL_RCC_OscConfig+0x268>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800217a:	d0c5      	beq.n	8002108 <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800217c:	f7fe ff86 	bl	800108c <HAL_GetTick>
 8002180:	1bc0      	subs	r0, r0, r7
 8002182:	2864      	cmp	r0, #100	@ 0x64
 8002184:	d9f5      	bls.n	8002172 <HAL_RCC_OscConfig+0x24e>
            return HAL_TIMEOUT;
 8002186:	2003      	movs	r0, #3
 8002188:	e1cb      	b.n	8002522 <HAL_RCC_OscConfig+0x5fe>
 800218a:	bf00      	nop
 800218c:	40021000 	.word	0x40021000
 8002190:	08004a5c 	.word	0x08004a5c
 8002194:	2000000c 	.word	0x2000000c
 8002198:	20000008 	.word	0x20000008
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800219c:	2e02      	cmp	r6, #2
 800219e:	d1bb      	bne.n	8002118 <HAL_RCC_OscConfig+0x1f4>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021a0:	4ba3      	ldr	r3, [pc, #652]	@ (8002430 <HAL_RCC_OscConfig+0x50c>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 80021a8:	d003      	beq.n	80021b2 <HAL_RCC_OscConfig+0x28e>
 80021aa:	68e3      	ldr	r3, [r4, #12]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	f000 81b5 	beq.w	800251c <HAL_RCC_OscConfig+0x5f8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021b2:	4a9f      	ldr	r2, [pc, #636]	@ (8002430 <HAL_RCC_OscConfig+0x50c>)
 80021b4:	6853      	ldr	r3, [r2, #4]
 80021b6:	f023 53f8 	bic.w	r3, r3, #520093696	@ 0x1f000000
 80021ba:	6921      	ldr	r1, [r4, #16]
 80021bc:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80021c0:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021c2:	6823      	ldr	r3, [r4, #0]
 80021c4:	f013 0f08 	tst.w	r3, #8
 80021c8:	d04c      	beq.n	8002264 <HAL_RCC_OscConfig+0x340>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021ca:	6963      	ldr	r3, [r4, #20]
 80021cc:	b39b      	cbz	r3, 8002236 <HAL_RCC_OscConfig+0x312>
      __HAL_RCC_LSI_ENABLE();
 80021ce:	4a98      	ldr	r2, [pc, #608]	@ (8002430 <HAL_RCC_OscConfig+0x50c>)
 80021d0:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 80021d4:	f043 0301 	orr.w	r3, r3, #1
 80021d8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      tickstart = HAL_GetTick();
 80021dc:	f7fe ff56 	bl	800108c <HAL_GetTick>
 80021e0:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021e2:	4b93      	ldr	r3, [pc, #588]	@ (8002430 <HAL_RCC_OscConfig+0x50c>)
 80021e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021e8:	f013 0f02 	tst.w	r3, #2
 80021ec:	d13a      	bne.n	8002264 <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021ee:	f7fe ff4d 	bl	800108c <HAL_GetTick>
 80021f2:	1b80      	subs	r0, r0, r6
 80021f4:	2802      	cmp	r0, #2
 80021f6:	d9f4      	bls.n	80021e2 <HAL_RCC_OscConfig+0x2be>
          return HAL_TIMEOUT;
 80021f8:	2003      	movs	r0, #3
 80021fa:	e192      	b.n	8002522 <HAL_RCC_OscConfig+0x5fe>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021fc:	4a8c      	ldr	r2, [pc, #560]	@ (8002430 <HAL_RCC_OscConfig+0x50c>)
 80021fe:	6853      	ldr	r3, [r2, #4]
 8002200:	f023 53f8 	bic.w	r3, r3, #520093696	@ 0x1f000000
 8002204:	6921      	ldr	r1, [r4, #16]
 8002206:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800220a:	6053      	str	r3, [r2, #4]
 800220c:	e7d9      	b.n	80021c2 <HAL_RCC_OscConfig+0x29e>
        __HAL_RCC_HSI_DISABLE();
 800220e:	4a88      	ldr	r2, [pc, #544]	@ (8002430 <HAL_RCC_OscConfig+0x50c>)
 8002210:	6813      	ldr	r3, [r2, #0]
 8002212:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002216:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002218:	f7fe ff38 	bl	800108c <HAL_GetTick>
 800221c:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800221e:	4b84      	ldr	r3, [pc, #528]	@ (8002430 <HAL_RCC_OscConfig+0x50c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8002226:	d0cc      	beq.n	80021c2 <HAL_RCC_OscConfig+0x29e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002228:	f7fe ff30 	bl	800108c <HAL_GetTick>
 800222c:	1b80      	subs	r0, r0, r6
 800222e:	2802      	cmp	r0, #2
 8002230:	d9f5      	bls.n	800221e <HAL_RCC_OscConfig+0x2fa>
            return HAL_TIMEOUT;
 8002232:	2003      	movs	r0, #3
 8002234:	e175      	b.n	8002522 <HAL_RCC_OscConfig+0x5fe>
      __HAL_RCC_LSI_DISABLE();
 8002236:	4a7e      	ldr	r2, [pc, #504]	@ (8002430 <HAL_RCC_OscConfig+0x50c>)
 8002238:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 800223c:	f023 0301 	bic.w	r3, r3, #1
 8002240:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8002244:	f7fe ff22 	bl	800108c <HAL_GetTick>
 8002248:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800224a:	4b79      	ldr	r3, [pc, #484]	@ (8002430 <HAL_RCC_OscConfig+0x50c>)
 800224c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002250:	f013 0f02 	tst.w	r3, #2
 8002254:	d006      	beq.n	8002264 <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002256:	f7fe ff19 	bl	800108c <HAL_GetTick>
 800225a:	1b80      	subs	r0, r0, r6
 800225c:	2802      	cmp	r0, #2
 800225e:	d9f4      	bls.n	800224a <HAL_RCC_OscConfig+0x326>
          return HAL_TIMEOUT;
 8002260:	2003      	movs	r0, #3
 8002262:	e15e      	b.n	8002522 <HAL_RCC_OscConfig+0x5fe>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002264:	6823      	ldr	r3, [r4, #0]
 8002266:	f013 0f04 	tst.w	r3, #4
 800226a:	d07a      	beq.n	8002362 <HAL_RCC_OscConfig+0x43e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800226c:	4b70      	ldr	r3, [pc, #448]	@ (8002430 <HAL_RCC_OscConfig+0x50c>)
 800226e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002270:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8002274:	d136      	bne.n	80022e4 <HAL_RCC_OscConfig+0x3c0>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002276:	4b6e      	ldr	r3, [pc, #440]	@ (8002430 <HAL_RCC_OscConfig+0x50c>)
 8002278:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800227a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800227e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002280:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002282:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002286:	9301      	str	r3, [sp, #4]
 8002288:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800228a:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800228c:	4b69      	ldr	r3, [pc, #420]	@ (8002434 <HAL_RCC_OscConfig+0x510>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002294:	d028      	beq.n	80022e8 <HAL_RCC_OscConfig+0x3c4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002296:	68a3      	ldr	r3, [r4, #8]
 8002298:	2b01      	cmp	r3, #1
 800229a:	d039      	beq.n	8002310 <HAL_RCC_OscConfig+0x3ec>
 800229c:	2b05      	cmp	r3, #5
 800229e:	d03f      	beq.n	8002320 <HAL_RCC_OscConfig+0x3fc>
 80022a0:	4b63      	ldr	r3, [pc, #396]	@ (8002430 <HAL_RCC_OscConfig+0x50c>)
 80022a2:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80022a6:	f022 0201 	bic.w	r2, r2, #1
 80022aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 80022ae:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80022b2:	f022 0204 	bic.w	r2, r2, #4
 80022b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022ba:	68a3      	ldr	r3, [r4, #8]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d03d      	beq.n	800233c <HAL_RCC_OscConfig+0x418>
      tickstart = HAL_GetTick();
 80022c0:	f7fe fee4 	bl	800108c <HAL_GetTick>
 80022c4:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022c6:	4b5a      	ldr	r3, [pc, #360]	@ (8002430 <HAL_RCC_OscConfig+0x50c>)
 80022c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022cc:	f013 0f02 	tst.w	r3, #2
 80022d0:	d146      	bne.n	8002360 <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022d2:	f7fe fedb 	bl	800108c <HAL_GetTick>
 80022d6:	1bc0      	subs	r0, r0, r7
 80022d8:	f241 3388 	movw	r3, #5000	@ 0x1388
 80022dc:	4298      	cmp	r0, r3
 80022de:	d9f2      	bls.n	80022c6 <HAL_RCC_OscConfig+0x3a2>
          return HAL_TIMEOUT;
 80022e0:	2003      	movs	r0, #3
 80022e2:	e11e      	b.n	8002522 <HAL_RCC_OscConfig+0x5fe>
    FlagStatus       pwrclkchanged = RESET;
 80022e4:	2600      	movs	r6, #0
 80022e6:	e7d1      	b.n	800228c <HAL_RCC_OscConfig+0x368>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022e8:	4a52      	ldr	r2, [pc, #328]	@ (8002434 <HAL_RCC_OscConfig+0x510>)
 80022ea:	6813      	ldr	r3, [r2, #0]
 80022ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022f0:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80022f2:	f7fe fecb 	bl	800108c <HAL_GetTick>
 80022f6:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022f8:	4b4e      	ldr	r3, [pc, #312]	@ (8002434 <HAL_RCC_OscConfig+0x510>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002300:	d1c9      	bne.n	8002296 <HAL_RCC_OscConfig+0x372>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002302:	f7fe fec3 	bl	800108c <HAL_GetTick>
 8002306:	1bc0      	subs	r0, r0, r7
 8002308:	2802      	cmp	r0, #2
 800230a:	d9f5      	bls.n	80022f8 <HAL_RCC_OscConfig+0x3d4>
          return HAL_TIMEOUT;
 800230c:	2003      	movs	r0, #3
 800230e:	e108      	b.n	8002522 <HAL_RCC_OscConfig+0x5fe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002310:	4a47      	ldr	r2, [pc, #284]	@ (8002430 <HAL_RCC_OscConfig+0x50c>)
 8002312:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8002316:	f043 0301 	orr.w	r3, r3, #1
 800231a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800231e:	e7cc      	b.n	80022ba <HAL_RCC_OscConfig+0x396>
 8002320:	4b43      	ldr	r3, [pc, #268]	@ (8002430 <HAL_RCC_OscConfig+0x50c>)
 8002322:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8002326:	f042 0204 	orr.w	r2, r2, #4
 800232a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 800232e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8002332:	f042 0201 	orr.w	r2, r2, #1
 8002336:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 800233a:	e7be      	b.n	80022ba <HAL_RCC_OscConfig+0x396>
      tickstart = HAL_GetTick();
 800233c:	f7fe fea6 	bl	800108c <HAL_GetTick>
 8002340:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002342:	4b3b      	ldr	r3, [pc, #236]	@ (8002430 <HAL_RCC_OscConfig+0x50c>)
 8002344:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002348:	f013 0f02 	tst.w	r3, #2
 800234c:	d008      	beq.n	8002360 <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800234e:	f7fe fe9d 	bl	800108c <HAL_GetTick>
 8002352:	1bc0      	subs	r0, r0, r7
 8002354:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002358:	4298      	cmp	r0, r3
 800235a:	d9f2      	bls.n	8002342 <HAL_RCC_OscConfig+0x41e>
          return HAL_TIMEOUT;
 800235c:	2003      	movs	r0, #3
 800235e:	e0e0      	b.n	8002522 <HAL_RCC_OscConfig+0x5fe>
    if(pwrclkchanged == SET)
 8002360:	b9ee      	cbnz	r6, 800239e <HAL_RCC_OscConfig+0x47a>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002362:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002364:	2b00      	cmp	r3, #0
 8002366:	f000 80db 	beq.w	8002520 <HAL_RCC_OscConfig+0x5fc>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800236a:	2b02      	cmp	r3, #2
 800236c:	d01d      	beq.n	80023aa <HAL_RCC_OscConfig+0x486>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800236e:	2d0c      	cmp	r5, #12
 8002370:	f000 80dd 	beq.w	800252e <HAL_RCC_OscConfig+0x60a>
        __HAL_RCC_PLL_DISABLE();
 8002374:	4a2e      	ldr	r2, [pc, #184]	@ (8002430 <HAL_RCC_OscConfig+0x50c>)
 8002376:	6813      	ldr	r3, [r2, #0]
 8002378:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800237c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800237e:	f7fe fe85 	bl	800108c <HAL_GetTick>
 8002382:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002384:	4b2a      	ldr	r3, [pc, #168]	@ (8002430 <HAL_RCC_OscConfig+0x50c>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800238c:	f000 80b7 	beq.w	80024fe <HAL_RCC_OscConfig+0x5da>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002390:	f7fe fe7c 	bl	800108c <HAL_GetTick>
 8002394:	1b00      	subs	r0, r0, r4
 8002396:	2802      	cmp	r0, #2
 8002398:	d9f4      	bls.n	8002384 <HAL_RCC_OscConfig+0x460>
            return HAL_TIMEOUT;
 800239a:	2003      	movs	r0, #3
 800239c:	e0c1      	b.n	8002522 <HAL_RCC_OscConfig+0x5fe>
      __HAL_RCC_PWR_CLK_DISABLE();
 800239e:	4a24      	ldr	r2, [pc, #144]	@ (8002430 <HAL_RCC_OscConfig+0x50c>)
 80023a0:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80023a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80023a8:	e7db      	b.n	8002362 <HAL_RCC_OscConfig+0x43e>
      pll_config = RCC->PLLCFGR;
 80023aa:	4b21      	ldr	r3, [pc, #132]	@ (8002430 <HAL_RCC_OscConfig+0x50c>)
 80023ac:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ae:	f003 0103 	and.w	r1, r3, #3
 80023b2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80023b4:	4291      	cmp	r1, r2
 80023b6:	d00f      	beq.n	80023d8 <HAL_RCC_OscConfig+0x4b4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023b8:	2d0c      	cmp	r5, #12
 80023ba:	f000 80b4 	beq.w	8002526 <HAL_RCC_OscConfig+0x602>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80023be:	4b1c      	ldr	r3, [pc, #112]	@ (8002430 <HAL_RCC_OscConfig+0x50c>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f013 6f80 	tst.w	r3, #67108864	@ 0x4000000
 80023c6:	f040 80b0 	bne.w	800252a <HAL_RCC_OscConfig+0x606>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80023ca:	4b19      	ldr	r3, [pc, #100]	@ (8002430 <HAL_RCC_OscConfig+0x50c>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80023d2:	d031      	beq.n	8002438 <HAL_RCC_OscConfig+0x514>
            return HAL_ERROR;
 80023d4:	2001      	movs	r0, #1
 80023d6:	e0a4      	b.n	8002522 <HAL_RCC_OscConfig+0x5fe>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023d8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80023dc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80023de:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023e0:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 80023e4:	d1e8      	bne.n	80023b8 <HAL_RCC_OscConfig+0x494>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023e6:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80023ea:	6b61      	ldr	r1, [r4, #52]	@ 0x34
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023ec:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80023f0:	d1e2      	bne.n	80023b8 <HAL_RCC_OscConfig+0x494>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80023f2:	f403 3100 	and.w	r1, r3, #131072	@ 0x20000
 80023f6:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80023f8:	3a07      	subs	r2, #7
 80023fa:	bf18      	it	ne
 80023fc:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023fe:	4291      	cmp	r1, r2
 8002400:	d1da      	bne.n	80023b8 <HAL_RCC_OscConfig+0x494>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002402:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 8002406:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8002408:	0852      	lsrs	r2, r2, #1
 800240a:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800240c:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8002410:	d1d2      	bne.n	80023b8 <HAL_RCC_OscConfig+0x494>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002412:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 8002416:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002418:	0852      	lsrs	r2, r2, #1
 800241a:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800241c:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8002420:	d1ca      	bne.n	80023b8 <HAL_RCC_OscConfig+0x494>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002422:	4b03      	ldr	r3, [pc, #12]	@ (8002430 <HAL_RCC_OscConfig+0x50c>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800242a:	d04e      	beq.n	80024ca <HAL_RCC_OscConfig+0x5a6>
  return HAL_OK;
 800242c:	2000      	movs	r0, #0
 800242e:	e078      	b.n	8002522 <HAL_RCC_OscConfig+0x5fe>
 8002430:	40021000 	.word	0x40021000
 8002434:	40007000 	.word	0x40007000
            __HAL_RCC_PLL_DISABLE();
 8002438:	4a3e      	ldr	r2, [pc, #248]	@ (8002534 <HAL_RCC_OscConfig+0x610>)
 800243a:	6813      	ldr	r3, [r2, #0]
 800243c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002440:	6013      	str	r3, [r2, #0]
            tickstart = HAL_GetTick();
 8002442:	f7fe fe23 	bl	800108c <HAL_GetTick>
 8002446:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002448:	4b3a      	ldr	r3, [pc, #232]	@ (8002534 <HAL_RCC_OscConfig+0x610>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002450:	d006      	beq.n	8002460 <HAL_RCC_OscConfig+0x53c>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002452:	f7fe fe1b 	bl	800108c <HAL_GetTick>
 8002456:	1b40      	subs	r0, r0, r5
 8002458:	2802      	cmp	r0, #2
 800245a:	d9f5      	bls.n	8002448 <HAL_RCC_OscConfig+0x524>
                return HAL_TIMEOUT;
 800245c:	2003      	movs	r0, #3
 800245e:	e060      	b.n	8002522 <HAL_RCC_OscConfig+0x5fe>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002460:	4a34      	ldr	r2, [pc, #208]	@ (8002534 <HAL_RCC_OscConfig+0x610>)
 8002462:	68d3      	ldr	r3, [r2, #12]
 8002464:	4934      	ldr	r1, [pc, #208]	@ (8002538 <HAL_RCC_OscConfig+0x614>)
 8002466:	4019      	ands	r1, r3
 8002468:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800246a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800246c:	3801      	subs	r0, #1
 800246e:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8002472:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8002474:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002478:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800247a:	0840      	lsrs	r0, r0, #1
 800247c:	3801      	subs	r0, #1
 800247e:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 8002482:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8002484:	0840      	lsrs	r0, r0, #1
 8002486:	3801      	subs	r0, #1
 8002488:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 800248c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800248e:	0900      	lsrs	r0, r0, #4
 8002490:	ea43 4340 	orr.w	r3, r3, r0, lsl #17
 8002494:	4319      	orrs	r1, r3
 8002496:	60d1      	str	r1, [r2, #12]
            __HAL_RCC_PLL_ENABLE();
 8002498:	6813      	ldr	r3, [r2, #0]
 800249a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800249e:	6013      	str	r3, [r2, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024a0:	68d3      	ldr	r3, [r2, #12]
 80024a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024a6:	60d3      	str	r3, [r2, #12]
            tickstart = HAL_GetTick();
 80024a8:	f7fe fdf0 	bl	800108c <HAL_GetTick>
 80024ac:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024ae:	4b21      	ldr	r3, [pc, #132]	@ (8002534 <HAL_RCC_OscConfig+0x610>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80024b6:	d106      	bne.n	80024c6 <HAL_RCC_OscConfig+0x5a2>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024b8:	f7fe fde8 	bl	800108c <HAL_GetTick>
 80024bc:	1b00      	subs	r0, r0, r4
 80024be:	2802      	cmp	r0, #2
 80024c0:	d9f5      	bls.n	80024ae <HAL_RCC_OscConfig+0x58a>
                return HAL_TIMEOUT;
 80024c2:	2003      	movs	r0, #3
 80024c4:	e02d      	b.n	8002522 <HAL_RCC_OscConfig+0x5fe>
  return HAL_OK;
 80024c6:	2000      	movs	r0, #0
 80024c8:	e02b      	b.n	8002522 <HAL_RCC_OscConfig+0x5fe>
          __HAL_RCC_PLL_ENABLE();
 80024ca:	4b1a      	ldr	r3, [pc, #104]	@ (8002534 <HAL_RCC_OscConfig+0x610>)
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 80024d2:	601a      	str	r2, [r3, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024d4:	68da      	ldr	r2, [r3, #12]
 80024d6:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 80024da:	60da      	str	r2, [r3, #12]
          tickstart = HAL_GetTick();
 80024dc:	f7fe fdd6 	bl	800108c <HAL_GetTick>
 80024e0:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024e2:	4b14      	ldr	r3, [pc, #80]	@ (8002534 <HAL_RCC_OscConfig+0x610>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80024ea:	d106      	bne.n	80024fa <HAL_RCC_OscConfig+0x5d6>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ec:	f7fe fdce 	bl	800108c <HAL_GetTick>
 80024f0:	1b03      	subs	r3, r0, r4
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d9f5      	bls.n	80024e2 <HAL_RCC_OscConfig+0x5be>
              return HAL_TIMEOUT;
 80024f6:	2003      	movs	r0, #3
 80024f8:	e013      	b.n	8002522 <HAL_RCC_OscConfig+0x5fe>
  return HAL_OK;
 80024fa:	2000      	movs	r0, #0
 80024fc:	e011      	b.n	8002522 <HAL_RCC_OscConfig+0x5fe>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80024fe:	4a0d      	ldr	r2, [pc, #52]	@ (8002534 <HAL_RCC_OscConfig+0x610>)
 8002500:	68d1      	ldr	r1, [r2, #12]
 8002502:	4b0e      	ldr	r3, [pc, #56]	@ (800253c <HAL_RCC_OscConfig+0x618>)
 8002504:	400b      	ands	r3, r1
 8002506:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8002508:	2000      	movs	r0, #0
 800250a:	e00a      	b.n	8002522 <HAL_RCC_OscConfig+0x5fe>
    return HAL_ERROR;
 800250c:	2001      	movs	r0, #1
}
 800250e:	4770      	bx	lr
        return HAL_ERROR;
 8002510:	2001      	movs	r0, #1
 8002512:	e006      	b.n	8002522 <HAL_RCC_OscConfig+0x5fe>
            return HAL_ERROR;
 8002514:	2001      	movs	r0, #1
 8002516:	e004      	b.n	8002522 <HAL_RCC_OscConfig+0x5fe>
        return HAL_ERROR;
 8002518:	2001      	movs	r0, #1
 800251a:	e002      	b.n	8002522 <HAL_RCC_OscConfig+0x5fe>
        return HAL_ERROR;
 800251c:	2001      	movs	r0, #1
 800251e:	e000      	b.n	8002522 <HAL_RCC_OscConfig+0x5fe>
  return HAL_OK;
 8002520:	2000      	movs	r0, #0
}
 8002522:	b003      	add	sp, #12
 8002524:	bdf0      	pop	{r4, r5, r6, r7, pc}
          return HAL_ERROR;
 8002526:	2001      	movs	r0, #1
 8002528:	e7fb      	b.n	8002522 <HAL_RCC_OscConfig+0x5fe>
            return HAL_ERROR;
 800252a:	2001      	movs	r0, #1
 800252c:	e7f9      	b.n	8002522 <HAL_RCC_OscConfig+0x5fe>
        return HAL_ERROR;
 800252e:	2001      	movs	r0, #1
 8002530:	e7f7      	b.n	8002522 <HAL_RCC_OscConfig+0x5fe>
 8002532:	bf00      	nop
 8002534:	40021000 	.word	0x40021000
 8002538:	f99d808c 	.word	0xf99d808c
 800253c:	feeefffc 	.word	0xfeeefffc

08002540 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002540:	2800      	cmp	r0, #0
 8002542:	f000 80af 	beq.w	80026a4 <HAL_RCC_ClockConfig+0x164>
{
 8002546:	b570      	push	{r4, r5, r6, lr}
 8002548:	460d      	mov	r5, r1
 800254a:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800254c:	4b59      	ldr	r3, [pc, #356]	@ (80026b4 <HAL_RCC_ClockConfig+0x174>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0307 	and.w	r3, r3, #7
 8002554:	428b      	cmp	r3, r1
 8002556:	d20b      	bcs.n	8002570 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002558:	4a56      	ldr	r2, [pc, #344]	@ (80026b4 <HAL_RCC_ClockConfig+0x174>)
 800255a:	6813      	ldr	r3, [r2, #0]
 800255c:	f023 0307 	bic.w	r3, r3, #7
 8002560:	430b      	orrs	r3, r1
 8002562:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002564:	6813      	ldr	r3, [r2, #0]
 8002566:	f003 0307 	and.w	r3, r3, #7
 800256a:	428b      	cmp	r3, r1
 800256c:	f040 809c 	bne.w	80026a8 <HAL_RCC_ClockConfig+0x168>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002570:	6823      	ldr	r3, [r4, #0]
 8002572:	f013 0f02 	tst.w	r3, #2
 8002576:	d00c      	beq.n	8002592 <HAL_RCC_ClockConfig+0x52>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002578:	68a2      	ldr	r2, [r4, #8]
 800257a:	4b4f      	ldr	r3, [pc, #316]	@ (80026b8 <HAL_RCC_ClockConfig+0x178>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002582:	429a      	cmp	r2, r3
 8002584:	d905      	bls.n	8002592 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002586:	494c      	ldr	r1, [pc, #304]	@ (80026b8 <HAL_RCC_ClockConfig+0x178>)
 8002588:	688b      	ldr	r3, [r1, #8]
 800258a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800258e:	431a      	orrs	r2, r3
 8002590:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002592:	6823      	ldr	r3, [r4, #0]
 8002594:	f013 0f01 	tst.w	r3, #1
 8002598:	d039      	beq.n	800260e <HAL_RCC_ClockConfig+0xce>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800259a:	6863      	ldr	r3, [r4, #4]
 800259c:	2b03      	cmp	r3, #3
 800259e:	d009      	beq.n	80025b4 <HAL_RCC_ClockConfig+0x74>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d026      	beq.n	80025f2 <HAL_RCC_ClockConfig+0xb2>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80025a4:	bb63      	cbnz	r3, 8002600 <HAL_RCC_ClockConfig+0xc0>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025a6:	4a44      	ldr	r2, [pc, #272]	@ (80026b8 <HAL_RCC_ClockConfig+0x178>)
 80025a8:	6812      	ldr	r2, [r2, #0]
 80025aa:	f012 0f02 	tst.w	r2, #2
 80025ae:	d106      	bne.n	80025be <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 80025b0:	2001      	movs	r0, #1
 80025b2:	e076      	b.n	80026a2 <HAL_RCC_ClockConfig+0x162>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025b4:	4a40      	ldr	r2, [pc, #256]	@ (80026b8 <HAL_RCC_ClockConfig+0x178>)
 80025b6:	6812      	ldr	r2, [r2, #0]
 80025b8:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 80025bc:	d076      	beq.n	80026ac <HAL_RCC_ClockConfig+0x16c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80025be:	493e      	ldr	r1, [pc, #248]	@ (80026b8 <HAL_RCC_ClockConfig+0x178>)
 80025c0:	688a      	ldr	r2, [r1, #8]
 80025c2:	f022 0203 	bic.w	r2, r2, #3
 80025c6:	4313      	orrs	r3, r2
 80025c8:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80025ca:	f7fe fd5f 	bl	800108c <HAL_GetTick>
 80025ce:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025d0:	4b39      	ldr	r3, [pc, #228]	@ (80026b8 <HAL_RCC_ClockConfig+0x178>)
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f003 030c 	and.w	r3, r3, #12
 80025d8:	6862      	ldr	r2, [r4, #4]
 80025da:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80025de:	d016      	beq.n	800260e <HAL_RCC_ClockConfig+0xce>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025e0:	f7fe fd54 	bl	800108c <HAL_GetTick>
 80025e4:	1b80      	subs	r0, r0, r6
 80025e6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80025ea:	4298      	cmp	r0, r3
 80025ec:	d9f0      	bls.n	80025d0 <HAL_RCC_ClockConfig+0x90>
        return HAL_TIMEOUT;
 80025ee:	2003      	movs	r0, #3
 80025f0:	e057      	b.n	80026a2 <HAL_RCC_ClockConfig+0x162>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025f2:	4a31      	ldr	r2, [pc, #196]	@ (80026b8 <HAL_RCC_ClockConfig+0x178>)
 80025f4:	6812      	ldr	r2, [r2, #0]
 80025f6:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 80025fa:	d1e0      	bne.n	80025be <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 80025fc:	2001      	movs	r0, #1
 80025fe:	e050      	b.n	80026a2 <HAL_RCC_ClockConfig+0x162>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002600:	4a2d      	ldr	r2, [pc, #180]	@ (80026b8 <HAL_RCC_ClockConfig+0x178>)
 8002602:	6812      	ldr	r2, [r2, #0]
 8002604:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8002608:	d1d9      	bne.n	80025be <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 800260a:	2001      	movs	r0, #1
 800260c:	e049      	b.n	80026a2 <HAL_RCC_ClockConfig+0x162>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800260e:	6823      	ldr	r3, [r4, #0]
 8002610:	f013 0f02 	tst.w	r3, #2
 8002614:	d00c      	beq.n	8002630 <HAL_RCC_ClockConfig+0xf0>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002616:	68a2      	ldr	r2, [r4, #8]
 8002618:	4b27      	ldr	r3, [pc, #156]	@ (80026b8 <HAL_RCC_ClockConfig+0x178>)
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002620:	429a      	cmp	r2, r3
 8002622:	d205      	bcs.n	8002630 <HAL_RCC_ClockConfig+0xf0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002624:	4924      	ldr	r1, [pc, #144]	@ (80026b8 <HAL_RCC_ClockConfig+0x178>)
 8002626:	688b      	ldr	r3, [r1, #8]
 8002628:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800262c:	431a      	orrs	r2, r3
 800262e:	608a      	str	r2, [r1, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002630:	4b20      	ldr	r3, [pc, #128]	@ (80026b4 <HAL_RCC_ClockConfig+0x174>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0307 	and.w	r3, r3, #7
 8002638:	42ab      	cmp	r3, r5
 800263a:	d90a      	bls.n	8002652 <HAL_RCC_ClockConfig+0x112>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800263c:	4a1d      	ldr	r2, [pc, #116]	@ (80026b4 <HAL_RCC_ClockConfig+0x174>)
 800263e:	6813      	ldr	r3, [r2, #0]
 8002640:	f023 0307 	bic.w	r3, r3, #7
 8002644:	432b      	orrs	r3, r5
 8002646:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002648:	6813      	ldr	r3, [r2, #0]
 800264a:	f003 0307 	and.w	r3, r3, #7
 800264e:	42ab      	cmp	r3, r5
 8002650:	d12e      	bne.n	80026b0 <HAL_RCC_ClockConfig+0x170>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002652:	6823      	ldr	r3, [r4, #0]
 8002654:	f013 0f04 	tst.w	r3, #4
 8002658:	d006      	beq.n	8002668 <HAL_RCC_ClockConfig+0x128>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800265a:	4a17      	ldr	r2, [pc, #92]	@ (80026b8 <HAL_RCC_ClockConfig+0x178>)
 800265c:	6893      	ldr	r3, [r2, #8]
 800265e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002662:	68e1      	ldr	r1, [r4, #12]
 8002664:	430b      	orrs	r3, r1
 8002666:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002668:	6823      	ldr	r3, [r4, #0]
 800266a:	f013 0f08 	tst.w	r3, #8
 800266e:	d007      	beq.n	8002680 <HAL_RCC_ClockConfig+0x140>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002670:	4a11      	ldr	r2, [pc, #68]	@ (80026b8 <HAL_RCC_ClockConfig+0x178>)
 8002672:	6893      	ldr	r3, [r2, #8]
 8002674:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8002678:	6921      	ldr	r1, [r4, #16]
 800267a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800267e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002680:	f7ff fbfc 	bl	8001e7c <HAL_RCC_GetSysClockFreq>
 8002684:	4b0c      	ldr	r3, [pc, #48]	@ (80026b8 <HAL_RCC_ClockConfig+0x178>)
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800268c:	4a0b      	ldr	r2, [pc, #44]	@ (80026bc <HAL_RCC_ClockConfig+0x17c>)
 800268e:	5cd3      	ldrb	r3, [r2, r3]
 8002690:	f003 031f 	and.w	r3, r3, #31
 8002694:	40d8      	lsrs	r0, r3
 8002696:	4b0a      	ldr	r3, [pc, #40]	@ (80026c0 <HAL_RCC_ClockConfig+0x180>)
 8002698:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 800269a:	4b0a      	ldr	r3, [pc, #40]	@ (80026c4 <HAL_RCC_ClockConfig+0x184>)
 800269c:	6818      	ldr	r0, [r3, #0]
 800269e:	f7fe fcab 	bl	8000ff8 <HAL_InitTick>
}
 80026a2:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80026a4:	2001      	movs	r0, #1
}
 80026a6:	4770      	bx	lr
      return HAL_ERROR;
 80026a8:	2001      	movs	r0, #1
 80026aa:	e7fa      	b.n	80026a2 <HAL_RCC_ClockConfig+0x162>
        return HAL_ERROR;
 80026ac:	2001      	movs	r0, #1
 80026ae:	e7f8      	b.n	80026a2 <HAL_RCC_ClockConfig+0x162>
      return HAL_ERROR;
 80026b0:	2001      	movs	r0, #1
 80026b2:	e7f6      	b.n	80026a2 <HAL_RCC_ClockConfig+0x162>
 80026b4:	40022000 	.word	0x40022000
 80026b8:	40021000 	.word	0x40021000
 80026bc:	08004a5c 	.word	0x08004a5c
 80026c0:	2000000c 	.word	0x2000000c
 80026c4:	20000008 	.word	0x20000008

080026c8 <HAL_RCC_GetHCLKFreq>:
}
 80026c8:	4b01      	ldr	r3, [pc, #4]	@ (80026d0 <HAL_RCC_GetHCLKFreq+0x8>)
 80026ca:	6818      	ldr	r0, [r3, #0]
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	2000000c 	.word	0x2000000c

080026d4 <HAL_RCC_GetPCLK1Freq>:
{
 80026d4:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80026d6:	f7ff fff7 	bl	80026c8 <HAL_RCC_GetHCLKFreq>
 80026da:	4b05      	ldr	r3, [pc, #20]	@ (80026f0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80026e2:	4a04      	ldr	r2, [pc, #16]	@ (80026f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026e4:	5cd3      	ldrb	r3, [r2, r3]
 80026e6:	f003 031f 	and.w	r3, r3, #31
}
 80026ea:	40d8      	lsrs	r0, r3
 80026ec:	bd08      	pop	{r3, pc}
 80026ee:	bf00      	nop
 80026f0:	40021000 	.word	0x40021000
 80026f4:	08004a54 	.word	0x08004a54

080026f8 <HAL_RCC_GetPCLK2Freq>:
{
 80026f8:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80026fa:	f7ff ffe5 	bl	80026c8 <HAL_RCC_GetHCLKFreq>
 80026fe:	4b05      	ldr	r3, [pc, #20]	@ (8002714 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002706:	4a04      	ldr	r2, [pc, #16]	@ (8002718 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002708:	5cd3      	ldrb	r3, [r2, r3]
 800270a:	f003 031f 	and.w	r3, r3, #31
}
 800270e:	40d8      	lsrs	r0, r3
 8002710:	bd08      	pop	{r3, pc}
 8002712:	bf00      	nop
 8002714:	40021000 	.word	0x40021000
 8002718:	08004a54 	.word	0x08004a54

0800271c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800271c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800271e:	4604      	mov	r4, r0
 8002720:	460d      	mov	r5, r1
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002722:	4b59      	ldr	r3, [pc, #356]	@ (8002888 <RCCEx_PLLSAI1_Config+0x16c>)
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	f013 0f03 	tst.w	r3, #3
 800272a:	d018      	beq.n	800275e <RCCEx_PLLSAI1_Config+0x42>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800272c:	4b56      	ldr	r3, [pc, #344]	@ (8002888 <RCCEx_PLLSAI1_Config+0x16c>)
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	f003 0303 	and.w	r3, r3, #3
 8002734:	6802      	ldr	r2, [r0, #0]
 8002736:	4293      	cmp	r3, r2
 8002738:	d002      	beq.n	8002740 <RCCEx_PLLSAI1_Config+0x24>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800273a:	2601      	movs	r6, #1
      }
    }
  }

  return status;
}
 800273c:	4630      	mov	r0, r6
 800273e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 8002740:	2a00      	cmp	r2, #0
 8002742:	f000 809d 	beq.w	8002880 <RCCEx_PLLSAI1_Config+0x164>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002746:	4b50      	ldr	r3, [pc, #320]	@ (8002888 <RCCEx_PLLSAI1_Config+0x16c>)
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800274e:	3301      	adds	r3, #1
 8002750:	6842      	ldr	r2, [r0, #4]
       ||
 8002752:	4293      	cmp	r3, r2
 8002754:	d001      	beq.n	800275a <RCCEx_PLLSAI1_Config+0x3e>
      status = HAL_ERROR;
 8002756:	2601      	movs	r6, #1
 8002758:	e7f0      	b.n	800273c <RCCEx_PLLSAI1_Config+0x20>
  HAL_StatusTypeDef status = HAL_OK;
 800275a:	2600      	movs	r6, #0
 800275c:	e019      	b.n	8002792 <RCCEx_PLLSAI1_Config+0x76>
    switch(PllSai1->PLLSAI1Source)
 800275e:	6803      	ldr	r3, [r0, #0]
 8002760:	2b02      	cmp	r3, #2
 8002762:	d056      	beq.n	8002812 <RCCEx_PLLSAI1_Config+0xf6>
 8002764:	2b03      	cmp	r3, #3
 8002766:	d05b      	beq.n	8002820 <RCCEx_PLLSAI1_Config+0x104>
 8002768:	2b01      	cmp	r3, #1
 800276a:	f040 808b 	bne.w	8002884 <RCCEx_PLLSAI1_Config+0x168>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800276e:	4a46      	ldr	r2, [pc, #280]	@ (8002888 <RCCEx_PLLSAI1_Config+0x16c>)
 8002770:	6812      	ldr	r2, [r2, #0]
 8002772:	f012 0f02 	tst.w	r2, #2
 8002776:	d05f      	beq.n	8002838 <RCCEx_PLLSAI1_Config+0x11c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002778:	4843      	ldr	r0, [pc, #268]	@ (8002888 <RCCEx_PLLSAI1_Config+0x16c>)
 800277a:	68c2      	ldr	r2, [r0, #12]
 800277c:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 8002780:	6861      	ldr	r1, [r4, #4]
 8002782:	3901      	subs	r1, #1
 8002784:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8002788:	4313      	orrs	r3, r2
 800278a:	60c3      	str	r3, [r0, #12]
 800278c:	2600      	movs	r6, #0
  if(status == HAL_OK)
 800278e:	2e00      	cmp	r6, #0
 8002790:	d1d4      	bne.n	800273c <RCCEx_PLLSAI1_Config+0x20>
    __HAL_RCC_PLLSAI1_DISABLE();
 8002792:	4a3d      	ldr	r2, [pc, #244]	@ (8002888 <RCCEx_PLLSAI1_Config+0x16c>)
 8002794:	6813      	ldr	r3, [r2, #0]
 8002796:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800279a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800279c:	f7fe fc76 	bl	800108c <HAL_GetTick>
 80027a0:	4607      	mov	r7, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80027a2:	4b39      	ldr	r3, [pc, #228]	@ (8002888 <RCCEx_PLLSAI1_Config+0x16c>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 80027aa:	d005      	beq.n	80027b8 <RCCEx_PLLSAI1_Config+0x9c>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027ac:	f7fe fc6e 	bl	800108c <HAL_GetTick>
 80027b0:	1bc3      	subs	r3, r0, r7
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d9f5      	bls.n	80027a2 <RCCEx_PLLSAI1_Config+0x86>
        status = HAL_TIMEOUT;
 80027b6:	2603      	movs	r6, #3
    if(status == HAL_OK)
 80027b8:	2e00      	cmp	r6, #0
 80027ba:	d1bf      	bne.n	800273c <RCCEx_PLLSAI1_Config+0x20>
      if(Divider == DIVIDER_P_UPDATE)
 80027bc:	2d00      	cmp	r5, #0
 80027be:	d13d      	bne.n	800283c <RCCEx_PLLSAI1_Config+0x120>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027c0:	4931      	ldr	r1, [pc, #196]	@ (8002888 <RCCEx_PLLSAI1_Config+0x16c>)
 80027c2:	690b      	ldr	r3, [r1, #16]
 80027c4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80027c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027cc:	68a0      	ldr	r0, [r4, #8]
 80027ce:	68e2      	ldr	r2, [r4, #12]
 80027d0:	0912      	lsrs	r2, r2, #4
 80027d2:	0452      	lsls	r2, r2, #17
 80027d4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80027d8:	4313      	orrs	r3, r2
 80027da:	610b      	str	r3, [r1, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 80027dc:	4a2a      	ldr	r2, [pc, #168]	@ (8002888 <RCCEx_PLLSAI1_Config+0x16c>)
 80027de:	6813      	ldr	r3, [r2, #0]
 80027e0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80027e4:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80027e6:	f7fe fc51 	bl	800108c <HAL_GetTick>
 80027ea:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80027ec:	4b26      	ldr	r3, [pc, #152]	@ (8002888 <RCCEx_PLLSAI1_Config+0x16c>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 80027f4:	d105      	bne.n	8002802 <RCCEx_PLLSAI1_Config+0xe6>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027f6:	f7fe fc49 	bl	800108c <HAL_GetTick>
 80027fa:	1b40      	subs	r0, r0, r5
 80027fc:	2802      	cmp	r0, #2
 80027fe:	d9f5      	bls.n	80027ec <RCCEx_PLLSAI1_Config+0xd0>
          status = HAL_TIMEOUT;
 8002800:	2603      	movs	r6, #3
      if(status == HAL_OK)
 8002802:	2e00      	cmp	r6, #0
 8002804:	d19a      	bne.n	800273c <RCCEx_PLLSAI1_Config+0x20>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002806:	4a20      	ldr	r2, [pc, #128]	@ (8002888 <RCCEx_PLLSAI1_Config+0x16c>)
 8002808:	6913      	ldr	r3, [r2, #16]
 800280a:	69a1      	ldr	r1, [r4, #24]
 800280c:	430b      	orrs	r3, r1
 800280e:	6113      	str	r3, [r2, #16]
 8002810:	e794      	b.n	800273c <RCCEx_PLLSAI1_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002812:	4a1d      	ldr	r2, [pc, #116]	@ (8002888 <RCCEx_PLLSAI1_Config+0x16c>)
 8002814:	6812      	ldr	r2, [r2, #0]
 8002816:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 800281a:	d1ad      	bne.n	8002778 <RCCEx_PLLSAI1_Config+0x5c>
 800281c:	2601      	movs	r6, #1
 800281e:	e78d      	b.n	800273c <RCCEx_PLLSAI1_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002820:	4a19      	ldr	r2, [pc, #100]	@ (8002888 <RCCEx_PLLSAI1_Config+0x16c>)
 8002822:	6812      	ldr	r2, [r2, #0]
 8002824:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8002828:	d1a6      	bne.n	8002778 <RCCEx_PLLSAI1_Config+0x5c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800282a:	4a17      	ldr	r2, [pc, #92]	@ (8002888 <RCCEx_PLLSAI1_Config+0x16c>)
 800282c:	6812      	ldr	r2, [r2, #0]
 800282e:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8002832:	d1a1      	bne.n	8002778 <RCCEx_PLLSAI1_Config+0x5c>
 8002834:	2601      	movs	r6, #1
 8002836:	e781      	b.n	800273c <RCCEx_PLLSAI1_Config+0x20>
        status = HAL_ERROR;
 8002838:	2601      	movs	r6, #1
 800283a:	e7a8      	b.n	800278e <RCCEx_PLLSAI1_Config+0x72>
      else if(Divider == DIVIDER_Q_UPDATE)
 800283c:	2d01      	cmp	r5, #1
 800283e:	d00f      	beq.n	8002860 <RCCEx_PLLSAI1_Config+0x144>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002840:	4811      	ldr	r0, [pc, #68]	@ (8002888 <RCCEx_PLLSAI1_Config+0x16c>)
 8002842:	6902      	ldr	r2, [r0, #16]
 8002844:	f022 62c0 	bic.w	r2, r2, #100663296	@ 0x6000000
 8002848:	f422 42fe 	bic.w	r2, r2, #32512	@ 0x7f00
 800284c:	68a1      	ldr	r1, [r4, #8]
 800284e:	6963      	ldr	r3, [r4, #20]
 8002850:	085b      	lsrs	r3, r3, #1
 8002852:	3b01      	subs	r3, #1
 8002854:	065b      	lsls	r3, r3, #25
 8002856:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800285a:	431a      	orrs	r2, r3
 800285c:	6102      	str	r2, [r0, #16]
 800285e:	e7bd      	b.n	80027dc <RCCEx_PLLSAI1_Config+0xc0>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002860:	4809      	ldr	r0, [pc, #36]	@ (8002888 <RCCEx_PLLSAI1_Config+0x16c>)
 8002862:	6902      	ldr	r2, [r0, #16]
 8002864:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 8002868:	f422 42fe 	bic.w	r2, r2, #32512	@ 0x7f00
 800286c:	68a1      	ldr	r1, [r4, #8]
 800286e:	6923      	ldr	r3, [r4, #16]
 8002870:	085b      	lsrs	r3, r3, #1
 8002872:	3b01      	subs	r3, #1
 8002874:	055b      	lsls	r3, r3, #21
 8002876:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800287a:	431a      	orrs	r2, r3
 800287c:	6102      	str	r2, [r0, #16]
 800287e:	e7ad      	b.n	80027dc <RCCEx_PLLSAI1_Config+0xc0>
      status = HAL_ERROR;
 8002880:	2601      	movs	r6, #1
 8002882:	e75b      	b.n	800273c <RCCEx_PLLSAI1_Config+0x20>
    switch(PllSai1->PLLSAI1Source)
 8002884:	2601      	movs	r6, #1
 8002886:	e759      	b.n	800273c <RCCEx_PLLSAI1_Config+0x20>
 8002888:	40021000 	.word	0x40021000

0800288c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800288c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800288e:	4604      	mov	r4, r0
 8002890:	460d      	mov	r5, r1
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002892:	4b50      	ldr	r3, [pc, #320]	@ (80029d4 <RCCEx_PLLSAI2_Config+0x148>)
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	f013 0f03 	tst.w	r3, #3
 800289a:	d018      	beq.n	80028ce <RCCEx_PLLSAI2_Config+0x42>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800289c:	4b4d      	ldr	r3, [pc, #308]	@ (80029d4 <RCCEx_PLLSAI2_Config+0x148>)
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	f003 0303 	and.w	r3, r3, #3
 80028a4:	6802      	ldr	r2, [r0, #0]
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d002      	beq.n	80028b0 <RCCEx_PLLSAI2_Config+0x24>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80028aa:	2601      	movs	r6, #1
      }
    }
  }

  return status;
}
 80028ac:	4630      	mov	r0, r6
 80028ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 80028b0:	2a00      	cmp	r2, #0
 80028b2:	f000 808a 	beq.w	80029ca <RCCEx_PLLSAI2_Config+0x13e>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80028b6:	4b47      	ldr	r3, [pc, #284]	@ (80029d4 <RCCEx_PLLSAI2_Config+0x148>)
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80028be:	3301      	adds	r3, #1
 80028c0:	6842      	ldr	r2, [r0, #4]
       ||
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d001      	beq.n	80028ca <RCCEx_PLLSAI2_Config+0x3e>
      status = HAL_ERROR;
 80028c6:	2601      	movs	r6, #1
 80028c8:	e7f0      	b.n	80028ac <RCCEx_PLLSAI2_Config+0x20>
  HAL_StatusTypeDef status = HAL_OK;
 80028ca:	2600      	movs	r6, #0
 80028cc:	e018      	b.n	8002900 <RCCEx_PLLSAI2_Config+0x74>
    switch(PllSai2->PLLSAI2Source)
 80028ce:	6803      	ldr	r3, [r0, #0]
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d055      	beq.n	8002980 <RCCEx_PLLSAI2_Config+0xf4>
 80028d4:	2b03      	cmp	r3, #3
 80028d6:	d05a      	beq.n	800298e <RCCEx_PLLSAI2_Config+0x102>
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d178      	bne.n	80029ce <RCCEx_PLLSAI2_Config+0x142>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80028dc:	4a3d      	ldr	r2, [pc, #244]	@ (80029d4 <RCCEx_PLLSAI2_Config+0x148>)
 80028de:	6812      	ldr	r2, [r2, #0]
 80028e0:	f012 0f02 	tst.w	r2, #2
 80028e4:	d05f      	beq.n	80029a6 <RCCEx_PLLSAI2_Config+0x11a>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80028e6:	483b      	ldr	r0, [pc, #236]	@ (80029d4 <RCCEx_PLLSAI2_Config+0x148>)
 80028e8:	68c2      	ldr	r2, [r0, #12]
 80028ea:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 80028ee:	6861      	ldr	r1, [r4, #4]
 80028f0:	3901      	subs	r1, #1
 80028f2:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80028f6:	4313      	orrs	r3, r2
 80028f8:	60c3      	str	r3, [r0, #12]
 80028fa:	2600      	movs	r6, #0
  if(status == HAL_OK)
 80028fc:	2e00      	cmp	r6, #0
 80028fe:	d1d5      	bne.n	80028ac <RCCEx_PLLSAI2_Config+0x20>
    __HAL_RCC_PLLSAI2_DISABLE();
 8002900:	4a34      	ldr	r2, [pc, #208]	@ (80029d4 <RCCEx_PLLSAI2_Config+0x148>)
 8002902:	6813      	ldr	r3, [r2, #0]
 8002904:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002908:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800290a:	f7fe fbbf 	bl	800108c <HAL_GetTick>
 800290e:	4607      	mov	r7, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002910:	4b30      	ldr	r3, [pc, #192]	@ (80029d4 <RCCEx_PLLSAI2_Config+0x148>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 8002918:	d005      	beq.n	8002926 <RCCEx_PLLSAI2_Config+0x9a>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800291a:	f7fe fbb7 	bl	800108c <HAL_GetTick>
 800291e:	1bc3      	subs	r3, r0, r7
 8002920:	2b02      	cmp	r3, #2
 8002922:	d9f5      	bls.n	8002910 <RCCEx_PLLSAI2_Config+0x84>
        status = HAL_TIMEOUT;
 8002924:	2603      	movs	r6, #3
    if(status == HAL_OK)
 8002926:	2e00      	cmp	r6, #0
 8002928:	d1c0      	bne.n	80028ac <RCCEx_PLLSAI2_Config+0x20>
      if(Divider == DIVIDER_P_UPDATE)
 800292a:	2d00      	cmp	r5, #0
 800292c:	d13d      	bne.n	80029aa <RCCEx_PLLSAI2_Config+0x11e>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800292e:	4929      	ldr	r1, [pc, #164]	@ (80029d4 <RCCEx_PLLSAI2_Config+0x148>)
 8002930:	694b      	ldr	r3, [r1, #20]
 8002932:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002936:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800293a:	68a0      	ldr	r0, [r4, #8]
 800293c:	68e2      	ldr	r2, [r4, #12]
 800293e:	0912      	lsrs	r2, r2, #4
 8002940:	0452      	lsls	r2, r2, #17
 8002942:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002946:	4313      	orrs	r3, r2
 8002948:	614b      	str	r3, [r1, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 800294a:	4a22      	ldr	r2, [pc, #136]	@ (80029d4 <RCCEx_PLLSAI2_Config+0x148>)
 800294c:	6813      	ldr	r3, [r2, #0]
 800294e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002952:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002954:	f7fe fb9a 	bl	800108c <HAL_GetTick>
 8002958:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800295a:	4b1e      	ldr	r3, [pc, #120]	@ (80029d4 <RCCEx_PLLSAI2_Config+0x148>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 8002962:	d105      	bne.n	8002970 <RCCEx_PLLSAI2_Config+0xe4>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002964:	f7fe fb92 	bl	800108c <HAL_GetTick>
 8002968:	1b40      	subs	r0, r0, r5
 800296a:	2802      	cmp	r0, #2
 800296c:	d9f5      	bls.n	800295a <RCCEx_PLLSAI2_Config+0xce>
          status = HAL_TIMEOUT;
 800296e:	2603      	movs	r6, #3
      if(status == HAL_OK)
 8002970:	2e00      	cmp	r6, #0
 8002972:	d19b      	bne.n	80028ac <RCCEx_PLLSAI2_Config+0x20>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002974:	4a17      	ldr	r2, [pc, #92]	@ (80029d4 <RCCEx_PLLSAI2_Config+0x148>)
 8002976:	6953      	ldr	r3, [r2, #20]
 8002978:	6961      	ldr	r1, [r4, #20]
 800297a:	430b      	orrs	r3, r1
 800297c:	6153      	str	r3, [r2, #20]
 800297e:	e795      	b.n	80028ac <RCCEx_PLLSAI2_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002980:	4a14      	ldr	r2, [pc, #80]	@ (80029d4 <RCCEx_PLLSAI2_Config+0x148>)
 8002982:	6812      	ldr	r2, [r2, #0]
 8002984:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8002988:	d1ad      	bne.n	80028e6 <RCCEx_PLLSAI2_Config+0x5a>
 800298a:	2601      	movs	r6, #1
 800298c:	e78e      	b.n	80028ac <RCCEx_PLLSAI2_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800298e:	4a11      	ldr	r2, [pc, #68]	@ (80029d4 <RCCEx_PLLSAI2_Config+0x148>)
 8002990:	6812      	ldr	r2, [r2, #0]
 8002992:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8002996:	d1a6      	bne.n	80028e6 <RCCEx_PLLSAI2_Config+0x5a>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002998:	4a0e      	ldr	r2, [pc, #56]	@ (80029d4 <RCCEx_PLLSAI2_Config+0x148>)
 800299a:	6812      	ldr	r2, [r2, #0]
 800299c:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 80029a0:	d1a1      	bne.n	80028e6 <RCCEx_PLLSAI2_Config+0x5a>
 80029a2:	2601      	movs	r6, #1
 80029a4:	e782      	b.n	80028ac <RCCEx_PLLSAI2_Config+0x20>
        status = HAL_ERROR;
 80029a6:	2601      	movs	r6, #1
 80029a8:	e7a8      	b.n	80028fc <RCCEx_PLLSAI2_Config+0x70>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80029aa:	480a      	ldr	r0, [pc, #40]	@ (80029d4 <RCCEx_PLLSAI2_Config+0x148>)
 80029ac:	6942      	ldr	r2, [r0, #20]
 80029ae:	f022 62c0 	bic.w	r2, r2, #100663296	@ 0x6000000
 80029b2:	f422 42fe 	bic.w	r2, r2, #32512	@ 0x7f00
 80029b6:	68a1      	ldr	r1, [r4, #8]
 80029b8:	6923      	ldr	r3, [r4, #16]
 80029ba:	085b      	lsrs	r3, r3, #1
 80029bc:	3b01      	subs	r3, #1
 80029be:	065b      	lsls	r3, r3, #25
 80029c0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80029c4:	431a      	orrs	r2, r3
 80029c6:	6142      	str	r2, [r0, #20]
 80029c8:	e7bf      	b.n	800294a <RCCEx_PLLSAI2_Config+0xbe>
      status = HAL_ERROR;
 80029ca:	2601      	movs	r6, #1
 80029cc:	e76e      	b.n	80028ac <RCCEx_PLLSAI2_Config+0x20>
    switch(PllSai2->PLLSAI2Source)
 80029ce:	2601      	movs	r6, #1
 80029d0:	e76c      	b.n	80028ac <RCCEx_PLLSAI2_Config+0x20>
 80029d2:	bf00      	nop
 80029d4:	40021000 	.word	0x40021000

080029d8 <HAL_RCCEx_PeriphCLKConfig>:
{
 80029d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029dc:	b082      	sub	sp, #8
 80029de:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80029e0:	6803      	ldr	r3, [r0, #0]
 80029e2:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 80029e6:	d033      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x78>
    switch(PeriphClkInit->Sai1ClockSelection)
 80029e8:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 80029ea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80029ee:	d015      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x44>
 80029f0:	d80c      	bhi.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x34>
 80029f2:	b323      	cbz	r3, 8002a3e <HAL_RCCEx_PeriphCLKConfig+0x66>
 80029f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029f8:	d105      	bne.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x2e>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80029fa:	2100      	movs	r1, #0
 80029fc:	3020      	adds	r0, #32
 80029fe:	f7ff ff45 	bl	800288c <RCCEx_PLLSAI2_Config>
 8002a02:	4606      	mov	r6, r0
      break;
 8002a04:	e020      	b.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002a06:	2701      	movs	r7, #1
 8002a08:	463e      	mov	r6, r7
 8002a0a:	e023      	b.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002a0c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002a10:	d101      	bne.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x3e>
 8002a12:	2600      	movs	r6, #0
 8002a14:	e008      	b.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002a16:	2701      	movs	r7, #1
 8002a18:	463e      	mov	r6, r7
 8002a1a:	e01b      	b.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a1c:	4a5e      	ldr	r2, [pc, #376]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002a1e:	68d3      	ldr	r3, [r2, #12]
 8002a20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a24:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a26:	2600      	movs	r6, #0
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a28:	4a5b      	ldr	r2, [pc, #364]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002a2a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002a2e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002a32:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8002a34:	430b      	orrs	r3, r1
 8002a36:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a3a:	2700      	movs	r7, #0
 8002a3c:	e00a      	b.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a3e:	2100      	movs	r1, #0
 8002a40:	3004      	adds	r0, #4
 8002a42:	f7ff fe6b 	bl	800271c <RCCEx_PLLSAI1_Config>
 8002a46:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8002a48:	2e00      	cmp	r6, #0
 8002a4a:	d0ed      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x50>
      status = ret;
 8002a4c:	4637      	mov	r7, r6
 8002a4e:	e001      	b.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a50:	2700      	movs	r7, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a52:	463e      	mov	r6, r7
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002a54:	6823      	ldr	r3, [r4, #0]
 8002a56:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8002a5a:	d030      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0xe6>
    switch(PeriphClkInit->Sai2ClockSelection)
 8002a5c:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8002a5e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002a62:	d01f      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002a64:	d80d      	bhi.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0xaa>
 8002a66:	b31b      	cbz	r3, 8002ab0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8002a68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a6c:	d106      	bne.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0xa4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a6e:	2100      	movs	r1, #0
 8002a70:	f104 0020 	add.w	r0, r4, #32
 8002a74:	f7ff ff0a 	bl	800288c <RCCEx_PLLSAI2_Config>
 8002a78:	4606      	mov	r6, r0
      break;
 8002a7a:	e005      	b.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    switch(PeriphClkInit->Sai2ClockSelection)
 8002a7c:	2701      	movs	r7, #1
 8002a7e:	463e      	mov	r6, r7
 8002a80:	e01d      	b.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0xe6>
 8002a82:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002a86:	d10a      	bne.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    if(ret == HAL_OK)
 8002a88:	b9c6      	cbnz	r6, 8002abc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002a8a:	4a43      	ldr	r2, [pc, #268]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002a8c:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002a90:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8002a94:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8002a96:	430b      	orrs	r3, r1
 8002a98:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8002a9c:	e00f      	b.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0xe6>
    switch(PeriphClkInit->Sai2ClockSelection)
 8002a9e:	2701      	movs	r7, #1
 8002aa0:	463e      	mov	r6, r7
 8002aa2:	e00c      	b.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0xe6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002aa4:	4a3c      	ldr	r2, [pc, #240]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002aa6:	68d3      	ldr	r3, [r2, #12]
 8002aa8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002aac:	60d3      	str	r3, [r2, #12]
      break;
 8002aae:	e7eb      	b.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	1d20      	adds	r0, r4, #4
 8002ab4:	f7ff fe32 	bl	800271c <RCCEx_PLLSAI1_Config>
 8002ab8:	4606      	mov	r6, r0
      break;
 8002aba:	e7e5      	b.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      status = ret;
 8002abc:	4637      	mov	r7, r6
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002abe:	6823      	ldr	r3, [r4, #0]
 8002ac0:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002ac4:	d071      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ac6:	4b34      	ldr	r3, [pc, #208]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002ac8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aca:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8002ace:	d14e      	bne.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x196>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ad0:	4b31      	ldr	r3, [pc, #196]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002ad2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002ad4:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002ad8:	659a      	str	r2, [r3, #88]	@ 0x58
 8002ada:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002adc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ae0:	9301      	str	r3, [sp, #4]
 8002ae2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002ae4:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ae8:	4a2c      	ldr	r2, [pc, #176]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002aea:	6813      	ldr	r3, [r2, #0]
 8002aec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002af0:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002af2:	f7fe facb 	bl	800108c <HAL_GetTick>
 8002af6:	4605      	mov	r5, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002af8:	4b28      	ldr	r3, [pc, #160]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002b00:	d105      	bne.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x136>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b02:	f7fe fac3 	bl	800108c <HAL_GetTick>
 8002b06:	1b40      	subs	r0, r0, r5
 8002b08:	2802      	cmp	r0, #2
 8002b0a:	d9f5      	bls.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x120>
        ret = HAL_TIMEOUT;
 8002b0c:	2603      	movs	r6, #3
    if(ret == HAL_OK)
 8002b0e:	2e00      	cmp	r6, #0
 8002b10:	d146      	bne.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b12:	4b21      	ldr	r3, [pc, #132]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b18:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8002b1c:	d019      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002b1e:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d012      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x174>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b26:	4a1c      	ldr	r2, [pc, #112]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002b28:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8002b2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b30:	f8d2 1090 	ldr.w	r1, [r2, #144]	@ 0x90
 8002b34:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 8002b38:	f8c2 1090 	str.w	r1, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b3c:	f8d2 1090 	ldr.w	r1, [r2, #144]	@ 0x90
 8002b40:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8002b44:	f8c2 1090 	str.w	r1, [r2, #144]	@ 0x90
        RCC->BDCR = tmpregister;
 8002b48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b4c:	f013 0f01 	tst.w	r3, #1
 8002b50:	d110      	bne.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      if(ret == HAL_OK)
 8002b52:	2e00      	cmp	r6, #0
 8002b54:	f040 8127 	bne.w	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b58:	4a0f      	ldr	r2, [pc, #60]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002b5a:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8002b5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b62:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 8002b66:	430b      	orrs	r3, r1
 8002b68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b6c:	e019      	b.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    FlagStatus       pwrclkchanged = RESET;
 8002b6e:	f04f 0800 	mov.w	r8, #0
 8002b72:	e7b9      	b.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x110>
        tickstart = HAL_GetTick();
 8002b74:	f7fe fa8a 	bl	800108c <HAL_GetTick>
 8002b78:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b7a:	4b07      	ldr	r3, [pc, #28]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b80:	f013 0f02 	tst.w	r3, #2
 8002b84:	d1e5      	bne.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b86:	f7fe fa81 	bl	800108c <HAL_GetTick>
 8002b8a:	1b40      	subs	r0, r0, r5
 8002b8c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002b90:	4298      	cmp	r0, r3
 8002b92:	d9f2      	bls.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
            ret = HAL_TIMEOUT;
 8002b94:	2603      	movs	r6, #3
 8002b96:	e7dc      	b.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	40007000 	.word	0x40007000
      status = ret;
 8002ba0:	4637      	mov	r7, r6
    if(pwrclkchanged == SET)
 8002ba2:	f1b8 0f00 	cmp.w	r8, #0
 8002ba6:	f040 8100 	bne.w	8002daa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002baa:	6823      	ldr	r3, [r4, #0]
 8002bac:	f013 0f01 	tst.w	r3, #1
 8002bb0:	d008      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bb2:	4a9d      	ldr	r2, [pc, #628]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002bb4:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002bb8:	f023 0303 	bic.w	r3, r3, #3
 8002bbc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8002bbe:	430b      	orrs	r3, r1
 8002bc0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bc4:	6823      	ldr	r3, [r4, #0]
 8002bc6:	f013 0f02 	tst.w	r3, #2
 8002bca:	d008      	beq.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x206>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002bcc:	4a96      	ldr	r2, [pc, #600]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002bce:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002bd2:	f023 030c 	bic.w	r3, r3, #12
 8002bd6:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8002bd8:	430b      	orrs	r3, r1
 8002bda:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002bde:	6823      	ldr	r3, [r4, #0]
 8002be0:	f013 0f04 	tst.w	r3, #4
 8002be4:	d008      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002be6:	4a90      	ldr	r2, [pc, #576]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002be8:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002bec:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002bf0:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8002bf2:	430b      	orrs	r3, r1
 8002bf4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002bf8:	6823      	ldr	r3, [r4, #0]
 8002bfa:	f013 0f08 	tst.w	r3, #8
 8002bfe:	d008      	beq.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c00:	4a89      	ldr	r2, [pc, #548]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c02:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002c06:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002c0a:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8002c0c:	430b      	orrs	r3, r1
 8002c0e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c12:	6823      	ldr	r3, [r4, #0]
 8002c14:	f013 0f10 	tst.w	r3, #16
 8002c18:	d008      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x254>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c1a:	4a83      	ldr	r2, [pc, #524]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c1c:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002c20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c24:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8002c26:	430b      	orrs	r3, r1
 8002c28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c2c:	6823      	ldr	r3, [r4, #0]
 8002c2e:	f013 0f20 	tst.w	r3, #32
 8002c32:	d008      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c34:	4a7c      	ldr	r2, [pc, #496]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c36:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002c3a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002c3e:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8002c40:	430b      	orrs	r3, r1
 8002c42:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c46:	6823      	ldr	r3, [r4, #0]
 8002c48:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8002c4c:	d008      	beq.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x288>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c4e:	4a76      	ldr	r2, [pc, #472]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c50:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002c54:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 8002c58:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8002c5a:	430b      	orrs	r3, r1
 8002c5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002c60:	6823      	ldr	r3, [r4, #0]
 8002c62:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8002c66:	d008      	beq.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c68:	4a6f      	ldr	r2, [pc, #444]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c6a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002c6e:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8002c72:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8002c74:	430b      	orrs	r3, r1
 8002c76:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c7a:	6823      	ldr	r3, [r4, #0]
 8002c7c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8002c80:	d008      	beq.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c82:	4a69      	ldr	r2, [pc, #420]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c84:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002c88:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002c8c:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8002c8e:	430b      	orrs	r3, r1
 8002c90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c94:	6823      	ldr	r3, [r4, #0]
 8002c96:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002c9a:	d008      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c9c:	4a62      	ldr	r2, [pc, #392]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c9e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002ca2:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002ca6:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8002ca8:	430b      	orrs	r3, r1
 8002caa:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002cae:	6823      	ldr	r3, [r4, #0]
 8002cb0:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002cb4:	d008      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002cb6:	4a5c      	ldr	r2, [pc, #368]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002cb8:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002cbc:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8002cc0:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8002cc2:	430b      	orrs	r3, r1
 8002cc4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002cc8:	6823      	ldr	r3, [r4, #0]
 8002cca:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8002cce:	d00f      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x318>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002cd0:	4a55      	ldr	r2, [pc, #340]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002cd2:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002cd6:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8002cda:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 8002cdc:	430b      	orrs	r3, r1
 8002cde:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002ce2:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8002ce4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ce8:	d065      	beq.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002cea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002cee:	d067      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002cf0:	6823      	ldr	r3, [r4, #0]
 8002cf2:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8002cf6:	d00f      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x340>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002cf8:	4a4b      	ldr	r2, [pc, #300]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002cfa:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002cfe:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8002d02:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8002d04:	430b      	orrs	r3, r1
 8002d06:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002d0a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8002d0c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d10:	d05e      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002d12:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002d16:	d060      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x402>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d18:	6823      	ldr	r3, [r4, #0]
 8002d1a:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 8002d1e:	d00f      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x368>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d20:	4a41      	ldr	r2, [pc, #260]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d22:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002d26:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8002d2a:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8002d2c:	430b      	orrs	r3, r1
 8002d2e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d32:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8002d34:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d38:	d057      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x412>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002d3a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002d3e:	d059      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d40:	6823      	ldr	r3, [r4, #0]
 8002d42:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8002d46:	d00f      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x390>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d48:	4a37      	ldr	r2, [pc, #220]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d4a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002d4e:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8002d52:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8002d54:	430b      	orrs	r3, r1
 8002d56:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002d5a:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8002d5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002d60:	d050      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x42c>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002d62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d66:	d055      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x43c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002d68:	6823      	ldr	r3, [r4, #0]
 8002d6a:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8002d6e:	d008      	beq.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002d70:	4a2d      	ldr	r2, [pc, #180]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d72:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002d76:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002d7a:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 8002d7c:	430b      	orrs	r3, r1
 8002d7e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002d82:	6823      	ldr	r3, [r4, #0]
 8002d84:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8002d88:	d009      	beq.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x3c6>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002d8a:	4a27      	ldr	r2, [pc, #156]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d8c:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002d90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002d94:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 8002d98:	430b      	orrs	r3, r1
 8002d9a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
}
 8002d9e:	4638      	mov	r0, r7
 8002da0:	b002      	add	sp, #8
 8002da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = ret;
 8002da6:	4637      	mov	r7, r6
 8002da8:	e6fb      	b.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002daa:	4a1f      	ldr	r2, [pc, #124]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002dac:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8002dae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002db2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002db4:	e6f9      	b.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x1d2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002db6:	68d3      	ldr	r3, [r2, #12]
 8002db8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002dbc:	60d3      	str	r3, [r2, #12]
 8002dbe:	e797      	b.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x318>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002dc0:	2101      	movs	r1, #1
 8002dc2:	1d20      	adds	r0, r4, #4
 8002dc4:	f7ff fcaa 	bl	800271c <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8002dc8:	2800      	cmp	r0, #0
 8002dca:	d091      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x318>
          status = ret;
 8002dcc:	4607      	mov	r7, r0
 8002dce:	e78f      	b.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x318>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dd0:	68d3      	ldr	r3, [r2, #12]
 8002dd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002dd6:	60d3      	str	r3, [r2, #12]
 8002dd8:	e79e      	b.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x340>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002dda:	2101      	movs	r1, #1
 8002ddc:	1d20      	adds	r0, r4, #4
 8002dde:	f7ff fc9d 	bl	800271c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002de2:	2800      	cmp	r0, #0
 8002de4:	d098      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x340>
        status = ret;
 8002de6:	4607      	mov	r7, r0
 8002de8:	e796      	b.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x340>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dea:	68d3      	ldr	r3, [r2, #12]
 8002dec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002df0:	60d3      	str	r3, [r2, #12]
 8002df2:	e7a5      	b.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x368>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002df4:	2101      	movs	r1, #1
 8002df6:	1d20      	adds	r0, r4, #4
 8002df8:	f7ff fc90 	bl	800271c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002dfc:	2800      	cmp	r0, #0
 8002dfe:	d09f      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x368>
        status = ret;
 8002e00:	4607      	mov	r7, r0
 8002e02:	e79d      	b.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x368>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002e04:	2102      	movs	r1, #2
 8002e06:	1d20      	adds	r0, r4, #4
 8002e08:	f7ff fc88 	bl	800271c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002e0c:	2800      	cmp	r0, #0
 8002e0e:	d0ab      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x390>
        status = ret;
 8002e10:	4607      	mov	r7, r0
 8002e12:	e7a9      	b.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x390>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002e14:	2102      	movs	r1, #2
 8002e16:	f104 0020 	add.w	r0, r4, #32
 8002e1a:	f7ff fd37 	bl	800288c <RCCEx_PLLSAI2_Config>
      if(ret != HAL_OK)
 8002e1e:	2800      	cmp	r0, #0
 8002e20:	d0a2      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x390>
        status = ret;
 8002e22:	4607      	mov	r7, r0
 8002e24:	e7a0      	b.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x390>
 8002e26:	bf00      	nop
 8002e28:	40021000 	.word	0x40021000

08002e2c <UART_EndRxTransfer>:
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e2c:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e2e:	e852 3f00 	ldrex	r3, [r2]
 8002e32:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e36:	e842 3100 	strex	r1, r3, [r2]
 8002e3a:	2900      	cmp	r1, #0
 8002e3c:	d1f6      	bne.n	8002e2c <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e3e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e40:	f102 0308 	add.w	r3, r2, #8
 8002e44:	e853 3f00 	ldrex	r3, [r3]
 8002e48:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e4c:	3208      	adds	r2, #8
 8002e4e:	e842 3100 	strex	r1, r3, [r2]
 8002e52:	2900      	cmp	r1, #0
 8002e54:	d1f3      	bne.n	8002e3e <UART_EndRxTransfer+0x12>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e56:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d006      	beq.n	8002e6a <UART_EndRxTransfer+0x3e>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e5c:	2320      	movs	r3, #32
 8002e5e:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e62:	2300      	movs	r3, #0
 8002e64:	6603      	str	r3, [r0, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002e66:	6683      	str	r3, [r0, #104]	@ 0x68
}
 8002e68:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e6a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e6c:	e852 3f00 	ldrex	r3, [r2]
 8002e70:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e74:	e842 3100 	strex	r1, r3, [r2]
 8002e78:	2900      	cmp	r1, #0
 8002e7a:	d1f6      	bne.n	8002e6a <UART_EndRxTransfer+0x3e>
 8002e7c:	e7ee      	b.n	8002e5c <UART_EndRxTransfer+0x30>
	...

08002e80 <UART_SetConfig>:
{
 8002e80:	b510      	push	{r4, lr}
 8002e82:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e84:	6883      	ldr	r3, [r0, #8]
 8002e86:	6902      	ldr	r2, [r0, #16]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	6942      	ldr	r2, [r0, #20]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	69c2      	ldr	r2, [r0, #28]
 8002e90:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e92:	6801      	ldr	r1, [r0, #0]
 8002e94:	6808      	ldr	r0, [r1, #0]
 8002e96:	4a8f      	ldr	r2, [pc, #572]	@ (80030d4 <UART_SetConfig+0x254>)
 8002e98:	4002      	ands	r2, r0
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e9e:	6822      	ldr	r2, [r4, #0]
 8002ea0:	6853      	ldr	r3, [r2, #4]
 8002ea2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002ea6:	68e1      	ldr	r1, [r4, #12]
 8002ea8:	430b      	orrs	r3, r1
 8002eaa:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002eac:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002eae:	6822      	ldr	r2, [r4, #0]
 8002eb0:	4b89      	ldr	r3, [pc, #548]	@ (80030d8 <UART_SetConfig+0x258>)
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d001      	beq.n	8002eba <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 8002eb6:	6a23      	ldr	r3, [r4, #32]
 8002eb8:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002eba:	6893      	ldr	r3, [r2, #8]
 8002ebc:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8002ec0:	430b      	orrs	r3, r1
 8002ec2:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ec4:	6823      	ldr	r3, [r4, #0]
 8002ec6:	4a85      	ldr	r2, [pc, #532]	@ (80030dc <UART_SetConfig+0x25c>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d010      	beq.n	8002eee <UART_SetConfig+0x6e>
 8002ecc:	4a84      	ldr	r2, [pc, #528]	@ (80030e0 <UART_SetConfig+0x260>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d021      	beq.n	8002f16 <UART_SetConfig+0x96>
 8002ed2:	4a84      	ldr	r2, [pc, #528]	@ (80030e4 <UART_SetConfig+0x264>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d04d      	beq.n	8002f74 <UART_SetConfig+0xf4>
 8002ed8:	4a83      	ldr	r2, [pc, #524]	@ (80030e8 <UART_SetConfig+0x268>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d05d      	beq.n	8002f9a <UART_SetConfig+0x11a>
 8002ede:	4a83      	ldr	r2, [pc, #524]	@ (80030ec <UART_SetConfig+0x26c>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d06c      	beq.n	8002fbe <UART_SetConfig+0x13e>
 8002ee4:	4a7c      	ldr	r2, [pc, #496]	@ (80030d8 <UART_SetConfig+0x258>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d07e      	beq.n	8002fe8 <UART_SetConfig+0x168>
 8002eea:	2210      	movs	r2, #16
 8002eec:	e02b      	b.n	8002f46 <UART_SetConfig+0xc6>
 8002eee:	f502 4258 	add.w	r2, r2, #55296	@ 0xd800
 8002ef2:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8002ef6:	f002 0203 	and.w	r2, r2, #3
 8002efa:	2a03      	cmp	r2, #3
 8002efc:	d809      	bhi.n	8002f12 <UART_SetConfig+0x92>
 8002efe:	e8df f002 	tbb	[pc, r2]
 8002f02:	0402      	.short	0x0402
 8002f04:	0688      	.short	0x0688
 8002f06:	2201      	movs	r2, #1
 8002f08:	e01d      	b.n	8002f46 <UART_SetConfig+0xc6>
 8002f0a:	2204      	movs	r2, #4
 8002f0c:	e01b      	b.n	8002f46 <UART_SetConfig+0xc6>
 8002f0e:	2208      	movs	r2, #8
 8002f10:	e019      	b.n	8002f46 <UART_SetConfig+0xc6>
 8002f12:	2210      	movs	r2, #16
 8002f14:	e017      	b.n	8002f46 <UART_SetConfig+0xc6>
 8002f16:	f502 32e6 	add.w	r2, r2, #117760	@ 0x1cc00
 8002f1a:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8002f1e:	f002 020c 	and.w	r2, r2, #12
 8002f22:	2a0c      	cmp	r2, #12
 8002f24:	d80e      	bhi.n	8002f44 <UART_SetConfig+0xc4>
 8002f26:	e8df f002 	tbb	[pc, r2]
 8002f2a:	0d07      	.short	0x0d07
 8002f2c:	0d090d0d 	.word	0x0d090d0d
 8002f30:	0d760d0d 	.word	0x0d760d0d
 8002f34:	0d0d      	.short	0x0d0d
 8002f36:	0b          	.byte	0x0b
 8002f37:	00          	.byte	0x00
 8002f38:	2200      	movs	r2, #0
 8002f3a:	e004      	b.n	8002f46 <UART_SetConfig+0xc6>
 8002f3c:	2204      	movs	r2, #4
 8002f3e:	e002      	b.n	8002f46 <UART_SetConfig+0xc6>
 8002f40:	2208      	movs	r2, #8
 8002f42:	e000      	b.n	8002f46 <UART_SetConfig+0xc6>
 8002f44:	2210      	movs	r2, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 8002f46:	4964      	ldr	r1, [pc, #400]	@ (80030d8 <UART_SetConfig+0x258>)
 8002f48:	428b      	cmp	r3, r1
 8002f4a:	f000 8086 	beq.w	800305a <UART_SetConfig+0x1da>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f4e:	69e0      	ldr	r0, [r4, #28]
 8002f50:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8002f54:	f000 80b2 	beq.w	80030bc <UART_SetConfig+0x23c>
    switch (clocksource)
 8002f58:	2a08      	cmp	r2, #8
 8002f5a:	f200 8119 	bhi.w	8003190 <UART_SetConfig+0x310>
 8002f5e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8002f62:	00ed      	.short	0x00ed
 8002f64:	00eb0100 	.word	0x00eb0100
 8002f68:	01030117 	.word	0x01030117
 8002f6c:	01170117 	.word	0x01170117
 8002f70:	01060117 	.word	0x01060117
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f74:	f502 32e4 	add.w	r2, r2, #116736	@ 0x1c800
 8002f78:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8002f7c:	f002 0230 	and.w	r2, r2, #48	@ 0x30
 8002f80:	2a20      	cmp	r2, #32
 8002f82:	d04a      	beq.n	800301a <UART_SetConfig+0x19a>
 8002f84:	d805      	bhi.n	8002f92 <UART_SetConfig+0x112>
 8002f86:	2a00      	cmp	r2, #0
 8002f88:	d049      	beq.n	800301e <UART_SetConfig+0x19e>
 8002f8a:	2a10      	cmp	r2, #16
 8002f8c:	d149      	bne.n	8003022 <UART_SetConfig+0x1a2>
 8002f8e:	2204      	movs	r2, #4
 8002f90:	e7d9      	b.n	8002f46 <UART_SetConfig+0xc6>
 8002f92:	2a30      	cmp	r2, #48	@ 0x30
 8002f94:	d147      	bne.n	8003026 <UART_SetConfig+0x1a6>
 8002f96:	2208      	movs	r2, #8
 8002f98:	e7d5      	b.n	8002f46 <UART_SetConfig+0xc6>
 8002f9a:	f502 32e2 	add.w	r2, r2, #115712	@ 0x1c400
 8002f9e:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8002fa2:	f002 02c0 	and.w	r2, r2, #192	@ 0xc0
 8002fa6:	2a80      	cmp	r2, #128	@ 0x80
 8002fa8:	d03f      	beq.n	800302a <UART_SetConfig+0x1aa>
 8002faa:	d804      	bhi.n	8002fb6 <UART_SetConfig+0x136>
 8002fac:	b3fa      	cbz	r2, 800302e <UART_SetConfig+0x1ae>
 8002fae:	2a40      	cmp	r2, #64	@ 0x40
 8002fb0:	d13f      	bne.n	8003032 <UART_SetConfig+0x1b2>
 8002fb2:	2204      	movs	r2, #4
 8002fb4:	e7c7      	b.n	8002f46 <UART_SetConfig+0xc6>
 8002fb6:	2ac0      	cmp	r2, #192	@ 0xc0
 8002fb8:	d13d      	bne.n	8003036 <UART_SetConfig+0x1b6>
 8002fba:	2208      	movs	r2, #8
 8002fbc:	e7c3      	b.n	8002f46 <UART_SetConfig+0xc6>
 8002fbe:	f502 32e0 	add.w	r2, r2, #114688	@ 0x1c000
 8002fc2:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8002fc6:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8002fca:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 8002fce:	d034      	beq.n	800303a <UART_SetConfig+0x1ba>
 8002fd0:	d805      	bhi.n	8002fde <UART_SetConfig+0x15e>
 8002fd2:	b3a2      	cbz	r2, 800303e <UART_SetConfig+0x1be>
 8002fd4:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 8002fd8:	d133      	bne.n	8003042 <UART_SetConfig+0x1c2>
 8002fda:	2204      	movs	r2, #4
 8002fdc:	e7b3      	b.n	8002f46 <UART_SetConfig+0xc6>
 8002fde:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8002fe2:	d130      	bne.n	8003046 <UART_SetConfig+0x1c6>
 8002fe4:	2208      	movs	r2, #8
 8002fe6:	e7ae      	b.n	8002f46 <UART_SetConfig+0xc6>
 8002fe8:	f502 32c8 	add.w	r2, r2, #102400	@ 0x19000
 8002fec:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8002ff0:	f402 6240 	and.w	r2, r2, #3072	@ 0xc00
 8002ff4:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 8002ff8:	d027      	beq.n	800304a <UART_SetConfig+0x1ca>
 8002ffa:	d805      	bhi.n	8003008 <UART_SetConfig+0x188>
 8002ffc:	b33a      	cbz	r2, 800304e <UART_SetConfig+0x1ce>
 8002ffe:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8003002:	d126      	bne.n	8003052 <UART_SetConfig+0x1d2>
 8003004:	2204      	movs	r2, #4
 8003006:	e79e      	b.n	8002f46 <UART_SetConfig+0xc6>
 8003008:	f5b2 6f40 	cmp.w	r2, #3072	@ 0xc00
 800300c:	d123      	bne.n	8003056 <UART_SetConfig+0x1d6>
 800300e:	2208      	movs	r2, #8
 8003010:	e799      	b.n	8002f46 <UART_SetConfig+0xc6>
 8003012:	2202      	movs	r2, #2
 8003014:	e797      	b.n	8002f46 <UART_SetConfig+0xc6>
 8003016:	2202      	movs	r2, #2
 8003018:	e795      	b.n	8002f46 <UART_SetConfig+0xc6>
 800301a:	2202      	movs	r2, #2
 800301c:	e793      	b.n	8002f46 <UART_SetConfig+0xc6>
 800301e:	2200      	movs	r2, #0
 8003020:	e791      	b.n	8002f46 <UART_SetConfig+0xc6>
 8003022:	2210      	movs	r2, #16
 8003024:	e78f      	b.n	8002f46 <UART_SetConfig+0xc6>
 8003026:	2210      	movs	r2, #16
 8003028:	e78d      	b.n	8002f46 <UART_SetConfig+0xc6>
 800302a:	2202      	movs	r2, #2
 800302c:	e78b      	b.n	8002f46 <UART_SetConfig+0xc6>
 800302e:	2200      	movs	r2, #0
 8003030:	e789      	b.n	8002f46 <UART_SetConfig+0xc6>
 8003032:	2210      	movs	r2, #16
 8003034:	e787      	b.n	8002f46 <UART_SetConfig+0xc6>
 8003036:	2210      	movs	r2, #16
 8003038:	e785      	b.n	8002f46 <UART_SetConfig+0xc6>
 800303a:	2202      	movs	r2, #2
 800303c:	e783      	b.n	8002f46 <UART_SetConfig+0xc6>
 800303e:	2200      	movs	r2, #0
 8003040:	e781      	b.n	8002f46 <UART_SetConfig+0xc6>
 8003042:	2210      	movs	r2, #16
 8003044:	e77f      	b.n	8002f46 <UART_SetConfig+0xc6>
 8003046:	2210      	movs	r2, #16
 8003048:	e77d      	b.n	8002f46 <UART_SetConfig+0xc6>
 800304a:	2202      	movs	r2, #2
 800304c:	e77b      	b.n	8002f46 <UART_SetConfig+0xc6>
 800304e:	2200      	movs	r2, #0
 8003050:	e779      	b.n	8002f46 <UART_SetConfig+0xc6>
 8003052:	2210      	movs	r2, #16
 8003054:	e777      	b.n	8002f46 <UART_SetConfig+0xc6>
 8003056:	2210      	movs	r2, #16
 8003058:	e775      	b.n	8002f46 <UART_SetConfig+0xc6>
    switch (clocksource)
 800305a:	2a08      	cmp	r2, #8
 800305c:	f200 808a 	bhi.w	8003174 <UART_SetConfig+0x2f4>
 8003060:	e8df f002 	tbb	[pc, r2]
 8003064:	88108808 	.word	0x88108808
 8003068:	8888880d 	.word	0x8888880d
 800306c:	05          	.byte	0x05
 800306d:	00          	.byte	0x00
 800306e:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8003072:	e008      	b.n	8003086 <UART_SetConfig+0x206>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003074:	f7ff fb2e 	bl	80026d4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003078:	b928      	cbnz	r0, 8003086 <UART_SetConfig+0x206>
 800307a:	2000      	movs	r0, #0
 800307c:	e089      	b.n	8003192 <UART_SetConfig+0x312>
        pclk = HAL_RCC_GetSysClockFreq();
 800307e:	f7fe fefd 	bl	8001e7c <HAL_RCC_GetSysClockFreq>
        break;
 8003082:	e7f9      	b.n	8003078 <UART_SetConfig+0x1f8>
        pclk = (uint32_t) HSI_VALUE;
 8003084:	481a      	ldr	r0, [pc, #104]	@ (80030f0 <UART_SetConfig+0x270>)
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003086:	6862      	ldr	r2, [r4, #4]
 8003088:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800308c:	4283      	cmp	r3, r0
 800308e:	d873      	bhi.n	8003178 <UART_SetConfig+0x2f8>
 8003090:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8003094:	d872      	bhi.n	800317c <UART_SetConfig+0x2fc>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003096:	0e01      	lsrs	r1, r0, #24
 8003098:	0200      	lsls	r0, r0, #8
 800309a:	0853      	lsrs	r3, r2, #1
 800309c:	18c0      	adds	r0, r0, r3
 800309e:	f04f 0300 	mov.w	r3, #0
 80030a2:	f141 0100 	adc.w	r1, r1, #0
 80030a6:	f7fd fbf9 	bl	800089c <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80030aa:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 80030ae:	4b11      	ldr	r3, [pc, #68]	@ (80030f4 <UART_SetConfig+0x274>)
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d865      	bhi.n	8003180 <UART_SetConfig+0x300>
          huart->Instance->BRR = usartdiv;
 80030b4:	6823      	ldr	r3, [r4, #0]
 80030b6:	60d8      	str	r0, [r3, #12]
 80030b8:	2000      	movs	r0, #0
 80030ba:	e06a      	b.n	8003192 <UART_SetConfig+0x312>
    switch (clocksource)
 80030bc:	2a08      	cmp	r2, #8
 80030be:	d861      	bhi.n	8003184 <UART_SetConfig+0x304>
 80030c0:	e8df f002 	tbb	[pc, r2]
 80030c4:	6005341a 	.word	0x6005341a
 80030c8:	60606037 	.word	0x60606037
 80030cc:	1e          	.byte	0x1e
 80030cd:	00          	.byte	0x00
 80030ce:	4808      	ldr	r0, [pc, #32]	@ (80030f0 <UART_SetConfig+0x270>)
 80030d0:	e016      	b.n	8003100 <UART_SetConfig+0x280>
 80030d2:	bf00      	nop
 80030d4:	efff69f3 	.word	0xefff69f3
 80030d8:	40008000 	.word	0x40008000
 80030dc:	40013800 	.word	0x40013800
 80030e0:	40004400 	.word	0x40004400
 80030e4:	40004800 	.word	0x40004800
 80030e8:	40004c00 	.word	0x40004c00
 80030ec:	40005000 	.word	0x40005000
 80030f0:	00f42400 	.word	0x00f42400
 80030f4:	000ffcff 	.word	0x000ffcff
        pclk = HAL_RCC_GetPCLK1Freq();
 80030f8:	f7ff faec 	bl	80026d4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80030fc:	2800      	cmp	r0, #0
 80030fe:	d043      	beq.n	8003188 <UART_SetConfig+0x308>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003100:	6862      	ldr	r2, [r4, #4]
 8003102:	0853      	lsrs	r3, r2, #1
 8003104:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8003108:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800310c:	f1a3 0110 	sub.w	r1, r3, #16
 8003110:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8003114:	4291      	cmp	r1, r2
 8003116:	d839      	bhi.n	800318c <UART_SetConfig+0x30c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003118:	b29a      	uxth	r2, r3
 800311a:	f022 020f 	bic.w	r2, r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800311e:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8003122:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 8003124:	6822      	ldr	r2, [r4, #0]
 8003126:	60d3      	str	r3, [r2, #12]
 8003128:	2000      	movs	r0, #0
 800312a:	e032      	b.n	8003192 <UART_SetConfig+0x312>
        pclk = HAL_RCC_GetPCLK2Freq();
 800312c:	f7ff fae4 	bl	80026f8 <HAL_RCC_GetPCLK2Freq>
        break;
 8003130:	e7e4      	b.n	80030fc <UART_SetConfig+0x27c>
        pclk = HAL_RCC_GetSysClockFreq();
 8003132:	f7fe fea3 	bl	8001e7c <HAL_RCC_GetSysClockFreq>
        break;
 8003136:	e7e1      	b.n	80030fc <UART_SetConfig+0x27c>
    switch (clocksource)
 8003138:	481a      	ldr	r0, [pc, #104]	@ (80031a4 <UART_SetConfig+0x324>)
 800313a:	e002      	b.n	8003142 <UART_SetConfig+0x2c2>
        pclk = HAL_RCC_GetPCLK1Freq();
 800313c:	f7ff faca 	bl	80026d4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003140:	b358      	cbz	r0, 800319a <UART_SetConfig+0x31a>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003142:	6863      	ldr	r3, [r4, #4]
 8003144:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8003148:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800314c:	f1a0 0210 	sub.w	r2, r0, #16
 8003150:	f64f 73ef 	movw	r3, #65519	@ 0xffef
 8003154:	429a      	cmp	r2, r3
 8003156:	d822      	bhi.n	800319e <UART_SetConfig+0x31e>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003158:	6823      	ldr	r3, [r4, #0]
 800315a:	b280      	uxth	r0, r0
 800315c:	60d8      	str	r0, [r3, #12]
 800315e:	2000      	movs	r0, #0
 8003160:	e017      	b.n	8003192 <UART_SetConfig+0x312>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003162:	f7ff fac9 	bl	80026f8 <HAL_RCC_GetPCLK2Freq>
        break;
 8003166:	e7eb      	b.n	8003140 <UART_SetConfig+0x2c0>
        pclk = HAL_RCC_GetSysClockFreq();
 8003168:	f7fe fe88 	bl	8001e7c <HAL_RCC_GetSysClockFreq>
        break;
 800316c:	e7e8      	b.n	8003140 <UART_SetConfig+0x2c0>
        pclk = (uint32_t) LSE_VALUE;
 800316e:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8003172:	e7e6      	b.n	8003142 <UART_SetConfig+0x2c2>
    switch (clocksource)
 8003174:	2001      	movs	r0, #1
 8003176:	e00c      	b.n	8003192 <UART_SetConfig+0x312>
        ret = HAL_ERROR;
 8003178:	2001      	movs	r0, #1
 800317a:	e00a      	b.n	8003192 <UART_SetConfig+0x312>
 800317c:	2001      	movs	r0, #1
 800317e:	e008      	b.n	8003192 <UART_SetConfig+0x312>
          ret = HAL_ERROR;
 8003180:	2001      	movs	r0, #1
 8003182:	e006      	b.n	8003192 <UART_SetConfig+0x312>
    switch (clocksource)
 8003184:	2001      	movs	r0, #1
 8003186:	e004      	b.n	8003192 <UART_SetConfig+0x312>
 8003188:	2000      	movs	r0, #0
 800318a:	e002      	b.n	8003192 <UART_SetConfig+0x312>
        ret = HAL_ERROR;
 800318c:	2001      	movs	r0, #1
 800318e:	e000      	b.n	8003192 <UART_SetConfig+0x312>
    switch (clocksource)
 8003190:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8003192:	2300      	movs	r3, #0
 8003194:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 8003196:	66e3      	str	r3, [r4, #108]	@ 0x6c
}
 8003198:	bd10      	pop	{r4, pc}
 800319a:	2000      	movs	r0, #0
 800319c:	e7f9      	b.n	8003192 <UART_SetConfig+0x312>
        ret = HAL_ERROR;
 800319e:	2001      	movs	r0, #1
 80031a0:	e7f7      	b.n	8003192 <UART_SetConfig+0x312>
 80031a2:	bf00      	nop
 80031a4:	00f42400 	.word	0x00f42400

080031a8 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80031a8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80031aa:	f013 0f08 	tst.w	r3, #8
 80031ae:	d006      	beq.n	80031be <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80031b0:	6802      	ldr	r2, [r0, #0]
 80031b2:	6853      	ldr	r3, [r2, #4]
 80031b4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80031b8:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 80031ba:	430b      	orrs	r3, r1
 80031bc:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80031be:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80031c0:	f013 0f01 	tst.w	r3, #1
 80031c4:	d006      	beq.n	80031d4 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80031c6:	6802      	ldr	r2, [r0, #0]
 80031c8:	6853      	ldr	r3, [r2, #4]
 80031ca:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80031ce:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 80031d0:	430b      	orrs	r3, r1
 80031d2:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80031d4:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80031d6:	f013 0f02 	tst.w	r3, #2
 80031da:	d006      	beq.n	80031ea <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80031dc:	6802      	ldr	r2, [r0, #0]
 80031de:	6853      	ldr	r3, [r2, #4]
 80031e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031e4:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80031e6:	430b      	orrs	r3, r1
 80031e8:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80031ea:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80031ec:	f013 0f04 	tst.w	r3, #4
 80031f0:	d006      	beq.n	8003200 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80031f2:	6802      	ldr	r2, [r0, #0]
 80031f4:	6853      	ldr	r3, [r2, #4]
 80031f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031fa:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 80031fc:	430b      	orrs	r3, r1
 80031fe:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003200:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8003202:	f013 0f10 	tst.w	r3, #16
 8003206:	d006      	beq.n	8003216 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003208:	6802      	ldr	r2, [r0, #0]
 800320a:	6893      	ldr	r3, [r2, #8]
 800320c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003210:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8003212:	430b      	orrs	r3, r1
 8003214:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003216:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8003218:	f013 0f20 	tst.w	r3, #32
 800321c:	d006      	beq.n	800322c <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800321e:	6802      	ldr	r2, [r0, #0]
 8003220:	6893      	ldr	r3, [r2, #8]
 8003222:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003226:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8003228:	430b      	orrs	r3, r1
 800322a:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800322c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800322e:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8003232:	d00a      	beq.n	800324a <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003234:	6802      	ldr	r2, [r0, #0]
 8003236:	6853      	ldr	r3, [r2, #4]
 8003238:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800323c:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 800323e:	430b      	orrs	r3, r1
 8003240:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003242:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8003244:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003248:	d00b      	beq.n	8003262 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800324a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800324c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003250:	d006      	beq.n	8003260 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003252:	6802      	ldr	r2, [r0, #0]
 8003254:	6853      	ldr	r3, [r2, #4]
 8003256:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800325a:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 800325c:	430b      	orrs	r3, r1
 800325e:	6053      	str	r3, [r2, #4]
}
 8003260:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003262:	6802      	ldr	r2, [r0, #0]
 8003264:	6853      	ldr	r3, [r2, #4]
 8003266:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800326a:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 800326c:	430b      	orrs	r3, r1
 800326e:	6053      	str	r3, [r2, #4]
 8003270:	e7eb      	b.n	800324a <UART_AdvFeatureConfig+0xa2>

08003272 <UART_WaitOnFlagUntilTimeout>:
{
 8003272:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003276:	4605      	mov	r5, r0
 8003278:	460e      	mov	r6, r1
 800327a:	4617      	mov	r7, r2
 800327c:	4699      	mov	r9, r3
 800327e:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003282:	682b      	ldr	r3, [r5, #0]
 8003284:	69dc      	ldr	r4, [r3, #28]
 8003286:	ea36 0404 	bics.w	r4, r6, r4
 800328a:	bf0c      	ite	eq
 800328c:	2401      	moveq	r4, #1
 800328e:	2400      	movne	r4, #0
 8003290:	42bc      	cmp	r4, r7
 8003292:	d136      	bne.n	8003302 <UART_WaitOnFlagUntilTimeout+0x90>
    if (Timeout != HAL_MAX_DELAY)
 8003294:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8003298:	d0f3      	beq.n	8003282 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800329a:	f7fd fef7 	bl	800108c <HAL_GetTick>
 800329e:	eba0 0009 	sub.w	r0, r0, r9
 80032a2:	4540      	cmp	r0, r8
 80032a4:	d830      	bhi.n	8003308 <UART_WaitOnFlagUntilTimeout+0x96>
 80032a6:	f1b8 0f00 	cmp.w	r8, #0
 80032aa:	d02f      	beq.n	800330c <UART_WaitOnFlagUntilTimeout+0x9a>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80032ac:	682b      	ldr	r3, [r5, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	f012 0f04 	tst.w	r2, #4
 80032b4:	d0e5      	beq.n	8003282 <UART_WaitOnFlagUntilTimeout+0x10>
 80032b6:	2e80      	cmp	r6, #128	@ 0x80
 80032b8:	d0e3      	beq.n	8003282 <UART_WaitOnFlagUntilTimeout+0x10>
 80032ba:	2e40      	cmp	r6, #64	@ 0x40
 80032bc:	d0e1      	beq.n	8003282 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80032be:	69da      	ldr	r2, [r3, #28]
 80032c0:	f012 0f08 	tst.w	r2, #8
 80032c4:	d111      	bne.n	80032ea <UART_WaitOnFlagUntilTimeout+0x78>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80032c6:	69da      	ldr	r2, [r3, #28]
 80032c8:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 80032cc:	d0d9      	beq.n	8003282 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80032ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80032d2:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 80032d4:	4628      	mov	r0, r5
 80032d6:	f7ff fda9 	bl	8002e2c <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80032da:	2320      	movs	r3, #32
 80032dc:	f8c5 3084 	str.w	r3, [r5, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 80032e0:	2300      	movs	r3, #0
 80032e2:	f885 3078 	strb.w	r3, [r5, #120]	@ 0x78
          return HAL_TIMEOUT;
 80032e6:	2003      	movs	r0, #3
 80032e8:	e00c      	b.n	8003304 <UART_WaitOnFlagUntilTimeout+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80032ea:	2408      	movs	r4, #8
 80032ec:	621c      	str	r4, [r3, #32]
          UART_EndRxTransfer(huart);
 80032ee:	4628      	mov	r0, r5
 80032f0:	f7ff fd9c 	bl	8002e2c <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80032f4:	f8c5 4084 	str.w	r4, [r5, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 80032f8:	2300      	movs	r3, #0
 80032fa:	f885 3078 	strb.w	r3, [r5, #120]	@ 0x78
          return HAL_ERROR;
 80032fe:	2001      	movs	r0, #1
 8003300:	e000      	b.n	8003304 <UART_WaitOnFlagUntilTimeout+0x92>
  return HAL_OK;
 8003302:	2000      	movs	r0, #0
}
 8003304:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8003308:	2003      	movs	r0, #3
 800330a:	e7fb      	b.n	8003304 <UART_WaitOnFlagUntilTimeout+0x92>
 800330c:	2003      	movs	r0, #3
 800330e:	e7f9      	b.n	8003304 <UART_WaitOnFlagUntilTimeout+0x92>

08003310 <UART_CheckIdleState>:
{
 8003310:	b530      	push	{r4, r5, lr}
 8003312:	b083      	sub	sp, #12
 8003314:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003316:	2300      	movs	r3, #0
 8003318:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  tickstart = HAL_GetTick();
 800331c:	f7fd feb6 	bl	800108c <HAL_GetTick>
 8003320:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003322:	6822      	ldr	r2, [r4, #0]
 8003324:	6812      	ldr	r2, [r2, #0]
 8003326:	f012 0f08 	tst.w	r2, #8
 800332a:	d10f      	bne.n	800334c <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800332c:	6823      	ldr	r3, [r4, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f013 0f04 	tst.w	r3, #4
 8003334:	d126      	bne.n	8003384 <UART_CheckIdleState+0x74>
  huart->gState = HAL_UART_STATE_READY;
 8003336:	2320      	movs	r3, #32
 8003338:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800333a:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800333e:	2000      	movs	r0, #0
 8003340:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003342:	6660      	str	r0, [r4, #100]	@ 0x64
  __HAL_UNLOCK(huart);
 8003344:	f884 0078 	strb.w	r0, [r4, #120]	@ 0x78
}
 8003348:	b003      	add	sp, #12
 800334a:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800334c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003350:	9300      	str	r3, [sp, #0]
 8003352:	4603      	mov	r3, r0
 8003354:	2200      	movs	r2, #0
 8003356:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800335a:	4620      	mov	r0, r4
 800335c:	f7ff ff89 	bl	8003272 <UART_WaitOnFlagUntilTimeout>
 8003360:	2800      	cmp	r0, #0
 8003362:	d0e3      	beq.n	800332c <UART_CheckIdleState+0x1c>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003364:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003366:	e852 3f00 	ldrex	r3, [r2]
 800336a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800336e:	e842 3100 	strex	r1, r3, [r2]
 8003372:	2900      	cmp	r1, #0
 8003374:	d1f6      	bne.n	8003364 <UART_CheckIdleState+0x54>
      huart->gState = HAL_UART_STATE_READY;
 8003376:	2320      	movs	r3, #32
 8003378:	67e3      	str	r3, [r4, #124]	@ 0x7c
      __HAL_UNLOCK(huart);
 800337a:	2300      	movs	r3, #0
 800337c:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
      return HAL_TIMEOUT;
 8003380:	2003      	movs	r0, #3
 8003382:	e7e1      	b.n	8003348 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003384:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003388:	9300      	str	r3, [sp, #0]
 800338a:	462b      	mov	r3, r5
 800338c:	2200      	movs	r2, #0
 800338e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003392:	4620      	mov	r0, r4
 8003394:	f7ff ff6d 	bl	8003272 <UART_WaitOnFlagUntilTimeout>
 8003398:	2800      	cmp	r0, #0
 800339a:	d0cc      	beq.n	8003336 <UART_CheckIdleState+0x26>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800339c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800339e:	e852 3f00 	ldrex	r3, [r2]
 80033a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a6:	e842 3100 	strex	r1, r3, [r2]
 80033aa:	2900      	cmp	r1, #0
 80033ac:	d1f6      	bne.n	800339c <UART_CheckIdleState+0x8c>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033ae:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b0:	f102 0308 	add.w	r3, r2, #8
 80033b4:	e853 3f00 	ldrex	r3, [r3]
 80033b8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033bc:	3208      	adds	r2, #8
 80033be:	e842 3100 	strex	r1, r3, [r2]
 80033c2:	2900      	cmp	r1, #0
 80033c4:	d1f3      	bne.n	80033ae <UART_CheckIdleState+0x9e>
      huart->RxState = HAL_UART_STATE_READY;
 80033c6:	2320      	movs	r3, #32
 80033c8:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
      __HAL_UNLOCK(huart);
 80033cc:	2300      	movs	r3, #0
 80033ce:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
      return HAL_TIMEOUT;
 80033d2:	2003      	movs	r0, #3
 80033d4:	e7b8      	b.n	8003348 <UART_CheckIdleState+0x38>

080033d6 <HAL_UART_Init>:
  if (huart == NULL)
 80033d6:	b368      	cbz	r0, 8003434 <HAL_UART_Init+0x5e>
{
 80033d8:	b510      	push	{r4, lr}
 80033da:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80033dc:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 80033de:	b303      	cbz	r3, 8003422 <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 80033e0:	2324      	movs	r3, #36	@ 0x24
 80033e2:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 80033e4:	6822      	ldr	r2, [r4, #0]
 80033e6:	6813      	ldr	r3, [r2, #0]
 80033e8:	f023 0301 	bic.w	r3, r3, #1
 80033ec:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033ee:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80033f0:	b9e3      	cbnz	r3, 800342c <HAL_UART_Init+0x56>
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033f2:	4620      	mov	r0, r4
 80033f4:	f7ff fd44 	bl	8002e80 <UART_SetConfig>
 80033f8:	2801      	cmp	r0, #1
 80033fa:	d011      	beq.n	8003420 <HAL_UART_Init+0x4a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033fc:	6822      	ldr	r2, [r4, #0]
 80033fe:	6853      	ldr	r3, [r2, #4]
 8003400:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8003404:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003406:	6822      	ldr	r2, [r4, #0]
 8003408:	6893      	ldr	r3, [r2, #8]
 800340a:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 800340e:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8003410:	6822      	ldr	r2, [r4, #0]
 8003412:	6813      	ldr	r3, [r2, #0]
 8003414:	f043 0301 	orr.w	r3, r3, #1
 8003418:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800341a:	4620      	mov	r0, r4
 800341c:	f7ff ff78 	bl	8003310 <UART_CheckIdleState>
}
 8003420:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8003422:	f880 3078 	strb.w	r3, [r0, #120]	@ 0x78
    HAL_UART_MspInit(huart);
 8003426:	f7fe fc4d 	bl	8001cc4 <HAL_UART_MspInit>
 800342a:	e7d9      	b.n	80033e0 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 800342c:	4620      	mov	r0, r4
 800342e:	f7ff febb 	bl	80031a8 <UART_AdvFeatureConfig>
 8003432:	e7de      	b.n	80033f2 <HAL_UART_Init+0x1c>
    return HAL_ERROR;
 8003434:	2001      	movs	r0, #1
}
 8003436:	4770      	bx	lr

08003438 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003438:	e7fe      	b.n	8003438 <NMI_Handler>

0800343a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800343a:	e7fe      	b.n	800343a <HardFault_Handler>

0800343c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800343c:	e7fe      	b.n	800343c <MemManage_Handler>

0800343e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800343e:	e7fe      	b.n	800343e <BusFault_Handler>

08003440 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003440:	e7fe      	b.n	8003440 <UsageFault_Handler>

08003442 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003442:	4770      	bx	lr

08003444 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003444:	4770      	bx	lr

08003446 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003446:	4770      	bx	lr

08003448 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003448:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800344a:	f7fd fe13 	bl	8001074 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800344e:	bd08      	pop	{r3, pc}

08003450 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003450:	b570      	push	{r4, r5, r6, lr}
 8003452:	460c      	mov	r4, r1
 8003454:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003456:	2500      	movs	r5, #0
 8003458:	e006      	b.n	8003468 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 800345a:	f3af 8000 	nop.w
 800345e:	4621      	mov	r1, r4
 8003460:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003464:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8003466:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003468:	42b5      	cmp	r5, r6
 800346a:	dbf6      	blt.n	800345a <_read+0xa>
  }

  return len;
}
 800346c:	4630      	mov	r0, r6
 800346e:	bd70      	pop	{r4, r5, r6, pc}

08003470 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8003470:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003474:	4770      	bx	lr

08003476 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8003476:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800347a:	604b      	str	r3, [r1, #4]
  return 0;
}
 800347c:	2000      	movs	r0, #0
 800347e:	4770      	bx	lr

08003480 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8003480:	2001      	movs	r0, #1
 8003482:	4770      	bx	lr

08003484 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8003484:	2000      	movs	r0, #0
 8003486:	4770      	bx	lr

08003488 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003488:	b510      	push	{r4, lr}
 800348a:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800348c:	4a0c      	ldr	r2, [pc, #48]	@ (80034c0 <_sbrk+0x38>)
 800348e:	490d      	ldr	r1, [pc, #52]	@ (80034c4 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003490:	480d      	ldr	r0, [pc, #52]	@ (80034c8 <_sbrk+0x40>)
 8003492:	6800      	ldr	r0, [r0, #0]
 8003494:	b140      	cbz	r0, 80034a8 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003496:	480c      	ldr	r0, [pc, #48]	@ (80034c8 <_sbrk+0x40>)
 8003498:	6800      	ldr	r0, [r0, #0]
 800349a:	4403      	add	r3, r0
 800349c:	1a52      	subs	r2, r2, r1
 800349e:	4293      	cmp	r3, r2
 80034a0:	d806      	bhi.n	80034b0 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80034a2:	4a09      	ldr	r2, [pc, #36]	@ (80034c8 <_sbrk+0x40>)
 80034a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80034a6:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80034a8:	4807      	ldr	r0, [pc, #28]	@ (80034c8 <_sbrk+0x40>)
 80034aa:	4c08      	ldr	r4, [pc, #32]	@ (80034cc <_sbrk+0x44>)
 80034ac:	6004      	str	r4, [r0, #0]
 80034ae:	e7f2      	b.n	8003496 <_sbrk+0xe>
    errno = ENOMEM;
 80034b0:	f000 f920 	bl	80036f4 <__errno>
 80034b4:	230c      	movs	r3, #12
 80034b6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80034b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80034bc:	e7f3      	b.n	80034a6 <_sbrk+0x1e>
 80034be:	bf00      	nop
 80034c0:	20018000 	.word	0x20018000
 80034c4:	00000400 	.word	0x00000400
 80034c8:	2000020c 	.word	0x2000020c
 80034cc:	20000360 	.word	0x20000360

080034d0 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80034d0:	4a03      	ldr	r2, [pc, #12]	@ (80034e0 <SystemInit+0x10>)
 80034d2:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80034d6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80034da:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80034de:	4770      	bx	lr
 80034e0:	e000ed00 	.word	0xe000ed00

080034e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80034e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800351c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80034e8:	f7ff fff2 	bl	80034d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80034ec:	480c      	ldr	r0, [pc, #48]	@ (8003520 <LoopForever+0x6>)
  ldr r1, =_edata
 80034ee:	490d      	ldr	r1, [pc, #52]	@ (8003524 <LoopForever+0xa>)
  ldr r2, =_sidata
 80034f0:	4a0d      	ldr	r2, [pc, #52]	@ (8003528 <LoopForever+0xe>)
  movs r3, #0
 80034f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80034f4:	e002      	b.n	80034fc <LoopCopyDataInit>

080034f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034fa:	3304      	adds	r3, #4

080034fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003500:	d3f9      	bcc.n	80034f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003502:	4a0a      	ldr	r2, [pc, #40]	@ (800352c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003504:	4c0a      	ldr	r4, [pc, #40]	@ (8003530 <LoopForever+0x16>)
  movs r3, #0
 8003506:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003508:	e001      	b.n	800350e <LoopFillZerobss>

0800350a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800350a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800350c:	3204      	adds	r2, #4

0800350e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800350e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003510:	d3fb      	bcc.n	800350a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003512:	f000 f8f5 	bl	8003700 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003516:	f7fd fcd9 	bl	8000ecc <main>

0800351a <LoopForever>:

LoopForever:
    b LoopForever
 800351a:	e7fe      	b.n	800351a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800351c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003520:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003524:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8003528:	08004af0 	.word	0x08004af0
  ldr r2, =_sbss
 800352c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8003530:	2000035c 	.word	0x2000035c

08003534 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003534:	e7fe      	b.n	8003534 <ADC1_2_IRQHandler>
	...

08003538 <std>:
 8003538:	2300      	movs	r3, #0
 800353a:	b510      	push	{r4, lr}
 800353c:	4604      	mov	r4, r0
 800353e:	e9c0 3300 	strd	r3, r3, [r0]
 8003542:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003546:	6083      	str	r3, [r0, #8]
 8003548:	8181      	strh	r1, [r0, #12]
 800354a:	6643      	str	r3, [r0, #100]	@ 0x64
 800354c:	81c2      	strh	r2, [r0, #14]
 800354e:	6183      	str	r3, [r0, #24]
 8003550:	4619      	mov	r1, r3
 8003552:	2208      	movs	r2, #8
 8003554:	305c      	adds	r0, #92	@ 0x5c
 8003556:	f000 f8c5 	bl	80036e4 <memset>
 800355a:	4b0d      	ldr	r3, [pc, #52]	@ (8003590 <std+0x58>)
 800355c:	6263      	str	r3, [r4, #36]	@ 0x24
 800355e:	4b0d      	ldr	r3, [pc, #52]	@ (8003594 <std+0x5c>)
 8003560:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003562:	4b0d      	ldr	r3, [pc, #52]	@ (8003598 <std+0x60>)
 8003564:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003566:	4b0d      	ldr	r3, [pc, #52]	@ (800359c <std+0x64>)
 8003568:	6323      	str	r3, [r4, #48]	@ 0x30
 800356a:	4b0d      	ldr	r3, [pc, #52]	@ (80035a0 <std+0x68>)
 800356c:	6224      	str	r4, [r4, #32]
 800356e:	429c      	cmp	r4, r3
 8003570:	d006      	beq.n	8003580 <std+0x48>
 8003572:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003576:	4294      	cmp	r4, r2
 8003578:	d002      	beq.n	8003580 <std+0x48>
 800357a:	33d0      	adds	r3, #208	@ 0xd0
 800357c:	429c      	cmp	r4, r3
 800357e:	d105      	bne.n	800358c <std+0x54>
 8003580:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003584:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003588:	f000 b8de 	b.w	8003748 <__retarget_lock_init_recursive>
 800358c:	bd10      	pop	{r4, pc}
 800358e:	bf00      	nop
 8003590:	08003f9d 	.word	0x08003f9d
 8003594:	08003fbf 	.word	0x08003fbf
 8003598:	08003ff7 	.word	0x08003ff7
 800359c:	0800401d 	.word	0x0800401d
 80035a0:	20000210 	.word	0x20000210

080035a4 <stdio_exit_handler>:
 80035a4:	4a02      	ldr	r2, [pc, #8]	@ (80035b0 <stdio_exit_handler+0xc>)
 80035a6:	4903      	ldr	r1, [pc, #12]	@ (80035b4 <stdio_exit_handler+0x10>)
 80035a8:	4803      	ldr	r0, [pc, #12]	@ (80035b8 <stdio_exit_handler+0x14>)
 80035aa:	f000 b86b 	b.w	8003684 <_fwalk_sglue>
 80035ae:	bf00      	nop
 80035b0:	20000010 	.word	0x20000010
 80035b4:	08003f35 	.word	0x08003f35
 80035b8:	20000020 	.word	0x20000020

080035bc <cleanup_stdio>:
 80035bc:	6841      	ldr	r1, [r0, #4]
 80035be:	4b0c      	ldr	r3, [pc, #48]	@ (80035f0 <cleanup_stdio+0x34>)
 80035c0:	4299      	cmp	r1, r3
 80035c2:	b510      	push	{r4, lr}
 80035c4:	4604      	mov	r4, r0
 80035c6:	d001      	beq.n	80035cc <cleanup_stdio+0x10>
 80035c8:	f000 fcb4 	bl	8003f34 <_fflush_r>
 80035cc:	68a1      	ldr	r1, [r4, #8]
 80035ce:	4b09      	ldr	r3, [pc, #36]	@ (80035f4 <cleanup_stdio+0x38>)
 80035d0:	4299      	cmp	r1, r3
 80035d2:	d002      	beq.n	80035da <cleanup_stdio+0x1e>
 80035d4:	4620      	mov	r0, r4
 80035d6:	f000 fcad 	bl	8003f34 <_fflush_r>
 80035da:	68e1      	ldr	r1, [r4, #12]
 80035dc:	4b06      	ldr	r3, [pc, #24]	@ (80035f8 <cleanup_stdio+0x3c>)
 80035de:	4299      	cmp	r1, r3
 80035e0:	d004      	beq.n	80035ec <cleanup_stdio+0x30>
 80035e2:	4620      	mov	r0, r4
 80035e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035e8:	f000 bca4 	b.w	8003f34 <_fflush_r>
 80035ec:	bd10      	pop	{r4, pc}
 80035ee:	bf00      	nop
 80035f0:	20000210 	.word	0x20000210
 80035f4:	20000278 	.word	0x20000278
 80035f8:	200002e0 	.word	0x200002e0

080035fc <global_stdio_init.part.0>:
 80035fc:	4b0c      	ldr	r3, [pc, #48]	@ (8003630 <global_stdio_init.part.0+0x34>)
 80035fe:	4a0d      	ldr	r2, [pc, #52]	@ (8003634 <global_stdio_init.part.0+0x38>)
 8003600:	480d      	ldr	r0, [pc, #52]	@ (8003638 <global_stdio_init.part.0+0x3c>)
 8003602:	b510      	push	{r4, lr}
 8003604:	2104      	movs	r1, #4
 8003606:	601a      	str	r2, [r3, #0]
 8003608:	2200      	movs	r2, #0
 800360a:	f7ff ff95 	bl	8003538 <std>
 800360e:	4b0a      	ldr	r3, [pc, #40]	@ (8003638 <global_stdio_init.part.0+0x3c>)
 8003610:	2201      	movs	r2, #1
 8003612:	461c      	mov	r4, r3
 8003614:	2109      	movs	r1, #9
 8003616:	f103 0068 	add.w	r0, r3, #104	@ 0x68
 800361a:	f7ff ff8d 	bl	8003538 <std>
 800361e:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003622:	2202      	movs	r2, #2
 8003624:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003628:	2112      	movs	r1, #18
 800362a:	f7ff bf85 	b.w	8003538 <std>
 800362e:	bf00      	nop
 8003630:	20000348 	.word	0x20000348
 8003634:	080035a5 	.word	0x080035a5
 8003638:	20000210 	.word	0x20000210

0800363c <__sfp_lock_acquire>:
 800363c:	4801      	ldr	r0, [pc, #4]	@ (8003644 <__sfp_lock_acquire+0x8>)
 800363e:	f000 b884 	b.w	800374a <__retarget_lock_acquire_recursive>
 8003642:	bf00      	nop
 8003644:	2000034d 	.word	0x2000034d

08003648 <__sfp_lock_release>:
 8003648:	4801      	ldr	r0, [pc, #4]	@ (8003650 <__sfp_lock_release+0x8>)
 800364a:	f000 b87f 	b.w	800374c <__retarget_lock_release_recursive>
 800364e:	bf00      	nop
 8003650:	2000034d 	.word	0x2000034d

08003654 <__sinit>:
 8003654:	b510      	push	{r4, lr}
 8003656:	4604      	mov	r4, r0
 8003658:	f7ff fff0 	bl	800363c <__sfp_lock_acquire>
 800365c:	6a23      	ldr	r3, [r4, #32]
 800365e:	b11b      	cbz	r3, 8003668 <__sinit+0x14>
 8003660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003664:	f7ff bff0 	b.w	8003648 <__sfp_lock_release>
 8003668:	4b04      	ldr	r3, [pc, #16]	@ (800367c <__sinit+0x28>)
 800366a:	6223      	str	r3, [r4, #32]
 800366c:	4b04      	ldr	r3, [pc, #16]	@ (8003680 <__sinit+0x2c>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d1f5      	bne.n	8003660 <__sinit+0xc>
 8003674:	f7ff ffc2 	bl	80035fc <global_stdio_init.part.0>
 8003678:	e7f2      	b.n	8003660 <__sinit+0xc>
 800367a:	bf00      	nop
 800367c:	080035bd 	.word	0x080035bd
 8003680:	20000348 	.word	0x20000348

08003684 <_fwalk_sglue>:
 8003684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003688:	4607      	mov	r7, r0
 800368a:	4688      	mov	r8, r1
 800368c:	4614      	mov	r4, r2
 800368e:	2600      	movs	r6, #0
 8003690:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003694:	f1b9 0901 	subs.w	r9, r9, #1
 8003698:	d505      	bpl.n	80036a6 <_fwalk_sglue+0x22>
 800369a:	6824      	ldr	r4, [r4, #0]
 800369c:	2c00      	cmp	r4, #0
 800369e:	d1f7      	bne.n	8003690 <_fwalk_sglue+0xc>
 80036a0:	4630      	mov	r0, r6
 80036a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036a6:	89ab      	ldrh	r3, [r5, #12]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d907      	bls.n	80036bc <_fwalk_sglue+0x38>
 80036ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80036b0:	3301      	adds	r3, #1
 80036b2:	d003      	beq.n	80036bc <_fwalk_sglue+0x38>
 80036b4:	4629      	mov	r1, r5
 80036b6:	4638      	mov	r0, r7
 80036b8:	47c0      	blx	r8
 80036ba:	4306      	orrs	r6, r0
 80036bc:	3568      	adds	r5, #104	@ 0x68
 80036be:	e7e9      	b.n	8003694 <_fwalk_sglue+0x10>

080036c0 <iprintf>:
 80036c0:	b40f      	push	{r0, r1, r2, r3}
 80036c2:	b507      	push	{r0, r1, r2, lr}
 80036c4:	4906      	ldr	r1, [pc, #24]	@ (80036e0 <iprintf+0x20>)
 80036c6:	ab04      	add	r3, sp, #16
 80036c8:	6808      	ldr	r0, [r1, #0]
 80036ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80036ce:	6881      	ldr	r1, [r0, #8]
 80036d0:	9301      	str	r3, [sp, #4]
 80036d2:	f000 f865 	bl	80037a0 <_vfiprintf_r>
 80036d6:	b003      	add	sp, #12
 80036d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80036dc:	b004      	add	sp, #16
 80036de:	4770      	bx	lr
 80036e0:	2000001c 	.word	0x2000001c

080036e4 <memset>:
 80036e4:	4402      	add	r2, r0
 80036e6:	4603      	mov	r3, r0
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d100      	bne.n	80036ee <memset+0xa>
 80036ec:	4770      	bx	lr
 80036ee:	f803 1b01 	strb.w	r1, [r3], #1
 80036f2:	e7f9      	b.n	80036e8 <memset+0x4>

080036f4 <__errno>:
 80036f4:	4b01      	ldr	r3, [pc, #4]	@ (80036fc <__errno+0x8>)
 80036f6:	6818      	ldr	r0, [r3, #0]
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	2000001c 	.word	0x2000001c

08003700 <__libc_init_array>:
 8003700:	b570      	push	{r4, r5, r6, lr}
 8003702:	4b0d      	ldr	r3, [pc, #52]	@ (8003738 <__libc_init_array+0x38>)
 8003704:	4d0d      	ldr	r5, [pc, #52]	@ (800373c <__libc_init_array+0x3c>)
 8003706:	1b5b      	subs	r3, r3, r5
 8003708:	109c      	asrs	r4, r3, #2
 800370a:	2600      	movs	r6, #0
 800370c:	42a6      	cmp	r6, r4
 800370e:	d109      	bne.n	8003724 <__libc_init_array+0x24>
 8003710:	f001 f95e 	bl	80049d0 <_init>
 8003714:	4d0a      	ldr	r5, [pc, #40]	@ (8003740 <__libc_init_array+0x40>)
 8003716:	4b0b      	ldr	r3, [pc, #44]	@ (8003744 <__libc_init_array+0x44>)
 8003718:	1b5b      	subs	r3, r3, r5
 800371a:	109c      	asrs	r4, r3, #2
 800371c:	2600      	movs	r6, #0
 800371e:	42a6      	cmp	r6, r4
 8003720:	d105      	bne.n	800372e <__libc_init_array+0x2e>
 8003722:	bd70      	pop	{r4, r5, r6, pc}
 8003724:	f855 3b04 	ldr.w	r3, [r5], #4
 8003728:	4798      	blx	r3
 800372a:	3601      	adds	r6, #1
 800372c:	e7ee      	b.n	800370c <__libc_init_array+0xc>
 800372e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003732:	4798      	blx	r3
 8003734:	3601      	adds	r6, #1
 8003736:	e7f2      	b.n	800371e <__libc_init_array+0x1e>
 8003738:	08004ae0 	.word	0x08004ae0
 800373c:	08004ae0 	.word	0x08004ae0
 8003740:	08004ae0 	.word	0x08004ae0
 8003744:	08004ae4 	.word	0x08004ae4

08003748 <__retarget_lock_init_recursive>:
 8003748:	4770      	bx	lr

0800374a <__retarget_lock_acquire_recursive>:
 800374a:	4770      	bx	lr

0800374c <__retarget_lock_release_recursive>:
 800374c:	4770      	bx	lr

0800374e <__sfputc_r>:
 800374e:	6893      	ldr	r3, [r2, #8]
 8003750:	3b01      	subs	r3, #1
 8003752:	2b00      	cmp	r3, #0
 8003754:	b410      	push	{r4}
 8003756:	6093      	str	r3, [r2, #8]
 8003758:	da08      	bge.n	800376c <__sfputc_r+0x1e>
 800375a:	6994      	ldr	r4, [r2, #24]
 800375c:	42a3      	cmp	r3, r4
 800375e:	db01      	blt.n	8003764 <__sfputc_r+0x16>
 8003760:	290a      	cmp	r1, #10
 8003762:	d103      	bne.n	800376c <__sfputc_r+0x1e>
 8003764:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003768:	f000 bc5c 	b.w	8004024 <__swbuf_r>
 800376c:	6813      	ldr	r3, [r2, #0]
 800376e:	1c58      	adds	r0, r3, #1
 8003770:	6010      	str	r0, [r2, #0]
 8003772:	7019      	strb	r1, [r3, #0]
 8003774:	4608      	mov	r0, r1
 8003776:	f85d 4b04 	ldr.w	r4, [sp], #4
 800377a:	4770      	bx	lr

0800377c <__sfputs_r>:
 800377c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800377e:	4606      	mov	r6, r0
 8003780:	460f      	mov	r7, r1
 8003782:	4614      	mov	r4, r2
 8003784:	18d5      	adds	r5, r2, r3
 8003786:	42ac      	cmp	r4, r5
 8003788:	d101      	bne.n	800378e <__sfputs_r+0x12>
 800378a:	2000      	movs	r0, #0
 800378c:	e007      	b.n	800379e <__sfputs_r+0x22>
 800378e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003792:	463a      	mov	r2, r7
 8003794:	4630      	mov	r0, r6
 8003796:	f7ff ffda 	bl	800374e <__sfputc_r>
 800379a:	1c43      	adds	r3, r0, #1
 800379c:	d1f3      	bne.n	8003786 <__sfputs_r+0xa>
 800379e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080037a0 <_vfiprintf_r>:
 80037a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037a4:	460d      	mov	r5, r1
 80037a6:	b09d      	sub	sp, #116	@ 0x74
 80037a8:	4614      	mov	r4, r2
 80037aa:	4698      	mov	r8, r3
 80037ac:	4606      	mov	r6, r0
 80037ae:	b118      	cbz	r0, 80037b8 <_vfiprintf_r+0x18>
 80037b0:	6a03      	ldr	r3, [r0, #32]
 80037b2:	b90b      	cbnz	r3, 80037b8 <_vfiprintf_r+0x18>
 80037b4:	f7ff ff4e 	bl	8003654 <__sinit>
 80037b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80037ba:	07d9      	lsls	r1, r3, #31
 80037bc:	d405      	bmi.n	80037ca <_vfiprintf_r+0x2a>
 80037be:	89ab      	ldrh	r3, [r5, #12]
 80037c0:	059a      	lsls	r2, r3, #22
 80037c2:	d402      	bmi.n	80037ca <_vfiprintf_r+0x2a>
 80037c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80037c6:	f7ff ffc0 	bl	800374a <__retarget_lock_acquire_recursive>
 80037ca:	89ab      	ldrh	r3, [r5, #12]
 80037cc:	071b      	lsls	r3, r3, #28
 80037ce:	d501      	bpl.n	80037d4 <_vfiprintf_r+0x34>
 80037d0:	692b      	ldr	r3, [r5, #16]
 80037d2:	b99b      	cbnz	r3, 80037fc <_vfiprintf_r+0x5c>
 80037d4:	4629      	mov	r1, r5
 80037d6:	4630      	mov	r0, r6
 80037d8:	f000 fc62 	bl	80040a0 <__swsetup_r>
 80037dc:	b170      	cbz	r0, 80037fc <_vfiprintf_r+0x5c>
 80037de:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80037e0:	07dc      	lsls	r4, r3, #31
 80037e2:	d504      	bpl.n	80037ee <_vfiprintf_r+0x4e>
 80037e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80037e8:	b01d      	add	sp, #116	@ 0x74
 80037ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037ee:	89ab      	ldrh	r3, [r5, #12]
 80037f0:	0598      	lsls	r0, r3, #22
 80037f2:	d4f7      	bmi.n	80037e4 <_vfiprintf_r+0x44>
 80037f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80037f6:	f7ff ffa9 	bl	800374c <__retarget_lock_release_recursive>
 80037fa:	e7f3      	b.n	80037e4 <_vfiprintf_r+0x44>
 80037fc:	2300      	movs	r3, #0
 80037fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8003800:	2320      	movs	r3, #32
 8003802:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003806:	f8cd 800c 	str.w	r8, [sp, #12]
 800380a:	2330      	movs	r3, #48	@ 0x30
 800380c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80039bc <_vfiprintf_r+0x21c>
 8003810:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003814:	f04f 0901 	mov.w	r9, #1
 8003818:	4623      	mov	r3, r4
 800381a:	469a      	mov	sl, r3
 800381c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003820:	b10a      	cbz	r2, 8003826 <_vfiprintf_r+0x86>
 8003822:	2a25      	cmp	r2, #37	@ 0x25
 8003824:	d1f9      	bne.n	800381a <_vfiprintf_r+0x7a>
 8003826:	ebba 0b04 	subs.w	fp, sl, r4
 800382a:	d00b      	beq.n	8003844 <_vfiprintf_r+0xa4>
 800382c:	465b      	mov	r3, fp
 800382e:	4622      	mov	r2, r4
 8003830:	4629      	mov	r1, r5
 8003832:	4630      	mov	r0, r6
 8003834:	f7ff ffa2 	bl	800377c <__sfputs_r>
 8003838:	3001      	adds	r0, #1
 800383a:	f000 80a7 	beq.w	800398c <_vfiprintf_r+0x1ec>
 800383e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003840:	445a      	add	r2, fp
 8003842:	9209      	str	r2, [sp, #36]	@ 0x24
 8003844:	f89a 3000 	ldrb.w	r3, [sl]
 8003848:	2b00      	cmp	r3, #0
 800384a:	f000 809f 	beq.w	800398c <_vfiprintf_r+0x1ec>
 800384e:	2300      	movs	r3, #0
 8003850:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003854:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003858:	f10a 0a01 	add.w	sl, sl, #1
 800385c:	9304      	str	r3, [sp, #16]
 800385e:	9307      	str	r3, [sp, #28]
 8003860:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003864:	931a      	str	r3, [sp, #104]	@ 0x68
 8003866:	4654      	mov	r4, sl
 8003868:	2205      	movs	r2, #5
 800386a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800386e:	4853      	ldr	r0, [pc, #332]	@ (80039bc <_vfiprintf_r+0x21c>)
 8003870:	f7fc fc8e 	bl	8000190 <memchr>
 8003874:	9a04      	ldr	r2, [sp, #16]
 8003876:	b9d8      	cbnz	r0, 80038b0 <_vfiprintf_r+0x110>
 8003878:	06d1      	lsls	r1, r2, #27
 800387a:	bf44      	itt	mi
 800387c:	2320      	movmi	r3, #32
 800387e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003882:	0713      	lsls	r3, r2, #28
 8003884:	bf44      	itt	mi
 8003886:	232b      	movmi	r3, #43	@ 0x2b
 8003888:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800388c:	f89a 3000 	ldrb.w	r3, [sl]
 8003890:	2b2a      	cmp	r3, #42	@ 0x2a
 8003892:	d015      	beq.n	80038c0 <_vfiprintf_r+0x120>
 8003894:	9a07      	ldr	r2, [sp, #28]
 8003896:	4654      	mov	r4, sl
 8003898:	2000      	movs	r0, #0
 800389a:	f04f 0c0a 	mov.w	ip, #10
 800389e:	4621      	mov	r1, r4
 80038a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80038a4:	3b30      	subs	r3, #48	@ 0x30
 80038a6:	2b09      	cmp	r3, #9
 80038a8:	d94b      	bls.n	8003942 <_vfiprintf_r+0x1a2>
 80038aa:	b1b0      	cbz	r0, 80038da <_vfiprintf_r+0x13a>
 80038ac:	9207      	str	r2, [sp, #28]
 80038ae:	e014      	b.n	80038da <_vfiprintf_r+0x13a>
 80038b0:	eba0 0308 	sub.w	r3, r0, r8
 80038b4:	fa09 f303 	lsl.w	r3, r9, r3
 80038b8:	4313      	orrs	r3, r2
 80038ba:	9304      	str	r3, [sp, #16]
 80038bc:	46a2      	mov	sl, r4
 80038be:	e7d2      	b.n	8003866 <_vfiprintf_r+0xc6>
 80038c0:	9b03      	ldr	r3, [sp, #12]
 80038c2:	1d19      	adds	r1, r3, #4
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	9103      	str	r1, [sp, #12]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	bfbb      	ittet	lt
 80038cc:	425b      	neglt	r3, r3
 80038ce:	f042 0202 	orrlt.w	r2, r2, #2
 80038d2:	9307      	strge	r3, [sp, #28]
 80038d4:	9307      	strlt	r3, [sp, #28]
 80038d6:	bfb8      	it	lt
 80038d8:	9204      	strlt	r2, [sp, #16]
 80038da:	7823      	ldrb	r3, [r4, #0]
 80038dc:	2b2e      	cmp	r3, #46	@ 0x2e
 80038de:	d10a      	bne.n	80038f6 <_vfiprintf_r+0x156>
 80038e0:	7863      	ldrb	r3, [r4, #1]
 80038e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80038e4:	d132      	bne.n	800394c <_vfiprintf_r+0x1ac>
 80038e6:	9b03      	ldr	r3, [sp, #12]
 80038e8:	1d1a      	adds	r2, r3, #4
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	9203      	str	r2, [sp, #12]
 80038ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80038f2:	3402      	adds	r4, #2
 80038f4:	9305      	str	r3, [sp, #20]
 80038f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80039cc <_vfiprintf_r+0x22c>
 80038fa:	7821      	ldrb	r1, [r4, #0]
 80038fc:	2203      	movs	r2, #3
 80038fe:	4650      	mov	r0, sl
 8003900:	f7fc fc46 	bl	8000190 <memchr>
 8003904:	b138      	cbz	r0, 8003916 <_vfiprintf_r+0x176>
 8003906:	9b04      	ldr	r3, [sp, #16]
 8003908:	eba0 000a 	sub.w	r0, r0, sl
 800390c:	2240      	movs	r2, #64	@ 0x40
 800390e:	4082      	lsls	r2, r0
 8003910:	4313      	orrs	r3, r2
 8003912:	3401      	adds	r4, #1
 8003914:	9304      	str	r3, [sp, #16]
 8003916:	f814 1b01 	ldrb.w	r1, [r4], #1
 800391a:	4829      	ldr	r0, [pc, #164]	@ (80039c0 <_vfiprintf_r+0x220>)
 800391c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003920:	2206      	movs	r2, #6
 8003922:	f7fc fc35 	bl	8000190 <memchr>
 8003926:	2800      	cmp	r0, #0
 8003928:	d03f      	beq.n	80039aa <_vfiprintf_r+0x20a>
 800392a:	4b26      	ldr	r3, [pc, #152]	@ (80039c4 <_vfiprintf_r+0x224>)
 800392c:	bb1b      	cbnz	r3, 8003976 <_vfiprintf_r+0x1d6>
 800392e:	9b03      	ldr	r3, [sp, #12]
 8003930:	3307      	adds	r3, #7
 8003932:	f023 0307 	bic.w	r3, r3, #7
 8003936:	3308      	adds	r3, #8
 8003938:	9303      	str	r3, [sp, #12]
 800393a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800393c:	443b      	add	r3, r7
 800393e:	9309      	str	r3, [sp, #36]	@ 0x24
 8003940:	e76a      	b.n	8003818 <_vfiprintf_r+0x78>
 8003942:	fb0c 3202 	mla	r2, ip, r2, r3
 8003946:	460c      	mov	r4, r1
 8003948:	2001      	movs	r0, #1
 800394a:	e7a8      	b.n	800389e <_vfiprintf_r+0xfe>
 800394c:	2300      	movs	r3, #0
 800394e:	3401      	adds	r4, #1
 8003950:	9305      	str	r3, [sp, #20]
 8003952:	4619      	mov	r1, r3
 8003954:	f04f 0c0a 	mov.w	ip, #10
 8003958:	4620      	mov	r0, r4
 800395a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800395e:	3a30      	subs	r2, #48	@ 0x30
 8003960:	2a09      	cmp	r2, #9
 8003962:	d903      	bls.n	800396c <_vfiprintf_r+0x1cc>
 8003964:	2b00      	cmp	r3, #0
 8003966:	d0c6      	beq.n	80038f6 <_vfiprintf_r+0x156>
 8003968:	9105      	str	r1, [sp, #20]
 800396a:	e7c4      	b.n	80038f6 <_vfiprintf_r+0x156>
 800396c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003970:	4604      	mov	r4, r0
 8003972:	2301      	movs	r3, #1
 8003974:	e7f0      	b.n	8003958 <_vfiprintf_r+0x1b8>
 8003976:	ab03      	add	r3, sp, #12
 8003978:	9300      	str	r3, [sp, #0]
 800397a:	462a      	mov	r2, r5
 800397c:	4b12      	ldr	r3, [pc, #72]	@ (80039c8 <_vfiprintf_r+0x228>)
 800397e:	a904      	add	r1, sp, #16
 8003980:	4630      	mov	r0, r6
 8003982:	f3af 8000 	nop.w
 8003986:	4607      	mov	r7, r0
 8003988:	1c78      	adds	r0, r7, #1
 800398a:	d1d6      	bne.n	800393a <_vfiprintf_r+0x19a>
 800398c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800398e:	07d9      	lsls	r1, r3, #31
 8003990:	d405      	bmi.n	800399e <_vfiprintf_r+0x1fe>
 8003992:	89ab      	ldrh	r3, [r5, #12]
 8003994:	059a      	lsls	r2, r3, #22
 8003996:	d402      	bmi.n	800399e <_vfiprintf_r+0x1fe>
 8003998:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800399a:	f7ff fed7 	bl	800374c <__retarget_lock_release_recursive>
 800399e:	89ab      	ldrh	r3, [r5, #12]
 80039a0:	065b      	lsls	r3, r3, #25
 80039a2:	f53f af1f 	bmi.w	80037e4 <_vfiprintf_r+0x44>
 80039a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80039a8:	e71e      	b.n	80037e8 <_vfiprintf_r+0x48>
 80039aa:	ab03      	add	r3, sp, #12
 80039ac:	9300      	str	r3, [sp, #0]
 80039ae:	462a      	mov	r2, r5
 80039b0:	4b05      	ldr	r3, [pc, #20]	@ (80039c8 <_vfiprintf_r+0x228>)
 80039b2:	a904      	add	r1, sp, #16
 80039b4:	4630      	mov	r0, r6
 80039b6:	f000 f91b 	bl	8003bf0 <_printf_i>
 80039ba:	e7e4      	b.n	8003986 <_vfiprintf_r+0x1e6>
 80039bc:	08004a6c 	.word	0x08004a6c
 80039c0:	08004a76 	.word	0x08004a76
 80039c4:	00000000 	.word	0x00000000
 80039c8:	0800377d 	.word	0x0800377d
 80039cc:	08004a72 	.word	0x08004a72

080039d0 <sbrk_aligned>:
 80039d0:	b570      	push	{r4, r5, r6, lr}
 80039d2:	4e0f      	ldr	r6, [pc, #60]	@ (8003a10 <sbrk_aligned+0x40>)
 80039d4:	460c      	mov	r4, r1
 80039d6:	6831      	ldr	r1, [r6, #0]
 80039d8:	4605      	mov	r5, r0
 80039da:	b911      	cbnz	r1, 80039e2 <sbrk_aligned+0x12>
 80039dc:	f000 fc46 	bl	800426c <_sbrk_r>
 80039e0:	6030      	str	r0, [r6, #0]
 80039e2:	4621      	mov	r1, r4
 80039e4:	4628      	mov	r0, r5
 80039e6:	f000 fc41 	bl	800426c <_sbrk_r>
 80039ea:	1c43      	adds	r3, r0, #1
 80039ec:	d103      	bne.n	80039f6 <sbrk_aligned+0x26>
 80039ee:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80039f2:	4620      	mov	r0, r4
 80039f4:	bd70      	pop	{r4, r5, r6, pc}
 80039f6:	1cc4      	adds	r4, r0, #3
 80039f8:	f024 0403 	bic.w	r4, r4, #3
 80039fc:	42a0      	cmp	r0, r4
 80039fe:	d0f8      	beq.n	80039f2 <sbrk_aligned+0x22>
 8003a00:	1a21      	subs	r1, r4, r0
 8003a02:	4628      	mov	r0, r5
 8003a04:	f000 fc32 	bl	800426c <_sbrk_r>
 8003a08:	3001      	adds	r0, #1
 8003a0a:	d1f2      	bne.n	80039f2 <sbrk_aligned+0x22>
 8003a0c:	e7ef      	b.n	80039ee <sbrk_aligned+0x1e>
 8003a0e:	bf00      	nop
 8003a10:	20000350 	.word	0x20000350

08003a14 <_malloc_r>:
 8003a14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a18:	1ccd      	adds	r5, r1, #3
 8003a1a:	f025 0503 	bic.w	r5, r5, #3
 8003a1e:	3508      	adds	r5, #8
 8003a20:	2d0c      	cmp	r5, #12
 8003a22:	bf38      	it	cc
 8003a24:	250c      	movcc	r5, #12
 8003a26:	2d00      	cmp	r5, #0
 8003a28:	4606      	mov	r6, r0
 8003a2a:	db01      	blt.n	8003a30 <_malloc_r+0x1c>
 8003a2c:	42a9      	cmp	r1, r5
 8003a2e:	d904      	bls.n	8003a3a <_malloc_r+0x26>
 8003a30:	230c      	movs	r3, #12
 8003a32:	6033      	str	r3, [r6, #0]
 8003a34:	2000      	movs	r0, #0
 8003a36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a3a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003b10 <_malloc_r+0xfc>
 8003a3e:	f000 faa1 	bl	8003f84 <__malloc_lock>
 8003a42:	f8d8 3000 	ldr.w	r3, [r8]
 8003a46:	461c      	mov	r4, r3
 8003a48:	bb44      	cbnz	r4, 8003a9c <_malloc_r+0x88>
 8003a4a:	4629      	mov	r1, r5
 8003a4c:	4630      	mov	r0, r6
 8003a4e:	f7ff ffbf 	bl	80039d0 <sbrk_aligned>
 8003a52:	1c43      	adds	r3, r0, #1
 8003a54:	4604      	mov	r4, r0
 8003a56:	d158      	bne.n	8003b0a <_malloc_r+0xf6>
 8003a58:	f8d8 4000 	ldr.w	r4, [r8]
 8003a5c:	4627      	mov	r7, r4
 8003a5e:	2f00      	cmp	r7, #0
 8003a60:	d143      	bne.n	8003aea <_malloc_r+0xd6>
 8003a62:	2c00      	cmp	r4, #0
 8003a64:	d04b      	beq.n	8003afe <_malloc_r+0xea>
 8003a66:	6823      	ldr	r3, [r4, #0]
 8003a68:	4639      	mov	r1, r7
 8003a6a:	4630      	mov	r0, r6
 8003a6c:	eb04 0903 	add.w	r9, r4, r3
 8003a70:	f000 fbfc 	bl	800426c <_sbrk_r>
 8003a74:	4581      	cmp	r9, r0
 8003a76:	d142      	bne.n	8003afe <_malloc_r+0xea>
 8003a78:	6821      	ldr	r1, [r4, #0]
 8003a7a:	1a6d      	subs	r5, r5, r1
 8003a7c:	4629      	mov	r1, r5
 8003a7e:	4630      	mov	r0, r6
 8003a80:	f7ff ffa6 	bl	80039d0 <sbrk_aligned>
 8003a84:	3001      	adds	r0, #1
 8003a86:	d03a      	beq.n	8003afe <_malloc_r+0xea>
 8003a88:	6823      	ldr	r3, [r4, #0]
 8003a8a:	442b      	add	r3, r5
 8003a8c:	6023      	str	r3, [r4, #0]
 8003a8e:	f8d8 3000 	ldr.w	r3, [r8]
 8003a92:	685a      	ldr	r2, [r3, #4]
 8003a94:	bb62      	cbnz	r2, 8003af0 <_malloc_r+0xdc>
 8003a96:	f8c8 7000 	str.w	r7, [r8]
 8003a9a:	e00f      	b.n	8003abc <_malloc_r+0xa8>
 8003a9c:	6822      	ldr	r2, [r4, #0]
 8003a9e:	1b52      	subs	r2, r2, r5
 8003aa0:	d420      	bmi.n	8003ae4 <_malloc_r+0xd0>
 8003aa2:	2a0b      	cmp	r2, #11
 8003aa4:	d917      	bls.n	8003ad6 <_malloc_r+0xc2>
 8003aa6:	1961      	adds	r1, r4, r5
 8003aa8:	42a3      	cmp	r3, r4
 8003aaa:	6025      	str	r5, [r4, #0]
 8003aac:	bf18      	it	ne
 8003aae:	6059      	strne	r1, [r3, #4]
 8003ab0:	6863      	ldr	r3, [r4, #4]
 8003ab2:	bf08      	it	eq
 8003ab4:	f8c8 1000 	streq.w	r1, [r8]
 8003ab8:	5162      	str	r2, [r4, r5]
 8003aba:	604b      	str	r3, [r1, #4]
 8003abc:	4630      	mov	r0, r6
 8003abe:	f000 fa67 	bl	8003f90 <__malloc_unlock>
 8003ac2:	f104 000b 	add.w	r0, r4, #11
 8003ac6:	1d23      	adds	r3, r4, #4
 8003ac8:	f020 0007 	bic.w	r0, r0, #7
 8003acc:	1ac2      	subs	r2, r0, r3
 8003ace:	bf1c      	itt	ne
 8003ad0:	1a1b      	subne	r3, r3, r0
 8003ad2:	50a3      	strne	r3, [r4, r2]
 8003ad4:	e7af      	b.n	8003a36 <_malloc_r+0x22>
 8003ad6:	6862      	ldr	r2, [r4, #4]
 8003ad8:	42a3      	cmp	r3, r4
 8003ada:	bf0c      	ite	eq
 8003adc:	f8c8 2000 	streq.w	r2, [r8]
 8003ae0:	605a      	strne	r2, [r3, #4]
 8003ae2:	e7eb      	b.n	8003abc <_malloc_r+0xa8>
 8003ae4:	4623      	mov	r3, r4
 8003ae6:	6864      	ldr	r4, [r4, #4]
 8003ae8:	e7ae      	b.n	8003a48 <_malloc_r+0x34>
 8003aea:	463c      	mov	r4, r7
 8003aec:	687f      	ldr	r7, [r7, #4]
 8003aee:	e7b6      	b.n	8003a5e <_malloc_r+0x4a>
 8003af0:	461a      	mov	r2, r3
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	42a3      	cmp	r3, r4
 8003af6:	d1fb      	bne.n	8003af0 <_malloc_r+0xdc>
 8003af8:	2300      	movs	r3, #0
 8003afa:	6053      	str	r3, [r2, #4]
 8003afc:	e7de      	b.n	8003abc <_malloc_r+0xa8>
 8003afe:	230c      	movs	r3, #12
 8003b00:	6033      	str	r3, [r6, #0]
 8003b02:	4630      	mov	r0, r6
 8003b04:	f000 fa44 	bl	8003f90 <__malloc_unlock>
 8003b08:	e794      	b.n	8003a34 <_malloc_r+0x20>
 8003b0a:	6005      	str	r5, [r0, #0]
 8003b0c:	e7d6      	b.n	8003abc <_malloc_r+0xa8>
 8003b0e:	bf00      	nop
 8003b10:	20000354 	.word	0x20000354

08003b14 <_printf_common>:
 8003b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b18:	4616      	mov	r6, r2
 8003b1a:	4698      	mov	r8, r3
 8003b1c:	688a      	ldr	r2, [r1, #8]
 8003b1e:	690b      	ldr	r3, [r1, #16]
 8003b20:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003b24:	4293      	cmp	r3, r2
 8003b26:	bfb8      	it	lt
 8003b28:	4613      	movlt	r3, r2
 8003b2a:	6033      	str	r3, [r6, #0]
 8003b2c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003b30:	4607      	mov	r7, r0
 8003b32:	460c      	mov	r4, r1
 8003b34:	b10a      	cbz	r2, 8003b3a <_printf_common+0x26>
 8003b36:	3301      	adds	r3, #1
 8003b38:	6033      	str	r3, [r6, #0]
 8003b3a:	6823      	ldr	r3, [r4, #0]
 8003b3c:	0699      	lsls	r1, r3, #26
 8003b3e:	bf42      	ittt	mi
 8003b40:	6833      	ldrmi	r3, [r6, #0]
 8003b42:	3302      	addmi	r3, #2
 8003b44:	6033      	strmi	r3, [r6, #0]
 8003b46:	6825      	ldr	r5, [r4, #0]
 8003b48:	f015 0506 	ands.w	r5, r5, #6
 8003b4c:	d106      	bne.n	8003b5c <_printf_common+0x48>
 8003b4e:	f104 0a19 	add.w	sl, r4, #25
 8003b52:	68e3      	ldr	r3, [r4, #12]
 8003b54:	6832      	ldr	r2, [r6, #0]
 8003b56:	1a9b      	subs	r3, r3, r2
 8003b58:	42ab      	cmp	r3, r5
 8003b5a:	dc26      	bgt.n	8003baa <_printf_common+0x96>
 8003b5c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003b60:	6822      	ldr	r2, [r4, #0]
 8003b62:	3b00      	subs	r3, #0
 8003b64:	bf18      	it	ne
 8003b66:	2301      	movne	r3, #1
 8003b68:	0692      	lsls	r2, r2, #26
 8003b6a:	d42b      	bmi.n	8003bc4 <_printf_common+0xb0>
 8003b6c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003b70:	4641      	mov	r1, r8
 8003b72:	4638      	mov	r0, r7
 8003b74:	47c8      	blx	r9
 8003b76:	3001      	adds	r0, #1
 8003b78:	d01e      	beq.n	8003bb8 <_printf_common+0xa4>
 8003b7a:	6823      	ldr	r3, [r4, #0]
 8003b7c:	6922      	ldr	r2, [r4, #16]
 8003b7e:	f003 0306 	and.w	r3, r3, #6
 8003b82:	2b04      	cmp	r3, #4
 8003b84:	bf02      	ittt	eq
 8003b86:	68e5      	ldreq	r5, [r4, #12]
 8003b88:	6833      	ldreq	r3, [r6, #0]
 8003b8a:	1aed      	subeq	r5, r5, r3
 8003b8c:	68a3      	ldr	r3, [r4, #8]
 8003b8e:	bf0c      	ite	eq
 8003b90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b94:	2500      	movne	r5, #0
 8003b96:	4293      	cmp	r3, r2
 8003b98:	bfc4      	itt	gt
 8003b9a:	1a9b      	subgt	r3, r3, r2
 8003b9c:	18ed      	addgt	r5, r5, r3
 8003b9e:	2600      	movs	r6, #0
 8003ba0:	341a      	adds	r4, #26
 8003ba2:	42b5      	cmp	r5, r6
 8003ba4:	d11a      	bne.n	8003bdc <_printf_common+0xc8>
 8003ba6:	2000      	movs	r0, #0
 8003ba8:	e008      	b.n	8003bbc <_printf_common+0xa8>
 8003baa:	2301      	movs	r3, #1
 8003bac:	4652      	mov	r2, sl
 8003bae:	4641      	mov	r1, r8
 8003bb0:	4638      	mov	r0, r7
 8003bb2:	47c8      	blx	r9
 8003bb4:	3001      	adds	r0, #1
 8003bb6:	d103      	bne.n	8003bc0 <_printf_common+0xac>
 8003bb8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003bbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bc0:	3501      	adds	r5, #1
 8003bc2:	e7c6      	b.n	8003b52 <_printf_common+0x3e>
 8003bc4:	18e1      	adds	r1, r4, r3
 8003bc6:	1c5a      	adds	r2, r3, #1
 8003bc8:	2030      	movs	r0, #48	@ 0x30
 8003bca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003bce:	4422      	add	r2, r4
 8003bd0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003bd4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003bd8:	3302      	adds	r3, #2
 8003bda:	e7c7      	b.n	8003b6c <_printf_common+0x58>
 8003bdc:	2301      	movs	r3, #1
 8003bde:	4622      	mov	r2, r4
 8003be0:	4641      	mov	r1, r8
 8003be2:	4638      	mov	r0, r7
 8003be4:	47c8      	blx	r9
 8003be6:	3001      	adds	r0, #1
 8003be8:	d0e6      	beq.n	8003bb8 <_printf_common+0xa4>
 8003bea:	3601      	adds	r6, #1
 8003bec:	e7d9      	b.n	8003ba2 <_printf_common+0x8e>
	...

08003bf0 <_printf_i>:
 8003bf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003bf4:	7e0f      	ldrb	r7, [r1, #24]
 8003bf6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003bf8:	2f78      	cmp	r7, #120	@ 0x78
 8003bfa:	4691      	mov	r9, r2
 8003bfc:	4680      	mov	r8, r0
 8003bfe:	460c      	mov	r4, r1
 8003c00:	469a      	mov	sl, r3
 8003c02:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003c06:	d807      	bhi.n	8003c18 <_printf_i+0x28>
 8003c08:	2f62      	cmp	r7, #98	@ 0x62
 8003c0a:	d80a      	bhi.n	8003c22 <_printf_i+0x32>
 8003c0c:	2f00      	cmp	r7, #0
 8003c0e:	f000 80d2 	beq.w	8003db6 <_printf_i+0x1c6>
 8003c12:	2f58      	cmp	r7, #88	@ 0x58
 8003c14:	f000 80b7 	beq.w	8003d86 <_printf_i+0x196>
 8003c18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003c1c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003c20:	e03a      	b.n	8003c98 <_printf_i+0xa8>
 8003c22:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003c26:	2b15      	cmp	r3, #21
 8003c28:	d8f6      	bhi.n	8003c18 <_printf_i+0x28>
 8003c2a:	a101      	add	r1, pc, #4	@ (adr r1, 8003c30 <_printf_i+0x40>)
 8003c2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c30:	08003c89 	.word	0x08003c89
 8003c34:	08003c9d 	.word	0x08003c9d
 8003c38:	08003c19 	.word	0x08003c19
 8003c3c:	08003c19 	.word	0x08003c19
 8003c40:	08003c19 	.word	0x08003c19
 8003c44:	08003c19 	.word	0x08003c19
 8003c48:	08003c9d 	.word	0x08003c9d
 8003c4c:	08003c19 	.word	0x08003c19
 8003c50:	08003c19 	.word	0x08003c19
 8003c54:	08003c19 	.word	0x08003c19
 8003c58:	08003c19 	.word	0x08003c19
 8003c5c:	08003d9d 	.word	0x08003d9d
 8003c60:	08003cc7 	.word	0x08003cc7
 8003c64:	08003d53 	.word	0x08003d53
 8003c68:	08003c19 	.word	0x08003c19
 8003c6c:	08003c19 	.word	0x08003c19
 8003c70:	08003dbf 	.word	0x08003dbf
 8003c74:	08003c19 	.word	0x08003c19
 8003c78:	08003cc7 	.word	0x08003cc7
 8003c7c:	08003c19 	.word	0x08003c19
 8003c80:	08003c19 	.word	0x08003c19
 8003c84:	08003d5b 	.word	0x08003d5b
 8003c88:	6833      	ldr	r3, [r6, #0]
 8003c8a:	1d1a      	adds	r2, r3, #4
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	6032      	str	r2, [r6, #0]
 8003c90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003c94:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e09d      	b.n	8003dd8 <_printf_i+0x1e8>
 8003c9c:	6833      	ldr	r3, [r6, #0]
 8003c9e:	6820      	ldr	r0, [r4, #0]
 8003ca0:	1d19      	adds	r1, r3, #4
 8003ca2:	6031      	str	r1, [r6, #0]
 8003ca4:	0606      	lsls	r6, r0, #24
 8003ca6:	d501      	bpl.n	8003cac <_printf_i+0xbc>
 8003ca8:	681d      	ldr	r5, [r3, #0]
 8003caa:	e003      	b.n	8003cb4 <_printf_i+0xc4>
 8003cac:	0645      	lsls	r5, r0, #25
 8003cae:	d5fb      	bpl.n	8003ca8 <_printf_i+0xb8>
 8003cb0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003cb4:	2d00      	cmp	r5, #0
 8003cb6:	da03      	bge.n	8003cc0 <_printf_i+0xd0>
 8003cb8:	232d      	movs	r3, #45	@ 0x2d
 8003cba:	426d      	negs	r5, r5
 8003cbc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003cc0:	4859      	ldr	r0, [pc, #356]	@ (8003e28 <_printf_i+0x238>)
 8003cc2:	230a      	movs	r3, #10
 8003cc4:	e010      	b.n	8003ce8 <_printf_i+0xf8>
 8003cc6:	6821      	ldr	r1, [r4, #0]
 8003cc8:	6833      	ldr	r3, [r6, #0]
 8003cca:	0608      	lsls	r0, r1, #24
 8003ccc:	f853 5b04 	ldr.w	r5, [r3], #4
 8003cd0:	d402      	bmi.n	8003cd8 <_printf_i+0xe8>
 8003cd2:	0649      	lsls	r1, r1, #25
 8003cd4:	bf48      	it	mi
 8003cd6:	b2ad      	uxthmi	r5, r5
 8003cd8:	2f6f      	cmp	r7, #111	@ 0x6f
 8003cda:	4853      	ldr	r0, [pc, #332]	@ (8003e28 <_printf_i+0x238>)
 8003cdc:	6033      	str	r3, [r6, #0]
 8003cde:	d159      	bne.n	8003d94 <_printf_i+0x1a4>
 8003ce0:	2308      	movs	r3, #8
 8003ce2:	2100      	movs	r1, #0
 8003ce4:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003ce8:	6866      	ldr	r6, [r4, #4]
 8003cea:	60a6      	str	r6, [r4, #8]
 8003cec:	2e00      	cmp	r6, #0
 8003cee:	db05      	blt.n	8003cfc <_printf_i+0x10c>
 8003cf0:	6821      	ldr	r1, [r4, #0]
 8003cf2:	432e      	orrs	r6, r5
 8003cf4:	f021 0104 	bic.w	r1, r1, #4
 8003cf8:	6021      	str	r1, [r4, #0]
 8003cfa:	d04d      	beq.n	8003d98 <_printf_i+0x1a8>
 8003cfc:	4616      	mov	r6, r2
 8003cfe:	fbb5 f1f3 	udiv	r1, r5, r3
 8003d02:	fb03 5711 	mls	r7, r3, r1, r5
 8003d06:	5dc7      	ldrb	r7, [r0, r7]
 8003d08:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003d0c:	462f      	mov	r7, r5
 8003d0e:	42bb      	cmp	r3, r7
 8003d10:	460d      	mov	r5, r1
 8003d12:	d9f4      	bls.n	8003cfe <_printf_i+0x10e>
 8003d14:	2b08      	cmp	r3, #8
 8003d16:	d10b      	bne.n	8003d30 <_printf_i+0x140>
 8003d18:	6823      	ldr	r3, [r4, #0]
 8003d1a:	07df      	lsls	r7, r3, #31
 8003d1c:	d508      	bpl.n	8003d30 <_printf_i+0x140>
 8003d1e:	6923      	ldr	r3, [r4, #16]
 8003d20:	6861      	ldr	r1, [r4, #4]
 8003d22:	4299      	cmp	r1, r3
 8003d24:	bfde      	ittt	le
 8003d26:	2330      	movle	r3, #48	@ 0x30
 8003d28:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003d2c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003d30:	1b92      	subs	r2, r2, r6
 8003d32:	6122      	str	r2, [r4, #16]
 8003d34:	f8cd a000 	str.w	sl, [sp]
 8003d38:	464b      	mov	r3, r9
 8003d3a:	aa03      	add	r2, sp, #12
 8003d3c:	4621      	mov	r1, r4
 8003d3e:	4640      	mov	r0, r8
 8003d40:	f7ff fee8 	bl	8003b14 <_printf_common>
 8003d44:	3001      	adds	r0, #1
 8003d46:	d14c      	bne.n	8003de2 <_printf_i+0x1f2>
 8003d48:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003d4c:	b004      	add	sp, #16
 8003d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d52:	6823      	ldr	r3, [r4, #0]
 8003d54:	f043 0320 	orr.w	r3, r3, #32
 8003d58:	6023      	str	r3, [r4, #0]
 8003d5a:	4834      	ldr	r0, [pc, #208]	@ (8003e2c <_printf_i+0x23c>)
 8003d5c:	2778      	movs	r7, #120	@ 0x78
 8003d5e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003d62:	6823      	ldr	r3, [r4, #0]
 8003d64:	6831      	ldr	r1, [r6, #0]
 8003d66:	061f      	lsls	r7, r3, #24
 8003d68:	f851 5b04 	ldr.w	r5, [r1], #4
 8003d6c:	d402      	bmi.n	8003d74 <_printf_i+0x184>
 8003d6e:	065f      	lsls	r7, r3, #25
 8003d70:	bf48      	it	mi
 8003d72:	b2ad      	uxthmi	r5, r5
 8003d74:	6031      	str	r1, [r6, #0]
 8003d76:	07d9      	lsls	r1, r3, #31
 8003d78:	bf44      	itt	mi
 8003d7a:	f043 0320 	orrmi.w	r3, r3, #32
 8003d7e:	6023      	strmi	r3, [r4, #0]
 8003d80:	b11d      	cbz	r5, 8003d8a <_printf_i+0x19a>
 8003d82:	2310      	movs	r3, #16
 8003d84:	e7ad      	b.n	8003ce2 <_printf_i+0xf2>
 8003d86:	4828      	ldr	r0, [pc, #160]	@ (8003e28 <_printf_i+0x238>)
 8003d88:	e7e9      	b.n	8003d5e <_printf_i+0x16e>
 8003d8a:	6823      	ldr	r3, [r4, #0]
 8003d8c:	f023 0320 	bic.w	r3, r3, #32
 8003d90:	6023      	str	r3, [r4, #0]
 8003d92:	e7f6      	b.n	8003d82 <_printf_i+0x192>
 8003d94:	230a      	movs	r3, #10
 8003d96:	e7a4      	b.n	8003ce2 <_printf_i+0xf2>
 8003d98:	4616      	mov	r6, r2
 8003d9a:	e7bb      	b.n	8003d14 <_printf_i+0x124>
 8003d9c:	6833      	ldr	r3, [r6, #0]
 8003d9e:	6825      	ldr	r5, [r4, #0]
 8003da0:	6961      	ldr	r1, [r4, #20]
 8003da2:	1d18      	adds	r0, r3, #4
 8003da4:	6030      	str	r0, [r6, #0]
 8003da6:	062e      	lsls	r6, r5, #24
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	d501      	bpl.n	8003db0 <_printf_i+0x1c0>
 8003dac:	6019      	str	r1, [r3, #0]
 8003dae:	e002      	b.n	8003db6 <_printf_i+0x1c6>
 8003db0:	0668      	lsls	r0, r5, #25
 8003db2:	d5fb      	bpl.n	8003dac <_printf_i+0x1bc>
 8003db4:	8019      	strh	r1, [r3, #0]
 8003db6:	2300      	movs	r3, #0
 8003db8:	6123      	str	r3, [r4, #16]
 8003dba:	4616      	mov	r6, r2
 8003dbc:	e7ba      	b.n	8003d34 <_printf_i+0x144>
 8003dbe:	6833      	ldr	r3, [r6, #0]
 8003dc0:	1d1a      	adds	r2, r3, #4
 8003dc2:	6032      	str	r2, [r6, #0]
 8003dc4:	681e      	ldr	r6, [r3, #0]
 8003dc6:	6862      	ldr	r2, [r4, #4]
 8003dc8:	2100      	movs	r1, #0
 8003dca:	4630      	mov	r0, r6
 8003dcc:	f7fc f9e0 	bl	8000190 <memchr>
 8003dd0:	b108      	cbz	r0, 8003dd6 <_printf_i+0x1e6>
 8003dd2:	1b80      	subs	r0, r0, r6
 8003dd4:	6060      	str	r0, [r4, #4]
 8003dd6:	6863      	ldr	r3, [r4, #4]
 8003dd8:	6123      	str	r3, [r4, #16]
 8003dda:	2300      	movs	r3, #0
 8003ddc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003de0:	e7a8      	b.n	8003d34 <_printf_i+0x144>
 8003de2:	6923      	ldr	r3, [r4, #16]
 8003de4:	4632      	mov	r2, r6
 8003de6:	4649      	mov	r1, r9
 8003de8:	4640      	mov	r0, r8
 8003dea:	47d0      	blx	sl
 8003dec:	3001      	adds	r0, #1
 8003dee:	d0ab      	beq.n	8003d48 <_printf_i+0x158>
 8003df0:	6823      	ldr	r3, [r4, #0]
 8003df2:	079b      	lsls	r3, r3, #30
 8003df4:	d413      	bmi.n	8003e1e <_printf_i+0x22e>
 8003df6:	68e0      	ldr	r0, [r4, #12]
 8003df8:	9b03      	ldr	r3, [sp, #12]
 8003dfa:	4298      	cmp	r0, r3
 8003dfc:	bfb8      	it	lt
 8003dfe:	4618      	movlt	r0, r3
 8003e00:	e7a4      	b.n	8003d4c <_printf_i+0x15c>
 8003e02:	2301      	movs	r3, #1
 8003e04:	4632      	mov	r2, r6
 8003e06:	4649      	mov	r1, r9
 8003e08:	4640      	mov	r0, r8
 8003e0a:	47d0      	blx	sl
 8003e0c:	3001      	adds	r0, #1
 8003e0e:	d09b      	beq.n	8003d48 <_printf_i+0x158>
 8003e10:	3501      	adds	r5, #1
 8003e12:	68e3      	ldr	r3, [r4, #12]
 8003e14:	9903      	ldr	r1, [sp, #12]
 8003e16:	1a5b      	subs	r3, r3, r1
 8003e18:	42ab      	cmp	r3, r5
 8003e1a:	dcf2      	bgt.n	8003e02 <_printf_i+0x212>
 8003e1c:	e7eb      	b.n	8003df6 <_printf_i+0x206>
 8003e1e:	2500      	movs	r5, #0
 8003e20:	f104 0619 	add.w	r6, r4, #25
 8003e24:	e7f5      	b.n	8003e12 <_printf_i+0x222>
 8003e26:	bf00      	nop
 8003e28:	08004a7d 	.word	0x08004a7d
 8003e2c:	08004a8e 	.word	0x08004a8e

08003e30 <__sflush_r>:
 8003e30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e38:	0716      	lsls	r6, r2, #28
 8003e3a:	4605      	mov	r5, r0
 8003e3c:	460c      	mov	r4, r1
 8003e3e:	d451      	bmi.n	8003ee4 <__sflush_r+0xb4>
 8003e40:	684b      	ldr	r3, [r1, #4]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	dc02      	bgt.n	8003e4c <__sflush_r+0x1c>
 8003e46:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	dd49      	ble.n	8003ee0 <__sflush_r+0xb0>
 8003e4c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003e4e:	2e00      	cmp	r6, #0
 8003e50:	d046      	beq.n	8003ee0 <__sflush_r+0xb0>
 8003e52:	2300      	movs	r3, #0
 8003e54:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003e58:	682f      	ldr	r7, [r5, #0]
 8003e5a:	602b      	str	r3, [r5, #0]
 8003e5c:	d031      	beq.n	8003ec2 <__sflush_r+0x92>
 8003e5e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003e60:	89a3      	ldrh	r3, [r4, #12]
 8003e62:	0759      	lsls	r1, r3, #29
 8003e64:	d505      	bpl.n	8003e72 <__sflush_r+0x42>
 8003e66:	6863      	ldr	r3, [r4, #4]
 8003e68:	1ad2      	subs	r2, r2, r3
 8003e6a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003e6c:	b10b      	cbz	r3, 8003e72 <__sflush_r+0x42>
 8003e6e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003e70:	1ad2      	subs	r2, r2, r3
 8003e72:	2300      	movs	r3, #0
 8003e74:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003e76:	6a21      	ldr	r1, [r4, #32]
 8003e78:	4628      	mov	r0, r5
 8003e7a:	47b0      	blx	r6
 8003e7c:	1c42      	adds	r2, r0, #1
 8003e7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e82:	d106      	bne.n	8003e92 <__sflush_r+0x62>
 8003e84:	6829      	ldr	r1, [r5, #0]
 8003e86:	291d      	cmp	r1, #29
 8003e88:	d846      	bhi.n	8003f18 <__sflush_r+0xe8>
 8003e8a:	4a29      	ldr	r2, [pc, #164]	@ (8003f30 <__sflush_r+0x100>)
 8003e8c:	40ca      	lsrs	r2, r1
 8003e8e:	07d6      	lsls	r6, r2, #31
 8003e90:	d542      	bpl.n	8003f18 <__sflush_r+0xe8>
 8003e92:	2200      	movs	r2, #0
 8003e94:	6062      	str	r2, [r4, #4]
 8003e96:	04d9      	lsls	r1, r3, #19
 8003e98:	6922      	ldr	r2, [r4, #16]
 8003e9a:	6022      	str	r2, [r4, #0]
 8003e9c:	d504      	bpl.n	8003ea8 <__sflush_r+0x78>
 8003e9e:	1c42      	adds	r2, r0, #1
 8003ea0:	d101      	bne.n	8003ea6 <__sflush_r+0x76>
 8003ea2:	682b      	ldr	r3, [r5, #0]
 8003ea4:	b903      	cbnz	r3, 8003ea8 <__sflush_r+0x78>
 8003ea6:	6560      	str	r0, [r4, #84]	@ 0x54
 8003ea8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003eaa:	602f      	str	r7, [r5, #0]
 8003eac:	b1c1      	cbz	r1, 8003ee0 <__sflush_r+0xb0>
 8003eae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003eb2:	4299      	cmp	r1, r3
 8003eb4:	d002      	beq.n	8003ebc <__sflush_r+0x8c>
 8003eb6:	4628      	mov	r0, r5
 8003eb8:	f000 fa1c 	bl	80042f4 <_free_r>
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	6363      	str	r3, [r4, #52]	@ 0x34
 8003ec0:	e00e      	b.n	8003ee0 <__sflush_r+0xb0>
 8003ec2:	6a21      	ldr	r1, [r4, #32]
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	4628      	mov	r0, r5
 8003ec8:	47b0      	blx	r6
 8003eca:	4602      	mov	r2, r0
 8003ecc:	1c50      	adds	r0, r2, #1
 8003ece:	d1c7      	bne.n	8003e60 <__sflush_r+0x30>
 8003ed0:	682b      	ldr	r3, [r5, #0]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d0c4      	beq.n	8003e60 <__sflush_r+0x30>
 8003ed6:	2b1d      	cmp	r3, #29
 8003ed8:	d001      	beq.n	8003ede <__sflush_r+0xae>
 8003eda:	2b16      	cmp	r3, #22
 8003edc:	d11a      	bne.n	8003f14 <__sflush_r+0xe4>
 8003ede:	602f      	str	r7, [r5, #0]
 8003ee0:	2000      	movs	r0, #0
 8003ee2:	e01e      	b.n	8003f22 <__sflush_r+0xf2>
 8003ee4:	690f      	ldr	r7, [r1, #16]
 8003ee6:	2f00      	cmp	r7, #0
 8003ee8:	d0fa      	beq.n	8003ee0 <__sflush_r+0xb0>
 8003eea:	0793      	lsls	r3, r2, #30
 8003eec:	680e      	ldr	r6, [r1, #0]
 8003eee:	bf08      	it	eq
 8003ef0:	694b      	ldreq	r3, [r1, #20]
 8003ef2:	600f      	str	r7, [r1, #0]
 8003ef4:	bf18      	it	ne
 8003ef6:	2300      	movne	r3, #0
 8003ef8:	eba6 0807 	sub.w	r8, r6, r7
 8003efc:	608b      	str	r3, [r1, #8]
 8003efe:	f1b8 0f00 	cmp.w	r8, #0
 8003f02:	dded      	ble.n	8003ee0 <__sflush_r+0xb0>
 8003f04:	6a21      	ldr	r1, [r4, #32]
 8003f06:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003f08:	4643      	mov	r3, r8
 8003f0a:	463a      	mov	r2, r7
 8003f0c:	4628      	mov	r0, r5
 8003f0e:	47b0      	blx	r6
 8003f10:	2800      	cmp	r0, #0
 8003f12:	dc08      	bgt.n	8003f26 <__sflush_r+0xf6>
 8003f14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f1c:	81a3      	strh	r3, [r4, #12]
 8003f1e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f26:	4407      	add	r7, r0
 8003f28:	eba8 0800 	sub.w	r8, r8, r0
 8003f2c:	e7e7      	b.n	8003efe <__sflush_r+0xce>
 8003f2e:	bf00      	nop
 8003f30:	20400001 	.word	0x20400001

08003f34 <_fflush_r>:
 8003f34:	b538      	push	{r3, r4, r5, lr}
 8003f36:	690b      	ldr	r3, [r1, #16]
 8003f38:	4605      	mov	r5, r0
 8003f3a:	460c      	mov	r4, r1
 8003f3c:	b913      	cbnz	r3, 8003f44 <_fflush_r+0x10>
 8003f3e:	2500      	movs	r5, #0
 8003f40:	4628      	mov	r0, r5
 8003f42:	bd38      	pop	{r3, r4, r5, pc}
 8003f44:	b118      	cbz	r0, 8003f4e <_fflush_r+0x1a>
 8003f46:	6a03      	ldr	r3, [r0, #32]
 8003f48:	b90b      	cbnz	r3, 8003f4e <_fflush_r+0x1a>
 8003f4a:	f7ff fb83 	bl	8003654 <__sinit>
 8003f4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d0f3      	beq.n	8003f3e <_fflush_r+0xa>
 8003f56:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003f58:	07d0      	lsls	r0, r2, #31
 8003f5a:	d404      	bmi.n	8003f66 <_fflush_r+0x32>
 8003f5c:	0599      	lsls	r1, r3, #22
 8003f5e:	d402      	bmi.n	8003f66 <_fflush_r+0x32>
 8003f60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003f62:	f7ff fbf2 	bl	800374a <__retarget_lock_acquire_recursive>
 8003f66:	4628      	mov	r0, r5
 8003f68:	4621      	mov	r1, r4
 8003f6a:	f7ff ff61 	bl	8003e30 <__sflush_r>
 8003f6e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003f70:	07da      	lsls	r2, r3, #31
 8003f72:	4605      	mov	r5, r0
 8003f74:	d4e4      	bmi.n	8003f40 <_fflush_r+0xc>
 8003f76:	89a3      	ldrh	r3, [r4, #12]
 8003f78:	059b      	lsls	r3, r3, #22
 8003f7a:	d4e1      	bmi.n	8003f40 <_fflush_r+0xc>
 8003f7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003f7e:	f7ff fbe5 	bl	800374c <__retarget_lock_release_recursive>
 8003f82:	e7dd      	b.n	8003f40 <_fflush_r+0xc>

08003f84 <__malloc_lock>:
 8003f84:	4801      	ldr	r0, [pc, #4]	@ (8003f8c <__malloc_lock+0x8>)
 8003f86:	f7ff bbe0 	b.w	800374a <__retarget_lock_acquire_recursive>
 8003f8a:	bf00      	nop
 8003f8c:	2000034c 	.word	0x2000034c

08003f90 <__malloc_unlock>:
 8003f90:	4801      	ldr	r0, [pc, #4]	@ (8003f98 <__malloc_unlock+0x8>)
 8003f92:	f7ff bbdb 	b.w	800374c <__retarget_lock_release_recursive>
 8003f96:	bf00      	nop
 8003f98:	2000034c 	.word	0x2000034c

08003f9c <__sread>:
 8003f9c:	b510      	push	{r4, lr}
 8003f9e:	460c      	mov	r4, r1
 8003fa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fa4:	f000 f950 	bl	8004248 <_read_r>
 8003fa8:	2800      	cmp	r0, #0
 8003faa:	bfab      	itete	ge
 8003fac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003fae:	89a3      	ldrhlt	r3, [r4, #12]
 8003fb0:	181b      	addge	r3, r3, r0
 8003fb2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003fb6:	bfac      	ite	ge
 8003fb8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003fba:	81a3      	strhlt	r3, [r4, #12]
 8003fbc:	bd10      	pop	{r4, pc}

08003fbe <__swrite>:
 8003fbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fc2:	461f      	mov	r7, r3
 8003fc4:	898b      	ldrh	r3, [r1, #12]
 8003fc6:	05db      	lsls	r3, r3, #23
 8003fc8:	4605      	mov	r5, r0
 8003fca:	460c      	mov	r4, r1
 8003fcc:	4616      	mov	r6, r2
 8003fce:	d505      	bpl.n	8003fdc <__swrite+0x1e>
 8003fd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fd4:	2302      	movs	r3, #2
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f000 f924 	bl	8004224 <_lseek_r>
 8003fdc:	89a3      	ldrh	r3, [r4, #12]
 8003fde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003fe2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003fe6:	81a3      	strh	r3, [r4, #12]
 8003fe8:	4632      	mov	r2, r6
 8003fea:	463b      	mov	r3, r7
 8003fec:	4628      	mov	r0, r5
 8003fee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ff2:	f000 b94b 	b.w	800428c <_write_r>

08003ff6 <__sseek>:
 8003ff6:	b510      	push	{r4, lr}
 8003ff8:	460c      	mov	r4, r1
 8003ffa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ffe:	f000 f911 	bl	8004224 <_lseek_r>
 8004002:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004006:	1c42      	adds	r2, r0, #1
 8004008:	bf0b      	itete	eq
 800400a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800400e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004012:	81a3      	strheq	r3, [r4, #12]
 8004014:	81a3      	strhne	r3, [r4, #12]
 8004016:	bf18      	it	ne
 8004018:	6560      	strne	r0, [r4, #84]	@ 0x54
 800401a:	bd10      	pop	{r4, pc}

0800401c <__sclose>:
 800401c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004020:	f000 b946 	b.w	80042b0 <_close_r>

08004024 <__swbuf_r>:
 8004024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004026:	460e      	mov	r6, r1
 8004028:	4614      	mov	r4, r2
 800402a:	4605      	mov	r5, r0
 800402c:	b118      	cbz	r0, 8004036 <__swbuf_r+0x12>
 800402e:	6a03      	ldr	r3, [r0, #32]
 8004030:	b90b      	cbnz	r3, 8004036 <__swbuf_r+0x12>
 8004032:	f7ff fb0f 	bl	8003654 <__sinit>
 8004036:	69a3      	ldr	r3, [r4, #24]
 8004038:	60a3      	str	r3, [r4, #8]
 800403a:	89a3      	ldrh	r3, [r4, #12]
 800403c:	071a      	lsls	r2, r3, #28
 800403e:	d501      	bpl.n	8004044 <__swbuf_r+0x20>
 8004040:	6923      	ldr	r3, [r4, #16]
 8004042:	b943      	cbnz	r3, 8004056 <__swbuf_r+0x32>
 8004044:	4621      	mov	r1, r4
 8004046:	4628      	mov	r0, r5
 8004048:	f000 f82a 	bl	80040a0 <__swsetup_r>
 800404c:	b118      	cbz	r0, 8004056 <__swbuf_r+0x32>
 800404e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8004052:	4638      	mov	r0, r7
 8004054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004056:	6823      	ldr	r3, [r4, #0]
 8004058:	6922      	ldr	r2, [r4, #16]
 800405a:	1a98      	subs	r0, r3, r2
 800405c:	6963      	ldr	r3, [r4, #20]
 800405e:	b2f6      	uxtb	r6, r6
 8004060:	4283      	cmp	r3, r0
 8004062:	4637      	mov	r7, r6
 8004064:	dc05      	bgt.n	8004072 <__swbuf_r+0x4e>
 8004066:	4621      	mov	r1, r4
 8004068:	4628      	mov	r0, r5
 800406a:	f7ff ff63 	bl	8003f34 <_fflush_r>
 800406e:	2800      	cmp	r0, #0
 8004070:	d1ed      	bne.n	800404e <__swbuf_r+0x2a>
 8004072:	68a3      	ldr	r3, [r4, #8]
 8004074:	3b01      	subs	r3, #1
 8004076:	60a3      	str	r3, [r4, #8]
 8004078:	6823      	ldr	r3, [r4, #0]
 800407a:	1c5a      	adds	r2, r3, #1
 800407c:	6022      	str	r2, [r4, #0]
 800407e:	701e      	strb	r6, [r3, #0]
 8004080:	6962      	ldr	r2, [r4, #20]
 8004082:	1c43      	adds	r3, r0, #1
 8004084:	429a      	cmp	r2, r3
 8004086:	d004      	beq.n	8004092 <__swbuf_r+0x6e>
 8004088:	89a3      	ldrh	r3, [r4, #12]
 800408a:	07db      	lsls	r3, r3, #31
 800408c:	d5e1      	bpl.n	8004052 <__swbuf_r+0x2e>
 800408e:	2e0a      	cmp	r6, #10
 8004090:	d1df      	bne.n	8004052 <__swbuf_r+0x2e>
 8004092:	4621      	mov	r1, r4
 8004094:	4628      	mov	r0, r5
 8004096:	f7ff ff4d 	bl	8003f34 <_fflush_r>
 800409a:	2800      	cmp	r0, #0
 800409c:	d0d9      	beq.n	8004052 <__swbuf_r+0x2e>
 800409e:	e7d6      	b.n	800404e <__swbuf_r+0x2a>

080040a0 <__swsetup_r>:
 80040a0:	b538      	push	{r3, r4, r5, lr}
 80040a2:	4b28      	ldr	r3, [pc, #160]	@ (8004144 <__swsetup_r+0xa4>)
 80040a4:	4605      	mov	r5, r0
 80040a6:	6818      	ldr	r0, [r3, #0]
 80040a8:	460c      	mov	r4, r1
 80040aa:	b118      	cbz	r0, 80040b4 <__swsetup_r+0x14>
 80040ac:	6a03      	ldr	r3, [r0, #32]
 80040ae:	b90b      	cbnz	r3, 80040b4 <__swsetup_r+0x14>
 80040b0:	f7ff fad0 	bl	8003654 <__sinit>
 80040b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040b8:	071a      	lsls	r2, r3, #28
 80040ba:	d421      	bmi.n	8004100 <__swsetup_r+0x60>
 80040bc:	06d8      	lsls	r0, r3, #27
 80040be:	d407      	bmi.n	80040d0 <__swsetup_r+0x30>
 80040c0:	2209      	movs	r2, #9
 80040c2:	602a      	str	r2, [r5, #0]
 80040c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80040c8:	81a3      	strh	r3, [r4, #12]
 80040ca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80040ce:	e030      	b.n	8004132 <__swsetup_r+0x92>
 80040d0:	0759      	lsls	r1, r3, #29
 80040d2:	d512      	bpl.n	80040fa <__swsetup_r+0x5a>
 80040d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80040d6:	b141      	cbz	r1, 80040ea <__swsetup_r+0x4a>
 80040d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80040dc:	4299      	cmp	r1, r3
 80040de:	d002      	beq.n	80040e6 <__swsetup_r+0x46>
 80040e0:	4628      	mov	r0, r5
 80040e2:	f000 f907 	bl	80042f4 <_free_r>
 80040e6:	2300      	movs	r3, #0
 80040e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80040ea:	2200      	movs	r2, #0
 80040ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040f0:	6062      	str	r2, [r4, #4]
 80040f2:	6922      	ldr	r2, [r4, #16]
 80040f4:	6022      	str	r2, [r4, #0]
 80040f6:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80040fa:	f043 0308 	orr.w	r3, r3, #8
 80040fe:	81a3      	strh	r3, [r4, #12]
 8004100:	6922      	ldr	r2, [r4, #16]
 8004102:	b93a      	cbnz	r2, 8004114 <__swsetup_r+0x74>
 8004104:	059a      	lsls	r2, r3, #22
 8004106:	d501      	bpl.n	800410c <__swsetup_r+0x6c>
 8004108:	0618      	lsls	r0, r3, #24
 800410a:	d503      	bpl.n	8004114 <__swsetup_r+0x74>
 800410c:	4621      	mov	r1, r4
 800410e:	4628      	mov	r0, r5
 8004110:	f000 f83e 	bl	8004190 <__smakebuf_r>
 8004114:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004118:	f013 0201 	ands.w	r2, r3, #1
 800411c:	d00a      	beq.n	8004134 <__swsetup_r+0x94>
 800411e:	2200      	movs	r2, #0
 8004120:	60a2      	str	r2, [r4, #8]
 8004122:	6962      	ldr	r2, [r4, #20]
 8004124:	4252      	negs	r2, r2
 8004126:	61a2      	str	r2, [r4, #24]
 8004128:	6922      	ldr	r2, [r4, #16]
 800412a:	b942      	cbnz	r2, 800413e <__swsetup_r+0x9e>
 800412c:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004130:	d1c8      	bne.n	80040c4 <__swsetup_r+0x24>
 8004132:	bd38      	pop	{r3, r4, r5, pc}
 8004134:	0799      	lsls	r1, r3, #30
 8004136:	bf58      	it	pl
 8004138:	6962      	ldrpl	r2, [r4, #20]
 800413a:	60a2      	str	r2, [r4, #8]
 800413c:	e7f4      	b.n	8004128 <__swsetup_r+0x88>
 800413e:	2000      	movs	r0, #0
 8004140:	e7f7      	b.n	8004132 <__swsetup_r+0x92>
 8004142:	bf00      	nop
 8004144:	2000001c 	.word	0x2000001c

08004148 <__swhatbuf_r>:
 8004148:	b570      	push	{r4, r5, r6, lr}
 800414a:	460c      	mov	r4, r1
 800414c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004150:	2900      	cmp	r1, #0
 8004152:	b096      	sub	sp, #88	@ 0x58
 8004154:	4615      	mov	r5, r2
 8004156:	461e      	mov	r6, r3
 8004158:	da0a      	bge.n	8004170 <__swhatbuf_r+0x28>
 800415a:	89a1      	ldrh	r1, [r4, #12]
 800415c:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
 8004160:	d113      	bne.n	800418a <__swhatbuf_r+0x42>
 8004162:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004166:	2000      	movs	r0, #0
 8004168:	6031      	str	r1, [r6, #0]
 800416a:	602a      	str	r2, [r5, #0]
 800416c:	b016      	add	sp, #88	@ 0x58
 800416e:	bd70      	pop	{r4, r5, r6, pc}
 8004170:	466a      	mov	r2, sp
 8004172:	f000 f8ad 	bl	80042d0 <_fstat_r>
 8004176:	2800      	cmp	r0, #0
 8004178:	dbef      	blt.n	800415a <__swhatbuf_r+0x12>
 800417a:	9901      	ldr	r1, [sp, #4]
 800417c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004180:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004184:	4259      	negs	r1, r3
 8004186:	4159      	adcs	r1, r3
 8004188:	e7eb      	b.n	8004162 <__swhatbuf_r+0x1a>
 800418a:	2100      	movs	r1, #0
 800418c:	2240      	movs	r2, #64	@ 0x40
 800418e:	e7ea      	b.n	8004166 <__swhatbuf_r+0x1e>

08004190 <__smakebuf_r>:
 8004190:	898b      	ldrh	r3, [r1, #12]
 8004192:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004194:	079e      	lsls	r6, r3, #30
 8004196:	4605      	mov	r5, r0
 8004198:	460c      	mov	r4, r1
 800419a:	d507      	bpl.n	80041ac <__smakebuf_r+0x1c>
 800419c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80041a0:	6023      	str	r3, [r4, #0]
 80041a2:	6123      	str	r3, [r4, #16]
 80041a4:	2301      	movs	r3, #1
 80041a6:	6163      	str	r3, [r4, #20]
 80041a8:	b002      	add	sp, #8
 80041aa:	bd70      	pop	{r4, r5, r6, pc}
 80041ac:	ab01      	add	r3, sp, #4
 80041ae:	466a      	mov	r2, sp
 80041b0:	f7ff ffca 	bl	8004148 <__swhatbuf_r>
 80041b4:	9e00      	ldr	r6, [sp, #0]
 80041b6:	4628      	mov	r0, r5
 80041b8:	4631      	mov	r1, r6
 80041ba:	f7ff fc2b 	bl	8003a14 <_malloc_r>
 80041be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041c2:	b938      	cbnz	r0, 80041d4 <__smakebuf_r+0x44>
 80041c4:	059a      	lsls	r2, r3, #22
 80041c6:	d4ef      	bmi.n	80041a8 <__smakebuf_r+0x18>
 80041c8:	f023 0303 	bic.w	r3, r3, #3
 80041cc:	f043 0302 	orr.w	r3, r3, #2
 80041d0:	81a3      	strh	r3, [r4, #12]
 80041d2:	e7e3      	b.n	800419c <__smakebuf_r+0xc>
 80041d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041d8:	81a3      	strh	r3, [r4, #12]
 80041da:	9b01      	ldr	r3, [sp, #4]
 80041dc:	6020      	str	r0, [r4, #0]
 80041de:	e9c4 0604 	strd	r0, r6, [r4, #16]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d0e0      	beq.n	80041a8 <__smakebuf_r+0x18>
 80041e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80041ea:	4628      	mov	r0, r5
 80041ec:	f000 f80a 	bl	8004204 <_isatty_r>
 80041f0:	2800      	cmp	r0, #0
 80041f2:	d0d9      	beq.n	80041a8 <__smakebuf_r+0x18>
 80041f4:	89a3      	ldrh	r3, [r4, #12]
 80041f6:	f023 0303 	bic.w	r3, r3, #3
 80041fa:	f043 0301 	orr.w	r3, r3, #1
 80041fe:	81a3      	strh	r3, [r4, #12]
 8004200:	e7d2      	b.n	80041a8 <__smakebuf_r+0x18>
	...

08004204 <_isatty_r>:
 8004204:	b538      	push	{r3, r4, r5, lr}
 8004206:	4d06      	ldr	r5, [pc, #24]	@ (8004220 <_isatty_r+0x1c>)
 8004208:	2300      	movs	r3, #0
 800420a:	4604      	mov	r4, r0
 800420c:	4608      	mov	r0, r1
 800420e:	602b      	str	r3, [r5, #0]
 8004210:	f7ff f936 	bl	8003480 <_isatty>
 8004214:	1c43      	adds	r3, r0, #1
 8004216:	d102      	bne.n	800421e <_isatty_r+0x1a>
 8004218:	682b      	ldr	r3, [r5, #0]
 800421a:	b103      	cbz	r3, 800421e <_isatty_r+0x1a>
 800421c:	6023      	str	r3, [r4, #0]
 800421e:	bd38      	pop	{r3, r4, r5, pc}
 8004220:	20000358 	.word	0x20000358

08004224 <_lseek_r>:
 8004224:	b538      	push	{r3, r4, r5, lr}
 8004226:	4d07      	ldr	r5, [pc, #28]	@ (8004244 <_lseek_r+0x20>)
 8004228:	4604      	mov	r4, r0
 800422a:	4608      	mov	r0, r1
 800422c:	4611      	mov	r1, r2
 800422e:	2200      	movs	r2, #0
 8004230:	602a      	str	r2, [r5, #0]
 8004232:	461a      	mov	r2, r3
 8004234:	f7ff f926 	bl	8003484 <_lseek>
 8004238:	1c43      	adds	r3, r0, #1
 800423a:	d102      	bne.n	8004242 <_lseek_r+0x1e>
 800423c:	682b      	ldr	r3, [r5, #0]
 800423e:	b103      	cbz	r3, 8004242 <_lseek_r+0x1e>
 8004240:	6023      	str	r3, [r4, #0]
 8004242:	bd38      	pop	{r3, r4, r5, pc}
 8004244:	20000358 	.word	0x20000358

08004248 <_read_r>:
 8004248:	b538      	push	{r3, r4, r5, lr}
 800424a:	4d07      	ldr	r5, [pc, #28]	@ (8004268 <_read_r+0x20>)
 800424c:	4604      	mov	r4, r0
 800424e:	4608      	mov	r0, r1
 8004250:	4611      	mov	r1, r2
 8004252:	2200      	movs	r2, #0
 8004254:	602a      	str	r2, [r5, #0]
 8004256:	461a      	mov	r2, r3
 8004258:	f7ff f8fa 	bl	8003450 <_read>
 800425c:	1c43      	adds	r3, r0, #1
 800425e:	d102      	bne.n	8004266 <_read_r+0x1e>
 8004260:	682b      	ldr	r3, [r5, #0]
 8004262:	b103      	cbz	r3, 8004266 <_read_r+0x1e>
 8004264:	6023      	str	r3, [r4, #0]
 8004266:	bd38      	pop	{r3, r4, r5, pc}
 8004268:	20000358 	.word	0x20000358

0800426c <_sbrk_r>:
 800426c:	b538      	push	{r3, r4, r5, lr}
 800426e:	4d06      	ldr	r5, [pc, #24]	@ (8004288 <_sbrk_r+0x1c>)
 8004270:	2300      	movs	r3, #0
 8004272:	4604      	mov	r4, r0
 8004274:	4608      	mov	r0, r1
 8004276:	602b      	str	r3, [r5, #0]
 8004278:	f7ff f906 	bl	8003488 <_sbrk>
 800427c:	1c43      	adds	r3, r0, #1
 800427e:	d102      	bne.n	8004286 <_sbrk_r+0x1a>
 8004280:	682b      	ldr	r3, [r5, #0]
 8004282:	b103      	cbz	r3, 8004286 <_sbrk_r+0x1a>
 8004284:	6023      	str	r3, [r4, #0]
 8004286:	bd38      	pop	{r3, r4, r5, pc}
 8004288:	20000358 	.word	0x20000358

0800428c <_write_r>:
 800428c:	b538      	push	{r3, r4, r5, lr}
 800428e:	4d07      	ldr	r5, [pc, #28]	@ (80042ac <_write_r+0x20>)
 8004290:	4604      	mov	r4, r0
 8004292:	4608      	mov	r0, r1
 8004294:	4611      	mov	r1, r2
 8004296:	2200      	movs	r2, #0
 8004298:	602a      	str	r2, [r5, #0]
 800429a:	461a      	mov	r2, r3
 800429c:	f7fc fd82 	bl	8000da4 <_write>
 80042a0:	1c43      	adds	r3, r0, #1
 80042a2:	d102      	bne.n	80042aa <_write_r+0x1e>
 80042a4:	682b      	ldr	r3, [r5, #0]
 80042a6:	b103      	cbz	r3, 80042aa <_write_r+0x1e>
 80042a8:	6023      	str	r3, [r4, #0]
 80042aa:	bd38      	pop	{r3, r4, r5, pc}
 80042ac:	20000358 	.word	0x20000358

080042b0 <_close_r>:
 80042b0:	b538      	push	{r3, r4, r5, lr}
 80042b2:	4d06      	ldr	r5, [pc, #24]	@ (80042cc <_close_r+0x1c>)
 80042b4:	2300      	movs	r3, #0
 80042b6:	4604      	mov	r4, r0
 80042b8:	4608      	mov	r0, r1
 80042ba:	602b      	str	r3, [r5, #0]
 80042bc:	f7ff f8d8 	bl	8003470 <_close>
 80042c0:	1c43      	adds	r3, r0, #1
 80042c2:	d102      	bne.n	80042ca <_close_r+0x1a>
 80042c4:	682b      	ldr	r3, [r5, #0]
 80042c6:	b103      	cbz	r3, 80042ca <_close_r+0x1a>
 80042c8:	6023      	str	r3, [r4, #0]
 80042ca:	bd38      	pop	{r3, r4, r5, pc}
 80042cc:	20000358 	.word	0x20000358

080042d0 <_fstat_r>:
 80042d0:	b538      	push	{r3, r4, r5, lr}
 80042d2:	4d07      	ldr	r5, [pc, #28]	@ (80042f0 <_fstat_r+0x20>)
 80042d4:	2300      	movs	r3, #0
 80042d6:	4604      	mov	r4, r0
 80042d8:	4608      	mov	r0, r1
 80042da:	4611      	mov	r1, r2
 80042dc:	602b      	str	r3, [r5, #0]
 80042de:	f7ff f8ca 	bl	8003476 <_fstat>
 80042e2:	1c43      	adds	r3, r0, #1
 80042e4:	d102      	bne.n	80042ec <_fstat_r+0x1c>
 80042e6:	682b      	ldr	r3, [r5, #0]
 80042e8:	b103      	cbz	r3, 80042ec <_fstat_r+0x1c>
 80042ea:	6023      	str	r3, [r4, #0]
 80042ec:	bd38      	pop	{r3, r4, r5, pc}
 80042ee:	bf00      	nop
 80042f0:	20000358 	.word	0x20000358

080042f4 <_free_r>:
 80042f4:	b538      	push	{r3, r4, r5, lr}
 80042f6:	4605      	mov	r5, r0
 80042f8:	2900      	cmp	r1, #0
 80042fa:	d041      	beq.n	8004380 <_free_r+0x8c>
 80042fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004300:	1f0c      	subs	r4, r1, #4
 8004302:	2b00      	cmp	r3, #0
 8004304:	bfb8      	it	lt
 8004306:	18e4      	addlt	r4, r4, r3
 8004308:	f7ff fe3c 	bl	8003f84 <__malloc_lock>
 800430c:	4a1d      	ldr	r2, [pc, #116]	@ (8004384 <_free_r+0x90>)
 800430e:	6813      	ldr	r3, [r2, #0]
 8004310:	b933      	cbnz	r3, 8004320 <_free_r+0x2c>
 8004312:	6063      	str	r3, [r4, #4]
 8004314:	6014      	str	r4, [r2, #0]
 8004316:	4628      	mov	r0, r5
 8004318:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800431c:	f7ff be38 	b.w	8003f90 <__malloc_unlock>
 8004320:	42a3      	cmp	r3, r4
 8004322:	d908      	bls.n	8004336 <_free_r+0x42>
 8004324:	6820      	ldr	r0, [r4, #0]
 8004326:	1821      	adds	r1, r4, r0
 8004328:	428b      	cmp	r3, r1
 800432a:	bf01      	itttt	eq
 800432c:	6819      	ldreq	r1, [r3, #0]
 800432e:	685b      	ldreq	r3, [r3, #4]
 8004330:	1809      	addeq	r1, r1, r0
 8004332:	6021      	streq	r1, [r4, #0]
 8004334:	e7ed      	b.n	8004312 <_free_r+0x1e>
 8004336:	461a      	mov	r2, r3
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	b10b      	cbz	r3, 8004340 <_free_r+0x4c>
 800433c:	42a3      	cmp	r3, r4
 800433e:	d9fa      	bls.n	8004336 <_free_r+0x42>
 8004340:	6811      	ldr	r1, [r2, #0]
 8004342:	1850      	adds	r0, r2, r1
 8004344:	42a0      	cmp	r0, r4
 8004346:	d10b      	bne.n	8004360 <_free_r+0x6c>
 8004348:	6820      	ldr	r0, [r4, #0]
 800434a:	4401      	add	r1, r0
 800434c:	1850      	adds	r0, r2, r1
 800434e:	4283      	cmp	r3, r0
 8004350:	6011      	str	r1, [r2, #0]
 8004352:	d1e0      	bne.n	8004316 <_free_r+0x22>
 8004354:	6818      	ldr	r0, [r3, #0]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	6053      	str	r3, [r2, #4]
 800435a:	4408      	add	r0, r1
 800435c:	6010      	str	r0, [r2, #0]
 800435e:	e7da      	b.n	8004316 <_free_r+0x22>
 8004360:	d902      	bls.n	8004368 <_free_r+0x74>
 8004362:	230c      	movs	r3, #12
 8004364:	602b      	str	r3, [r5, #0]
 8004366:	e7d6      	b.n	8004316 <_free_r+0x22>
 8004368:	6820      	ldr	r0, [r4, #0]
 800436a:	1821      	adds	r1, r4, r0
 800436c:	428b      	cmp	r3, r1
 800436e:	bf04      	itt	eq
 8004370:	6819      	ldreq	r1, [r3, #0]
 8004372:	685b      	ldreq	r3, [r3, #4]
 8004374:	6063      	str	r3, [r4, #4]
 8004376:	bf04      	itt	eq
 8004378:	1809      	addeq	r1, r1, r0
 800437a:	6021      	streq	r1, [r4, #0]
 800437c:	6054      	str	r4, [r2, #4]
 800437e:	e7ca      	b.n	8004316 <_free_r+0x22>
 8004380:	bd38      	pop	{r3, r4, r5, pc}
 8004382:	bf00      	nop
 8004384:	20000354 	.word	0x20000354

08004388 <atan2f>:
 8004388:	f000 b822 	b.w	80043d0 <__ieee754_atan2f>

0800438c <sqrtf>:
 800438c:	b508      	push	{r3, lr}
 800438e:	ed2d 8b02 	vpush	{d8}
 8004392:	eeb0 8a40 	vmov.f32	s16, s0
 8004396:	f000 f8c1 	bl	800451c <__ieee754_sqrtf>
 800439a:	eeb4 8a48 	vcmp.f32	s16, s16
 800439e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043a2:	d606      	bvs.n	80043b2 <sqrtf+0x26>
 80043a4:	eddf 8a09 	vldr	s17, [pc, #36]	@ 80043cc <sqrtf+0x40>
 80043a8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80043ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043b0:	d402      	bmi.n	80043b8 <sqrtf+0x2c>
 80043b2:	ecbd 8b02 	vpop	{d8}
 80043b6:	bd08      	pop	{r3, pc}
 80043b8:	f7ff f99c 	bl	80036f4 <__errno>
 80043bc:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80043c0:	ecbd 8b02 	vpop	{d8}
 80043c4:	2321      	movs	r3, #33	@ 0x21
 80043c6:	6003      	str	r3, [r0, #0]
 80043c8:	bd08      	pop	{r3, pc}
 80043ca:	bf00      	nop
 80043cc:	00000000 	.word	0x00000000

080043d0 <__ieee754_atan2f>:
 80043d0:	b510      	push	{r4, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	edcd 0a01 	vstr	s1, [sp, #4]
 80043d8:	9b01      	ldr	r3, [sp, #4]
 80043da:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80043de:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80043e2:	eef0 7a40 	vmov.f32	s15, s0
 80043e6:	d830      	bhi.n	800444a <__ieee754_atan2f+0x7a>
 80043e8:	ee10 0a10 	vmov	r0, s0
 80043ec:	f020 4100 	bic.w	r1, r0, #2147483648	@ 0x80000000
 80043f0:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80043f4:	d829      	bhi.n	800444a <__ieee754_atan2f+0x7a>
 80043f6:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 80043fa:	d03e      	beq.n	800447a <__ieee754_atan2f+0xaa>
 80043fc:	179c      	asrs	r4, r3, #30
 80043fe:	f004 0402 	and.w	r4, r4, #2
 8004402:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8004406:	b331      	cbz	r1, 8004456 <__ieee754_atan2f+0x86>
 8004408:	b37a      	cbz	r2, 800446a <__ieee754_atan2f+0x9a>
 800440a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800440e:	d03f      	beq.n	8004490 <__ieee754_atan2f+0xc0>
 8004410:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8004414:	d029      	beq.n	800446a <__ieee754_atan2f+0x9a>
 8004416:	1a89      	subs	r1, r1, r2
 8004418:	f1b1 5ff4 	cmp.w	r1, #511705088	@ 0x1e800000
 800441c:	ea4f 52e1 	mov.w	r2, r1, asr #23
 8004420:	da33      	bge.n	800448a <__ieee754_atan2f+0xba>
 8004422:	2b00      	cmp	r3, #0
 8004424:	da41      	bge.n	80044aa <__ieee754_atan2f+0xda>
 8004426:	323c      	adds	r2, #60	@ 0x3c
 8004428:	da3f      	bge.n	80044aa <__ieee754_atan2f+0xda>
 800442a:	ed9f 0a33 	vldr	s0, [pc, #204]	@ 80044f8 <__ieee754_atan2f+0x128>
 800442e:	2c01      	cmp	r4, #1
 8004430:	d04d      	beq.n	80044ce <__ieee754_atan2f+0xfe>
 8004432:	2c02      	cmp	r4, #2
 8004434:	d042      	beq.n	80044bc <__ieee754_atan2f+0xec>
 8004436:	b164      	cbz	r4, 8004452 <__ieee754_atan2f+0x82>
 8004438:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80044fc <__ieee754_atan2f+0x12c>
 800443c:	eddf 7a30 	vldr	s15, [pc, #192]	@ 8004500 <__ieee754_atan2f+0x130>
 8004440:	ee30 0a07 	vadd.f32	s0, s0, s14
 8004444:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004448:	e003      	b.n	8004452 <__ieee754_atan2f+0x82>
 800444a:	ed9d 7a01 	vldr	s14, [sp, #4]
 800444e:	ee37 0a27 	vadd.f32	s0, s14, s15
 8004452:	b002      	add	sp, #8
 8004454:	bd10      	pop	{r4, pc}
 8004456:	2c02      	cmp	r4, #2
 8004458:	d00c      	beq.n	8004474 <__ieee754_atan2f+0xa4>
 800445a:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8004504 <__ieee754_atan2f+0x134>
 800445e:	2c03      	cmp	r4, #3
 8004460:	bf08      	it	eq
 8004462:	eeb0 0a47 	vmoveq.f32	s0, s14
 8004466:	b002      	add	sp, #8
 8004468:	bd10      	pop	{r4, pc}
 800446a:	2800      	cmp	r0, #0
 800446c:	db0a      	blt.n	8004484 <__ieee754_atan2f+0xb4>
 800446e:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 8004508 <__ieee754_atan2f+0x138>
 8004472:	e7ee      	b.n	8004452 <__ieee754_atan2f+0x82>
 8004474:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 8004500 <__ieee754_atan2f+0x130>
 8004478:	e7eb      	b.n	8004452 <__ieee754_atan2f+0x82>
 800447a:	b002      	add	sp, #8
 800447c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004480:	f000 b850 	b.w	8004524 <atanf>
 8004484:	ed9f 0a21 	vldr	s0, [pc, #132]	@ 800450c <__ieee754_atan2f+0x13c>
 8004488:	e7e3      	b.n	8004452 <__ieee754_atan2f+0x82>
 800448a:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8004508 <__ieee754_atan2f+0x138>
 800448e:	e7ce      	b.n	800442e <__ieee754_atan2f+0x5e>
 8004490:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8004494:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 8004498:	d020      	beq.n	80044dc <__ieee754_atan2f+0x10c>
 800449a:	2c02      	cmp	r4, #2
 800449c:	d826      	bhi.n	80044ec <__ieee754_atan2f+0x11c>
 800449e:	4b1c      	ldr	r3, [pc, #112]	@ (8004510 <__ieee754_atan2f+0x140>)
 80044a0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80044a4:	ed93 0a00 	vldr	s0, [r3]
 80044a8:	e7d3      	b.n	8004452 <__ieee754_atan2f+0x82>
 80044aa:	ed9d 7a01 	vldr	s14, [sp, #4]
 80044ae:	ee87 0a87 	vdiv.f32	s0, s15, s14
 80044b2:	f000 f909 	bl	80046c8 <fabsf>
 80044b6:	f000 f835 	bl	8004524 <atanf>
 80044ba:	e7b8      	b.n	800442e <__ieee754_atan2f+0x5e>
 80044bc:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80044fc <__ieee754_atan2f+0x12c>
 80044c0:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 8004500 <__ieee754_atan2f+0x130>
 80044c4:	ee30 0a07 	vadd.f32	s0, s0, s14
 80044c8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80044cc:	e7c1      	b.n	8004452 <__ieee754_atan2f+0x82>
 80044ce:	ee10 3a10 	vmov	r3, s0
 80044d2:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80044d6:	ee00 3a10 	vmov	s0, r3
 80044da:	e7ba      	b.n	8004452 <__ieee754_atan2f+0x82>
 80044dc:	2c02      	cmp	r4, #2
 80044de:	d808      	bhi.n	80044f2 <__ieee754_atan2f+0x122>
 80044e0:	4b0c      	ldr	r3, [pc, #48]	@ (8004514 <__ieee754_atan2f+0x144>)
 80044e2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80044e6:	ed93 0a00 	vldr	s0, [r3]
 80044ea:	e7b2      	b.n	8004452 <__ieee754_atan2f+0x82>
 80044ec:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 80044f8 <__ieee754_atan2f+0x128>
 80044f0:	e7af      	b.n	8004452 <__ieee754_atan2f+0x82>
 80044f2:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 8004518 <__ieee754_atan2f+0x148>
 80044f6:	e7ac      	b.n	8004452 <__ieee754_atan2f+0x82>
 80044f8:	00000000 	.word	0x00000000
 80044fc:	33bbbd2e 	.word	0x33bbbd2e
 8004500:	40490fdb 	.word	0x40490fdb
 8004504:	c0490fdb 	.word	0xc0490fdb
 8004508:	3fc90fdb 	.word	0x3fc90fdb
 800450c:	bfc90fdb 	.word	0xbfc90fdb
 8004510:	08004aa0 	.word	0x08004aa0
 8004514:	08004aac 	.word	0x08004aac
 8004518:	3f490fdb 	.word	0x3f490fdb

0800451c <__ieee754_sqrtf>:
 800451c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop

08004524 <atanf>:
 8004524:	b538      	push	{r3, r4, r5, lr}
 8004526:	ee10 5a10 	vmov	r5, s0
 800452a:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800452e:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8004532:	eef0 7a40 	vmov.f32	s15, s0
 8004536:	d307      	bcc.n	8004548 <atanf+0x24>
 8004538:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800453c:	d855      	bhi.n	80045ea <atanf+0xc6>
 800453e:	2d00      	cmp	r5, #0
 8004540:	dd77      	ble.n	8004632 <atanf+0x10e>
 8004542:	ed9f 0a4e 	vldr	s0, [pc, #312]	@ 800467c <atanf+0x158>
 8004546:	bd38      	pop	{r3, r4, r5, pc}
 8004548:	4b4d      	ldr	r3, [pc, #308]	@ (8004680 <atanf+0x15c>)
 800454a:	429c      	cmp	r4, r3
 800454c:	d85c      	bhi.n	8004608 <atanf+0xe4>
 800454e:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8004552:	d34d      	bcc.n	80045f0 <atanf+0xcc>
 8004554:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004558:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800455c:	ed9f 5a49 	vldr	s10, [pc, #292]	@ 8004684 <atanf+0x160>
 8004560:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8004688 <atanf+0x164>
 8004564:	eddf 5a49 	vldr	s11, [pc, #292]	@ 800468c <atanf+0x168>
 8004568:	eddf 4a49 	vldr	s9, [pc, #292]	@ 8004690 <atanf+0x16c>
 800456c:	ee66 6a06 	vmul.f32	s13, s12, s12
 8004570:	1c5a      	adds	r2, r3, #1
 8004572:	eea6 7a85 	vfma.f32	s14, s13, s10
 8004576:	eee6 4aa5 	vfma.f32	s9, s13, s11
 800457a:	ed9f 5a46 	vldr	s10, [pc, #280]	@ 8004694 <atanf+0x170>
 800457e:	eddf 5a46 	vldr	s11, [pc, #280]	@ 8004698 <atanf+0x174>
 8004582:	eea7 5a26 	vfma.f32	s10, s14, s13
 8004586:	eee4 5aa6 	vfma.f32	s11, s9, s13
 800458a:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 800469c <atanf+0x178>
 800458e:	eddf 4a44 	vldr	s9, [pc, #272]	@ 80046a0 <atanf+0x17c>
 8004592:	eea5 7a26 	vfma.f32	s14, s10, s13
 8004596:	eee5 4aa6 	vfma.f32	s9, s11, s13
 800459a:	ed9f 5a42 	vldr	s10, [pc, #264]	@ 80046a4 <atanf+0x180>
 800459e:	eddf 5a42 	vldr	s11, [pc, #264]	@ 80046a8 <atanf+0x184>
 80045a2:	eea7 5a26 	vfma.f32	s10, s14, s13
 80045a6:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 80046ac <atanf+0x188>
 80045aa:	eea4 7aa6 	vfma.f32	s14, s9, s13
 80045ae:	eee5 5a26 	vfma.f32	s11, s10, s13
 80045b2:	ee27 7a26 	vmul.f32	s14, s14, s13
 80045b6:	eea5 7a86 	vfma.f32	s14, s11, s12
 80045ba:	ee27 7a87 	vmul.f32	s14, s15, s14
 80045be:	d03b      	beq.n	8004638 <atanf+0x114>
 80045c0:	493b      	ldr	r1, [pc, #236]	@ (80046b0 <atanf+0x18c>)
 80045c2:	4a3c      	ldr	r2, [pc, #240]	@ (80046b4 <atanf+0x190>)
 80045c4:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80045c8:	edd1 6a00 	vldr	s13, [r1]
 80045cc:	ee37 7a66 	vsub.f32	s14, s14, s13
 80045d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80045d4:	edd3 6a00 	vldr	s13, [r3]
 80045d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80045dc:	2d00      	cmp	r5, #0
 80045de:	ee36 0ac7 	vsub.f32	s0, s13, s14
 80045e2:	dab0      	bge.n	8004546 <atanf+0x22>
 80045e4:	eeb1 0a40 	vneg.f32	s0, s0
 80045e8:	bd38      	pop	{r3, r4, r5, pc}
 80045ea:	ee30 0a00 	vadd.f32	s0, s0, s0
 80045ee:	bd38      	pop	{r3, r4, r5, pc}
 80045f0:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80046b8 <atanf+0x194>
 80045f4:	ee30 7a07 	vadd.f32	s14, s0, s14
 80045f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045fc:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8004600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004604:	dda6      	ble.n	8004554 <atanf+0x30>
 8004606:	bd38      	pop	{r3, r4, r5, pc}
 8004608:	f000 f85e 	bl	80046c8 <fabsf>
 800460c:	4b2b      	ldr	r3, [pc, #172]	@ (80046bc <atanf+0x198>)
 800460e:	429c      	cmp	r4, r3
 8004610:	d815      	bhi.n	800463e <atanf+0x11a>
 8004612:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8004616:	429c      	cmp	r4, r3
 8004618:	d826      	bhi.n	8004668 <atanf+0x144>
 800461a:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800461e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8004622:	eea0 7a27 	vfma.f32	s14, s0, s15
 8004626:	2300      	movs	r3, #0
 8004628:	ee30 0a27 	vadd.f32	s0, s0, s15
 800462c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8004630:	e792      	b.n	8004558 <atanf+0x34>
 8004632:	ed9f 0a23 	vldr	s0, [pc, #140]	@ 80046c0 <atanf+0x19c>
 8004636:	bd38      	pop	{r3, r4, r5, pc}
 8004638:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800463c:	bd38      	pop	{r3, r4, r5, pc}
 800463e:	4b21      	ldr	r3, [pc, #132]	@ (80046c4 <atanf+0x1a0>)
 8004640:	429c      	cmp	r4, r3
 8004642:	d80b      	bhi.n	800465c <atanf+0x138>
 8004644:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8004648:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800464c:	eea0 7a27 	vfma.f32	s14, s0, s15
 8004650:	2302      	movs	r3, #2
 8004652:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004656:	eec0 7a07 	vdiv.f32	s15, s0, s14
 800465a:	e77d      	b.n	8004558 <atanf+0x34>
 800465c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8004660:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8004664:	2303      	movs	r3, #3
 8004666:	e777      	b.n	8004558 <atanf+0x34>
 8004668:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800466c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8004670:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004674:	2301      	movs	r3, #1
 8004676:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800467a:	e76d      	b.n	8004558 <atanf+0x34>
 800467c:	3fc90fdb 	.word	0x3fc90fdb
 8004680:	3edfffff 	.word	0x3edfffff
 8004684:	3c8569d7 	.word	0x3c8569d7
 8004688:	3d4bda59 	.word	0x3d4bda59
 800468c:	bd15a221 	.word	0xbd15a221
 8004690:	bd6ef16b 	.word	0xbd6ef16b
 8004694:	3d886b35 	.word	0x3d886b35
 8004698:	bd9d8795 	.word	0xbd9d8795
 800469c:	3dba2e6e 	.word	0x3dba2e6e
 80046a0:	bde38e38 	.word	0xbde38e38
 80046a4:	3e124925 	.word	0x3e124925
 80046a8:	3eaaaaab 	.word	0x3eaaaaab
 80046ac:	be4ccccd 	.word	0xbe4ccccd
 80046b0:	08004ab8 	.word	0x08004ab8
 80046b4:	08004ac8 	.word	0x08004ac8
 80046b8:	7149f2ca 	.word	0x7149f2ca
 80046bc:	3f97ffff 	.word	0x3f97ffff
 80046c0:	bfc90fdb 	.word	0xbfc90fdb
 80046c4:	401bffff 	.word	0x401bffff

080046c8 <fabsf>:
 80046c8:	ee10 3a10 	vmov	r3, s0
 80046cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80046d0:	ee00 3a10 	vmov	s0, r3
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop

080046d8 <__udivmoddi4>:
 80046d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046dc:	9d08      	ldr	r5, [sp, #32]
 80046de:	460f      	mov	r7, r1
 80046e0:	4604      	mov	r4, r0
 80046e2:	468c      	mov	ip, r1
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d148      	bne.n	800477a <__udivmoddi4+0xa2>
 80046e8:	428a      	cmp	r2, r1
 80046ea:	4616      	mov	r6, r2
 80046ec:	d961      	bls.n	80047b2 <__udivmoddi4+0xda>
 80046ee:	fab2 f382 	clz	r3, r2
 80046f2:	b14b      	cbz	r3, 8004708 <__udivmoddi4+0x30>
 80046f4:	f1c3 0220 	rsb	r2, r3, #32
 80046f8:	fa01 fc03 	lsl.w	ip, r1, r3
 80046fc:	fa20 f202 	lsr.w	r2, r0, r2
 8004700:	409e      	lsls	r6, r3
 8004702:	ea42 0c0c 	orr.w	ip, r2, ip
 8004706:	409c      	lsls	r4, r3
 8004708:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 800470c:	b2b7      	uxth	r7, r6
 800470e:	fbbc f1fe 	udiv	r1, ip, lr
 8004712:	0c22      	lsrs	r2, r4, #16
 8004714:	fb0e cc11 	mls	ip, lr, r1, ip
 8004718:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 800471c:	fb01 f007 	mul.w	r0, r1, r7
 8004720:	4290      	cmp	r0, r2
 8004722:	d909      	bls.n	8004738 <__udivmoddi4+0x60>
 8004724:	18b2      	adds	r2, r6, r2
 8004726:	f101 3cff 	add.w	ip, r1, #4294967295	@ 0xffffffff
 800472a:	f080 80ee 	bcs.w	800490a <__udivmoddi4+0x232>
 800472e:	4290      	cmp	r0, r2
 8004730:	f240 80eb 	bls.w	800490a <__udivmoddi4+0x232>
 8004734:	3902      	subs	r1, #2
 8004736:	4432      	add	r2, r6
 8004738:	1a12      	subs	r2, r2, r0
 800473a:	b2a4      	uxth	r4, r4
 800473c:	fbb2 f0fe 	udiv	r0, r2, lr
 8004740:	fb0e 2210 	mls	r2, lr, r0, r2
 8004744:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8004748:	fb00 f707 	mul.w	r7, r0, r7
 800474c:	42a7      	cmp	r7, r4
 800474e:	d909      	bls.n	8004764 <__udivmoddi4+0x8c>
 8004750:	1934      	adds	r4, r6, r4
 8004752:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8004756:	f080 80da 	bcs.w	800490e <__udivmoddi4+0x236>
 800475a:	42a7      	cmp	r7, r4
 800475c:	f240 80d7 	bls.w	800490e <__udivmoddi4+0x236>
 8004760:	4434      	add	r4, r6
 8004762:	3802      	subs	r0, #2
 8004764:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8004768:	1be4      	subs	r4, r4, r7
 800476a:	2100      	movs	r1, #0
 800476c:	b11d      	cbz	r5, 8004776 <__udivmoddi4+0x9e>
 800476e:	40dc      	lsrs	r4, r3
 8004770:	2300      	movs	r3, #0
 8004772:	e9c5 4300 	strd	r4, r3, [r5]
 8004776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800477a:	428b      	cmp	r3, r1
 800477c:	d906      	bls.n	800478c <__udivmoddi4+0xb4>
 800477e:	b10d      	cbz	r5, 8004784 <__udivmoddi4+0xac>
 8004780:	e9c5 0100 	strd	r0, r1, [r5]
 8004784:	2100      	movs	r1, #0
 8004786:	4608      	mov	r0, r1
 8004788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800478c:	fab3 f183 	clz	r1, r3
 8004790:	2900      	cmp	r1, #0
 8004792:	d148      	bne.n	8004826 <__udivmoddi4+0x14e>
 8004794:	42bb      	cmp	r3, r7
 8004796:	d302      	bcc.n	800479e <__udivmoddi4+0xc6>
 8004798:	4282      	cmp	r2, r0
 800479a:	f200 8107 	bhi.w	80049ac <__udivmoddi4+0x2d4>
 800479e:	1a84      	subs	r4, r0, r2
 80047a0:	eb67 0203 	sbc.w	r2, r7, r3
 80047a4:	2001      	movs	r0, #1
 80047a6:	4694      	mov	ip, r2
 80047a8:	2d00      	cmp	r5, #0
 80047aa:	d0e4      	beq.n	8004776 <__udivmoddi4+0x9e>
 80047ac:	e9c5 4c00 	strd	r4, ip, [r5]
 80047b0:	e7e1      	b.n	8004776 <__udivmoddi4+0x9e>
 80047b2:	2a00      	cmp	r2, #0
 80047b4:	f000 8092 	beq.w	80048dc <__udivmoddi4+0x204>
 80047b8:	fab2 f382 	clz	r3, r2
 80047bc:	2b00      	cmp	r3, #0
 80047be:	f040 80a8 	bne.w	8004912 <__udivmoddi4+0x23a>
 80047c2:	1a8a      	subs	r2, r1, r2
 80047c4:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 80047c8:	fa1f fc86 	uxth.w	ip, r6
 80047cc:	2101      	movs	r1, #1
 80047ce:	0c20      	lsrs	r0, r4, #16
 80047d0:	fbb2 f7fe 	udiv	r7, r2, lr
 80047d4:	fb0e 2217 	mls	r2, lr, r7, r2
 80047d8:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 80047dc:	fb0c f007 	mul.w	r0, ip, r7
 80047e0:	4290      	cmp	r0, r2
 80047e2:	d907      	bls.n	80047f4 <__udivmoddi4+0x11c>
 80047e4:	18b2      	adds	r2, r6, r2
 80047e6:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 80047ea:	d202      	bcs.n	80047f2 <__udivmoddi4+0x11a>
 80047ec:	4290      	cmp	r0, r2
 80047ee:	f200 80e2 	bhi.w	80049b6 <__udivmoddi4+0x2de>
 80047f2:	4647      	mov	r7, r8
 80047f4:	1a12      	subs	r2, r2, r0
 80047f6:	b2a4      	uxth	r4, r4
 80047f8:	fbb2 f0fe 	udiv	r0, r2, lr
 80047fc:	fb0e 2210 	mls	r2, lr, r0, r2
 8004800:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8004804:	fb0c fc00 	mul.w	ip, ip, r0
 8004808:	45a4      	cmp	ip, r4
 800480a:	d907      	bls.n	800481c <__udivmoddi4+0x144>
 800480c:	1934      	adds	r4, r6, r4
 800480e:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8004812:	d202      	bcs.n	800481a <__udivmoddi4+0x142>
 8004814:	45a4      	cmp	ip, r4
 8004816:	f200 80cb 	bhi.w	80049b0 <__udivmoddi4+0x2d8>
 800481a:	4610      	mov	r0, r2
 800481c:	eba4 040c 	sub.w	r4, r4, ip
 8004820:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8004824:	e7a2      	b.n	800476c <__udivmoddi4+0x94>
 8004826:	f1c1 0620 	rsb	r6, r1, #32
 800482a:	408b      	lsls	r3, r1
 800482c:	fa22 fc06 	lsr.w	ip, r2, r6
 8004830:	ea4c 0c03 	orr.w	ip, ip, r3
 8004834:	fa07 f401 	lsl.w	r4, r7, r1
 8004838:	fa20 f306 	lsr.w	r3, r0, r6
 800483c:	40f7      	lsrs	r7, r6
 800483e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8004842:	4323      	orrs	r3, r4
 8004844:	fa00 f801 	lsl.w	r8, r0, r1
 8004848:	fa1f fe8c 	uxth.w	lr, ip
 800484c:	fbb7 f0f9 	udiv	r0, r7, r9
 8004850:	0c1c      	lsrs	r4, r3, #16
 8004852:	fb09 7710 	mls	r7, r9, r0, r7
 8004856:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
 800485a:	fb00 f70e 	mul.w	r7, r0, lr
 800485e:	42a7      	cmp	r7, r4
 8004860:	fa02 f201 	lsl.w	r2, r2, r1
 8004864:	d90a      	bls.n	800487c <__udivmoddi4+0x1a4>
 8004866:	eb1c 0404 	adds.w	r4, ip, r4
 800486a:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800486e:	f080 809b 	bcs.w	80049a8 <__udivmoddi4+0x2d0>
 8004872:	42a7      	cmp	r7, r4
 8004874:	f240 8098 	bls.w	80049a8 <__udivmoddi4+0x2d0>
 8004878:	3802      	subs	r0, #2
 800487a:	4464      	add	r4, ip
 800487c:	1be4      	subs	r4, r4, r7
 800487e:	b29f      	uxth	r7, r3
 8004880:	fbb4 f3f9 	udiv	r3, r4, r9
 8004884:	fb09 4413 	mls	r4, r9, r3, r4
 8004888:	ea47 4404 	orr.w	r4, r7, r4, lsl #16
 800488c:	fb03 fe0e 	mul.w	lr, r3, lr
 8004890:	45a6      	cmp	lr, r4
 8004892:	d909      	bls.n	80048a8 <__udivmoddi4+0x1d0>
 8004894:	eb1c 0404 	adds.w	r4, ip, r4
 8004898:	f103 37ff 	add.w	r7, r3, #4294967295	@ 0xffffffff
 800489c:	f080 8082 	bcs.w	80049a4 <__udivmoddi4+0x2cc>
 80048a0:	45a6      	cmp	lr, r4
 80048a2:	d97f      	bls.n	80049a4 <__udivmoddi4+0x2cc>
 80048a4:	3b02      	subs	r3, #2
 80048a6:	4464      	add	r4, ip
 80048a8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80048ac:	eba4 040e 	sub.w	r4, r4, lr
 80048b0:	fba0 e702 	umull	lr, r7, r0, r2
 80048b4:	42bc      	cmp	r4, r7
 80048b6:	4673      	mov	r3, lr
 80048b8:	46b9      	mov	r9, r7
 80048ba:	d363      	bcc.n	8004984 <__udivmoddi4+0x2ac>
 80048bc:	d060      	beq.n	8004980 <__udivmoddi4+0x2a8>
 80048be:	b15d      	cbz	r5, 80048d8 <__udivmoddi4+0x200>
 80048c0:	ebb8 0203 	subs.w	r2, r8, r3
 80048c4:	eb64 0409 	sbc.w	r4, r4, r9
 80048c8:	fa04 f606 	lsl.w	r6, r4, r6
 80048cc:	fa22 f301 	lsr.w	r3, r2, r1
 80048d0:	431e      	orrs	r6, r3
 80048d2:	40cc      	lsrs	r4, r1
 80048d4:	e9c5 6400 	strd	r6, r4, [r5]
 80048d8:	2100      	movs	r1, #0
 80048da:	e74c      	b.n	8004776 <__udivmoddi4+0x9e>
 80048dc:	0862      	lsrs	r2, r4, #1
 80048de:	0848      	lsrs	r0, r1, #1
 80048e0:	ea42 71c1 	orr.w	r1, r2, r1, lsl #31
 80048e4:	0c0b      	lsrs	r3, r1, #16
 80048e6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80048ea:	b28a      	uxth	r2, r1
 80048ec:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80048f0:	fbb3 f1f6 	udiv	r1, r3, r6
 80048f4:	07e4      	lsls	r4, r4, #31
 80048f6:	46b4      	mov	ip, r6
 80048f8:	4637      	mov	r7, r6
 80048fa:	46b6      	mov	lr, r6
 80048fc:	231f      	movs	r3, #31
 80048fe:	fbb0 f0f6 	udiv	r0, r0, r6
 8004902:	1bd2      	subs	r2, r2, r7
 8004904:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004908:	e761      	b.n	80047ce <__udivmoddi4+0xf6>
 800490a:	4661      	mov	r1, ip
 800490c:	e714      	b.n	8004738 <__udivmoddi4+0x60>
 800490e:	4610      	mov	r0, r2
 8004910:	e728      	b.n	8004764 <__udivmoddi4+0x8c>
 8004912:	f1c3 0120 	rsb	r1, r3, #32
 8004916:	fa20 f201 	lsr.w	r2, r0, r1
 800491a:	409e      	lsls	r6, r3
 800491c:	fa27 f101 	lsr.w	r1, r7, r1
 8004920:	409f      	lsls	r7, r3
 8004922:	433a      	orrs	r2, r7
 8004924:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 8004928:	fa1f fc86 	uxth.w	ip, r6
 800492c:	fbb1 f7fe 	udiv	r7, r1, lr
 8004930:	fb0e 1017 	mls	r0, lr, r7, r1
 8004934:	0c11      	lsrs	r1, r2, #16
 8004936:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800493a:	fb07 f80c 	mul.w	r8, r7, ip
 800493e:	4588      	cmp	r8, r1
 8004940:	fa04 f403 	lsl.w	r4, r4, r3
 8004944:	d93a      	bls.n	80049bc <__udivmoddi4+0x2e4>
 8004946:	1871      	adds	r1, r6, r1
 8004948:	f107 30ff 	add.w	r0, r7, #4294967295	@ 0xffffffff
 800494c:	d201      	bcs.n	8004952 <__udivmoddi4+0x27a>
 800494e:	4588      	cmp	r8, r1
 8004950:	d81f      	bhi.n	8004992 <__udivmoddi4+0x2ba>
 8004952:	eba1 0108 	sub.w	r1, r1, r8
 8004956:	fbb1 f8fe 	udiv	r8, r1, lr
 800495a:	fb08 f70c 	mul.w	r7, r8, ip
 800495e:	fb0e 1118 	mls	r1, lr, r8, r1
 8004962:	b292      	uxth	r2, r2
 8004964:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004968:	42ba      	cmp	r2, r7
 800496a:	d22f      	bcs.n	80049cc <__udivmoddi4+0x2f4>
 800496c:	18b2      	adds	r2, r6, r2
 800496e:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 8004972:	d2c6      	bcs.n	8004902 <__udivmoddi4+0x22a>
 8004974:	42ba      	cmp	r2, r7
 8004976:	d2c4      	bcs.n	8004902 <__udivmoddi4+0x22a>
 8004978:	f1a8 0102 	sub.w	r1, r8, #2
 800497c:	4432      	add	r2, r6
 800497e:	e7c0      	b.n	8004902 <__udivmoddi4+0x22a>
 8004980:	45f0      	cmp	r8, lr
 8004982:	d29c      	bcs.n	80048be <__udivmoddi4+0x1e6>
 8004984:	ebbe 0302 	subs.w	r3, lr, r2
 8004988:	eb67 070c 	sbc.w	r7, r7, ip
 800498c:	3801      	subs	r0, #1
 800498e:	46b9      	mov	r9, r7
 8004990:	e795      	b.n	80048be <__udivmoddi4+0x1e6>
 8004992:	eba6 0808 	sub.w	r8, r6, r8
 8004996:	4441      	add	r1, r8
 8004998:	1eb8      	subs	r0, r7, #2
 800499a:	fbb1 f8fe 	udiv	r8, r1, lr
 800499e:	fb08 f70c 	mul.w	r7, r8, ip
 80049a2:	e7dc      	b.n	800495e <__udivmoddi4+0x286>
 80049a4:	463b      	mov	r3, r7
 80049a6:	e77f      	b.n	80048a8 <__udivmoddi4+0x1d0>
 80049a8:	4650      	mov	r0, sl
 80049aa:	e767      	b.n	800487c <__udivmoddi4+0x1a4>
 80049ac:	4608      	mov	r0, r1
 80049ae:	e6fb      	b.n	80047a8 <__udivmoddi4+0xd0>
 80049b0:	4434      	add	r4, r6
 80049b2:	3802      	subs	r0, #2
 80049b4:	e732      	b.n	800481c <__udivmoddi4+0x144>
 80049b6:	3f02      	subs	r7, #2
 80049b8:	4432      	add	r2, r6
 80049ba:	e71b      	b.n	80047f4 <__udivmoddi4+0x11c>
 80049bc:	eba1 0108 	sub.w	r1, r1, r8
 80049c0:	4638      	mov	r0, r7
 80049c2:	fbb1 f8fe 	udiv	r8, r1, lr
 80049c6:	fb08 f70c 	mul.w	r7, r8, ip
 80049ca:	e7c8      	b.n	800495e <__udivmoddi4+0x286>
 80049cc:	4641      	mov	r1, r8
 80049ce:	e798      	b.n	8004902 <__udivmoddi4+0x22a>

080049d0 <_init>:
 80049d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049d2:	bf00      	nop
 80049d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049d6:	bc08      	pop	{r3}
 80049d8:	469e      	mov	lr, r3
 80049da:	4770      	bx	lr

080049dc <_fini>:
 80049dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049de:	bf00      	nop
 80049e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049e2:	bc08      	pop	{r3}
 80049e4:	469e      	mov	lr, r3
 80049e6:	4770      	bx	lr
